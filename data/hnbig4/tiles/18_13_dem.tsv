id	label	hovertext	author	x	y	type	relevance	size	year	umap1d
33099248	>> Should I use flakes or not? Every	">> Should I use flakes or not? Every single library I find is a Nix Flake, but insists that Flakes are experimental.> In this case, ""it's experimental"" should be read as ""maybe the team will decide to make changes"", rather than ""it's not going to work half the time"".This I think is part of the problem. People see the ""experimental"" label and don't understand that it's not ""experimental"" in the sense they're used to. Maybe labeling flakes as a ""beta"" feature and featuring the documentation more prominently would ease the confusion."	nonbirithm	14.899076	8.467837	comment	3.0	10.0	1664993999	10.644137
33276553	I upgraded from Ubuntu 20.04 to 22.0	I upgraded from Ubuntu 20.04 to 22.04 recently, and am experiencing issues where Firefox feels sluggish and X hangs for a second when I type in the terminal too quickly. Makes me wanna move away from Ubuntu. Also the idea of these major updates where the package manager mutates half the filesystem for 30 minutes straight sounds like a super brittle procedure, and snaps seem to address this, except that it feels wrong to have every package vendor its deps. I'd like to have nixos without the learning curve please...	stabbles	14.895415	8.456529	comment	3.0	15.0	1666281132	-9.290453
33295505	I just had NixOS break in a weird wa	I just had NixOS break in a weird way for me. Ok, it was more that Gnome 42.4 broke the wsmatrix extension, which caused Gnome to shit itself[1] on login.It's a little bit of a double edged sword. NixOS lets me use pretty much straight upstream packages, which sometimes break due to not having thorough integration testing like a traditional distro would. On the other hand, I was able to just boot up an older configuration to get back to functional, and that let me figure out wtf was wrong.[1]: https://github.com/mzur/gnome-shell-wsmatrix/issues/236	gaganyaan	14.898466	8.463409	comment	3.0	11.0	1666410269	10.578714
33296266	Try a buggy kernel and breaking your	Try a buggy kernel and breaking your network in one `nixos-rebuild switch`, garbage-collecting older working generations and trying to fix your config back into working state. Great fun.Other than that, NixOS is a godsend.	ZoomZoomZoom	14.898151	8.462466	comment	3.0	14.0	1666423686	10.56968
26688050	So you just shifted your dependency 	So you just shifted your dependency from Docker to Nix. It might be more fun and an intetesting learning experience but also it's more complicated (or at least it's not that widely used like Docker is)	darkwater	14.8956375	8.456279	comment	3.0	14.0	1617528821	-9.384754
26730532	Nix helps with this. Or at least it 	Nix helps with this. Or at least it intends to. I still need to track down what's vulnerable and what isn't, but most of my setup is reproducible thanks to Nix.	eptcyka	14.898501	8.463076	comment	3.0	13.0	1617826415	10.461416
26748897	As an aside, I've just started tryin	As an aside, I've just started trying to move my laptop to NixOS this past week, so far it seems pretty nice. I have a Macbook as well, and I think I should be able to share the Nix stuff with that - which would be cool.As for the article, I hadn't actually considered using it as a replacement for Ansible etc - but I could see why it might work better. I could pin packages etc to the versions, and get the exact same thing each time - no guarentee with ansible etc that the apt repository hasn't been updated since the last install.I think the whole Nix thing is an interesting idea, and I like the ideas behind it, I haven't played enough with it yet to dare use it in production (or on my main desktop for that matter) but it is certainly a tempting idea.	bennyp101	14.899862	8.464256	comment	3.0	10.0	1617965632	-9.377035
26749369	My dream tutorial shows how to move 	My dream tutorial shows how to move from what I have to the new thing, because that teaches me what new ways of thinking I need to adopt.Like right now at work we have a small team making a website with docker-compose to specify the dev environment, pip-tools to pin python dependencies, and saltstack to deploy new state to bare metal in production.How exactly, command by command, would nix solve the same problems? What would change from my current solution? How would I think differently? How would my life get better? What parts wouldn't be solved and I'd have to keep some of the old stuff around?Those are the tutorials that convince me to switch, because they get me over the hump of not getting the new paradigm, and being afraid of the downsides I don't know about yet. It's tricky because 	JackC	14.89831	8.462984	comment	3.0	11.0	1617969550	-9.364465
26749652	A lot of this sounds familiar to me—	A lot of this sounds familiar to me— I maintain a hodgepodge build tool/pipeline at my org whose current output is a monolithic mega-deb file which is becoming unwieldy on several fronts (storage, transfer, compression time). I'm really interested in the nix philosophy of separate paths and versioning by hash rather than number, but unfortunately my needs are quite specific, and not having actual experienced nix experts around is a barrier. The temptation right now is to roll our own solution which generates nix-style hash debs that otherwise cooperate with the larger Debian ecosystem we're already very familiar with, but I could probably be sold on giving nix itself a closer look if I could hear from folks (or get pointers to documentation) on a few key points:- What is the story in nix f	mikepurvis	14.897471	8.462179	comment	3.0	19.0	1617971196	-9.39908
26750606	"> If you use Nix in a ""drive-by"" kin"	"> If you use Nix in a ""drive-by"" kind of way, it's very hard to make any inroads into the language. The documentation and tutorials are not really intended for a casual user - it is expected you will sit down with the Nix site like a good book, and go at it from start to finish. If (like me) you instead touch Nix little and often, doing small invocations or on-the-fly editing, the docs are much less useful.This is super serious, major, I hope the devs are paying attention.Most users of anything are drive-by, rather casual users. Think of any big tech out there: they became popular precisely because they were easy to get started (at least back when they were launched/became popular): C, Unix, Bash, Perl, PHP, MySQL, Javascript, Java, Ruby, Go, etc. Almost everything that's big was usable by"	oblio	14.89883	8.4635515	comment	3.0	15.0	1617976462	10.53744
26752818	> You can also stub the hash (e.g. w	> You can also stub the hash (e.g. with lib.fakeSha256). nix-build will fail with a hash mismatch and tell you the correct hash.Are you kidding me?	mdoms	14.898579	8.463326	comment	3.0	10.0	1617986876	-9.456877
37772556	Because I don't want to learn anothe	Because I don't want to learn another complex DSL just to install some packages. Whether Nix is the promised land or not, Brew works just fine 99% of the time and I have stuff to do.	cedws	14.895898	8.459039	comment	3.0	22.0	1696457761	-9.228151
37819192	Flakes has an unfortunate past [1]. 	Flakes has an unfortunate past [1]. The fact that so many people are using Flakes now and treating them as stable makes it effectively impossible to make drastic changes, even though the design is flawed in many ways [2]. Nevertheless, the Nix team is discussing the stabilisation in recent weeks, with the tendency to not make breaking changes, but improving the design in the long term.[1]: https://nix.dev/concepts/faq#why-are-flakes-controversial[2]: https://discourse.nixos.org/t/experimental-does-not-mean-uns...	infinisil	14.898965	8.466583	comment	3.0	17.0	1696850568	10.632177
37821702	Quite the contrary. Home-manager is 	Quite the contrary. Home-manager is literally the only thing that's worth using Nix. Anything beyond that is far too esoteric, unsupported, non backward compatible and continuously broken.My dotfiles managed by nix(-darwin) and home-manager breaks every time I update my pins, and I find myself having to bisect which commit introduced the issues. Given that, I just don't see how that would scale to a full OS, let alone to a team at work. 1000% better simpler with understandable Dockerfile and Kubernetes YAML manifests, or with Ansible YAML. At least every folk can StackOverflow and ChatGPT it to a working state, and have it work for a considerable amount of time without further maintenance.	menthe	14.897265	8.46129	comment	3.0	12.0	1696866836	-9.424982
14927165	Nix is much easier than it used to b	Nix is much easier than it used to be, assuming you go all-in. Specifically, NixOS is; nix-without-NixOS has weird corners.If you haven't tried it in the last year or two, then you might want to give it another try. Keep to some simple rules:- Look for 'enable' toggles for particular software (for configuration.nix), rather than adding just the package. If it exists, use it; it wraps any extra configuration that's needed.- Don't use nix-env. If you want a package installed temporarily, use nix-shell. Your system is probably single-user anyway, right? This way you can put configuration.nix in git.- If you must use unpackaged software, then install and use steam-run. Despite the name, it's really just an Ubuntu-esque chroot. (...which duplicates the Steam runtime environment, yeah.)Forcing p	Filligree	14.899804	8.464253	comment	3.0	14.0	1501834238	-9.334972
15011669	maybe they should switch to Nix... w	maybe they should switch to Nix... wait!	k__	14.898614	8.464365	comment	3.0	24.0	1502737768	10.567975
12631618	The main issue I had while using Nix	The main issue I had while using NixOS is that it has a small and somewhat broken set of packages. This is compounded by the very incomplete Nix documentation - its way too hard to create new packages.	bkjsbkjdnf	14.8988695	8.4636755	comment	3.0	11.0	1475531235	10.52641
12631855	If you found out through gdb that yo	If you found out through gdb that your code compiled with -O0 was still somehow optimized by gcc, or if you found out that your gcc did not optimize your code aggressively enough although you gave it -Ofast, check out this issue [0].[0] https://github.com/NixOS/nixpkgs/issues/18995Yeah.  The devs believed it was okay to make gcc -O2 by default and impossible to override from the command line you gave to gcc.If you encountered this issue I hope google could quickly bring you to that issue on github.  Good luck and don't waste hours to figure out why.	jxy	14.898712	8.463699	comment	3.0	10.0	1475533324	10.5669365
12631682	Quick question, the url https://nixo	Quick question, the url https://nixos.org/nixos/download.html lists the same url for both 32 and 64bits iso, I wonder if these are multiarch images or just an error.	agumonkey	14.900374	8.466655	comment	3.0	11.0	1475531688	10.55937
27505618	Is there greater context here that h	Is there greater context here that helps explain what's going on? Reading the comments in the thread didn't clarify much for me as someone unfamiliar with NixOS, their apparently unique Python packaging scheme, and Home Assistant.	63	14.898559	8.463647	comment	3.0	32.0	1623692671	10.616116
27506340	I think there’s some emotional nuanc	I think there’s some emotional nuance here. After a certain point he basically said all of  his technical justification and the request does boil down to “because I said so and I’m the author.” The Nix maintainers explicitly do not want to respect the author’s wishes (which is fine) but that makes the whole thing turn adversarial because “okay we won’t include it” wasn’t even something the maintainers considered for even a second. It was pretty level headed discussion until it was clear that their only motivation was getting to yes or enough justification to ignore him.	Spivak	14.894429	8.457525	comment	3.0	11.0	1623695469	0.4127793
27506442	Unfortunately, the founder of Home A	"Unfortunately, the founder of Home Assistant has acted similarly too. When NixOS maintainers raised concerns, he accused them of having ""no intention to contribute anything positively."" This was despite NixOS maintainers' best efforts to engage in a civil discussion.To make matters worse, he even used the fact that the NixOS discussion was temporarily locked down due to high tensions and accused NixOS maintainers of attempting to shift the maintenance burden on Home Assistant, which is hardly what all this is about.https://community.home-assistant.io/t/consider-to-avoid-addi..."	soraminazuki	14.8989315	8.464253	comment	3.0	10.0	1623695862	10.566613
27574166	This smaller bootstrap seed thing is	This smaller bootstrap seed thing is a different problem from reproducible builds. nixpkgs does still have a pretty big initial TCB (aka. stage0) compared to Guix. But as far as I can tell NixOS has the upper hand in terms of how much can be built reproducibly (aka. the output hash matches across separate builds).	delroth	14.898354	8.463233	comment	3.0	11.0	1624225165	-9.43333
27577280	I think build reproducibility is a c	"I think build reproducibility is a cargo cult.Most people here are debating you on the security angle, but in the case of Nix (and Guix) there is another important angle - reproducible builds make a content-addressed store possible.In Nix, the store is traditionally addressed by the hash of the derivation (the recipe that builds the package). For example, lr96h... in the path    /nix/store/lr96h3dlny8aiba9p3rmxcxfda0ijj08-coreutils-8.32

is the hash of the (normalized) derivation that was used to build coreutils. Since the derivation includes build inputs, either changing the derivation for coreutils itself or one of its inputs (dependencies) results in a different hash and a rebuild of coreutils.This also means that if somebody changes the derivation of coreutils every package that depend"	danieldk	14.900274	8.466563	comment	3.0	11.0	1624263518	-9.382524
27624763	NixOS is the perfect OS for embedded	NixOS is the perfect OS for embedded Linux use, and I'm surprised that it hasn't seen any commercial uptake. I hope that some company adopts it for an IoT product or something so that it gets some love. I've been messing around on a Raspberry Pi and Beaglebone today with Debian, and I'm constantly frustrated having to use an imperative OS. I'm not using NixOS because even though it officially supports Raspberry Pi 3, I have not found it to be stable on that platform.I'm excited about Mobile NixOS though. I've found the NixOS community to be motivated and friendly, but there is only so much progress that a small group of volunteers can make.	erikw	14.896865	8.458988	comment	3.0	12.0	1624573963	10.53136
27825902	We've just made Nix support Apple Si	We've just made Nix support Apple Silicon natively!I've also been working on tutorials for beginners at https://nix.dev, for example how to set up declarative developer environments.	domenkozar	14.900958	8.466003	comment	3.0	13.0	1626208178	10.51878
27825632	To others who might be interested in	To others who might be interested in trying Nix instead of Homebrew:There is a `brew install` equivalent in vanilla Nix -- `nix-env` provides an imperative interface pretty similiar to `brew`.`nix-darwin` is a third-party thing that tries to give you a NixOS-like experience on macOS. It's not necessary if you're only interested in replacing Homebrew. You can have `shell.nix` files and ad-hoc environments without replacing your entire system configuration.Vanilla Nix is very well isolated, and you can try it side by side with Homebrew to see how you like it -- one of the nice side effects of Nix-installed software being independent from the rest of your system is that, well, you can install whatever you want without breaking the Homebrew equivalents. For example instead of putting binaries 	ianthehenry	14.898099	8.462534	comment	3.0	20.0	1626206763	-9.30574
35167222	> worlds better than the old ways of	> worlds better than the old ways of managing dependencies and making sure everyone on a project is aligned on what versions of things are installed.And Nix is worlds better than even this. Imagine!	pmarreck	14.898276	8.462771	comment	3.0	26.0	1678883330	-9.363637
35173231	except you cant deploy Nix files, an	except you cant deploy Nix files, and even if you could, better be sure that every employee is using Nix and have the same configuration. The whole point of docker is to make reproducible builds everywhere, not just your computer.	poolopolopolo	14.896909	8.459108	comment	3.0	13.0	1678907373	-9.376008
35177800	Maybe don't pretend a trivial semant	"Maybe don't pretend a trivial semantic difference due to your point of view means I don't know what I'm talking about. Yes, Nix only alters environmental variables, but guess what, that's pretty much what Snaps do too plus a bit of bind use. The fact that people are constantly asking ""Will Nix Overtake Docker"" is another hint about actual usage.Snaps bind in the libs, Nix sets env variables to set the available libs. The goal and end results are the same. The difference is more marketing than anything else."	superkuh	14.896568	8.459439	comment	3.0	11.0	1678937363	-9.367384
35184108	The caching trick for libsolv here c	The caching trick for libsolv here could be a game changer for performance in a lot of Linux distro package managers, where libsolv's completeness comes at a substantial performance cost.I've never looked too deeply into how conda works because I'm not that into Python, but I guess I should. It seems there are some valuable general lessons here— I wish that more package managers, and in particular, Nix, maintained more version combinations in their repos. Searching through Nixpkgs commits to find compatible versions of things because you have to rely on the implicit versioning of the monorepo sucks.Adding dependency resolution to Nix as it stands would normally add a big performance cost. Something like this would help with that problem a lot, and Nix already usually runs with a persistent	pxc	14.897684	8.4621	comment	3.0	15.0	1678983663	-9.429203
35188362	How do I run the ecosystem the docke	How do I run the ecosystem the docker already has with nix alone?It's not just the runtime.	mekster	14.897286	8.460391	comment	3.0	13.0	1678999834	-9.399578
35212969	I personally would prefer a build an	"I personally would prefer a build and environment tool which uses the modern Linux namespaces to prepare isolated filesystems without needing to reinvent a whole bunch of wheels.A number of problems that I would like to be fixed:
- Post-build patches to insure correct shared library paths in artifacts due to requirement to use absolute /nix/store instead of using the traditional Linux filesystem.
- Numerous wrappers around existing build tools to move dependencies into nix packages to generate stuff like Cargo.nix.
- Not so good handling of content-addressable packages due to historic cruft.
- Horrible-horrible way to compute runtime-dependencies of packages [1]. This may be okay as a heuristic to initialize a project, but in the end it must be tweakable manually.I see a future where a pac"	vilunov	14.897442	8.460691	comment	3.0	11.0	1679172632	-9.319282
35216578	I like the principle of Nix that one	I like the principle of Nix that one can simultaneously install different versions of the same software and make layered choices of what version to use with what or depending on the use case. Nix has spearheaded that principle and that's great.That being said, that fine-grained layering selection is done via symlinks in Nix afaik, whereas a couple newer packaging systems (e.g. OCI containers or flatpak) can do such layering with newer stuff like bind mounts and namespaces+sandboxing (and I don't just mean sandbox for build time but for run time) and thus increase the security by selectively choosing what a package is supposed to have access to. I wonder how fast Nix will adapt to such new possibilities. I think it should do so quickly (e.g. switch to OCI as the underlying layering system; 	EntrePrescott	14.898286	8.463368	comment	3.0	14.0	1679207667	-9.3827305
35239166	Main differences with Nix:* Spack ha	Main differences with Nix:* Spack has a dependency solver (concretizer).  nixpkgs is managed by humans who do the dependency solving for you over time.  What this means practically is that you can install 5 versions of some package with different dependencies and flag combinations with a few commands in Spack, while with Nix you would probably need to check out different commits of the nixpkgs repo and maybe do some hacking on nix derivations to get the same thing.  Spack is fundamentally designed to help with combinatorics.* Nix builds all the way down to libc; Spack (currently) doesn't -- it's designed to live on an existing system.* Nix build environments are isolated (but require root to run); Spack's aren't as completely isolated and don't require root (so you can run Spack in your ho	tgamblin	14.898282	8.463804	comment	3.0	10.0	1679348414	-9.322592
35261658	I'm unsatisfied with the current sit	"I'm unsatisfied with the current situation too, but it's a hard problem. You can either go full container (which means no BSD, and having to deal with Docker or Kubernetes and all the associated woes), or fallback to native packages which are a huge PITA to build, deploy and use.I think that Nix and Guix have part of the solution: have a way to build fully independent packages that can be easily installed. But I'm not comfortable with the complexity of Nix, and Guix does not run on FreeBSD. And ultimately you still have to handle distribution and configuration of the base system you deploy on.Innovation is possible, but there are a lot of expectations for any system
dealing with building and deploying software. I feel that there are
fundamental limitations inherited from the way UNIX OS wo"	galdor	14.89491	8.455634	comment	3.0	10.0	1679495653	-9.353394
35315651	I see a lot of smart people recommen	I see a lot of smart people recommending Nix, but whenever I look at it, it seems like there are a ton of sneaky config options that one must get right to get a working system...	aftbit	14.899169	8.464018	comment	3.0	10.0	1679845285	10.5158615
35449732	Hah I too have a 2013 Air that's col	Hah I too have a 2013 Air that's collecting dust with its 4GB RAM that I want to boot NixOS on. Thanks for the nudge.	whateveracct	14.898215	8.462782	comment	3.0	14.0	1680673023	10.594225
15269987	In view of some replies downthread: 	"In view of some replies downthread: yes, application-level management is entirely possible with Nix(OS).Currently, this works best for Haskell, for which there is a sizeable amount (relatively speaking) of Nix tooling available. This is largely because a lot of Nix(OS) users also use Haskell, perhaps because lend themselves to very similar modes of ""declarative"" thinking.This is a thorough, excellent guide on how to develop Haskell projects with Nix, including managing non-Haskell dependencies (zlib, SDL, ncurses, and so on):https://github.com/Gabriel439/haskell-nix/I only started using NixOS about a month ago, and it's fantastic. The best part is that binary caches are available for almost everything, so the hitherto-painful step where one compiles Haskell dependencies locally has been co"	mrkgnao	14.89903	8.4644985	comment	3.0	21.0	1505661445	-9.355378
15359515	We have Guix as a system configurati	We have Guix as a system configuration/package manager, the GNU Shepherd as an init, and the GuixSD initrd itself, all of which are written in Guile Scheme.With the GNU Hurd important parts of the OS could be written in Scheme as well.The problems start with the desktop, where we don't really have anything that's well-integrated and lispy.  Sure, there's StumpWM (Common Lisp), and there's Emacs, but they are separate programmes and there's no link between them.There is McCLIM[1], a GUI toolkit which looks like a continuation of lisp machine ideas, but as far as I know it does not have an active community (unlike Guix and Guile, whose communities actively work on a Scheme-powered operating system).[1]: https://common-lisp.net/project/mcclim/excite.html	rekado	14.879548	8.426309	comment	3.0	28.0	1506622590	-10.130376
15478583	For my practical reasons I can not u	"For my practical reasons I can not use pure GNU distributions, I am not aware of easy community way to re use packages for other distro or something hacky like that. Not everyone have brainpower and time to build custom packages for rare distro, it is a shame, I really like Guix.
NixOS got some recepies for using not 100% libre software."	gcoda	14.884559	8.440432	comment	3.0	12.0	1508093631	10.469672
15478754	Nice. I started using macOS 5 months	Nice. I started using macOS 5 months ago and it felt a bit as a step back coming from Linux.Does Nix work good with macOS?	k__	14.897068	8.459383	comment	3.0	12.0	1508095196	10.586598
15479236	Naive question:Isn't all that also t	Naive question:Isn't all that also true for Guix?If so, why do your prefer Nix over Guix?	vog	14.882164	8.435338	comment	3.0	23.0	1508100732	10.52986
15479768	To me, when i look at new distro, i 	To me, when i look at new distro, i look for how well the repo covers binary packages, i have no time/resource to build compilers/big projects. Last time i checked nix, there aren't that many packages in repo to be usable on laptop.But the package manager itself might be a good idea for dev environments, but all the languages i use provide similar facility(not counting system-library dependencies).	xfer	14.897493	8.460863	comment	3.0	11.0	1508107561	-9.312626
15480112	I'm a big fan of Nix, but I really w	I'm a big fan of Nix, but I really with there was a declarative way to define a user's environment similar to what NixOS has with /etc/nixos/configuration.nix.It seems a little strange to me to have a functional package manager, but an imperative package install process.  I think there are a few projects like NixUP and home-manager that are looking to address this, but I'm hoping Nix will provide an official way to do it.	k2enemy	14.902844	8.467896	comment	3.0	14.0	1508113642	-9.343699
15734704	What I'd really love to see is a mar	What I'd really love to see is a marriage between NixOS and Qubes, allowing for full-system declarative configuration, including the various systems which will be running under Qubes.NixOS has containers that show how this could work, but they're only via systemd-nspawn, so not as jailed as Qube's domUs.	Jeaye	14.892781	8.450621	comment	3.0	17.0	1511111553	-9.390512
37955458	"""How easy that would have been to fi"	"""How easy that would have been to fix in OS/2 and REXX""I loved REXX when I used OS/2. Besides using it for scripting, I wrote a few programs using Watcon VX-REXX which was similar to Visual Basic but used REXX. I was most proud of the graphical ftp program I created. I uploaded it to the OS/2 BBS but can't find it in any of the archives of the site.In the mid-2000s I used REXX one final time to program an IVR system. I was not and had never been a developer by profession but I was the only one with any familiarity with REXX, so it fell to me."	tssva	14.883298	8.43591	comment	3.0	13.0	1697807008	-8.562315
38058526	> Sorry for being dense, but I thoug	> Sorry for being dense, but I thought one of the main reason for nixos's existence is reproducibilty. I thought they have these kinds of things solved already.Nixos has the advantage that everything is built in its own sandbox with only its explicitly declared (and hashed) dependencies available, unlike in mainstream distros where it's the full system environment, so in many cases you already get the same binary every time. But this doesn't immediately lead to reproducibility because the build process might be nondeterministic for various packages.	chpatrick	14.898624	8.46413	comment	3.0	11.0	1698586690	-9.397113
38060031	How is that possible? Is nixpkgs an 	"How is that possible? Is nixpkgs an input to the Python derivation? Or do packagers ""hard code"" a value every time they modify the Python build code? Automated tooling that sets it after pull requests? Something else? :-)"	mbakke	14.899361	8.465319	comment	3.0	10.0	1698596465	-9.412657
38066628	Nixos is a perfect toy for techies w	Nixos is a perfect toy for techies with too much free time. Decades ago it would be *BSD, Gentoo, Arch and so on.Opensuse with snapshots and some repo magic, can do 99% of functionality, without learning yet another abstraction layer. But dealing with RPMs is very unsexy.	Thrir94994i	14.898025	8.463397	comment	3.0	11.0	1698651400	10.50442
38108935	Hey, I have a pretty extensive Emacs	Hey, I have a pretty extensive Emacs configuration [1] on my Macbook using Nix, nix-darwin, and the Nix community Emacs overlay. It's been stable across multiple OS updates, and if minor stuff breaks 99% of the time an issue is already open as it's broken for everyone. Really, Nix is pretty awesome for the dev environment use case; bore yourself through the syntax and be rewarded with an easily reproducible system.[1] https://github.com/dustinlyons/nixos-config	dlyons	14.894756	8.458473	comment	3.0	10.0	1698898677	-9.543608
38240974	I love nix. I have also wasted far t	I love nix. I have also wasted far too much time trying to write my own expressions when just typing “brew install ___” would have let my get back to work.My biggest issue with homebrew is you’re always at head and you always upgrade the world. This is not good when you want repeatable things to happen.  My second biggest issue with nix is you can pin things, but it’s pinned to some obtuse hash of the world. I build embedded code and I just want my toolchains to work perfectly, including avoiding the weird cmake bug in >3.25 that keeps dropping —std=20 from my arguments and then failing to build my “modern” c++ code. The amount of work this takes is too damn high with both brew and nix.Previously, I worked on and delivered a developer command line Swiss Army knife type tool, you have proba	MarkMarine	14.897967	8.462858	comment	3.0	16.0	1699802962	-9.353339
38242334	By the way, how production-ready is 	By the way, how production-ready is nixos-infect for installing NixOS on VPSes that don't support NixOS out of the box? I've been meaning to do some new deployments with NixOS, and nixos-infect seems to be the recommended way from several resources, but the warning on nixos-infect's README scares me a little.	qazxcvbnm	14.8984995	8.463616	comment	3.0	15.0	1699810818	-3.0680244
38254377	Arch, Gentoo and NixOS also exist…	Arch, Gentoo and NixOS also exist…	Filligree	14.897109	8.460775	comment	3.0	10.0	1699904714	10.575863
38254920	After 10 years of loyal Ubuntu usage	After 10 years of loyal Ubuntu usage on all my servers, I have gone with NixOS and I have to say that it's not nearly as difficult as I thought it would be. Home Manager and graphical apps can be a pain, but server side stuff is much,  easier IMO and this is now my go-to server distro, where it's available. Postgres, NGINX, HaPROXY, even tougher stuff like Yggdrasil Network, all really easy to configure, though I haven't done any containerisation workloads (yet).	vegabook	14.897084	8.459179	comment	3.0	11.0	1699907201	10.521501
38501453	It's not simple. The nix programming	It's not simple. The nix programming language is like untyped ML. Most people aren't used to it and even if you are familiar with it it gets hella hard to read. Learning curve is huge.One docker file and a poetry file works just as well. And is simpler. It's literally the same thing but using os primitives to manage the environment rather then shell tricks. Makes more sense to me to use a dedicated os primitive for the task it was designed to be used for.Additionally docker-compose allows you to manage a constellation of environments simultaneously. This is nowhere near as straightforward with nix.I love nix but being honest here. It's not definitively the best.The biggest reason right now to avoid it is adoption. Most people won't know what to do with a shell.nix	corethree	14.897573	8.461096	comment	3.0	19.0	1701546968	-9.348957
27129071	Many design decisions are different.	"Many design decisions are different. Nix and Guix are each other's Bizarro. It's a common misconception that Guix is just ""Nix with Scheme"" or ""Nix without systemd"" but those are frankly the least interesting differences.An example is that the package definitions sit in the same repo as the package manager, freeing the definition language to evolve without regard for compatibility (because they will always be read by the correct version of Guix) whereas Nix has to freeze the definition language and always test that old definitions work. Obviously there are pros and cons to each approach. https://guix.gnu.org/blog/2018/multi-dimensional-transaction..."	medstrom	14.888201	8.445666	comment	3.0	21.0	1620819088	10.540264
27138939	Nix plus homemanager plus direnv is 	Nix plus homemanager plus direnv is the best solution I have found so far. Managing config (dotfiles) is only one part of the problem. You usually also need some way to install applications/tools ideally in a specific version. your config might not work as expected with a different version and you would have to remember what exactly you installed. As a developer using direnv will even allow you to use different versions of tools for different projects/ directories	kohlerm	14.898162	8.46274	comment	3.0	11.0	1620885849	10.558212
27270162	This wouldn’t be Hacker News without	This wouldn’t be Hacker News without pedantic corrections, but the title should really say “every programming language in Nix”.	saagarjha	14.898536	8.464195	comment	3.0	10.0	1621893414	10.51805
27294250	I'd been wondering how good pgksrc i	I'd been wondering how good pgksrc is on macOS for a little while, previously having used Homebrew wherever Nixpkgs was inconvenient or incomplete. Could pkgsrc could be a better choice?pkgsrc is relatively nice for a cross-platform, source-based package manager in the old style, in that it provides convenient binary caches for most use cases.I wonder: Has the writer of the post in the OP tried any next-gen source-based package managers, where the kind of isolation he describes as desirable between system and user packages is guaranteed between all packages altogether?	pxc	14.892748	8.450138	comment	3.0	35.0	1622053626	-9.118663
27324164	Summer of Nix	Summer of Nix	jiehong	14.897475	8.463184	story	3.0	38.0	1622282166	10.546383
27347908	How do NixOS users typically manage 	How do NixOS users typically manage software that is not a Nix package, like a source code tarball where you would traditionally run configure && make && make install?	ridiculous_fish	14.900279	8.465966	comment	3.0	10.0	1622494114	-9.372103
27370224	> So if I understand correctly, I co	"> So if I understand correctly, I could declaratively specify my workstation, say I want vim, podman, codium, kubectl, curl, tmux, firefox, zettlr. I could put this in a configuration and have my workstation anywhere I can grab that from?Kind of. It works very well if you own multiple computers that you want to be configured similarly (like a dotfiles repo on steroids).It doesn't work so well for I borrowed my coworker's computer for 5 minutes and want to use my own Vim configuration.However, Nix does also supply the ""nix run"" command, which allows you to use software without installing it permanently (but without NixOS' configuration support).> Is there some way I can boot-to-git-configuration? So I could do this in RAM on someone else's hardware, like a network boot?Yes. You could either"	Nullabillity	14.897575	8.461277	comment	3.0	18.0	1622649530	-9.379719
27370227	How is managing python packages or r	How is managing python packages or ruby gems on NixOS? I remember the experience was not polished a few years ago.	kovek	14.898305	8.463353	comment	3.0	11.0	1622649539	-9.378691
27369877	Could you briefly mention an example	Could you briefly mention an example of something that is difficult/impossible without first learning about Nix internals, and allude to what kind of internals need to be learned?	gugagore	14.897543	8.462408	comment	3.0	11.0	1622648040	10.572338
27370343	I really can't believe they didn't f	"I really can't believe they didn't finalize Flakes in this release. The difference between it and the ""standard"" way of doing things is night-and-day.these sort of ""secret better ways of doing things"" that are not the default really frustrate and drive away new users"	_huayra_	14.898744	8.468056	comment	3.0	12.0	1622650076	10.678152
27479648	I honestly believe that Guix will ev	I honestly believe that Guix will eventually pull out ahead of NixOS, simply because its going to be part of Debian 11.  NixOS is a bit easier to set up and use for now, especially for provisioning simple linux servers around commonly used packages.	thinkyfish	14.88843	8.446085	comment	3.0	15.0	1623453325	10.549549
27479658	Guix use Scheme/Guile. It's way sane	Guix use Scheme/Guile. It's way saner that the Nix custom language. The biggest pro/cons is that they are flexible dynamic languages. So when you define your deployment, you need to code very defensively because no type system will support you and find mistakes.	cedricgle	14.88491	8.441472	comment	3.0	24.0	1623453374	10.535611
27479691	Practical questions: I’d love to try	Practical questions: I’d love to try this out for my personal desktop/laptop, but I’ve been really pampered by the Arch repositories. What is the extent of completeness in supporting practically important daily use software? Are there parallel repositories supporting the non-libre packages that one might occasionally need? Is there an easy way to construct Guix recipes from another Linux system — say Debian, or Fedora or Arch?	ssivark	14.883108	8.43623	comment	3.0	29.0	1623453588	10.532585
27480719	Guix is pretty cool, and I'll probab	Guix is pretty cool, and I'll probably switch to it one day.But as of now, it lacks some basic stuff like KDE suit. The nonguix channel AFAIK doesn't have binary builds so you'll be building quite a few packages yourself. Using nonguix also means you can't expect support in official support channels. Just something to know before you start.	e3bc54b2	14.879584	8.432484	comment	3.0	12.0	1623463226	10.527
27480015	"The main guix ""channel"" (that's what"	"The main guix ""channel"" (that's what it's called) contains more than 17.000 packages. Some software is hard to package, but I can't think of anything that's missing from the repository. You can have a look at the list of packages at https://guix.gnu.org/en/packages/ (note that firefox for instance is called icecat and based on the ESR version).There are no other official channels, but a bunch of people have their own channels with additional packages. The most popular is probably nonguix (https://gitlab.com/nonguix/nonguix) which provides some popular nonfree packages.Creating a recipe is generally easy (it's just a bunch of metadata) and even easier if it's supported by one of the importers (python, perl, emacs, ...). You can use guix on any other Linux system if you're not ready to insta"	roptat	14.880993	8.433437	comment	3.0	19.0	1623456355	-3.625198
33442199	TIL specialisations: https://nixos.w	TIL specialisations: https://nixos.wiki/wiki/SpecialisationI plan to use this for testing changes to my boot units.In theory, plain old generations allow you to safely test changes to boot units, by allowing you to jump to the previous generation. In practice, this involves remembering which generations have known-good boots.Specialisations will allow me to run a stable and candy track, on per generation.What other usecases do specialisations improve?	freedinosaur	14.89725	8.460434	comment	3.0	13.0	1667419574	-9.423471
33445228	> Maybe this particular NixOS strate	"> Maybe this particular NixOS strategy will gain more traction.Is anybody even vaguely relevant (ie. ""non startup"") using it in production? 
Right now it seems to be a plaything for developers."	nineteen999	14.898896	8.463536	comment	3.0	11.0	1667437144	10.530129
33675402	If I’m not mistaken, Nix uses cgroup	If I’m not mistaken, Nix uses cgroups as well on non-NixOS systems, so it is basically containers. You’re probably thinking about docker as a whole, in which Nix is effectively an alternative package manager/distribution system for containers.	judge2020	14.897108	8.459899	comment	3.0	14.0	1668896205	-9.348801
33677338	Do you use NixOS? I've found it a li	Do you use NixOS? I've found it a little too clunky for my taste, as a Gentoo Linux user. But maybe Nix is still worthwhile for me as a standalone tool.	haolez	14.897246	8.460586	comment	3.0	15.0	1668909924	10.529077
33764747	Sounds great! I currently run a NixO	Sounds great! I currently run a NixOS desktop but I still struggle quite a bit with the documentation and discoverability of configuration/language. That's one of the biggest pain points in my eyes, so a UI like you have could really make that simpler. Letting users introspect what settings are available and how they work seems like one way of making things more discoverable (but not necessarily making a specific wizard for a specific build, since that doesn't seem scalable or generalizable).That said, I also agree with you that having reusable modules that are documented would help, and being able to clone and copy/paste settings + seeing examples would too. Good luck!	dack	14.898667	8.46373	comment	3.0	10.0	1669570421	10.515804
33766846	I've recently switched to using nix-	I've recently switched to using nix-shell and overmind with a Procfile to officially retired docker-compose from all of my projects. Such a breath of fresh air.Like Mitchell Hashimoto (Hashicorp), I no longer do any development on macOS directly; I have a Linux VM where all my projects live and have their environments managed with a shell.nix file. Highly highly recommend it.	bsnnkv	14.898137	8.459949	comment	3.0	13.0	1669582575	-9.38257
33775171	Doesn't NixOS require reboot after e	Doesn't NixOS require reboot after each software install? I don't remember the last time I restarted my Mac or even PC.	behnamoh	14.89777	8.462002	comment	3.0	10.0	1669650985	10.594168
33815844	- You will have to learn both the ni	- You will have to learn both the nix language and working with nixpkgs. Learning nix is pretty trivial IMO (great resources are nix-1p[0] and Nix Pills[1]) but the documentation, while vast, is pretty shallow at the moment. You will likely have to resort to reading random blog posts, nix configs published by others and the source code of nixpkgs itself.- As mentioned by another commenter you will not be able to run random binaries by default. You can use nix-alien[2] which will automatically fetch the required libraries and build an FHS environment for the binary.- It is significantly more bandwidth- / rebuild-heavy. If an input for a derivation changes it will trigger a rebuild, which means either a redownload from the binary cache or a recompilation.[0] https://github.com/tazjin/nix-1p[	pongo1231	14.898314	8.463853	comment	3.0	22.0	1669900828	-9.402105
33816727	> nixpkgs is already one of the larg	> nixpkgs is already one of the largest package collections. There is a good chance your software is already included.Yes, but that still doesn't solve this:> Major problems: installing niche proprietary software that you may have to package yourselfIf some software _isn't_ packaged, it's a pain in the butt to get it running on NixOS. Either you have to create Nix derivations, which have a pretty steep learning curve, or you have to do some hackery patchelf business, which also isn't easy.At least, as of 2018, when I last tried. Things could be better now.	suprfnk	14.898812	8.464567	comment	3.0	13.0	1669905306	-9.429111
33817206	Nix feels to me like a cool but some	Nix feels to me like a cool but somewhat hacky v1 of a really great idea. I'm hoping someone creates a much more elegant successor.If Nix is CVS or even Subversion, I'm hoping for Git.	staunch	14.898414	8.463919	comment	3.0	10.0	1669907416	10.530688
33816915	I remember reading that nix unlike a	I remember reading that nix unlike all other distros can install multiple version of the same package and I want this feature, but I guess programming a package config might be too much for me. Maybe I'll try nix package manager then.	codedokode	14.895732	8.459705	comment	3.0	12.0	1669906122	-9.390451
33816958	Can you share your router configs? I	Can you share your router configs? I'd love to have a NixOS based router.	colordrops	14.897932	8.459071	comment	3.0	10.0	1669906361	10.537044
33818385	NixOS is great for a basic home rout	NixOS is great for a basic home router (I use it for my home router) but it’s networking config is still pretty rudimentary, and some things I would expect to work just don’t - i.e. port forwarding only works from outside your network, not inside.I haven’t done much with vlans yet so I can’t comment on that.	hamandcheese	14.900013	8.465209	comment	3.0	12.0	1669911671	10.5340805
33913972	Nix/Guix users would think that way.	Nix/Guix users would think that way. They've alrady given up on the concept of system libraries or a unified OS. systemd's writing of 2 config files per timer would be right at home for people that have to set up an entire OS environment every time they want to try to compile something somone else hasn't already written a nix script for.	superkuh	14.895853	8.458966	comment	3.0	12.0	1670535899	-9.393755
33974672	Hi :) This should be possible, but I	"Hi :) This should be possible, but I have not done it yet myself. For the time being, you would have to create a barebones NixOS project and build on that based on own research.I have plans for making a dedicated starter to provision Elixir/Phoenix projects as a ""1-click"" starter"	kodefant	14.89825	8.462763	comment	3.0	11.0	1670960824	10.528133
34014533	This is prototypical of the standard	"This is prototypical of the standard Linux experience, but I'd like to remark on just how much less common this sort of thing is.   Modern Linux and modern Linux distributions have a much larger ""just work"" factor and it's getting better every year in my experience.   Slowly and asymptotically, but it is improvement.This was driven home recently by my experience switching to NixOS.   NixOS is brilliant in many ways, but boy are there papercuts everywhere.   It's all soluble but it is annoying.   25 years ago this sort of fiddling was fun, but now it's just tedious."	bryanlarsen	14.897259	8.461581	comment	3.0	16.0	1671199397	-8.488331
34029860	Nix is effectively transforming dyna	Nix is effectively transforming dynamic binaries to static ones. Might as well skip the step, stop pretending that drive space is expensive, and link everything statically.	AmalgatedAmoeba	14.900435	8.466123	comment	3.0	12.0	1671297663	-9.34027
34103402	Because Nix is a functional package 	Because Nix is a functional package manager, and functional package managers are the future of package managing (whether nix, guix, or something we don't have right now). It makes it easier to deal with supply-chain, to deal with rollback on your software updates, to distribute the same configuration everywhere…I found NixOS (the OS centered around Nix) having similarities, in the way you configure things, with how you configure stuff in the networking world (with options that do some stuff behind the scenes you don't really care about). The difference is that with NixOS, you can dig in if you want to.Also, once you used NixOS for a little while, it's very hard to go back to, let's say, Debian, Ubuntu, or Archlinux : manually configuring things in multiple configuration files in /etc seems	Reventlov	14.898293	8.462852	comment	3.0	14.0	1671782852	-9.379644
34103429	It still doesn't have a concept akin	It still doesn't have a concept akin to use-flags, which is what distinguishes Gentoo from Linux from Scratch, see https://github.com/NixOS/nixpkgs/issues/12877. The fact that Nix doesn't have these is also one reason why it's easier to cache than Gentoo packages.	filmor	14.89775	8.462109	comment	3.0	11.0	1671783181	10.533834
18930044	No, I'm reinventing ChromeOS. I star	No, I'm reinventing ChromeOS. I started on this project with my father in mind, to make it easier for me to maintain his computer. My father would not run NixOS, but maybe I'm wrong. This will give a single image and very little tooling outside of end user parts. It probably will be much simpler.If totally seamless and _automatic_ updates can be achieved with NixOS I'm all ears.	hawski	14.898428	8.463139	comment	3.0	11.0	1547725557	10.574842
16909957	Im actually going to make the order 	Im actually going to make the order for a new thinkpad today, to run NixOs on.What specs and model do you have? Are there any tips, or something you wish you knew? My config reaches >€2500 quite fast.	jeofken	14.898769	8.463156	comment	3.0	16.0	1524545950	10.5521345
17084561	With Guix you get full introspection	With Guix you get full introspection of your entire package dependency graph, you can check and manipulate every aspect - and it is still simple and easy to work with. With GuixSD you get this same introspection and overview, but of your entire system. creating a container, vm or even a docker image is a simple '$ guix system <container|vm> config.scm' away. And your config.scm is as complex as you like it to.The simplest way would be to package the app for guix and you could just run '$ guix environment <name-of-package>' and you would be dropped into an environment with all your dependencies and whatever else the application requires in your path ready for hacking, get your sources and editor and start working.If you need a vm or similar though I'd translate your example above into a sys	t0nt0n	14.882255	8.434466	comment	3.0	16.0	1526492616	10.535642
22880616	I recently switched to NixOS and hav	I recently switched to NixOS and have essentially configured my OS from scratch in less than a week and now use it as my main system.The thing to remember about NixOS is it’s not a distribution of KDE or Gnome or manager of anything, it’s a declarative way of configuring those things and allows you to easily roll back changes to entire OS.It’s a little bit of investment to get started but one you get rolling it’s such a breath of fresh air to be able to manipulate your whole OS in the similar pragmatic way to you iterate code in a git repo.	rudolph9	14.898774	8.462297	comment	3.0	34.0	1586972162	10.557247
22880692	It’s really great that functional pa	It’s really great that functional package managers are getting all this attention! Nix package manager can run on Arch and Gentoo and OpenSUSE also.	rudolph9	14.894044	8.450784	comment	3.0	11.0	1586972593	-9.209988
22884408	NixOS isn’t easy to use. It’s very p	NixOS isn’t easy to use. It’s very powerful though. It gives you the ability to configure your whole OS, including all of your packages and configurations, in one declarative file. It reproduces the entire installation from this file in a way that’s fully immutable and hash-perfect (with minimal building from source). Very cool.	chongli	14.902367	8.466938	comment	3.0	11.0	1586993578	-9.480259
22985415	So with NixOS your process would loo	So with NixOS your process would look like this. Open up your editor on one of your devices thats already running. Write up a nix config that sets up i3 and firefox, could be just a couple of lines. Save it on a usb drive along with nix itself. Boot your new pc off the USB drive and your set.And thats just the first time you use nix. Next time you just reuse that thumbdrive, or redownload it, and get your config from a git repo you are tracking your config in.I have a git repo that has configuration for three types of devices I run in my personal setup (desktop, nas, webserver). They all inherit from my base configuration which has stuff like the user configuration and maybe my vim how I like it. The server adds docker and runs the docker containers that it should. The nas mounts the raid 	tinco	14.892378	8.43553	comment	3.0	45.0	1587887890	-9.37088
22985733	> As a keen NixOS user/contributor, 	"> As a keen NixOS user/contributor, if your only needs are i3 and Firefox, then I do not recommend NixOS to you. ~Any distribution can meet your needs.I really disagree with this. NixOS is also great for simple use cases like this because it's robust. I know a lot of people who switched to Linux, need to get something to work, follow some online tutorial/directions blindly, and just break shit pretty badly.This isn't contrived: even seemingly-inoculous commands like ""pacman -Sy"" on Manjaro/Arch can fuck your shit up (it basically amounts to a partial upgrade).NixOS doesn't let you break shit like this. (Literally, upgrades are atomic and packages can never have missing dependencies.) And, even if somehow you did, you then have a nice configuration.nix to quickly get back up to speed."	foopdoopfoop	14.898366	8.462518	comment	3.0	11.0	1587892213	-9.2378845
22986184	I gave NixOS a try recently, and gen	"I gave NixOS a try recently, and generally liked it.  I could get over the arcane packaging language and hit-or-miss documentation.  The red flag for me was the inattention to software freedom.  Most other distros like Debian or Fedora have source packages or SRPMs that include everything needed to rebuild a package from scratch.  Nix pushes binary packages, and even stores them in S3, but with no matching source packages that I could find.  They tout reproducible builds, but really haven't considered to how to deal with the ""disapearing sources"" problem, including vanishing git repositories.  I grabbed some URLs that pointed to sources in the old Nix Tarball Cache and they all returned 404.  Nix has no longer term plan to preserve package sources."	offmycloud	14.898778	8.46414	comment	3.0	17.0	1587898232	-9.357935
22986719	I think the Nix/NixOS debate gets co	I think the Nix/NixOS debate gets confused by two separate goals:* A workstation machine where you do everything from development to watching netflix* A server (whether VM, Metal, Container)The former wants convenience and flexibility. I agree with you - I also use Fedora because (particularly with Lenovo hardware), you install it and you're done. Everything works. I don't want to have to go and write nix expressions because I want to run a not-very-obscure thing that isn't packaged. It's ok for me that my workstation is a 'pet' and I blow it away every 6 months to a year.The latter case is more interesting and has some specific requirements on it. We all know about configuration drift. The idea of getting completely deterministic setups, and unifying how you do that across VMs, native and	rkangel	14.898424	8.461703	comment	3.0	11.0	1587904815	10.57953
22989346	"The main value proposition is this:
"	"The main value proposition is this:
With a single file, you describe the desired state of your system. That file is configuration.nix.You put in there what packages you want installed, what users, what SSH keys, what services systemd manages.Then, you run `nixos-rebuild` and then you switch your system to that configuration. The old state of your system stays around until you run garbage collect. So you can rollback to it, if you want."	elbear	14.898239	8.462852	comment	3.0	21.0	1587928173	10.5807
23251978	It is pretty easy to be confused.  E	It is pretty easy to be confused.  Especially since it is also a language yet all the other replies at the time have writing have failed to mention that.While I like the project as a whole, their naming is horrible. Just wait until you get into `nix-env` vs `nix-shell` etc...	lmickh	14.894375	8.456548	comment	3.0	12.0	1590009922	-9.386225
23251994	Thanks, but that makes me wonder how	Thanks, but that makes me wonder how that's even possible given that distros make their own modifications? Do people port each distro's packages to Nix then? Are they kept up-to-date? Or does it automatically translate from apt/pacman/etc. databases somehow? Or does it just basically install vanilla packages on all distro?	mehrdadn	14.897187	8.461149	comment	3.0	44.0	1590010013	-9.28585
23253255	I feel someone should say something 	I feel someone should say something about guix here. I don’t have anything worth saying about either though	magnusmorton	14.8821535	8.436015	comment	3.0	10.0	1590017464	10.541395
23253533	You can use Nix on MacOS X and with 	You can use Nix on MacOS X and with nix you don't need brew.I used it for few years that way.If you use nix-darwin + home-manager you can also configure your mac the way you would NixOS.Amazing tools that discovered not long ago (they aren't specific to os x) is:niv - makes pinning to specific repos/versions in repos much easier which helps with reproducibility, especially pinning of nixpkgs version which is now controlled in your source code.direnv + lorri - you no longer need to invoke nix-shell just cd the directory and all tooling you need for your project is suddenly available which is AWESOME.Here's an example of using them together with packaging a python project[1] if you have lorri and direnv installed and cd to the directory, not only you have the right python version installed b	takeda	14.898313	8.462811	comment	3.0	24.0	1590019971	-9.368701
23252963	"""Just files"" doesn't quite capture t"	"""Just files"" doesn't quite capture the complexity of the situation to me though. Say I happen to install package X via apt and Y via nix, and both of them depend on Z (in apt and nix respectively), and Z needs to bind to a port, then I imagine both will install but one of them will break, possibly including their dependents. Or if I install a package on Nix that expects a certain syscall that's not in the Ubuntu kernel yet (maybe like the recent /usr/bin/sleep issue with WSL), then that either breaks Nix or my ability to keep using an Ubuntu kernel. Right? And there are probably other things I'm just lacking the imagination for right now. But it seems to me there are all sorts of conflicts that can come up in practice. I've seen enough trainwrecks when upgrading even across OS versions tha"	dataflow	14.895822	8.456385	comment	3.0	24.0	1590015316	-9.275489
23275532	Not conforming to the FHS is what ma	Not conforming to the FHS is what makes Nix possible. You won't get Nix's reproducibility without it.	soraminazuki	14.898587	8.46437	comment	3.0	15.0	1590173447	-9.413225
23275598	Because the filesystem root is the d	"Because the filesystem root is the domain of the OS, if tomorrow they decide they are going to create a symlink of /dev/null in /nix because they thought it sounded cooler as a way to ""nix"" stuff, there goes the Nix package manager.The OS gives you places to put your files, use them so that you prevent breakage. We have the FHS, so you even have some degree of certainty of where to do it across Unixes.EDIT: Two downvoted comments answering a ""why"" but no rebuttal to either. HN is slowly but surely becoming Reddit."	mixedCase	14.898296	8.4624195	comment	3.0	13.0	1590173764	-9.370436
28037086	My favourite is currently NixOS for 	My favourite is currently NixOS for a router, entire configuration (system packages, version, firewall rules, interfaces, VLANs, etc) is declarative and can be deployed with automatic rollbacks in the event of misconfiguration.	madjam002	14.894124	8.446874	comment	3.0	10.0	1627915107	5.6658297
28147393	This is a problem that can be solved	This is a problem that can be solved without Codespaces too. For example, if GitHub were to embrace Nix, every project could have a shell.nix file for all of their dependencies, and the new engineer bootstrap script that installs Nix could then just add an internal Nix binary cache (or use Cachix). Any time the shell.nix changes a GitHub Action could push the closure to the binary cache.With this setup, you can use whatever local tool you want and, as long as environment variables are respected, they’ll just work. The only requirement on your end is to either run nix-shell first, or to use direnv and ask it to load the nix env for you.The downside is you still are compiling locally, so you still need sufficient CPU/memory resources, but that’s it.Unfortunately most companies still aren’t p	lilyball	14.906483	8.468856	comment	3.0	12.0	1628714076	-9.343981
28196760	Ask HN: Linux distro based on Docker	Ask HN: Linux distro based on Docker images?	lambdaba	14.8965	8.4575405	story	3.0	7.0	1629111592	-9.342593
28244309	Is it possible to cache the already 	Is it possible to cache the already built dependencies in Github or Gitlab CI if one is using a NixOS image?	ducktective	14.898642	8.463566	comment	3.0	13.0	1629452314	-9.392762
28484330	This sounds like a lot of stuff that	This sounds like a lot of stuff that Nix solves, the multiple versions of libraries coexisting part at least	MaxGabriel	14.8979435	8.461472	comment	3.0	21.0	1631293279	-9.101839
28511373	How does this work in practice with 	"How does this work in practice with it's ""rolling release"" nature? Can you designate specific package versions for all your dependencies? Like having a very new openssl and an older zlib version?With complex software, just grabbing the latest version of every dependency will lead to broken builds (or ones that only work on x64 but are broken on other platforms)Last I looked at GUIX (which I guess is similar) you are tied to a release ""version"" of the package-manager with whatever package version it comes with. But maybe I misunderstood"	geokon	14.881006	8.423489	comment	3.0	10.0	1631540596	-8.942982
28532930	Nix basically lets you compile to Do	Nix basically lets you compile to Docker containers, rather than running a pipeline of scripts with Dockerfiles. You can do that really fast, since you don't have to run the container to build it, and you can make images really small, because they'll contain exactly what they need.It's like the difference between shipping an app and shipping an OS with the app-preinstalled, except in this case neither has any external dependencies to worry about.	sterlind	14.896597	8.458567	comment	3.0	14.0	1631661968	-9.348782
28581626	I've been wanting to use Nix(OS) on 	I've been wanting to use Nix(OS) on my Pi for a year now. But from what I understand, there is no binary cache for ARM yet. Building every required package on Pi is out of the question and I don't have another persistent system for cross-compiling (Pi is the only always-on system I own).That being said, I've been using NixOS on my main system and loving it! I've been through format-and-resetup dance far too many times to understand NixOS is worst system management tool, except all the others.	e3bc54b2	14.898386	8.463673	comment	3.0	19.0	1632024551	10.54738
28590047	Nix is very unixy so it probably cou	Nix is very unixy so it probably could be made to work on WSL, but not native windows.Yes, if all of your dependencies are written in a single language, you can use the language-specific version manager.  TFA was pointing out a solution that work across different languages.	aidenn0	14.897748	8.461204	comment	3.0	11.0	1632107518	-9.522759
28590830	> Nix, guix and traditional package 	> Nix, guix and traditional package managers that support multiple versions (like dnf) are better solutions than just containerizing the whole thing.Interesting viewpoint! What are your arguments for this being a better solution than containerization?	occz	14.893548	8.451027	comment	3.0	14.0	1632119022	-9.335512
28591213	> Other tool require lots of thought	> Other tool require lots of thought and carefull execution for what Nix gives you for free.How do I pin ruby version to 2.6.3 in Nix? This is given to me for free in other tools. As are reproducible builds because all modern package/dependency managers lock versions.	dmitriid	14.898293	8.462425	comment	3.0	21.0	1632123813	-9.365295
28591661	> No other package manager can freez	"> No other package manager can freeze the complete dependency set you are usingI don't know if you realise that your post makes a poor case for that, and for imagined reproducibility of nix builds?1. Direct quote from your post: ""if you tried to follow this article step by step, you’ll have noticed that the versions of ruby and node you installed are probably slightly different from the ones above"".The ""solution"" for that is to dig through some commit hashes, and use those.Commit hashes are not versions.2. Your example points to a completely random version of a packageThe previous issue already points to a random version, apparently, but this is further compounded by the fact that ""ruby_2_6"" and ""nodejs-10_x"" point to a random version that is available at the time.To truly make the claim t"	dmitriid	14.898368	8.463056	comment	3.0	31.0	1632128779	-9.364701
28597240	Does Nix really not have debug symbo	Does Nix really not have debug symbols available for most packages? That's astonishing....	richardwhiuk	14.897644	8.462184	comment	3.0	11.0	1632163357	10.536553
28630521	GUIX should work with AMD’s open sou	GUIX should work with AMD’s open source drivers, just not Nvidia’s blob drivers.	SkyMarshal	14.875353	8.423477	comment	3.0	10.0	1632410602	10.409112
27916116	So the basic problem with *nix is it	"So the basic problem with *nix is its permission model.  If we had truly separable security/privilege/resource domains then Linux wouldn't have needed containers and simple processes and threads could have sufficed in place of Borg/docker/Kubernetes.There's a simpler and more powerful security model; capabilities.  Capabilities fix 90% of the problems with *nix.There's currently no simple resource model.  Everything is an ad-hoc human-driven heuristic for allocating resources to processes and threads, and is a really difficult problem to solve formally because it has to go beyond algorithmic complexity and care about the constant factors as well.The other *nix problem is ""files"".  Files were a compromise between usability and precision but very few things are merely files.  Devices and soc"	benlivengood	14.897833	8.461785	comment	3.0	19.0	1626935901	-9.321607
12190475	> Nix may be the one system package 	> Nix may be the one system package manager that is the exception to this ruleSome peers of mine recently experimented with building a Nix buildpack and concluded that it won't work. Nix has hardcoded paths for its core directories, and won't work in a security-constrained container.	jacques_chester	14.898602	8.463246	comment	3.0	14.0	1469830770	-9.412967
12250134	See also GNU Guix.https://www.gnu.or	See also GNU Guix.https://www.gnu.org/software/guix/	davexunit	14.875554	8.413107	comment	3.0	10.0	1470683391	-9.082301
12250308	After a quick look at Nix syntax, it	After a quick look at Nix syntax, it seems to me that it is almost JSON but different enough to required all new parsers. Maybe I'm wrong about that.  But... why not just use JSON?	dbcurtis	14.898841	8.464238	comment	3.0	30.0	1470684876	10.531136
12250196	My Linux experience so far has been 	My Linux experience so far has been limited to ls, cd and vi.  From the outside, package management has always seemed to me like a huge mess.  But, I've been starting to learn Nix recently and I really like it.  I can add, remove, test, screw up, change my mind, whatever without stress.	corysama	14.897131	8.460836	comment	3.0	23.0	1470683836	-9.286479
12265196	Looks like I've got a choice to make	Looks like I've got a choice to make (all on NixOS):+ Stick with NeoVim and hope one of the Intero ports to that editor takes off (as I understand it there are a couple right now)+ Switch to Emacs+Evil+Intero. I've never used Emacs before (even with Evil) so it would be a little work.If someone more up-to-date on the situation has advice that would be awesome:)	seagreen	14.880071	8.427067	comment	3.0	24.0	1470868486	-10.298473
12265255	I don't know NixOS, but this blog po	"I don't know NixOS, but this blog post and lecture might help you give emacs a fair trial:http://blog.aaronbieber.com/2015/05/24/from-vim-to-emacs-in-...
https://www.youtube.com/watch?v=JWD1Fpdd4PcOne of my vim-using coworkers found it. He, along with another colleague, have since found emacs compelling enough to use as their main text editor."	endgame	14.8989315	8.461665	comment	3.0	15.0	1470869476	-10.334422
12329193	For anyone using homebrew or other p	For anyone using homebrew or other package manager, and who has an afternoon free; I'd suggest checking Nix out. It's very nice to define an immutable manifest and have your system derived from it. If you love pure functions, you'll love Nix.	hkjgkjy	14.888299	8.443429	comment	3.0	16.0	1471747951	-9.314175
12335394	As a NixOS user I've certainly encou	"As a NixOS user I've certainly encountered some of these issues. While Nix and NixOS are really nice, the first thing I'd recommend to a new user would be to learn the Nix language, as it's pretty much a requirement for getting anything done.I agree with the author that per-user configuration is a bit overkill for the common use-case of a single user machine, but you have to go out of your way to use it (via the ""nix-env"" command), so I think it's a bit of a non-issue. Since Nix can be used from any user's home directory anyway (this is often how it's used on non-NixOS systems), it's not necessary for Nix/NixOS to contain this per-user feature; however, by doing so they gain a huge space optimisation by re-using the same store. The same can be said for NixOS containers, which I don't use b"	chriswarbo	14.898657	8.463697	comment	3.0	12.0	1471863558	-9.304882
12335836	I would love to hear your thoughts o	I would love to hear your thoughts on Guix.	dorfsmay	14.8826275	8.4369545	comment	3.0	15.0	1471869179	10.520016
12335907	I used nixos for a few weeks and the	I used nixos for a few weeks and then went back to Debian.* I share the concern of the author on symlinks farm. It is scary! I would like it to be dealt with in the filesystem layer (Plan 9 had a snapshot based filesystem - fossil - years ago). Symlinks have all sorts of weird semantics on different Unix machines.* Another of my gripe with nixos is that it makes Unix, a single user machine! Sure, packages need not be installed in a user-local way. I may be ignorant of other possibilities here.* More care for licenses. I still use Debian because they really care for licenses. Last I looked, nixos was in no way close to Debian in terms of documenting the various copyrights and licenses of files pertaining to a package.Otherwise, Nixos is a great idea and a huge step forward.	lil1729	14.897126	8.459464	comment	3.0	20.0	1471869946	-9.33587
12336015	Guix comes up on every Nix thread on	Guix comes up on every Nix thread on HN and it's a bit frustrating. Guix runs on Nix technology with a new config language for packages & a different philosophy about what can go into its core package set (it's a GNU project).My personal take is that the difference isn't large enough to warrant a new distribution and if you want to choose you should go with the momentum and that's with core Nix (10-30x contributors, 10-100x packages, depending on how you count).People also think scheme is better than Nix as a language, but if you reason backwards from the requirements that's not at all clear to me. I think Nix-the-language would be better off with types, but the lazy, functional & pure parts are necessary for the concept.	teh	14.890931	8.450921	comment	3.0	10.0	1471871139	10.539885
12336154	I think I should have been clear. It	I think I should have been clear. It does not make Unix single user machine but it is more useful for cases where a single user is the main user of a machine like the laptop user.My reasoning was very simple. Nixos makes it easy to install packages on a per user basis. This would mean there is a lot of redundancy if another user also needs the same package. A snapshot/dedup filesystem will easily solve the problem.	lil1729	14.89791	8.461534	comment	3.0	12.0	1471872568	-9.338318
12336867	People need to stop thinking of NixO	People need to stop thinking of NixOS as another Unix-alike, because it isn't, in very much the same way that MacOS used to be a Unix-alike, but isn't any more, either.NixOS is rebuilding important pieces of the foundation.  Why?  To address a basket of problems we have been complaining about with Unix for a very long time.  Is it worth the hassle?  Well, have you ever lived through a kitchen remodel in your house?  That's a hassle, too, but you end up with a better kitchen.IMHO NixOS is pointing the way forward, but is probably not the last word in next-generation operating systems.  The existence of NixOS and Guix (and similar) are exciting, because they are part of the ferment creating the thing on which we will eventually converge.	dbcurtis	14.897046	8.460102	comment	3.0	18.0	1471878735	10.55493
13139581	An author here: we're working on the	An author here: we're working on the nixcrates project to remove cargo and allow for closer integration between nix and crates.io, so far you can check out the project at https://github.com/nixcloud/nixcrates (joachim and paul are super people, hit them up if you're interested in contracting them) the net/http stuff is currently incompatible with the most recent changeset, I'll get working on it tomorrow morning HKT to make it work, I have to refactor it to suit the new stabilized API. Anyway, this attention was a bit earlier than expected, still have a couple of weeks to go before stabilizing. I hope you guys can kick the tires, tell us what you don't understand and please comment on the API because we want something sensible. We're using the late Pieter Hintjens' C4 so please hop on boar	setori88	14.899058	8.464516	comment	3.0	10.0	1481300223	-9.269731
13239907	Hi there,I'm the person who made the	Hi there,I'm the person who made the release announcement and I happen to be one of the two co-maintainers of GNU Guix.  I'm using Guix in production at a bioinformatics institute.If you have specific questions about Guix or functional package management feel free to ask me.To try to answer one common question: we aren't on bad terms with the Nix people or compete with them.  We are working towards very similar goals, and the underlying paradigm of functional package management (pioneered by Nix) is the same.  Members of both projects are involved in efforts towards reproducibility.  We have different sensibilities when it comes to the actual implementation and that leads to different design choices.	rekado	14.886527	8.44136	comment	3.0	13.0	1482436878	10.546517
13306294	Not even a mention of NixOS. May I a	"Not even a mention of NixOS. May I ask why not?Edit: I'm appreciating the feedback for ""why not?"" and am sending it around to people in the community. :)"	grhmc	14.899523	8.464331	comment	3.0	13.0	1483411859	10.557195
13343529	I've recently started experimenting 	"I've recently started experimenting with NixOS on my secondary (testbed) laptop at home. (My main home laptop has Windows, while at work we use Ubuntu.) Based on that and posts on this thread, I'd say if you're willing to consider Arch, I'd seriously suggest it might be worth adding NixOS to your list too. In my experience, at some cost, it gives you one particular super-power, that I've never seen anywhere yet. Specifically, breaking down cons vs pros:- ~CON: It's not as polished experience as Ubuntu on ""first install"", i.e. ""end user first"" or ""Windows-like"". But based on other comments here, I assume if you're willing to try Arch, you agree for some tweaking. Please note I've never used Arch, so I can't more precisely compare the level of tweak-ness required; what I can say for sure tha"	akavel	14.89832	8.462308	comment	3.0	13.0	1483788128	10.557171
21202687	Anyone using Guix in production? (An	Anyone using Guix in production? (Anyone using Guix?)	antoineMoPa	14.881403	8.43435	comment	3.0	15.0	1570625605	10.527148
21205960	There's usually something broken on 	There's usually something broken on my computer when I bump to a brand new release of NixOS, but I've never had rollbacks fail to recover from that. Then I just have to wait a few weeks before I try again :^)	danharaj	14.898542	8.46419	comment	3.0	13.0	1570644029	10.54845
21205970	"My experience is that the rolling ""N"	"My experience is that the rolling ""NixOS unstable"" channel is more usable. The releases don't offer any improvement in security and have less maintenance effort overall. And despite the name ""unstable"", the breaking changes typically incubate in the staging branch first for a few months.But that's using it on a desktop, maybe on a server releases are more useful."	Mathnerd314	14.897571	8.460738	comment	3.0	13.0	1570644070	10.546189
21206533	No. Nix requires much less maintenan	No. Nix requires much less maintenance than gentoo. The maintenance it does require is typically very fast. Gentoo builds everything from source and portage is not immutable the way Nix is. My experience running Gentoo (and I ran it during the GCC 3 -> 4 upgrade, which required a full emerge world) is that updates cane be slow, and prone to breakage, due to missing or clashing or outdated dependencies.Nix is a dream come true. Due to the way the nix store keeps all dependencies separate and reproduces builds to a high fidelity, when you do need to build a system package (very rare, as most are just downloaded straight out of a binary cache), it will invariably succeed with few exceptions, and the resulting binaries will work correctly.But the best part about nix vs portage is that it won't	tathougies	14.897683	8.46223	comment	3.0	11.0	1570646801	10.530317
21233655	Guile + guix.I work in devops and th	Guile + guix.I work in devops and that replaced a horrible mess of god knows how many containers with a straight forward, boring and reproducible single large instance of Guix SD.	throw_xyzyz	14.882469	8.434705	comment	3.0	11.0	1570892406	10.400913
21305978	I understand and perhaps admire the 	I understand and perhaps admire the GNU project's insistence on being blob-free, but that also means Guix won't run out of the box on 99% of all people's computers. The options are buy (old) hardware that doesn't need blobs (which sometimes isn't even possible), or compile the default kernel to include the binary firmware yourself (which the Guix documentation won't explain for ideological reasons). Both of these will sadly limit the appeal of this distribution to enthusiasts-only, which is unfortunate since Guix probably has the most advanced package manager of any Linux system.	MrBingley	14.880875	8.432738	comment	3.0	10.0	1571595724	10.502868
21553506	That's the great thing about Debian.	"That's the great thing about Debian. A great community with a clear purpose.But I think their tooling and policies have become outdated, which prevents faster progress.I wish they would switch to some Nix-like alternative, which was discussed in their developer list long ago. The genius of Nix is that packages do not need to depend on the same  dependencies. Hence, the whole package tree does not need to be kept in sync.Another great advantage are declarative package specifications. I maintain several packages for NixOS, and a bot does auto-updates for me. I just check upstream hasn't introduced any malicious code.Lastly, shipping many ""distributions"" becomes trivial with Nix. A distribution is just a package channel plus a declarative setup written in a small half-a-page expression. So yo"	nextos	14.897124	8.459794	comment	3.0	16.0	1573922475	-9.271952
21553528	> packages do not need to depend on 	> packages do not need to depend on the same dependenciesIt's a blessing, and a curse. In order to ensure the quality for all packages, now you have to keep all versions anything depends on in check. A bug fix applied to the most recent version doesn't automatically affect packages depending on it, so all of them need to be updated too now.This is similar to the reason that Debian doesn't accept packages which vendor any dependencies (similar to Fedora).> declarative package specificationsI tried making RPM, .deb, and Nix packages, and I found Nix to be by far the nicest to work with.	rhn_mk1	14.895681	8.455491	comment	3.0	12.0	1573922709	-9.216845
39089261	This is a good example of how nix is	This is a good example of how nix is both a) far to complicated a tool chain and b) completely underdocumented for how complicated it is.I swear until I ripped nix off my systems, every time I had to do anything, even a simple home manager update, something would break in an unexplainable way and id have to dig for hours to figure it out, sometimes to no avail like with their libc libraries that end up breaking system compatability with no workaround.Given that, this could be good for Home manager because the more they can improve documentation and disassociate their good product with the rats mess of an ecosystem it lives on, the better.	Bnichs	14.898727	8.464262	comment	3.0	13.0	1705929880	10.53825
39172071	I think every nix thread could devol	I think every nix thread could devolve to similar griping but...Nix is sometimes seems like a very inconsistent/app specific dsl. It's basically like maven, where everything is totally custom, but there's enough of a polite facade to give the impression there's some deeper meaning & purpose. Maybe there is deeper consistency, but it just looks to an outside like a vague dsl.We have a very senior engineer who uses nix. And they just share their huge huge nixfile or whatever it's called, and are like, somewhere in here is some config that makes machine work. But it never illuminates what is really done, what the real changes are.We all have to go scatter & try to re-learn what the unabstracted system is. It's such a draining experience, having to de-dsl and unpack some cryptic shit embedded 	jauntywundrkind	14.899221	8.464082	comment	3.0	11.0	1706495293	10.588889
39178343	Yep, I use Arch Wiki as a starting p	Yep, I use Arch Wiki as a starting point even for NixOS issues, when they're not strictly Nix-specific. Before then, Gentoo wiki was the go-to, but Arch Wiki has surpassed it by this point.I also think that the AUR is a great source of information too, since PKGBUILDs are really easy to understand and useful for determining how a program can be built and packaged, and you can go and use this to make other kinds of packages for a given program.	jchw	14.897987	8.46344	comment	3.0	12.0	1706546185	10.56922
39293358	Another fun thing you could do (I'm 	"Another fun thing you could do (I'm not saying it's a good idea) with nix-shell is this: install command-not-found and set this function in your shell    command_not_found_handle() {
      eval ""$(command-not-found $1 2>&1 | sed -n 3p) --run '$@'""
    }

Now you have any command available, no matter if installed or not."	rnhmjoj	14.898795	8.464545	comment	3.0	10.0	1707335445	-9.391955
39316146	Good, they changed the name of Seric	Good, they changed the name of Sericea just as I learned how to spell it. :DI started using Silverblue in October 2022 and now I've been using Sericea for the past 2 months.Long story short, immutable is the future of Linux.	INTPenis	14.893993	8.453556	comment	3.0	27.0	1707494442	-8.750609
39316199	> immutable is the future of LinuxOr	> immutable is the future of LinuxOr indeed, the past. Happy nixos user since ~2016 here.	exe34	14.893469	8.453115	comment	3.0	24.0	1707494716	-9.015409
39317951	I've only used NixOS, but the Contai	I've only used NixOS, but the Containerfile looks more like a shell script than a Nix config:https://github.com/ublue-os/bazzite/blob/main/Containerfile	bsimpson	14.897158	8.460445	comment	3.0	14.0	1707501175	-9.371989
39319484	Same. I can't be the only one who fe	Same. I can't be the only one who feels that Nix is doing the right thing the wrong way. The right thing being reproducible, declarative, composable environments; the wrong thing being its language and tooling. Too often I feel like serious Nix users spend a distressing amount of time manually doing package manager tasks, so the way forward is to stop doing exactly that. Going back to imperative composition is a step backward that will never help people free up time away from package management.	detuur	14.89729	8.461149	comment	3.0	10.0	1707507674	-9.365285
18076079	> Suppose I switched from Linux Mint	"> Suppose I switched from Linux Mint to GuixSD, what would be the advantages and disadvantages?You'd lose a lot of software choices. Actually, the restriction to ""GNU-friendly software"" was what made me skip GuixSD so far. I guess that my WiFi wouldn't work."	rhabarba	14.877895	8.424857	comment	3.0	24.0	1537971033	-8.384455
18156103	I'm really interested in NixOS (and 	"I'm really interested in NixOS (and guix), but one thing I don't fully understand is how they handle versioned dependencies.Say I have a service I run that acts as a frontend for something like nmap.  So there is pkgs/tools/security/nmap/default.nix that installs 7.70How do I 'pin' that version?  If I vendor that file into my configuration, that could work, but then the buildinputs are  buildInputs = with python2Packages; [ libpcap openssl ]
    ++ optionals ...

And the dependencies for libpcap and openssl are themselves not pinned to specific versions, so how exactly do I get a reproducible build?"	justinsaccount	14.901313	8.465864	comment	3.0	13.0	1538845757	-9.339502
29691499	Hm. Using Nix looks interesting (I’m	Hm. Using Nix looks interesting (I’m a fellow Mac user).When you do that, do you also need to compile the applications during installation…? (E.g. stuff written in Rust/C/C++)Do you need to edit the “recipes” a lot or do they generally Just Work?	cpach	14.897944	8.462517	comment	3.0	10.0	1640517734	2.8232114
29715335	Previously:> > How does GoboLinux co	Previously:> > How does GoboLinux compare to Nix & Guix these days? Why would one use the former vs the latter?> This blogpost has a comparison of Gobolinux and Nix:> http://sandervanderburg.blogs<https://news.ycombinator.com/item?id=13189792>	cxr	14.894093	8.455362	comment	3.0	10.0	1640709817	10.473893
29715312	GoboLinux uses patchelf just like Ni	GoboLinux uses patchelf just like Nix but you don't have to learn the convoluted undebuggable mess of Nixlang (I run NixOS on all my machines, it's a love-hate relationship)	carlhjerpe	14.895066	8.455962	comment	3.0	33.0	1640709703	10.460046
29834422	If you really want to optimize image	If you really want to optimize image size, use Nix!Ex: https://gist.github.com/sigma/9887c299da60955734f0fff6e2faee...Since it captures exact dependencies, it becomes easier to put just what you need in the image. Prior to nix, my team (many years ago) built a redis image that was about 15MB in size by tracking the used files ans removing unused files. Nix does that reliably.	sriku	14.899251	8.464109	comment	3.0	11.0	1641525611	-9.424835
30028291	I've been running NixOS on my Framew	I've been running NixOS on my Framework for the last few months, and I've been really happy with it. I initially got it so I'd have viable hardware to do osdev on, so learning that they are going to open-source its firmware makes me even more happy.	smasher164	14.897373	8.461345	comment	3.0	68.0	1642791540	10.557045
30029143	Having come from Debian, Ubuntu, and	Having come from Debian, Ubuntu, and Manjaro I settled on what feels like the last distro I will use on my own systems: NixOS. It's not so much better, it's so much different.Every(ish) single package, every single line of configuration(ish) is under version control in a(couple) nix files. I share (most) of it between my systems. With flakes (and it's lockfile) it's a 100%(ish) deterministic system.Downside: The language is arcane to me and the tooling is dogshit. Not that I could've made it any better, but running my config repo through entre to rebuild on every write to get some promiscuous error nobody has had before sucks major D.Therefore I still have an Ubuntu container (because every desktop application targets Ubuntu) running with X11 forwarding for the few packages that aren't in 	carlhjerpe	14.89767	8.461213	comment	3.0	12.0	1642795184	-9.317756
30057581	As a NixOS user, I like this article	As a NixOS user, I like this article a lot. But one thing stood out to me:> It also means that it's impossible to statically know what other packages a given package might depend on. Currently, the way this is implemented is essentially grepping a package for /nix/store/ to try to figure out what the dependencies are, which is obviously... not great.I'm not sure what the author is talking about here. He says it's impossible to find static dependencies, but then describes how it's implemented.I'm also not sure why the author thinks this solution is bad? Maybe because it could accidentally pull in more runtime dependencies than you were expecting?	assbuttbuttass	14.898748	8.463638	comment	3.0	12.0	1643032558	-9.361057
30057713	> Maybe this is nitpicking, but: the	"> Maybe this is nitpicking, but: the Nix language is about as straightforward as ""JSON plus functions"".It's too simple and straightforward. Writing Nix expressions is a bit like writing Javascript without frameworks or libraries.Some sort of opinionated framework that compiles to Nix would be great for maintaining large Nix projects. (The Javascript world already went though this phase.)"	otabdeveloper4	14.906214	8.478684	comment	3.0	13.0	1643033429	10.528173
30057930	The real break for me using NixOS as	The real break for me using NixOS as a regular driver was that I just could not figure out how to get Ruby on Rails to play nice with it. NixOS breaks a lot of assumptions that programs make about $PATH, and even if it's done for good reasons it plays holy hell with the development stack of some languages. I eventually gave up and moved my dev setup back to OSX (and then that PC died anyways). Maybe they've fixed it since then, I haven't tried.I do continue to use it for my homelab infrastructure though. It is extremely good at handling new versions of configuration of Prometheus, and I would never consider anything else at this point. Just not what I'd use as a dev environment.	ashtonkem	14.897943	8.463128	comment	3.0	13.0	1643034412	10.566708
30058112	NixOS and Guix are nice! Guix folks 	NixOS and Guix are nice! Guix folks are doing some wonderful work off late.I have used NixOS for a while. But for casual desktop GNU/Linux users, it seem like solving a problem that doesn't exist. Have been using Debian on all my computers since 1998. Unless you are using Debian unstable and updating it daily, I hardly hit any breakage.Servers and deployments is another story.	gnu	14.892617	8.450379	comment	3.0	13.0	1643035262	10.519465
30058509	I have had NixOS as my daily driver 	I have had NixOS as my daily driver for nearly three years now and maintain a small number of packages in Nixpkgs. From my perspective, macOS support is a headache as it all of the sudden may require you to debug on a proprietary OS that you lack access to and that runs on two different hardware architectures in order to get a patch accepted. I am probably not going to make any friends for saying so, but I would much prefer if Nixpkgs for macOS was maintained separately.My personal reasons for not going with Guix is that it is a GNU project and thus you have to buy into the entire FSF philosophy. Sadly I do need to run on “problematic” hardware from time to time and would prefer if doing so did not require me to add unofficial extensions and be wary of uttering such heresy in the company o	ninjin	14.890457	8.449165	comment	3.0	11.0	1643036902	10.562019
30058727	I think the author is quite wrong th	I think the author is quite wrong that the nix language is not very good and hard to learn. In fact it's not only the best external DSL I've seen, but also one of the few cases where inventing a new language rather than just repurposing a subset of something already established looks like a good decision to me. In fact, I consider it a marvel of language design. The mix of properties that nix has (laziness, purity, relative simplicity and good syntax for things like path-names, records or interpolation) absolutely makes sense for the problem domain and would be difficult to achieve with something more off-the-shelf.That is not to say there are no significant problems with it: the lack of static typing coupled with low runtime performance and bad error messages and debugging support means t	patrec	14.899055	8.465011	comment	3.0	11.0	1643037775	10.541144
30058000	> My real gripe with Nix is the lack	"> My real gripe with Nix is the lack of a complete, easy to find, documentation of its ""standard library"". Nix Pills & a few wiki pages are far from enough.How hard have you tried? It's literally two clicks and one scroll away from the official home page: https://nixos.org/ -> click ""Learn"" -> Scroll down -> click ""Full Nix Manual"":https://nixos.org/manual/nix/stable/expressions/builtins.htm..."	ghostwriter	14.89796	8.463243	comment	3.0	28.0	1643034692	10.589392
30060331	I am all-in on nixos. I've also expe	"I am all-in on nixos. I've also experienced those problems, but I for one am glad that those don't work. Let me explain.My use-case for Nix is to make my build system so reproducible that, if I get back to the project in five years, it should still compile, and if I give it to someone else, they should be able to make it work without any issue. Like the install steps for them should be as simple as ""Install nix, then run `nix build .`"". If that doesn't work, then I've failed.About your issue. It's unclear what it is given you give so little information, but I often run into similar problem of native bindings in NodeJS and Python not working failing at runtime. I've found that very often, those native bindings are distributed as prebuilt blobs. This obviously doesn't work on NixOS, because "	roblabla	14.898706	8.464025	comment	3.0	10.0	1643043463	-9.269315
30060884	The default channel of Guix has more	"The default channel of Guix has more than 21,000 packages.  Is that what counts as a ""low number"" these days?"	rekado	14.8814	8.434801	comment	3.0	10.0	1643045469	10.586511
30061105	"""... with no system state to worry a"	"""... with no system state to worry about""I don't disagree with you, but one of my skepticisms about this is that Docker and Dockerfiles made the same promise like eight years ago, and at least as a small time operator (eg, homelab), it never really felt like the system was as stateless as it was telling me it was. There were always logs, indexes, caches, database content, and all the rest of it, and all of this had to be carefully volumed-out with those data containers being protected and versioned and carried forward independent of the throwaway Dockerfile-defined ""application"" containers.So far my experience of NixOS is that it doesn't particularly offer a new solution here, but at least it doesn't pretend anything. The configuration.nix ""defines"" the whole system, but obviously doesn't "	mikepurvis	14.896076	8.45897	comment	3.0	15.0	1643046325	-9.391886
30396439	Is anyone using Nix to standardize l	"Is anyone using Nix to standardize local development tool versions?In our company — as in most companies, I suppose — apps rely on a specific toolchain, such as the Go compiler, Protobuf, linters, PostgreSQL, and so on.Coordinating these is difficult. We have to maintain documents saying ""install Go 1.17"" and so on. Some people are on different architectures, though we are all on either macOS or Linux.The other challenge is coordinating these versions with what's used to build and test. A developer might accidentally develop using different versions than what we build and run with.Our solution for a subset of these tools is to use Docker. We have helper scripts to let you run some standard versions of some tools. But there is a lot of friction inherent to using Docker, especially on a Mac."	atombender	14.896309	8.458242	comment	3.0	16.0	1645271748	-9.375263
30682337	Nix is not a Linux distribution. Nix	"Nix is not a Linux distribution. Nix is like a kind of Docker from an alternative universe.Or maybe ""Python venv on massive steroids""."	otabdeveloper4	14.89812	8.46234	comment	3.0	10.0	1647326949	-9.339292
18363841	Is Guix related beyond also being an	Is Guix related beyond also being an OS?	_verandaguy	14.88256	8.437161	comment	3.0	15.0	1541173545	10.5218725
18364537	Customizing packages is something I 	Customizing packages is something I do occasionally to debug FOSS. I don’t recall which package I wanted to debug, but I remember that I gave up after my laptop was compiling for many hours. Any changes to one NixOS package automatically invalidate all of its reverse-dependencies, which isn’t the case with e.g. Debian, where I can, when deeming it safe, rebuild a package and install it over the currently installed version.	secure	14.898181	8.463277	comment	3.0	12.0	1541177272	-9.314909
18503920	With NixOS and GuixSD you have easy 	With NixOS and GuixSD you have easy to deploy, easy to update immutable systems with IaC built-in and no containers at all...They can be used also for development create isolated FHS environments with a simple text file describe the environment, again without containers.That's one of the reason I consider them the future, you have:- built-in infrastructure as code- built-in immutable servers- built-in orchestration/provisioningAll with human-readable, easy to manage, text files.	xte	14.899717	8.462755	comment	3.0	13.0	1542818614	-9.238367
18908690	NixOS fangirl here... you're totally	"NixOS fangirl here... you're totally right about usability!Git was self-hosting from day 3, but consisted only of a few pieces of exposed plumbing. As more porcelain was bolted on, it got to the point where flashy UIs could exist. Porcelain isn't all trivial either - consider ""git rebase""!NixOS today is like early Git.. usable and powerful, but not user-friendly. It needs a good UI, a graphical installer, and high-level porcelain to hide the plumbing unless you need to drop into it.As for the cattle question, I think Nix's real power will come from efficient, declarative ""Dockerfiles"" and serving as a Bazel-like build system. There was a project for this, Hocker, but it seems inactive."	sterlind	14.902715	8.466831	comment	3.0	11.0	1547523606	-9.385476
17354164	I thought NixOS solves the full repr	I thought NixOS solves the full reproducibility problem really well already.https://nixos.org	nikivi	14.898502	8.463164	comment	3.0	14.0	1529492273	-9.395552
17797824	The most confusing thing about it fo	The most confusing thing about it for me now (after I eventually decided to learn it and figured out what you mentioned) is the missing dash. Somehow it works both with and without, which makes no sense considering how *nix tools work. Why is it made to be like that?	mehrdadn	14.897673	8.462222	comment	3.0	16.0	1534741295	10.614834
16357899	Docker is a nice runtime, but you ca	Docker is a nice runtime, but you cannot reproduce the build of a docker container. What if you want to make a small change to the image? You need to rebuild it, but if it's years later, the versions of packages in the ubuntu repository may have changed and a lot of other things (if you're not careful, tarballs downloaded during the building of the image may have disappeared/changed/...). While you can try to avoid these through careful scripting and pinning things, this is what Nix makes really easy: just pin your nixpkgs version, and you can almost guarrante that you'll get the exact same build years later and you can still change parts of it if you need to.	bennofs	14.896893	8.459206	comment	3.0	13.0	1518433389	-9.365646
36561270	> the point is to have it done once,	"> the point is to have it done once, and you won't have to do it ever again! NixOS is the only one that allows so.Until the tooling introduces a breaking change or new cooler way to do things appear and people stop supporting the old way because ""everyone switched anyway"". Been there, done that."	WastingMyTime89	14.898058	8.462551	comment	3.0	15.0	1688304215	10.5650425
36670013	I agree that NixOS (and Nix) is diff	I agree that NixOS (and Nix) is difficult to learn and the documentation is generally poor, which I realise is what you’re getting at in your comment,But I do think we should keep in mind what an incredible project NixOS is. NixOS isn’t just some other Linux distro, repeating pretty much what every distro has done for 40 years. It’s a complete rethink of how a Linux distribution and package manager should work, from first principles, in a way that I don’t think has ever been done before. That’s an incredibly bold thing to do. That alone, as a research project, would be an impressive achievement. But it hasn’t just ended up as some researcher’s PhD thesis. It works in the real world, and it’s built a large community despite its learning curve.So despite the terrible docs and UX, I have trou	jamespwilliams	14.899206	8.456471	comment	3.0	11.0	1689010998	10.548286
36670675	> You have to learn a new OS because	"> You have to learn a new OS because a lot of your prior Linux knowledge no longer applies.This is what confused me the most.Nix (CLI tools / language syntax)NixOS (A Linux distro that has CLI tools, but also some CLI tools that are only available on this distro and not others, aka ""nix"" doesn't really work on Debian)Flakes vs ""configuration""I just wanted to like ""terraform apply"" a system configuration on my Debian install.People are obsessed with Nix because you can manage your config for their local systemOk... Ansible has existed for 12 years? And you can use it on Debian/don't need a full OS/distro from the ground up (NixOS)But people will come out of the woodworks to tell you how you don't understand, you're wrong, you're missing the point, Nix is the greatest."	MuffinFlavored	14.898201	8.462659	comment	3.0	15.0	1689013079	-9.378394
36671316	> NixOS is awful except for everythi	> NixOS is awful except for everything else out there.Except Qubes OS that allows using original GNU/Linux distributions virtualized with a convenient interface.	fsflover	14.89793	8.4619875	comment	3.0	14.0	1689015633	10.573459
36763967	Ok, as a nix noob.  I find a given p	Ok, as a nix noob.  I find a given package, say `nixpkgs/3276b62e6639096014652132f4824ac2b4f2a2c4#nodejs`Then what?  How do I throw that in a configuration.nix or flake.nix file?	drunner	14.89886	8.46495	comment	3.0	10.0	1689627416	-9.382788
36767058	I've never used nixos so excuse this	I've never used nixos so excuse this question: What is the difference between nixhub and the package search on https://search.nixos.org/packages ?	I_am_tiberius	14.89898	8.464745	comment	3.0	12.0	1689647293	-9.404897
24439666	It is a tiresome process. I attempte	It is a tiresome process. I attempted to submit a particular package (and others before and after me). It was either met with a lot of red tape (IIRC document licenses for each file individually) and months of no visible progress when comments were addressed.This was in stark contrast to e.g. contributing to nixpkgs. Do a PR on GitHub. The package gets built automatically by CI. Get feedback. Make changes to address the feedback. And it gets merged. Of course, PRs sometimes go stale (most projects are dealing with a lack of manpower), but the process is generally fast.But the outcomes are radically different: I never attempted to contribute to Debian again, but I have become an active contributor to nixpkgs.I think to attract developers the process needs to be modernized. Put all the packa	danieldk	14.895314	8.450389	comment	3.0	10.0	1599804623	-9.28497
38657960	Yes and no. Fundamentally, I agree w	"Yes and no. Fundamentally, I agree with you. Nix is hard because it solves an inherently complex problem. But it's also hard because it has some usability flaws.For example, I recently wrote a bunch of Nix and got an error that boiled to me forgetting to add a ""name"" to a derivation. That is absolutely my bad. However, Nix didn't tell me which file this derivation was in (it said 'unknown file' iirc), the stack trace also wasn't any help . And so I went hunting through the hundreds of lines of Nix I just added to find where I might be missing a ""name"".Should I have tested my code incrementely? Absolutely, yes! But Nix should also be able to tell me which file I am missing the attribute in.I say all of this as a huge Nix advocate and fan. It's wonderful, it solves so many problems I previou"	Cu3PO42	14.898592	8.464959	comment	3.0	12.0	1702669587	-9.297605
38757300	After having moved to NixOS, this ty	After having moved to NixOS, this type of evolution feels archaic.	mongol	14.898145	8.463534	comment	3.0	38.0	1703454940	10.594174
38804911	"you build ""impure"" (in nixos speak) "	"you build ""impure"" (in nixos speak) packages for all your software? if not this is not a close comparisson. gentoo shines when you need system wide control of build flags (for perf or security)"	1oooqooq	14.898112	8.461947	comment	3.0	10.0	1703858370	10.506141
38873319	What are the advantages of Gentoo ov	What are the advantages of Gentoo over NixOS or Guix?	amelius	14.8895235	8.447007	comment	3.0	11.0	1704408212	10.520676
31833480	Another approach to the problem woul	Another approach to the problem would be to install Emacs packages with GNU Guix[1].[1] https://guix.gnu.org/manual/en/html_node/Application-Setup.h...	b3n	14.846501	8.393304	comment	3.0	10.0	1655887773	10.51533
32079229	NixOS users are socialized to not bo	NixOS users are socialized to not bother reading	uncletaco	14.898675	8.464286	comment	3.0	10.0	1657689264	10.554282
32169987	As an aisde, i love Nix, but i hate 	As an aisde, i love Nix, but i hate the lack of types. It's such a chore to figure out what fields are on a value, is the value a func, what are the docs for that func, etc.I have high hopes for Nickel[1][1]: https://www.tweag.io/blog/2022-03-11-nickel-first-release/	lijogdfljk	14.898738	8.46443	comment	3.0	19.0	1658341168	-9.350994
32171772	This is what scares me off from Nix 	This is what scares me off from Nix every single time. Even the biggest Nix fans keep saying that the docs are terrible. When I do try Nix people say “oh don’t do it that way, even though that’s what the docs say, now the way to do it is this new way.”  I can never imagine how Nix is going to help me enough to make it worthwhile to endure this hazing.	massysett	14.898709	8.464364	comment	3.0	14.0	1658348697	-13.854226
32174791	Thank you for the explanation. I'm g	Thank you for the explanation. I'm going to go back through everything I've read and see where it helps me.However, I just want to address one thing.> To be honest, nix is a system you have to actually use to begin to understand and synthesize. As noted, flakes make this hill less steep, but you won't really internalize the value and the system as a whole until you actually start using it some.This is discouraging me from trying Nix for a couple of reasons.Having read the thesis, understanding the necessity of reproducible builds and how Nix turns that up to 1100, and looking forward to being able to tell future contributors of my software to just run `nix-shell <whatever>` to set up my exact development environment, I think I understand the value of Nix pretty well. Being told that I don'	ghoward	14.900814	8.463631	comment	3.0	11.0	1658367801	10.558898
32291690	Christ that's a lot of work, just to	Christ that's a lot of work, just to start working on work.  I really want to like Nix, but the UX is frankly offputting.  I really hope it improves to the point that it can be mindlessly installed.	omginternets	14.8984	8.462697	comment	3.0	18.0	1659226182	10.573211
32291722	This post focused solely on the Nix 	This post focused solely on the Nix package manager and Nix packages - for anyone that uses MacOS but is interesting in trying NixOS (or using it within a VM in MacOS), I definitely recommend Mitchell Hashimoto's NixOS repo: https://github.com/mitchellh/nixos-configHonestly, doing that may be easier and a better option than using Nix packages in MacOS.	dcchambers	14.911433	8.4733925	comment	3.0	35.0	1659226544	-9.421285
32291787	There is absolutely no way I can rec	There is absolutely no way I can recommend using this at work. Nix is way too complicated. Its already bad enough being the git goto person.  Nix is so complicated it somehow makes git look simple.	frogperson	14.898277	8.462677	comment	3.0	13.0	1659227126	-9.496402
32291817	I completely disagree.  It took me a	I completely disagree.  It took me a while to work through the peculiarities of NixOS and get my OS setup, but the benefits are immense now that I'm using it.  And I'm using it as a daily driver at a large tech company developing and maintaining mission critical systems.It's really no different from Vim in this respect.  Most people will bounce off due to the learning curve, but once you get past it, the benefits are too great to go back to a more crude system.  In fact it was easier to learn and setup than Vim for me.	colordrops	14.896265	8.456143	comment	3.0	10.0	1659227406	10.582318
32292226	I suppose you could, but Nix (and Ni	I suppose you could, but Nix (and NixOS) defaults to keeping packages for an insane amount of time. 3 months of regular Nix use can accrue ~300gb of packages, which is definitely not what you'd have on something like Homebrew.	smoldesu	14.898407	8.462675	comment	3.0	10.0	1659230647	-9.375538
32292919	Yeah, I switched completely to nix a	Yeah, I switched completely to nix after being frustrated with homebrew constantly breaking things (any time I installed something. (Usually involving libicu being replaced with a different version.) And then had to pick up homebrew again for a couple of things.I _really_ like being able to drop into a shell with a few additional packages installed. But nix does have a learning curve and some rough edges. I found it tricky to use things like libraries outside of nix's build process.  And there is a bit of an impedance mismatch when trying to use languages that have their own package management.So I've got nix for a bunch of software, a couple of libraries in homebrew, and native package management for various languages (cargo, ghcup, lake, idris).I also reluctantly installed agda via homeb	dunham	14.8987055	8.463841	comment	3.0	12.0	1659238618	-9.400102
32295230	I'm actually trying out Nix on a fre	I'm actually trying out Nix on a fresh Mac install since this week, but I'm not yet sure if I enjoy it. When things work it feels pretty great, documentation feels lacking though so when I want to do something I haven't done yet I generally try to find examples of something similar. I do think I'm beginning to understand the language better that reading the source nix files almost become the docs for me.The main problem I have is when I try to install a package that fails to install, usually it has to compile. Like today I tried watchexec on my M1, doesn't work. Luckily I can just download a binary watchexec build to get around it but it would be nice to know how to get it working. Worked with homebrew. (but homebrew has it's own problems)The other thing is that I like the idea of using ni	lycos	14.898754	8.464375	comment	3.0	11.0	1659272514	-9.396033
32314905	Making a PR to Nixpkgs	Making a PR to Nixpkgs	jrmurray	14.898782	8.46449	story	3.0	43.0	1659412254	-9.5436535
32315980	While I really love nix and nixos, I	While I really love nix and nixos, I must say that Nixpkgs development is just out of control. There are over 5k issues and almost 4k PRs open. Reviewers are far fewer in number than contributors and there are multiple instances of low-quality packaging. Some features that most beginners want (for example, easily packaging nodejs programs) are still not there. Lack of standard is a heavy issue and there are many ways of doing the same.	yewenjie	14.898503	8.463844	comment	3.0	12.0	1659424715	-9.338421
32317134	NixOS is the most daunting Linux dis	NixOS is the most daunting Linux distribution ever, and all the people I know that use it are extremely smart. You need to develop a really good mental model of how this complicated web of Nix scripts works, to create packages.	coldblues	14.8984165	8.462819	comment	3.0	11.0	1659437693	-9.347131
32356398	> For x86, the package availability 	"> For x86, the package availability is almost unparalleled.https://repology.org/repositories/statistics/total
In terms of total number of packages, nixpkgs unstable is at 72k, while AUR is at 68k.I'd bet there are many caveats, though."	rgoulter	14.897337	8.461767	comment	3.0	14.0	1659708982	-9.341598
32356489	I have tried Guix (as a package mana	I have tried Guix (as a package manager), and it seems much better documented.I also really like the fact that Guix uses a well-established, minimalistic, well-implemented, functional-preferred configuration language, which is Guile, the GNU implementation of Scheme, which is very much tailored to be extended with and embedded in other software, for example written in C. In part, my love comes from having had to use the alternatives: Huge configuration files written in YAML, for example, with no real documentation what all the keywords really mean, or things such as Conan, which appear declarative and are.... whatever.	jnxx	14.879544	8.419758	comment	3.0	20.0	1659709381	-9.84817
32356852	> Nix needs a new porcelain interfac	> Nix needs a new porcelain interface for it's CLIs.It already has one with the 'nix' command, it just needs to be manually enabled under 'experimental-features', but once done there is basically no reason to ever touch any of the old commands.	grumbel	14.898228	8.462409	comment	3.0	16.0	1659710719	10.578936
32375275	Yeah and that's part of what made it	Yeah and that's part of what made it so confusing.Even in a pure Guix shell it only worked in a specific order. Packages were R, TMB (an R package), gcc-toolchain, gfortran-toolchain and make. You need to be able to compile C++. If was R specified before the toolchains then nothing could be compiled with TMB. I forget the exact error. I did not have those packages globally installed and I saw the same problems with Guix SD and a foreign distros.But with R 4.2 I ran into a different problem and never fixed, that anything using the RcppEigen header would not compile.And I don't believe Guix has the same wrapping packages into R style as Nix.	goosedragons	14.881722	8.435275	comment	3.0	11.0	1659866863	10.533077
32375302	> Another big thing, Nix has Flakes,	> Another big thing, Nix has Flakes, which make it trivially to turn all your Git repositories into Nix packages.I have no doubt that this is true, but I still feel dumb about it. I run a Plex server (among a few other workloads) on a NixOS box, and just figuring out how to update the Plex binaries off of the official master branch was a multi-hour back-and-forth endeavor between StackOverflow suggestions and compiler errors.I really do love Nix though. And once I got it working I felt a LITTLE bit smarter, AND it's worked flawlessly for months.	jyrkesh	14.898765	8.463294	comment	3.0	12.0	1659867282	-9.409033
32376448	Nix has a debugger now. You can drop	Nix has a debugger now. You can drop into the frames that are causing problems and inspect the state. Miles easier than looking at the trace manually.	geddawm	14.898063	8.461138	comment	3.0	10.0	1659880072	10.505957
32377051	I’m well aware that Nix can produce 	I’m well aware that Nix can produce container images. Xe has a great post about it.People use Docker for a lot of reasons, but mostly? Same Dockerfile, same outcome, mostly every time. No one is moving /usr/lib/x86_64 around under you. It’s a real sea change, on the order of revision control: we hadn’t even realized that we were living with constant low-level anxiety that someone was going to break our computing environment at any moment. “sudo apt upgrade —whatever”, eh, maybe next week, we’ve got a release coming up.Calling Nix a souped up package manager is like technically correct maybe?It’s ‘git reset —hard HEAD^’ for your whole computer or fleet of computers. It’s utterly fearless experimentation, it’s low/zero runtime cost isolation and reproducibility.It’s early days ‘git’ for syst	benreesman	14.896598	8.458865	comment	3.0	15.0	1659884830	-9.377108
32438945	I have been gradually moving from as	I have been gradually moving from asdf to nix shell plus direnv combo. It handles system level dependent packages in addition to programming language version. Pinning the exact version is not a first class feature as of today, though possible by pinning the nixpkg to a specific commit. Hopefully nix flakes will solve this use case well when it is stable.	ananthakumaran	14.899049	8.463708	comment	3.0	16.0	1660313527	-9.3467
32439619	I've led the implementation of Nix a	I've led the implementation of Nix as a dev env at my workplace to pretty good results, but none of us are quite yet willing to touch flakes yet because they're still marked as experimental.Do you have any thoughts on whether or not we might be missing out? Any docs we should be looking at?	striking	14.899163	8.465978	comment	3.0	12.0	1660316378	10.604006
32505488	Have you considered the idea that it	"Have you considered the idea that it might just not be for you? There are plenty of workflows that don't require proprietary software, and adding proprietary software breaks a lot of the point of Guix, along with throwing more work onto the backs of maintainers.You wouldn't expect a bunch of people giving away a vegetarian cookbook to respond super well to, ""This is all fine and great and all, but how can I adapt this recipe to grilled dog?""Especially not after saying their project was pointless since you couldn't easily use it to shish kebab your cat."	caslon	14.881802	8.434773	comment	3.0	13.0	1660798724	10.525714
22295778	But the bespoke language has some be	But the bespoke language has some benefits. It’s concise and specifically designed for the problem. Also Nix has more contributors and that is very important to have a large collection of recipes to start from.	svd4anything	14.898062	8.463978	comment	3.0	25.0	1581391673	10.595138
22296192	As a Nix user, Guix interests me but	"As a Nix user, Guix interests me but I have three concerns, namely my pain points with Nix:1. Small package base.My workflow includes running Julia on CUDA, editing from VS Code. Remarkably, Guix has both Julia and (on a third-party PKG repo) CUDA. What it's missing is VS Code. I understand that VS Code is non-free (like Chrome, it attaches trademarks on its branding), but there's no VS Codium I could find either. I also can't find Atom. Am I missing something?2. Package index mirroring.Nix has an issue where Python, Node and other ""third-party"" packages have to be manually added to nixpkgs. If you want celery or requests, you're in luck because those are popular. If you want something more obscure, like pywikibot, you have to add it yourself (or run pip/npm yourself, and forego the benefi"	sterlind	14.893015	8.453899	comment	3.0	11.0	1581397135	10.523444
22295487	Caution for OS X users —   https://g	Caution for OS X users —   https://github.com/NixOS/nix/issues/2925	srik	14.89847	8.463775	comment	3.0	31.0	1581388504	10.570944
22296274	It's been years since I last tried N	"It's been years since I last tried NixOS. One of the things that I really didn't like was that changing something that had a lot of dependencies meant that everything that depended on it, needed to be rebuilt. That's so even if I knew the change couldn't affect how the dependencies would be built.I know why NixOS requires that. I think that's really cool from a safety side, but it was also really annoying to have to wait so, so long to use the system after an insignificant change. I wish there were a ""I know what I'm doing; let me risk screwing up"" mechanism. I don't know if there's one now, but I kind of doubt it.I imagine Guix would have the same problem."	jolmg	14.89294	8.454155	comment	3.0	12.0	1581398351	-9.372534
38931277	I used to run NixOS on my main compu	I used to run NixOS on my main computer for a few months until I encountered some situation that I couldn't resolve using my nix skills. I think I needed to run some software that wasn't on nixpkgs.Nowadays, I just use nix (the package manager) on top of PopOS.	Aaronmacaron	14.89833	8.463631	comment	3.0	26.0	1704830764	10.557661
38931800	This has always been the death of an	This has always been the death of any attempt I make at using NixOS. The first time I tried over a decade ago I think it was VMWare Workstation, then CLion or some other Jetbrains package a few years later - things that aren't particularly esoteric to linux users. Completely opposite the experience that I've had with ArchLinux.Maybe I should give it another shot if ChatGPT can provide better guidance than reading a dozen blog posts, 11 of which are out of date.	throwup238	14.898568	8.46293	comment	3.0	23.0	1704832872	10.56237
38932485	When doing reproducible builds with 	When doing reproducible builds with Nix, how are people dealing with build artifacts that can't be downloaded? I see that I can do a fetchurl with a specific URL and hash, but this obviously fails if the content is missing.On Debian pinning is a little strange. You can try `apt install foo=1.2.3` and it will work until the next versions is released. Debian removes old versions from the mirrors. However they operate a snapshot archive with all the old package versions, so reproducible builds can use that and should continue to work over many years.Does Nix have a way to ensure pinning continues to work over many years?	8organicbits	14.898884	8.463965	comment	3.0	11.0	1704836323	-9.395179
38995487	I like the idea of nixos. Having one	I like the idea of nixos. Having one file responsible for all packages installed on the system is way better than what traditional distro use. I just don't like the quality of the packages. It would be nice if someone could do something like a os wide packages.json but for a mature packages repository like Debian.	bobajeff	14.89546	8.455779	comment	3.0	19.0	1705274458	-9.263188
38995532	I first looked at nix-shell which yo	I first looked at nix-shell which you can use to create ephemeral environments just like Docker, with the difference that they are 100% reproducible and you don't need containerd or like. It is awesome to create scripts which run the same on EVERY system.Then looked at NixOS. I geht the point of having a deklarative like OS which you can rebuild in a couple of minutes, BUT the nix language is kind of unituitive and all the tools like flake and nix packages do some magic it con't quiet understand. It does not help that the docs are kind of meh.	kodama-lens	14.896984	8.459919	comment	3.0	12.0	1705274830	-9.368173
38995936	I work on Nix and think this paradig	I work on Nix and think this paradigm has already impacted and will continue to influence software devopment in general. I want to make it easier for organizations/companies/groups to adopt it. Ideas and questions are welcome.	tomberek	14.897223	8.4684305	comment	3.0	13.0	1705278179	10.5478115
39005044	I am the only one who finds it highl	I am the only one who finds it highly annoying that everyone assumes Nix should install itself in the global shell configs?	o11c	14.898641	8.463971	comment	3.0	25.0	1705347083	-9.37375
39005159	That, and also that it has to be ins	That, and also that it has to be installed globally with the absolute path of `/nix/`. Sure, you can change it, but the packages won't work then.	vilunov	14.8980055	8.462358	comment	3.0	22.0	1705347672	-9.416873
39395867	Is this Guix Nix but with a differen	Is this Guix Nix but with a different language? How is it different? So far I only knew Nix, now I see more and more Guix popping up…	teekert	14.887195	8.444875	comment	3.0	35.0	1708085408	10.56631
39396561	"Had a VM GUIX ""system"" (really I thi"	"Had a VM GUIX ""system"" (really I think its more of package manager
overlay) for a while (18 months ago) but encountered some
problems. The main feature AFAICS is that it maintains the state of
the system and packages all very cleanly via it's own nix build system
which is like a snapshot of everything.The sell is that it's very recoverable - in theory you can rebuild
from a single file. That's very appealing for VMs that need to be
moved about.Unfortunately I needed a couple of things that were available only
through apt. Now, Guix said it was perfectly happy to mix package
management, (a bit like mixing pkg and ports in BSD) - but don't do
that. It all went horribly wrong with confusion over which binaries
were running at any time and when I did try to port it, it broke.I like lispy thing"	nonrandomstring	14.885438	8.440656	comment	3.0	26.0	1708089422	10.497614
39396781	I've been intrigued by Guix for a wh	I've been intrigued by Guix for a while; mainly because I like the idea of Nix but was very turned off by its language, when I was exposed to it through a job I had.One thing I liked about Nix was that it was possible to use its packaging and tools without actually using the NixOS. An old employer used this instead of Docker for managing build distribution. Can the Guix stuff be used the same way?	cmrdporcupine	14.886447	8.442791	comment	3.0	14.0	1708090503	10.535899
39397918	Guix uses Nix under the hood (learne	Guix uses Nix under the hood (learned this when trying to compile it). Perhaps learning Nix first will let the grandparent be more effective in Guix later.	ingenieroariel	14.8834095	8.437952	comment	3.0	14.0	1708095639	10.535608
39490955	nixpkgs is a funny situation where i	nixpkgs is a funny situation where it is incredibly easy to just run with patches and additions locally. It is often easier to make a service config just for you than something reusable and broadly useful.Thankfully the upstream contribution process is also pretty easy. So it seems like a lot does make it upstream.	kevincox	14.898008	8.462044	comment	3.0	17.0	1708776861	-9.376043
39490965	geospatial-nix author here. Thanks f	geospatial-nix author here. Thanks for your interest.geospatial-nix.today is the UI for creation of development and working environments using Nix. It provides easy instructions to get Nix running on your Linux machine, UI to declaratively configure your environment and tools for building container images.We are focusing on geospatial use cases, but this tool is not limited to geospatial only. We support all configuration options provided by Devenv (https://devenv.sh/reference/options/). Actually, geospatial-nix.today website, written in Elm, is developed and deployed by the environment created by geospatial-nix (https://github.com/imincik/geospatial-nix.today/blob/master/...)geospatial-nix (https://github.com/imincik/geospatial-nix) itself is weekly updated geospatial software repository 	imincik	14.896523	8.459967	comment	3.0	12.0	1708776992	-9.430657
39491233	It's easy to open a PR, but not so e	It's easy to open a PR, but not so easy to get someone to actually review it.There's currently 165 open PRs by first-time contributors adding a new package, some of which have been just sitting there without review comments for years. https://github.com/NixOS/nixpkgs/pulls?q=is%3Apr+label%3A%22...At least they're meticulously labeled so it's easy to find them.	yorwba	14.898007	8.463489	comment	3.0	14.0	1708780213	-9.334204
39491319	Yeah if your PR isn't getting the at	Yeah if your PR isn't getting the attention it needs, you probably just need to go to the discourse forum and post a request in the appropriate thread. There's one for PRs that need a review and one for PRs that have been reviewed but are pending a final check and merge by maintainers.https://discourse.nixos.org/t/prs-ready-for-review/3032https://discourse.nixos.org/t/prs-already-reviewed/2617IMHO there could be clearer guidance regarding this but as it is it's not terribly difficult to find and it works well enough.	jacoblambda	14.896448	8.460767	comment	3.0	11.0	1708781107	10.557994
39514888	> nix run nixpkgs#cowsay> This is a 	> nix run nixpkgs#cowsay> This is a game-changer, you don’t have to pollute your system to run a one-off command, or you can try a package out before committing to installing it.Is there a way to run the command isolated from the rest of the system? Because while this is nice it will still leave behind whatever configuration files / caches the program created on start up.	jiripospisil	14.898771	8.464484	comment	3.0	10.0	1708971513	9.876282
39533106	I hope it isn’t just a re-invention 	I hope it isn’t just a re-invention of NixOS (or worse).	meatjuice	14.900073	8.465441	comment	3.0	11.0	1709086694	10.562549
39563073	Ask HN: Could Nix make crypto mining	Ask HN: Could Nix make crypto mining more efficient?	elbear	14.898133	8.46251	story	3.0	2.0	1709309198	-9.381052
39637121	Not to sound too much like an evange	Not to sound too much like an evangelist, but Nix is the first ratchet I've found for software deployment / OS management. Everything else has been a lever.  Once you get something working, it works forever.	colordrops	14.896042	8.456852	comment	3.0	15.0	1709864508	-8.656944
39641934	I use nix btw.I totally agree. It (n	"I use nix btw.I totally agree. It (nix and nixos) is/are such a pain so often. But, wow... when you get things to work it is glorious.Quickly and easily syncing system/user/application configurations across multiple devices is incredible. The declarative approach means that the often laborious effort it takes me to get things to work pays off when I finally figure it out and realize I never have to do that again - and since it's declarative, I now have a documented functional configuration/example to grow and expand from.My current project is to learn Nix development environments by building ""Linux from Scatch"" from Nix. I am making progress slowly, but every success is cemented and replicatable.LLMs definitely help distill the sparse/scattered documentation, but I am finding a good amount"	cloudripper	14.897631	8.460964	comment	3.0	14.0	1709911826	-9.440966
39661151	I would be completely happy with Nix	I would be completely happy with Nix as a universal build and deploy language.	colordrops	14.8983555	8.46369	comment	3.0	11.0	1710093954	-9.448665
39661601	This is pretty neat. I wonder if the	"This is pretty neat. I wonder if the idea could be extended more generally to ""un-nixify"" packages - i.e. replace references to the nix store with relative paths.I can envision some applications for distributing packages for non-nix systems while still relying on nix to build them."	hamandcheese	14.898083	8.462328	comment	3.0	12.0	1710097167	-9.377178
32693925	Beside being invasive on MacOS, as s	"Beside being invasive on MacOS, as said by @ridiculous_fish, it took me more than 3 hours (and it didn't yet finish, I just quit all) to use QMK. I just cloned the Github repository of QMK and did `nix-shell` as they provide shell.nix file.1. Does every nix-shell require building the whole world from ground-up? Seems impractical to me.
2. What is the right approach?This is not to bash Nixpkgs, because I installed NixOS and it took me 10min to install a whole OS with Sway, Neovim and some other tools. I guess I'm doing something wrong. But, on MacOS, nixpkgs was not a pleasant experience at all."	rrgok	14.89849	8.463601	comment	3.0	20.0	1662142076	-9.400344
32694071	I might suggest making a typed super	I might suggest making a typed superset of Nix, basically adding record types and function signatures. That in itself would be a huge boon for tooling and interacting with nixpkgs. nixpkgs describes a huge and varied meta-API for derivations in various build ecosystems, which makes it hard to use because you ultimately need to dive into source code.	tadfisher	14.898983	8.464919	comment	3.0	14.0	1662142720	-9.4451475
32694275	Hot take as a NixOS user that uses N	"Hot take as a NixOS user that uses Nix for work: ""all"" we need is a much better, sound, statically typed language to build better abstractions with.The only hard requirements I can think of are algebraic data types with exhaustive pattern matching to go with, row polymorphism, purity and good inline documentation support.I don't know if a good enough hostable language exists or if it should be a new version of Nixlang, but almost every single annoying problem that makes me go ""Nix is getting in my way"" can be traced back to the lack of a good, powerful type system leading to a house of cards situation whether it comes from nixpkgs or entirely of my own making."	mixedCase	14.899585	8.4659395	comment	3.0	10.0	1662143720	10.523198
32694403	Some community members have looked i	"Some community members have looked into this quite a bit, and personally I have come to the conclusion that types don't really give that much benefit to Nix (and I say this as a Rust & Haskell developer).Nix expressions are almost always[2] short-lived snippets that evaluate to a data structure, not long-running programs where the distinction between ""static analysis time"" and runtime is extremely relevant.In fact, deriving the full set of potentially relevant type constraints is only possible at runtime due to how the import system works and the shape of most expressions. If you pick a single file from nixpkgs without context, you can't get much information from it at all (other than a lot of unknown types being passed to things that accept an unknown type) - it's only in the context of a"	tazjin	14.899479	8.465044	comment	3.0	10.0	1662144356	-9.3424635
32694462	Disclaimer: I'm working on a build s	Disclaimer: I'm working on a build system that will eventually do what Nix does but make it much easier to use.If they do manage to create a system where Nix is hidden, and end users never have to directly touch it, I think this could work and make my work never see the light of day.But I have my doubts that they will be able to do that, and it boils down to one simple reason: declarative is not powerful enough.Don't get me wrong, for 90%, possibly more, of use cases, it's enough. And it is preferable to keep things declarative as long as possible, so much so that my build system will have a way of restricting itself to purely declarative code when possible (and will error otherwise).However, when more power is necessary, it is required; it is not possible, by the definition of Turing-comp	ghoward	14.898753	8.463731	comment	3.0	25.0	1662144688	10.555285
32694998	My main gripe is documentation.Look 	"My main gripe is documentation.Look at this:https://nixos.wiki/wiki/PostgreSQLNow, the real ""workflow"" with nix is look at other setups, or just look at the code:https://github.com/NixOS/nixpkgs/blob/master/nixos/modules/s...And look at the code is the only reliable way to see what exactly is supported.My second gripe is the fact is hard to see what nix do. Today I hit this trouble:https://www.reddit.com/r/NixOS/comments/x46w98/why_new_user_...The thing is: Nixos not tell what is doing. `verbose` is too much noise.What I wish now is something like:    nix change nothing (if my changes somehow don't do anything, like in my issue) 

 "	mamcx	14.898739	8.463836	comment	3.0	12.0	1662147883	10.564255
32694030	"""But there’s a catch: to make that h"	"""But there’s a catch: to make that happen you need to write some Nix, use Nix tools, and probably consult several documentation sources.""You can use bob[1] if you want a build tool which uses Nix to install dependencies in an easy manner: just list the package names for a task and then they will be installed.I'm looking forward for all the changes in Nix ecosystem and it's a good sign the fact that they also started working on an initiative to improve Nix documentation which was spread all over the places.[1] https://bob.build/"	zuzuleinen	14.898853	8.464783	comment	3.0	18.0	1662142471	-9.333592
32713404	I'm baffled people in 2022 still bui	I'm baffled people in 2022 still build on top of Dockerfiles and docker-compose, when nixpkgs (no need to opt-in the entire NixOS ecosystem) solves most issues Docker used to solve (by making 23 copies of Ubuntu bitrot on your SSDs), but also comes with garbage collection for free, and an elegant composition language.	Zopieux	14.896608	8.459002	comment	3.0	10.0	1662301608	-9.385606
32927682	I had a couple people attempt this f	I had a couple people attempt this for the dev environment of https://www.oilshell.org/ with Nix, and it wasn't entirely successful.  (Not Guix, but my understanding is that Guix would have the same issues)As background, we've long had a set of evolving shell scripts that fetch and build dependencies at specific versions -- like bash/dash/zsh/mksh/busybox to test against, re2c to generate code, CommonMark, Python 3.10, MyPy with pip dependencies, and (bonus) R with CRAN dependencies.I wrote about 2 problems here: https://lobste.rs/s/s5co2f/where_contributors_have_problems_...1. OS X and libc, which is not really a problem since our existing scripts don't solve it either.  It was just one motivation for Nix that didn't quite work out.2. The file system layout becomes different, and Oil's sh	chubot	14.893308	8.452767	comment	3.0	14.0	1663778296	-9.347062
32929808	'guix shell' is killer. I use it for	'guix shell' is killer. I use it for all my projects and one-off experiments. I also hook it up to Emacs 'M-x compile' so that compilation happens in the context of the guix shell.  Beyond the simple command line package specification, you can add a guix.scm file to the root of your project repo and fill it with code that specifies all the packages needed for a development environment.  Some of my guix.scm files are simple lists of existing packages, others are full of custom code to modify existing packages or define new ones.  No matter how simple or complex it is behind the scenes, I just run 'guix shell' and get on with working on my project.	davexunit	14.881935	8.435313	comment	3.0	17.0	1663786814	10.520908
32930608	"And of course with Guix System.
(odd"	"And of course with Guix System.
(odd to always see Nix* mentioned when someone talks about Guix.)"	rekado	14.888983	8.446896	comment	3.0	12.0	1663789898	10.529143
32937679	How can one write an article like th	"How can one write an article like this and fail to mention guix? It solves _a_lot_ of the problems mentioned. Guix (and all its channels) is a great piece of software, but unfortunately its potential for populartity is severely diminished by the insistence of the core user/dev group that its goals are not purely technological, but ideological(perhaps even primarily ideological).It seems that for many devs guix is less of a technical achievemt,and more a way of preventing people from being able to run what they call ""non free software"". BTW, ""non free software"" also includes open source software that was released under certain non-compliant licenses.The biggest issue I have with guix is that any effort of packaging ""non-free"" software (such as cuda, intel MKL, nvidia drivers etc). Is heavil"	Roark66	14.87327	8.425287	comment	3.0	13.0	1663848191	10.508892
32956366	Do either of them support the concep	Do either of them support the concept of “layers” like Docker does?I think that feature combined with overlayfs2 is quite useful, despite my many criticisms of Docker.It is sort of a middle ground between Nix like granularity which requires rewriting upstream, and big LXC blobs created with shell scripts.Although I also think we need some kind of middle ground between docker and nix :)	chubot	14.892352	8.448847	comment	3.0	12.0	1663963203	-9.41417
16443107	How do I upgrade my existing Nix ins	How do I upgrade my existing Nix installation? After updating the nixpkgs-unstable channel, nixpkgs.nix is still 1.11.16 (and nixpkgs.nixUnstable is a 2.0 pre-release).	eridius	14.898656	8.464182	comment	3.0	16.0	1519346628	-9.363641
16443347	I have been using nix for a while to	I have been using nix for a while to build binary packages for crashcart[1] and I really love the premise of isolated source-based builds.Unfortunately, over time I've become quite frustrated with the pull-everything from the internet model. If you are building packages from scratch each time instead of pulling down cached version using the nix command, the build breaks quite often.Mostly it is silly stuff like the source package disappearing from the net. A particularly egregious offender is the named.root[2] file being updated, which will cause everything to fail to build until the sha is updated in the build def.I don't know that there is a great solution for this problem. Maybe there needs to be a CI system that does from scratch build of all of the packages every day and automatically	vishvananda	14.897804	8.462082	comment	3.0	27.0	1519348790	-9.39848
16443634	Heh- after a many years haitus from 	Heh- after a many years haitus from running any kind of UNIX/Linux at home, I was thinking about installing a Linux based distro and NixOS was near the top of my list to try.  How does this 2.0 Nix release effect a new install of NixOS- should I wait a bit for a corresponding overhaul of NixOS to come out?  I suspect theoretically it's not necessary, but wondering if NixOS will be tracking this Nix release in some way shortly...  Anyone know?	TremendousT	14.898466	8.463785	comment	3.0	13.0	1519351909	10.565964
16672070	With Darch (I'm the author), you can	With Darch (I'm the author), you can use VoidLinux with a replicated setup.Also, each boot is a clean boot (tempfs overlay). This ensures you capture your OS changes through your build script.https://godarch.com/This gives me what I love about Nix (scripted setup) with OSs I love (Arch and Void).	pknopf	14.898207	8.461031	comment	3.0	12.0	1521984525	10.312633
16774026	We migrated from Debian+Ansible to N	We migrated from Debian+Ansible to NixOS to easier be able to ensure consistency across servers. Rolling back and forth is really easy for most things.It's also the most convenient system I ever worked with for creating custom packages, which is lucky, because NixOS does have fewer pages compared to other distributions.	adamtulinius	14.894855	8.454964	comment	3.0	16.0	1523028957	-9.318014
16774324	> and especially dealing with non-im	> and especially dealing with non-immutable packagesAre you saying that NixOS allows packages to cheat? That seems like a serious flaw.If there's one thing worse than a non-purely-functional system, then it must be a system that claims to be purely-functional but turns out to be non-functional.	amelius	14.897017	8.462041	comment	3.0	11.0	1523030852	-9.279184
16774350	In this vein, are there some people 	In this vein, are there some people here who use Guix as their daily driver? I'd be interested in hearing experiences, comparisons, etc.I have both nix and guix stores on my (voidlinux) system just trying them out. Package availability seems quite different between the two, and guix feels like it's heavier or slower, but I am biased to guix's shepard instead of systemd.	xelxebar	14.8828125	8.436539	comment	3.0	10.0	1523031058	10.547847
19378659	A rant about NixOS	A rant about NixOS	czam	14.8980875	8.464084	story	3.0	23.0	1552485669	10.589801
19793449	Nix's usage of source hashes to pin 	Nix's usage of source hashes to pin every package is more and more prescient, as each language's custom-written package manager reinvents the wheel. (Pun indented!)	boapnuaput	14.898657	8.463473	comment	3.0	22.0	1556671041	-9.354883
19807442	Guix doesn't package proprietary sof	Guix doesn't package proprietary software.	shpx	14.882126	8.435601	comment	3.0	31.0	1556802345	10.54536
19807550	At the beginning of this year I got 	"At the beginning of this year I got hooked-up on this concept of functional system and package management. I've read through all the Nix documentation trying to get a feeling of how should I use it. And it just felt bad - sometimes the documentation was outdated, sometimes it clearly contradicts code on master, sometimes the programming style was inconsistent, sometimes the examples were unclear, too simple or too contrived... Thousand ways to achieve the same things and no clear ""best practices"" way.Is guix's documentation any better? I mean - teach me the theory, but also show me practical examples making use of it so I could remember?"	ferdek	14.889335	8.449319	comment	3.0	10.0	1556803070	10.540139
19966806	I think there is a lot unclear there	I think there is a lot unclear there, or left to be desired.For instance does advanced mean for advanced users, beginners need not apply, or that it is in advance of a real release and is sort of an alpha?I have a macbook, can I run Guix on there? Or is this part of GNU Hurd (something that I heard about on /. 15 years ago)? What is a cool thing I can do with Guix, besides have my freedom respected? Do apt or Homebrew not respect that freedom?I would love someone to break Guix down for me or point me to the best description because there are tantalizing hints of a cool thing but I never get a totally clear picture.	jrumbut	14.880787	8.433705	comment	3.0	11.0	1558400841	10.525818
24775757	That's what Nix(OS) is for :)	That's what Nix(OS) is for :)	Fnoord	14.897719	8.461347	comment	3.0	19.0	1602678713	-9.294172
24800202	I hope Nix takes off for one reason.	I hope Nix takes off for one reason. I don't want people to do same builds again and again especially for Rust it's painful.I want to install binaries with cargo instead of doing the same build again and again. Similar to https://cachix.orgI don't honestly know why that isn't the case yet, perhaps storing binaries takes too much storage that Mozilla doesn't have money for. Or perhaps it can't do guarantees like the ones Nix gives to allow binaries being shared of builds.This is the main reason that makes interfacing with Rust as a plain user a pain.	nikivi	14.898826	8.464055	comment	3.0	21.0	1602851877	-9.345809
24828030	I've tried this out a few days ago. 	I've tried this out a few days ago. I have some basic theoretical Haskell knowledge, but not much practical experience. However I do have some significant Nix experience.Ended up not even going through the beginner tutorial, as the installer/scaffold process required me to do things that I didn't like:- forced scaffolding of projects with some quite blackboxy generated shell scripts inside- use of nix, yet requiring me to install 'make' and 'direnv' system-wide (why? just let me use a shell.nix)- required me to use cachix.org as a system-wide nix substituter, which I don't want to do for security reasons (just allow me to build everything myself)All in all this looked promising, but ended up being too magical for my taste. I'd like to be able to start using IHP 'from scratch' instead - wit	q3k	14.896357	8.464589	comment	3.0	14.0	1603125572	-9.363495
25007625	Step 1: install nixhmm, no thanks	Step 1: install nixhmm, no thanks	anentropic	14.898722	8.463582	comment	3.0	15.0	1604671289	10.555612
25025301	Any users of Guix here, and what is 	Any users of Guix here, and what is your experience?From what I understand it’s inspired by NixOS, but instead of the DSL for configuring packages Guix uses Guile.	danieka	14.880058	8.432819	comment	3.0	11.0	1604837995	10.540446
25025865	Using Nix to write packages sucks, b	Using Nix to write packages sucks, but I think the parent is talking about using it as a package manager (I.e., to install packages that others have written), which is usually a pretty good experience.	throwaway894345	14.898135	8.463281	comment	3.0	14.0	1604844082	-9.382266
25025977	This is a good overview of NixOS how	"This is a good overview of NixOS however it's very limited and barely scratches the surface of what Nix can do.  I consider it a complete replacement for the ""reproducible environment"" problem that some programming languages solve (e.g. Python's virtualenv, Haskell's cabal repl), among others.A simple example of this is when I want to run a Python script from the internet, I can execute  nix-shell --run ""python3 foo.py"" -p ""python3.withPackages (ps: with ps; [ numpy ])""

and now I'm in a shell where numpy is avaliable to the Python 3 interpreter. Or I could test the Haskell QuickCheck library and run  nix-shell --run ""ghci"" -p ""haskellPackages.ghcWithPackages (ps: with ps; [ QuickCheck ])"" 

See[0] for a way to run programs without even installing them by prefixing them with a comma, e.g. "	siraben	14.899309	8.464496	comment	3.0	10.0	1604845505	-9.40938
25026183	On the other hand, getting some apps	On the other hand, getting some apps to work can be a bit of a pain with NixOS. Especially binaries and/or Steam games, things running through Wine can be a pain because standard libraries are in non-standard locations.What I ended up doing since about a year or so is just make my whole root partition something I can generate with Debian debootstrap + chroot. I have a +- 250 LOC bash script which I just invoke on a free partition, and it just completely reinstalls Debian in there as if it were a Docker container.I then rerun this about once every month, reboot, switch to the new partition (and fall back to the old one in case things went wrong, which almost never happens) and I couldn’t be happier with it. Happy middle ground.	stingraycharles	14.898429	8.462383	comment	3.0	15.0	1604847906	-9.30936
25172753	I have yet to see Michael discuss Ni	I have yet to see Michael discuss Nix without spreading inaccurate, flatly wrong information about it (Nix does not have post-install hooks, and `nix-env -i` being slow and unrecommended is a known meme that is addressed in upcoming tooling).Nix fulfills every single requirement Michael has put forward (except the squash>tar thing, which I still don't understand).That's all there is to this. I sympathize with Ericson's frustration. It's exhausting watching people re-invent inferior solutions to Nix, instead of just hopping in and fixing or using Nix. Of course, John Ericson is one of the few people motivated, qualified (and maybe has the buy-in) to make changes in Nix. I'm thankful for that on-going work.	makebackupstoo	14.898754	8.464366	comment	3.0	11.0	1605992665	10.55078
25190637	I was complaining how weird the Nix 	I was complaining how weird the Nix language is, until I saw Scheme.	seqizz	14.896032	8.459614	comment	3.0	11.0	1606159674	-9.905602
25192208	> distance themselves from RMSWhy wo	> distance themselves from RMSWhy wouldn't Guix just leave the RMS's GNU Project then?GNU is a collaboration of free software projects that was started and is lead by Richard Stallman.  Remove the leader, and what's left is just a collection of projects sharing the GNU brand.  And it looks to me that this is what the Guix maintainers are trying to do: reduce the GNU project to a mere formality (participation in it would mean no more than a simple declaration of support for Free software), keep the GNU brand, position Guix as THE GNU operating system.	Fice	14.881835	8.435064	comment	3.0	17.0	1606167269	10.504896
25547449	I'm in the same situation: until I f	I'm in the same situation: until I figure (if ever) how to use NixOS and control version my OS, I tend to use Docker for any application with lots of dependencies, specially Python related ones	sdepablos	14.895456	8.456568	comment	3.0	13.0	1609026555	-9.377393
25643086	Nixpkgs supports LibreSSL, it can be	Nixpkgs supports LibreSSL, it can be used alongside OpenSSL due to the way Nix works, and it is usually a single-line change to compile an application against LibreSSL instead of OpenSSL.	ruuda	14.898482	8.463266	comment	3.0	11.0	1609831833	-9.357682
25719000	I tried to use nixOS as a desktop sy	I tried to use nixOS as a desktop system.Using a special command (nix-shell) whenever I needed to do development things (e.g. Rust builds) was not my idea of fun.Some other things, like overriding GDM's monitors.xml file, were pretty much impossible to do.Maybe it's better if you just use it as a base for servers / containers.	indemnity	14.8980255	8.462141	comment	3.0	20.0	1610308924	10.532038
25719083	I use Void now and like not having s	I use Void now and like not having systemd.  Can I install Nix on my Void?  Do I then just stop using the native package manager?Or would it be better to install NixOS?  Could I then choose not to use systemd?  Would that be hard?Is the idea that you can define your system in a file and reproduce it more or less automatically?How does this compare to Guix?	nincompoo	14.897718	8.461603	comment	3.0	10.0	1610309296	10.563527
25759726	I don't think nix solves this. You a	I don't think nix solves this. You are still left with having to deal with security issues, updates and tracking on pr package basis instead of once for the entire ecosystem.Admittedly, this is a hard problem. And the languages that does use vendoring makes it hard to programatically inspect all of this. But what do you do if say the python library requests has a severe HTTP parsing issue which allows ACE?How many packages would you need to patch on nix?How many packages would you need to patch on Debian, Arch, Fedora, OpenSuse?	Foxboron	14.89877	8.463981	comment	3.0	15.0	1610528058	-9.386172
28734219	I tried to like nix. I spent many ho	I tried to like nix. I spent many hours tweaking my macOS setup but now I’m back to brew. The nix language is just too foreign to my way of thinking. I love the concept behind it but the language is a huge barrier to entry to many people and I believe it will not gain nearly as much traction as it deserves until this is addressed.	johnnylambada	14.8979225	8.462817	comment	3.0	20.0	1633230670	10.560561
28795928	I just use VSCode largely like you n	I just use VSCode largely like you normally would, with the augmentation that I start it from a nix-shell invocation. It’s not perfectly immutable, but I’m here to do work, not to perfect ideals. I can understand why some wouldn’t like this, it’s definitely not ideal. I think it’s not too bad though, at least for my workflow.I don’t have issues with my configuration breaking. My NixOS configuration hasn’t broken due to updates in months.I will say that some stuff is not easily encapsulated in Nix. Of course, you could always use virtual machines or Docker as an escape hatch. I’ve found this to be a fairly good solution in the somewhat rare event I need it.My biggest problem with NixOS is the complexity. Nixpkgs is maintenance hell, and the Nix filesystem is so different from standard UNIX-	jchw	14.89857	8.463349	comment	3.0	12.0	1633669485	-9.436633
28817594	Looking at the GUI, I have no idea w	"Looking at the GUI, I have no idea what it does.I'm guessing that you actually need to know Nix to be able to use it, which kinda defeats the ""usable for non-technical users"" goal.I can see the value of it, if I ever learn Nix, and want a quick way to make modifications without having to google every possibilities."	BiteCode_dev	14.89739	8.461836	comment	3.0	17.0	1633865462	-9.318687
28818871	Wait, isn't a point of NixOS is that	"Wait, isn't a point of NixOS is that your updates are guaranteed to be smooth? I haven't used it, but your story now worries me. I don't want to be back at ""just reinstall the OS"" days, even if configuration is portable."	kvark	14.898332	8.463026	comment	3.0	11.0	1633877475	10.557038
28820169	I think what the parent is alluding 	"I think what the parent is alluding to is: What is the practical point of using Nix when similar outcomes can be reached with more mainstream solutions? In other words, suppose I want to deploy a web app that depends on Nginx, PHP, and PostgreSQL.I could:(a) Run all as docker-compose type solution(b) Run all as scripted Nix solution(c) Install packages manually on general purpose OSLets ignore ""c"" for the moment as the goal is to avoid that exact scenario. Given the prevalence and widespread support for ""a"" why should sysadmins choose ""b""?"	_red	14.897718	8.461732	comment	3.0	15.0	1633886575	-9.358729
28820766	Home Manager always seems like a unn	Home Manager always seems like a unnecessary layer though. Why is it needed if you already control everything with NixOS?	Apaec	14.89838	8.464263	comment	3.0	10.0	1633890361	10.56085
28820784	I don't understand how you can use d	I don't understand how you can use docker-compose, docker, Kubernetes or anything else to achieve the same thing as NixOS. NixOS gives you a fully reproducible personal computing system, from boot config, window manager, partitioning to applications, home directories and everything in between.What mainstream options are available for doing this? Guix could be one option, but it's not mainstream so I'm not sure what tools you are referring to.	capableweb	14.896779	8.459154	comment	3.0	12.0	1633890457	-9.357087
28865106	Consistency is great, but there's no	Consistency is great, but there's no equivalent to NixOS for the BSDs -- that I know of.Am I actually wrong about that? Is there some declarative configuration system I should be using, which I've simply never heard of?	Filligree	14.897626	8.4615555	comment	3.0	10.0	1634223282	10.584352
28869693	I wouldn't expect nothing less than 	I wouldn't expect nothing less than being blamed by Ubuntu developers for a hacked up system, even though I barely described anything.Thanks for giving me another reason to leave the Ubuntu ecosystem behind me. The condescending tone that your message has seems to be relatively popular in the Ubuntu/Canonical community as well, at least compared to NixOS.	capableweb	14.895085	8.456706	comment	3.0	36.0	1634243707	-8.385878
28869638	> Sounds like you have a really hack	> Sounds like you have a really hacked up system thereSome people would call this 'a system that's actually being used to do something'.Don't blame users unless it's clear they are doing something egregious with the system. Installing a different Python version shouldn't break installers, but here we are.Ubuntu should have taken a page from CoreOS, NixOS and even Arch. CoreOS with their immutable system partitions (and two of them so it can revert to a good one if the current can't boot). NixOS with the immutable packages (and the split between user and system packages). And even Arch with its release model.Sometimes you have to 'hack your system' to add a new apt source to try to get your GPU working with OpenCL, or you have to modify some config file on /etc to get something else working	outworlder	14.894969	8.4571	comment	3.0	12.0	1634243447	-9.093683
28887371	It's not unique at that though. Free	It's not unique at that though. FreeBSD has had this for a decade. And Ubuntu is adding it now as an installer option.PS: I do like the idea of NixOS and its USPs which are indeed unique :)For me what's stopping me is the learning curve. I don't mind learning per se but if I put the time in it I'd like it to be for something that's useful in more places. Like ansible.	GekkePrutser	14.898133	8.462397	comment	3.0	11.0	1634387227	10.628237
34121730	> If someone can find a way to do so	> If someone can find a way to do something like Nix, but simple, I'll be interested. Even if it's just a on-rails version of Nix.I doubt it's possible to substantially simplify Nix and still cover all the use and edge cases it does.  Maybe GUIX since it had the benefit of learning from Nix and uses a more familiar (for HN anyway) Scheme, but I haven't looked at closely.It seems that if Nix/OS works for you, it works really well, but if there are use/edge cases where it doesn't then it can be a lot of added effort to wrangle it.	SkyMarshal	14.898852	8.464695	comment	3.0	10.0	1671920571	-9.382196
34127231	Normal flow in other distros I contr	"Normal flow in other distros I contributed to: ""thanks for the patch, we'll do the rest"".Nix flow: your patch is not done according to our guidelines, so fuck off. Still not. Still not. Read the guidelines. Still not, read the guidelines. You have to squash commits manually, we won't enable autosquashing because someone important doesn't like them. Nope, your time isn't valuable because there are too many of you and just one nix.It's like they enjoy spending time to tell occasional contributors, who can't memorize all nix rituals, ""fuck off"" instead of spending that time to do the necessary finishing touches.So, critical issues/vulnerabilities remain unpatched, some formulas are outdated by 5 years, because the relevant maintainer says the old package works for him but new one breaks somet"	pshirshov	14.896821	8.460659	comment	3.0	20.0	1671976477	-9.360064
34127502	This is actually the opposite, by de	"This is actually the opposite, by default, impurities like environment variables can still be used, as well as binaries, or other things !A small example :```[remy@typhoon:~/Blog]$ cat flake.nix
{
  inputs = { nixpkgs.url = ""github:NixOS/nixpkgs/nixos-22.11""; };  outputs = { self, nixpkgs }:
    let pkgs = nixpkgs.legacyPackages.x86_64-linux;
    in
    {
      devShell.x86_64-linux =
        with pkgs;
        pkgs.mkShell {
          buildInputs = [
            python3Packages.pelican
            python3Packages.markdown
          ];
        };
    };
}[remy@typhoon:~/Blog]$ export HELLO=""WORLD""[remy@typhoon:~/Blog]$ nix developwarning: Git tree '/home/remy/Blog' is dirty[remy@typhoon:~/Blog]$ echo $HELLOWORLD```And, because flakes are not stable, you need to enable them with e.g. `--exp"	Reventlov	14.898644	8.465178	comment	3.0	10.0	1671978571	10.560461
34129135	> It's a language, and thus the lang	"> It's a language, and thus the language has may expressions that result in the same outcome.First it's a distribution and a package manager, and the guidance regarding these is sub-par. Especially with what there is of documentation being split between the old and new UIs, then being told about flakes but that they're experimental so it's not clear whether you should or should not use them.I just went to the nix website, clicked ""first steps with nix"" and I get https://nixos.org/guides/ad-hoc-developer-environments.htmlIs that useful? I'm sure to somebody who already knows what they want out of nix it is, but the first thing I'm told is that shell environments exist and are useful to ""use the tool without having to install the software."". Ok, but what if I want to install the software? Th"	masklinn	14.898084	8.46369	comment	3.0	16.0	1671989614	-9.396838
34143863	I have no patience for FOSS maximali	I have no patience for FOSS maximalism as a default. That's why today I run NixOS.	mixedCase	14.89825	8.463889	comment	3.0	12.0	1672104157	10.560113
34145777	I wanted to use guix, but I wanted m	I wanted to use guix, but I wanted more strongly to be able to use the same dot file repo across all my computers and cloud servers.Guix refuses to support any non FOSS hardware (like my MacBook) so that was a deal breaker for me.	tsuujin	14.88146	8.434766	comment	3.0	11.0	1672122268	10.520965
34154955	A major factor why I wouldn't want t	"A major factor why I wouldn't want to use Kopia (I looked into it) ist that it is opinionated with regards to how your system is set up (old-school unix FS layouts in a ""pets, not cattle"" way). It assumes the location of config files and does not allow you to change the backup path that's stored in a snapshot's metadata.That's bad if you want to use it1) on NixOS (I don't want backup configs laying around in `~/.config`). As Indy famously said: ""That belongs in a Nix expression!""Edit: On a second note: Why have mandatory config files at all? I don't have an issue with having the option or it being the default, but for my use case being able to specify the whole repository config via arguments sounds considerably more sane.2) with ZFS snapshots (yes, I'm backing up `/path/to/dataset/.zfs/sn"	btschaegg	14.8981695	8.462919	comment	3.0	10.0	1672181596	-9.390412
34389121	Is it NixOS doing it or is it e.g. s	Is it NixOS doing it or is it e.g. systemd-networkd? (Sounds like something systemd would do.)While I’m confused as to why the boot would need to decide on a MAC address (VM or cheap SBC without a burned-in address? the first case might be easier to correct from the outside), the general state of NixOS is that some things are very flexible while others only cover some common cases (ones that the original author needed to solve). Unlike a traditional distro where the package manager will complain if you replace distro-provided stuff, in NixOS it’s entirely possible to override parts that don’t work for you rather than paper over them with programmatic overrides like these. It’s not even hard to upstream your changes if you make them backwards-compatible, although the benefit can be limited 	mananaysiempre	14.892366	8.452529	comment	3.0	12.0	1673788095	-9.37573
34490943	> Zero to Nix is opinionated because	> Zero to Nix is opinionated because it advocates learning and using flakes and treating channels as deprecated.I think I need a “Channels to Flakes”. I have an existing system configuration that seems to work fine without flakes. What am I missing out on?	aendruk	14.899081	8.467183	comment	3.0	16.0	1674491399	10.617994
34491499	It may not be a fad, but there's a l	"It may not be a fad, but there's a lot of rose-colored hype that masks a world of tedium. New prospective users should be prepared for a lot of uphill grind with respect to configuring packages or defining their own packages. Every time I try to do seemingly simple tasks in Nix, I end up spending hours on the Nix discord channel trying to work out a solution with seasoned users (who invariably struggle to work out a reasonable solution). Often times I end up having to try to figure out how to package some obscure C dependency deep in the dependency tree with its own bespoke build system and so on. Nixpkgs is also pretty poorly organized (or at least I can almost never find the package I need) and this is pretty critical because something as simple as answering ""what type does this function"	throwaway894345	14.902829	8.470015	comment	3.0	13.0	1674493090	-9.376102
34491522	Off topic, but I wonder if the autho	"Off topic, but I wonder if the authors of zero-to-nix.com are aware that their project name actually reads quite funny for German speakers (as ""Nix"" in German also means Zero)"	groestl	14.898585	8.464864	comment	3.0	11.0	1674493158	10.589853
34492019	Can you elaborate? From what I under	Can you elaborate? From what I understand, Nix packages are mostly reproducible as they are running great lengths for that, to the point where every time in Nix land is the exact same.	kissgyorgy	14.899062	8.4647045	comment	3.0	13.0	1674495121	-9.361892
34492089	How does Nix compare to Environment 	"How does Nix compare to Environment Modules: https://modules.sourceforge.net/  Am I correct in understanding they are similar, except Nix has the ""pure"" package building?"	fuball63	14.898209	8.461959	comment	3.0	10.0	1674495394	-9.360888
34492605	I love Nix, all of my machines run N	I love Nix, all of my machines run NixOS, but I think it's 5-10 years out from widespread adoption. Currently the biggest issues have to do with severely lacking documentation, lack of developer tooling (missing things like LSP), very slow iteration cycles, confusing or impossible to understand errors, and even naming (Nix refers to the language, package manager, cli, community, etc).That said, right now it's still the best tool I've ever used. Nix is great at a few things: reproducible development environments, reproducible builds, and reproducible systems. I introduced Nix at my last job to do most of these things and it helped onboarding dramatically: Nix-based development environments with automatic activation, Nix-based Docker image builds which reuse the work done for the dev environ	hiimshort	14.898176	8.4630575	comment	3.0	21.0	1674497489	-9.406115
23394941	I think this guide glosses over the 	I think this guide glosses over the most difficult aspect: writing a package whose executables are generated reasonably reproducibly, using tools from other Debian packages.  I've been a satisfied Debian user for over ten years, but I gave up on trying to package my own software.  I could certainly figure out how to manually create a `.deb` with an executable and some man pages, but not how to automate the creation of that `.deb` in a way that lives up to my expectations of quality.In contrast, I managed to submit software to Homebrew after two weeks of macOS, and to Nixpkgs within two days of running NixOS.	Athas	14.890562	8.446587	comment	3.0	24.0	1591125183	-9.301994
23395127	I've been trying to get a nix file r	I've been trying to get a nix file running today, and the terminology definitely gets arcane very fast.I also have the feeling that the tutorials start with the details, instead of starting with an overview so you can understand what is what.This is guide us already very helpful and I think one should read it before the official tutorial. Thank you!	carlmr	14.898417	8.46374	comment	3.0	24.0	1591125898	-9.226593
23395741	Question 1 - What is the correct way	"Question 1 - What is the correct way to build and install self created derivations? Right now I have a custom fish function:  function nix-local-build
    nix-build --no-out-link \
      -E '(import <nixpkgs> {}).callPackage ./'$argv[1]' {}'
  end

To build and install something I run:  nix-local-build some.nix
  nix-env -i [store-path-from-build]

The .nix file is in the same format as e.g. pkgs/tools/misc/bat/default.nix.Question 2 - How to include such a derivation into configuration.nix?"	thibran	14.898952	8.464497	comment	3.0	14.0	1591128522	-9.493791
23396008	I guess the ideal, for me, would be 	I guess the ideal, for me, would be to have a service where I could upload a Nix file, and then have it generate a server from that. Darklang may be working with the general idea, but I'd like to see it for Nix too.	julianeon	14.897928	8.461213	comment	3.0	20.0	1591130224	10.278387
23396049	Very much agreed; nix is its own wor	"Very much agreed; nix is its own world, which makes it really hard to get into. I wish someone had written ""nix but in python"" (or bash, or whatever) that still used a nix-store equivalent, kept the overall design and the immutable and reproducible packaging, still connected everything by hash, did all the hydra-style build infrastructure.. but didn't use nix-the-language, and made an explicit effort to use more conventional language wherever reasonably possible. Ideally, it'd even let you write expressions in arbitrary languages; it should be perfectly possible to say, ""here is a directory containing 'inputs' and 'output' subdirectories based on your declared dependencies; place any build steps you want in build.sh, so long as they deterministically populate 'output' from the package dire"	yjftsjthsd-h	14.899098	8.464547	comment	3.0	24.0	1591130498	-9.38677
23399564	Just a minor footnote. My interest i	Just a minor footnote. My interest in Nix is not high and what there is motivated mostly by the existence of NixOS. Why do I have any interest in NixOS?We build and distribute Ardour (a cross-platform open source DAW) in a single package that runs on every Linux distribution that has libc, libstdc++, and some version of Xlib.Every Linux distribution that is, except NixOS. They decided to patch the runtime linker so that the approach usable on every other Linux distro breaks there.This says something about NixOS, and presumably Nix too, though I'm not sure what.	PaulDavisThe1st	14.896573	8.4611025	comment	3.0	12.0	1591157288	10.59674
23444781	Statistical Rethinking and Nix	Statistical Rethinking and Nix	HaoZeke	14.892683	8.457106	story	3.0	31.0	1591504338	0.49844247
23528037	I see that guix is a declarative pac	"I see that guix is a declarative package manager like nix. Where does it have a leg up over nix?And how's the GUI integration with KDE and gnome? Is there a backend for KDE Discover or the Gnome Software Center?Finally, I see that installation goes over a ""curl | bash"", which imo is a pretty insecure method of installation. I can understand why such an insecure method exists (so many different ways of installing software on linux), but that's like saying HTTP is a good idea because it's easier than HTTPS."	LockAndLol	14.885406	8.441252	comment	3.0	14.0	1592233528	10.54569
23530376	> This comes at a cost, of course: G	> This comes at a cost, of course: Guix has fever Java packages because of that, but those that it has are actually built from source.Truly this is much more valuable than actually being able to use the software.	AnIdiotOnTheNet	14.879247	8.430768	comment	3.0	17.0	1592242870	10.604546
20324154	We're trying something similar - to 	We're trying something similar - to provide a set of curated services with example deployments for cities or municipalities. We build on NixOS and use morph for deployment. Services include simple-nixos-mailserver, Redmine, Sympa, owncloud with LibreOffice Online and many more. If you're working on something similar or your're interested in helping with this cause feel free to contact me via email or IRC.	flowless	14.89872	8.462109	comment	3.0	15.0	1561978881	4.399201
13834659	As of late i find myself thinking th	As of late i find myself thinking that the big DEs have been a massive distraction from what made _nix so potent. While Windows and Mac had largely tried to hide or distance themselves from the CLI in favor of the GUI, the way X11 is implemented allows CLI programs to use GUI for enhancements rather than replacements.	digi_owl	14.888041	8.441273	comment	3.0	10.0	1489100556	10.535835
13914737	I really love GNU GUIX SD (the distr	"I really love GNU GUIX SD (the distro based on this package manager). I just wish the linux-libre crew would bite the bullet and simply publish an actual HCL. ""Some transmitters with this chipset may not work because they require non-free firmware (that we deliberately changed the kernel to refuse to load)"" doesn't really work for me."	bandrami	14.88061	8.433028	comment	3.0	11.0	1490021923	10.531088
13914260	Creating bundles with guix pack	Creating bundles with guix pack	davexunit	14.883601	8.43785	story	3.0	75.0	1490018411	10.533241
13916062	Yeah Docker and friends exist basica	Yeah Docker and friends exist basically because the industry is blissfully unaware of nice things like Nix.	_ibu9	14.895942	8.456371	comment	3.0	19.0	1490031481	-9.389447
13916648	Not exclusively. If I want to pay so	Not exclusively. If I want to pay someone for support for running NixOS-based servers, who do I pay? Does NixOS have a support term anywhere near Red Hat (or even Ubuntu)? What about the awkward CLI UX? What about a turn-key solution to deploy my app? These questions are reasonably well answered with Docker, less so with Nix/NixOS.I say this as someone who really likes the ideas of Nix. In fact, I see the benefits of Docker as being solved reasonably well by Nix:* Isolation of multiple applications on the same server are handled by NixOS containers, which use the same configuration as a NixOS system and use things like cgroups and namespaces,* Immutable/declarative deployments (through things like docker-compose) are elegantly handled through nix-expressions,* Multiple versions of a depend	moosingin3space	14.89609	8.457974	comment	3.0	11.0	1490035831	-9.397561
30768412	is Nix a hurdle when onboarding engi	is Nix a hurdle when onboarding engineers? do only a few people need to know the language? I've wanted to use Nix and home-manager for personal stuff but the learning curve seems big.	claytonjy	14.898662	8.464178	comment	3.0	16.0	1647967682	-9.504714
30771219	Yeah, the environment is bit-for-bit	Yeah, the environment is bit-for-bit identical in dev and prod. Any difference is an opportunity for bugs.OK, there's one concession, there's an env var that indicates if it's a dev and prod environment. We try to use it sparingly. Useful for stuff like not reporting exceptions that originate in a dev environment.Basically, there's a default.nix file in the repo, and you run nix-shell and it builds and launches you into the environment. We don't depend on anything outside of the environment. There's also a dev.nix and a prod.nix, with that single env var different. There's nothing you can't run and test natively, including databases.Oh, it also works on MacOS, but that's a different environment because some dependencies don't make sense on MacOS, so some stuff is missing.	smilliken	14.898297	8.463317	comment	3.0	11.0	1647981627	-9.348139
30917842	For those who like the concept of Ni	For those who like the concept of Nix, but don't like the Nix language, the Guix package manager [0] might also be worth a try. It's an official GNU project, inspired by Nix, and it uses Guile Scheme instead of Nix language.[0] https://guix.gnu.org/	paskozdilar	14.897784	8.461587	comment	3.0	17.0	1649159687	-9.407474
30917918	I mean to try it but some of these v	"I mean to try it but some of these version managers work on Windows too, I believe Nix is specific to Linux. Lorri sounds amazing though! It's the kind of thing that made me fall in love with solutions such as virtualenv (which handles the ""this directory needs these specific packages"" installed locally, not globally problem that Debian gives you)."	giancarlostoro	14.897581	8.460258	comment	3.0	10.0	1649160180	-9.387539
30918710	Looks cool! However it appears to ha	Looks cool! However it appears to have a bit of a learning curve to get up and running.Are there any other advantages to using nix?	Aleksdev	14.898602	8.463943	comment	3.0	10.0	1649165344	10.597067
30918263	My issue with Nix is thatm like dock	My issue with Nix is thatm like docker, it is a dumb CLI which communicate with a powerful daemon running as root.I don't understand the concept/motivation behind it, everything that nix does should be able to be done in userland, like podman does, which I love.	acatton	14.897935	8.460757	comment	3.0	10.0	1649162696	-9.371428
30922121	> But that's a matter of improving t	"> But that's a matter of improving the documentation or maybe fixing one or two superficial problems on the language.Based on a quick check of their Wikipedia page, Nix has been around for 15 years, since 2007.So those for sure look like structural problems. I don't know which ones exactly, but paraphrasing Tolstoi, popular software products are popular in much the same way, while unpopular ones are unpopular in their own unique ways.In my experience almost no open source project that hasn't entered the mainstream in its first 10 years manages to turn the ship around, unless it lucks into a major change of environment. Programming languages are sometimes exempt if they have a ""killer"" library or framework pop up."	oblio	14.897262	8.46177	comment	3.0	16.0	1649180058	10.518644
30922690	Well, Nix is mainstream.Evidence of 	Well, Nix is mainstream.Evidence of that is that you can just talk about it by name here on HN without explaining what it is.	marcosdumay	14.89778	8.465551	comment	3.0	11.0	1649182279	10.527194
30922152	As a fan of Nix and NixOS, I agree w	As a fan of Nix and NixOS, I agree with this assessment.  Too often people hijack threads about a topic to discuss something related but totally different and off-topic.  It's kind of annoying, even when I'm a fan of the off-topic thing.I've never heard of asdf and popped in here to read about it, people's experiences with it, etc.  If I want to read about Nix/OS I'll find a thread on that, or go to /r/nixos, etc.	SkyMarshal	14.8985195	8.464191	comment	3.0	10.0	1649180151	10.481307
34588037	Nixpkgs' so-called binary cache actu	Nixpkgs' so-called binary cache actually also caches source tarballs. Any Nix users out there who ran updates during the change?Did cache hits save you? Did cache misses break your builds?	pxc	14.898423	8.4646225	comment	3.0	10.0	1675120413	-9.411058
34622833	Nix builds binaries. You don't need 	Nix builds binaries. You don't need nix to run binaries built using nix. Just like you don't need Cargo to run binaries built using cargo. This is about developer tooling.	loveparade	14.899151	8.464402	comment	3.0	11.0	1675318726	-9.419256
34819549	I've been trying Nix devenv[0] and n	"I've been trying Nix devenv[0] and nix-darwin[1] on Mac recently and having a blast. Definitely better than the stuff I had to build around Homebrew to make development environments consistent across machines. Nix-darwin even has support to install Homebrew packages.[0] https://devenv.sh
[1] https://github.com/LnL7/nix-darwin"	aequitas	14.896631	8.459069	comment	3.0	11.0	1676559786	-9.305546
34846272	> and repackage it for their distrib	"> and repackage it for their distributionThere's no ""re"" in there. They decide how to package it for their distribution. The idea that you can take something non-trivial and just install it without issues across multiple systems is flawed. There's a lot of work involved in getting things to work together correctly. (If you don't think that's true, see how many of the current 4k broken packages can you fix in nixos https://hydra.nixos.org/jobset/nixpkgs/trunk )Upstream software often has assumptions about how things work in your system. It's often not correct.> But there's a large ecosystem of software that you can get this way that no longer requires packaging up.Making non-trivial things work correctly in docker, snap, or flatpak is packaging. You effectively still target a specific distr"	viraptor	14.89684	8.460006	comment	3.0	10.0	1676722074	-9.339074
34895214	A few days ago I wanted to update an	A few days ago I wanted to update an Ubuntu laptop that hasn't been turned on for over a year. I had steam and brave browser installed using snap. Updating these two took as much time as updating everything else in the system (1.6Gb of downloads). Then I uninstalled brave, which took about 6-8 minutes. The laptop has NixOS today.NixOS has official GUI installer now https://nixos.org/download.html#nixos-iso	agilob	14.898284	8.463452	comment	3.0	19.0	1677073072	10.548371
34958756	This looks good. I know I'm about to	This looks good. I know I'm about to speak towards the OS version and not the Nix that can run atop other distros, but I definitely had some hiccups on the way to my NixOS-on-ZFS-root install (1), such as the configuration of the root user, whether to declaratively or dynamically configure non-root users and wifi networks (and having a working wifi driver that worked with my onboard chip to begin with... I truly believe that linux installs should not be expected to have to bootstrap via Ethernet at this point). Admittedly, a few of these things were due to not using the official GUI installer, but IMHO the commandline non-GUI install of NixOS should be as painless as possible as well.(1) https://openzfs.github.io/openzfs-docs/Getting%20Started/Nix...Regarding your argument against Bash, is	pmarreck	14.897203	8.460178	comment	3.0	17.0	1677516886	11.942808
34958874	Whew, let's go.On NixOS: I generally	"Whew, let's go.On NixOS: I generally agree, though it can be tricky to get that done with NixOS. I bet we can make some inroads there.Easy questions:> idempotentIt isn't currently idempotent, but we're working on ""curing"" which brings some idempotency to it, and allows for ""rescuing"" installations that aren't working correctly. Curing will also support creating a JSON document for installs that don't already have one.> profitable company or just a group of Nix believersWe are a for-profit company, and we are a group of Nix believers :).Bash:Bash is really hard to get right, and really hard to make fast, and really hard to extend its featureset to more complicated use cases. We could ""just"" download a bash, but when we're trying to navigate disk encryption and APFS volumes and mounts ... it"	grhmc	14.8988905	8.46438	comment	3.0	10.0	1677517325	-9.370269
34959324	Great work Graham and team, I'll be 	"Great work Graham and team, I'll be switching to it on OSX.I wonder if you took a look at some of the modifications done by portable-nix (https://github.com/DavHau/nix-portable), most important ones being:  a) Allowing user to choose the location of the nix folder (for example $HOME/.nix) by using bwrap or proot
  b) Same binary for Win/Linux/OSX on x86_64 (Also see https://ahgamut.github.io/2022/07/27/ape-rust-example/)

And then, somewhat unrelated:  c) Can it be used within NixOS as nix.package = ?"	ingenieroariel	14.897972	8.461487	comment	3.0	10.0	1677519166	-9.36251
34960152	I've been wanting to give Nix a try 	I've been wanting to give Nix a try for a long time. However, I run Fedora and as far as I've seen Nix is pretty incompatible with SELinux. I'm not really ready to take the plunge and move to NixOS so I've just kind of been holding out.	yoyohello13	14.898274	8.462589	comment	3.0	11.0	1677522849	10.542761
34982780	Some Notes on Using Nix	Some Notes on Using Nix	todsacerdoti	14.898303	8.463442	story	3.0	57.0	1677681066	10.548323
34988872	It feels like Nix is crossing some k	It feels like Nix is crossing some kind of developer awareness threshhold. For me as someone perusing various tech threads, this feels like the year that, among developers, Nix is going mainstream.	julianeon	14.898383	8.463781	comment	3.0	10.0	1677707610	10.547634
34989754	The language is in a weird place. Th	The language is in a weird place. The language itself is okay, but you're often trying to use the language to compute a result that meets an interface that is never defined.There is very poor ability to reason about the 'types'/shapes of arguments or the semantics of what outputs should conform to.It seems to require either 1) deep knowledge about the orchestration of the evaluation of the key files you interact with (e.g., what the inputs to configuration.nix will be) or 2) reading many, many examples which eventually have the hints you want.	eximius	14.898607	8.464019	comment	3.0	15.0	1677712822	10.497645
35017442	This was very informative. I’ve been	This was very informative. I’ve been using Nix far longer than Julia and I have endured many battles with mkDerivation, never thinking to go one step deeper. I knew that it was a wrapper over a builtin derivation, but I never realised just how simple builtin derivations are to write, and how much fluff they remove from the process.I can definitely empathise with the debugging approach - with Nix you kind of have to take a scattergun approach, search around randomly trying to find packages or solutions. I’ve since given up using search.nixos.org and now just grep the nixpkgs repository. Often the solution will be in a commented out piece of code saying “removed ugly hack”, then I learn from their solution and apply the ugly hack anyway. Because, you know.	i-use-nixos-btw	14.898518	8.46344	comment	3.0	11.0	1677895777	-9.385681
35035230	My experience has been that after ha	"My experience has been that after having become comfortable with Nix, self-hosting is the path of least resistance for the majority of ""mainstream"" tooling where you can pick between paying for a SaaS or self-hosting. So nice to not have to deal with Docker containers to deploy (most things) anymore.I see a lot of people suggesting hosting on a VPS, but I feel that a Hetzner Auction box is often much better bang-for-buck and serves as a nice remote dev/build box for projects that need that extra oomph when you aren't working from a capable desktop or laptop.[1]: This was the article that finally opened my eyes to the power of Nix for self-hosting https://arne.me/blog/plex-on-nixos, and it is such a huge upgrade from the previous Docker setup I was running[2][2]: https://github.com/madslund"	bsnnkv	14.896264	8.456581	comment	3.0	11.0	1678057830	9.987145
35092447	The project compiles LISP to C (with	The project compiles LISP to C (with Haskell code-base) and relies on a C compiler to generate executables. This means you will have to get your C dependencies in-place to work with carp.I was trying this from `nix-shell -p carp` and immediately ran into issue with this when building the hello world example from the README. (Package sdl2 was not found).Not sure how to fix this just adding `- p SDL` to the nix-shell prompt does not help, as the invoked compiler does not know where to look.Any recommendations here? I want to avoid using a global clang/gcc installation for various reasons. Is running this under `nix` a good idea? Should I move this into a container?	heinrichhartman	14.897838	8.461121	comment	3.0	11.0	1678441512	-9.373939
36904828	From my experience, Nix makes lot mo	From my experience, Nix makes lot more reliable and easier to configure router. ymmv	pshirshov	14.9013605	8.467071	comment	3.0	14.0	1690538505	10.560288
36905621	I just finished building a router ba	"I just finished building a router based on NixOS and I must disagree.
NixOS modules mostly targets desktop and servers, but the network specific configuration is still very lacking. A few examples:- up until a couple of weeks ago the hostapd module was basically a toy: could only manage a single SSID, no way to configure the radios, hardcoded to WPA2-PSK;- the NixOS firewall is still based on iptables and conflicts with nftables, so you must disable and manually write rules;- the `networking.nat` module (NAT44) doesn't do NAT reflection;- I had to write a module for Jool (NAT64, SIIT);- I had to write a module for libreswan (IPsec);- I had to write a module for automatic rollbacks, otherwise you can loose access if you make a mistake.Vyatta and VyOS also provide a much higher level abstrac"	rnhmjoj	14.899391	8.46433	comment	3.0	11.0	1690545601	10.539058
37003169	Nix solves a different problem than 	Nix solves a different problem than Hocus. Nix lets you define a development environment, Hocus gives you a way to run it on a remote server. Right now we use Dockerfiles to let users define the packages they need in their dev env, but we would like to support Nix in the future too. Interestingly, you can use custom BuildKit syntax https://docs.docker.com/build/dockerfile/frontend/ to build Nix environments with Docker https://github.com/reproducible-containers/buildkit-nix, and that's probably what we will end up supporting.	hugodutka	14.89746	8.460591	comment	3.0	12.0	1691170437	-9.387467
37103267	NixOS: Intentionally breaks compatib	NixOS: Intentionally breaks compatiblity with a lot of scripts and binaries due to not having /usr/bin/bash and not putting libraries in a standard location despite the fact there is still /usr/bin/env and a bunch of symlinks to things  under some obscure folder in /run. It will make sure that every user has to learn Nix because you won't be able to run things from the internet without going through Nix's documentation trying to figure how to package something when you just want to run it and get on with your day.If you enjoy packaging then this OS is for you.	charcircuit	14.898657	8.463539	comment	3.0	22.0	1691867544	-9.388505
37103344	I think Nix should fix their horribl	I think Nix should fix their horrible UX before trying to market it too much.	lijok	14.898622	8.46458	comment	3.0	14.0	1691868034	10.550503
37104102	nix is so clearly superior and yet n	nix is so clearly superior and yet nobody uses it. curious!	starlevel003	14.899409	8.46547	comment	3.0	13.0	1691873210	10.530687
37104203	Currently using Fedora Silverblue. I	Currently using Fedora Silverblue. I am tempted to learn Nix and NixOS, but I have red several accounts that Nix is hard, documentation somewhat lacking, the ecosystem frustrating. Can anyone tell me if I should invest time to learn Nix, nonetheless?	zvmaz	14.897938	8.46289	comment	3.0	10.0	1691874225	10.525403
37105657	> With the goal of ending this curre	> With the goal of ending this current limbo and soothe longstanding tensions in the Nix communityCan someone with more background give a quick explanation about why is this a source of tension in the nix community in the first place? Is this a situation of too many cooks in the kitchen or something else?	m1keil	14.898599	8.464218	comment	3.0	21.0	1691888910	10.525006
37105683	Because Flakes are simultaneously di	Because Flakes are simultaneously discouraged and labeled as unfinished, yet used by many.Some aspects of Flakes are a bit contentious. For example, official adoption of Flakes will mean Nix will no longer be a mono-repository. Plus, Flakes are tightly coupled to Git.However, Flakes bring welcome improvements to longstanding issues. Most notably, package pinning and explicit versioning, which are problematic when using channels.	nextos	14.898782	8.468125	comment	3.0	13.0	1691889157	10.637046
37105920	It's no lighter than a process runni	It's no lighter than a process running in docker, on a Linux machine at least.  With docker you have a whole root filesystem packaged up and a process inside it is executed on your system with certain kernel namespacing to set its root filesystem, users, network access, limits on memory and CPU usage, etc.With nix instead of a tarball being the root filesystem it's a bunch of symlinks to stuff in the nix store directory--the process you run is exactly the same as whatever you're running in docker.One crucial difference is that nix does nothing for network isolation, you have to do all that on your own (if you need it).	qbasic_forever	14.897367	8.459285	comment	3.0	18.0	1691891769	-9.373981
37106120	> Building third party flakes takes 	> Building third party flakes takes forever since every flake uses its own version of nixpkgs.The “official” (as in, community consensus) solution seems to be to bring your own nixpkgs, and manually override the nixpkgs of every dependency (and their transitive dendencies) and verify your build still works. Which just doesn’t seem right to me.Flakes are great for building an ecosystem of composable, reproducable software. The more they succeed at that, the bigger the problem becomes. Surely it’s not too late to figure out a principled solution before stabilizing flakes?	_hl_	14.898915	8.466953	comment	3.0	10.0	1691893945	10.661279
37107535	> Honestly, it’s Home Manager that r	"> Honestly, it’s Home Manager that really adds the maximum valueI feel like Nix does have such killer features, but they are different for everyone.For me it was:- system management (nixos + nix-darwin. I wish there was something like nix-darwin for non-nixos linux distros, binding daemon systemd units and desktop files into the ""hosting"" distro)- on-the-spot running without globally installing for one shot tasks (nix-shell -p iotop --run iotop)- ""just works"" project environment (default.nix+shell.nix or flakes)These are the ones that made me tip over and decide to go from tiptoeing to full tilt"	lloeki	14.8979025	8.462463	comment	3.0	11.0	1691911958	10.621374
37107848	> without double checkingIt's fine, 	> without double checkingIt's fine, Nix things are conceptually different from anything before.You could say flakes are like Rakefile, but that would be a lie. You could say they're like Gemfile and Gemfile.lock, but that would be a lie too.You could say that derivations are like packages, but that would be a lie, you could say they're like container images but that would be a lie too.Now, you can try to understand what these concepts are by mapping to known knowledge of other things in terms of use cases they solve, that's fine, but at their core these concepts are different and quite unique, so it only makes sense for them to have different names.Naming is hard, Nix folks had to pick one for each concept, and they chose not to lie by picking existing names that would not map and create b	lloeki	14.897684	8.464519	comment	3.0	10.0	1691915438	10.573476
37108483	To date I've paid no attention to Fl	To date I've paid no attention to Flakes because whenever I look at them, they appear to require me to manually list all target architectures in the Flakes file, which is ridiculous. I'm not going to make the code I publish needlessly dependent on specific architectures.This problem seems to be solved commonly in two ways:- People thoughtlessly and senselessly listing only x86;- People using the popular flake utility repository.Having to rely on an unendorsed third party just to write architecture-independent code isn't very appealing to me. This seems like a serious deficiency in the design of Flakes, though it would be tolerable at least if this functionality was at least in Nixpkgs.	hlandau	14.898606	8.468054	comment	3.0	15.0	1691921969	10.627622
37109339	Just today I was setting up a server	"Just today I was setting up a server for a side project and mulling over do I use ol' reliable Ubuntu+Ansible vs finally trying NixOS. I was very sad to see that all of the popular VPS services (Digital Ocean and the like) ""no longer"" officially support NixOS.Linode was nice enough to have an official ""how to set up NixOS on Linode"" guide, but it requires fiddling with partitions by hand. At that point, I feel like all of the repeatability gains are gone. If I want to spin up a fresh server, I have to read a guide and set stuff up by hand? Could spend that same time setting up an Ubuntu by hand each time followed by git pull or scp to deploy. Ended up using Ansible in the end, as it really does let me just get a new VPS and deploy to it very fast when the time comes.I wonder why the big pr"	resonious	14.897313	8.460826	comment	3.0	11.0	1691929893	-9.344795
37225193	It seems like the Nix community is a	It seems like the Nix community is already headed towards a soft fork. DetSys already provides their own Nix installer, and now FlakeHub. Jetpack has Devbox, which is an entirely different interface over flakes.I’m no Nix expert but I’ve used it enough to know that the hype exceeds the capabilities and especially the UX of the tool currently. (Just as an example, pinning versions that aren’t in the current nixpkgs release isn’t even possible right now without resorting to overlays and other hacks.) Frankly I’m glad that people are working to make it more user friendly. It reminds me a lot of when I first tried Stack for Haskell: packages just worked out of the box, no more tracking down arcane cabal-install errors and figuring out why it didn’t build in my machine.	jolux	14.898346	8.464651	comment	3.0	16.0	1692722323	10.574779
37225205	Wow, i wasn't interested at first be	Wow, i wasn't interested at first because i'm already using flakes and i didn't  think this had much value to me - i don't mind adding a flakes repo directly, for example. Then someone linked the discussion on Discourse[1] which has..:> FlakeHub not only indexes flakes, but provides a mechanism for fetching compatible versions based on Semantic versioning — and, unlike pinning tags in your flake.nix inputs, keeping them up to date.> This means that you can specify that you want your input to be compatible with whatever is the latest release at the time that you add it, and get bugfixes with every nix flake update, without manually having to keep track of the releases made upstream, nor follow a development branch which may introduce breaking changes at any time.Which is stupidly sexy to me	unshavedyak	14.899003	8.466321	comment	3.0	13.0	1692722356	10.584877
37225284	Perhaps a bit off topic, but I've be	Perhaps a bit off topic, but I've been playing around with NixOS lately, and I don't understand what the advantages of using flakes are, or really what problem they solve. Granted, my interest in Nix is simply because I think it's cool to have the OS be configurable from a file, and I'm personally less interested in some of the reproducibility features. I've tried reading up[0] on some of the advantages of using them, but my eyes start to glaze over pretty quickly.[0] https://nixos.wiki/wiki/Flakes	aquova	14.899081	8.466377	comment	3.0	10.0	1692722698	10.6233225
37340669	I thought I started to understand fl	I thought I started to understand flakes, but now I feel clueless again.	mongol	14.898767	8.467549	comment	3.0	13.0	1693502637	1.5306357
37456679	You point to Nix as if it was doing 	You point to Nix as if it was doing anything whatsoever the remove difficulty. You are replacing the entire libc. There's practically no benefit whatsoever to a prefix-install, Nix, a container, or whatever you want. You are going to hit the same issues whether you do this with Nix or you do this with plain old chroots. At the end of the day you'll have to use a chroot or ld/elf trickery anyway since the game binary will expect the libraries in hardcoded paths.You'll hit build issues, bootstrap issues (at which point you'll likely need an old Linux on a VM), kernel issues (which will force you to either patch the kernel, the libc, or both), and then a myriad of desktop integration issues, which is as usual the pain point and the main reason I always say static linking is absolutely useless	AshamedCaptain	14.898891	8.463581	comment	3.0	11.0	1694359343	-9.320181
37538759	NixOS Wiki – the unofficial user wik	NixOS Wiki – the unofficial user wiki	c0balt	14.898144	8.462996	story	3.0	48.0	1694898763	10.52808
37555709	Off topic, but does anyone know how 	Off topic, but does anyone know how to find out where mutable data for NixOS modules are stored at (e.g. the data directory for a database) without reading the source? Occasionally, it's mildly annoying, and would be comforting to know with certainty where all my state is.	qazxcvbnm	14.89801	8.462858	comment	3.0	10.0	1695043168	-9.351645
35136477	Brief is an understatement!For those	Brief is an understatement!For those who have never heard of Rexx, it was developed in either late 60s or early 70s at IBM. It is a powerful scripting language.I first encountered it in OS/2 where it was the default (built-in) scripting language. During the OS/2 days a couple of GUI drag-and-drop app development products were built with it (Watcom's VX-REXX and VisPro Rexx). I used VX-REXX to create a graphical client/server application for OS/2 that used DB2/2. It was unbelievably productive. I've heard that VisPro Rexx was also just as good.I also worked with Rexx in z/VM (and z/OS to much lesser extent). It was nice to know one powerful scripting language that could be used across various IBM systems.There were a few odd things in the language -- 'stem' variables come to mind. This was 	poo-yie	14.884242	8.436184	comment	3.0	13.0	1678719109	-8.339691
29075138	Why are flakes included in the relea	"Why are flakes included in the release notes if they are still ""experimental""? Has there been a change in the status of flakes between 2.3 and 2.4?"	orangea	14.899218	8.4680605	comment	3.0	11.0	1635811722	10.6946745
29187824	Is it possible to use IHP without in	Is it possible to use IHP without installing Nix? I already have brew as general package manager and ghcup/cabal as Haskell toolchain/library manager and dread having yet another package manager that might interfere...	tromp	14.898172	8.462861	comment	3.0	10.0	1636638851	-9.414799
29267545	What's your experience with Guix and	What's your experience with Guix and Nix on laptops? Which among them are sufficiently supported to be daily drivers?Have you tried running Proton on Guix?For someone who is interested in the Guix/Nix ethos but wants to keep Arch, is there anything aside from sentimental reasons that I would be missing by just running the Nix/Guix package managers on top of Arch .	Dracophoenix	14.886282	8.442147	comment	3.0	12.0	1637254231	10.554954
29286453	Author is a lisper, is a good reason	Author is a lisper, is a good reason.And while nix may be battle tested that doesn’t translate to a good experience, the learning curve is high and the documentation while plentiful is not really good or helpful to beginners. Plus the entire thing is in flux right now between flakes, home-manager, and a desire to kill nix-env.	masklinn	14.898333	8.46384	comment	3.0	17.0	1637396251	10.524113
29286555	What about number of packages availa	"What about number of packages available?
Does guix have something comparable to Nix Flakes?"	kohlerm	14.885777	8.441913	comment	3.0	12.0	1637397888	10.540551
29286799	I moved to NixOS and came back to Ar	I moved to NixOS and came back to Arch because setting up development environments for general purpose computing felt tricky. I was on a schedule so had to drop it. Is it the same for Guix? I don't know why it should be any different. But still asking.Also, am guessing people will likely have hardware compatibility issues for Guix which isn't a problem for NixOS since they bundle non-free drivers etc.	Gentil	14.889661	8.448249	comment	3.0	10.0	1637402513	10.548748
29288153	"Lobbing a charge like ""Arbitrary rel"	"Lobbing a charge like ""Arbitrary religious dogma"" is pretty much the opposite of a reasoned look at what the goals are here.I find the approach interesting. The goal of the Free Software folk was never primarily to ""provide the best information to the end user,"" it is to ""preserve software freedom.""  Guix looks like a possible technical path to do that. Will it work? Will it cause harm? I don't know yet.Either way, the law-slash-tech has always come before ""ensuring that it's public-understood and ready"" as it should."	jrm4	14.857928	8.406823	comment	3.0	26.0	1637417087	10.493522
29289809	Closure vs. derivation in the Nix pa	Closure vs. derivation in the Nix package manager	ingve	14.898978	8.464279	story	3.0	46.0	1637427921	-9.395364
29304308	I thought so at first too, but then 	I thought so at first too, but then I realized, no matter what distribution comes up in the future, learning a new distribution from the ground up is going to be hard no matter what. I dove head first into Nix and after a understanding the language, the OS and package manager was actually not that hard to understand. Now in after hand, I don't regret any of the the time I spent learning it.	diggan	14.898693	8.463897	comment	3.0	19.0	1637571489	10.532481
29305049	I've been looking for a simple packa	I've been looking for a simple package management solution that doesn't interfere with my OS and simply puts all packages in /some_location/package/version, and that allows me to install packages on remote machines together with the other packages they depend on.I thought Nix could be this; unfortunately it looks like it's an overengineered thing that requires that everything you do follows the Nix philosophy.	mgaunard	14.892321	8.442947	comment	3.0	12.0	1637578371	-9.147349
29304352	Can you try https://nix.dev and let 	Can you try https://nix.dev and let me know what's missing?	domenkozar	14.898805	8.463185	comment	3.0	11.0	1637571913	10.516787
29308514	Oh hi! Author here. Fun thing to wak	Oh hi! Author here. Fun thing to wake up to.I wanted to point something out that the series doesn't do a good job of highlighting:You can use Nix alongside your existing package manager.They won't conflict. You can set up dev environments with Nix without drinking the kool-aid. I still have Homebrew installed, and I still occasionally reach for it in the rare cases where Nix is missing some package I want to try. But I am sad every time I do: I never really realized how unbelievably slow Homebrew is until I tried Nix.So if you're Nix-curious, you can try it out without committing to anything upfront. I didn't make the switch until part 19:https://ianthehenry.com/posts/how-to-learn-nix/switching-fro...Nix is weird and hard to learn, but it's a lot like git in that respect. Yes, the UI is te	ianthehenry	14.898346	8.46254	comment	3.0	14.0	1637599917	-9.393663
29368575	At least now I know why my nix build	At least now I know why my nix builds are failing...Odd for something like this to slip through and not be rolled back immediately.Unless it was intentional, in which case it would be even more odd to not communicate this widely beforehand.	the_duke	14.898493	8.4641695	comment	3.0	19.0	1638104354	10.529193
29388312	I tried using Nix and NixOS early in	I tried using Nix and NixOS early in the year, but documentation is an issue. Also, while I appreciate NixOS’s focus on reproducible configuration, I also have 25 years worth of mediocre Unix sysadmin experience, and it would be nice if the system found a way to accommodate Unix. My last straw was trying to get nix to schedule some task through systemd, when what I wanted was a simple crontab.	jonstewart	14.898347	8.463529	comment	3.0	12.0	1638240361	10.552931
29388576	I've always kept my usage of Nix lan	I've always kept my usage of Nix language to a minimum and found it to be a joy every time. But it's no wonder you'd have trouble on something that humongous. Why did it get so large?	lvass	14.898233	8.463857	comment	3.0	14.0	1638242621	10.498832
29389692	Worth noting in this context of OP, 	Worth noting in this context of OP, though, is that Nix predates Docker by about a decade.	amarshall	14.896204	8.457447	comment	3.0	28.0	1638255707	-9.37729
29400457	NixOS 21.11 Has Been Released	NixOS 21.11 Has Been Released	Atemu12	14.898465	8.463822	story	3.0	68.0	1638330628	10.544165
29413299	Is tvix/nix pretty tightly coupled t	Is tvix/nix pretty tightly coupled to the Linux kernel? I know there is some effort to use the nix package manager on OSX, but I'm not sure if that is a hack or an actual full port to a different kernel. Could it be used on, say, OpenBSD? SeL4?	darksaints	14.897483	8.462138	comment	3.0	12.0	1638428075	10.566175
29413552	There are noble goals to this projec	There are noble goals to this project to rewriting Nix to improve performance. The reasons feel valid. However I wonder about certain issues:- Nix itself has problems of compatibility with Nix! Let me explain...recently NixOS 21.11 released. It still comes packaged with Nix 2.3.16 instead of Nix 2.4 because of incompatibility issues. When the Nix project itself is not able to deliver backwards compatibility I feel uncertain that Tvix might be able to deliver their promise of full compatibility with all the deep architectural changes it plans. Nix does not have a formal specification: Nix is what its C/C++ implementation says. Nix also has deep architectural changes planned going ahead. So Tvix will need to re-architect Nix keeping in mind (and keeping up) with the future changes that are c	sidkshatriya	14.897863	8.462982	comment	3.0	25.0	1638431102	10.548981
29413618	What would seem most useful would be	What would seem most useful would be a compile-time-typed language (perhaps with some inference propagation, for convenience) that existing Nix code could be translated into, maybe even while emulating execution to discover the actual types to annotate with. You have the advantage that all existing production Nix code is known to terminate in short order.Then, you could generate a new version of the entire 30,000-strong package collection automatically, with the new language swapped in in place of the Nix code, which could then be abandoned.	ncmncm	14.898826	8.464083	comment	3.0	13.0	1638431868	-9.393354
29413850	I would also like it if the language	I would also like it if the language itself can be decoupled from the build and package manager system, so that it can be embedded in other software that would benefit from a language like nix. I think that might be a worthy goal and could attract people outside of the nix sphere.	chme	14.897533	8.4627	comment	3.0	18.0	1638434508	-9.396237
29424391	My VR Hell on NixOS	My VR Hell on NixOS	todsacerdoti	14.897048	8.461672	story	3.0	26.0	1638487436	10.507333
29617982	Being the default and thereby “recom	Being the default and thereby “recommended” desktop in NixOS a lot different than in other distro’s.In other distro’s, to get a non-default desktop, you have to download a whole different distro “spin”, like Kubuntu.  Or add the new desktop packages and manually configure them all.With NixOS you use the same install image, and just change two or three lines in the master configuration.nix file, and re/build.  You can change back and forth between DE’s that use different window managers with a reboot, or between DE’s that use the same window manager with a relog [3].Most the major desktops are supported in NixOS [1][2].  Gnome being the default means little, is easy to change should NixOS community ever form a consensus about changing the default (say in response to Gnome crossing some line	SkyMarshal	14.89861	8.463812	comment	3.0	10.0	1639945576	10.585837
36075749	> Not really. Nix is not a tool, it'	"> Not really. Nix is not a tool, it's a toolkit for making your own tools. Very much in the vein of Unix, shell, etceven tools for tools should be ergonomic to use. the Nix language server should have autocomplete, searches and interacting with the language should be easy, etc. and nearly everyone needs to hunt for packages, even if they're not ""installing"" them - they might be needed for the toolchain.Nix is like early Git. all the raw power is there, but little of the porcelain. it's so much better than anything before it that we accept the pain of dealing with exposed plumbing, but we shouldn't get used to it."	sterlind	14.898146	8.463877	comment	3.0	12.0	1685046477	-9.385398
36143332	> the only impractical part is numbe	> the only impractical part is number of packages in Guix is really small compared to NixFor reference Guix has 21,798 packages while Nix has 80,000+.I think another issue with Guix is that some packages just seem to go away after a while, and it's a tiny bit inconvenient to get at older versions once they've slipped out:https://unix.stackexchange.com/questions/698811/in-guix-how-...That said I'm all for guix over nix (though day to day I use neither) because I think a full programming language is the better tool for this use case (in my mind terraform vs pulumi all over again).Also there's one more issue which is related to guix's avoidance of binary blobs -- IIRC this means stuff like gfx drivers can be hard to come by/make work and I think this is by design.Before that just meant that g	hardwaresofton	14.884748	8.439894	comment	3.0	18.0	1685562907	10.529592
36239707	Although it is not the Guix, Nix sup	"Although it is not the Guix, Nix supports:    x86_64-linux
    aarch64-linux
    i686-linux
    x86_64-darwin
    aarch64-darwin

Perhaps some day this will also be possible for Guix, but I don't think it fits the ideology of Guix since MacOS isn't free (not as in beer)."	cornedor	14.884728	8.4400425	comment	3.0	11.0	1686220636	10.556227
36239729	Nixpkgs is enormously larger.I like 	Nixpkgs is enormously larger.I like Guix better in principle as well, but it should be clear that its principled stance on what software can be packaged means it's a nonstarter for many people.	Filligree	14.895681	8.458207	comment	3.0	17.0	1686220967	10.548411
36240207	Wait it's integrated with SystemD? W	Wait it's integrated with SystemD? What is a package management system doing with the init process? I now remember that Guix is a daemon, something that made me really wary at the time; but a SystemdD dependency is something else entirely.	galdor	14.877816	8.428837	comment	3.0	10.0	1686224397	10.533044
36251024	"> The ""immutable"" conceptWhich is bo"	"> The ""immutable"" conceptWhich is both good, and actually sane.NixOS: Exists. (And runs great after I moved from Arch 1.5 years ago!)"	pmarreck	14.896848	8.459726	comment	3.0	16.0	1686268193	-9.014366
36363974	This probably goes against the flow,	This probably goes against the flow, but I tried NixOS on a VPS and I found the tools to be inscrutable. Was so confused about Nix packaging and whether to use Flakes.	commandersaki	14.898905	8.466216	comment	3.0	13.0	1686950016	10.585449
36364087	Depends on the person. I work in a c	"Depends on the person. I work in a company that uses Nix for everything one could possibly imagine, and I've found there are a few types of people:1. The purist: Is on an actual crusade to promote Nix and stomp out any competition, because, ""reproducible.""2. The enthusiast: Likes using Nix to speed up development but recognizes it has a ton of shortcomings, among others being not friendly to beginners, and tends to avoid using it in production critical stuff.3. The ex-Nix: matches the enthusiasm of the purist in stomping out Nix wherever possible and actively promoting its demise.I'm personally in the second category. I use Nixos for my main development machine and really like devshells. Beyond that, I try to avoid it as much as possible for production."	aliasxneo	14.898298	8.463762	comment	3.0	10.0	1686950544	10.551008
36378339	That's the thing.All containers are,	That's the thing.All containers are, are a standardized way to ship (distribute) your artifact (application) with it's dependencies inside it. It's a tar archive with a manifest file. I find it easier to think of them as RPM/deb files. You get an artifact repository for free and benefits of the onion file system to reduce size.People package entire OS distributions in their container, I consider that an anti pattern. Unless you are shipping static HTML your container shouldn't have NGINX or any other stuff in their, especially if you are running NGINX in front of your container anyway.If your app is written in Go/Rust/C, anything that produces a static executable, the only thing in the container should be the static executable... i.e. 'FROM scratch', 'cp my-app /bin/my-app`, 'ENTRYPOINT /b	tiew9Vii	14.894756	8.456666	comment	3.0	12.0	1687076946	10.112985
36388256	I feel a little lost on nixos. Been 	I feel a little lost on nixos. Been using it for a while now on my main personal desktop and it's fine, but whenever I want to do something like running a python project (ml based ones for example), or compile software from source, I'm lost because I don't know what I'm doing. Most projects target Ubuntu, so I feel you need to know a lot about how nix really works to get them compiling, which is often not what I'm in the mood for tinkering with when I just want to test something.So in the end I end up using distrobox with Ubuntu which works surprisingly well, but feels very hacky as I'm supposed to try and use nix. The way I rationalize this is that I'll get rid of distrobox slowly over time as I learn how it works.	CapsAdmin	14.898484	8.463813	comment	3.0	14.0	1687159377	-9.377739
36388091	> A lot of Nix documentation I’ve fo	> A lot of Nix documentation I’ve found says things like, “Simply add these lines!”> Huh?> Which file? And where in the file do I add those lines?This issue is prevalent everywhere. Even the best documented projects fail into this trap almost immediately.	troupo	14.896517	8.46037	comment	3.0	10.0	1687157761	10.558476
36389785	Nix reminds me about that xkcd comic	Nix reminds me about that xkcd comic about standards. It seems to be to be solving a problem solved in a much better way by other alternatives with the mindset of IT from a bygone era.I may just not really be the target demo, or maybe am just a huge idiot, but I struggle to see the appeal, especially when you hear about the occasional horror stories about complex and/or broken environments, or the vim-like overhead to learn it properly.	stayfrosty420	14.898445	8.464292	comment	3.0	10.0	1687174129	10.544422
36390670	Author here.Thanks for the clarifica	Author here.Thanks for the clarification! I'm still new to Nix, so I'm trying to share useful things I'm learning without overstepping my expertise and saying wrong things.My mental model of Nix was that if I'm in system state A, which is the result of performing task X + Y, and I want to get to system state B, which is the result of task X + Y + Z, then Nix would recognize that it's already in state A, so it only has to perform task Z to get to state B.It sounds like what you're saying is that Nix's actual behavior is that if I'm in state A and tell Nix to bring me to state B, then Nix still performs tasks X and Y again, but the results are cached, so tasks X and Y feel as fast as a no-op, and the only task I perceive as taking time is task Z.Is that right?	mtlynch	14.898389	8.464331	comment	3.0	10.0	1687180278	-9.394541
36391087	So does this allow for different boo	So does this allow for different boot setups for NixOS? Say “webserver” or “office management” , “media streamer” profiles?	prox	14.89817	8.4626465	comment	3.0	13.0	1687182658	10.541065
36391239	You don't have to manage your system	You don't have to manage your system with NixOS to reap the benefits of Nix. It solves very real problems that very much exist, it might not exist if you're a one-man show deploying WordPress to GoDaddy though.Barrier to entry:1. Run the nix installer2. Enable flakes3. cd project4. nix runThis ensures you run the package with every dependency except the kernel pinned to a hashed version. If dependency hell is not a problem for you, be happy!	carlhjerpe	14.898443	8.464663	comment	3.0	26.0	1687183543	-9.37747
36391252	> The biggest barrier to adoption un	> The biggest barrier to adoption unfortunately is not people's inability to explain what the tool is in my opinion.That's simple: nix is a package manager and the language used by the package manager, NixOS is a Linux distro.> It's that the tool is incredibly complicated, extremely hard to walk someone through compared to alternative projects, and honestly... In my opinion the problem it attempts to solve doesn't really exist.From someone who is working as a DevOps Engineer for some years and managing Linux servers for a few years longer that thought is incredible naive. The problem of undefined and undocumented system state is a fundamental problem I encounter everywhere especially bad with legacy systems. I often do things on them blind and just pray for the best outcome, realising mont	SuperSandro2000	14.897694	8.461814	comment	3.0	14.0	1687183612	-9.078338
36391279	Nix is a distro that admits defeat a	Nix is a distro that admits defeat against dependency management and entirely gives up on the idea of having system libraries. Instead every application you want to run has to have all of it's dependencies explicitly stated and provided custom in nix style configs for each program. Usually this means someone else has done all this packaging work for you. They hate it when people call it containerization but it's effectively taking containerization to the extreme for every single bit of software on your system with no ability to not use containers.But if, say, you want to compile a random C program you found on the web then it is up to your to now set up the build environment and provide all the libraries and deps to be able to compile and then run the program. Just running make or ./config	superkuh	14.897988	8.462258	comment	3.0	10.0	1687183781	-9.372778
36392678	The problem Nix wants to solve is a 	The problem Nix wants to solve is a valid one. But there are better alternatives imo, such as the newer distros based on rpm-ostree. You can do atomic upgrades, and easily rollback to a previous known good state if needed. No changes are allowed to a live system. And best of all, it's practically the same in terms of management, there's hardly any learning curve.	totallywrong	14.895591	8.45634	comment	3.0	15.0	1687190843	-9.025478
36484745	Graham Christensen here, cofounder o	Graham Christensen here, cofounder of DetSys. Happy to answer any questions! The Magic Nix Cache has been a huge boon to us internally, and we're really excited to share it with the world today.	grhmc	14.898214	8.464145	comment	3.0	20.0	1687808545	10.569985
26003322	Ah, I remember 7 years ago trying to	Ah, I remember 7 years ago trying to decide whether I'd switch to GoboLinux or Nix. I choose the latter and don't regret for a moment, but I'll continue respect GoboLinux and have the found memory.I think the big difference is:- Nix: the filesytem is rarely the right datastructure (I agree) other things are needed.- Nix: Store and Nix too is more freeform, package / distro norms provided by higher layers (Nixpkgs, NixOS)	Ericson2314	14.896797	8.461479	comment	3.0	26.0	1612284752	10.5216675
26037516	Unfortunately, Nixpkg doesn't check 	Unfortunately, Nixpkg doesn't check buildability on Darwin when merging PRs, so things can break quite often on the nixpkgs-unstable channel (compared to nixpkgs-unstable on Linux). It's not hard to rollback, though, but it does makes me never want to ever run `nix-channel --update`.	sirn	14.899179	8.464818	comment	3.0	10.0	1612539811	10.60804
31047574	And what of other dependencies? Imag	"And what of other dependencies? Imagemagick, say? There's another way to achieve portability and exactness, although it requires some setup.  #!/usr/bin/env nix-shell
  #!nix-shell -i bash -p imagemagick

Voila. A (mostly) self-contained shell script, dependencies auto-installed when needed."	Filligree	14.898092	8.462474	comment	3.0	11.0	1650067812	-9.404683
31077660	Have you considered GNU Guix? It's m	Have you considered GNU Guix? It's modeled after nix but uses guile as a configuration language:https://guix.gnu.org/I also used nix for a while and found the transition painless on my non-nvidia machine	dr-neptune	14.880276	8.429543	comment	3.0	11.0	1650322176	10.458361
31079238	As someone who's only recently made 	As someone who's only recently made the switch from OpenBSD to NixOS due to work needing Linux, I have some thoughts on this. OpenBSD is very easy to reason about -- not too many things going on, and every little thing is documented. The system fits in your head and doesn't overwhelm you; it is predictable and sensible.NixOS on the other hand: while I really like the idea of declaratively managing your entire system, the whole functional programming schtick isn't for me. I cannot for the life of me understand half the stuff I read (the Nix language, that is). I still don't see why all this couldn't have been written in say, Lua for example. Nix (and NixOS), is overwhelming.That said, it's the least-shit of all Linux distros because it brings about the cohesion that others lack. I will cont	icy	14.897481	8.461262	comment	3.0	11.0	1650335478	10.546748
31081946	How can one use Nix to manage projec	How can one use Nix to manage project-specific dependencies that typically store Dotfiles in annoying locations like the home folder?I am aware of home-manager but am not sure how (or if) it would work for per-project dot file management.	xvector	14.89821	8.463466	comment	3.0	10.0	1650369300	-9.380876
31142690	Compared to Nix, every other package	Compared to Nix, every other package manager is a security liability.Nix is great, but I don't see much difference with respect to security. In fact, Nix encourages and flakes formalize pinning of nixpkgs versions. I am sure that there are a bazillion repositories/configurations out there that use a pinned nixpkgs version with known vulnerabilities in glibc, libxml, or whatever.Besides that, packages in nixpkgs often have known vulnerabilities for months, because of a lack of volunteers to maintain all of nixpkgs.I love Nix and the large amount of work that goes into nixpkgs. But let's avoid every Nix discussion becoming a 'Nix evangelism strike force' has landed kind of thing. Be honest about Nix' strengths and weaknesses.	danieldk	14.898406	8.463756	comment	3.0	12.0	1650795221	-9.406894
31142866	I'm starting to see more of a cult a	I'm starting to see more of a cult attitude with Nix. It is like the Arch Linux crowd (I use Arch) but much worse. I think is is great that Nix has provided something valuable to a lot of people, but so does a lot of software and tools.Nix fills a void in package management. It is like Ansible or Terraform for a semi-idempotent distro. It is probably quicker in most ways than building something similar with other configuration management tools, but I still prefer other tools because the language for Nix is just bleh. Had they went with a simple YAML format or HCL, then I'd give it a chance, but because they didn't I'm certain eventually someone will create something better learning from the mistakes of Nix.	encryptluks2	14.89857	8.46378	comment	3.0	20.0	1650797628	-9.4331045
31349368	> I wonder if we'll ever really have	> I wonder if we'll ever really have something like that on top of Nix or NixOS.Xe, go do it! (:In all seriousness, Fly.io has explored this path (and very well may pursue it depending on RoI of going down this route, I'd imagine): https://github.com/superfly/reccoEven though I'd like Fly.io to be more like Heroku, it is railway.app that comes the closest (but I believe they use buildpacks like Fly.io does rather than Nix/NixOS).Speaking of Nix, shout out to replit (https://blog.replit.com/nix) for having a holistic view of the product and it is unlike anything I've ever seen before. And unsurprisingly, most junior developers that I interact with, prefer replit over other alternatives.Heroku may be dead, but an entire range of upstarts have risen up in its wake: https://www.swyx.io/cloud-d	ignoramous	14.898561	8.461726	comment	3.0	11.0	1652330368	-9.336054
31399956	We are currently evaluating nix as a	We are currently evaluating nix as an replacement for our internal build system, our main product is some kind of linux distro.Nix has real bad onboarding and documentation, the creators hopped off to some other, shinier side projects (flakes) and the rest of the community is struggling to manage the immense maintenance cost of keeping the packages up-to-date and integrated. And the external consultants we hired for it are like, hardcore believers that always tell you how great nix will be in the future, but completely disregard our needs like building offline in a separated network. Which is officially supported but unusable to due bugs.My bet is that $boss will cancel it this year.	blueflow	14.8986225	8.463595	comment	3.0	11.0	1652719106	-9.378581
31408534	"By itself, ""nix develop"" is somewhat"	"By itself, ""nix develop"" is somewhat less nice than ""nix-shell"" was.. except, I kinda think the intended UX is to use direnv. direnv + nix devshells is super neat.The DX of being able to just have the development dependencies of a project available (but without being stuck inside a container/VM) is neat.Since the devshells are provided in nix flakes, they're also much easier to refer to compared to shell.nix files.As a fish shell user, I also like that `nix shell` respects `$SHELL`. It's a nicer UX than ""nix-shell -p <whatever> --command 'fish'"".The only thing I miss from nix-shell was the `#!nix-shell`, which would let nix-shell 'interpret' a file.. so you could describe what packages a script file needed to run in the script file itself."	rgoulter	14.899646	8.4655695	comment	3.0	16.0	1652784460	-9.399056
31437892	FYI, we've added support for the fra	"FYI, we've added support for the framework to nixos-hardware. I appreciate any feedback or improvements anyone has!
https://github.com/NixOS/nixos-hardware/blob/master/framewor..."	emiller88	14.898024	8.4644575	comment	3.0	17.0	1652982701	10.563468
31455065	I happened to need to do this in Nix	"I happened to need to do this in NixOS yesterday, and look how easy it is:  security.acme = {
    acceptTerms = true;
    email = ""mail@whatever.net"";
    };
   
  services.nginx = {
    enable = true;
    recommendedGzipSettings = true;
    recommendedOptimisation = true;
    recommendedProxySettings = true;
    recommendedTlsSettings = true;
        virtualHosts.""whatever.net"" = { default = true; enableACME = true; addSSL = true; locations.""/"".proxyPass = ""http://127.0.0.1:9955/""; };
    };


and then each additional proxy takes just one more line.  Not quite zero boilerplate, but almost!"	spindle	14.897733	8.461631	comment	3.0	39.0	1653104424	8.788016
31523585	Ever since HomeAssistant developers 	Ever since HomeAssistant developers threw a hissy fit about NixOS (and anyone else) repackaging their software, even if their license allows for that, I can no longer support this project. Which is a shame, since it is very turnkey.	eptcyka	14.897734	8.461886	comment	3.0	10.0	1653600494	10.539388
31531309	How does the Nix configuration langu	How does the Nix configuration language compare to Guile?	pmoriarty	14.892128	8.451577	comment	3.0	10.0	1653668102	10.521786
13992081	The stated goal is to enable someone	"The stated goal is to enable someone to verify ""that they have gotten the same version as the rest of the world and not a special, possibly compromised version."" This is actually two goals: (1) verify that your version is the same as everyone else's, and (2) verify that that version is genuine.Why should one care about (1)?  All that really matters is (2).  As long as I'm using a genuine release, does it matter what the rest of the world is using?  Unless I wish to establish trust in a binary based on how popular it is, or unless I care about interoperability between the version I have and the version others have, it doesn't really matter what version everyone else has.I wonder if the author has heard about Nix or Guix? The purely functional software deployment model pioneered by Nix solve"	copper_rose	14.897418	8.461929	comment	3.0	15.0	1490836125	-9.382178
14176312	Nixhttps://jakob.gillich.me/post/201	Nixhttps://jakob.gillich.me/post/2016-03-22-self-contained-deve...https://ariya.io/2016/06/isolated-development-environment-us...You can easily automate provisioning and deployment with Nixops:http://container-solutions.com/step-towards-future-configura...But if you need to share/deploy what you worked on, in some place where you might not have Nix available, you can just as easily create Docker containers out of your Nix expression:http://lethalman.blogspot.co.uk/2016/04/cheap-docker-images-...	berdario	14.897587	8.460215	comment	3.0	10.0	1492918123	-9.411183
14268407	I am of two minds about package mana	I am of two minds about package managers after having used Gobolinux for some years.Because once i got familiar with Gobolinux and how it handles things, i can't shake the feel that most package managers introduce as many problems as they solve.The biggest is that while _nix have sonames to handle multiple lib versions installed at the same time, most package managers balk at there being more than one package of a given name installed at the same time (Debian apparently works around this by including soname-like info in the package names).	digi_owl	14.896703	8.458055	comment	3.0	15.0	1493929204	-9.045936
14283896	To be clear, Nix isn't haskell. It h	To be clear, Nix isn't haskell. It has its own domain-specific language. The documentation is a total mess, and months into using NixOS, I still don't really understand it.That being said, NixOS is the best damn OS I have ever used. Period.Installing NixOS is a total breeze. It's magical.1. Boot live CD2. Mount partitions3. Write a simple configuration.nix4. nixos-install5. Boot a complete system, and log in with the user you defined in your configuration.nix (with a hashed password and everything).nix-env lets you install packages in your home directory (without root).nix-shell lets you create a special environment with specific packages, etc. and run a shell in that environment.nixos-rebuild [switch test boot] (as root) creates a new system according to your modified configuration.nix. I	thomastjeffery	14.898499	8.463635	comment	3.0	17.0	1494131978	-9.363106
14403016	I I may (I hope I'm not coming acros	"I I may (I hope I'm not coming across as rude, I'm genuinely interested in running GuixSD):How 'recent' are the packages?I care for little things, but say.. libvirt or Firefox would be something I'd like to keep quite up to date.
Is it possible to run Firefox (not Iceweasel)?Do you use any 'unfree' packages and how much hassle is it to acquire those?"	darklajid	14.882642	8.436281	comment	3.0	10.0	1495559443	10.535236
14618848	I think that all the efforts to fix 	I think that all the efforts to fix or re-implement the Nix language have vindicated Ludovic, the Guix maintainer, who chose an existing general-purpose language instead.	davexunit	14.889864	8.44827	comment	3.0	12.0	1498223099	10.544448
14619109	Unfortunately no, except maybe for s	Unfortunately no, except maybe for some very minor tweaks that have a chance to be included in vanilla nix, but otherwise this would most probably either mean the death of this project or a split in the (already small) community, which I both don't want to see	regnat	14.898347	8.463957	comment	3.0	22.0	1498225760	10.483436
14619338	I love the Nix language and I genera	I love the Nix language and I generally distrust aesthetic feelings about programming languages.Neither SML nor Haskell are optimized for expressing deeply nested records with many string literals, for example. The multiline interpolated strings in Nix are extremely much better than in SML or Haskell. The way records and arrays are written is great: SML and Haskell both suffer from the tedious problem of using separators between items instead of after each one; in Nix each item can always be moved without messing with separators.I think Nix is an engineering marvel up to and including the language design. If you can make a better surface syntax and demonstrate it by translating some significant part of Nixpkgs, I'd be very interested, but I think in general the language is the way it is be	mbrock	14.900253	8.466654	comment	3.0	17.0	1498227897	10.535304
14619112	I wrote this document: http://catern	I wrote this document: http://catern.com/posts/deps.html which briefly compares both Conda and Nix among other things.(warning: it's very pro-Nix :) )	catern	14.89774	8.458914	comment	3.0	13.0	1498225794	-9.419383
20410755	I see a surprising lack of parenthes	I see a surprising lack of parenthesis for something related to Guix. What's the story behind it?	TeMPOraL	14.881846	8.432264	comment	3.0	12.0	1562845275	10.565368
20486783	I’d love for a way to write nix expr	I’d love for a way to write nix expressions that easily lead to reproducible builds. Of course this is possible right now next, but requires substantial legwork to pin Nixpkgs version or add SHA for every tarball. Especially now as the machine learning story for NixOS is becoming strong, it would be awesome to have fully reproducible model training using such a system. This highlights a difference from docker or nvidia-docker, which do not control driver version.	tbenst	14.900974	8.46622	comment	3.0	14.0	1563640772	-9.409668
20672892	Wow, thanks for the detailed respons	Wow, thanks for the detailed response. Yes it sounds like they've taken great care for reproducibility, which I greatly appreciate.Sounds very similar to Docker's philosophy, where changes to the system produce incremental changes to the system image and all dependencies are strictly controlled.What else do I need to be convinced to leave my Ubuntu system for NixOS?	gitgud	14.898496	8.462425	comment	3.0	10.0	1565590623	-9.368568
20731828	Thank you, I was reading the comment	"Thank you, I was reading the comments exactly to figure out if there was a FUSE sqlfs module. TL;DR this URL describes that, yes, there is. Why is this relevant? Because this way, you keep the flexibilities of a filesystem and, as a consequence of it being able to function like a filesystem, you keep the ""power of Unix/Linux"" ie. all your <asterisk>nix [1] tools keep working.[1] Calling it Nix confuses with NixOS..."	Fnoord	14.899448	8.46496	comment	3.0	10.0	1566152004	9.949561
20816207	Hmm, why is this a good thing compar	Hmm, why is this a good thing compared to just using Nix / nix-pkgs to manage JS packages?	rrnewton	14.898529	8.463449	comment	3.0	10.0	1566957612	-9.321659
24405741	Intentional word-splitting is a comm	"Intentional word-splitting is a common one. So, for example:    extract_nix_version(){
      echo ""$3""
    }
    
    get_nix_version(){
      # shellcheck disable=SC2046
      extract_nix_version $(nix --version)
    }
    
    $ nix --version
    nix (Nix) 2.3.4
    
    $ get_nix_version
    2.3.4

This gets the information without another external utility (grep, cut, sed, awk...)It's well-past bedtime, so for now I'm just leaving the first one I can think of (it's top-of-mind since I Shellchecked it in the last couple weeks... :])"	abathur	14.898765	8.463987	comment	3.0	11.0	1599546805	-9.391208
33098587	>> Nix is the cornerstone of the eco	>> Nix is the cornerstone of the ecosystemI thought Nix is the ecosystem?	jalino23	14.894838	8.462242	comment	4.0	19.0	1664991130	10.468686
33098634	Should I use flakes or not? Every si	Should I use flakes or not? Every single library I find is a Nix Flake, but insists that Flakes are experimental. Who makes the decision that they are not experimental? At what point does majority adoption of flakes overrule? Why are they still behind a feature flag in the CLI?What is Nickel? Is this an officially endorsed project? It’s run by Tweag — do they run Nix? Most core contributors work for Tweag. What is the fate of the Nix language? Should I start investing in this new language?Why is documentation still so bad? Why is there not a clear and official answer to documentation generation? Syntax linting? Testing? Who is in charge of trying to fix SEO for documentation?Nix is technologically sound but is struggling organizationally from its explosive growth	n42	14.899017	8.467457	comment	4.0	32.0	1664991284	10.637077
33099223	My experience with NixOS is: if what	My experience with NixOS is: if whatever I want to do is covered by the documentation, I just need to add the necessary enchantments (often verbatim) from the documentation and things _just work_. It certainly takes way less time to do compared to any distribution I've ever used. It's trivial to undo mistakes and I don't have to write down what I did - the code replaces my notes entirely.However, if I can't find what I need in the documentation then it can be a problem. That's specially true for installing software. I'm not too familiar with the language to make entire new packages. Most things are using flakes and I haven't wrapped my head around them yet. Other things are not really compatible with its philosophy (like software packaged as Wine bottles).Nix itself: same problem when the 	outworlder	14.897848	8.462354	comment	4.0	23.0	1664993912	-9.344607
33194800	Flox, Nix for Simplicity and Scale	Flox, Nix for Simplicity and Scale	regnat	14.896389	8.461836	story	4.0	13.0	1665686448	10.610099
33415257	I might just be biased by selective 	"I might just be biased by selective attention, but it seems like more and more of these are popping up lately.I feel like we will eventually recognize a variant of Greenspun's Tenth Rule as common wisdom:> Any sufficiently complicated build system or configuration management system contains an ad hoc, informally-specified, bug-ridden, slow implementation of half of Nix.(Although to be honest it might make more sense to replace ""Nix"" with ""Guix""...)"	throwamon	14.897468	8.462676	comment	4.0	18.0	1667261705	-9.406132
33675631	Strictly compared to containers, the	Strictly compared to containers, the big advantages are reproducibility and lower overhead.Overhead: Windows and macOS can't run Linux-based containers natively. Instead, there's always a full Linux virtual machine running in the background acting as an intermediary and host for your containers. Nix can conjure arbitrary native development environments on a per-command or per-terminal basis, giving you all the performance of directly running tools without the risk of clashing with systemwide software.Reproducibility: Nix provides much stronger guarantees about the exact versions of software you're running. It effectively gives you a lockfile for your entire dependency chain, all the way down to libc. Containers tend to be more stateful: everyone on your team may be using the same Dockerfil	callahad	14.896732	8.45914	comment	4.0	24.0	1668897661	-9.360106
33764795	Because docker for Mac has always ki	Because docker for Mac has always kind of sucked, I’ve moved on to making nix-based development environments and I’ve been very pleased so far.Lately I’ve been trying https://devenv.sh/ and it works great!I haven’t tried it for ruby, though I have used vanilla nix shell for ruby projects before and it worked quite well after I over-rode GEM_PATH and GEM_HOME to the correct values.	hamandcheese	14.8972225	8.459717	comment	4.0	19.0	1669570783	-9.410374
33815825	I would expect something like Steam 	"I would expect something like Steam gaming on my dual-GPU laptop might be one deep mineshaft of ""nope"" on NixOS."	troad	14.895566	8.457759	comment	4.0	15.0	1669900689	-8.073361
33816276	>  learn both the nix languageThat s	>  learn both the nix languageThat seems weird to me. I don't have to learn package configuration language in other distributions. I thought that one could just install packages with a package manager.> You can use nix-alien[2] which will automatically fetch the required libraries and build an FHS shell for the binary.That's actually fine. I want to put closed source software into a chroot anyway.	codedokode	14.898301	8.463857	comment	4.0	21.0	1669903253	-9.382916
33816588	nixpkgs is already one of the larges	nixpkgs is already one of the largest package collections. There is a good chance your software is already included.The nix language itself is pretty straightforward and if you know haskell your should feel straight at home.You shouldn't use nixpkgs python packages as a replacement for your python development. That would also not work that great on other distros.	SuperSandro2000	14.898151	8.463316	comment	4.0	22.0	1669904695	-9.363192
33816670	Yeah I used to use pfSense but hated	Yeah I used to use pfSense but hated having a load of config and firewall rules created manually, it all felt quite brittle.Moved to NixOS almost 5 years ago now and haven’t looked back, my router config is in Git and I’m able to make changes with confidence.Best part is making a change/installing an update and being able to rollback if I mess something up. I also use Nixus to push new configs which has a nifty feature where it will autorollback if you e.g make a config change that locks you out of SSH.I also moved from ESXI to NixOS for a virtualisation host more recently and that has been great as these machines are inherently long lived so you can’t apply the “cattle not pets” mindset here, but I feel like I can make changes and install updates with confidence. It also helped when I mig	madjam002	14.895533	8.452379	comment	4.0	26.0	1669905073	-9.140798
33816339	My experience with NixOS: Package in	My experience with NixOS: Package installation is usually just from the official channel, system options can usually be done with `/etc/nixos/configuration.nix` and home-manager.Major problems: installing niche proprietary software that you may have to package yourself, and fighting Nix for languages with package manager, e.g. Python, which frequently uses packages not in nixpkgs.	pca006132	14.898493	8.463463	comment	4.0	29.0	1669903583	-9.381048
33976559	Looks like Digital Ocean doesn't sup	Looks like Digital Ocean doesn't support NixOS as a Base OS. Seems this just adds that?	pbronez	14.898276	8.462713	comment	4.0	12.0	1670968748	10.577056
33984072	Building Go programs with Nix flakes	Building Go programs with Nix flakes	ingve	14.901459	8.467172	story	4.0	88.0	1671028924	10.299253
33986127	Now if only there were a reliable wa	Now if only there were a reliable way to do this with Python programs with a requirements.txt.Last time I tried (maybe 2 months ago on NixOS 22.05), I found several different tools that claimed to be able to do this and they all failed in various ways; some failed quickly, others took a long time to fail.  I ended up using my brain as an SAT solver and manually copying in nix expressions from older versions of nixpkgs that matched versions of the python libs that were needed.	aidenn0	14.898085	8.461908	comment	4.0	15.0	1671036415	-9.399915
34105784	Nixpkgs is the largest repository on	Nixpkgs is the largest repository only because they let anyone throw anything they want in there with minimal accountability. Nixpkgs is the NPM of Linux.While I love the determinism of NixOS, their refusal to mandate strict code review, code signing, and package signing makes it unsuitable for non-hobby use cases.I do hope to see a fork of NixOS with the supply chain integrity of OpenBSD or at the very least that of Debian or Arch.	lrvick	14.898939	8.465139	comment	4.0	17.0	1671803563	-9.373948
26687873	Personally I'd prefer going with Nix	Personally I'd prefer going with NixOS to achieve the same result. that way you don't even need a docker installation. As a bonus you can actually install the Nix package manager on osx if you're not into Linux (and this way there is no need for virtualization if you're on a Mac)More info: https://nixos.org/	amarant	14.896973	8.459084	comment	4.0	32.0	1617526079	-9.376655
26749617	Having used nix for two years now fo	Having used nix for two years now for both work and personal purposes, I agree. Though I have also come to think nix is doing things in much better ways than AppImage, Docker, Snap, Flatpack, and others.I won't focus on the good parts, but focus on your comment.Nix has three things that I think are confusing and took me an embarrassing long time to grok, and I find other people confused by as well.1. Where does the semicolon go? Reading code makes it feel arbitrary, but really the only time a semicolon is used is to terminate an assignment (=). If there are no equal signs, then you don't need any semicolons.2. The heredoc strings ('' '') are in fact strings. Nixpkgs passes these strings to a shell quite frequently and their docs also make it feel like these statements are shell scripts and	georgyo	14.899637	8.465423	comment	4.0	22.0	1617970976	-9.387159
26749655	I love nix as a concept, but in my e	I love nix as a concept, but in my experience it isn't practical on systems without a ton of memory. I regularly get build errors due to oom errors.	root_axis	14.898565	8.463404	comment	4.0	14.0	1617971199	10.562235
26750576	Now, don't get me wrong, I don't hav	Now, don't get me wrong, I don't have a horse in this race.But as a complete outsider, this doesn't fill me with confidence. If Wikipedia is to be believed, NixOS was launched in 2003, so 18 (!) years ago, I assume that's when Nix was created.The issue mentioned seems quite basic and you're replying that it will be fixed in a new Nix CLI.This seems like a basic QA fail, I wouldn't want anything like this within 100 km of any production environment I'm working on.I imagine Nix is underfunded, but few projects come back from stuff like this. If they can't get their stuff together in almost 2 decades, who will ever trust them that they ever will?	oblio	14.900812	8.46621	comment	4.0	17.0	1617976298	10.536922
26749341	Has anyone explored CD tooling with 	"Has anyone explored CD tooling with Nix? And I don't mean the deployment of NixOS machines themselves (NixOps, deploy-rs, etc), I mean actually using Nix for deployment tooling and orchestrating deployments using the Nix language.I am yet to find any posts about this or any tools, but have had great success with a small hand rolled tool that essentially lets me decoratively describe cloud resources, parts of my application, deployment ""end state"", and run the tools required to materialise that (Terraform, nixos-rebuild, etc) similar to GitHub Actions. Hydra is distributed CI for nix-build but does not handle CD or is designed to handle jobs with side effects AFAIK.NixOS is great, but for me this is even more valuable, as I now have an introspect-able view of my entire deployed real estate,"	madjam002	14.898339	8.462436	comment	4.0	12.0	1617969312	-9.343734
27025847	Nix is one of the few package manage	Nix is one of the few package managers that really obviates building these custom solutions over and over for each different language.You can also use nix ontop of any distro. It's UX isn't as good as a custom built solution, but if you're a polyglot you'll appreciate not needing to use a different solution for java, node, python etc	X6S1x6Okd1st	14.897877	8.462016	comment	4.0	30.0	1620053810	-9.3712635
27070858	Towards a Content-Addressed Model fo	Towards a Content-Addressed Model for Nix	figomore	14.8989315	8.463999	story	4.0	45.0	1620350295	10.5769415
27349104	When self hosting is as easy (for yo	When self hosting is as easy (for your grandma who likes cats) as downloading a container from the Windows Store and double clicking it to open, install and start the server. Then we've truly made leaps and strides in fixing centralization.Self hosting is hard because ops is hard [1]. People aren't yet in the mentality that you should provide an official modular deployment every time you provide a server binary. Everything-as-a-container wouldn't be the worst way to take the desktop [2]. Isn't that kind of how Apps work on OS X?[1]: The ironic part is that most people don't keep anything long enough for a hard drive or any other component to fail anymore. So the argument about the cloud abstracting away the physical hardware maintenance for every day consumers like yourself or I is ... dub	aetherspawn	14.896472	8.45847	comment	4.0	35.0	1622502596	-9.346598
27369920	Honestly - how painful was it to lea	Honestly - how painful was it to learn and get working? And what limitations/niggles are left when using as a workstation?I love the principles behind Nix, and I like to use it to provide development environments (through nix-shell locally and then using the same setup in CI). But some things can be moderately painful to get going.	rkangel	14.898188	8.46402	comment	4.0	44.0	1622648239	10.550999
27370042	It sounds like nix provides an escap	It sounds like nix provides an escape hatch [1] out of the declarative framework into something imperative, e.g. running `apt install $package`. And that seems like it would really ease adoption, since I would assume that it would allow a gradual adoption of the declarative mindset.[1] https://wiki.c2.com/?EscapeHatch	gugagore	14.897613	8.46135	comment	4.0	16.0	1622648774	10.488654
27371372	Nix and similar projects are all goi	Nix and similar projects are all going to be eaten alive by immutable distributions, Flatpak and new projects - that might work just like Nix but get the user experience right, and make packaging and maintenance easier. And no I'm not saying they do the exact same thing, have all the same features or target the same type of users.For the developer tools side I like what Shopify did but I would never recommend that to my employer. Too many moving parts and not enough people using it that I would feel safe about it.	acgkmopvvgvmgv	14.898668	8.464201	comment	4.0	22.0	1622654375	-9.357842
27370611	What do experienced nix-ers tend to 	What do experienced nix-ers tend to do when they need to use software that's not up to date or available in nixpkgs? Are you guys knowledgeable enough to package everything yourselves, or do you just use buildFHSUserEnv until someone else works out the kinks? I didn't get a chance to figure out how to do the latter, but I'm curious because I've struggled as a new user.	jpe90	14.898641	8.463254	comment	4.0	16.0	1622651136	-9.354852
27373272	> and a few serversThe problem I see	> and a few serversThe problem I see with NixOS on a typical personal server is that you have to setup all these things using nix expressions, from which the actual configuration files are generated.That means if you e.g. want to install postfix, instead of learning about main.cf you have to learn the syntax of the nix configuration wrapper for postfix, and postfix having hundreds if not thousands of options, many referring to external files/databases, you have to hope that whoever did this configuration wrapper, supported all the features of postfix that you want to use.I am using nixpkgs on macOS, and I run a personal server with mail (for a bunch of people), web (for a bunch of sites), DNS (for a bunch of domains), etc. and while I would love to switch to declarative configuration, I fe	sorbits	14.898853	8.463577	comment	4.0	18.0	1622663725	-9.333155
27479412	Is anyone there using Guix as a dail	Is anyone there using Guix as a daily driver? Is it stable? Would love to hear some user experiences.	dangom	14.8795805	8.429729	comment	4.0	23.0	1623451382	10.555131
12707250	Looking across history, it seems lik	Looking across history, it seems like the GUI side of _nix had something of a seismic event somewhere around 2007. A event that has still not settled down to this day.	digi_owl	14.898472	8.464269	comment	4.0	14.0	1476442380	10.570182
13138274	Apparently there is company switchin	Apparently there is company switching from using Gentoo to NixOS. Gentoo seems a bit of a weird fit for production, unless you can compile packages on another server and deploy them (last time I used it was 10 years ago so I don't know if that's a thing).	lucaspiller	14.8982935	8.462763	comment	4.0	14.0	1481285376	10.538615
13238580	Nix is used / usable in production. 	Nix is used / usable in production. Guix is still pretty far away.	setra	14.888238	8.445361	comment	4.0	12.0	1482426330	10.5440035
13238115	GNU Guix and GuixSD 0.12.0 released	GNU Guix and GuixSD 0.12.0 released	rekado	14.879575	8.4323	story	4.0	94.0	1482422417	10.519731
27506229	Here's the thread NixOS posted to th	"Here's the thread NixOS posted to the Home Assistant forums, ""Consider to avoid adding library dependencies from frenck.""https://community.home-assistant.io/t/consider-to-avoid-addi..."	FemmeAndroid	14.898772	8.464528	comment	4.0	23.0	1623695015	10.571779
27649774	I use mostly Ubuntu and Debian and d	I use mostly Ubuntu and Debian and defining systemd units just means you have to spit the right text into a .service file placed at the right spot.How does NixOS make that easier?	atoav	14.895179	8.45525	comment	4.0	20.0	1624783493	12.437606
27787493	I like nix. If you dig into nixpkgs 	I like nix. If you dig into nixpkgs far enough back you can find commits from me bumping version hashes on postgres.The caching and our future plans for distributed builds have some similarities with Nix Hydra and Bazel but creating images in earthly is closer to docker multistage builds than it is to nix.We are not just for building docker images, though. In the real world a 'build' is more than just building an image. It will have linting, and tests and integration tests and maybe some services need to be stood up and tore down in between to make sure an api contract wasn't broken and you might need different binaries generated for different architectures and so on.I could be wrong but I think nix is focused more on just the producing the artifact part. I do love how they approach every 	agbell	14.896677	8.459116	comment	4.0	13.0	1625858425	-9.420029
27826242	Very helpful. Unfortunately Nix does	Very helpful. Unfortunately Nix doesn't support aarch64 yet, only x86_64...It seems to be coming though: https://github.com/NixOS/nixpkgs/issues/95903	rahen	14.898557	8.463841	comment	4.0	17.0	1626209932	10.572488
27830255	    [apt/dnf/brew] install package_n	"    [apt/dnf/brew] install package_name
    vs.
    nix-env -iA package_name


    [apt/dnf/brew] search keyword
    vs.
    nix-env -qaP '*keyword*'

Is Nix going to become the git of package managers?  Why can't there be a 'nix install' or 'nix search' for people who just want to use software?That's why I like pip.  I can tell a newbie to 'pip install' a package and they can immediately intuit what it does.  It gets installed to their PATH, too."	Evidlo	14.898646	8.4641485	comment	4.0	18.0	1626243798	-9.377945
12247279	Does it seem a little embarrassing t	Does it seem a little embarrassing to anyone else that this is necessary? OpenBSD is supposedly the most secure nix platform available, and yet users have to resort to third-parties to get functionality that is available on nearly every other nix system by default.	can09	14.886201	8.446489	comment	4.0	35.0	1470660526	-4.707332
12250104	Anyone using NixOS as a server in pr	Anyone using NixOS as a server in production? We're on FreeBSD now but I think Linux in our stack is inevitable (many servers, like Aerospike, are Linux only). There's always Ubuntu, but this looks lovely. I've had my eye on it for a personal Linux workstation but haven't heard anything about it as a server.	themartorana	14.897969	8.461384	comment	4.0	21.0	1470683109	10.546415
12250307	>Guix is fundamentally opposed to pr	>Guix is fundamentally opposed to pre-compiled binaries. Nix has no issue with them.Using pre-compiled binaries means that builds aren't reproducible, a goal of both Nix and Guix.	davexunit	14.886746	8.44388	comment	4.0	31.0	1470684859	10.527683
12250090	> where multiple versions of the sam	> where multiple versions of the same library or application can live in harmonyHow does NixOS solve the diamond dependency problem?	sdegutis	14.897591	8.460545	comment	4.0	20.0	1470682994	-9.275369
12335507	Disclaimer: I'm core NixOS developer	Disclaimer: I'm core NixOS developerIt's great to see such articles as they dive deep into psychology when it comes to new technology. It's really hard to unlearn.It takes effort to realize that the promised gain is bigger than the pain coming from doing what we're used to doesn't work.	iElectric2	14.898561	8.4641075	comment	4.0	40.0	1471865404	10.538932
12335594	It sounds like you're blaming the us	"It sounds like you're blaming the users for not ""unlearning"" enough to be able to use NixOS.As long as you have that attitude, you'll be driving away users. How do you think you can improve your software to make it easier for users to ""unlearn"" stuff you think is bad?"	infinity0	14.898632	8.464298	comment	4.0	24.0	1471866610	10.544956
12335897	I use NixOS since last spring and I 	I use NixOS since last spring and I adore it so much that I almost credit it with making me like computers again.It's a kind of bumpy ride sometimes but for me there's no other distribution that's even close. Packaging the Nix way does require patching upstream and that's probably inevitable.It would be nice to help with the documentation situation, though I'd note that the NixOS manual and the Nixpkgs manual are seriously helpful and quite comprehensive; it's just that there's another type of guide that would really help.	mbrock	14.900075	8.464493	comment	4.0	15.0	1471869850	10.553921
12387243	Excellent! Really, anything to prope	Excellent! Really, anything to propel Nix(OS) or Guix(SD) forward gets a huge thumbs up in my book. Nix is one of those things that I explain and then have people telling me I'm wrong and/or an idiot because they can't believe that you can have a distribution based on building packages from source, backed by a binary cache. If you think Snappy or Flatpak/Xdg-App are cool, you owe it to yourself to look at Nix/Guix, which provide a superset of the features provided by Snappy. And then some.NixOS + NixOps means I can have a single declarative file that describes the state of my cloud VMs, cloud load balancer, cloud Traffic Manager... plus the exact software on the VMs (all the way down to the exact checkout of gcc used to compile everything and the nginx configurations)... literally everythi	colemickens	14.898042	8.458231	comment	4.0	15.0	1472526823	-9.42489
35169273	Does Nix have an equivalent of docke	Does Nix have an equivalent of docker-compose yet?nix-shell is amazing for installing binaries, but actually wiring up and running the services doesn't seem like a solved problem.Unless Nix expects a separate tool to do this once binaries are installed, of course.	Kinrany	14.896862	8.458994	comment	4.0	21.0	1678892149	-9.412117
35358688	Nix Turns 20. What the Hell Is It?	Nix Turns 20. What the Hell Is It?	todsacerdoti	14.898547	8.463973	story	4.0	42.0	1680103843	10.593327
35359185	Did you use nixos for builds or as y	Did you use nixos for builds or as your daily driver (or both)? Using nixos as a daily driver doesn't make sense to me, but I'm probably missing something.	thtmnisamnstr	14.8988085	8.463971	comment	4.0	14.0	1680105840	10.568052
35384723	That could be because doing anything	That could be because doing anything in NixOS takes at least three google searches to figure out?	akdor1154	14.898772	8.464474	comment	4.0	13.0	1680256680	10.549462
35484820	Clicking through to the underlying d	Clicking through to the underlying data, it seems that 2% of all code is written in Nix.  I doubt that is the current state of the industry.  For example, I doubt that 2% of programming jobs are for Nix codebases.For that reason, I am consuming a very large salt crystal alongside this information.	jrockway	14.900066	8.465396	comment	4.0	18.0	1680890906	10.509122
28143938	Maybe they should have used Nix to g	Maybe they should have used Nix to get a dev environment that is identical for everyone... but that would be too easy.The future is long term probably in the web, I'm just not sure we are there yet.	thibran	14.898513	8.463587	comment	4.0	13.0	1628698590	-9.317002
28462970	I have seen a few alternatives, but 	I have seen a few alternatives, but are there any nixie replacements which have the features of a nixie (elegantly-shaped lettering, warm glow, solid stroke as opposed to dots) without the voltage issues and rarity?  Lixie seems to have stopped producing, etc.	at_a_remove	14.898494	8.46375	comment	4.0	16.0	1631134701	10.515751
28544081	Isn't a lot of this wisdom encapsula	Isn't a lot of this wisdom encapsulated in the (old, uncool) configuration management stuff like chef and puppet? The main difference being that you still need to rebuild your systems regularly to keep yourself honest (no lazy one-off changes, everything goes into the CM codebase).I mean, I get that NixOS can pin versions of everything, and we've all been bitten by a new server build on identical CM code failing because of an upstream version change. But it's an eternal problem: pinning all the versions means that you a now micromanaging a zillion different versions of shit that you don't want to care about.	raffraffraff	14.897602	8.463376	comment	4.0	22.0	1631738383	-9.321854
19966552	Without a lot of thought or research	Without a lot of thought or research I have no idea what Guix is! Even the website - https://www.gnu.org/software/guix/ - offers the reader no real clue about what it is.. Is it a unix distribution, linux distribution, graphics environment, window manager, ux app development framework - who knows! :-) ... please everyone remember to write decent copy for your projects - you have to market open source too.	daniel_iversen	14.882222	8.435929	comment	4.0	25.0	1558397411	10.522881
19966616	At the very top of that page:> Guix 	"At the very top of that page:> Guix is an advanced distribution of the GNU operating system developed by the GNU Project—which respects the freedom of computer users.On the about page:> The GNU Guix package and system manager is a free software project developed by volunteers around the world under the umbrella of the GNU Project.>> Guix System is an advanced distribution of the GNU operating system. It uses the Linux-libre kernel, and support for the Hurd is being worked on. As a GNU distribution, it is committed to respecting and enhancing the freedom of its users. As such, it adheres to the GNU Free System Distribution Guidelines.So ""Guix"" is short for ""Guix System"", which is a distribution of linux. There's also the ""Guix package manager"".Honest question: what part of the above portion"	cstrahan	14.881117	8.434186	comment	4.0	21.0	1558398151	10.534041
19965778	GNU Guix 1.0.1 Released	GNU Guix 1.0.1 Released	ymse	14.879678	8.431944	story	4.0	75.0	1558389984	10.522578
15821645	How does this relate to what NixOS i	How does this relate to what NixOS is doing? I've been casually following it. I know they build everything from source and then build results get hashed. The hash is not just the output, but also contains all input of the build. The assumption is that once a package and its dependencies are built, it will end up producing the same output.Is the difference then that reproducible Arch or say Debian would ensure that the source when compiled would produce the same binary output on _any_ the machine of the same type. As opposed to say maybe NixOS would just make the output different if it runs on a machine with a hard drive mounted on a different directory or the cpu has more cores?	rdtsc	14.910854	8.482722	comment	4.0	38.0	1512098375	-9.396609
15874810	GNU Guix and GuixSD 0.14.0 released	GNU Guix and GuixSD 0.14.0 released	Ruud-v-A	14.882331	8.436297	story	4.0	69.0	1512684350	10.534321
18188291	My main problem with guix, and nix, 	My main problem with guix, and nix, and debs (the 3 i have tried is they are great for software wrapped using automake/autoconf, but I can never figure out how to package things using a custom build system.	CJefferson	14.879606	8.435446	comment	4.0	14.0	1539201224	10.534391
18364208	After running some tests I was ready	After running some tests I was ready to deploy to a new production server, but unfortunately my hosting provider (OVH) doesn't offer a ready made image.After trying to use Debian as a starting point, and several failed boots, I threw in the towel... Seems like OVH does funky things with their EFI which doesn't work without some black magic.For now I'll continue using it on my laptop but it's not living up to its full potential, most of the configuration is for desktop stuff and NixOS doesn't really cover that.When I get the chance I'd really like to try it on my servers, hopefully sooner rather than later. I can see it working really well with Saltstack for infrastructure management.	nickserv	14.898484	8.462795	comment	4.0	15.0	1541175446	-9.310921
18365023	I run Docker on my Nixos server. Nix	I run Docker on my Nixos server. Nixos for easy reproducible operating system configuration, and Docker for application deployment so simple even application developers can do it ;)I feel Docker is a better solution to application deployment than Nix is, but NixOS is the best OS configuration out there hands down.	tinco	14.8975725	8.458958	comment	4.0	17.0	1541180333	-9.375768
18364544	I've had a lot of problems using Nix	"I've had a lot of problems using Nix in the past. Not least of which is that it's terribly hard to search for anything because of the name--not only is the name generic (""nix package manager"" -> ""Congress nixes aid package..."", ""nix"" -> ""*nix"", etc), but search engines have a terribly hard time figuring out what nix project I'm inquiring about (""nix package manager"", ""nix expression language"", ""NixOS"", specific Nix derivations, etc).Another problem is that the documentation for individual functions is nonexistant. If you want to know how a particular function works, you have to go to the nixpkgs repo in github and try to guess about where the function's definition would live in the massive directory structure, and once you find the definition you care about, you have to read the source cod"	weberc2	14.898806	8.464067	comment	4.0	16.0	1541177311	-9.378765
18366324	I've thought about making the jump t	I've thought about making the jump to NixOS a few times. Questions: Do people use it for their desktops? How do security updates work?	GoMonad	14.89837	8.46377	comment	4.0	17.0	1541189610	10.575703
18366405	>  Nixos for easy reproducible opera	>  Nixos for easy reproducible operating system configurationI'm somewhat out of my depth here, but isn't Vagrant suitable for this purpose?	svrtknst	14.897312	8.462016	comment	4.0	13.0	1541190248	-9.372797
18621393	GNU Mes 0.17: towards bootstrappable	GNU Mes 0.17: towards bootstrappable builds for GuixSD	fanf2	14.880408	8.432446	story	4.0	89.0	1544125608	10.557802
18910683	Guix co-maintainer here.The article 	"Guix co-maintainer here.The article says ""Guix is a fork of Nix"", but this is not correct.  Guix uses the same format for derivations (~ a low-level representation of builds), so that it can reuse the Nix daemon, but that doesn't make it a fork.Guix builds upon the very same idea of functional package management that was pioneered with Nix, so they are very close and they do have shared roots.  But that's not what ""fork"" is usually understood to mean.Here's something I wrote a few months ago (with minor changes) to clarify the relationship between these two projects. I hope this helps.-------------------As one of the co-maintainers of GNU Guix I'm obviously biased, but here's what I consider some important unique features of Guix:- Guix is all written in Guile Scheme (with the exception of"	rekado	14.885915	8.441798	comment	4.0	15.0	1547555422	10.540819
18911340	What if there was a way to replace p	"What if there was a way to replace parenthesis with syntax? For instance, if you could declare your operating system as:  operating-system:
    ...
    packages:
      - vim
      - %base-packages

instead of:  (operating-system
     ...
     (packages (cons* vim %base-packages)))

would that help you? No more parenthesis, the complexity of cons* is hidden behind the ""-"" and it's pretty trivial to convert between one syntax and the other. If it was possible, how would that affect your opinion on guix? What if the installer came with a pre-configured vim for scheme?btw, I'm also a guix and a vim user, and I don't use anything special for parenthesis. I just close them manually like a grown-up (which is a very usefull skill to have when you want to impress an emacs user :p)."	roptat	14.879522	8.4304695	comment	4.0	13.0	1547562948	10.548815
29716807	This is a neat idea - and not withou	This is a neat idea - and not without precedent.Installing each package into it's own directory, and maintaining symlinks into that directory structure, was an approach explored for large system installations in the 90s and 00s.NIST depot, Xheir, CMU, and Nix all did this in varying ways. The advantage of this approach was that packages could be installed once on an NFS, scoped by version/configuration, and mounted into the filesystem of every work station on a campus. The workstations then just needed to maintain references to the files on the NFS for their particular software configurations. There is also some interesting exploration of composable configuration templates that allow workstations to inherit and extend a particular configuration (i.e. the physics department might have a bas	r3trohack3r	14.893403	8.446127	comment	4.0	20.0	1640718446	-9.315458
30057404	I always found Guix more appealing, 	I always found Guix more appealing, because it uses a programming language that is useful for other things as well (GNU Guile). I really can't stand having to learn a new language for each thing I want to manage.	gypsyharlot	14.882585	8.435054	comment	4.0	30.0	1643031521	10.483363
30057865	I tried using NixOS on a laptop for 	I tried using NixOS on a laptop for a month and switched back to Arch a couple of months ago. It was an interesting experience - I never used functional programming language before, but nix was pretty ok as a configuration language. It looks like funny version of JSON with functions.Debugging it was a real pain though - I was trying to write (or copy from someone else config) a function to recursively import all modules from a folder and the error messages were hard to understand with stacktraces ending somewhere deep in standard library.The other problem was with nixpkgs, i.e. I haven't found a clear list of packages that were going to be updated. Jetbrains IDEA was updating very slowly and when I wanted to pin a version of it simply overriding version variable in the overlay was not enou	avakand	14.897707	8.4610195	comment	4.0	20.0	1643034104	-9.35924
30058659	> the Nix language is about as strai	"> the Nix language is about as straightforward as ""JSON plus functions"".Except that they concoct weird custom terminology for everything.It's not a hashmap, or a map, or an object.  No.  It's an attrset.  Riiiiight.It's not a build script, it's a derivation.Etc, etc."	octoberfranklin	14.899788	8.466004	comment	4.0	18.0	1643037532	10.529785
30058322	> you'd have to read the nixpkgs sou	> you'd have to read the nixpkgs source. https://nixos.org/manual/nixpkgs/stable/#trivial-builder-wri...Is it too much to ask from developers in 2022? At source, the function is well documented and is provided with an example [1]. The only missing part is a rendered HTML with the same information.[1] https://github.com/NixOS/nixpkgs/blob/master/pkgs/build-supp...	ghostwriter	14.898647	8.463998	comment	4.0	14.0	1643036144	10.6145525
30058880	Nix has two kinds of problems: the l	Nix has two kinds of problems: the language and the interface. They can solve interface problems, but the Nix language is a tumor that won't be easily removed.The problem is that Nix the language is the worst of all worlds:- You can't print anything because the language is lazy. Forcing any values to print them can and will result in random operations happening on your store. You can never know which values are safe to inspect. This kills debugging.- Everything in Nix is recursive, datastructures contain copies of themselves as hacks to avoid building proper APIs. So again, you can't print anything, even if you're sure that printing the object won't do something crazy to your store.- There are almost no APIs and no uniformity in Nix. Packages are given total freedom to do anything. The Pyt	light_hue_1	14.898524	8.464163	comment	4.0	20.0	1643038454	10.528467
30063957	I think you missed the key point. So	I think you missed the key point. Software needs to be altered to run on Nix, and it needs to do so _systematically_.Grab a script from the internet? Edit the shebang! Download some prebuilt software? Good luck finding /lib/ld-linux.so.2! Need to use some proprietary software you cannot edit? HALP!Of course there must be some tooling to get around this, since stuff like steam is available (at least I hope), or else anything not packaged by nix would be a nightmare to install and use as a user. Any niche or domain specific software would become unusable. Take for example Quartus II or Vivado (just to name the two top FPGA EDAs), those two are not packaged by nix. Yes, there are a few recipes floating around, but those honestly scare me enough to not want to do it with more obscure tools lik	tuetuopay	14.898467	8.463619	comment	4.0	12.0	1643057998	10.602165
30119838	Honestly after discovering NixOS I h	"Honestly after discovering NixOS I have a new found joy of administering Linux servers. It's easy and painless, everything is declarative and versioned, and new machines can be set up for new projects or scaling in a matter of minutes.This ""cattle not pets"" mentality doesn't make sense for everything and is highly inefficient if the OS itself seamlessly supports immutable workloads and configuration."	madjam002	14.898157	8.462663	comment	4.0	15.0	1643401415	-9.207125
30180815	They've also been pretty hostile to 	They've also been pretty hostile to OS packagers trying to let you run it without dedicating an entire device to it, most publicly NixOS but they indicated they planned to insist the same against Fedora and Gentoo too: https://github.com/NixOS/nixpkgs/pull/126326That behaviour kind of makes it hard to trust that it won't lead to the next Marak situation.	Macha	14.898135	8.463221	comment	4.0	12.0	1643823135	10.453987
30393156	Nix (the language, not to be confuse	Nix (the language, not to be confused with NixOS, the operating system) is not that hard to pickup, if you already know a programming language or two. Read through about the syntax and you'll get the gist in a couple of hours, and you basically know it inside out if you spend a day or two reading and experimenting with it. You just need to spend the time to understand it, and it's no longer a hurdle.What I think really stops NixOS from gaining mainstream popularity (eh, mainstream like in the Linux ecosystem, not mainstream-mainstream) is the inability of just downloading binaries and running them, when you have to. It's a huge hurdle to try to figure out the right incarnation to set the lib paths correctly for the binaries but woops, it's actually using something else and now you need to 	capableweb	14.898482	8.463756	comment	4.0	17.0	1645230604	-9.387164
30393246	Nix has a few shortcomings:* The syn	Nix has a few shortcomings:* The syntax isnt well liked.* The package manager relies on global state which kills the use of sharing / over NFS.* The nixstore treats a filesystem as an object store.* Related to above, permissions aren't secure as they could be.Some of these can be worked around, some of them require an entirely new project.	nwmcsween	14.898349	8.463706	comment	4.0	19.0	1645231216	-9.349393
30393737	You need a strictly pure functional 	You need a strictly pure functional language to do what Nix does. It's able to determine if something is already installed (in a specific state) because it calculates a hash of the output. Side effects throw a wrench in all of that.	zamalek	14.898652	8.464009	comment	4.0	13.0	1645235947	-9.44325
30394118	For me it's a total lack of any desc	For me it's a total lack of any description of the nix language.  I just have no idea what I'm looking at, and nowhere (last time I looked, which I admit was some time ago) explained what tokens make up the language.  Some showed that parts of the syntax were optional, but not what they meant.Occasionally I'd find a guide that describes in English what a given example file is doing, and it kind-of made sense, but wasn't clear how it mapped to the file shown.  There was a lot of magic going on with no explanation how it was getting there, so I could only assume there were semantics tied to some of the syntax that the writer assumed you'd eventually figure out... But they were just abstract enough that it didn't make sense in a way I could duplicate.	Izkata	14.896084	8.456842	comment	4.0	12.0	1645240745	0.79320836
30394862	I'm not really anti-nix, but never r	I'm not really anti-nix, but never really understood the appeal.Linux is already a niche market, and this is some subset of that.  I've been running a home grown Arch variant for years without a single issue.  Why someone like me would want to type everything out as some config language is beyond me.I could likely completely nuke my setup and redo it all in less time and effort than learning Nix.  In fact, I can say it takes about an hour - I usually do it anually.	silisili	14.897033	8.461337	comment	4.0	16.0	1645252180	10.556291
30488908	GNU Guix package and system manager	GNU Guix package and system manager	simonpure	14.881292	8.433791	story	4.0	63.0	1645973194	10.509383
30489316	One thing I don't like about GNU Gui	"One thing I don't like about GNU Guix: they despise systemd. Not that I like it, I like the fact that its adoption was entirely transparent for me and I like the fact that if I ever have any problem with it, it is easy to google for solutions.When one chooses to use GNU Guix, you're already entering the ""exotic distros"" terrain. Not using the most used initialization system definitely doesn't help here."	marcodiego	14.880967	8.43369	comment	4.0	16.0	1645975872	10.533512
30596935	Nix is an academic's solution to a l	Nix is an academic's solution to a large problem space based on a single principle ignoring several real limitations in order to shoehorn itself into an existing box of a problem. Of the many problems it has are assumptions about development models, deployment models, and operational models. Moreover, it seeks to be a monolithic proprietary solution rather than a collection of loosely-coupled layers that can be interchanged.But what irks me is that it doesn't fundamentally change anything. There are clearly major inherent limitations in how software is developed that led us here. Nix is intended to find complicated ways to work around the  problems in those development patterns. But we can't call out the pink elephant. Rather, let's make pink wallpaper, pink sofas, pink chairs, pink rugs, 	throwaway984393	14.898115	8.463397	comment	4.0	21.0	1646719635	-9.397458
30597592	Nix is nice as a catch-all, and espe	Nix is nice as a catch-all, and especially good when languages like C and C++ don't have popular package managers. It's definitely not better than cargo or pip when dealing with just Rust or Python, but it's definitely relevant when you're building multiple languages.I would love to see an evolution of nixpkgs with more of a starlark-style for package declarations.	wocram	14.899937	8.465456	comment	4.0	16.0	1646726399	-9.3714485
30681994	My two-cents for learing Nix:0. Give	My two-cents for learing Nix:0. Give up the expectation of figuring it out quick1. Read the official manual instead of tutorials2. Read example configurations from public repos	yewenjie	14.898785	8.464166	comment	4.0	14.0	1647322778	10.579431
30684059	I've tried for a couple of days now 	"I've tried for a couple of days now to set up nix for reproducible iOS builds at work and I'm close to tears.- Examples that just don't work.- Commands that run and no output is given, even though the text I'm following says it should output information I need.- Do I need nix-darwin? Well, the readme explains what it is: ""Nix modules for darwin, /etc/nixos/configuration.nix for macOS."" What? (Finally I found an answer at Stack overflow, and it seems I don't need it. Seems to be kind of NixOS on top of macOS)- Can't build with nix-build. After long time searching it seems like you're supposed to run nix-build -E  'with import <nixpkgs> {}; callPackage ./default.nix {}' - shouldn't there be a simpler way for this common case?- An issue open since 2018 that the manuals simple example doesn't "	BoardsOfCanada	14.899219	8.464812	comment	4.0	19.0	1647343883	-9.393676
30713073	> libc.so.6.1My brain hurts-- if lib	> libc.so.6.1My brain hurts-- if libc.so.6.1 is a nightmare, then what is the utility of having the libc.so.6 soname numbering at all?I'll put it in a more effective wrong-thing-on-the-internet style for receiving responses: There's no point in using NixOS. Just use lib.so.versionNumber. (Sorry) :)	jancsika	14.901823	8.467029	comment	4.0	42.0	1647535089	-9.255396
16315535	He was just trying to get it to run 	He was just trying to get it to run Nix.	Terretta	14.898531	8.463483	comment	4.0	13.0	1517915543	10.580692
16443389	Your second point is exactly what ha	Your second point is exactly what happened to me here: https://github.com/NixOS/nixpkgs/issues/9682Sure, pinning is great, and the ability to ignore versions seems to be a great design goal. Unfortunately, that design goal is shoved down the throats of users, and makes a very messy - and difficult to traverse or use - namespace where different versions are just thrown in the name without another thought.NixOS is my favorite Linux distro, and the only OS currently installed on my laptop. It's also frustrating in unnecessary ways.	thomastjeffery	14.898903	8.464184	comment	4.0	21.0	1519349185	-9.345453
16444225	This, 100%.Pain points I've run into	This, 100%.Pain points I've run into:1. Lack of clarity as to how language/application package managers interact with Nix (pip, stack, Vundle).  Pretty much every time I've asked about this, I've been told to go use `nix-shell` or to install things through Nix.  Increasingly, when I get odd behavior with applications I install through Nix, my first resort is to uninstall the Nix version and install it from apt; it might be a bit older, but I'm sure it'll work as expected.  I've went through the apt package -> Nix package -> apt package cycle three times from what I remember off the top of my head, with python/ipython, Haskell tooling, and Vim.2. Nix on Ubuntu feels like a second class citizen.  Things that interact with graphics drivers often don't work properly, e.g. video players.  (I un	grantwu	14.900485	8.465506	comment	4.0	21.0	1519360077	-9.352791
16773872	I really want to love Nix and have i	I really want to love Nix and have installed it multiple times. It's non-standard file layout gets me every time though. Something as simple as `#!/bin/bash` not working is problematic for me. I also find that trying to install anything not included in the Nix package manager is pretty much impossible (building from source...).Please correct me if I'm Nix-ing wrong.	malvosenior	14.898671	8.464207	comment	4.0	25.0	1523027947	-9.412784
17083209	I really love the work the guix folk	"I really love the work the guix folk are doing. I'd love to run guixsd on my laptop if it was easy and supported to run plain upstream linux instead of linux-libre. It just seems like such a lovely easy to use project from the little time I've spent playing with it, it's actually a small shame they're part of the ""unsexy"" GNU project and subject to GNU politics."	RX14	14.881589	8.434195	comment	4.0	80.0	1526484785	10.505106
22858558	As someone who loves NixOS and runs 	As someone who loves NixOS and runs it on my daily-driver laptop -I can't see running NixOS in production.We're running 100% Kubernetes, including for databases and other stateful workloads. Kubernetes implements the author's pattern just fine - any OS state is defined within the container image, and any application state is defined within a Persistent Volume. Unfortunately, NixOS doesn't have a good story yet for service management (Disnix isn't nearly as featureful as the Kubernetes scheduler and doesn't see nearly the same activity / community buy-in as Nix / NixOS) let alone ensuring that networked storage is re-attached to the particular node that runs the service in the same reliable manner that Kubernetes offers.IMO the way forward for Nix / NixOS in production is to:a) develop a co	solatic	14.896286	8.458214	comment	4.0	20.0	1586802860	-9.360895
22878155	Our organization tried Nix for many 	Our organization tried Nix for many years. Most of our problems were around usability, lack of documentation (including zero docstrings or type annotations in nixpkgs), and the overt unfamiliarity of the Nix expression language (asking a whole organization to learn something that seems deliberately cryptic isn't a recipe for success), and a long tail of other things. Still, at its core Nix for package management seems like the future; I just have no confidence that they're going to iron out those issues in the next 4-5 years.Of course, none of that speaks to Guix as I haven't used it, but hopefully it's awesome and solves all of those problems.	throwaway894345	14.8919	8.451382	comment	4.0	30.0	1586961208	10.537354
22882128	I made the switch from Arch about a 	"I made the switch from Arch about a week ago. So far, great experience. I love the fact that my system state is reproducible and if I use version control on my dotfiles, I basically have a full backup of the look and feel of my workstation. VFIO with GPU passthrough works flawlessly. Setting up FDE with LUKS during and after the install was a breeze as well. Really enjoyed the whole experience.Being able to switch between wildly different possible system configurations like xorg+i3 and wayland+sway by executing a few commands and having version control while doing so is incredible.However one thing I'm struggling with now is ""overlays"". Simply trying to get ""electrum"" to install but nixpkgs has 3.3.8, I am looking to build 4.0.0a from HEAD of master. This should be simple to do with someth"	therein	14.942765	8.530293	comment	4.0	20.0	1586979758	-9.371029
22985417	I think Nix/NixOS is a great idea.Bu	I think Nix/NixOS is a great idea.But unfortunately *nix programs are not written to support this, so you see lots of hacks in Nix to get things to work.Since GCC isn't really meant to work with headers spread across a varying set of directories, you end up with this wrapper for every GCC invocation: https://github.com/NixOS/nixpkgs/blob/master/pkgs/build-supp...And this just doesn't sit well with me: https://github.com/NixOS/nixpkgs/blob/master/pkgs/top-level/...	ylyn	14.89872	8.462711	comment	4.0	19.0	1587887921	-9.436525
22985694	Having just learned about Nix a few 	Having just learned about Nix a few weeks ago, and after an (admittedly cursory) glance at the language and documentation, my main intuition for why it hasn’t been adopted is that it could be more standard. For example why not use an established language instead of creating one from scratch? The syntax and features of the language look similar to Nim for instance. The benefits would be network effect as well as developer tooling support for newcomers.	ironmagma	14.898175	8.462751	comment	4.0	13.0	1587891643	10.511385
22986622	I tried to use NixOS a few years ago	I tried to use NixOS a few years ago, and it was reallly hard.The Nix language didn't have good tutorials and I couldn't use any of my NPM skills with the Nix package manager.I saw talk from one guy who wanted to make the Nix package manager use commands that were more like in other package managers.Did any of this happen?I really think NixOS and GuixSD are the next generation Linux distributions and want to use it.	k__	14.897907	8.462473	comment	4.0	15.0	1587903698	-9.450614
22986961	I'd prefer not to be more specific, 	I'd prefer not to be more specific, actually; at least on most points. Complaining about popular new things in threads about them is a trend I find irritating, and using a thread about how someone finds something cool to give reasoning as to why it's distasteful is completely off-topic and kind of rude, anyhow.However, I will note that I listed two competitors, not one, and while I think both have more merit, I only think the best is worth using out of all three. I'll point out that it's not Guix, and that it's older than Nix, but I don't think advertising alternatives is a particularly nice thing to do in a thread about any given piece of free software.	kick	14.863585	8.414929	comment	4.0	20.0	1587907414	10.519453
23252014	> One really cool thing about NixOS 	> One really cool thing about NixOS is you declare the OS just like you might a DockerFile,But DockerFiles have a really terse, self-evident, trivial to read language.  It is obvious what a given DockerFile means even if it's the first one you see.For nix; well, I have seen a few nix files and each one leaves me more confused than the last.  Can anybody point me to good examples of beautiful, single-file, complete, self-contained terse nix examples that describe a few simple systems?  Everything that I seem to find are small fragments of stuff.	enriquto	14.898167	8.463067	comment	4.0	27.0	1590010178	-9.37097
23252274	Thanks! So let's say I start install	Thanks! So let's say I start installing Nix packages. What distro's packages would they end up most similar to? Say, maybe Arch (which mostly leaves things unmodified)? Does that mean you basically end up with Arch no matter which distro you're on?	mehrdadn	14.897971	8.462197	comment	4.0	15.0	1590011252	-9.265803
23252641	I have always wanted to try Nix, but	I have always wanted to try Nix, but not sure how installing software from source outside the package system works. With Arch Linux, it's pretty easy to create an AUR package if it doesn't exist, or simply install it outside the package system. Is it easy to create Nix packages (based on the features of Nix, I'm guessing no)? What about if you don't feel like creating a package?	smabie	14.899057	8.463221	comment	4.0	12.0	1590013134	-9.367455
23252103	Even if Docker doesn't really care a	"Even if Docker doesn't really care about this, the DockerFiles themselves can also describe a reproducible process, and they are certainly ""incremental"" due to caching (not sure of what you mean by ""incremental"").  Does nix power merit such a big compromise against simplicity and readability?"	enriquto	14.881646	8.440197	comment	4.0	22.0	1590010635	-9.366359
23252226	Thanks, but I already got that much.	Thanks, but I already got that much. It doesn't answer my question though. If Ubuntu has made a modification to a package (that's basically the entire point of most distros, otherwise they'd be Arch), should I expect those changes in whatever Nix installs?It also leaves so many other questions unanswered, like what happens if I install GRUB or a new kernel or something else that's supposed to modify the system globally... but that's secondary.	mehrdadn	14.897727	8.46218	comment	4.0	13.0	1590011079	-9.371492
23253094	I haven't used Nix, but I would have	I haven't used Nix, but I would have thought that builds would be fast, due to how cache-able the dependencies should be.	WatchDog	14.898538	8.463745	comment	4.0	19.0	1590016293	-9.434743
23253645	The hours long build system appears 	The hours long build system appears to be attributed to Nix.Is Nix really that slow?	addicted	14.89899	8.464192	comment	4.0	31.0	1590021189	10.57295
23252894	Unfortunately there's a pretty annoy	Unfortunately there's a pretty annoying bug with MacOS which resulted from Apple making /nix non-writable by default. And since /nix is hard coded in all the cached packages it's not easy to fix.This is one big thing that's preventing us from adopting nixhttps://github.com/NixOS/nix/issues/2925	ninetax	14.898701	8.464192	comment	4.0	18.0	1590014825	10.573405
23275134	What should the default nix store pa	What should the default nix store path have been then?	adamtulinius	14.898216	8.46199	comment	4.0	15.0	1590171103	-9.364873
23276135	It's a great idea. But on non-native	"It's a great idea. But on non-native Docker, like OSX, it's simply too slow. Even when it's acceptable speeds, I find my computer running at 100% CPU usage with the fan out of control.Nix is a similar idea and makes the environmental identical for all developers. Makes on-boarding trivial. And speeds are ""native"" on all platform.As a nice side effect: it normalizes all tools like sed, grep and find.With that said, as a consumer of a Nix setup, it's about as easy if not an easier experience than using Docker[1].But properly learning to create your own Nix packages, etc, involves a very, very steep learning curve. Far higher than learning the basics of a Dockerfile.[1] Catalina issues notwithstanding, though there is a 4 command solution now: https://github.com/NixOS/nix/issues/2925"	silviogutierrez	14.89526	8.455967	comment	4.0	14.0	1590176961	-9.375265
23275519	Nix living at a predefined path is i	"Nix living at a predefined path is integral to how it works. An executable does not dynamically link to a generic ""ncurses"" but (via rpath) links to a specific compiled version of ncurses (such as /nix/store/81rb87agmp9cbsvg2xm2n4kp9c6309lv-ncurses-6.2). This is the root of all the benefits of Nix such as being able to install things side-by-side that use different versions of things or upgrade and rollback without problems.That predefined path being the same (/nix) across all users of nixpkgs is required to be able to share binary packages (you could perhaps build everything from source, but that's a lot of time, more time even than something like gentoo because package updates require all dependencies to be rebuilt as well).You can call it an insane choice or bad design, but there aren't"	pmahoney	14.902655	8.469656	comment	4.0	15.0	1590173344	-9.4014225
38016231	I agree, the lengths the Nix install	I agree, the lengths the Nix installer currently goes to really shouldn't be required. However, this particular issue isn't about binaries being deleted. The Nix installer sets up some environment variables for you (in particular includes its binaries in PATH). For a system wide installation, it modifies /etc/zshrc for lack of a better option. Now, macOS likes to restore /etc/zshrc to its default on upgrades, thus breaking the environment variables. IMO this is no-one's fault except macOS.	Cu3PO42	14.898091	8.463396	comment	4.0	17.0	1698257884	-9.390616
38019058	The fact that you need a third-party	The fact that you need a third-party installer for Nix or otherwise it will break doesn't inspire much confidence in the whole setup.	amelius	14.898839	8.46413	comment	4.0	13.0	1698272241	-9.419168
38066368	Aside... Is the sheer amount of cont	Aside... Is the sheer amount of content about NixOS a reflection of the modern world or just a HN obsession?I swear 1/5 tech post happens to be about NixOS...	keyle	14.898273	8.464426	comment	4.0	17.0	1698648184	10.553605
25719178	Can anyone talk to if nixos can reas	Can anyone talk to if nixos can reasonably be used to run a desktop setup?	jackinloadup	14.896684	8.459054	comment	4.0	15.0	1610309817	10.539836
25759690	I hope Nix (or something like it) st	I hope Nix (or something like it) starts eating market share from other package managers, Docker, and the like. Nix solves this sort of thing at the cost of one of the cheapest things available, disk space. Every discussion about it mentions how complex it is; I remember giving up on creating a .deb after a few days of looking into that fractal of complexity, versus producing a Nix package within the first day of looking at the language.	l0b0	14.898043	8.462114	comment	4.0	25.0	1610527636	-9.336652
26009206	I spent about an hour on this after 	I spent about an hour on this after your comment. Honestly, I was pretty lost in the filesystem for half of that time. I have never used either distro.My copy of NixOS had no password on the root user by default, which is not ideal but I assume most deployments aren't like that (right?). I was able to become other users on GuixSD using the SUID's the distro ships with, but not root. Not yet. The surface is much larger on both of those distros than the mainstream OS's. I may be able to pull of a root LPE, but I'd need to look for a full day at least.	netsec_burn	14.8950205	8.457416	comment	4.0	13.0	1612313083	10.568854
26208825	I think the future is probably somet	I think the future is probably something more NixOS-like. Now, personally, I've tried it and found it a bit wanting UX-wise (and for really niche stuff), but for providing cutting edge and the ability to roll back safely I don't think it can be beaten. If you have databases, etc. that might need to be rolled back things get more complicated, ofc.Right now, I'm running Arch Linux with a small smattering of self-compiled stuff. Arch seems to actually be pretty stable, unless you're using their 'testing' repos... and it's very close to bleeding edge. Their secret, I think, is staying as-close-as-possible to upstream -- the trouble usually starts when distros start to add large patches. This has been a huge issue for me with Debian/Ubuntu.	Quekid5	14.894479	8.451961	comment	4.0	20.0	1613861856	-8.619815
26329103	Thanks for the datapoint. I've been 	Thanks for the datapoint. I've been following https://github.com/NixOS/nixpkgs/issues/102547 and considering trying it out for a while.Did you just set services.pipewire.pulse.enable=true?https://search.nixos.org/options?channel=unstable&show=servi...My major concern is that I use PulseEffects as a key component of my setup so I'll need to check if that works well with PipeWire. But the only way to be sure is to try it!	kevincox	14.8988	8.464212	comment	4.0	15.0	1614783325	10.561679
36561237	Thank you for your comment velcrovan	Thank you for your comment velcrovan, but I don't agree with this sentiment. I've been using Ubuntu for personal laptop for a decade, and whatever for a given corporate laptop, and was reluctant to dig into NixOS, until it clicked - the point is to have it done once, and you won't have to do it ever again! NixOS is the only one that allows so.	drakerossman	14.897847	8.462193	comment	4.0	53.0	1688303963	10.55483
36561329	I don't think NixOS is the only dist	I don't think NixOS is the only distro that has this property, what prevents someone from making a shell script that installs your applications and dotfiles? Blow away your OS install and get your set up back in one line is my experience and I don't run Nix or Guix for most of my applications	mksybr	14.898047	8.462384	comment	4.0	33.0	1688304702	10.595715
36581049	FWIW gixy (nginx configuration check	"FWIW gixy (nginx configuration checker) catches this:
https://github.com/yandex/gixy/blob/master/docs/en/plugins/a...(and nixos automatically runs gixy on a configuration generated through it, so the system refuses to build <3)"	evgpbfhnr	14.896935	8.459511	comment	4.0	24.0	1688434329	8.7209425
36669130	Sad to see the Nix team can't get UX	Sad to see the Nix team can't get UX right.Their technology is on point.	k__	14.898457	8.464245	comment	4.0	15.0	1689008091	10.578244
36669266	Well this is enough to put anyone of	Well this is enough to put anyone off Nix. Such a shame because the abstract idea is obviously a good one. But every time Nix/NixOS comes up the story is the same.Terrible UX. Terrible documentation.Is Guix any better?	IshKebab	14.888228	8.446539	comment	4.0	16.0	1689008646	10.510725
36669523	Le sigh, another day, another group 	Le sigh, another day, another group of people turned off on NixOS for completely legitimate learning curve, documentation, and support reasons that are nonetheless heartbreakingly fixable. It’s never the user’s fault.Home manager is a well-intentioned and technically well-executed piece of software that is nonetheless a disaster as the “how to do dots on Nix” story, especially for newcomers. We need “Home Manager Light” or something.I’m a fucking serious Nix-head and I procrastinate doing anything serious to my dots like getting a root canal.	benreesman	14.898348	8.46391	comment	4.0	15.0	1689009527	10.555306
36669846	But isn’t that the Nix promise? That	But isn’t that the Nix promise? That I can have a fully reproducible system defined by a few configuration files?	0cf8612b2e1e	14.897329	8.461954	comment	4.0	12.0	1689010546	10.530942
36670517	This is a shame to read, I've though	This is a shame to read, I've thought of learning Nix for basic devops tasks and avoid tools like Ansible. Is this critique true for Nix in general or just NixOS?	DrDroop	14.898337	8.463729	comment	4.0	13.0	1689012597	-9.403268
36686304	Fwiw, this was mentioned in the NixO	Fwiw, this was mentioned in the NixOS and my descent into insanity submission yesterday, as it's underlying util bwrap, as a possible tool to help the blogger get NixOS running on their campus computers. https://news.ycombinator.com/item?id=36668363The org maintaining this maintains a bunch of other very high profile containerization/isolations tools: podman container runtime, buildah container builder, skopeo container registry multitool, conmon-rs container monitor, podman desktop gui, youki container runtime, and maintaining the standard reference impl of a bunch of OCI specs (storage, image). There's no higher profile place this work could come from, imo.	jauntywundrkind	14.896584	8.458934	comment	4.0	28.0	1689104725	-9.353842
37225064	I'm always excited to see developmen	I'm always excited to see developments in the Nix ecosystem, but I can't help but feel that this is a little bit tone-deaf. Nix flakes is a sensitive topic in the Nix community. Instead of spending time gracefully stabilizing the currently experimental feature, some of the core contributors to Nix apparently feel that doubling down and building a product on top of it instead is a better way to spend time.In addition, we're invited to join the discussion on Discord, of all places, instead of the other two standard messaging platforms that the Nix community typically uses (Matrix and IRC)	trulyrandom	14.899271	8.465497	comment	4.0	15.0	1692721758	10.592617
37225806	Perhaps it is just me.  But after so	Perhaps it is just me.  But after so many attempts of trying to getting started with Nix, it is still not clear to me how to *author* Nix packages.  My mental model about Nix is that it resembles make, but for the whole dependency graph.  I kind of hoped that the Nix language is more sane.  I think there is a project of similar goals but the script is in Python?  I remember finding it once, but couldn't recall its name.	RyEgswuCsn	14.899184	8.464687	comment	4.0	18.0	1692724666	-9.400836
37338857	Show HN: Flake schemas – teaching Ni	Show HN: Flake schemas – teaching Nix about your flake outputs	biggestlou	14.898929	8.466992	story	4.0	32.0	1693496148	10.610666
37418632	Is there some specific controversy w	Is there some specific controversy with Anduril that the community is reacting to, or is NixCon simply avoiding sponsorship from defense firms?	peatmoss	14.894588	8.458598	comment	4.0	36.0	1694093398	10.562713
37418955	Would like to add some needed contex	Would like to add some needed context (at least I think it's needed):* This started out because NixOS mastodon account posted on chaos.social local timeline which is  rather German Mastodon instance with a strict no-military-content-without-content-warnings moderation policy. People got angry for NixOS posting about the sponsor there and started complaining en masse to drop it. I think most people complaining aren't affiliated with NixOS at all but I'm sure there were also attendees of the conference complaining on Mastodon.* NixCon is a (compared to other open source conferences like kubecon) extremely small community conference, organised by volunteers who have been under immense pressure this week to pull off all the organisation whilst also having to handle this drama on Mastodon.* We 	arianvanp	14.898471	8.462932	comment	4.0	21.0	1694094882	10.535738
37519313	Making NixOS modules for fun and (ho	Making NixOS modules for fun and (hopefully) profit	ingve	14.897859	8.462339	story	4.0	12.0	1694759893	10.564549
24628684	Tangent, what's the best way to use 	"Tangent, what's the best way to use Nix-like features in a mainstream distro? Eg, i've been evaluating PopOS recently because i want a Mac equivalent OS. Ie, i don't want driver/config issues.However one problem i never see solved from any ""normal"" distros is reproducible systems. Hypothetically if i used Nix as a Desktop my config would be bulletproof. .. but then i'm going through a fair amount of work configuring everything when, as established, i want none of it.So i (as a user) seem to want some middleground between no effort installations / configurations of my Desktop, with reproducible snapshots/states/configs/something.You can use Nixpkgs on other distros/OSs, so maybe that is enough. But is there a better way?"	adsjhdashkj	14.898306	8.464195	comment	4.0	15.0	1601391891	-9.3352
25025084	Honestly, I have to say I'm in two m	Honestly, I have to say I'm in two minds about NixOS.Conceptually its a great idea, but I'm a bit worried about the possibility of all-mighty failures caused by adding the extra layer of abstraction and complexity.  Its a bit like messing around with the buzz-word-of-the-day Kubernetes compared to just getting the job done with a good old fashioned VM.Given solutions like Salt are around that can manage reproducible builds anyway (in conjunction with PXE installs), I see limited applications for NixOS.Also, sometimes its nice to have the warm fuzzy feeling of using a software vendor's supported package build on a supported OS (e.g I'd rather run a package from the official Postgres repo then mess around getting Postgres working on NixOS).	traceroute66	14.898277	8.463386	comment	4.0	42.0	1604835675	-9.317695
25025639	I've been using it for 9 months on l	"I've been using it for 9 months on laptop. I really love the idea. But had to ditch it and use ubuntu instead, because it routinely turned a 3-minutes-long-operation into 6 hours. I had to do work, not mess with configuration and read 6 A4 pages worth of text only to install some python package.I strongly feel like it needs to take the idea to a new level, ditch the messy language and completely refactor it.
Don't get me wrong, NixOS is 17 years old and it still feels like alpha version."	hexo	14.898272	8.463199	comment	4.0	24.0	1604841876	10.549572
25025987	My favorite feature of NixOS is clea	My favorite feature of NixOS is cleanliness.I never need to worry about a mess anywhere outside of `/home`. Ever.Ever make a symlink to fix a broken package and forget about it?Ever make a change to a config file and forget about it?Ever update your system and find out something is broken, just to spend time repairing the problem?All these things tend to add up over months and years. After a while, I usually end up reinstalling my distro to start fresh.Never again.	thomastjeffery	14.898002	8.4625	comment	4.0	21.0	1604845639	-9.303319
25098840	I'm not sure about the specifics, bu	"I'm not sure about the specifics, but providing something a lot more ""batteries-included"" seems to be the idea behind Emacs distributions like Spacemacs and Doom Emacs.One difficulty is that language-specific tools (language servers, linters... etc) are standalone pieces of software with their own dependencies, requirements... etc. It's hard to bundle together a fully ""batteries-included"" Emacs without figuring out a way to manage native software and services.I think this is one place where Nix can be a real advantage: even if you don't care about Nix's reproducibility, it's ability to manage Emacs, Emacs packages and language-specific tools is pretty unparalleled. If I had some more time on my hands, I would try putting together a Nix-based Emacs ""distribution"" with some easy way to confi"	tikhonj	14.89633	8.4603195	comment	4.0	20.0	1605422166	-9.409736
25170946	It seems like he is not aware of Nix	It seems like he is not aware of Nix or Guix, which is a travesty.	Ericson2314	14.89181	8.452361	comment	4.0	28.0	1605978907	10.549391
25190690	Might as well try out NixOS.I've bee	Might as well try out NixOS.I've been using it on all my personal devices for ~6 months and also for some bare metal sever deployments.A (mostly) immutable system configured with a single config file is an absolute killer feature.The ability to roll back to a previous config in the bootloader or the terminal is brilliant.And home-manager [1] provides the same experience for your user environment.I also looked into Guix, but the community and package repository seem much smaller.They also don't accept proprietary software in the official package repo. Which is a respectable ideological choice, but really reduces usability a lot compared to nixpkgs.[1] https://github.com/nix-community/home-manager	the_duke	14.897662	8.455448	comment	4.0	17.0	1606159977	-8.911894
25192287	Nix and Guix have too steep of a lea	"Nix and Guix have too steep of a learning curve. Maybe someday I'll be willing to invest the time to understand what's going on, but the CLI and docs just aren't good enough to go from ""I know nothing"" to ""ah, I can install the latest <firefox,inkscape,chromium,etc.>"".
It really isn't clear to me how to switch a running system's package manager to either or even if either is fit to be the system's main package manager.I watched a video of a seasoned linux user trying to install nix and abandoning the procedure because of the lack of docs. I even downloaded a virtualbox image of NixOS and tried to update everything to the latest version: 30 minutes later only firefox was installed but it wasn't in PATH thus couldn't be executed. Never found out how to install the KDE desktop.Guix was anothe"	LockAndLol	14.892533	8.45289	comment	4.0	18.0	1606167764	10.568988
25193075	The problem with nix is that it defe	The problem with nix is that it defeats the purpose of shared libraries. Normally, when you upgrade a shared library, all consumers of it get fixed for free.With nix every package is siloed into its own separate dependency graph and so you can have many versions of a shared library coexisting on the system but each version may be used only by one consumer. That means upgrading one will not affect all the others.So then the only way to get consumers of a shared library to upgrade is to upgrade the consumers as well. Well then why not switch to static linking and be done with it? It would be much simpler that way.	chongli	14.898935	8.46465	comment	4.0	12.0	1606173426	-9.340792
25194308	I found the documentation to be plen	"I found the documentation to be plentiful compared to other projects, though it's not as comprehensive as the Arch Wiki. The docs definitely mention how to install KDE [1] and firefox [2].To learn more about Nix, I'd recommend grepping the nixpkgs [3] repository once you grasp the basics of the Nix language (Nix Pills [4] would be a good start for that). Since everything in the Nix official repository belongs in nixpkgs, it's easy to search for the information I want. I just wish CentOS and Debian had a way of searching across the entire codebase this easily when I couldn't figure out something from the docs.[1]: https://nixos.org/manual/nixos/stable/#sec-x11
[2]: https://nixos.org/manual/nix/stable/#idm140737322634320
[3]: https://github.com/NixOS/nixpkgs
[4]: <a href=""https:"	soraminazuki	14.898895	8.464076	comment	4.0	14.0	1606182142	-9.455122
38657402	There needs to be two levels of conf	There needs to be two levels of configuration.One is just straight up a config file and the other is the nix language.Average users should not need to ever touch the nix language. They should only touch a config file.This config file needs to be so simple that it Can be configured with a GUI. Isomorphic configs when run with a formatter should come out identical. What I mean by this is if you have a machine with say version 3.123 of an app installed there is only one possible config file that can describe this configuration. There shouldn't be 50 possible ways to program that same configuration.	corethree	14.896505	8.460779	comment	4.0	22.0	1702667049	10.562142
38930379	I tried to make Nix as easy to adopt	I tried to make Nix as easy to adopt as possible by creating Nix commands and a step by step guide (600+ stars): https://github.com/dustinlyons/nixos-configI love Nix. I use it every day to manage multiple local dev environments. And I use devenv instead of docker for sharing project-specific environments with others.Who wants to use docker on a Mac anyway?	dlyons	14.897031	8.45887	comment	4.0	19.0	1704826918	-9.364113
38930947	I use nix on my laptop because it's 	"I use nix on my laptop because it's absolutely brilliant when it works. To me it's a fascinating technology. Being able to easily use different versions of some tool in two different projects, declaratively defining my dotfiles using home manager or quickly trying out some software using nix-shell -p is almost magical to me.Eventhough I've used nix for years now, I have no deep understanding of nix and I'm a very curious person who always tries to understand how stuff actually works. Nix makes me feel really dumb. It makes me feel like when I was twelve and I ""programmed"" by cluelessly stitching together code examples from online tutorials. I don't really understand what's going on outside of the really common use cases for nix.I read the entire nix docs but I think it's the kind of docume"	Aaronmacaron	14.897727	8.462608	comment	4.0	35.0	1704829436	10.521458
38995778	I keep seeing this from people onlin	"I keep seeing this from people online but I have yet to see Nix in the wild at any large organization.  For such a ""game-changing"" thing, it certainly doesn't have the meat space following you see online.To me, I tried Nix, got frustrated with packages, realized I'm just using someone else's abstractions for defining configuration files (with the same kind of quality you'd find on Ansible galaxy), and realized it's not solving a problem I have."	candiddevmike	14.897635	8.462142	comment	4.0	13.0	1705276894	-9.377684
39031755	Nix derivations are not actually con	Nix derivations are not actually content addressable, at least not yet. Derivations are input addressed.That means that the only way to validate the contents would be to take all the inputs and build the derivation yourself, defeating the purpose of using the cache. That means that nix caches must be trusted to not be malicious, with no computationally efficient way to protect against cache poisoning.There is a project underway to transition the nix store to be content addressable, which will decouple trust from distribution.	hamandcheese	14.89913	8.464805	comment	4.0	13.0	1705517433	-9.397652
39073249	Is there a good way of getting this 	Is there a good way of getting this sort of thing for nix projects in general?  I often find myself cloning the repo for it just so I can grep for `mkOption` and I often wonder if there's a smarter way.	__MatrixMan__	14.899564	8.465404	comment	4.0	13.0	1705790727	-9.395668
32601767	Nix absolutely needed a wrapper like	"Nix absolutely needed a wrapper like this to be used 'in the real world.'When you think about bringing it to production (eg getting dev teams to migrate to it), Nix goes from a genuinely interesting idea to an ""oh, that's cute"" experimental toy because no one is going to spend hours learning Nix's weird DSL. It's simply not approachable in its base form.I spent hours converting my devboxes to NixOS and managing my dev environments with home-manager and I still don't have a clue how any of it works. Errors are opaque and annoying to debug. Dev environments constantly break and change in ways that belay the ""reproducible"" nature of Nix. If someone actively interested in Nix can't easily grasp it, how does anyone expect it to catch on in the real world?"	xvector	14.899517	8.46643	comment	4.0	20.0	1661473055	10.552847
32603515	This is shelling out to nix-shell (h	"This is shelling out to nix-shell (https://github.com/jetpack-io/devbox/blob/97c19c370287e203bb...) which means that it will only support bash AFAIK. I've seen a lot of discussions around using nix-shell for dev environments, but read somewhere that is not really made for this purpose originally, rather for just building packages, bash being only one of the limitations.I tried to experiment myself with nix-shell, but I think it doesn't provide separation on the machine on which you run, it's not a chroot nor a docker container. If you are interested in some level of separation to make sure that a dev environment is ""safe"" to run on your machine without making side effects to things external to the project, then I'm not sure nix-shell would be able to help, but I would be happy to learn the"	x0rg	14.897556	8.4610195	comment	4.0	20.0	1661489916	-9.409267
32776421	Digging their repos is interesting. 	Digging their repos is interesting. They also proposed a docker driver to lazily download image bits as the files in the overlay are accessed [0] from CernVM-FS; they claim significant drop in process start up time.[0] https://indico.cern.ch/event/567550/contributions/2627182/at...	s17tnet	14.893853	8.45364	comment	4.0	17.0	1662708961	-9.357115
38111204	>  Nix is great in theory, but the u	>  Nix is great in theory, but the user experience is unacceptably bad, especially for anyone who isn’t a software engineer.This is a pretty extravagant claim. It was once very bad but there's now a large quantity of tooling that makes it as easy to work with as Homebrew.For managing their home, people can use Fleek, which makes Home Manager straightforward to work with: https://getfleek.dev/	emptysongglass	14.898448	8.463541	comment	4.0	25.0	1698919277	10.510536
38239247	> Something that is genuinely terrif	"> Something that is genuinely terrifying to set up to me is GitLab. It just has too many moving parts. To deploy it with NixOS, I have this in my configuration:To me, my first thought is to always deploy applications through containers (Podman + Systemd is my personal preference).I see this as at least some isolation, I know containers are not a fool proof security system, but it at least some other layer, simple to deploy elsewhere, etc.Is there a reason to preference running something ""natively"" in Nix over just using containers? Is Nix giving me anything if I mostly deploy containers? My servers are bootstrapped via pyinfra, and generally I just need to setup ssh, wg and a container runtime, so config drift isn't really much of an issue."	bongobingo1	14.896897	8.45996	comment	4.0	14.0	1699787700	-9.393405
38243847	This seems emblematic of the general	This seems emblematic of the general direction of technology. It's an approach to managing system complexity that works by adding additional complexity and handling that combination well as long as you use their tools. Nix isn't special in this -- all (non-derivative) Linux distros do exactly that, though that's probably little more than an extension of having written a package manager. I dislike higher level tools like this because they discourage understanding of anything below them. The filesystem is no longer organized in a human-readable fashion, it is an implementation detail.I'd love to see more concerted efforts going the other direction -- managing complexity by working to make the system simpler and compartmentalizing additional functionality. System snaps, now packaging lxd and 	BwackNinja	14.897863	8.461902	comment	4.0	13.0	1699821324	-9.359388
38421551	Guix has a more palatable language t	"Guix has a more palatable language than nix to me. However I have pretty much no interest in interacting with gnu projects. I don't share the ideology strong enough to put up with it. So it stays in the ""cool tech, won't use"" category for me."	zaphar	14.88423	8.440494	comment	4.0	24.0	1701006471	10.53308
38468813	"What about nix?
Or if it's just for "	"What about nix?
Or if it's just for developer tools, the 100 tool managers that exist, like asdf and rtx.Sometimes a package manager doesn't have my package doesnt get solved by adding one more package manager."	from-nibly	14.892791	8.449973	comment	4.0	16.0	1701312434	-9.215194
38499523	Nix package manager's `nix-shell` is	Nix package manager's `nix-shell` is something I wish more people knew about. Nix is gaining some popularity, but people often think of using it has to be a really big commitment, like changing your Linux distro to NixOS or replacing your dotfiles with a Nix-based one (using the Nix package manager).What I wish more people knew was that you don't need to do those things to get value from Nix. Create project specific dev shells that install the packages (at the correct versions) to work with that project can almost replace 90% of the docs for getting setup to work on a project.	yeck	14.898321	8.463179	comment	4.0	49.0	1701533051	-9.381199
38501930	Have you tried compiling software wi	Have you tried compiling software with a nix shell? It gets linked to the Nix store. Needless to say it was a frustrating revelation.	aliasxneo	14.89754	8.456217	comment	4.0	16.0	1701550331	10.49428
15011743	Migrating Debian to nix might be pos	Migrating Debian to nix might be possible, if that was desirable. You could have a compatibility layer for a while, and once everything is using the compatibility layer (in about 200 decades?), you deprecate the old package management details.	kanzure	14.887249	8.450826	comment	4.0	21.0	1502738040	-9.300778
15269816	Other than integration with the rest	Other than integration with the rest of the Nix/NixOS ecosystem, how is NixOps different from Puppet?Reading briefly through the examples, it seems very oriented towards provisioning machine instances rather than provisioning behavior across networks or multi-machine services, which is something that Puppet really excels at. What features does this offer in addition to ones that Puppet provides?That said, I've been getting tired of Puppet recently for some unrelated reasons, so I'll definitely give this a try.	zbentley	14.898382	8.463351	comment	4.0	16.0	1505659275	-9.385583
15271490	Yeah it's basically just growing pai	Yeah it's basically just growing pains.For large enterprise use, Nix is going to need to mature to a point where it's possible for enterprises to host a Nixpkgs cache locally, using a binary repository manager like Artifactory or Nexus, both for sheer cost (to save on bandwidth of thousands of servers downloading updates from the Internet) as well as risk reduction (in case the public binary caches are unavailable at critical moments). If this is doable today, it's not really documented.I'm sure the project will get there... eventually.	solatic	14.900379	8.465901	comment	4.0	16.0	1505679546	-9.380322
15478396	Having never used Nix before, I woul	Having never used Nix before, I would like to know what kind of usability issues it faces.For me, the biggest one is that I can't use it at clients running a Windows shop. That's a blocker.	philipov	14.898376	8.463627	comment	4.0	49.0	1508092080	10.559403
15478462	I think biggest ones are i) nix comm	I think biggest ones are i) nix command is a bit complex, but it's getting redesigned [1] & ii) nixpkg definitions sometimes contain a lot of cruft.I've found Guix and GuixSD, which are a GNU-blessed Guile Scheme-based reimplementation of Nix and NixOS, more aesthetically pleasing. Quite simple and elegant in fact.The major differences are that Guix DSLs are implemented on top of Scheme, whereas Nix uses a custom DSL. Furthermore, Guix avoids systemd and uses GNU herd instead.[1] https://github.com/NixOS/nix/issues/779	nextos	14.89307	8.455786	comment	4.0	32.0	1508092585	-9.396303
15479873	> some rando'sThis is a GNU-approved	"> some rando'sThis is a GNU-approved fork> weakly motivatedHas lots of strong motivation, like a stricter stance on non-free software, the usage of a ""real"", more expressive language (Guile) instead of a niche, poorly undocumented DSL (Nix), use of GNU Shepherd instead of SystemD for the init system, among other> niche NIH rehashIt shares most of the codebase with Nix, so to say it's NIH is missing the point. Nix improvements are shared with Guix, and Guix improvements are shared with Nix> unless you're already victim to lisp-induced stockholm syndromeDifferent lisp offer different syntaxes, features, and use-cases. That you cannot see it makes me think you didn't try too much, and are probably just trolling."	roblabla	14.896171	8.459529	comment	4.0	13.0	1508109061	-9.52623
17536658	NixOS on Prgmr and Failing to Learn 	NixOS on Prgmr and Failing to Learn Nix	luu	14.898378	8.463527	story	4.0	39.0	1531683357	10.570283
21511330	This is why I manage every nontrivia	This is why I manage every nontrivial project I do nowadays with Nix (Haskell, Go, Python, C & C++, bash ..anything)Everything is pinned to exact source revisions. You can be relatively sure to be able to git clone and nix-shell and be off to the races.You can even go the extra mile and provide working editor integration in your nix-shell (especially easy with emacs). So you can enable anyone to git clone, nix-shell, and open a working editor.The biggest downside is becoming proficient in Nix isn't easy or even straightforward.	whateveracct	14.89832	8.46325	comment	4.0	21.0	1573529943	-9.418099
21648402	NixOS solves all of these problems.a	NixOS solves all of these problems.a) define your entire system state and dependencies in a single, declarative fileb) prebake an image based on this fileIt's all done and ready, available now, no hacking around required.	q3k	14.898783	8.463071	comment	4.0	17.0	1574867093	-9.384661
39171614	Nix-direnv is a quality of life impr	Nix-direnv is a quality of life improvement	Smaug123	14.8985815	8.463834	story	4.0	18.0	1706489606	10.547762
32954214	Emacs. TeX/LaTeX. Classic Unix. i3. 	Emacs. TeX/LaTeX. Classic Unix. i3. A bunch of Scheme implementations. Tcl/Tk.	vincent-manis	14.876779	8.40907	comment	4.0	15.0	1663951443	-9.5585785
31841061	so, uhm, before Docker, what was the	so, uhm, before Docker, what was the one-liner that allowed me to get a ubuntu, fedora, nixos, ... shell automatically ?	jcelerier	14.894798	8.454389	comment	4.0	18.0	1655927808	-9.434312
39398271	With nix i can install free, non-fre	With nix i can install free, non-free apps -- the amount of nix-able stuff is a ton. Is Guix only set to install FSF blessed proprietary free stuff?	gigatexal	14.881894	8.436354	comment	4.0	12.0	1708097114	10.539526
39410088	Pretty sure nix-darwin + its homebre	Pretty sure nix-darwin + its homebrew integration could set up 99% of this with a pull of your configuration repo and a single installation command.	xnyanta	14.897352	8.460382	comment	4.0	13.0	1708182590	-9.298896
39490139	Contributing Scrutiny to Nixpkgs	Contributing Scrutiny to Nixpkgs	jnsgruk	14.898724	8.463985	story	4.0	68.0	1708763995	-9.483649
39530332	A Look at Nix and Guix	A Look at Nix and Guix	chmaynard	14.88231	8.433007	story	4.0	37.0	1709069824	10.492215
32080079	Interesting post! I’ve been thinking	Interesting post! I’ve been thinking about trying Linux with a rolling distrib. They mention NixOS, do people here have an opinion on that one?	baby	14.898059	8.462188	comment	4.0	13.0	1657699280	10.562957
32170072	The big thing this is going to miss 	The big thing this is going to miss between 2018 and now is that flakes have greatly increased presence.The small things are:- nix-direnv[1] is much more powerful and stable, with or without flakes- devshell[2] exists and is reasonably mature for those who want to give this to a team without teaching them (most) nixStill, apart from those, this is still a good intro.[1] https://github.com/nix-community/nix-direnv[2] https://github.com/numtide/devshell	flurie	14.899161	8.466907	comment	4.0	30.0	1658341556	10.587015
32170367	Is there a good book that explains N	Is there a good book that explains Nix, from theory to real world dev usage?	GoOnThenDoTell	14.898481	8.464762	comment	4.0	23.0	1658342695	-9.202909
32356207	A few years ago I heard about Nix an	"A few years ago I heard about Nix and NixOS.I loved the idea, but I did not enjoy the experience.
Maybe the problem was I was trying to make it work on a less well-supported platform (I think it was ARM32). But the packages I wanted to install either weren't available, or I kept getting incompatibility errors.I still love the idea, but these days I feel like environment managers like Anaconda make (mutable) Python development a little more manageable, and things like Docker make (mutable) Linux development a little more manageable. Basically these both make it less painful to start over with a fresh ""thing"" when the system starts to get crufty.In my view, there's a spectrum from ""immutable and annoyingly rigid"" to ""mutable by default and annoyingly unpredictable"". And the sweet spot is not"	hoosieree	14.897321	8.461419	comment	4.0	47.0	1659708049	-9.303876
32356335	I recently tried Guix which is somew	I recently tried Guix which is somewhat similar to Nix in theory. While I loved the idea I did not love dealing with cryptic problems resulting from it. For example I ran into an issue where one R package would only work properly if I installed other packages in a specific order, doing an update though could mess up that order breaking the package. Later updates to R broke support for certain things entirely that I don't see on non-Guix setups either. Plus getting things that required binaries I can't (or easily) compile myself to work is a pain.I just can't justify fiddling with my package manager so much.	goosedragons	14.885475	8.440211	comment	4.0	25.0	1659708671	10.5307455
32357408	I much prefer Guix UI-wise but it ha	I much prefer Guix UI-wise but it has some downsides:— I’ve had more jank on Guix System as a desktop OS than on NixOS. Specifically some dbus-related stuff like notifications and appindicators (when running sway + waybar) has been very unreliable for me under Guix in ways that it hasn’t been on any other distro I’ve tried including NixOS. Still haven’t figured out why.- Guix is slow compared to Nix. This is especially noticeable on older/weaker hardware.- Nix home-manager has a lot more options than Guix’s equivalent - it’s really nice being able to rely on it for things like sway configuration.That said, between the two I do lean towards Guix because I do gravitate towards Scheme more than the Nix DSL. I just wish it were a bit more polished.	ryukafalz	14.888201	8.445784	comment	4.0	16.0	1659712802	10.542774
32358423	Man, there’s a lot of negative comme	Man, there’s a lot of negative comments here. Just to add a different experience: my company loves Nix, it makes it really easy to integrate new tools into the dev/build environment without needing to document which packages, configuration, … a developer needs to apply to their machine manually.There’s nothing like it, really.	fesc	14.899025	8.463662	comment	4.0	32.0	1659717054	-9.323299
32374757	"""We want Nix to ne ubiquitus""And the"	"""We want Nix to ne ubiquitus""And there it is. Every time I hear about Nix, the goal is to convince me to adopt it, as if it was some kind of religion. Every time the Nix folks are being too pushy about it.Just stop pestering random project maintainers with Nix. If a project maintainer likes Nix, they'll add the Nix files. If they don't have Nix files, that doesn't mean they want to sign up for Nix advertising."	emersion	14.898477	8.464301	comment	4.0	19.0	1659859211	10.52469
32374887	After yesterday's post about Nix I t	"After yesterday's post about Nix I tried to install it on my Arch+fish machine. I couldn't.Somewhat naively, I assumed that installing it from the official channel would do the job. It didnt't. I then searched the Internet and found a very ""creative"" workaround for Arch users that didn't work either.My own problems aside, I would expect from a tool marketed as something that helps you keep your environment clean to not litter my disk with a ton of hidden files and directories spread all over the filesystem.I hope it doesn't sound too harsh. I'm keeping my fingers crossed for the development of this amazing project!"	Cosi1125	14.897312	8.462236	comment	4.0	17.0	1659861054	10.615195
32375173	Fix the learning curve.I love Nix an	Fix the learning curve.I love Nix and NixOS and have used them for years, but it always feels like I am stuck in beginner level when it comes to understanding the language.The biggest obstacle is pedagogic. I think big wins can be make by creating an up-to-date, deep-dive learning resource. I get the suspicion that one must learn Nix in a somewhat different way than one learns other languages. But I don't know what this method should be, and I wish somebody showed it to me.Admittedly, some of the difficulty relates to the Nix language itself. I got excited when I saw a gist [1] by Eelco Dolstra that 'naturalize' aspects of the Nix language by bringing them down a level of abstraction. I am disappointed this isn't discussed so often in the community. Making configurations and packages expli	ixxie	14.898633	8.464039	comment	4.0	20.0	1659865426	10.564635
22296831	Nix does not set up my Visual Studio	Nix does not set up my Visual Studio and XCode environments, Unity, Unreal, nor OEMs SDKs.	pjmlp	14.898191	8.462984	comment	4.0	20.0	1581407506	10.530798
35686717	Using Nix with Dockerfiles	Using Nix with Dockerfiles	rrampage	14.897015	8.460175	story	4.0	31.0	1682338848	-9.387414
36075709	why does it query search.nixos.org, 	why does it query search.nixos.org, rather than looking through your local nixpkgs? just because of how tricky it'd be to handle the nix language or hacking on the nix toolchain proper?also I agree that it's ridiculous nix doesn't have a search command. it baffles me.	sterlind	14.898256	8.464182	comment	4.0	12.0	1685046284	-9.422884
36075766	Finding a specific version of a pack	Finding a specific version of a package is also really difficult. It requires you to find the commit hash in the Nixpkgs repo that last contained it, and there isn't a central search engine that lets you map version to commit.We ended up building package version search into the Devbox CLI for this reason (https://www.jetpack.io/devbox/docs/guides/pinning_packages/#...). There's also a 3rd party site that lets you search for Nix package versions (https://lazamar.co.uk/nix-versions/)	jljljl	14.898421	8.463892	comment	4.0	20.0	1685046562	-9.404498
36076004	I love Nix as a package manager, and	I love Nix as a package manager, and flakes are awesome for setting up environments. I wish it had more affordances for being a proper build system. If only there were a Buck2 and Nix hybrid.	smasher164	14.898286	8.464289	comment	4.0	15.0	1685047677	10.590829
36076431	Normally I would eye-roll at these k	"Normally I would eye-roll at these kind of self promotions but it looks like you are trying to help with a real pain point of Nix.I put a good amount of time getting to grips with ""raw"" nix with the I imagine common yo-yo-ing between ""I don't get it"" and ""oh I see, this is great"" but when I realised how the intersection of nixpkgs and package versioning actually worked.. I was done.For a tool that from the outside seems is so heavily focused on immutability to just continually throw away old versions in nixpkgs head is a head scratcher, and as a monorepo isn't a great fit for utilising different revisions for different packages either.I can only guess that due to single repo containing every package it wasn't seen as practical to just continually append versions to, but when the diff log i"	NathanOsullivan	14.898024	8.463716	comment	4.0	14.0	1685049887	-9.359732
36076636	But oh my, the security implications	But oh my, the security implications. Nix is great, but there's no chain of trust on where these packages come from. Did we learn nothing from 'left_pad'?	woleium	14.897713	8.463119	comment	4.0	16.0	1685050991	-9.408708
36078284	Nix Flakes are deemed experimental a	Nix Flakes are deemed experimental and explicitly not recommended in prod by the Nix project, afaict. Despite these warnings it’s widely used, but breakage is very much a possibility because it hasn’t gone through the Nix RFC process.	tormeh	14.898685	8.466403	comment	4.0	14.0	1685061070	10.624077
36141475	Guix/GuixSD is great - it has some a	Guix/GuixSD is great - it has some awesome ideas that still hasn't made it to Nix/NixOS - the only impractical part is number of packages in Guix is really small compared to Nix - and to do anything that is not hardliner FLOSS you have to really grok the entire thing and build everything yourself.I checked rde almost two years ago - this video was mostly the only documentation back then. IIRC I think now it is even officially part of Guix?Anyway, I really wish there existed a rewrite of Nix in a saner language, that embraced the new ideas, and still had the pragmatic approach of current nixpkgs.	yewenjie	14.887853	8.446596	comment	4.0	25.0	1685556031	10.509686
36173261	That's basically what every other di	That's basically what every other distro does, seems like nix's architecture doesn't support this?	candiddevmike	14.898142	8.462811	comment	4.0	20.0	1685760853	-9.36438
36191404	Meanwhile, you can have the best of 	Meanwhile, you can have the best of both worlds using Nix. Tons of things are packaged already, and for the most part dependences are shared across many different packages. But if a package needs a special version of a dependency, thats no big deal.	hamandcheese	14.896589	8.458386	comment	4.0	24.0	1685930307	-9.327687
36240233	I find Nix to be very close to the p	"I find Nix to be very close to the perfect DSL for what it does, and I like it quite a lot.  But then I never bothered to look at Guix closely -- is its DSL at least lazy?  Are there any honest comparisons wrt verbosity and awkwardness of Nix and Guix for stuff both are supposed to be good at?No idea what ""making NixOS compatible with other programming languages"" is supposed to mean.  On the face of it the phrase is, well, baffling.  Would you care to elaborate?"	cmm	14.886015	8.443201	comment	4.0	67.0	1686224591	10.537521
36241147	When I used Guix, I needed nonfree f	When I used Guix, I needed nonfree for Firefox and the upstream Linux kernel. I also prefer to only use free software, and also like them not including proprietary software.Needing a channel was a huge inconvenience as you would often pull your channels and stuff would break, as guix was updated but non-guix wasn't. Managing channel manifests was a pain. Firefox would often be months out of date as well.Moved to NixOS, didn't enable allowUnfree, and had an actually up to date and simple to maintain system. Flakes solves the channels problems too. I had put a lot of effort into making Guix work, but it just had too many usabiltity issues, and the policy on firefox was a major one.	accelbred	14.881281	8.434076	comment	4.0	12.0	1686229243	10.52731
36241371	Besider Guix, Guile is also the defa	"Besider Guix, Guile is also the default extension language for the GNU project. Moreover by learning Guile you learn a lisp which some people find quite enlightening. What do you gain from learning Nix, asside from Nix?Moreover, ""macros are good"" in the sense that they are powerful and grant the user freedom to construct software in ways that are just not possible with languages that try to herd their users into a specific mode of behavioir. It is the old freedom and responsibility problem. Again, I believe it is a matter of choice and personal preference"	medo-bear	14.888177	8.441618	comment	4.0	46.0	1686230235	-10.19377
36240778	I think with the introduction of Nic	"I think with the introduction of Nickel [1], Nix packages would be rewritten in it over time, which may be a good thing (types) or a bad thing (another fragmentation after flakes) depending on your point of view.On the other hand, Guile is not a DSL but a general purpose language or a Lisp (Scheme to be exact), so it's not actually a downside compared to a DSL in my view.I myself am torn between these two. Nix community is larger and they have more packages. Guix, being a GNU project, obsessing over """"non-free"""" sure won't help in its adoption. Even debian folks toned down their stance on this, why couldn't Guix do so too?[1]: https://github.com/tweag/nickel"	ducktective	14.881709	8.436817	comment	4.0	21.0	1686227417	10.548549
36251976	I’m gonna start using NixOS as my da	I’m gonna start using NixOS as my daily driver in a short time, may I ask whether you can pinpoint me to that part which needs to click? Is it learning Nix/being able to write derivations? (also learning resources etc.)	Aerbil313	14.897913	8.462656	comment	4.0	12.0	1686274123	-9.248125
36262334	They also store them without any dis	They also store them without any distributed software supply chain integrity. One compromised person and the whole system fails.I wish they were less concerned with where they artifacts are stored and more about how nixpkg can prove they are authentic and who authored them.Nix has so many innovations over other other distributions but the massive step backwards in supply chain integrity still makes it too dangerous to use for any system you would not trust strangers with ssh access to.	lrvick	14.899293	8.464767	comment	4.0	17.0	1686336740	-9.414546
36264544	The fact that such articles appear s	"The fact that such articles appear shows an untold problem of NixOS which is: complexity.I've been a programmer and Linux user for many years, I know a lot of terminology behind it and I think it's a lot less of a problem for me to read technical documentation than for the average user. When I heard about NixOS I thought: ""how awesome, it solves some of the problems that I have"". But then I started to read official docs and dig into all of it and got quickly discouraged. It might solve ""some of my problems"" but at a time cost that I just couldn't afford. Well, maybe it's just not for me..."	kertoip_1	14.898231	8.464702	comment	4.0	17.0	1686346942	10.566455
36363193	So, did Nix actually adopt flakes ? 	So, did Nix actually adopt flakes ? Because last time I checked, it was still an experimental feature that everyone insists on using, but… it's still experimental, which means you have to make effort to use it.	Reventlov	14.898799	8.466674	comment	4.0	14.0	1686946523	10.629986
36388406	It seems like Nixpkgs aims to minimi	It seems like Nixpkgs aims to minimize the number of package versions in use at one time. Not just nix, most package managers do, it seems (i.e. you wouldn't expect to find different minor versions of Nginx in Debian, would you?)So by that same logic, there is only one version of Django 4.It is definitely possible with Nix to use the precise versions of what's in your requirements.txt, but I'm not sure if the Nixpkgs maintainers would allow all that extra duplication upstream.	hamandcheese	14.898086	8.462801	comment	4.0	51.0	1687160847	-9.359628
36389115	You can package simple python projec	You can package simple python projects, but as soon as there are too many huge deoendecies that use CPython and whatnot, it becomes impossible to generate the nix derivation. I just use imperative python-venv + pip install on those.	the_gipsy	14.898799	8.464042	comment	4.0	19.0	1687167752	-9.391277
36389803	Explaining what Nix is seems like on	"Explaining what Nix is seems like one of its biggest barriers to adoption.Part of the difficulty is it means different things to different people. My colleague spent a whole lot of time trying to answer this question and ended up with this:    My main take away after spending some time learning about Nix is that it embraces the functional programming concept of a pure function. 
    If I give a function a certain set of inputs, it will return the same result every time, no matter what. Nix is about building software the same way, whether it’s your own software, someone else’s software, or your entire OS: You declare all your inputs explicitly and it will be built the same way every time.

    What really mattered to them, regardless of how they were using Nix, was its ability to bring pure"	adamgordonbell	14.898483	8.463913	comment	4.0	74.0	1687174330	-9.366956
36391416	You're omitting the entire thing abo	You're omitting the entire thing about learning how to write nix. Which is nightmare fuel even for FP fans.	thumbuddy	14.898298	8.464231	comment	4.0	12.0	1687184725	10.534144
36391210	Doesn't this auto-upgrade behavior p	Doesn't this auto-upgrade behavior punch straight through the reproducibility Nix is supposed to be giving you? It's not exactly a functional build system if the results you get depend on when you download the dependencies.(I mean, I guess you could say that time is an input to the function, but that seems to miss the point.)	lolinder	14.897788	8.463554	comment	4.0	18.0	1687183400	-9.353885
36391679	I mean, I get that, but that means t	I mean, I get that, but that means that the reproducibility of my build depends on the whims of the nixpkgs maintainers, it's not a property guaranteed by the package manager.	lolinder	14.89842	8.4638815	comment	4.0	12.0	1687186080	-9.402029
36391954	> Run the nix installerOk and this r	> Run the nix installerOk and this requires root access, sets up some global directories under root, and a new user. Me as the administrator: why the hell do I need a new user and what is the nix store and what are the conditions that mutate it? (I know the answers to this question, but it's a barrier for people who give a shit).> Enable flakesWhat the fuck is a flake? Reads a bit... what the fuck is a derivation? (again: I know the answers to these questions already, but the invention of jargon by nix devs is a massive barrier to entry that shouldn't be overlooked, it's extremely confusing)> cd projectOk now I'm comfortable doing things I know> nix runFine, but what about auto envs and nix shell? I don't use these with make or cmake. I need to attach a debugger, where does it go? How do I	duped	14.8980875	8.46323	comment	4.0	20.0	1687187502	-9.373771
36462037	> eliminating the filesystem (other 	"> eliminating the filesystem (other than home and var) as a big ol' chunk of globally mutable state is so liberatingI'm about a week into the (very painful) process of switching to NixOS.This is pretty much the promise of NixOS that got me interested, but it seems to be that it's not really true.NixOS is just running a regular kernel that does regular linux security things.  If you want AppArmor or SELinux you still have to configure it yourself.If you want a sandbox on NixOS, your options are still bubblewrap/firejail, proot, or flatpak.  Or of course full virtualization with libvirt.The NixOS ""containers"" are just systemd-nspawn which (if I understand correctly) doesn't really offer more security than a properly permissioned user.I suspect that if you installed a malicious binary in a Ni"	throwing_away	14.897715	8.462456	comment	4.0	29.0	1687635760	-9.369569
36463186	These are good things and possibly m	These are good things and possibly make the struggle of NixOS worth it.But the impression the community gives is very much that you can always rollback and everything is in its own sandbox, which is sort of true, but not at all true as soon as malware happens.I've never really had a huge problem rolling back an ubuntu or arch update when something breaks, so I'm surprised at the amount of effort people are expending for just this feature with no additional security.	throwing_away	14.8973055	8.46013	comment	4.0	14.0	1687645488	-8.914605
36462734	Why you don’t recommend it to anyone	"Why you don’t recommend it to anyone? May be 
a proper recommendation is what I need to really 
be engaged with it ? The same for Nix.Please more  details about the practical  benefits
because I kind of see in general why it can be good 
but there is still certain lack of the real practical demonstrations from those who use it daily."	lovelyviking	14.895931	8.460461	comment	4.0	27.0	1687641528	10.568401
36486234	How does the Magic Nix Cache know wh	How does the Magic Nix Cache know which parts of my build are deterministic and which aren't?I suppose maybe it will only work if I split my build up into multiple steps such that Nix will know to skip those first steps. If Nix knows that, I suppose the Magic Nix Cache also knows?	iso8859-1	14.898588	8.464279	comment	4.0	15.0	1687815510	-9.333666
36487111	As a complete nix noob, will this he	"As a complete nix noob, will this help with caching node dependencies? We have a few projects that take over 20mins for a `yarn install && yarn build`. I’ve read setting up
Nix for node isn’t that straightforward, but that was a couple of years back. Has anything changed with respect to node projects?"	Karupan	14.897559	8.462698	comment	4.0	14.0	1687821427	-9.42394
36487915	As someone who has led a ~2yr adopti	"As someone who has led a ~2yr adoption of Nix in an enterprise scenario, I'm really glad for more projects that help with bridging the gap between Nix and containers/k8s.You can get fast startups if you're willing to define your containers upfront (dockerTools, nix2container) and/or adopt a dynamic container-server (nixery, flakehub). And you can get reasonably fast substitutions if your binary cache is on MinIO in the same cluster as the workers.But I feel like there's still room for a ""magic"" /nix/store that skips the copying and decompression stage altogether— something that works using standard nix invocations (like Magic Nix Cache), but presents itself as a Kubernetes Volume, so that in cases where a path already exists on-node, the existing files (in the cache pod) are simply mounted"	mikepurvis	14.896882	8.459845	comment	4.0	17.0	1687828833	-9.410182
28794461	I believe dwm[1] by suckless is arou	I believe dwm[1] by suckless is around 2000 lines of C. That used to be my go-to for a WM until I got too used gnome. As much as I loved the simplicity of that style of window manager, I am far past the days where I'd delight in tweaking my Linux installation to my personal tastes. If I could have a git repo with a static config that just built my OS the way I like it with minimal messing around, I would love that. I've heard NixOS is meant to work like that but I haven't found the time to try it. Perhaps someone here can enlighten me?[1] http://dwm.suckless.org/	hresvelgr	14.896405	8.456596	comment	4.0	17.0	1633655438	-8.863748
28795396	I can see the utility of using Nix f	I can see the utility of using Nix for managing dependencies of software you're developing, because that can be horrific to deal with and Nix makes it fairly elegant to do, depending on what ecosystems it's being used with.Using NixOS to manage your whole system, on the other hand, I don't think I'll ever get behind. Maintaining reproducible builds of my system, while being nice to have, doesn't really solve any problem that I actually have. On the other hand, it introduced a myriad of problems that plagued me on a regular basis before I switched away from it.The first problem I had was that it added steps to a number of tasks I had on a regular basis. For example, updating or adding new extensions to VS code. Because NixOS is immutable, you don't get to benefit from just running a single 	jpe90	14.898234	8.462708	comment	4.0	23.0	1633663388	-9.36872
28817616	I'm a nix fan and have been using ni	I'm a nix fan and have been using nixos for years now, packaging stuff and writing my own nix-based libraries, but I still find the language to be painful.The problem is, documentation is sparse to non-existant, error messages are poor and often far from the actual problem, and it makes use of concept that lots of people are not familiar with (like lazy evaluation) without ever explaining them, resulting in surprising semantics.But as far as I can tell, the nix devs are fully aware of these issues - they are affected by it too! The problem is, solving each of those issues is hard, and requires a lot of focused efforts.	roblabla	14.8989	8.464804	comment	4.0	18.0	1633865764	10.547823
28817966	I haven’t used full-on NixOS yet, bu	I haven’t used full-on NixOS yet, but I’ve used the Nix package manager quite a lot, and literally all of my forays have been miserable for a variety of different reasons.To be clear, I love what Nix aspires to be, but it doesn’t deliver on its promises IMO.As a package author, the Nix language has lots of rough edges, it’s absurdly tedious to figure out how to call various functions (what type of argument does it expect?) because it’s untyped and nixpkgs is poorly documented. There are too many other issues here to unpack.As a consumer of packages, it’s often unclear what I need to do to install anything but the simplest packages. E.g., installing vs code with some plugins (note that this differs between NixOS and other systems). Further, the CLI interfaces are confusing from a UX perspec	throwaway894345	14.898996	8.464555	comment	4.0	18.0	1633869719	-9.376666
28818325	I think NixOS would benefit from eas	"I think NixOS would benefit from easily accessible collection of opinionated modules/profiles/configurations with minimal set of options. Something like gnome-desktop / sway-desktop / etc. Gnome actually does pretty good job here.The point is: currently my NixOS and Home Manager configurations have over 2k LOC total. When you search for configurations on GitHub/Google you are likely to find complex ones. For example, quick search for ""nixos gnome"" (Google) gives me link to NixOS Wiki (which describes only Gnome part) and blog post (https://gvolpe.com/blog/gnome3-on-nixos/) which is useful but links to really huge configuration (https://github.com/gvolpe/nix-config) that is overwhelming to any beginner.Great example of such approach is nixos-hardware (https://github.com/NixOS/nixos-hardware"	suchar	14.898746	8.463384	comment	4.0	17.0	1633873204	10.572913
28818499	I have no opinion about NixOS but ev	I have no opinion about NixOS but every time I read someone touting its merits I feel like I live in a parallel universe. NixOS seems to solve problems I never had at extreme costs to its general usability.I don’t care that I can rebuilt a computer identical to mine in minutes. I don’t change computer often enough for it to matter and the tweaking I do is minimal because frankly tweaking configuration is not fun and feel like a gigantic waste of time. Same things for reproducible builds, I like them as a developer for the things I work on because they make things easier to manage and debug. I couldn’t care less as a user. I just want things to work.I guess it could make sense for servers as an alternative to provisioning tools but then it seems to me like it’s competing with docker and kub	WastingMyTime89	14.897657	8.460263	comment	4.0	31.0	1633874604	-9.29175
28818517	>  Crazy thing about NixOS is that i	">  Crazy thing about NixOS is that it's so good, all the bad parts can be excused. I like to go on forums and complain about how the Nix configuration language is horrible, and there's not much documentation on how to get general things done.I don't think it is fair to say that Nix as a programming language is horrible, IMO, as a DSL it is pretty good and fits the domain well.It is a strange language at first and it takes some time to learn all its quirks. Also, it lacks better tooling, things like LSP for example (there is one but it is slow and limited last time I tried). But just claiming the language is ""horrible"" is really unfair."	m45t3r	14.8969345	8.461507	comment	4.0	20.0	1633874772	10.546379
28818624	Having worked in a large Nix dev env	Having worked in a large Nix dev environment, the difficulty in understanding what was going on meant devops were needed for the simplest changes. Ended up being a blocker for every project I was on. Love the idea but really really dislike it in practice. NixOS is cool though.	exdsq	14.898412	8.4636965	comment	4.0	15.0	1633875626	-9.315454
28819050	I keep going to the NixOS website to	"I keep going to the NixOS website to understand what NixOS is.it says it's an ""OS"".   I've been in the computer thing for a long time and in my experience, an ""OS"" is the thing that runs when your machine first boots up.   From this it follows that you can't run an ""OS"" without rebooting a machine (or running it in a VM, or whatever).Yet I go to nixos.org, click ""Learn"" (let's assume I'm the supposed ""non technical user"") click ""install nix"".And what we see is two lines of shell that seems to be starting some kind of daemon.  I just ran that locally, and it even states, it's going to move things around and start a daemon:- set up the ""default profile"" by creating some Nix-related files in
   /root
 - back up /etc/bashrc to /etc/bashrc.backup-before-nix
 - update /etc/bashrc to include some"	zzzeek	14.898269	8.463025	comment	4.0	20.0	1633878992	10.550974
23395873	I also have the feeling that the tut	"I also have the feeling that the tutorials start with the details, instead of starting with an overview so you can understand what is what.When you are trying to be as different from everything else as wide-reachingly as Nix is, it seems to work better to build an understanding up rather than down. This seems to frustrate a lot of people because it does not give much payoff for the first few hours of learning (and that's a lot to invest to even understand what something is). The truth is that Nix is really really complicated (expect a year-long learning curve to truly ""get"" everything), but it's also really hard to take the more-standard approaches to building packages and managing machines seriously once all the pieces finally do all connect. Unfortunately, it kind of makes one feel like "	clhodapp	14.898183	8.464159	comment	4.0	14.0	1591129235	10.542781
23528000	Who funds Guix development? This thi	Who funds Guix development? This this one of those experimental/hobby/academic projects? I never hear anything about Guix outside of HN or F/OSS boards (and even then, very little). How does it continue?	nvahalik	14.881593	8.435074	comment	4.0	29.0	1592233336	10.541556
23528380	Does anyone know of a recent compari	Does anyone know of a recent comparison of NixOS vs Guix? Both these projects are awesome and I’m a NixOS user but I want to learn more about Guix. I’ve found older ones but nothing in the past year and with all the recent developments in both communities I’d love to see a side by side comparison.	rudolph9	14.887477	8.444666	comment	4.0	26.0	1592235049	10.545143
19977621	FYI, AppImages do not run anywhere. 	FYI, AppImages do not run anywhere. There are a lot of issues with them in NixOS, since NixOS is all about having explicitly-linked dependencies, and AppImages still often have implicit dependencies that aren't in the image itself, since they are assumed to exist on the host system.See https://github.com/NixOS/nixpkgs/pull/51060 for an example.	Pneumaticat	14.907912	8.47623	comment	4.0	15.0	1558497392	-9.410025
20260533	how does nix eliminate compile times	how does nix eliminate compile times???	mlevental	14.898962	8.46441	comment	4.0	12.0	1561349908	10.531171
20753066	You know what'd be really cool? For 	You know what'd be really cool? For either Nix or Guix to transparently support installation of any version of any program without hacks like putting an alternate version under a different name or some such. I wish programs didn't require continued maintenance for dependency updates or risk being uninstallable without putting them and a number of dependencies under different package names. I wish I could install Firefox or Chrome from a decade ago as easily as I can install the latest versions.I wonder if it'd be too crazy to add git-awareness to the Nix utils. Like tell nix to install version X of some package, so in the nixpkgs repo it would check the history of the corresponding file to find the commit where it last was that version, checkout that commit, build the package and its depen	jolmg	14.898151	8.462583	comment	4.0	22.0	1566341674	-9.404822
20821020	I wish more orgs would move over to 	"I wish more orgs would move over to orchestrating fleets of NixOS machines with NixOps. I can't overstate the benefits of truly immutable deployments. ""Be this, machine, and be nothing else.""Feels like DevOps championed the lowest common denominator. I have to deal with containers flipping out all the time because the distros running inside these containers were never intended to be what we demand them to be with orchestration."	emptysongglass	14.89756	8.461155	comment	4.0	12.0	1567007887	-9.350082
14216018	Have you seen Nix? It can be used in	Have you seen Nix? It can be used in this way, and its configuration language is relatively good.	DonbunEf7	14.890338	8.443648	comment	4.0	17.0	1493339686	-9.291638
14282550	If we're plugging functional package	If we're plugging functional package management, we may as well mention the other significant project in this space - Guix:https://www.gnu.org/software/guix/download/Essentially, all the benefits touted above apply here, but it is worth noting that Guix is a younger project. The author was originally a Nix dev, but found the DSL to be too awkward to use in practice, and opted to use Scheme through and through. Yes, Emacs bindings are available.Also, Guix can now produce Dockerfiles, if that floats your boat:https://www.gnu.org/software/guix/news/creating-bundles-with...	nagvx	14.886752	8.442213	comment	4.0	24.0	1494108842	10.558028
14402423	Any experiences with using GuixSD as	Any experiences with using GuixSD as a main distribution for a standard laptop working environment?  I have been using Debian Sid for more than a decade but the idea of having a system fully configured via reproducible pure Scheme functions is tempting for sure...	arximboldi	14.884092	8.438206	comment	4.0	20.0	1495555856	10.534823
14476493	Oh come on. And what's the kernel fo	Oh come on. And what's the kernel for GuixSD? Linux.We all know RMS is bitter that he can't take credit for a functional kernel, but it's still there.	tgjsrkghruksd	14.880881	8.431983	comment	4.0	13.0	1496499725	10.499204
14619073	I need CUDA drivers for what I am wo	"I need CUDA drivers for what I am working with, and I have found no way to install it in Guix. Otherwise, it looks interesting enough.(Sexps are usually not my first choice, I think it is a ""lazy option"" for people who do not want to write parsers / design their own syntax. Even then, they are better than current Nix expressions)."	atemerev	14.874326	8.419489	comment	4.0	16.0	1498225455	10.315587
30777004	Same here.Strongly eyeing NixOS and 	Same here.Strongly eyeing NixOS and patiently awaiting real work experience from a co-worker who already did the plunge.	jsilence	14.898192	8.463398	comment	4.0	13.0	1648031812	10.571021
30852967	Big problem is that just forking it 	Big problem is that just forking it isn't enough, you also have to convince every distro out there to switch to your fork to make any real difference. It becomes a truckload of boring work for what might be a trivial one-line fix in the code.I blame the package managers we use for this, as most of them make it incredible difficult to change anything and make you a slave to whatever the distribution ships, which in turn is slave to whatever upstream ships. The effort to fix the issue just far outweighs the issues the problem is causing in the first place.NixOS is one of the few that seems to get this right by making code changes pretty much trivial. Just fork the upstream repository, point the package to the new fork and you are done. With a Nix flake you can even make the repository itself	grumbel	14.89823	8.462953	comment	4.0	21.0	1648631809	-9.370365
30919955	Not as bad as the guix crowd IMO. Th	"Not as bad as the guix crowd IMO. They're like the nix/Rust ""just use XYZ"" crowd but also combined with the GNU zealots so you get the perfect overlap of annoying software purists.Really, I like the idea and I actually like the fact that they use Guile (scheme) instead of a home-built DSL, but guix is a horrible, poorly documented, doesn't work even on the happy path mess."	packetlost	14.880246	8.431665	comment	4.0	14.0	1649171136	10.532474
30921262	Your example looks great!  Indeed I 	Your example looks great!  Indeed I trolled every piece of nix documentation I could find -- it was the only way to figure out what I should be doing.Here's the simplest example of an utter failure when I tried nix: installing ruby 2.2.  It's very possible I did something totally wrong, but when I have to use ruby 2.2 and nix cannot do it, it sort of kills your awesome example of being able to override openssl.Another extremely frustrating experience was the bifurcation between nix and nixos.  Clearly one experience is preferred over the other.  So many blogs and docs talk about things like HomeManager and other configurations that are nixos specific.On top of nixos/nix, there's also shell.nix/flakes.  There's just too much development in nix right now to make sense of what's going on.	qudat	14.89826	8.46398	comment	4.0	17.0	1649176906	-9.368788
31138912	Nix has been perfect in this respect	Nix has been perfect in this respect, giving full control over how you want things installed.  The line between distro maintainers and users is completely blurred - you can take as little or as much control over the installation and configuration of any particular package or service that you want.	colordrops	14.900188	8.464448	comment	4.0	28.0	1650750311	-9.343871
31142659	Yes and no. Yes, because Turing comp	Yes and no. Yes, because Turing completeness. But no, because if you tried to do something like the Nix package manager with a language like Python or Java or even Scheme (yeah, I'm looking at you Guix), you'd end up with a worse system.What's great about Nix the language is that its design matches beautifully with its purpose. Nixpkgs is a single giant program, the output of which is a set of 70,000 package definitions. Since Nix uses lazy evaluation, you can specify one of the attributes of that set, a single package, and the Nix interpreter will evaluate just that one package expression. Of course, if that package depends on other packages, those will get evaluated as well, because they're needed as inputs to the package you care about. So package dependencies emerge naturally as comput	cwp	14.901946	8.467923	comment	4.0	15.0	1650794871	-9.402861
31267841	Initially I spent a lot of time as I	Initially I spent a lot of time as I used it as an opportunity to learn Nix/NixOS. I used Nix intentionally as it's a rolling release and also it's declarative and intended for reproducible deployments, so I don't need to deal with an OS like Ubuntu that slowly gets crufty and out of date and needs a clean-up or upgrade or complete re-install.  And if I do need to re-install, it should be mostly a one-liner.For security there are these scanners:https://github.com/flyingcircusio/vulnixhttps://github.com/andir/nix-vulnerability-scannerI also run all services in docker and my network uses VLANs behind an OPNSense firewall. I use Wireguard as a pinch point into my network to access most services. So I'm not too worried about the security aspect.Upgrading on Nix is pretty easy - just bump your 	colordrops	14.897956	8.461538	comment	4.0	20.0	1651710860	-9.366132
31346187	I remember Rexx. When I first instal	I remember Rexx. When I first installed OS/2 to try and power my BBS one of the first things I played with was writing Rexx scripts. I was sure I was going to revolutionize the command-line! By automating Presentation Mangager or was the GUI Workplace Shell? Can't remember, but I remember Rexx!	mftb	14.88214	8.430843	comment	4.0	15.0	1652305227	-8.583423
31433927	About the installation method ('hi! 	About the installation method ('hi! download this random shell script and execute it'), I agree this is really dangerous but mere installing stuff is a hairy thing on linux distros. I mean what is the practical alternative? Distro package manager versions are almost always way behind.NixOS/guix are gonna solve this issue once and for all (famous last words)	ducktective	14.893493	8.446608	comment	4.0	37.0	1652964626	-9.109221
31439099	This is interesting: over the last s	This is interesting: over the last several months, a friend has been running NixOS on a Framework and has been told by Framework employees that they can’t help him with Linux kernel issues because he’s using an unsupported OS and he’s also had lots of complaints about battery life and power management.I love the idea of the Framework, but it seems to suffer from all the issues that made me switch to MacBooks in the first place.	fiddlerwoaroof	14.894165	8.4496355	comment	4.0	71.0	1652988972	-7.990531
31518486	"I use Nix to manage:
- a desktop run"	"I use Nix to manage:
- a desktop running NixOS (primary work machine)
- a Macbook (secondary/travel work machine)
- a Linux VM on WSL 
- two servers (a raspberrypi in my closet and a Hetzner vps)I keep my config on Github (latest branch https://github.com/alexghr/nix/tree/host/vader). I'm still new to this so a lot of my config is duplicated across  different hosts but I want to refactor it to eliminate duplication.If you haven't yet, I'd recommend giving Nix/NixOS a try. There's a bit of a learning curve but it's very powerful."	alexghr	14.897409	8.461756	comment	4.0	15.0	1653573962	-9.405098
31557889	Can one use the benefits of Nix prov	Can one use the benefits of Nix provisioning while using other linux distro, Debian specifically?	ewuhic	14.898007	8.462005	comment	4.0	14.0	1653910270	-9.306018
28817949	I've never used Nix, but it sounds i	I've never used Nix, but it sounds interesting.I get the impression it's more used on desktop, but I'm curious if anyone has used it on servers?	GordonS	14.897859	8.462695	comment	4.0	14.0	1633869611	10.537315
28887107	I switched to NixOS half a year ago.	I switched to NixOS half a year ago. The reason? I fell in love with literate programming (I use [1]); being able to  write (and read) your whole OS configuration is the dream!There are few bad sides to NixOS though.The community consists mostly of programmers, which means I am missing some creative tools (mockups, mindmaps, ..). In the future I will be able to provide/build them myself, but it is not a smooth transition from my previous arch setup.Also the whole documentation sucks: There are three (!) official manuals + the home-manager manual + Nix pills + YT + random blogs where I have to piece everything together.Still I find NixOS superior to every other OS (windows, linux) I have tried so far. I just feel free and am not afraid to fuck up anything [2], as I can just go to a previous	altgans	14.898427	8.463017	comment	4.0	26.0	1634383431	10.552778
28887172	I'm not asking it to be more 'orthod	I'm not asking it to be more 'orthodox', I'm asking to not have to spend months scouring poor documentation to learn a new language and toolchain to gain the very few benefits Nix provides over the existing systems. If Nix is so inherently complicated it cannot deliver that, then why would I want it?Ultimately I want less complication in my life, not more, and Nix very much does not provide that from what I can see.	AnIdiotOnTheNet	14.898775	8.4641	comment	4.0	18.0	1634384565	10.525641
28899693	As a framework owner, this is nice t	As a framework owner, this is nice to see. I have yet to take the plunge on Nix (been happy with PopOS on mine), and wouldn't without Bluetooth support, but it's good to know it's possible and relatively painless.I'm hoping to start with nix+home-manager at some point, maybe on top of PopOS; anyone have experience with that setup?	claytonjy	14.898008	8.462439	comment	4.0	21.0	1634503926	10.570496
29073301	Nix 2.4 Released	Nix 2.4 Released	watusername	14.898344	8.46333	story	4.0	68.0	1635801785	10.598998
29079938	nix.It's confusing, but we'll get th	nix.It's confusing, but we'll get there. You'll need/want:- nix, the tool/build system.- nixpkgs, the world's most up-to-date and underfunded package repository.- nix-darwin, bringing a NixOS experience to Darwin. Not perfect, but pretty damn great.And optionally,- home-manager, a nix-based opinionated tool to manage dotfiles and other stuff in your home directory.And finally, some things to avoid and experimental features to use:- do not ever use `nix env -i` to install things ala homebrew, apt, etc. This is a trap. You don't want this.- use nix flakes. Sure, it's experimental, but it's what you _do_ want. Reproducible, version-pinned builds.- if you use direnv, or are familiar with it, check out nix-direnv, which is like direnv on crack. Instead of managing your packages globally, manage	xyzzy_plugh	14.898712	8.463367	comment	4.0	16.0	1635854291	-9.4092655
29288128	Just an anecdote, I accidentally bro	Just an anecdote, I accidentally broke something in my Guix system config but I couldn't figure out how to debug the scheme errors, and I had to reinstall	assbuttbuttass	14.879981	8.43229	comment	4.0	13.0	1637416937	10.562768
29304382	I recently installed GUIX and just o	I recently installed GUIX and just out of the gate I like the syntax much more than I ever did with Nix. The Nix syntax is just to random and hard to just guess what is going on if you're not sure what you're looking at. At least GUIX is more traditional looking Scheme type code.	res0nat0r	14.891604	8.45178	comment	4.0	18.0	1637572171	10.511259
29316030	RasPBX Installation for Beginners	RasPBX Installation for Beginners	madviper	14.880709	8.431474	story	4.0	112.0	1637659600	-8.19598
29387979	No, it definitely (but unfortunately	No, it definitely (but unfortunately) will not. Nix does everything docker does better than docker does, except most crucially, integrate with non nix tooling.Nix vs Docker is like Rust vs JavaScript - you can point out every reason js is terrible and rust is better, but for the common developer looking to get things done, they’ll often gravitate to the tool that gets them the biggest impact with the least upfront investment, even if that tool ends up causing major predicable headaches in the future.	edude03	14.897764	8.461383	comment	4.0	25.0	1638238202	-9.418438
29388328	IMO initial value of docker for loca	IMO initial value of docker for local development is enabling me to run two copies of postgres without them shitting on each other. I get that nix is supposed to be hermetic, but does it enable two of something?nix being really good at package management is something docker needs to imitate -- out of order apt-get without requiring a re-downloading all the packages, for example, seems like it would shrink most cloud build costs. I guess this is what the article means by trouble 'sharing layers'docker buildkit (or moby buildx or wherever the branding has settled) is supposed to to improve caching, but creating a simple API for caching that plays nicely with system + language package managers would really move the needle here; reorderable package installs would be the v2	awinter-py	14.887509	8.443175	comment	4.0	23.0	1638240544	-9.343629
29388052	I've set up my new M1 MacBook Pro us	I've set up my new M1 MacBook Pro using Nix and it's been going relatively well. Home Manager manages global tooling like Neovim, random CLI tools, and config files while I've set up `default.nix` files to use with `nix-shell` per-project. The set up of each project can be a little tedious as I still find the language confusing but once everything is set up the reliable re-creation is excellent. I love the feeling of opening the nix shell and feeling like I have each tool I need for that project without worry of polluting my user space or conflicts between projects.	bjtitus	14.898635	8.463572	comment	4.0	19.0	1638238650	-9.512353
34122372	I really like nixos. I didn't get fl	I really like nixos. I didn't get fluent with it, but I was learning and declarative environments is just so incredibly satisfying. I never had to do anything twice. I had to reinstall to change my HD layout and immediately I was back to the environment I had before. So happy. The language doesn't seem that bad to me either.  Ultimately the biggest problem was package management.  You'll eventually hit a dependency you need for work but doesn't exist or isn't kept up to date. Doing the work myself if just not something I have time for.  I left the platform when I had to look at the Google Chrome update warning for two weeks without any updates. I get that these are all volunteers and I'm not mad. Until you have the marketshare that package owners are going to start ensuring your platform g	koalaman	14.897613	8.461342	comment	4.0	16.0	1671925040	10.564307
34126142	I agree with the Guix bit. At some p	I agree with the Guix bit. At some point, I tried using Guix System on my laptop (with wireless support), and of course I was greeted with « use a wifi card that respect your freedom » or something of the sort.At some point, I might try again, using NonGuix ( https://gitlab.com/nonguix/nonguix ), but right now I'm not using Guix SD. Instead, I try to use Guix on small projects (like building websites using pelican), without going full Guix.What I'm most impressed with Guix is the time machine and Software Heritage integration, but it still needs a lot of improvement for developers, for example allowing to specify environment variables in manifest.scm files.	Reventlov	14.881603	8.435336	comment	4.0	18.0	1671966033	10.525134
34129069	I agree with all the points in this 	I agree with all the points in this post.And, I love NixOS. It's really special and very different than the other Linux I've used for 20 years.I have been curious to try Guix at some point. Does anyone know if there is a good comparison write-up?Also, can anyone speculate why the community has had such a hard time documenting this incredible technology? There are great posts like this from Xe: https://xeiaso.net/ but not generally getting started guides that are up to date. Why is this so hard to do? I mean, I'm not doing it because I personally feel like everything I do to get something working on Nix is a quasi-hack and not the standard and most up-to-date way to do it, so I'm hesitant to share. But, surely there are experts that like to write. Is this a problem with a simple technology 	xrd	14.891428	8.451165	comment	4.0	17.0	1671989362	10.536868
34389025	The nix part seems quite useful. It 	The nix part seems quite useful. It basically allows one to run a script in any language, with it being self contained and without polluting the global path with all kinds or runtimes. With the only user installed dependency being nix.Although I'm wondering about how fast it starts on the 2nd run after the dependencies have been download and how it deals with language specify dependencies, e.g. npm/pip packages. Read somewhere thst it can be a pain deal with those in nix.	nathan_phoenix	14.898509	8.463043	comment	4.0	23.0	1673787148	-9.422853
34514613	Is this basically Nix derivations, b	Is this basically Nix derivations, but with a more familiar syntax? (Dockerfiles)	teeray	14.89633	8.459448	comment	4.0	13.0	1674622818	-9.363629
34572400	> It's got some rough edgesI've rece	> It's got some rough edgesI've recently been looking really hard at NixOS as a possible next-step. (I use Manjaro and am particularly interested in ways to keep my Laptop and Desktop in sync)I've heard that the documentation can be pretty lackluster at times. Are there any other rough edges I should know about?	8jy89hui	14.898319	8.463221	comment	4.0	12.0	1675024316	10.529182
34654602	What's the best way to run software 	What's the best way to run software on an old Ubuntu system that I don't want to upgrade or run apt-get on, and I don't want to run stuff inside a Virtual Machine, and snap is broken, and docker as well? Compiling stuff seems too much trouble because of all the dependencies. I was hoping for Nix to save me here, but it only compiles for a specific libc version.	amelius	14.893959	8.4507265	comment	4.0	21.0	1675519851	-9.037926
34681840	> Fans of slimmer and systemd-less s	"> Fans of slimmer and systemd-less spinoffs of NixOS should perhaps also check out NixNGSo a primary difference from NixNG is that not-OS has a kernel and initial RAM disk, making it viable for running on hardware? The sparse README says it's for ""embedded"" purposes, but I'm struggling to understand the value of Nix here if the whole filesystem is read-only — you'd be working entirely off the RAM disk?"	trynewideas	14.897994	8.462818	comment	4.0	14.0	1675708086	10.564689
34960289	As somebody who was curious about Ni	As somebody who was curious about Nix, I was pretty turned off by my first exerpeince.I also found it humorous/ironic that for something that is all about like... deterministic and reproducible or whatever: https://github.com/NixOS/nix/issues/458#issuecomment-1019743... it touched the system in a bunch of places and was a zoo to uninstall	MuffinFlavored	14.898385	8.4638195	comment	4.0	12.0	1677523472	10.586595
34987112	My current objective is to make an e	My current objective is to make an easy and reproducible configuration + live image installer. I want to automate the whole process. As soon as I plug in the USB stick, my preferred defaults should do their work without user input.Although, I really don't like Nix as a language. I really wish it would have used something like GNU Guile. Searching deep for nuggets of information isn't nearly as painful as the language itself. I might adapt to it in time, but still.	coldblues	14.897088	8.461165	comment	4.0	22.0	1677699079	10.501746
35039999	After a lot of hesitation and energi	After a lot of hesitation and energized by a work incentive, I tried Nix last week.I've followed the official docs, had to resort on Google et al. quite quickly to solve mundane problems (installing a channel is not on the default path of the docs for the new learner), and after much wandering and trial and error, I evenrially went to the discourse and asked what I should use between flakes, nix shell or develop... Every single answer was 1/extremely informative and nice 2/ crystal clear that Nix was in a confusing, in-between stage in its life cycle.I very much appreciate the community and efforts but I work for a company that cannot afford the commitment that Nix requires right now. I will happily come back in 2 years and reevaluate.	ocimbote	14.898823	8.463938	comment	4.0	49.0	1678104048	10.5399885
35069552	Does anyone have some material recom	Does anyone have some material recommendation about using nix for building binary releases of packages / libraries?We have a Rust library that has bindings for many languages, most of which call the lib trough FFI. Is is worth investing time to set up flakes / nix builds that would be able to produce Java, dotnet, php packages for different platforms?Also, does there exists a opensource plan for cachix?	aerzen	14.898461	8.4632435	comment	4.0	13.0	1678286823	-9.334302
17083286	What GNU politics are you referring 	What GNU politics are you referring to that makes you reconsider using guixsd?EDIT: Also what's unsexy about GNU? I'm really curious.	jolmg	14.8802395	8.430872	comment	5.0	71.0	1526485393	10.469106
37666712	I want to like Nix but those install	"I want to like Nix but those installation instructions for macOS (and their removal friend) are just crazypants as compared to the `sudo mkdir /nix && sudo chown $USER /nix` from the Linux versionAnd that's not even getting into the ""waaa?"" from `du -hs /nix` although I am open to that being a misleading number due to hardlinks and other trickery that du may not correctly surface"	mdaniel	14.898754	8.464112	comment	5.0	17.0	1695767646	-9.345459
37666877	My issue with Nix is that you are fo	My issue with Nix is that you are forced to install packages in a global location. Why is it that every package manager assumes I’m an administrator on my machine?  Even if I am, how does it make sense to take over a global directory as a single user?	bshacklett	14.900976	8.4629	comment	5.0	22.0	1695768509	-9.145511
37821221	I sometimes just hope a new Nix but 	I sometimes just hope a new Nix but rewritten from scratch according to 2020s best practices instead of 2000s comes before too long.With a transpiler to convert Nix to whatever it uses. Nickel?	Aerbil313	14.898381	8.46454	comment	5.0	17.0	1696863963	10.579198
38020587	Nix seems great for terminal-based d	"Nix seems great for terminal-based development environments where starting a nix-shell sets up all the proper symlinks, env vars, etc. But how does this translate to IDEs like VSCode or IntelliJ?
 Like if you clone a repo with a shell.nix file, how does the IDE know to use that environment when you, say, use the File > Debug command, instead of executing whatever toolchain that happens to be on your path? Are there plugins available that enable this?
I realize you could just open a terminal within the IDE, start a nix shell, and run the equivalent run/debug/etc commands, but I am curious if anything exists to make the experience seamless to the user."	zaps	14.898495	8.464328	comment	5.0	17.0	1698283340	-9.380265
38265511	> Take a look at nix-shell scripts. 	> Take a look at nix-shell scripts. Much simpler, lightweight and faster alternative to Docker and friends for being able to build a project forever.As researchers using nix derivations to preserve usability of code meant to be archived with our papers, we found that it was not particularly effective for this task.  Even with nixpkgs pinning, our code failed to compile after only a few years.  Outside of nixos itself, it does not appear that the build environment is the same; aspects of compilation change, and we ended up needing to change compiler flags a few years later, while expecting that we might need to again at some point.Overall nix has been quite disappointing for us from an archival standpoint.	cge	14.897973	8.46209	comment	5.0	16.0	1699979449	-9.454809
38445781	Ask HN: For those who use Nix in pro	Ask HN: For those who use Nix in production, what is your experience like?	overbytecode	14.898433	8.463899	story	5.0	21.0	1701180320	10.564459
38499826	It's good for a c or c++ project whe	It's good for a c or c++ project where libraries are very environment specific. But most modern languages have their own package/environment managers which makes Nix redundant.	corethree	14.898076	8.462131	comment	5.0	38.0	1701535277	-9.400566
35173307	You misspelled Nixpkgs ;-)I'm kiddin	You misspelled Nixpkgs ;-)I'm kidding, of course, but IIRC pkgsrc (and alikes, such as APT) has a number of limitations, for example a very limited ability to have multiple versions of the same package installed, making it less than optimal replacement.(I believe a lot of people depend on ability to spin up a new version while the old is running, then do the cutover and shut down the old one after it's not is use.)	drdaeman	14.898722	8.464644	comment	5.0	18.0	1678907663	-9.30817
35209090	Doe nix work at all? Or is it just n	Doe nix work at all? Or is it just not actually functional on top of MacOS? I've tried a dozen times over the years and I've never gotten it working.Seriously, how is anything so hard to use still around after 20 years!	anarchogeek	14.897682	8.463009	comment	5.0	26.0	1679147070	10.595827
35384489	I guess you can use NixOS for your d	I guess you can use NixOS for your desktop but that's not the main focus of this distribution.It's more to create images to deploy server-side applications.	eloisant	14.897544	8.460181	comment	5.0	15.0	1680254178	10.54788
28241661	We're using Bazel + Nix together to 	We're using Bazel + Nix together to build Docker images containing Python apps and it's been working surprisingly well. Bazel builds the final image on top of a base image built by Nix (containing only Python sourced from Nix's repository). All hermetic and no Dockerfiles.I'm not a huge fan of Nix's expression language, but the system works well.	jvolkman	14.896206	8.457959	comment	5.0	31.0	1629425651	-9.357286
28242960	Nix is really cool for demos like th	Nix is really cool for demos like this, but seems to get complicated if you need to grab specific versions of a dependency.  At last check, that involved digging through the history of the package/channel, grabbing the hash of the package corresponding to the desired version, and then referencing the package by hash, all with basically no tool support?For system that is so proud of allowing multiple versions of dependencies to coexist, it seemed surprisingly difficult to actually find and use specific versions of a dependency in, you know, applications.	kristjansson	14.898641	8.463438	comment	5.0	26.0	1629437472	-9.365988
28532524	This is interesting. One of my major	This is interesting. One of my major complaints of Nix (of which i'm typing on, NixOS) is that my app states easily clobber each other. Ie moving between large nix changes can break, and even rolling back is broke, because the state is not managed in the same safe way that apps themselves are.If this solves that problem i'd definitely be interested in trying it out. As the only thought i had was manage to put 100% of my state into my nix config which seems.. a nightmare.	lijogdfljk	14.898116	8.462581	comment	5.0	18.0	1631659404	10.538317
13238419	What's the current position of Nix v	What's the current position of Nix vs Guix?I tried NixPkgs for a while on a mac about a year ago, but it wasn't really functional (I submitted a half-dozen or so bug reports, several were fixed, but I could see there was a long way to go towards a usefully working system...)	CJefferson	14.889361	8.44741	comment	5.0	21.0	1482425110	10.54343
27505908	It sounds like Home Assistant by def	"It sounds like Home Assistant by default pulls the (EDIT: Home assistant specified, not latest) version of the package from PyPI at runtime and loads it dynamically.The point of NixOS is reproducible builds, that is if you build a given nix environment you will always get the same code. Dynamically pulling from PyPI at runtime defeats that.The author doesn't want any way of downloading the code other than getting ""the supported version"" from PyPI, as they don't want to deal with support requests for issues that are fixed later. They are likely worried that packaged versions will become stale, and users will expect support for specific versions, which they are unprepared to offer.I think the offers from NixOS of having to enable config flags to get this enabled which make it clear it's not "	Macha	14.89847	8.464079	comment	5.0	23.0	1623693647	10.575313
12250418	"""From the outside, package managemen"	"""From the outside, package management has always seemed to me like a huge mess.""Compared to what?! There's no OS that has historically had better (or even close to as good) package management as Linux, either in the form of apt-get/dpkg or yum/RPM. Nix is probably better, on a couple of dimensions, but to suggest it was a mess before...well, I just wonder what you could be comparing to that would be better?"	SwellJoe	14.897623	8.46115	comment	5.0	24.0	1470685848	-9.130602
28656324	This mostly sounds pretty scary.Over	This mostly sounds pretty scary.Over flatpaks and snaps, I choose Nix. I really don't want to shove everything I do into per application containers.Actually, every single bullet point they mentioned is solved in NixOS.Distinct packages? CheckImmutable OS with trivial and guaranteed roll back? CheckDifferent applications using different libraries? CheckPipewire? CheckDifferent libgl support? CheckThe best part is that all of these is possible with the same exact tool. It isn't a hodgepodge of different tools to accomplish different tasks.	georgyo	14.896503	8.459872	comment	5.0	21.0	1632605152	-9.25573
22877867	Forgive me for using buzzwords, but 	"Forgive me for using buzzwords, but what's the ""cloud native"" story on NixOS? Can I easily create containers and update my orchestrator's deployment? Can I abstract things like AWS Lambdas into this immutable build structure?"	haolez	14.8980665	8.459945	comment	5.0	21.0	1586959901	-9.360631
23098154	If this is of interest, I’ve been pu	If this is of interest, I’ve been publicly releasing a series of educational Nix videos I originally recorded for developers at Shopify that you may also enjoy: https://www.youtube.com/playlist?list=PLRGI9KQ3_HP_OFRG6R-p4...	burke	14.898171	8.463335	comment	5.0	20.0	1588810860	3.3369079
23253564	Oh dear... so you have to write a Ni	Oh dear... so you have to write a Nix package (and learn how the language and package management work) just to modify global config files, instead of just editing them? That sounds like an absolute nightmare for a local machine, though possibly a great tool for automated systems.Also, if there's no /nix/etc... then what is Nix modifying? sshd (or any other more common program; I'm just using sshd as an example to understand the rest of the system) won't magically know to look at /nix/store/efgh5678-my-sshd-config-2.0/etc/ssh_config, right? I thought you'd at least need a symlink like /nix/etc/ssh/sshd_config to link to it. Unless you're saying Nix modifies your system's /etc/ssh/sshd_config directly and makes it a symlink to the immutable Nix store? In which case, wouldn't it just trample 	mehrdadn	14.897953	8.461645	comment	5.0	20.0	1590020312	-9.365001
23253734	What I'd really like to see is a rea	"What I'd really like to see is a realistic, end-to-end tutorial for either 1) deploying a relatively straightforward web application (like Dokuwiki or ZNC), or 2) setting up a basic desktop for day-to-day use. I feel like I've seen a lot of ""snippets"", I feel like I understand how Nix works and what it's supposed to be good for, but I don't have a coherent sense of the steps involved in actually using it for mundane things."	nerdponx	14.897442	8.460778	comment	5.0	19.0	1590022115	10.545995
23253856	Isn’t that the same goal as Docker? 	Isn’t that the same goal as Docker? I’m surprised there’s still no Docker base image for NixOS...	ironmagma	14.89688	8.459305	comment	5.0	19.0	1590023252	-9.380436
26688138	> It might be more fun and an intete	"> It might be more fun and an intetesting learning experience but also it's more complicatedI can't imagine anyone using both and thinking Nix is more complicated that Docker. And it's not close.> at least it's not that widely used like Docker is""Which has more users"" would not enter the top ten reasons I'd choose between tools like this."	bachmeier	14.896307	8.457272	comment	5.0	15.0	1617530248	-9.362109
27128554	Do we have a gui installer for Guix 	Do we have a gui installer for Guix these days? Last I checked, they didn't.	rataata_jr	14.878229	8.43049	comment	5.0	25.0	1620813588	10.545767
27130224	Questions for the GuixSD and NixOS u	Questions for the GuixSD and NixOS users:1) Are these kind of systems overkill for the desktop user?2) How easy is it to customize/tweak these systems in the manner that Gentoo does? So, building from source by tweaking the software options on build time?	alekq	14.890826	8.450033	comment	5.0	16.0	1620826997	10.537103
27294680	nix does all three of these, I think	nix does all three of these, I think.	fiddlerwoaroof	14.8967705	8.459739	comment	5.0	18.0	1622055761	10.531948
27369713	I recently moved my laptop, desktop,	I recently moved my laptop, desktop, and a few servers from Arch Linux to NixOS with flakes and home-manager. It is amazing! The complete configuration for all machines is in a single git repository, I can share configuration between them, and a `flake.lock` file guarantees all machines are using the same version of everything. No more trying to remember what command I need to run to install and configure software and no more copying files from `/etc` between machines. Best of all, if I need to rebuild a computer from scratch or buy a new one, just running `nixos-install --flake myrepo#mymachine` configures everything so I can pick up right where I left off with an identical setup.I also appreciate that a lot of frequently used configuration is easy to enable. For example, to install podma	nitsky	14.897776	8.461647	comment	5.0	113.0	1622647189	-9.370712
27370093	Long time Arch user here but I'm gro	Long time Arch user here but I'm growing more interested in NixOS by the day. I'm mainly “utilitarian” in my OS choice and other things being equal, Arch's AUR packages is what keeps me using it.How does the Nix ecosystem compare with AUR? Would you still recommend making the switch?	Jiocus	14.898194	8.46204	comment	5.0	22.0	1622648977	10.585074
27371394	Please don't recommend that people u	"Please don't recommend that people use nix-env. It's one of Nix's biggest footguns and a huge support burden for the maintainers.We've been actively trying to remove mentions of it from the documentation.If you want something ""installed"" use home-manager. If you just want something for quick dev use nix-shell."	bemeurer	14.899193	8.46507	comment	5.0	26.0	1622654490	-9.397977
27482274	There's a lot of bashing of Nix lang	There's a lot of bashing of Nix language, but frankly I don't think Nix really is a problem. The language is fairly simple.What might throw people off is that it is functional (which applies to Scheme/Guile as well).I think the biggest problem of Nix is that the area it covers is so vast and because of that it is suffering from not having enough people working on it, which also affects the quality of the documentation. I don't know where Guix is in this area.Regarding the language being dynamic, I recently found that there's work on making a typed language: https://github.com/tweag/nickelPerhaps it can solve this problem.	takeda	14.894757	8.456659	comment	5.0	25.0	1623481381	-9.568959
15478615	I can vouch for the immense improvem	I can vouch for the immense improvement Nix has made to my software development process. I use NixOS on my desktop and laptop. At the OS-level, it gets a lot of things right: reproducible, immutable system configs; lightweight containers; devops with declarative configs. At a software project level, nix-shell is an indispensible tool. Compilers and interpreters aren't even part of my system-wide config; instead each project has it's own shell.nix file that installs all dependencies I need on the fly without polluting system state or virtualization. Nix is a god-send, and the developers that contribute to it are nothing short of awesome!The area that needs improvement is the documentation. Once you learn the Nix language, reading the source code is pretty helpful, but it would be nice to ma	dhruvio	14.899271	8.464332	comment	5.0	60.0	1508093894	-9.382693
28817574	This will sound rude, but I'm more a	"This will sound rude, but I'm more and more convinced that people immersed in nix have never seen a real person in real life.defined boolean expression reference true.wat.I'm a technical person, and I have no idea what this is. And for technical people? Literally everyone says that ""nix is really hard to get started with"".nix and nix-related developers, please, please find some real people and talk to them."	dmitriid	14.898462	8.464705	comment	5.0	35.0	1633865198	10.568274
28818311	Crazy thing about NixOS is that it's	Crazy thing about NixOS is that it's so good, all the bad parts can be excused. I like to go on forums and complain about how the Nix configuration language is horrible, and there's not much documentation on how to get general things done.But that said, I'm still running NixOS on my servers. And no way that I'd ever go back to old fashioned provisioning scripts like Ansible.Just yesterday I had a problem upgrading a machine that's been running for 3 years without updates, and it wouldn't upgrade to the latest version of NixOS because of some certificate issue I couldn't figure out. Tried a couple things, nothing worked, gave up and destroyed the box. Installed the latest version of NixOS on it, pulled my configuration from git and it's back online exactly how I want it.It runs 5 websites i	tinco	14.897494	8.462113	comment	5.0	36.0	1633873080	-9.36216
28885445	I want to use NixOS so badOr what Ar	I want to use NixOS so badOr what Arch has become.But I want to believe	Stampo00	14.897448	8.461853	comment	5.0	23.0	1634356946	10.576504
28886030	I literally just gave NixOS a go day	"I literally just gave NixOS a go day before yesterday. The two things I noticed if you want to use NixOS as just a basic desktop setup was..1. It is simple and fast to install. People make NixOS feels like black magic. NixOS is easier to install than Arch linux. Just do 3 things. Partition your disk, create the nix configuration file and finally run the command ""nixos-install"" command. Let me explain with a lil more explanation:    a. Partition your disk with parted or cfdisk and mount it (mentioned in docs https://nixos.org/manual/nixos/stable/).

    b. Generate configuration file which has the biggest myth around it. My god, this is dead simple and could install it in 5-10mins after doing it just ONCE (This obviously excludes time needed to reading up about NixOS to be familiar with it,"	unsungNovelty	14.898418	8.463378	comment	5.0	29.0	1634366798	10.559202
29080006	I started using nix. It’s difficult 	I started using nix. It’s difficult and search results are not often helpful.	ronenlh	14.890104	8.438587	comment	5.0	19.0	1635854653	10.454354
29268331	> In short, GNU Guix is both a packa	> In short, GNU Guix is both a package manager you can use in any distro and a full-fledged GNU/Linux distribution, that is modern and advancedWhy not just use Nix, which is more battle tested?	srvmshr	14.88246	8.436329	comment	5.0	33.0	1637258033	10.500191
29304208	I think Nix's complexity is a failur	I think Nix's complexity is a failure. I love the concept of Nix, but I'll wait until there's something simpler to learn.	eternauta3k	14.898344	8.463925	comment	5.0	30.0	1637570484	10.551146
29304270	Does anyone else not use any of the 	Does anyone else not use any of the ad hoc package management with Nix? I exclusively use a declarative `config.nix`, with `sudo nixos-rebuild switch` every time I want to install a package.	enricozb	14.898823	8.463802	comment	5.0	15.0	1637571222	-9.396129
29304989	"NixOS claims to be ""reproducible"", """	"NixOS claims to be ""reproducible"", ""declarative"" and ""reliable"".
Yet there is no way of ""declaring"" which version of given package you want to install, which might be seen as hard requirement for some build to be ""reproducible"". You might need to stick to some old (but tested) version when building ""reliable"" system."	harvie	14.914105	8.479495	comment	5.0	19.0	1637577841	-9.366417
26005251	I'd like to try NixOS, but from what	I'd like to try NixOS, but from what I've seen, there are still a lot of issues trying to run it as a daily driver on a laptop.Has that been your experience?With Ubuntu, Debian, and even Arch, it's pretty much install and go.Also, it requires significant disk space, which I usually don't have on my laptops.	monoideism	14.896517	8.4595	comment	5.0	19.0	1612293403	10.552153
26328680	Just tried it on NixOS, had no idea 	Just tried it on NixOS, had no idea it was so fleshed out already! Thought it'd be full of bugs but was pleasantly surprised, it just worked. No issues with compatibility, extremely low latency and has JACK and PulseAudio shims, so everything works out of the box, including pro audio stuff like Reaper and Ardour. And thanks to the JACK shim I can patch around the outputs with qjackctl. This is compared to JACK, which I never managed to properly combine with PulseAudio.	pta2002	14.8982725	8.461787	comment	5.0	37.0	1614781665	10.539305
23394221	I wish I understood how to bring new	I wish I understood how to bring new things to Nix. Like, if I have some language or framework with a bunch of plugins and modules, and I have the freedom to bend the framework a bit in order to get it working with Nix, then what is the best path for doing that? All of the documentation I've read seems like it's been written by folks who deeply understand not just each different language, but also some sort of central Nix philosophy.	Kednicma	14.899057	8.464446	comment	5.0	35.0	1591122155	-9.341461
23528105	It's part of GNU [0] (which in itsel	It's part of GNU [0] (which in itself is a community), but GNU as a whole is additionally funded in part by the FSF [1] ; And then as always: volunteers. I suspect since Guix heavily utilizes Lisp quite a few Emacs lovers might watch Guix closely and even contribute ; students might pick GNU projects as part of a thesis et cetera.And I am unsure how 'active' development is, I have no insight, but it has been in existence for so long and still no one I know has ever used it. On the other hand NixOS[2] (or Nix as a package manager in similar vein) seems to be used heavily by some Power Users.[0] http://www.gnu.org/software/software.html[1] https://www.fsf.org/campaigns/[2] https://nixos.org/	artistsvoid	14.884561	8.437318	comment	5.0	27.0	1592233920	10.535924
30918962	I have the exact opposite experience	"I have the exact opposite experience. Nix is the best solution out there especially in the sort of situations that you describe.Nix provides a level of flexibility that other solutions simply do not offer. If a package in Nix doesn't fit your requirements for whatever reasons, you can create a modified version of a package with ease. For example, say that you need a version of Nginx built against a custom version of OpenSSL. You can do just that with a few lines of code:    let
      mypatch = pkgs.fetchpatch {
        url = ""https://example.com/bugfix-for-openssl.patch"";
        sha256 = ""..."";
      };

      openssl = pkgs.openssl.overrideAttrs (old: {
        # add build flags
        configureFlags = old.configureFlags ++ [ ""--enable-foo"" ];

        # add dependencies
        buildIn"	soraminazuki	14.898271	8.462666	comment	5.0	29.0	1649166725	-9.411344
30918889	The Nix crowd is becoming a lot like	"The Nix crowd is becoming a lot like the Rust crowd-- they hijack every conversation with ""Have you tried Nix""?Like you, I find Nix hard to use and the docs confusing (beyond trivial examples). The amount of time the Nix mafia spends proselyting could be better spent making better docs"	shantnutiwari	14.898701	8.464512	comment	5.0	55.0	1649166265	10.532586
30919828	Yeah, frustration on both sides here	Yeah, frustration on both sides here. On one hand, I can see how the nix evangelism can get annoying, especially here on HN. On the other hand the nix crowd is seeing a parade of ad hoc, informally-specified, niche implementations of way-less-than-half of nixpkgs. This is an important problem, maybe one of this most important problems the tech world is grappling with right now, and there is already a solution.The reality is that the docs are fine. The reference material is comprehensive, and there are some very good tutorials and introductory essays to get people started. The problem is that it's difficult. Nix is very, very different from what people already know, and it takes quite a bit of effort to learn how it works. Most people just aren't prepared to do that much work just to instal	cwp	14.89856	8.464376	comment	5.0	25.0	1649170574	10.504083
30921333	Here's a use case I pose every time 	Here's a use case I pose every time Nix comes up in these discussions.For $REASONS I want python 3.7.10, and the full scientific stack (numpy, scipy, pandas, numba, matplotlib, ...) at the latest compatible versions along with pytorch.  I don't mind waiting for things to compile. How, if at all, can Nix help me get into an environment that meets those constraints? Can it help without requiring me to find and copy hashes of things?	kristjansson	14.89849	8.464024	comment	5.0	16.0	1649177113	-9.401343
31392653	Ask HN: Why has Nix suddenly become 	Ask HN: Why has Nix suddenly become so popular?	brendanfalk	14.898647	8.463981	story	5.0	18.0	1652661878	10.55839
31530920	I was pretty excited about Guix beca	I was pretty excited about Guix because I find Guile more fun and less academic than Haskell (which Nix uses). Then I stumbled upon some of the extremist propaganda by one of the main Guile developers and promptly decided that it isn't for me.	orangebeet	14.88332	8.438233	comment	5.0	42.0	1653666193	10.526029
36079821	Nix is solving the wrong problems, a	"Nix is solving the wrong problems, and I'm dismayed that it is being adopted more and more to solve those wrong problems. The very concept of a ""development environment"" is indicative of broken build systems. Ecosystems like python are trying desperately to tame the insanity using venvs, while ecosystems like rust were built correctly from the start with Cargo. Neither of these benefits in the least way from Nix or the most popular alternative, Docker (except that both end up falling victim to the insanity of other ecosystems when FFI comes into play).What Nix could have been was a global un-fscked dependency manager, a la Portage but with Nix's special sauce for local environments -- thereby working around fundamentally and permanently broken ecosystems like C, which would be useful even "	firstlink	14.897853	8.463175	comment	5.0	18.0	1685074485	-9.382912
36362576	My biggest issue with Nix flakes rig	My biggest issue with Nix flakes right now is the way it integrates with Git.It insists on copying the entire repository into the Nix store (which makes all of its content world-readable!). Even if your flake.nix is in a subdirectory of a monorepo, the entire monorepo will be copied into the store every time!	lima	14.898735	8.467324	comment	5.0	22.0	1686944121	10.64215
36388172	Does anyone have any ideas on what t	Does anyone have any ideas on what the most likely outcome would be for NixOS losing the S3 bucket funding?	wesapien	14.89828	8.464324	comment	5.0	15.0	1687158595	10.580157
36388405	I agree with everything but the last	I agree with everything but the last statement. This all comes down to: do you consider memoization to be state.I predict people's answers to this question will come from experience with memoization. Here's mine: I kept trying to get nix to build tensorflow locally, so that I would get the avx512 benefits of the big, but gpu-less machine I had. I hadn't realized some other derivation had already downloaded tensorflow from online cache, so didn't have avx512 enabled. I kept making shells, trying tensorflow, seeing it doesn't have support. The solution was to tell nix to disregard the nix store, in order to force the local build. This experience has left me with the concrete feeling that the nix store is full-on state, and I the user must be aware of it.	henrydark	14.901151	8.467727	comment	5.0	19.0	1687160833	10.531382
36492747	I've attended a local CNCF meetup wh	"I've attended a local CNCF meetup where the chainguard folks presented Wolfi and their related tools to create container images and SBOMs.I was already skeptical of the product, having heard of it before. Unfortunately, attending that talk confirmed to me that they've just re-invented a severely limited version of Nix powered by yaml files that can output SBOMs in a standard format.Their software repository only has around 500 packages vs the 80k+ in nixpkgs. When I read ""Alpine Linux"", I was immediately reminded of its use of the musl libc which has endless DNS resolution issues[1][2] in and outside of Kubernetes, however, thankfully, it seems like they realized bundling musl was a bad idea and ship glibc instead.I'll stick to Nix and nixpkgs to build my reproducible container images with"	xnyanta	14.876853	8.440405	comment	5.0	31.0	1687873848	-9.367988
34122685	I switched to NixOS two years ago , 	I switched to NixOS two years ago , and have installed it on about 6 personal machines, both latpops and desktops.I don't bother with building a custom ISO.The way I do it:* Boot with the default ISO* Format the disk* Git clone my dotfiles repo with all the configs* Generate the hardware config and extend my flake.nix with the new machine.* Install with my dotfiles config* Reboot (aka profit!)I can complete the whole process in about 10 minutes (on a fast CPU and with a good network).Customizing the config up front, building the custom ISO , and writing it to a USB stick takes up way more time than just doing the above.	the_duke	14.898005	8.462754	comment	5.0	16.0	1671927627	-9.343212
34123139	Great, another Nix tutorial.Sounds g	Great, another Nix tutorial.Sounds great, isn't. A lot of magical thinking going on in that group.If you know anything about computers, you know for them to operate deterministically, uniqueness of the next potential state is an important characteristic. They use hashes (galois fields) that aren't unique to ID packages (by definition), and as far as I have been told (when asking about this), they don't do anything to check for collisions.Yes the probability is extremely remote, but probability isn't likelihood. What happens when a collision does occur, maybe the software won't work. So how critical is the software? Will it break the system? Can the system clean it up and recover (no, because its non-deterministic, more time).These are questions anyone worth their salt would ask when they v	than3	14.897324	8.460877	comment	5.0	43.0	1671931982	-9.264128
34303819	Nix is like sailing from Oakland to 	Nix is like sailing from Oakland to San Francisco on an aircraft carrier for your daily commute.Most stuff I care about factors out into .config which I turn into a git repo, push to GitHub and slap on a CI checks for secrets.Most engineers don’t need to forge a demonic pact with the Nix gods who demand I upend and replace everything from my  operating system to my wife.	unicornmama	14.8990135	8.464106	comment	5.0	19.0	1673216159	10.474993
34491184	Do you symlink your config repo to /	Do you symlink your config repo to /etc/nixos or something else?  So far, I've just been rsyncing my config repo folder after I modify it.	wingmanjd	14.899328	8.4646635	comment	5.0	20.0	1674492146	-9.253559
34819903	Does Nix still have that extremely s	Does Nix still have that extremely steep and high learning curve and huge time invest before you actually grok it? I'd love a Nix that is about as hard to use as homebrew, but no luck so far.	dividedbyzero	14.898083	8.463421	comment	5.0	16.0	1676561326	10.545858
34946301	That'd be really cool, one disk with	"That'd be really cool, one disk with:    - os/
      - archlinux/
      - ubuntu/
      - nixos/
      - fedora/
      - windows/
    - home/

And everything shared between every OS, specially $HOME"	capableweb	14.896249	8.457867	comment	5.0	19.0	1677425707	-8.700371
34987417	Any good resources on how to use fla	"Any good resources on how to use flakes?  I'm currently experimenting with having home-manager work via a flake but I haven't come across any good HOWTOs on common operations. For example, I'd like to  update the flake dependencies similar to how I used to use ""nix-channel --update"" to freshen the dependencies used by home-manager."	clem	14.898963	8.467328	comment	5.0	16.0	1677700514	10.623129
34990548	What sort of time investment is requ	What sort of time investment is required to get vaguely competent at nix?Mostly dabble in self hosting stuff and not sure it’s worthwhile.	Havoc	14.898486	8.464738	comment	5.0	15.0	1677718556	10.535528
35016101	How do Nix builds work?	How do Nix builds work?	todsacerdoti	14.8998995	8.465832	story	5.0	59.0	1677883865	10.523617
35039765	Nix is a build system + dependency m	Nix is a build system + dependency manager. So wouldn't that cover the use case? I know some packages use a Makefile with ocamlbuild or the like. I want less moving parts and less things to learn if I can.	toastal	14.897928	8.462197	comment	5.0	21.0	1678101887	-9.346631
35040723	I am working on the Nix project; res	"I am working on the Nix project; resolving this ""in-between stage"" is our highest priority at the moment. I'd like to better understand two independent things:1. What were the drivers and motivators for you to try Nix? What did you hope to achieve?2. Was the current experimental status of the new nix CLI and flakes the primary cause of the confusion?"	tomberek	14.898901	8.463572	comment	5.0	25.0	1678109521	10.56374
38657786	Nix is hard in the way that programm	Nix is hard in the way that programming is hard. Not everyone gets over the activation energy to be successful. The ones that do don't regret the effort. Nix is complex because the problems it solves are high complexity problems that other systems don't solve. Docker is not a substitute for Nix.The solution isn't to use a weaker tool, because the weaker tool doesn't solve your problem. It's not uncommon to see a programmer use a spreadsheet, but you wouldn't expect to see a programmer use a spreadsheet where a database is needed. And you don't see people trying to use garbage-collected languages to write operating systems, even though they are easier to use than C. It's perhaps inefficient when a tool is too powerful for what you need, but it's a fatal flaw if the tool you use is too weak 	smilliken	14.896779	8.459413	comment	5.0	25.0	1702668795	-9.373311
39005199	I've used Nix with Nix-Darwin on my 	I've used Nix with Nix-Darwin on my macOS machines for a couple years now. The primary benefit is that when I get a new macOS machine, it's only three steps to having ALL my apps, configurations, etc. exactly as they were before:1. Download Nix installer (I prefer the one by Determinate Systems)2. Clone my Nix configs (public, so I don't even need secrets like keys yet)3. Run `make`I then wait around 15 minutes or so (mostly network time) and I'm good to go.ONE BIG RECOMMENDATION: I don't like using nix-darwin to manage graphical apps directly. It's a bit awkward. But, you can use nix-darwin to declaratively manage `homebrew`, so I still get my graphical apps from Homebrew. The linked article seems to suggest ditching homebrew entirely but I found its best as a mix of both worlds with Nix 	mitchellh	14.896614	8.460176	comment	5.0	26.0	1705347865	-9.355273
15875334	I really wish Guix and NixOS had mor	I really wish Guix and NixOS had more usage in the industry.I am not sure if these are the projects that are going to drive the innovation, if they are only showing the way for the 2nd-generation functional package managers, or if this will just remain a niche forever.	muxator	14.888008	8.445679	comment	5.0	23.0	1512689135	10.535288
21306087	I don't know that much about Guix, o	"I don't know that much about Guix, other than ""super-free Nix with scheme"" (and the article wasn't particularly illuminating other than boiling down to ""Guix isn't really ready for most users right now""), but it's neat that there's momentum in the declarative OS-space. I hope that both Guix and NixOS keep growing and that more people start switching.After switching to NixOS, I'd find it very frustrating to go back to an OS with imperative-style package/service management. It's clearly the better way.A frustrating thing about NixOS--coming from Arch Linux and being used to the AUR--is that adding packages/updating packages can be a bit slow due to the sheer volume of PRs/Issues on the nixpkgs repo. There's always the NUR[1] but it hasn't picked up that much momentum yet (probably because it"	foopdoopfoop	14.889683	8.448215	comment	5.0	21.0	1571596614	10.551785
21648969	What are some 'Nix derivations'? I h	What are some 'Nix derivations'? I hate to say it, but I haven't heard of any, let alone used any.edit: I guess I know lots: snappy, dpkg, apk-tools, etc... I somehow think of brew as different from this list though. I find myself often wishing that brew worked on linux.	chrisjc	14.897704	8.461506	comment	5.0	15.0	1574870584	-9.342861
39106118	Oh man, i have a similar issue with 	"Oh man, i have a similar issue with NixLang. Though i know it's not ""implarative"". Many days i just want to write Nix in my preferred language. I wish Nix had made a simple JSON based IO for configuration, because then i could see what the output of something is - and generate the input state from some other language.Really frustrating. Nix works.. but i just don't see the value, personally. And this is after living on NixOS for ~3 years now, with 4 active Nix deploys in my house.. i just don't like the language."	unshavedyak	14.901143	8.467048	comment	5.0	21.0	1706029485	10.5322695
18364170	NixOS doesn't have directories like 	NixOS doesn't have directories like /usr/bin, /etc, etc. This defeats the traditional `make && make install` path; instead you have to build a nix package, and be familiar with stdenv.My concern is that it would be more difficult to install software that doesn't have a nix package built (in particular, from git repo trunks), and also more difficult to have confidence that the software I write would work on other Linux distros. For this reason I chose Arch over NixOS.In practice NixOS users find these to be significant issues? How do you deal with them?	ridiculous_fish	14.899876	8.465446	comment	5.0	24.0	1541175216	-9.378102
18908591	Guix seems interesting but I almost 	"Guix seems interesting but I almost stopped reading when I read ""Nix"". For all the benefits the Nix ecosystem provides, they haven't crossed the usability gap for me. First was naming their packages so confusingly, Nix the language vs NixOS vs Nix the package manager. Then there's the whole promise of it being usable from multiple platforms (""you don't even have to use NixOS, just use the package manager for awesome builds"") -- It was supposedly amazing for building some software packages, but the reality was always so sticky and never quite panned out.To be fair I have seen/heard lots praise it a lot for delivering stability to the servers they manage, but in this day and age, I'm not sure it's even worth trying to learn something to manage servers when the cattle approach is so much bett"	hardwaresofton	14.890458	8.44932	comment	5.0	30.0	1547521799	10.546412
29715032	"The obvious critique in 2021+ is ""Go"	"The obvious critique in 2021+ is ""GoboLinux is a great concept but doesn't Nix make it obsolete?"""	DarylZero	14.89627	8.460299	comment	5.0	59.0	1640708055	10.427104
29715486	I've only tried Nix once or twice, a	I've only tried Nix once or twice, and I'm left wondering: why don't they use a scripting language? Is part of the appeal that the Nix language is a functional language?	nusaru	14.898442	8.4639225	comment	5.0	32.0	1640710623	10.543494
30057639	> I'm going to keep using it, since 	> I'm going to keep using it, since I can't stand anything else after having a taste of NixOSThis is how I feel about NixOS. I like what it gives me but I don't really like much else about it. Unless something _just works_, you're looking at hours of debugging which will most likely lead to failure. Off the top of my head there are a couple of things I've hit a dead end on recently:- Packaging a Flutter desktop app because its build process downloads fonts from a URL and so makes the whole thing impure- Getting Blender's GPU support working, I think the same problem is causing Webcamoid to crash on launchPreviously I used Arch, which I loved, but it was all to easy to completely shaft my setup and not be able to roll back.	colinramsay	14.897444	8.460344	comment	5.0	23.0	1643033054	10.610575
30062033	I've tried to use Nix on and off for	I've tried to use Nix on and off for years. I always run into issues where I need to write some package and(1) I get mired in packaging low level transitive dependencies and things which seem like they should be easy end up being nearly impossible(2) Basic things like figuring out the argument types for a particular nixpkgs function take an insanely long time. It always involves grepping around the whole repo (nixpkgs is huge for those who don't know) for invocations to find the variable that gets passed into that function and then grepping around the repo for the function that produces that variable and so on until you get to the source type. Things have awful names and documentation is sparse.I'm a big believer in Nix as an abstract concept, but the execution has been a miserable experie	throwaway894345	14.899296	8.465137	comment	5.0	21.0	1643049969	-9.346236
30395099	This is probably because I'm on NixO	This is probably because I'm on NixOS but I have never used nix-env to install anything.I use nix-shell to test out a package, or use one that I only need temporarily.If I need a package for a particular build then it gets added to my config files, and I rebuild switch.If I don't want that package anymore, then I remove it from my config and do another rebuild.I've never really understood the use case for nix-env.	MarcScott	14.899546	8.465851	comment	5.0	39.0	1645255769	-9.39048
30416557	Nix Flakes: An Introduction	Nix Flakes: An Introduction	flurie	14.89901	8.467635	story	5.0	61.0	1645455551	10.616113
30692135	rpath is braindamaged; no program sh	rpath is braindamaged; no program should be using that, and a distro build should almost never be inserting such a thing into executables.I suspect that NixOS is playing with this in order to have a relocatable install: so that is to say, so that user can install NixOS in some subdirectory of a system running some existing distro. Any subdirectory, yet so that programs can find their libraries.If I were in this predicament, rather than perpetrating hacks to patch the rpaths in binaries, I'd fix the dynamic linker to have a better way of locating shared libraries. The linker would determine the path from which the executable is being run, calculate the sysroot location dynamically, then look for libraries in that tree. E.g. /path/to/usr/bin/program would look under /path/to/usr/lib and rela	kazinator	14.899232	8.463538	comment	5.0	17.0	1647380365	-9.282687
32693319	With Eelco as a cofounder of DetSys,	"With Eelco as a cofounder of DetSys, I feel really excited about where we're going here. I think the world is in many ways primed and ready for Nix, as long as we can help Nix ""meet them in the middle.""We're working on making Nix more accessible and producing good and usable, production-ready workflows so teams can just pick it up and go. I'd love to hear what y'all think, to help make sure we're going in the right direction."	grhmc	14.897924	8.462943	comment	5.0	31.0	1662139196	10.558492
32694377	> To seriously answer the question: 	> To seriously answer the question: is the Nix language required for the Nix packaging system to exist? Laziness is required, to some degree, but can the next iteration provide an on-ramp which doesn't involve learning a new lang and paradigm? Guix folks sure think so.I'd love to hear from someone deeply familiar with Nix and Guix about laziness.I'm deeply familiar with Nix and I've concluded that lazy semantics is absolutely critical for a configuration language.  It lets me refer to other attributes of my configuration from anywhere.  For example, I can refer to port number from my whatever service in my firewall.  Nix's system of overlays depends on laziness too to provide efficient late-binding familiar from OOP.I don't need to topologically sort the evaluation of the various inter-dep	rssoconnor	14.898409	8.463505	comment	5.0	18.0	1662144222	-9.343393
32705216	I abandoned brew for asdf.And then a	I abandoned brew for asdf.And then a new coworker introduced nix. The kind of issues I get with brew just isn’t there when using nix.I still don’t know how to write nix expressions, but I don’t really see any reason to go back to using brew.	hosh	14.898262	8.463431	comment	5.0	20.0	1662233285	-9.316706
32913320	"Hm. ""Install nix. --disable-shadow""."	"Hm. ""Install nix. --disable-shadow"". musl. 
Better run an old distribution. 
Anyone knows where can i find 386, 486 era computers besides ebay ?"	hulitu	14.897719	8.462846	comment	5.0	28.0	1663688630	-8.326892
32966915	Kind of disappointing that the Guix 	Kind of disappointing that the Guix pytorch package has no GPU support:https://guix.gnu.org/en/packages/python-pytorch-1.12.0/This makes me wonder if Guix is ready for the real world.	amelius	14.875771	8.425416	comment	5.0	41.0	1664056895	10.3570795
36805730	Nixhub: Search Historical Versions o	Nixhub: Search Historical Versions of Nix Packages	clessg	14.89877	8.464421	story	5.0	68.0	1689882274	-9.407452
36807104	It's interesting how Nix's selling p	It's interesting how Nix's selling point is that its non-standard file system structure allows multiple versions/flavors of the same package to be installed at the same time, yet if I understand correctly, it often has one version per package per Nix version? It's more like install multiple versions of the same package at a different time?Compare this to the model we have in Spack (which is inspired by nix), where there's one recipe per package for many versions, and you can define different build flavors, conditional dependencies (and conditional pretty much everything).The difference is that Spack has a dependency solver and Nix apparently does not?For example the curl package [1] has tons of versions, and its `tls` package variant has conditional values depending on the version:    vari	stabbles	14.89865	8.463867	comment	5.0	22.0	1689889113	-9.364779
37105808	It's fine, just be sure you know whe	It's fine, just be sure you know where your tools are coming from (use the which command a lot when unsure).  Nix might have more up to date or bleeding edge software, although since you're on arch in my experience nix can lag even arch by a little bit.Fully reproducible environments with home manager and nixos are neat but IMHO you can just use ansible to do the same thing on debian, arch, etc. if those systems have the packages you need.When you inevitably find software that isn't in nix (or are packaging your own software), be prepared to take a quantum leap in complexity as you now need to fully understand the nix language and its concepts like derivations.  This isn't necessarily hard but it is not documented well at all, and there are factions in nix at odds with each other (flakes v	qbasic_forever	14.898655	8.463782	comment	5.0	22.0	1691890610	-9.333816
37106743	My biggest problem with flakes is th	"My biggest problem with flakes is that it is too much added complexity for tiny incremental gains (as per my limited understanding, happy to be corrected). Not only do most users gain very, very little from it, it also deters users from using nix for two reasons:1) There is more to learn now.2) Split ecosystem.I'm looking to be educated, I've made contributions to nixpkgs (two ""mid-sized"" changes) but for some reason I couldn't bring myself to learn flakes ... Although that could have been because they were in limbo.I have to say though, nix is increasingly becoming a nerd thing philosophizing over minute issues rather than ""getting shit done"" to benefit the maximum number of users ... :-("	sourcegrift	14.899028	8.466915	comment	5.0	37.0	1691901614	10.609316
25025842	My experience with Nix and NixPkgs i	"My experience with Nix and NixPkgs is that 95% of the time it's fine. That 5% is a real PITA.I think nix isn't as useful for developers using it to setup their workstation compared to for operations setting up deployment environments. -- I like that I can just run ""nix --install myPackages"" and have the exact, up-to-date versions of software installed... but, it's not often that I need to run this. (The up-to-date versions thing is nice). -- Maybe this will be more compelling for stuff like GitHub Codespaces, and other ephemeral machines?(EDIT: and nix-shell is cool and very pure, but looks to me like people are just fine using images of development environments/toolschains with VMs or Docker. etc.).NixOS itself does feel very different to other OSs. I think people discount how much troubl"	rgoulter	14.898573	8.463585	comment	5.0	20.0	1604843869	-9.382195
32291946	> Honestly, doing that may be easier	> Honestly, doing that may be easier and a better option than using Nix packages in MacOS.Respectfully, I disagree. I’ve been using Nix on a couple of my Macs, including on an M1, and I’ve cutdown my dependence on homebrew almost to the point of its absence; I rely more on Nix packages, than on Homebrew packages.Having said that, I still wouldn’t recommend anyone using Nix; steep learning curve, and too many rough edges.	gurjeet	14.898989	8.4636755	comment	5.0	30.0	1659228458	-9.328175
32292196	Something not mentioned here is that	Something not mentioned here is that each and every single macOS update will break your Nix install too. This is, by far, the most frustrating part of using Nix on macOS.	jherdman	14.899725	8.465406	comment	5.0	16.0	1659230441	-9.340796
32358638	Nix is running face-first into compl	Nix is running face-first into complexities of build and package managers. As an observer it looks like Python's package ecosystem in particular is a giant mess. This affects Nix disproportionately because Nix actually integrates all package updates into one channel which nobody else anywhere does (and I guess package authors often don't care to fix), and it's even worse because a lot of projects use python as a build dependency (?!) which then cascades these issues even farther.I've been following this thread [1] about the issue which has valid interested parties including users, package authors, and nix package maintainers, and contains various proposals to solve or alleviate the problems.[1]: https://discourse.nixos.org/t/nixpkgss-current-development-w...	infogulch	14.900116	8.464863	comment	5.0	49.0	1659717996	-9.360547
32375111	Perhaps in contrast to most people's	Perhaps in contrast to most people's experiences, I haven't found Nix hard to learn. I think it really helps if you have learned Haskell before. Nix (the language) is really a simple functional programming language, but Nix relies quite heavily on functional programming concepts like laziness, fixed points, etc. A lot of things are underdocumented, but if you understand the Nix language well, it isn't hard to look up definitions in nixpkgs. I can understand that it is all very alien and overwhelming if you do not have a grounding in functional programming.The primary issue for me has been that Nix is a very deep rabbit hole. You can spend enormous amounts of time on making your configuration more functional and declarative. Pretty much like you can spend enormous amounts of time on customi	danieldk	14.898873	8.465034	comment	5.0	28.0	1659864687	-9.283504
32375770	I agree. At $dayjob, we are currentl	I agree. At $dayjob, we are currently employing a nix consulting company comparable to the one in the link. They are very vocal about all the great things Nix is able to do, but when we actually attempt to do something in Nix, we run into countless bugs and problems, including inaccurate documentation.Unfortunately many private FOSS enthusiasts do not know that reliability and documentation is a must for serious engineering environments.Plus, a coworker pointed out that while its supposed to be pure and functional, many recipes still basically wrap a shell script. So its not that far from the build system we already have...	blueflow	14.898464	8.463915	comment	5.0	15.0	1659873151	10.552254
32502622	Looks like this requires Docker to b	"Looks like this requires Docker to be available?Personally I've been making OCI images using Nix, just by running tar, sha256sum and jq:- We can get a Nix derivation's dependencies using `writeDependenciesToFile`- We can put these dependencies (alongside anything else we like) into an OCI ""layer"" using GNU tar: the `--hard-dereference` and `--mode=755` options work well, and we can include directories using `-C /foo --filesFrom=foo.txt` where foo.txt comes from `cd /foo && find . -maxdepth 1`, with the leading `./` removed.- A ""digest"" is just a JSON file like `{size: 123, digest: ""abc""}`, e.g. generated using `stat` and `sha256sum`- Those sha256sums can be referenced in a config.json, like `{""rootfs"": {""type"": ""layers"", ""diff_ids"": [...]}}`; along with the application-specific config (Ent"	chriswarbo	14.892974	8.455581	comment	5.0	23.0	1660775745	-9.340589
22295499	I've been using NixOS on my laptop f	"I've been using NixOS on my laptop for a couple of years now and I am still embarrasingly undereducated on how to do some of even basic things. I feel I still haven't fully grokked ""the nix way"". You will need to understand it pretty well to do even basic things like running specific versions of ruby or python with specific native libraries. I have spent a couple of hours here and there on nix pills but I think one really needs to set aside some concerted time to get into it properly. I consider myself fairly proficient with Linux in general and never had this kind of steep learning curve with other distros.(This is a not me criticizing NixOS, just noting that they do things very differently and you really need to invest some time and effort to start being able to solve your own problems r"	Legogris	14.898415	8.463367	comment	5.0	28.0	1581388642	10.5093775
22295816	I find it pretty stunning that Nix h	I find it pretty stunning that Nix has decided to drop support for OS X over ideological reasons like this. There are workarounds, but the reality is that they're upset at apple's decision so they just dropped support. We're not close to a year in to this these issue threads. Any software which would be so anti-user does not deserve to be used. Nix might be magical but that sucks.	anarchogeek	14.896649	8.459436	comment	5.0	16.0	1581392123	10.567711
22295621	There is a very good reason. Nix str	There is a very good reason. Nix strives to be reproducible. Thus all hardcoded paths in builds have to point somewhere. /nix was chosen.	costrouc	14.900654	8.468026	comment	5.0	24.0	1581389939	-9.403954
22296592	> Seriously, are we optimizing for t	> Seriously, are we optimizing for the right stuff here? I know Nix is doing package isolation with a programmable environment defined by text files, it's immutable and all. I get it. But we have alternatives for these problems. They do a pretty good job overall and we understand them.Setting up a development environment five years ago: here's a Word document that tells you which tools to install. Forget about updating the tools - good luck trying to get everyone to update their systems.Setting up a development environment two years ago: here's a README that tells you which commands to run to build Docker images locally which will build and test your code. OS X users have fun burning RAM to the unnecessary VM gods when they have little to spare to begin with because MacBook Pros. No reprod	solatic	14.895741	8.456905	comment	5.0	38.0	1581403587	-9.35556
22296729	> Today: Install NixI'm missing some	"> Today: Install NixI'm missing something here. (Disclaimer: I've just tried to understand the OP, I don't know all the details about what is going on there).The text starts with ""In my last post about Nix, I didn’t see the light yet."" ... Then it continues with ""A popular way to model this is with a Dockerfile."" So I have expected that the post will demonstrate how Nix can be used without docker... But then later:""so let’s make docker.nix:""and continues in that way. So there is some dockering involved? To this casual reader, it doesn't seem that using Nix allows one to avoid docker, as a technology, but just that some additional goal is achieved by using Nix over that.I just missed what was actually achieved, other than that the text mentions a few megabytes less here or there, of 100 MB,"	acqq	14.8970785	8.460269	comment	5.0	20.0	1581405912	-9.363082
39395917	It is inspired by Nix, but with a fe	It is inspired by Nix, but with a few key differences:- it is developed under the flag of the GNU Project, so you can expect the same standards of quality of both code and documentation as the rest of the GNU Project- it uses GNU Guile as the main language of the system instead of Nix, which (allegedly) allows you to extend or modify the behavior of the whole system- it uses GNU Shepherd as the service manager instead of systemdAll the main goals of the projects are pretty much the same.	bheadmaster	14.8939	8.455901	comment	6.0	38.0	1708085758	10.494008
39397607	For those that don't know Guix can b	"For those that don't know Guix can be used as:* a package manager on top of an existing Linux distribution (think apt or rpm)* a development environment (think Python venv but for any language)* a VM system (like Docker but declarative)* a Linux distribution (similar to Nix)It's a small and friendly community - we recently started an English-speaking online user-group:  https://www.meetup.com/guix-london/

Next meetup is Monday next week - please come along!I also did an Intro post to some of the advantages and challenges a couple of years ago:https://www.futurile.net/2021/09/26/guix-alternative-to-snap..."	slgeorge	14.878712	8.431192	comment	6.0	32.0	1708094345	10.513199
39549444	I have a feeling they wouldn't accep	I have a feeling they wouldn't accept bugs filed against NixOS, however, considering the huge number of patches applied.Which is a problem. NixOS remains by far the least aggravating OS I know, and... yeah. I wish there existed a desktop environment that played well with it.	Filligree	14.89854	8.463051	comment	6.0	21.0	1709215671	10.533208
36559929	Wayland on NixOS: Confusion, Conques	Wayland on NixOS: Confusion, Conquest, Triumph	drakerossman	14.896689	8.463017	story	6.0	37.0	1688291282	10.559127
36581196	I just gave nix a go and so far it s	I just gave nix a go and so far it seems great.But do you know, if they’re a nicer options finder? The one I found where you just search all several thousand options kinda sucks. I want to just see my package (say, ssh) and just the ssh options, but the results get littered with irrelevancy.	wredue	14.898543	8.463738	comment	6.0	19.0	1688435555	-9.426441
36670356	I'm currently trying (and failing, l	I'm currently trying (and failing, lol) to switch to Nickel Nix. Nix OS/Pkgs is just amazing, but i'm near being entirely done with Nix Lang. Lazy + Dynamic is just a recipe for an awful developer experience.As far as i can tell no one (thus far) has been able to explain a reasonable and concrete way to tell what any given variable is within a Nix source file. `nix repl` works decently for some cases, but many not - since it seems to mostly help you inspect the output of a Nix expression. So hypothetically it could work, but for any given variable you'd have to recreate the entire value/function/etc stack that produced that value in that state.All around after ~16 months i think i'm finally done with Nix. It's Nickel or the highway for me. Not that i even love Nickel that much, but it's th	unshavedyak	14.899171	8.465122	comment	6.0	28.0	1689012023	-9.383406
36691194	Nix has the same problem as Terrafor	Nix has the same problem as Terraform: it solves a lot of problems, but you have to 'live and breathe' their DSL.You're no longer learning/maintaining Linux - you're learning and maintaining Nix.	mobiuscog	14.898331	8.462318	comment	6.0	25.0	1689144655	-9.371729
36762620	Show HN: Nixhub.io – Find Specific V	Show HN: Nixhub.io – Find Specific Versions of Nix Packages	jljljl	14.898392	8.464353	story	6.0	29.0	1689621026	-9.415042
37105639	I'm still in the 'meh' camp for flak	"I'm still in the 'meh' camp for flakes. 
I use niv and it gives me enough usability.I find the need to include additional libraries to make flakes usable for some reason a weird hurdle I don't personally enjoy (i.e. flake-parts or systems)"	setheron	14.898938	8.46748	comment	6.0	27.0	1691888689	10.632219
37107129	I'm familiar with home manager (or a	I'm familiar with home manager (or as I like to call it, a hammer looking for a nail, that solves no problem). I don't think home manager has any relationship with flakes. Also, nix solves actual real problems, home manager doesn't. There are better dotfile managers. In fact, vim understands the syntaxes of a lot of dotfiles, with home manager, you even lose that.	sourcegrift	14.898916	8.467084	comment	6.0	23.0	1691906653	10.616
23528534	I fear it being 'GNU' they will shoo	I fear it being 'GNU' they will shoot themselves in the foot somehow. Bad marketing, unnecessarily geeky and childish nomenclature, GPLv3 and make it all free software, no proprietary drivers, hard to get proprietary third party software to install et cetera...'GNU Guix is a transactional package manager and an advanced distribution of the GNU system that respects user freedom.'[0]NixOS is developed using the MIT license and does seem to just want things to work.I am bringing this up purely as a question, is that fear justified or am I missing something? Would be glad for a take on this from someone who knows more.[0] https://savannah.gnu.org/projects/guix	artistsvoid	14.88222	8.436845	comment	6.0	22.0	1592235523	10.506535
19810233	I'd love to use Guix (or Nix for tha	I'd love to use Guix (or Nix for that matter) as my day-to-day system but (and correct me, if I'm wrong) the package maintainer story is a bit off putting for me. From what I've understood, packages are maintained in a public git repository (GitHub [0] for Nix and savannah.gnu.org [1] for Guix), which might be great if there are enough people submitting updates, but at least for critical system components there should be clearly defined maintainers to make sure all security patches are applied in time.Also I'm not sure how I feel about a core part of my potential operating system being hosted by a now Microsoft-owned company. On the other hand GitHub might be more reliable and better fit to server a huge amount of users than savannah...[0]: https://github.com/NixOS/nixpkgs[1]: https://git.	vbrandl	14.886735	8.441981	comment	6.0	29.0	1556817854	-9.029179
18155777	NixOS 18.09 Jellyfish Released	NixOS 18.09 Jellyfish Released	grhmc	14.898319	8.464085	story	6.0	73.0	1538841853	10.584525
18363499	How interesting that their URL is ne	How interesting that their URL is nearly, but not quite, nixos.org.	myWindoonn	14.898278	8.463674	comment	6.0	22.0	1541170913	10.553559
18379944	I've had the displeasure of being fo	I've had the displeasure of being forced to use nix and to me it seems like an overengineered piece of garbage. I don't see why anyone should use this vs competitors	r32a_	14.897154	8.462002	comment	6.0	33.0	1541393514	10.527734
30058217	It's been a while since I used NixOS	It's been a while since I used NixOS, but I never really had an issue with the language. What was frustrating was in package solutions there were all these special functions which as far as I can tell were undocumented and I couldn't figure out what they could do. So there was sort of this gap in terms of documentation between theoretical understanding and tooling/functional understanding which I struggled to cross.	jcranberry	14.898302	8.463811	comment	6.0	34.0	1643035679	10.5735
30058951	The other problem is the condescendi	"The other problem is the condescending replies from the higher tier nix folks while everyone else struggles. I almost think they garner a sadistic pleasure in watching everyone fail.After months of ""It's obviously this"" and ""you're not even trying"" and ""have you even looked?"" and ""there are plenty of examples out there already"" and ""you should start out by reading the introduction docs"" and ""you obviously don't know how functional languages work"", I just stopped bothering."	kstenerud	14.898606	8.4642105	comment	6.0	24.0	1643038771	10.544325
30393321	> what makes Nix powerful is that it	> what makes Nix powerful is that it is built on the back of an actual programming language. it’s fundamental to the whole thing.I think I agree with this.> the difficulty people have with it is that it’s functional, not that it’s nix.No I don't think that's the problem people have with it. Speaking for myself the thing that's hard about Nix is first and foremost the bad error messages and secondly the complexity of idioms used in nixpkgs. If you stray just a little bit from the happy path, you're liable to get a ton of very arcane problems, and the error message often has nothing to do with the actual problem because a lot of the idioms used in nixpkgs end up doing clever things with Nix that work well when everything lines up just right, but blow up when just a little bit is wrong.The fu	dwohnitmok	14.899444	8.465773	comment	6.0	30.0	1645231839	10.534872
30703665	I build container images using Nix (	"I build container images using Nix (actually OCI containers; I don't use Docker at all, although I think it can run OCI containers). Going through these points one at a time:> Use a smaller base image or libcBy default, Nix will build container images from scratch. No base image (although I guess you can add one as a layer to your manifest JSON, if you like).> Make the image context smallerNix tracks dependencies very precisely. Our container images will only contain the things we asked for, and their dependencies (transitively).> Fully minimize and tidy up image layersThis only seems relevant for imperative images, built ""from the inside"" (e.g. the talk about contents being ""overwritten""?)> Splitting up processes and services for breaking up imagesThe helper-functions in Nixpkgs contain t"	chriswarbo	14.872615	8.431802	comment	6.0	29.0	1647462698	-9.313901
17470891	GNU Guix and GuixSD 0.15.0 released	GNU Guix and GuixSD 0.15.0 released	severus_snape	14.881744	8.435574	story	6.0	115.0	1530880789	10.530769
21205479	NixOS 19.09	NixOS 19.09	trulyrandom	14.898492	8.463759	story	6.0	145.0	1570641919	10.567904
21331757	> Even when I was running Windows, I	"> Even when I was running Windows, I would wipe my computer every few months. I kept a ""Backup Image"" handy with all my settings already installed. I've spent far too many hours trying to undo damage I've done to my systems by installing random software from the internet onto my workstation; I've come to value the option of resetting my computer to a known, healthy state immensely.I often thought I was the only one. On Windows, macOS and even Ubuntu I was reinstalling my OS at least three or four times a year. I had install scripts and GitHub repos designed to reconfigure my machine after each install. The process always took a full day.Now I'm on NixOS. I have three .nix text files, .emacs, .bashrc and that's about all I need to backup in order to clone my environment on any machine.I've "	MarcScott	14.897607	8.460922	comment	6.0	34.0	1571812911	-9.337308
13238520	So scheme is not a purely functional	"So scheme is not a purely functional language - I take that to mean Guix will not be as well? It will be more like ""Unix as emacs""?Saddens me, because NixOS does all I want - except having s-expressions..."	hkjgkjy	14.884631	8.437889	comment	6.0	22.0	1482425861	-10.144865
12250215	Am I the only one who thought Guix d	Am I the only one who thought Guix did this better? Maybe it's just my freakish and unnatural love of parenthesis. Or my hatred of learning new configuration syntaxes (I just want to install packges, dammit! Yes, I enjoy learning new languages, but I need to get this machine up and running, and I don't want to learn your new programming language to do that)	qwertyuiop924	14.882254	8.435289	comment	6.0	85.0	1470683963	10.524612
12386612	Hardening Compiler Flags for NixOS	Hardening Compiler Flags for NixOS	ivank	14.898373	8.463125	story	6.0	113.0	1472518496	10.497839
35170508	Nix is the ultimate expression of th	"Nix is the ultimate expression of this abandonment of the concept of a desktop distro. It doesn't even try to have system libraries. Nix gives up re: future shock. The entire OS is just containers. I'm sure it works fine if you only ever use popular software but as someone that's constantly compiling and adding little .c programs from the 'net to my bin/ having to manually create and specify the entire ""system"" libraries set bit by bit every time I want to compile (or run!) something is no go. Great for business use as server, bad for human persons as a desktop."	superkuh	14.897478	8.460928	comment	6.0	26.0	1678896614	-9.368464
28590989	"First, you want a ""dependency manage"	"First, you want a ""dependency manager"". That's not what Nix is, clearly. Nix is a package manager.Second, to use this package manager, you first need to install direnv. How do you install it? with brew, a different package manager.Third, you have to learn a new functional programming language. Right. Because normally to put together a toolbox, I often learn to speak a few phrases in Swahili first.Fourth, finally, we get to install a simple Unix program, that any package manager could have provided.For the fifth trick, freezing dependencies, you first have to have all the correct versions of all the dependencies to do what you want. How do you establish the right ones? Manually. Just like with any other package manager that builds apps against a specific tree of build deps. ""Reproducibility"	throwaway984393	14.895951	8.458173	comment	6.0	65.0	1632121287	-9.343226
22858208	Since my move to nixos I've consider	"Since my move to nixos I've considered to reinstall my system every morning - since the entire system config is a few .nix files (+ home-manager). Haven't quite found the determinism yet. Perhaps I should do it tomorrow morning. :)edit: If I get three more upvotes I'll do tomorrow.edit: two more.edit: one more.edit: all filled up, it's going to happen!edit: Some more context. Although I have a laptop (a 13"" 2015 mbp) I don't bring it to work anymore, but have two desktops, one at home and one for work. All three run the same nix configuration, shared through a git repo. Whenever I discover there is some program I need I add it to the config and after switching machines run `sudo nixos-rebuild switch` - so the thing I added becomes available on the current machine there, too. All this just "	kreetx	14.897214	8.460279	comment	6.0	23.0	1586800787	10.529263
22877798	NixOS is good, if you found not enou	NixOS is good, if you found not enough documentation, try Guix and may be GuixSD. It uses guile (scheme) and has fantastic documentation. [1]Earlier Nix had additional NixOps but that too now is available with Guix deploy. I am waiting when I can run Guix within a lxd container, shepherd init still has some rough edges with LXD container init.Both are great piece of software and a new take on building OS and distribution. They are ahead of their time might take another 4-5 years before they become more mainstream.[1] https://guix.gnu.org/help/	dragonsh	14.893219	8.453204	comment	6.0	51.0	1586959566	10.54753
23252080	It's kind of a mess.Nix is a collect	"It's kind of a mess.Nix is a collection of tools and systems that together form a highly reproducible build system.Nix is also a declarative, largely pure and lazy programming language that you use to design and specify the different build outputs for the Nix build system.Nixpkgs is, more or less, the only project written using Nix (and a lot of shell). It's a collection of many thousands of ""derivations"", many of the things you'd expect to be able to fetch from brew or apt. Each derivation encodes the steps to use Nix (the build system) to construct that output.NixOS is a Linux distribution built atop Nix, Nix, and Nixpkgs. The basic claim to fame here is ""totally declarative system setup"" where you write all of the configuration for your system in Nix, using Nixpkgs and some other NixOS "	tel	14.898734	8.463761	comment	6.0	92.0	1590010526	-9.379745
33098699	> Should I use flakes or not? Every 	"> Should I use flakes or not? Every single library I find is a Nix Flake, but insists that Flakes are experimental.In this case, ""it's experimental"" should be read as ""maybe the team will decide to make changes"", rather than ""it's not going to work half the time"".e.g. one change they made was changing the property ""defaultPackage"" to ""packages.default"".(Anyway, the UX improvements from flakes are good, that once you've got the boilerplate, flakes are amazing).> Nix is technologically sound but is struggling organizationally from its explosive growthWell, that's the opposite problem of 'floundering'."	rgoulter	14.899078	8.467364	comment	6.0	29.0	1664991505	10.644543
33324339	I've written a rust version of asdf 	"I've written a rust version of asdf over the last few months, both as an exercise and to fix a few issues I've been having with it - like noticeably slower tool startup times due to the shims resolving the version (my version basically works like direnv under the hood and hooks into the shell directly) and me just wanting a single ""use"" command which installs a plugin, downloads the requested version and sets it as active. It works very well and I've been daily driving it for a while.Having the ecosystem of asdf plugins which are basically just shell scripts has been a huge boon. It's been a breeze to work with, and most of the plugins are well written.Now, I've been contemplating switching to NixOS, but most version managers don't work at all with it due to dynamic linking. I absolutely l"	happens	14.898815	8.463026	comment	6.0	29.0	1666655998	-9.364096
33816146	That last sentence is so true. I'm a	That last sentence is so true. I'm all in on Nix and I couldn't elevator pitch it if my life depended on it.	bsnnkv	14.898111	8.463633	comment	6.0	21.0	1669902587	1.0584956
26749155	The gotcha I have with Nix is it's t	The gotcha I have with Nix is it's too much abstraction.  I have to look at the upstream documentation, then try and map it to Nix's config syntax, then hope everything works.Also, regarding DevOps, the tooling around Nix makes it a little brittle for anything event based--rapidly changing configurations on the fly due to network conditions (Consul, Ansible, etc).  This is where configuration management is heading, and due to the static nature of Nix, delegating dynamic changes is hard/anti pattern.	candiddevmike	14.901898	8.466728	comment	6.0	19.0	1617967915	-9.384853
26749871	I tried Nix a few days ago. I set it	"I tried Nix a few days ago. I set it up on an existing Arch install. I installed a couple of packages with ""nix-env -i [package] and then tried to update them with ""nix-env -u"" as instructed in the official documentation: https://nixos.org/manual/nix/stable/#ch-basic-package-mgmtThis ended up breaking the entire install. After a few hours of troubleshooting I found that the reason it broke was that it updated itself from version ""nix-2.3.10"" to ""nix-2.3.10-x86_64-unknown-linux-musl"" because it saw that package's version string as a version bump. The suggestion in the github issue was to instead use an unofficial third party package for basic package management because this was a known, long-standing issue that is not likely to be fixed.https://github.com/NixOS/nixpkgs/issues/118481The expe"	jpe90	14.898529	8.464273	comment	6.0	67.0	1617972606	-9.373413
27081138	Patchelf is almost always broken, an	Patchelf is almost always broken, and when they merge fixes they don't release a new version right away. Between 2014-2019 running patchelf+strip would corrupt binaries, after the fix running patchelf twice on the same binary would corrupt it. And now patchelf doesn't work on all binaries, there's a bugfix merged https://github.com/NixOS/patchelf/pull/230 merged Nov 19, 2020, but no release since then.Also patchelf exposed a bug in ldconfig noted 11 years ago and only fixed in glibc 2.31: https://nix-dev.science.uu.narkive.com/q6Ww5fyO/ldconfig-pro...And currently patchelf still has a bug: https://github.com/NixOS/patchelf/pull/275Apparently elf files are hard.	stabbles	14.887975	8.438903	comment	6.0	25.0	1620423475	-8.703397
37665982	https://nixos.org/download.html#nix-	https://nixos.org/download.html#nix-install-macosThe homebrew team seems incredibly burnt-out, to the point of hostility. I've really enjoyed the nixpkgs community so far and encourage others to check it out; it hasn't replaced homebrew entirely for me (yet), but it's getting closer every day.	n8henrie	14.896373	8.459658	comment	6.0	61.0	1695763404	-9.309295
37771989	I know I'm a Nix elitist but I reall	I know I'm a Nix elitist but I really don't understand why people don't just use Nix for all their package management.	ar_lan	14.898143	8.463172	comment	6.0	48.0	1696454562	-9.341779
38015951	I don't understand :(Is nix like a n	I don't understand :(Is nix like a npm lockfile then, carefully controlling specific versions of packages and dependencies on a per... what, per-machine?... basis?Or is it kinda like a Docker container that can contain isolated programs?Or something like pyenv or nvm that can let you switch between version sets?	solardev	14.897993	8.461877	comment	6.0	18.0	1698256763	-9.378427
38057872	Sorry for being dense, but I thought	Sorry for being dense, but I thought one of the main reason for nixos's existence is reproducibilty. I thought they have these kinds of things solved already.I have only ~2 hours experience with Nixos, wanted to try hyprland, I thought it would be easier on Nixos since hyprland needs a bit of setup and maybe it's easier to use someone else's config on nixos, than on some other distro. Finding a config was hard too, found like 3 on some random github gists, thought there would be more... and none of them worked, at that point I gave up.	mihalycsaba	14.898335	8.463616	comment	6.0	39.0	1698582048	10.561205
31079886	Oh great! More indirection. Now when	Oh great! More indirection. Now when I want to deploy my web app I can check my private nixery.dev deployment is properly configured in Nix to build my Docker images so I can deploy my containers to the cloud so someone can access me Rest API. And the cost of guaranteeing builds will probably work? Running your own nixery service, learning Nix, and learning Docker. I would love someone to do a cost-benefit analysis of these sorts of tools against the time of using (and sometimes debugging) Make and/or Bash. I’m so cynical of Nix lol - no disrespect to the OP/Author, I just want to work on problems but most of my time is spent on building and deploying stuff.	exdsq	14.897141	8.460311	comment	6.0	32.0	1650344536	-9.371182
31142276	> Using Haskell as a base for the sy	> Using Haskell as a base for the syntaxI don’t really think this is a problem at all? I mean, at the particular design point the language occupies there are basically three possibilities:- Kind of like Lisp (parens everywhere, painful with pervasive currying);- Kind of like ML (var and fun everywhere);- Kind of like Haskell.Nix is chooses the last of those, and it does not have most of Haskell’s funkiness: no “alignment”-based blocks, no custom operators, no separate type sublanguage. The merged string interpolation / field lookup thing looks kind of funny, but has nothing to do with Haskell. The scoping rules for 'with' are weird, but, first, are not syntax, and second, have nothing to do with Haskell either.Really, if one were to design the language that fits Nix’s description—a dynamic	mananaysiempre	14.898552	8.456541	comment	6.0	82.0	1650789837	10.454978
31557956	Currently I use Ansible to deploy my	Currently I use Ansible to deploy my dotfiles, along with anything else needed to setup a workstation. I keep seeing people mention Nix. Would it give me anything that Ansible and Git can't give me?	francis-io	14.898513	8.463052	comment	6.0	26.0	1653910826	-9.468314
25538764	NixOS on ARM/Raspberry Pi	NixOS on ARM/Raspberry Pi	botayhard	14.898091	8.463121	story	6.0	116.0	1608927774	10.564447
25547499	For end user devices, I much prefer 	For end user devices, I much prefer Nix/NixOS [1] for this kind of thing.With Flakes [2] (experimental feature), you get full reproducibility.The documentation is spotty and there is a considerable learning curve, but I've switched to NixOS on my laptop and desktop early this year and am mostly very happy with it.That doesn't cover sandboxing though. I would actually agree that sandboxing / restricting applications (Mac OS style) would be sorely needed on Linux desktop.Flatpak and Snap are trying to do this. A much saner approach than trying to find or maintain up to date, trustworthy Docker files for applications.[1] https://nixos.org/[2] https://nixos.wiki/wiki/Flakes	the_duke	14.892756	8.445085	comment	6.0	28.0	1609027091	-9.205954
25719461	I played with NixOS and am willing t	I played with NixOS and am willing to admit that it was too difficult. It's probably great for devops, but it's just slightly too rigid for my own personal use.Let me give an example: let's say you want to use xmonad on top of Plasma. NixOS doesn't have any simple way to configure that. You have the mutually exclusive options for one or the other, basically.I know Nix is powerful enough to do this, if I wanted to go offroad and create custom packages/derivations, but that's the point where I am no longer happy with the utility/work tradeoff. It's what ultimately sent me packing back over to arch.When I came back to arch, I was left hankering for NixOS's declarative package management, if that could be somehow reconciled with the baseline arch package system. This led me to using the aconfm	chaorace	14.900465	8.465347	comment	6.0	24.0	1610311145	10.597147
36131210	Rde: A configuration framework for G	Rde: A configuration framework for GNU Guix [video]	akkartik	14.880064	8.430705	story	6.0	49.0	1685482545	5.942189
36239618	I much prefer GNU Guile over Nix. An	I much prefer GNU Guile over Nix. Anyone else? I saw some progress being made towards making NixOS compatible with other programming languages.	coldblues	14.891683	8.45151	comment	6.0	99.0	1686220092	-9.792622
36388108	"planning to learn/use ansible, 
wond"	"planning to learn/use ansible, 
wonder if Nix is ready to use ? have most functions/features ?"	nittanymount	14.898331	8.46357	comment	6.0	25.0	1687158016	-9.362535
36461317	"Looks nifty— basically it's the ""let"	"Looks nifty— basically it's the ""let me try that in a container first"" except on your live system with no setup to get it going.That said, as a NixOS user for the last year or so, I think I've gotten a bit spoiled by just not worrying about this kind of thing any more— eliminating the filesystem (other than home and var) as a big ol' chunk of globally mutable state is so liberating."	mikepurvis	14.897361	8.459451	comment	6.0	76.0	1687631083	-9.451519
36461865	I feel that one day I should write a	I feel that one day I should write about this curse that NixOS brings into your life when you start enjoying it : you cannot go back to different systems but at the same time you  (at least I) cannot vouch and recommend it to others as the languages and constructs (Flakes with a space or an utf-8 character in the path ? Here is a rabbit hole you can go down with) are just so byzantine and painful to work with but oh boy do they work... A crystal prison, nice but with sharp corners everywhere...	rvdca	14.898019	8.463346	comment	6.0	42.0	1687634578	10.63004
28900029	Can you do NixOS without systemd? If	Can you do NixOS without systemd? If not, I'd look elsewhere for the distro. Maybe Guix?	b9be520d93286	14.897702	8.461751	comment	6.0	69.0	1634506740	10.615546
34124414	I keep reading, this, and keeping be	I keep reading, this, and keeping being told this. Yet I switched every system over to nix and have found no thing but the best examples documentation and help from nix to do so.Within the span of a afternoon and a bit a reading I went from zero, to a script that lets me setup an entire dev systems with just a few commands in a vm, and or even on hardware.If anything the Nix documentation is just as good as every other thing out there. What is different is there are more than one way to do many things in Nix. This to me I think is the core of complaints. Its a language, and thus the language has may expressions that result in the same outcome.The second bit I think people struggle with is it is functional. If you look at Nix  complaints they appear to nearly be identical to that of Haskell	40yearoldman	14.898506	8.464337	comment	6.0	36.0	1671944135	-8.616515
34130585	Devenv: Compose a Developer Environm	Devenv: Compose a Developer Environment Easily for PHP with Nix	domenkozar	14.8984375	8.463633	story	6.0	61.0	1671997999	10.477919
34157505	Ruby-Nix: Generates reproducible Rub	Ruby-Nix: Generates reproducible Ruby/bundler app environment with Nix	thunderbong	14.897733	8.459712	story	6.0	107.0	1672201287	-9.365664
34491741	Just my two cents: Nix doesn’t guara	Just my two cents: Nix doesn’t guarantee “reproducible”, just “repeatable”. (I think it’s helpful to keep these technical concepts distinct, and to introduce the right terminology when teaching, since it makes elaboration easier in the future.)	jt2190	14.893361	8.45643	comment	6.0	27.0	1674493981	-9.404422
34518774	Not seeing the value prop over somet	Not seeing the value prop over something open like Nix, is there one?	intelVISA	14.898892	8.464855	comment	6.0	24.0	1674657768	-9.387323
34571981	I'm liking NixOS thus far. I've got 	"I'm liking NixOS thus far. I've got it installed on my personal laptop. It's got some rough edges, but the benefits for me outweigh the downsides. I really like affordances like ""nix-shell -p foo"" to just run a shell with the ""foo"" command in it for one-off usages, instead of slowly accumulating installed apt packages that I forgot why I installed them.Similarly, having any custom configuration inside of ""configuration.nix"" is way nicer to use than manually editing /etc/whatever.conf. I can have one place to store any custom hacks, with a nice comment as to why + git history."	gaganyaan	14.897816	8.462224	comment	6.0	22.0	1675021994	-9.375712
34751642	Recovering Gentoo user here. I have 	Recovering Gentoo user here. I have lost so many hours to the time sink that is incomplete system package updates on Gentoo. Moved to Nix and never looked back.On Nix either the install - and occasional build - succeeds and I enter the new environment, or it fails and I don't. In the worst case scenario where the build succeeds but something is funky I can just roll it back.Now I have all this free time to lose to the time sink that is learning how to package applications in the Nix language.	mrslave	14.897733	8.462333	comment	6.0	39.0	1676117273	10.539329
34880034	Honestly that’s incredible. Is there	Honestly that’s incredible. Is there anything close to it in the Linux world? Or I guess, I’m not an expert, that’s what NixOS is trying to solve?>Just because they never got wide adoption doesn’t mean they were wrongThis is actually something that I was thinking about recently, applies to a lot of topics not just OSes	haunter	14.897933	8.463022	comment	6.0	31.0	1676980599	-8.653231
34881624	> so the users environment is fully 	"> so the users environment is fully compartmentalized, declarative, and reproducible.I have a question about this, please forgive my ignorance. I see this statement repeated a lot about NixOS and I've kind of had some ""success"" in the comments section being ""critical"" / ""asking hard questions"" about NixOS.If I have a build script that pulls + compiles + validates with hashes/checksums say, Linux kernel, some userspace tools, init system, etc. for a boring ol' distribution like Alpine or Debian, why isn't that classified as ""reproducible"" the same way NixOS is?"	MuffinFlavored	14.897468	8.461847	comment	6.0	21.0	1676990112	-9.407903
34989044	The nix package search website is OK	"The nix package search website is OK, but it doesn't let you filter by the names of installed binaries. A lot of the time, you have a question like ""what nixpkgs attribute do i install in order to get the `python3` command"". I recently wrote a command line tool that allows you to do this. It uses the same elasticsearch index as the search website, but allows more powerful filtering. If anyone is thinking of getting into nix, please consider trying it out!https://github.com/peterldowns/nix-search-cli"	peter_l_downs	14.898498	8.463969	comment	6.0	32.0	1677708605	-9.344269
35040091	> Nix was in a confusing, in-between	> Nix was in a confusing, in-between stage in its life cycleThat's what everyone says about software that is just too complex.I tried Nix for the first time yesterday and had a similar experience - it was just too buggy, too brittle, and too difficult.  It's absolutely not worth it.  The software was built to solve a difficult problem, and maybe it does that, but it became a difficult problem in itself.For example, if you Ctrl-C while its downloading an update, you get in a weird state where nothing works.  Ok, so just uninstall and reinstall right?  Well, there's no uninstall.  You have to manually delete everything and remove the /nix mount.  Its 2023, why am I having to hunt all this down?  Sure, if you reinstall it it tries to do that, but it fails every time, or it just misses things.	shepardrtc	14.899278	8.46443	comment	6.0	29.0	1678104729	10.556171
37224760	I agree with @Infinisil's assessment	"I agree with @Infinisil's assessment[1]. This seems to summuarize my Nix experience in the last two years. So many products ""fixing Nix"" with little to no effort to upstream any of it. As a Nix consumer, it's frustrating because every one of these projects I chose to adopt is basically playing a huge game of risk. I've already had at least a couple of them deprecated/abandoned on me.Not saying it's a totally unique experience to Nix. It just seems especially concentrated at the moment.[1]: https://discourse.nixos.org/t/introducing-flakehub/32044/3?u..."	aliasxneo	14.898635	8.46438	comment	6.0	34.0	1692720630	10.5795555
24859159	I have been in a deep rabbithole wit	I have been in a deep rabbithole with Nix lately. It seems almost too good to be true. Declarative configuration, and with NixOps, declarative provisioning as well. Along with the other tools in the ecosystem, there is quite some overlap with some of the popular tools from Hashicorps and others. I am just beginning to learn the intricacies of DevOps, and Nix seems like a one-stop shop. What are the downsides of Nix?	sali0	14.898535	8.46366	comment	6.0	18.0	1603381075	-9.379171
32601682	Looks really good. A layer over Nix 	Looks really good. A layer over Nix that makes it tolerable sounds like a godsend. I’ve had a TODO item for “somehow use Nix for our dev env” at Notion since 2019, but I keep kicking the can down the road because its better to tolerate a 500 line setup script than learn all the Nix stuff. Of course we could use Docker, but then on Mac our dev process would be 3x slower.Congrats to Daniel and the team! Excited to see what’s next after this.	jitl	14.898071	8.4637785	comment	6.0	41.0	1661472378	10.543491
32695004	Having used Nix a bunch, the system 	Having used Nix a bunch, the system has been hard to use and learn in exactly the same ways that messy legacy codebases I've worked with have been hard—which makes sense since Nixpkgs is an absolutely massive codebase that's evolved over the years with very distributed development. People latch onto the Nix language and the paradigm because that's the most tangible difference but, everything else held equal, Nix + Nixpkgs would be no easier to work with if everything were in Python. (And, if my limited experience is any guide, would be worse with an ad-hoc DSL pretending to be Python à la Starlark!)This is a pattern I've seen over and over: if a project tries to do something different, the novel aspect gets blamed for issues that would not be surprising in any other context. When faced wit	tikhonj	14.905445	8.477434	comment	6.0	23.0	1662147924	1.4874476
32277995	Ummm, there is a general acceptance 	Ummm, there is a general acceptance of a newer version of LFS, version 3.If version mistaken, you must be thinking of just two distros.- NixOS, like totally tossed LFSv3 out, 100%- RedHat/Fedora, they are smushing both /bin and /usr/bin together.  This breaks any link with embedded world (and will come back to bite them when Intel ME becomes abandonware due to malware pervasiveness and their inability to keep those out.	egberts1	14.894418	8.451572	comment	6.0	28.0	1659107683	11.183496
32332410	It looks like nearly the same primit	It looks like nearly the same primitives with the same reproducability problems of every non-Bazel, non-nix solution. Why would one learn this instead of just using Nix to create images and getting more actual tangible benefits?	stoplying1	14.897773	8.463087	comment	6.0	33.0	1659537726	-9.469668
32376834	I agree. I'm actually trying a hello	"I agree. I'm actually trying a hello-world example from the tweag website, and it complains about ""gcc"" not existing. I try adding    buildInputs = [ nixpkgs.gcc ];

but it complains that nixpkgs.gcc does not exist. There's nothing helpful. I remember fixing this issue a month ago, and I have no recollection on how I did it."	baby	14.898261	8.463329	comment	6.0	30.0	1659883286	-9.37992
23526916	Guix Further Reduces Bootstrap Seed 	Guix Further Reduces Bootstrap Seed to 25%	rekado	14.879644	8.432011	story	7.0	195.0	1592226656	10.524464
20486711	While Nix's concepts are awesome, th	"While Nix's concepts are awesome, the implementation doesn't look so nice. Their ""language"" for writing Nix files [1] doesn't look attractive. Doesn't make me want to write a package description.Of course, it is better than languages with lots of brackets, but still not good enough.[1] https://github.com/edolstra/nixpkgs/blob/release-19.03/flake..."	codedokode	14.899095	8.465627	comment	7.0	43.0	1563640290	10.590387
20486462	Flakes – Proposed mechanism to packa	Flakes – Proposed mechanism to package Nix expressions into composable entities	based2	14.898964	8.466969	story	7.0	164.0	1563638011	10.612657
36262356	NixOS is not for the impatient. Main	NixOS is not for the impatient. Maintaining your system configuration is an exercise in software development like any other - if you lack rigor or discipline, your codebase will become painful to work with. Nothing is ever one shell incantation away - it has to be carefully architected into the existing system.That being said, once you get the hang of things, you reap amazing benefits:- You can clone your system to any machine, and immediately have an identical environment- You can share system configurations as code (declare the means for hosting a website in its repository, for example)- You can use a fully-fledged programming language to configure any part of your system- You can make use of an extensive ecosystem of easily composable, prebuilt NixOS modules- You can seamlessly integrat	turboponyy	14.8979435	8.462015	comment	7.0	76.0	1686336820	-9.343997
36262953	How do people deal with isolating sy	How do people deal with isolating system specific config in Nix? Like stuff for a particular graphics card?	skavi	14.897168	8.460767	comment	7.0	21.0	1686339218	10.465487
36458780	Why and how to add Home Manager to N	Why and how to add Home Manager to NixOS	drakerossman	14.899736	8.465391	story	7.0	66.0	1687615465	10.553804
28795432	> I run SwayWM on NixOS and using Li	> I run SwayWM on NixOS and using Linux any other way feels archaic now.I just use Mac OS X and don't spend hours configuring my machine / talking about it... lol	MuffinFlavored	14.894213	8.452081	comment	7.0	29.0	1633663731	-5.370126
28887046	> Love to see more adoption of Nix a	> Love to see more adoption of Nix and NixOS.I don't want a 'journey' to use my OS. I don't want to learn a whole new language and set of overengineered abstractions to solve what I see as, at most, 5% more of application installation problems that are already 75% solved by package managers[0]. If the Nix community wants more people using Nix, they'll have to make it more attractive for those of us who do not want to waste so much time needlessly learning new stuff to do the same things we're already doing.[0] which are already an overengineered and under-delivering solution in my opinion.	AnIdiotOnTheNet	14.898623	8.464116	comment	7.0	32.0	1634382643	10.510611
28899860	Framework + NixOS is the most exciti	Framework + NixOS is the most exciting hardware + OS going IMHO. If someone wants to do a crowdfunding or devpay or similar to make them work out of the box together, I will gladly donate or pay.	jph	14.897234	8.460868	comment	7.0	86.0	1634505295	10.449783
27575223	> I'm grateful to the nixos team for	> I'm grateful to the nixos team for being beating a trail thru the jungle here. Retrofitting reproducibility onto a big software project that grew without it, is hard work.Actually, it's Debian guys who pushed reproducible build hard in the early days. They upstreamed necessary changes  and also spread the concept itself. This is a two-decade long community effort.In turn, NixOS is mostly just wrapping those projects with their own tooling, literally a cherry on the top. NixOS is disproportionately credited here.	esjeon	14.899017	8.46427	comment	7.0	36.0	1624236874	-9.39506
33097511	Nix Team Creation	Nix Team Creation	slb	14.898019	8.462725	story	7.0	155.0	1664986932	10.55491
15846713	Nix-build freezes system on macOS Hi	Nix-build freezes system on macOS High Sierra with multi-user install	rnhmjoj	14.898897	8.46523	story	7.0	116.0	1512416026	10.633319
16440259	Since switching to nixos, my Python 	Since switching to nixos, my Python development environment couldn't be more satisfying.I use a default.nix file and a requirements.txt file and then with a single command I'm into a shell and virtual environment with all dependencies and packages installed, that I can easily transfer between machines.That is unless I want to use PyQt5.	MarcScott	14.898558	8.463226	comment	7.0	29.0	1519325709	-9.417063
16773875	Can someone explain what is NixOS de	Can someone explain what is NixOS designed for? (ELI5 please)	mirap	14.898408	8.463636	comment	7.0	36.0	1523027951	10.580797
17083989	Articles like this are pointless.  I	"Articles like this are pointless.  I get that guix and nix are neat, and I think that every single time something about one of them is posted, but I don't have the slightest clue how to use either one of them.Do you want to convince people that something like guix is better than docker?  Then take something that is currently distributed using docker and actually show how the guix approach is simpler.i.e. I have a random app I recently worked on where the dockerfile was something like  FROM python:2.7
  WORKDIR /app
  ADD requirements.txt /app
  RUN pip install -r requirements.txt
  ADD . /app

  RUN groupadd -r notifier && useradd --no-log-init -r -g notifier notifier
  USER notifier
  EXPOSE 8080/tcp
  CMD ./notify.py

How do I actually take a random application like that and build a guix"	justinsaccount	14.884286	8.438052	comment	7.0	34.0	1526489643	10.481865
17787815	An EPYC NixOS Build Farm	An EPYC NixOS Build Farm	nuriaion	14.898603	8.464167	story	7.0	109.0	1534587623	-9.383548
18187138	A packaging tutorial for Guix	A packaging tutorial for Guix	_emacsomancer_	14.881204	8.433486	story	7.0	130.0	1539192919	10.52927
18909040	I also started using NixOS around Ch	I also started using NixOS around Christmas time. I really love NixOS, but I'm at best lukewarm on Nix as a language. Honestly, though, the language is not my current concern. My current concern is actually more about compartmentalization.Being able to run `nix-shell -p` and get a shell with a program installed is super cool. Also, being able to add a package to the system declaratively is super cool. However, one thing I wonder about is workflows.For example, I have a lot of Jetbrains IDEs installed for various languages, but I don't want to pollute my global environment with tools, especially command line tools that pollute the PATH. Let's say I want to use Jetbrains Rider. I can easily start a shell with the dotnet SDK with `nix-shell -p dotnet`, then start Rider under that shell. This 	jchw	14.898214	8.462597	comment	7.0	29.0	1547530034	-9.365807
34102816	Nix on the Steam Deck	Nix on the Steam Deck	luu	14.898169	8.464198	story	7.0	183.0	1671776346	10.566852
27079950	Apart from adapting proprietary or h	Apart from adapting proprietary or hard-to-compile software to non-FHS distros like NixOS or Guix, what are the usecases of patchelf?	NieDzejkob	14.88845	8.441308	comment	7.0	30.0	1620415735	-8.513189
38057885	For those wondering : it should be r	"For those wondering : it should be remembered that the reproducibility of Nix / NixOS / Nixpkgs is only a reproducibility of the sources: if the sources change, one is warned, but it is not a question of the reproducibility of the binaries (which can change at each build). This binary reproducibility of Nix / NixOS / Nixpkgs is indeed not really tested, at least not systematically.Guix, Archlinux, Debian do the binary reproducibility better than Nix / NixOS / Nixpkgs.Sources :- https://r13y.com/ ( Nix* )- https://tests.reproducible-builds.org/debian/reproducible.ht... ( Debian )- https://tests.reproducible-builds.org/archlinux/archlinux.ht... ( Archlinux )- <a href=""https://data.guix.gnu.org/repository/1/branch/master/latest-processe"	Reventlov	14.898695	8.464004	comment	7.0	37.0	1698582136	-9.444163
38420624	Write Guix package definitions in a 	Write Guix package definitions in a breeze: Introducing Guix Packager	pabs3	14.880721	8.432227	story	7.0	156.0	1700995121	10.516208
15115309	See also:- Nix: purely functional pa	See also:- Nix: purely functional package manager that runs on multiple distros. 7/10 awesome ideas but difficult to work with.- Guix: like Nix, but with Guile Scheme, and different packages. Seems to require system-wide installation and a daemon; also burdened with “freedom”. ??/10 haven’t tried it, but sounds iffy.- Linuxbrew: Linux port/fork of the popular Homebrew package manager for macOS. 4/10 same problems as Homebrew itself.- Gentoo Portage Prefix: build and run Gentoo packages in a $PREFIX, without root and on many different OSs. ??/10 haven’t tried it.	jitl	14.893042	8.450056	comment	7.0	27.0	1503910789	-9.226606
15269360	NixOps – Declarative cloud provision	NixOps – Declarative cloud provisioning and deployment with NixOS	mrkgnao	14.898073	8.460898	story	7.0	248.0	1505652575	-9.365991
15269705	Is there good explanation anywhere o	Is there good explanation anywhere of the syntax of those files? I tried getting into nix multiple times and was always put off by the lack of understandability of this.	zeisss	14.896401	8.457655	comment	7.0	22.0	1505658053	-9.30473
15478778	My experience with Nix was a real pl	My experience with Nix was a real pleasure, and a complete failure.I set out with the goal of building a development environment for a software I was working on. I thought - Nix sounds like a better Docker, where it's possible to choose package versions independently of the rest of the system. It's perfect for testing!I found the package description language refreshing - it was powerful without getting too complicated. Over the course of a couple of days I was able to adapt a few packages and create my own too, with the build environment.It was almost finished, but the last problem remained: installing CUDA and the userspace portion of the Nvidia driver. It's not rocket science – I thought – all I need is a few .so's, it even works with Docker.Alas, after battling Nix for another couple of	rhn_mk1	14.897718	8.461232	comment	7.0	25.0	1508095457	-9.389198
23274749	Up until the release of Catalina, I'	Up until the release of Catalina, I've always upgraded to the latest version of macOS within a month or two. But some of the changes this time is really stopping me from upgrading.As of Catalina, there's no sane way to install the Nix package manager without losing functionality because macOS now disallows creating new files in the root directory[1]. Nix stores its packages in the /nix directory and it's not possible to migrate without causing major disruptions for existing NixOS and other Linux users. This is too bad, since apart from Nix being a nice package manager, it also provides a sane binary package for Emacs. The Homebrew core/cask versions only provides a limited feature set[2][3].[1]: https://github.com/NixOS/nix/issues/2925[2]: https://github.com/Homebrew/homebrew-core/issues/3	soraminazuki	14.898871	8.463692	comment	7.0	127.0	1590168985	-9.3309965
34121579	I also ran NixOS on my framework for	I also ran NixOS on my framework for a while. As much as I loved the idea of Nix, it's also incredibly hard - I work with Linux day in and day out for work, and finding my way around Nix, configuring new packages / basic features, etc. just took too long for me. The biggest upside I found was the incredible resilience, it was nearly impossible to break my installation.I gave up after a short while using Nix and switched to Windows. It's not perfectly tuned like a minimal Linux install might be, but all of the hardware features work as expected and it has a pretty good battery life.If someone can find a way to do something like Nix, but simple,   I'll be interested. Even if it's just a on-rails version of Nix.	Dedime	14.898171	8.462523	comment	7.0	41.0	1671919574	10.555264
34122501	I switched my personal dotfiles to n	I switched my personal dotfiles to nix recently, and the “poor documentation “ comment here really hits home.Trying to learn /how to use/ nix was awful. I found lots of guides, almost always incomplete, and oftentimes directly contradicting each other. It took me weeks to get a working build and much of that time was anything but fun.I like the outcome, and I’m glad I took the time now, but it was a slog that I don’t think I could really recommend to any of my peers.It’s too bad guix went full hardcore FOSS and refuses to support macs, because they seem to have better docs and using a language that I can use outside of my package manager makes a lot more sense to me.	tsuujin	14.893963	8.455981	comment	7.0	58.0	1671926244	10.56405
34302064	Nice hack, but I still believe that 	"Nice hack, but I still believe that home-manager [0] should be the way to go. It's the gateway drug to the Nix ecosystem and cleanly solves the composability problem which this ""one-size-fits-all repo checked out to root"" approach will have some trouble with.[0] https://github.com/nix-community/home-manager"	watusername	14.899936	8.465816	comment	7.0	50.0	1673205161	10.56143
34578262	> In contrast, we apparently have no	"> In contrast, we apparently have no ""package management theory"". We have not figured out the primitives required to express dependenciesWe have a good hunch. The basic theory behind Nix definitely goes in the right direction, and if we look away from all the surface-level nonsense going on in Nix, it's conceptually capable (e.g. [0]) of being a first-class language dependency manager.For this to work at scale we'd need to overcome a couple of large problems though (in ascending order of complexity):1. A better technical implementation of the model (working on it [1]).2. A mindset shift to make people understand that ""binary distribution"" is not a goal, but a side-effect of a reasonable software addressing and caching model. Without this conceptual connection, everything is 10x harder (whi"	tazjin	14.8970585	8.459833	comment	7.0	57.0	1675076895	-9.304088
14400697	GNU Guix and GuixSD 0.13.0 released	GNU Guix and GuixSD 0.13.0 released	rekado	14.880869	8.433652	story	7.0	100.0	1495543759	10.536852
30918008	Eventually someone will implement Ni	Eventually someone will implement Nix in Javascript, and then it will explode.	javajosh	14.899035	8.465583	comment	7.0	22.0	1649160895	-9.067272
31080493	I don’t know if it’s just because I 	I don’t know if it’s just because I hopped on the bandwagon in the past few months, but it really is starting to feel like Nix is gaining momentum.You can use it on Mac, WSL, Ubuntu multiuser, Docker, in an nspawn container, or through NixOS on a drive. You can build a livecd iso or a Raspberry Pi image from the same flake that you use for everything else.I work in embedded with Yocto  every day, and I can’t help but think that Nix is going to eat their lunch in the next decade.There’s really never been anything (usable) that’s like Nix. I think it’s inevitable that it takes over everything.	nickysielicki	14.898446	8.462957	comment	7.0	56.0	1650353593	10.546265
31142143	As someone who really would like to 	"As someone who really would like to have something like nix the thing that scares me away every time is the fact that the people creating this aparently did not think a lot about how to onboard users.And I don't mean a lack of documentation — what I mean is that the obvious decisions that have been taken (naming everything ""Nix"", using Haskell as a base for the syntax, ...) don't really fill me with confidence that in other spots decisions have been made in a logical and/or straightforward way.I am trying to have a less terrible experience with dependency and configuration management — but what I am not trying is making dependency and configuration managment my nerdy hobby. I have enough nerdy hobbies already.So in short: My worry is that the seemingly big investment in terms of time is no"	atoav	14.898138	8.463085	comment	7.0	106.0	1650787692	10.463918
31530538	GNU Guix System	GNU Guix System	pmoriarty	14.881201	8.433665	story	7.0	68.0	1653664448	10.52204
31553520	I quite like Home Assistant, I reall	I quite like Home Assistant, I really don't like their developers.https://github.com/NixOS/nixpkgs/pull/126326https://community.home-assistant.io/t/local-dns/178108	deadbunny	14.899339	8.46448	comment	7.0	27.0	1653863440	10.489439
39490381	Geospatial Nix – create, use and dep	Geospatial Nix – create, use and deploy today	l0b0	14.898109	8.462292	story	7.0	105.0	1708767858	-9.399133
36691062	NixOS Linux review, is it the altern	NixOS Linux review, is it the alternative to Debian and Archlinux?	grigio	14.897944	8.46204	story	7.0	27.0	1689143163	10.622827
24911158	NixOS 20.09 Released	NixOS 20.09 Released	aminechikhaoui	14.899138	8.464812	story	7.0	51.0	1603828720	10.579301
38989426	For an actually intentional, non-cur	"For an actually intentional, non-cursed version of this, see the nix-shell shebang [0]:>    #! /usr/bin/env nix-shell
>    #! nix-shell -i python3 -p python3Packages.pillow python3Packages.ansicolor
>    
>    # scale image by 50%
>    import sys, PIL.Image, ansicolor
>    path = sys.argv[1]
>    image = PIL.Image.open(path)
>    factor = 0.5
>    image = image.resize((round(image.width * factor), round(image.height * factor)))
>    path = path + "".s50.jpg""
>    image.save(path)
>    print(ansicolor.green(f""done {path}""))Just `chmod +x` and you have an executable with all dependencies you specify![0] https://nixos.wiki/wiki/Nix-shell_shebang"	pedrovhb	14.897205	8.460508	comment	7.0	23.0	1705230764	-9.418336
39067345	Nix Home Manager Option Search	Nix Home Manager Option Search	mipselaer	14.898943	8.464366	story	7.0	2.0	1705757062	10.57861
32637976	Stop Calling Everything “Nix”	Stop Calling Everything “Nix”	todsacerdoti	14.898516	8.464464	story	7.0	43.0	1661779814	-9.316376
32927592	I had an idea recently to try out Fe	I had an idea recently to try out Fedora silverblue with Guix on top.Silverblue gives you an immutable root filesystem, which is great for building a reliable and reproducible system, but it makes installing software more complicated. Containers are the main solution, and stuff like flatpaks and toolbox. That (mostly) works, but it’s a bit heavy handed and not without annoyances.But with guix, your packages live in the guix store, and don’t touch your os packages. So that seems like a good way to manage software on top of an immutable OS.Unfortunately when I went to try it out, I learned that the only way to change the default location of the guix store (since /gnu/store won’t work in silverblue, and Guix isn’t available as a package for fedora) is to build it from source... and then I ran	bogwog	14.884059	8.437217	comment	7.0	47.0	1663777958	10.503908
32505413	I like the blog post and I'm happy f	I like the blog post and I'm happy for the author, truly. But Guix doesn't sit well with me, and I rarely see this discussed:The Guix zealotry will be their undoing, and frankly this is where Nix shines. I can use Nix at work, at home, with family, with vendors, with binary blobs, on macOS. The community tries very hard to help.With Guix, sure, there's stuff like nonguix, but take a gander at this from the nonguix readme:> Please do NOT promote this repository on any official Guix communication channels, such as their mailing lists or IRC channel, even in response to support requests! This is to show respect for the Guix project’s strict policy against recommending nonfree software, and to avoid any unnecessary hostility.Guix has truly noble goals (in classic GNU fashion) but they're ultim	xyzzy_plugh	14.882997	8.437204	comment	7.0	58.0	1660798059	10.520434
22009794	I tried out Nix recently, with the i	"I tried out Nix recently, with the intention of using it to get declarative management of my user account.I discovered too late that Nix basically has no support for this.While NixOS has some very nice features for declarative setup, user environment management boils down to terminal commands for ""install package X, remove package Y"".The mentioned home-manager seems more of an awkward hack than a good solution in my view. It builds up a parallel package repository that you have to use besides the actual packages, and requires a lot of additional work if you want to customize something.In my understanding (possibly incorrent?) it is also not actually immutable, but just dumps down files into $HOME, losing the most interesting aspect of Nix.In the end I ditched it and stuck to my Ansible set"	the_duke	14.903454	8.468294	comment	7.0	28.0	1578650039	-9.247571
23377292	A Nix terminology primer by a newcom	A Nix terminology primer by a newcomer	signa11	14.896879	8.462235	story	8.0	204.0	1591010015	10.506494
20323594	GNU Guix package definitions for Gov	GNU Guix package definitions for Gov.uk software and systems	jboynyc	14.882994	8.43706	story	8.0	131.0	1561971460	10.553756
20780504	Mobile NixOS: The Present and the Fu	Mobile NixOS: The Present and the Future	buovjaga	14.898198	8.46372	story	8.0	97.0	1566583340	10.52758
39513427	I Use Nix on macOS	I Use Nix on macOS	frontsideair	14.8983555	8.462149	story	8.0	18.0	1708965727	-9.296206
36687862	It's actually annoying NixOS doesn't	It's actually annoying NixOS doesn't offer good default sandboxing. Sandboxing should appeal to the Nix crowd, but somehow it's not been integrated yet. AFAIK, GuixSD is working on sandboxing.In general, sandboxing is pretty important and an area were Linux distributions are falling behind macOS and mobile.	nextos	14.889265	8.447272	comment	8.0	31.0	1689112993	10.590324
37407758	Show HN: Nix Snapshotter – Native un	Show HN: Nix Snapshotter – Native understanding of Nix packages for containerd	hinshun	14.897874	8.460903	story	8.0	145.0	1694019269	-9.37441
25191466	I firmly believe that Nix (and/or Gu	I firmly believe that Nix (and/or Guix) are the future. I am going to use Nix as the keyword below, but Guix and Nix are so very similar that everything is also true for Guix.Snap, Flatpak, Docker, AppImage, etc are all very complex solutions that are actually quite painful to interact with. Nix on the other hand solves the problem extremely well. You can have different complex applications running side by side with very different dependencies trees and they will not cross paths.Every time I see a package being distributed as a Snap, I wonder why. These containered solutions are very complex, trying very hard to emulate FHS with mount namespaces, binding mounting tons of sockets around, and almost always end up mounting all of /home in the container. The don't provide much security, and qu	georgyo	14.896649	8.458906	comment	8.0	75.0	1606163788	-9.276149
38995069	Honestly, I don’t really understand 	Honestly, I don’t really understand the advantages (or the point of) NixOS over something like Docker.	thatxliner	14.943628	8.505706	comment	8.0	36.0	1705271267	-9.367543
32927469	Can anyone explain to me the appeal 	Can anyone explain to me the appeal of guix over nix? Is the learning curve any easier? I really badly wanted to like nix...but its just so strange and unconventional.Whenever I need a disposable environment I reach for lxc/lxd.	rank0	14.886538	8.443276	comment	8.0	44.0	1663777480	10.519982
32356406	Nix needs a new porcelain interface 	Nix needs a new porcelain interface for it's CLIs.Moreover, this post sums up one of my biggest issues stopping me from trying Nix for real again: https://ianthehenry.com/posts/how-to-learn-nix/ambiguous-pac...Finally, needing to rewrite everything in Nix is nice for poorly written configurations or undocumented packages in general, but seems redundant for well maintained software. Has anyone else come up with a sane Nix strategy to avoid the overhead?	nixpulvis	14.898408	8.463964	comment	8.0	54.0	1659709012	10.5616865
22008886	Home in Nix – dotfile management	Home in Nix – dotfile management	devhugo	14.897753	8.461417	story	8.0	122.0	1578639189	-9.310602
31076559	I would love to see NixOS-style decl	I would love to see NixOS-style declarative management brought to one (or more) of the BSDs.I'm currently building out a NixOS-based router to replace an old and dying Ubiquiti Edgerouter Lite. BSD would be perfect for the job but the ability of NixOS to have the entire system configured declaratively is enough of a killer feature to get me to use it over something BSD-based.if anyone is interested in pursuing something similar, I'm using [0] as my hardware base and [1, 2] as example configurations.0: https://amazon.com/QOTOM-celeron-Processor-Fanless-pfSense/d...1: https://francis.begyn.be/blog/nixos-home-router2: https://github.com/stanipintjuk/nixos-router	evil-olive	14.897614	8.46114	comment	8.0	36.0	1650316064	10.568831
36239195	The guide to software development wi	The guide to software development with Guix	pabs3	14.880603	8.432963	story	8.0	196.0	1686216036	10.530522
36265657	I can do (almost) all of these thing	I can do (almost) all of these things with a traditional Linux distribution, git, and a few scripts written in my language of choice, and I can do it faster.Nix seems more competitive with something like Conda or Spack than a traditional package manager like Apt or Pacman. Similarly, NixOS seems more suitable for deployment in containerized environments built on woefully outdated deps than personal dev setups with generally higher security requirements.I've experimented with both Nix and NixOS, and while I adore both the beautifully functional language and the endlessly helpful community, I haven't been able to justify the overhead of maintaining a nix.conf, flakes or no flakes, on top of everything else I need to do on my machines. I kept running into issues where some program I needed wa	cosmojg	14.898625	8.463515	comment	8.0	39.0	1686352733	-9.351495
36388114	> Nix, on the other hand, does have 	> Nix, on the other hand, does have a concept of state. If you make a one-line change to a 200-line Nix configuration, it doesn’t have to re-do all the work from the other 199 lines. It can evaluate the state of the system against the configuration file and recognize that it just has to apply the one-line change. And that change usually happens in a few seconds.The author seems to have some misguided ideas about Nix. Nix is not fast because it is stateful. It is fast because it is functional and reproducible, which allows for caching without compromising correctness. I don't want to split hairs, but referentially transparent caching like this is not quite what I'd call state.Yes, there is some statefulness in system activation, but this is not what makes Nix Nix -- quite the opposite.	hamandcheese	14.898314	8.463597	comment	8.0	121.0	1687158060	-9.369332
29286562	Is there a reason neither Guix nor N	Is there a reason neither Guix nor Nix have made an LTS-type repo?A rolling release seems at odds with the stability granted by reproducible builds.Maybe I have a miopic view, but what's nice with Ubuntu LTS is you know everyone and their mothers has built and tested their packages/libraries/executable against the lib versions provided by Ubuntu 18.04 or 20.04 or whatever. You also know those libs, at their given versions, will get patched as issues come up. If all your libraries are constantly churning then you have no idea of the quality of the libs you're linking to (and that lib's dependencies are also churning in turn). You can pin versions, but there is no guarantee what you're pinning to will be patched and fixed as issues come up	geokon	14.886211	8.44	comment	8.0	32.0	1637398023	10.531516
34334246	Or just use your existing language o	Or just use your existing language of choice, but incorporate Nix (which is based on the same idea), or go all-in and use NixOS (or Guix, very honorable mention) to get the same ideas all the way to the bare metal of the hardware (which IMHO is where the reach of this idea belongs, it is that good)For example, there are tools that convert traditional lockfiles to nix flakes.Nix is more intimidating than it actually is. It’s basically JSON with pure functions and some syntactical-sugar shorthands that end up being very nice.“Flakes” are basically lockfiles for Nix. Before Flakes, Nix still used hashed dependencies though. So everything you install with it is more or less guaranteed to also automatically pull in everything it needs to run, without conflicting with the needs of anything else.	pmarreck	14.898497	8.464952	comment	8.0	34.0	1673403284	10.593722
34959779	As a very nix-curious non-user, this	As a very nix-curious non-user, this looks like a good place to start; is it?I'm mostly interested in managing my home directory to start (replace gnu stow for dotfiles), but also to manage all my other software in a way that ports nicely between systems and OSes (skip over brew, flatpak, apt, etc.). I think this means home-manager, right?Should I just start here with Determinate Nix, or somewhere else?	claytonjy	14.89885	8.463254	comment	8.0	26.0	1677521127	-9.334762
35039490	In 2023, you shouldn’t be using nix-	In 2023, you shouldn’t be using nix-env or niv or shell.nix but rather just use Nix Flakes. It’s listed in the notes but this has long been where everyone has moved for a couple of years now (why it’s still “experimental” is a different question). If this is “Nix-powered”, why is everything done in the mutable shell instead of actually setting up the pure derivation so others can consume the build? Looking at opam-nix from Tweag might be a better route here. Also, why would anyone put a text editor in their devShell?Question to others: as someone with Nix experience and interested in learning OCaml but hasn’t quite bit the bullet, what does dune actually offer me if I’m using Nix to manage dependencies already? It feels like adding an unnecessary layer of LISP when Nix and opam should alre	toastal	14.898351	8.462788	comment	8.0	49.0	1678099411	-9.421244
16549144	Nixie-clock using neon lamps as logi	Nixie-clock using neon lamps as logic (2017)	Ivoah	14.884633	8.456194	story	8.0	119.0	1520557803	6.0829315
16773998	I was tempting to install NixOS on m	I was tempting to install NixOS on my PC but found out their installation method is fully involved of dozens of manual steps [1]. And I feel exhausted just reading their guide, so I don't want to try at all.1 - https://nixos.org/nixos/manual/index.html#sec-installation	a012	14.899696	8.464428	comment	8.0	52.0	1523028779	10.551275
39292985	Nix-shell shebang: run any script wi	Nix-shell shebang: run any script with arbitrary packages, self-contained	lambdaba	14.898867	8.463873	story	8.0	46.0	1707333781	-9.424721
18365337	My friend at work will never stop ta	My friend at work will never stop talking about Nix and NixOS. The entire world would be a better place if we all just stopped using Docker and Chef and switched to Nix. Every package you could want is in Nix, and it's all on Github. Anything your tool can do, Nix can do it better, except it's congruent instead of convergent.My rebuttal has always been that NixOS has been out for awhile and we still haven't seen mainstream adoption despite how supposedly great it is. I don't know of any high profile companies using Nix. It appears to be as hobbyist as Haskell.	ilovecaching	14.898018	8.462466	comment	8.0	27.0	1541182587	10.538194
18378997	Nix Language Primer	Nix Language Primer	binaryphile	14.900531	8.467666	story	8.0	122.0	1541379166	-9.422564
18379559	Does anyone know the rationale for c	"Does anyone know the rationale for creating Nixlang? Guix's use of Scheme proves there isn't a novel feature unavailable elsewhere, so it seems like a lot of wasted effort to implement a language that will likely only ever be used for one suite of programs. (And tooling; though almost none exists now, making the choice even more expensive.) I've tried to find one, but ""nix"" is a difficult thing to google for given the couple decades people have used it as a catchall term for unix and unix-like operating systems."	Harkins	14.896465	8.460548	comment	8.0	42.0	1541386886	-9.690563
18908658	I started using NixOS over Christmas	"I started using NixOS over Christmas and I have no trouble whatsoever with the language. It seems pretty lazy for the author to shoot Nix down on the grounds that DSLs are ""always a bad idea."" He even has the nerve to mention Mozilla as failing with XUL, while ignoring the success of Rust!Nix is lightweight, pure and maximally lazy. It's a simple DSL that evaluates targets -> derivations (build specs.) Considering it can build an entire OS with so few features, I'm not sure adding a numeric tower and Turing-completeness is really desirable.Also, I'm surprised this article doesn't mention Hydra. Reproducible binary caches and automatic testing are one of the key advantages of these systems -- does Guix use it?"	sterlind	14.887091	8.444191	comment	8.0	63.0	1547522860	10.519474
30060895	I've been using Nix and NixOS for a 	"I've been using Nix and NixOS for a while and I've seen four core advantages:1. Nix store: what the article covers: multiple versions of the same package, ""virtualenv for everything""... etc2. Reproducibility: because package definitions are self-contained, I can pin and reliably reproduce everything for my packages. And I do mean everything.3. Flexibility: Nix works for system packages on NixOS as well as user packages on any Linux or macOS. I've been sharing like 70% of my system config between Linux and macOS, and I don't know of any other tool that can do that.4. Programmability: package definitions and config are extensible and composable. Yes, learning an ad hoc language to do this is a pain, but once I learned it I got a higher-level and better-abstracted way to define and combine pa"	tikhonj	14.898183	8.462076	comment	8.0	55.0	1643045496	-9.344289
12631206	NixOS 16.09 released	NixOS 16.09 released	xaduha	14.898591	8.463855	story	8.0	151.0	1475527907	10.570923
13138040	List of companies using Nix	List of companies using Nix	iElectric2	14.898215	8.463355	story	8.0	70.0	1481281771	10.543057
27850261	I highly recommend staying away from	I highly recommend staying away from Arch and NixOS if you're not ready to commit upwards of 30% of your work and free time fixing and tweaking your box.I've tried both, Arch Linux will routinely hose your entire install if you don't carefully read the update notes every time (even if most of the time there is no call to action for you). Unless it has changed, this is still the expectation of users.NixOS promises stability, you just walk back to a previous version! Alas, i've had NixOS hose _all_ of my previous versions because of X server issues. Not only that, but the community of NixOS is hostile to getting shit done, if its not the NixOS way please stay away,	voxl	14.898518	8.463061	comment	8.0	33.0	1626383925	10.582171
35208773	I have been exploring nix for the pa	I have been exploring nix for the past few months and my experience with nix has been both exhilarating and frustrating, simultaneously. On one hand, I find it hard to imagine not using nix now, but on the other hand, I hesitate to recommend it to other colleagues due to its steep learning curve, ux issues and potential for footguns.I sincerely hope that nix community improves the UX to make it more accessible to new users. Though for those willing to invest time in learning it, nix is extremely useful and highly recommended.	amardeep	14.898669	8.465055	comment	8.0	63.0	1679144748	10.548579
28320754	It doesn’t matter which distro you u	It doesn’t matter which distro you use… unless it’s NixOS. Declarative operating systems are the future. NixOS is incredible. My whole configuration is a git repo. My servers have the exact same neovim/tmux/zsh config as my laptop. Switching between desktop environments couldn’t be easier. Messed up your system? Simply choose a previous generation on the boot screen. Seriously, try NixOS.	stelcodes	14.897985	8.461738	comment	8.0	37.0	1630011901	10.573263
22985621	I really want to try NixOS but the N	"I really want to try NixOS but the Nix language is just so damn weird... Why didn't they use a syntax people wouldn't have to actually read a tutorial to learn. E.g. C-style or Python-style? This article has a whole paragraph explaining `with`, but it wouldn't have needed any explanation if they called it `using` or `import`.Same for the script parameters. I have absolutely no idea what this does  { pkgs ? import <nixpkgs> { } }:

Why not:  function main(pkgs: Package = nixpkgs) {
  }

Or something like that.My second issue is that the files clearly aren't machine-editable. There's no sensible way to make a GUI that can edit your hostname if the hostname is defined in some Turing complete functional program.But it definitely beats the design of any other package manager."	IshKebab	14.899047	8.464406	comment	8.0	35.0	1587890638	-9.362378
23253664	This article is a good explanation o	"This article is a good explanation of how nix works at a high level, and I'm excited to see nix getting some really prominent support, but for some reason it never tells you what the point of all of this is, so I think many folks might feel turned off by it. In other words, I don't believe it ever compellingly answers the question that constitutes its title. The word ""package"" doesn't even appear until near the end of the article! This is probably a second or third article to read about nix rather than the very first thing that exposes you to it.The point of nix is just to create completely reproducible builds and package management, including support for multiple versions of packages side-by-size with no issues. It's sort of a next-generation package management system that tries to avoid "	nilkn	14.898948	8.464152	comment	8.0	64.0	1590021350	-9.364096
33418788	Hard User Separation with NixOS	Hard User Separation with NixOS	ingve	14.897828	8.462372	story	8.0	96.0	1667294470	-8.897119
33676080	this, devbox, and others seem to be 	this, devbox, and others seem to be alternatives to `nix-env shell` or the flake-based `nix develop`. spurred i think by a desire for better UX. these are excellent for any project off-the-ground enough that you’ve run `git init` or created a repo.the adjacent area i’m struggling with is the “i want to write a tiny program to verify some conjecture, and i’ll probably throw it away an hour from now”. think codegolf competitions, if you can’t relate.the environments i create for these follow similar patterns. it’s either python with numpy, pandas and plotly, or it’s Rust with clap and serde, say. i’d love a tool where i can just `cd /tmp/my-hourlong-project` and then `devenv python` to get a python shell that’ll have everything i often use (and probably more).hearing from people who use thes	colinsane	14.897232	8.461162	comment	8.0	30.0	1668900298	-9.367835
33762743	Show HN: MyNixOS – Create and share 	Show HN: MyNixOS – Create and share Nix and NixOS configurations	pveierland	14.898298	8.462617	story	8.0	200.0	1669554929	-9.340749
26749043	I spend a few hours looking at nix a	"I spend a few hours looking at nix about a year ago and found it impenetrable.I simply do not grok the syntax or what the functions do. I tried searching for the functions shown in the examples on the website to no avail. I searched packages, options, and even resorted to ctrl-f while clicking through the site ""documentation""...It sounds awesome, but its in dire need of some better documentation if it wants to be accessible, IMHO. I simply didnt have the patience to delve any deeper."	supermatt	14.898708	8.463572	comment	8.0	68.0	1617966982	10.538894
26749967	I wish Nix would just get rid of nix	"I wish Nix would just get rid of nix-env. It's not the way it's meant to be used, you should be using ""nix run"" or nix-shell for temporary usage, and home-manager for dotfiles and user dependencies. Using Nix like an imperative package manager is not really an improvement over existing ones, the declarative bit is where it truly shines."	Shoue	14.900537	8.466804	comment	8.0	49.0	1617973128	-9.428814
20720922	Nixery: Transparently build and serv	Nixery: Transparently build and serve containers using Nix	kimburgess	14.897285	8.4602585	story	9.0	192.0	1566000873	-9.373809
21201413	Guix Reduces Bootstrap Seed by Half	Guix Reduces Bootstrap Seed by Half	stargrave	14.878714	8.430914	story	9.0	284.0	1570612231	10.470738
30393052	  > Nix often scares newcomers and e	"  > Nix often scares newcomers and experienced devs alike, because it proposes a fairly radical overhaul to how we think about package management and how we run software in general.

I am not sure this is the main put-off of nix.Ideologically, I love nix. The syntax/language itself is a massive barrier IMO.I use Nix for personal projects, but I prefer the experience of Devcontainers. They're easier to understand and debug (for me).I'm watching eagerly the work being done by the ostree/rpm-ostree folks who are also trying to solve for a similar problem. Hoping to see something like ""Nix but with YAML/JSON"" come out of that.https://ostree.readthedocs.io/en/stable/manual/related-proje..."	gavinray	14.898562	8.463781	comment	9.0	90.0	1645229938	10.531948
27624200	Mobile NixOS	Mobile NixOS	SkyMarshal	14.898291	8.462566	story	9.0	97.0	1624571075	10.546989
22877355	My experience with NixOS	My experience with NixOS	matsutsu	14.901046	8.465648	story	9.0	289.0	1586956838	10.553671
23087197	A Gentle Introduction to the Nix Fam	A Gentle Introduction to the Nix Family (2019)	gurjeet	14.901747	8.467869	story	9.0	175.0	1588730005	10.556756
33131480	Show HN: Garnix, fast and easy CI fo	Show HN: Garnix, fast and easy CI for Nix	jkarni	14.897978	8.463382	story	9.0	120.0	1665228928	-9.405078
33816023	If you just want someone to shoot yo	If you just want someone to shoot you straight:Documentation and naming conventions for Nix are absolute shit across the board. This will get downvotes, and people will say I'm wrong, but I'm 100% right. Go see yourself, it's bad. Language is called Nix, OS is actually called Nix, package manager is called Nix, just the whole thing seems like it was written in 1 week by a squirrel with 12 hands and a sack of ritalin.That being said a lot of smart people here and in my peer group swear it's the truth, despite none being able to elevator pitch it.	aliqot	14.898491	8.464274	comment	9.0	43.0	1669901788	10.554569
34073950	Devbox 0.2.0: Automatic Nix installe	Devbox 0.2.0: Automatic Nix installer, plugins, and background services	todsacerdoti	14.898289	8.463306	story	9.0	60.0	1671576634	-9.279524
27128164	Guix 1.3	Guix 1.3	rekado	14.876197	8.428038	story	9.0	151.0	1620809291	10.536194
27128964	Obligatory comparison to Nix [1]:Pro	Obligatory comparison to Nix [1]:Pros:* Better, more coherent and unified tooling* Better docs* Built with LISP (edit: Scheme), A standard language that is not project-specific. Nix lang is somewhat quirky and takes some getting used to. It's pretty decent though for a narrowly focused domain language.Cons:* Tiny community that is much smaller than Nix. nixpkgs is the largest package repository out there, providing most software that you could want.* Really slow every time I tried it. Nix is written in C++ and actually performs quite well, even when building many hundreds of pacakges.* Not systemd based. Say of systemd what you will, but there is a reason almost every distro has adopted it. It's just better. Also: most Linux users are familiar with systemd tooling by now, so that makes ado	the_duke	14.897462	8.461953	comment	9.0	61.0	1620818039	-9.350201
37819217	I don't think a beginner should use 	I don't think a beginner should use Home Manager, because that's an extra layer on the already not-beginner-friendly Nix ecosystem.	jhvkjhk	14.898898	8.46439	comment	9.0	41.0	1696850761	10.557039
36075326	I think the best part about Nix is t	I think the best part about Nix is that it makes it super easy to get software into your development environment. This layered store is a pretty cool setup to make that efficient for Replit.Not sure how if Nix/Replit has the program you’re looking for? Or what package name to use to actually get the program you want? Check out my cli search tool:https://github.com/peterldowns/nix-search-cliEdit: I can’t help myself from ranting, it’s insane that I had to write this tool. Speaks to the lack of user focus in the Nix community. Even the blog post here doesn’t mention how to actually find packages to install!What good is a package manager that makes finding packages difficult? Who should be expected to tolerate such a thing?	peter_l_downs	14.897836	8.462563	comment	9.0	55.0	1685044489	-9.369634
28817876	A lot of odd Nix hate in here, or at	A lot of odd Nix hate in here, or at least extreme dislike.NixOS is so very usable. There are a lot of foot-guns but that's true of Linux systems.It takes some time to get comfortable with all the different ways to configure stuff. There's a new language, a new build system, a new Linux distribution.I've spent very little time relative to say, figuring out dpkg or systemd, or learning Bash or C or Perl, or learning the Linux FHS.NixOS makes running deterministic systems driven from a single configuration incredibly easy.Nix the language and tools allow you to build software deterministically and create environments where that software is available (e.g. on $PATH).Nix Flakes is an experimental feature aimed at bringing reproducible and hermetic configurations of dependencies into the fold (	xyzzy_plugh	14.898623	8.464206	comment	9.0	103.0	1633868937	-9.369157
28869161	Funny, I run Ubuntu on my laptop and	Funny, I run Ubuntu on my laptop and tried just today to upgrade it (since I'm on 18.04 and have been for a while). But no matter how I try, `do-release-upgrade` won't do the upgrade, complaining about third party repositories (removed all of them as a result), mismatched python versions, and a load of other issues. When I fix one, another one appears. Tried for 5 hours today and eventually gave up.On the other hand, my desktop machines run Arch and NixOS and I have never had any issues upgrading. Well, actually a few issues with NixOS upgrades, but it's so easy to rollback that I barely spend any time on it, and when I later try to upgrade again, everything just works.I wonder why Ubuntu/Canonical can never get their upgrade game to work properly. I've had similar issues with Ubuntu upgra	capableweb	14.896015	8.460186	comment	9.0	87.0	1634241383	-9.0916195
34134109	NixOS on M1	NixOS on M1	exists	14.897931	8.463407	story	9.0	225.0	1672023815	10.568281
34987042	Nix journey part 0: Learning and ref	Nix journey part 0: Learning and reference materials	rrampage	14.897519	8.462534	story	9.0	140.0	1677698799	-9.20859
36669436	NixOS is awful except for everything	NixOS is awful except for everything else out there. The learning curve is... steep. The documentation sucks. You have to learn a new OS because a lot of your prior Linux knowledge no longer applies.But, man, it's so slick when you get it working. It's so easy to understand your system and how it's set up. There's no weird stuff changing between updates that you don't know about. You don't have to merge new configurations. It's so easy to try something new without changing your system. Rollbacks are awesome. It's easy to move your config to a new machine or keep multiple machines in sync. My machines were constantly getting out of sync as far as packages, versions, config, etc. and it was a headache to maintain them all the way I like. Not anymore. It's so easy to maintain working NixOS sy	jm4	14.89858	8.463253	comment	9.0	68.0	1689009262	-9.319653
25190056	Not completely related but I decided	Not completely related but I decided on my latest GNU/Linux distro install that I much prefer the macOS model with slow updates for the major stuff with optional use of Homebrew and other updating mechanisms for the add-ons. One of the things that I got tired of was having to run updates on Fedora, Ubuntu, etc. So I decided to install Debian Stable with the Nix package manager as a sort of Homebrew replacement. This way I don't have to worry about my distro breaking, while I can get new stuff that is atomic and easy to remove when I want. I am curious if any Guix users do something similar.	mehrzad	14.888855	8.444458	comment	9.0	56.0	1606156964	10.602902
32693729	I installed nix on my Mac but quickl	I installed nix on my Mac but quickly backed out due to the complexity. I assumed the nix store would just be an ordinary directory with a tool for managing it, similar to brew. I discovered it creates a new Unix group, adds a separate APFS volume, installs a daemon. This was too invasive for a tool I was unsure if I even wanted to use, so I uninstalled it.What is the reason for all this machinery? I went with the recommended multi-user install, should I have just used the single user mode instead?	ridiculous_fish	14.898358	8.462503	comment	9.0	64.0	1662141267	10.307884
32375175	Guix interface is a bit more friendl	Guix interface is a bit more friendly by default, but once you enable the 'nix' command on NixOS, there really isn't much of difference in terms of basic CLI experience.The big different is the language and I think Nix wins here by a mile. Doing everything with Scheme just leads to layers of macro spaghetti that I really did not enjoy to dig through. Error messages that tell you absolutely nothing about what went wrong were pretty common. Nix has those too, but less frequently. Also with Nix you just use regular shell scripts snippets for the building the packages, Guix wants you to do it all in Scheme. Package selection on NixOS is much bigger.Another big thing, Nix has Flakes, which make it trivially to turn all your Git repositories into Nix packages. Your Git repository becomes essenti	grumbel	14.890012	8.449218	comment	9.0	74.0	1659865432	10.534491
20670835	NixOS can be helpful here, by making	NixOS can be helpful here, by making all of the non-user-specific stuff completely reproducible; combine that with Git versioning for dotfiles and a NAS for backups and large storage and your setup should be pretty easy to manage.	jchw	14.899305	8.461199	comment	10.0	38.0	1565561012	-9.422885
30918280	Based on other comments like this, I	Based on other comments like this, I gave it a try.Be prepared to sink dozens and dozens of hours learning the language, it’s features, and switching everything over. Be prepared to get stuck when you are required to use an old version of a language and things don’t install correctly — and sometimes blocked by nix itself from installing it. Be prepared to get stuck if you are not in the happy path. Be prepared to get lost in the sometimes scant documentation.I love the idea of nix, but it did not work for me except for the simplest cases.	qudat	14.899142	8.464737	comment	10.0	119.0	1649162831	-9.424356
31079144	Nixery – Docker images on the fly wi	Nixery – Docker images on the fly with Nix	_fnqu	14.894965	8.457286	story	10.0	201.0	1650334391	-9.370216
35688878	I use Nix and make(1) to develop	I use Nix and make(1) to develop	todsacerdoti	14.896574	8.458647	story	10.0	87.0	1682350265	10.44254
36073919	Super Colliding Nix Stores: Nix Flak	Super Colliding Nix Stores: Nix Flakes for Millions of Developers	osener	14.898352	8.464915	story	10.0	112.0	1685037624	10.575067
36173801	I'm curious. What would you do, host	I'm curious. What would you do, host on-prem? Even if I had the hardware, as a pure software person, I have no clue how I'd even start setting up a physical location to serve data on that scale. And even if the people on the NixOS team know, it sounds like their time would be better spent working on NixOS than building & maintaining a data center (even if small). Bare metal storage services seem to be on a similar price level as lower-cost cloud services like Cloudflare or Backblaze, but I'm very interested if you happen to know a cheaper alternative!Plus, even if you deal with the storage itself, how do you deal with serving the traffic globally? Optimally you'd want a distributed CDN, but that doesn't really sound feasible without the cloud. Would you still use a cloud CDN, or just serve	n2d4	14.896467	8.45931	comment	10.0	89.0	1685767640	-9.345696
36260626	NixOS for the Impatient	NixOS for the Impatient	yarapavan	14.898205	8.463795	story	10.0	169.0	1686329643	10.570057
36388323	Now that we have another Nix post, m	"Now that we have another Nix post, maybe someone can enlighten me about something I've been wondering about.I'm one of the maintainers of a popular django application. Someone made a nix package of the project, but we've now twice gotten invalid bug reports from people using the package because the package depends on ""django_4"" and whenever someone updates that nix package, the package for our project breaks.Of course we, like all other python projects, don't support using other dependency versions then the ones in the requirements.txt file. So when someone just uses a different minor version of django, stuff breaks. What's the disconnect here? Why does all nix packages that use django_4 need to use the same version, that seems super prone to breaking all kinds of stuff. Same for the other"	scandinavian	14.897804	8.461743	comment	10.0	99.0	1687160061	-9.361326
28885646	Love to see more adoption of Nix and	Love to see more adoption of Nix and NixOS.I started my Nix journey a little over a year ago, and I regret not having switched sooner. A package-manager that also ships an operating system that can be customized from the bootloader up, using a purely functional programming language is the perfect configuration management tool!It does have some rough edges, and I did lose some hair figuring things out early on, but it has been getting better with each passing day. Pretty much the entirety of my setup at home is now built by Nix and runs NixOS, including my Macbook Air (runs NixOS on ZFS), and two Mac-Minis that PXE-boot a custom NixOS served by a Raspberry Pi 4 running a custom NixOS configuration that also acts as a firewall connecting wirlessly to my ISP's router. The Mac-Minis also doubl	anandsuresh	14.8987055	8.463716	comment	10.0	80.0	1634360004	10.538646
29079840	I just reached the same breaking poi	I just reached the same breaking point -- and normally I am pretty sympathetic to software jank, but the maintainer of homebrew is so actively hostile and rude that my degree of empathy is significantly less -- and switched to Nix, which is quite good, conditional on three gotchas:1. Nix has very limited support for GUI applications of the kind that you'd find in `brew cask`. Not no support, some of them are there, but limited support compared to brew. If you use brew as an out-of-the-box install-everything setup like me, you'll not be able to replicate that easily with Nix.2. Nix can't currently build Swift applications because of some Xcode something I didn't fully understand.3. I found a small number of packages that are broken on Nix on my aarch64 / M1 MacBook Air (and marked broken, s	notafraudster	14.898113	8.461884	comment	10.0	63.0	1635853636	4.908142
29388505	Oh god I hope not. Having worked in 	Oh god I hope not. Having worked in > 100kloc nix environments I am completely turned off of the idea. I really really tried, I installed NixOS as my main OS and used Nix whenever I could to try and pick it up, but it's such a complex beast I felt it slowed everything down. Simple tasks that would take 10 minutes in Docker suddenly became DevOps tickets. I suddenly had to write bindings for tools rather than apt-get them in a Dockerfile. Build times in Haskell were bad enough but suddenly you had nix into the mix and I'd be wasting half a day as Nix built the entire world - solved with internal caching servers but have fun trying to work out how to push something to that correctly.There's a blog post that goes around from time to time about how a company have three risk tokens to allocate 	exdsq	14.898043	8.463043	comment	10.0	113.0	1638242005	-9.3975115
34491607	I wish guides like these contained s	I wish guides like these contained screenshots.Do people use Nix for desktop OSes? As a VM they SSH into? A collection of config scripts that they don't directly issue commands to?I certainly can't tell from a quick glance of this guide	lynndotpy	14.987978	8.55337	comment	10.0	36.0	1674493462	-9.282924
34679031	Not-OS – NixOS-based OS generator th	Not-OS – NixOS-based OS generator that outputs an OS with 47MB squashfs (2022)	peter_d_sherman	14.896437	8.459316	story	10.0	140.0	1675698297	-8.026265
37105742	Ive always loved the idea of nix, bu	"Ive always loved the idea of nix, but feel like I've read numerous, if not horror, at least uncomfortable stories about the actual real-world experience after the initial ""setup yak shaving"" is done - which is often exciting for ""us"", it's the new project problem solving part before it falls into the boring ""work"" part.If I have an arch system now, how useful is it to use Nix or Homemanager on a non-nixos linux system? I dont really want to dump a working system and duel booting always has whatever you need on the other system.Do you get anything when not using NixOS to manage everything? What good is it if half my system is installed by pacman, half by asdf-per-project and the rest by nix? Has anyone gone down this route? What is the actual lived experience of half-assing it?"	bongobingo1	14.897742	8.462263	comment	10.0	80.0	1691889872	10.537358
24799659	NixCon Live	NixCon Live	FRidh	14.897919	8.462395	story	10.0	148.0	1602847419	10.570258
25026661	Nix is a nice research project, but 	Nix is a nice research project, but after playing with it for ~6 months and contributing to nix-packages, I came to conclusion that (in my case) it's not suitable for production nor development, and now I manage my personal machines with a simple Ansible playbook.Main reason for leaving was that Nix package maintainers have to heavily patch all software. Packaging for nix is more like porting software to another operating system. Just check the amount of ad-hoc patches in nix-packages repo, and note that they have automated tools for patching the most common problems, so the problem is even worse. Now how about quality of these patches... I was able to merge some pretty large patches to nix-packages from an anonymous and sketchy-looking github account, and they weren't scrutinized much, be	k32	14.899305	8.464607	comment	10.0	56.0	1604851949	-9.386369
38995068	NixOS: Declarative Builds and Deploy	NixOS: Declarative Builds and Deployments	thatxliner	14.898033	8.462629	story	10.0	96.0	1705271267	10.406912
32960308	Guix for Development	Guix for Development	phlummox	14.881016	8.433466	story	10.0	133.0	1664003030	10.537553
32374686	I have never felt more dumb than whe	"I have never felt more dumb than when trying to use and learn anything nixos related.
Its awesome technology not meant to be used by humans. I am using cs.github.com,  open ai chat bot and usually like 4 tabs describing the same thing from different months using different commands + few versions of what seems like official manual while still having zero idea what I am doing. It feels more like I am reverse engineering something rather than using it.
There is something seriously wrong with what is acceptable ergonomics by whoever is designing the user interfaces. I really wish they fix all their problems because when it all works its awesome.I wanted to give guix a shot does anybody know if its any better ignoring their stance on non-free software as I think you can work around it."	Hnus	14.886186	8.443283	comment	10.0	125.0	1659858155	10.54692
16773824	NixOS 18.03 Released	NixOS 18.03 Released	jbboehr	14.898476	8.463507	story	10.0	141.0	1523027509	10.582224
28532182	> The host system and isolated envir	> The host system and isolated environments will all be managed declaratively and reproducibly using Nix, a purely functional package managerNix seems cool, but all of my forays into it have been so unpleasant as to be unworkable. It seems to work well enough if all of your dependencies are already in the Nix store and have been thoroughly tested, but as soon as one has to start writing Nix packages themselves it's a train wreck: the peculiarities of the Nix expression language, the chaos and lack of documentation in nixpkgs, the immense understanding one must have of the common low-level libraries used to create Nix packages, and you'll still spend tons of time trying to package obscure C dependencies with their own bespoke build systems.My constructive feedback is:1. Add types to the Nix	throwaway894345	14.89895	8.463997	comment	10.0	85.0	1631657566	-9.394135
33676338	Hi all, I'm the author of https://de	Hi all, I'm the author of https://devenv.sh, https://cachix.org and https://nix.dev.I've been part of the Nix community for more than 10 years and in the last 4 years focused on making it documented, simple and accessible for any developer.After building Cachix (where you can store any software binaries with a few steps) we realized that there needs to be an intuitive interface for crafting developer environments.I'm really looking forward what you build on top of devenv. We're only beginning to explore the area of what's possible, so please give as much feedback as you have.	domenkozar	14.896159	8.458117	comment	10.0	44.0	1668901892	-9.280976
33815632	I might want to try some new Linux d	I might want to try some new Linux distribution so I wonder: what doesn't work in nix? What are its weaknesses? What about devices with non-free firmware?	codedokode	14.897893	8.462321	comment	10.0	120.0	1669899334	10.543769
27344677	Nix solves the package manager eject	Nix solves the package manager ejection problem	rraval	14.898757	8.463988	story	10.0	68.0	1622472989	-9.348987
36388169	I've occasionally encountered projec	I've occasionally encountered projects using Nix, and I've casually browsed the Nix and NixOS websites, but I still don't have a clear idea of what Nix is.Is it a package manager? A build system? An operating system? A container platform? A sandbox? An automation tool?Which widely used, existing software tools is it analogous to?	p-e-w	14.898297	8.463976	comment	11.0	54.0	1687158565	-9.382742
36484609	The Magic Nix Cache, a GitHub Action	The Magic Nix Cache, a GitHub Action for speeding up your Nix workflows	biggestlou	14.89824	8.46331	story	11.0	195.0	1687807958	-9.6076765
28817693	What a coincidence. I was just askin	"What a coincidence. I was just asking about NixOS on Mastodon. Reposting (I'm on a mobile, little time to type):"" a question on dev environment isolation. Is either #NixOS or #GUIX usable as an OS for day-to-day use (coding, browsing, occasional gaming)? Or is it better to just use their respective package managers on top of regular Linux? Also, anyone here doing desktop #virtualization? Is there a sense of running a #VM per project? Is that a viable alternative to dual-booing Windows when I want to do some Windows dev or play a game?I'm planning to overhaul my desktop and am exploring options."""	TeMPOraL	14.895991	8.459021	comment	11.0	48.0	1633866923	10.556179
29304402	I've bounced off Nix a couple of tim	"I've bounced off Nix a couple of times and figured that the problem is that it was too different. A lot of Linux distros (especially post-systemd) have a fair number of similarities and it's pretty easy to translate knowledge between them. NixOS _probably_ works very similarly, but it's also got this additional declarative configuration layer on top, which is the point of using NixOS, and it's got its own special way of doing things.You can't translate Linux knowledge to a NixOS config directly, you need NixOS' documentation to understand the ""NixOS Way"" of doing things, and the NixOS way of doing things does not translate into other distros. And the documentation is difficult to understand and at times seemingly arbitrary.You have to commit to learning NixOS and understand that you are on"	indigo747	14.898565	8.463251	comment	11.0	87.0	1637572355	10.492484
29412971	Tvix: We Are Rewriting Nix	Tvix: We Are Rewriting Nix	robto	14.896921	8.461865	story	11.0	144.0	1638424267	10.573349
34119868	Setting up my new laptop: Nix style	Setting up my new laptop: Nix style	rc00	14.897495	8.462181	story	11.0	184.0	1671907996	10.588224
34490804	I read of Nix now and then. Seems it	I read of Nix now and then. Seems its more than a fad. Why should I invest time? What makes it stand out?	jhoechtl	14.89804	8.464082	comment	11.0	56.0	1674490930	10.595238
39004785	Going declarative on macOS with Nix 	Going declarative on macOS with Nix and Nix-Darwin	jonge	14.898232	8.463948	story	11.0	90.0	1705345834	-9.346888
30057553	"""""""The first is relatively simple: t"	"""""""The first is relatively simple: they developed their own programming language to do configuration, which is not very good and is extremely difficult to learn. The vast majority of people using NixOS do not understand the language, and simply copy/paste example configurations, which mostly works until you need to do something complicated, at which point you're completely high and dry.""""""Maybe this is nitpicking, but: the Nix language is about as straightforward as ""JSON plus functions"". Maybe that is difficult for people who haven't had an experience with pure/functional programming?Though, yes, the way Nix is used can be quite complicated/sophisticated. -- Even if all of Nixpkgs were translated to JavaScript, I think it'd still be complicated to understand. (Though I suspect using a mor"	rgoulter	14.900108	8.466578	comment	11.0	110.0	1643032405	10.498739
30393948	I love the idea of nix but the incon	"I love the idea of nix but the inconsistency and developer experience is terrible.   I want to suggest people use it but there is too many rough edges currently.For example, if you want to install a package the old way, you'll install it including the channel:    nix-env -iA nixpkgs.ripgrep


but then if you want to remove one, you don't reference the channel:    nix-env -e ripgrep

You have a similar issue if you want to use the new `nix` command.  To install a package you'll do:    nix profile install nixpkgs#ripgrep


but running:    nix profile remove nixpkgs#ripgrep


will do nothing.  It won't say ""I didn't remove the package"" or ""package not found"".  It just returns silently.    The only way to remove it is to point to the number from `nix profile history` or the actual path.It is u"	sontek	14.898123	8.4641695	comment	11.0	113.0	1645238557	-9.367486
30683537	The Nix hype machine comes up on HN 	The Nix hype machine comes up on HN every few weeks.As someone who tried Nix-- never understood what the big selling point is-- what can Nix do my existing tools can't? (without me spending 6 months)Nix can create isolated environments, but as far as I see, you can only install the tools Nix repo supports. And the official examples only give toy examples --here's a simple python script you can run with Nix-- but I can just run this simple script in a virtual env, or docker if I have 2-3 different scripts.What problem is Nix solving? What pain does it fix that is so important it would justify me spending 6 months on it?And then there is NixOS, which again, I have no idea-- I can create my own Linux distribution that is what, reproducible? Again, is this a real problem anyone faces (and that	shantnutiwari	14.89878	8.463777	comment	11.0	41.0	1647339251	-9.387476
33295459	If you look at my comment history, y	If you look at my comment history, you'll see I'm a bit of a broken record, but my records don't break anymore after switching to NixOS.  It was precisely the breakage after every upgrade that got me to try it.  With declarative config-based reproduceable deployment that can be rolled-back, the broken OS doesn't need to be a thing anymore.	colordrops	14.898506	8.463567	comment	11.0	60.0	1666409629	10.545405
37818570	NixOS and Flakes Book: An unofficial	NixOS and Flakes Book: An unofficial book for beginners (free)	beeburrt	14.898602	8.466388	story	11.0	242.0	1696843600	10.617236
38015106	Nix Survival Mode: macOS upgrades wo	Nix Survival Mode: macOS upgrades won't break Nix anymore	grhmc	14.898299	8.463914	story	11.0	117.0	1698253544	10.557026
38112416	Garn, a TypeScript-based Nix front e	Garn, a TypeScript-based Nix front end	jkarni	14.897698	8.461324	story	11.0	54.0	1698927249	10.55014
14618744	I love Nix. NixOS is my primary deve	I love Nix. NixOS is my primary development operating system. However, the Nix language itself is syntactically ugly, and this proposal makes it even uglier. Parentheses, sigils and special characters (esp. semicolons) are line noise — the less of it the better.Why they wouldn't take the most (syntactically) beautiful functional programming language out there — Standard ML? It would work perfectly for such a task. Or the second contender — Haskell. If C-like syntax is desired, the best contendant is probably Swift.I cringe every time I have to edit a .nix file (and I have to do it a lot).	atemerev	14.899027	8.466247	comment	12.0	108.0	1498222208	10.497314
31557739	This is a good one, I hope I'll have	This is a good one, I hope I'll have mine for that long (started 2019).Personally, I stopped worrying about dotfiles and GNU stow after joining the cult of Nix. While I gave honest attempt to everything else, Nix made it stick. Now I only have one single repo, where In write config for (almost) all of my applications in Nix, deploy them with Nix, rollback with Nix etc. Compared to hodgepodge of INI/YAML/TOML/XML/JSON/WHATHAVEYOU it is nice to to only have single tool to worry about.I wished Guix had the momentum and size of Nixpkgs. I'd much prefer a Lisp than the language contraption of Nix.	e3bc54b2	14.895677	8.457322	comment	12.0	78.0	1653908762	-9.58249
36362225	Why did Nix adopt Flakes?	Why did Nix adopt Flakes?	pushtheenvelope	14.898485	8.467564	story	12.0	121.0	1686942734	10.62894
28733156	Building with Nix on Replit	Building with Nix on Replit	amasad	14.898856	8.464216	story	12.0	82.0	1633217668	-9.427056
28884609	NixOS and the Art of OS Configuratio	NixOS and the Art of OS Configuration (2018)	behnamoh	14.897989	8.46242	story	12.0	168.0	1634344304	10.561223
34921920	Is NixOS a cult? Every time someone 	"Is NixOS a cult? Every time someone posts about Linux packaging, there's a ""you should just use NixOS"" comment.Although it provides its own solution to the Linux packaging problem, it's a single solution that comes with a whole load of baggage with it. It is not the panacea its proponents wants us to believe it is."	sph	14.897706	8.462546	comment	12.0	50.0	1677223667	-9.391093
34957953	The Determinate Nix Installer	The Determinate Nix Installer	popey	14.898485	8.462749	story	12.0	250.0	1677513797	-9.336213
37105885	The biggest show-stoppers for me wit	The biggest show-stoppers for me with flakes is:Building third party flakes takes forever since every flake uses its own version of nixpkgs. If you don't pin your third party flake urls they might also change under your nose as you run the same command again a day later.Flakes are coupled to git. You need to remember to stage changes whenever you do Ctrl+S in your editor before rebuilding. I've wasted more time than I'd like to admit wondering why what I'm building doesn't include my latest change.Flakes copy the entire directory into the nix store. This is terrible for mono-repos - and especially if it contains any large files. There is an issue about making the copying of the entire directory into /nix/store lazy - though this doesn't really address the problem. It just treats some commo	bergkvist	14.898805	8.46707	comment	12.0	48.0	1691891415	10.611255
25187576	GNU Guix 1.2.0	GNU Guix 1.2.0	rekado	14.880352	8.432599	story	12.0	237.0	1606144619	10.540057
38929543	Flakes aren't real and cannot hurt y	Flakes aren't real and cannot hurt you: using Nix flakes the non-flake way	PaulHoule	14.899085	8.46705	story	12.0	60.0	1704823556	10.650772
32169454	About using Nix in my development wo	About using Nix in my development workflow	Arubis	14.8985195	8.464083	story	12.0	119.0	1658338955	10.498719
30393175	I don’t want to be dismissive. “nix 	I don’t want to be dismissive. “nix but with yaml” is kind of like saying “rust but without borrow checking”. if you think you can approximate what Nix is capable of with YAML and be less complicated, I think you’ve missed the point. what makes Nix powerful is that it is built on the back of an actual programming language. it’s fundamental to the whole thing.the language itself is surprisingly simple. the difficulty people have with it is that it’s functional, not that it’s nix. I don’t think most sys admins are fluent in functional programming, so it’s a huge turn off and learning curve.if you approach it as three problems: learn the basics of functional programming, learn the syntax of the Nix language, and only then learn what a derivation is and how it works, it will be a lot easier to	n42	14.900069	8.467153	comment	12.0	70.0	1645230724	-9.376798
13436026	Distributing NixOS with IPFS	Distributing NixOS with IPFS	robto	14.898396	8.462651	story	12.0	241.0	1484836375	-12.17929
12250006	Purely Functional Linux with NixOS [	Purely Functional Linux with NixOS [video]	begriffs	14.897554	8.460697	story	12.0	169.0	1470682328	-9.2047415
38015788	Can someone explain what the advanta	Can someone explain what the advantage of Nix is over Homebrew? I hear some stories where brew broke something, but I've never had any issues with it.	behnamoh	14.897716	8.462566	comment	12.0	68.0	1698256180	-9.219937
38057591	NixOS Reproducible Builds: minimal I	NixOS Reproducible Builds: minimal ISO successfully independently rebuilt	CathalMullan	14.898398	8.463841	story	12.0	548.0	1698579665	10.558806
14618128	Typing Nix	Typing Nix	regnat	14.898543	8.464593	story	13.0	206.0	1498213336	-9.277683
34492401	I would love to see a discussion fro	"I would love to see a discussion from somebody who really likes Nix on why it isn't ready for prime time yet/just play devil's advocate aloud on why it isn't the greatest thing since sliced bread.I feel like I must not be doing anything ""serious"" enough to need package reproducibility at that high level. I'm aware of things like git checkout/tags, package-lock.json, Cargo.lock, Docker image tags.What is a real world use case where Nix isn't overkill? I've read toolchains but... nvm (node version manager), rustup. I still Rust on a machine once and I never think about it again.It feels like the Kubernetes of package management/build if you will complexity wise. ""Do we really need this or is it just what everybody else is doing?"""	MuffinFlavored	14.896941	8.460294	comment	13.0	69.0	1674496593	-9.360771
21305570	Attempting to Use GNU Guix	Attempting to Use GNU Guix	stargrave	14.8804655	8.432719	story	13.0	120.0	1571592431	10.532345
35208402	20 years of Nix	20 years of Nix	domenkozar	14.897773	8.463413	story	13.0	200.0	1679141399	10.550989
33675310	Can someone explain to me the advant	Can someone explain to me the advantage of using Nix over containers? What do they offer that are not provided with using docker or other container platform.	cphoover	14.895812	8.457887	comment	13.0	77.0	1668895706	-9.36722
32693894	Writing the packaging expressions sh	"Writing the packaging expressions should not be harder than writing the program, for the average developer. The average developer doesn't know FP, at this point. Nix needs:1. Approachability for those not indoctrinated in lazy, declarative, functional programming (i.e. Haskell); nope, Nix Pills are not sufficient for the average dev2. Editor tooling to help guide the writing of expressions (just as anyone learning C# or Rust can use LSP); a better type system for Nix would help here3. Better documentation for practical things like ""Using Nix to manage the dependencies and package a C++ program using Meson"", rather than having people piece this together from a bunch of disparate docs4. A much better CLI UX than `nix-env -qa` and the like (this is ongoing and experimental, but even that brok"	Jeaye	14.899225	8.463014	comment	13.0	72.0	1662141946	-9.3319645
20410543	Guix Workflow Language	Guix Workflow Language	smartmic	14.877911	8.428286	story	14.0	153.0	1562842027	10.490299
36261492	Nix/NixOS S3 Update and Recap of Com	Nix/NixOS S3 Update and Recap of Community Call	ghuntley	14.898626	8.464122	story	14.0	107.0	1686333368	10.6095495
34987547	So, I don't quite grok nix.Am I supp	So, I don't quite grok nix.Am I supposed to use it instead of Ansible and Terraform? Where does it fit exactly?	Chatter9220	14.89837	8.463439	comment	14.0	45.0	1677701153	-9.414905
37089331	The many issues plaguing Nix	The many issues plaguing Nix	lambdaba	14.898403	8.463925	story	14.0	75.0	1691765564	10.597052
37418351	NixOS just dropped Anduril as a NixC	NixOS just dropped Anduril as a NixCon sponsor	spoon16	14.898733	8.463962	story	14.0	51.0	1694092051	10.5886545
32501448	Nixpacks takes a source directory an	Nixpacks takes a source directory and produces an OCI compliant image	ghuntley	14.899515	8.464955	story	14.0	152.0	1660769006	-9.422262
16443323	I love the core concepts behind Nix,	"I love the core concepts behind Nix, and have great respect for their engineering abilities. However I am skeptical of their ability to achieve broad adoption beyond their current community of passionate experts.There are two reasons for my skepticism:1. User experience. Unless you're one of the ""passionate experts"", the Nix user experience is pretty terrible. The learning curve is punishing compared to competing systems.2. Elitist culture. In my experience, the Nix community is too smart for its own good. Their technical foundation is so far ahead of mainstream systems, and their technical design so satisfying to passionate experts, that they've forgotten how to live a day in the shoes of a mere mortal. Try pointing out flaws in the user experience, or the need to offer more pragmatic way"	zapita	14.898966	8.464086	comment	14.0	90.0	1519348505	10.555941
30688815	Rpath, or why lld doesn’t work on Ni	Rpath, or why lld doesn’t work on NixOS	ingve	14.899303	8.465107	story	14.0	99.0	1647367891	-9.329636
28240748	Building Container Images with Nix	Building Container Images with Nix	dboreham	14.896509	8.4601145	story	14.0	126.0	1629416927	-9.351446
34115340	Nix and NixOS, my pain points	Nix and NixOS, my pain points	Reventlov	14.898359	8.464034	story	14.0	137.0	1671874333	10.5608
25881654	Never Ever Use NixOS	Never Ever Use NixOS	nudpiedo	14.897865	8.462807	story	15.0	17.0	1611403522	10.609533
28817477	Nix-GUI: Make NixOS usable for non-t	Nix-GUI: Make NixOS usable for non-technical users through settings / GUI	asicsp	14.898197	8.4632015	story	15.0	229.0	1633864144	10.56999
32926823	Hacking anything with GNU Guix	Hacking anything with GNU Guix	podiki	14.880109	8.431347	story	15.0	307.0	1663775241	10.525916
22295672	As much as I admire the people invol	As much as I admire the people involved with Nix, taking the initiative to solve what they believe can be improved and the other developers like her, toying with new things and successfully managing to figure all this stuff out... I'm actually disappointed.The thing is, Nix is an absurdly complex piece of software, perhaps on a similar order of magnitude as maybe Kubernetes or other gizmos, requiring a very large time commitment to understand and to use properly.Just for fun, have any of you tried to keep up during the Docker bigbang, with all these technologies popping up left and right, switching names, dying abruptly, getting super-seeded or hacked with vulnerabilities? That was one of my most mentally draining year for me and I've been in the field for a while now.See... along the way,	nitrix	14.897665	8.461277	comment	15.0	120.0	1581390580	-9.362255
18275156	As co-maintainer of GNU Guix, I want	"As co-maintainer of GNU Guix, I want to point out that the views expressed in Richard Stallman's message are his and not those of the Guix maintainers.In particular, by writing that codes of conduct are ""punitive spirit"", RMS shows a misunderstanding of how these texts came into existence.More importantly, by writing that he disagrees with ""making diversity a goal"", RMS seems to deny the role we free software people play in the demographics of our communities.Many of us in Guix (and I think I can speak for my fellow Guix co-maintainer here) believe that free software should empower everyone.  As such, correcting the biases, conscious or not, that have led to the poor diversity of our communities, must be part of our mission."	civodul	14.878541	8.430095	comment	15.0	100.0	1540220482	10.488904
23251895	I'm still confused. What is Nix? Is 	I'm still confused. What is Nix? Is it an OS, or a package manager? From the looks of it it's a package manager that I should be able to use it on any POSIX system, but I doubt that's the case?	dataflow	14.89804	8.462948	comment	15.0	207.0	1590009423	-9.358943
30917809	If you are looking for a language ag	If you are looking for a language agnostic version manager, the nix package manager [0] might be worth a try. In combination with lorri [1] you will be dropped into a shell with all required development dependencies available, when you enter the project directory. This does not only include the interpreter/compiler versions but also any other dependency you can think of, like specific libraries the project links against (well almost any, it has to be available as a nix expression, best case directly in upstream nixpkgs).For me, it has come so far that I don't have any interpreters or compilers in my main OS environment and even for one off REPL sessions, I'll use `nix shell nixpkgs#python3 -c python3`.[0]: https://nixos.org/[1]: https://github.com/nix-community/lorri/	vbrandl	14.898695	8.463636	comment	16.0	199.0	1649159501	-9.424117
31437263	I recently bought a framework laptop	"I recently bought a framework laptop for a daily driver when I'm not on my desktop. For context I was running NixOS on an old 2014 macbook air, and I work on the glasgow haskell compiler in my day job so I do a lot of CPU heavy tasks.I've got to say, as long as these things are being produced I'll never go back. They are just too good and I cannot recommend them highly enough. One of the things that didn't occur to me before I bought it was that _because_ of the modular design I can switch the side the power port is on. That may not seem like much but it was a revelation the first time I sat on the couch and thought ""huh I really wish this was over on that side....wait a minute!"".I've also had absolutely no problems with NixOS on my machine, even my apple earbuds easily connect via bluetoo"	doyougnu	14.921411	8.480329	comment	16.0	164.0	1652980028	10.541676
37102554	What's your go to Nix/NixOS pitch?	What's your go to Nix/NixOS pitch?	ronef	14.898245	8.463332	story	16.0	46.0	1691862554	10.583594
16442893	Nix 2.0 Released	Nix 2.0 Released	jack_jennings	14.898942	8.464396	story	16.0	278.0	1519344745	10.558543
27505553	Seems like an author that doesn't un	"Seems like an author that doesn't understand the spirit of FOSS.  The nixos team was clearly allowed to use it and include it when asking for some technical merits as to why, and even offering many alternative options to appease the author the author seemed to just childishly stamp their feet and say, ""because I said so"".  Eventually the author took the position of ""taking my ball and going home"".  Why is a person like this even engaged in FOSS if they don't have a desire to share or even engage in a reasoned discussion?"	elmerfud	14.892738	8.454099	comment	16.0	118.0	1623692438	0.29566324
12335256	Reflections on NixOS	Reflections on NixOS	ikhthiandor	14.897686	8.463093	story	16.0	164.0	1471861208	10.555446
34103315	As someone out of the loop on this, 	As someone out of the loop on this, why is Nix so popular right now? What does it do and why are people installing it on everything? Is this something to pay attention to or is it a rehash of the 'I put linux on my toaster' 2000s-era stunts?	Eisenstein	14.897275	8.462922	comment	16.0	108.0	1671781998	10.54672
38237696	An Overview of Nix in Practice	An Overview of Nix in Practice	todsacerdoti	14.898047	8.463329	story	16.0	165.0	1699768446	10.546421
35854077	NixOS: A Personal Post-Mortem	NixOS: A Personal Post-Mortem	nathanckim18	14.897873	8.463646	story	17.0	58.0	1683483544	10.567232
29264888	I Love Arch, but GNU Guix Is My New 	I Love Arch, but GNU Guix Is My New Distro	ekianjo	14.882852	8.436298	story	17.0	297.0	1637240281	10.531804
34142969	Why all the NixOS hype? Did we all f	Why all the NixOS hype? Did we all forget about Guix?	gigatexal	14.884204	8.439201	story	17.0	43.0	1672096247	10.535313
37224148	Show HN: FlakeHub – Discover and pub	Show HN: FlakeHub – Discover and publish Nix flakes	grhmc	14.898822	8.4668455	story	17.0	154.0	1692718164	10.626219
33815085	NixOS 22.11 “Raccoon”	NixOS 22.11 “Raccoon”	iopq	14.898721	8.464186	story	17.0	240.0	1669895554	10.577506
27368361	NixOS 21.05	NixOS 21.05	jiehong	14.898951	8.463367	story	17.0	310.0	1622640158	10.56487
37105524	NixOS RFC 136 approved: A plan to st	NixOS RFC 136 approved: A plan to stabilize the new CLI and Flakes incrementally	seabass-labrax	14.898601	8.465161	story	18.0	242.0	1691887484	10.596037
32290725	Using Nix on macOS	Using Nix on macOS	gbrindisi	14.898623	8.463517	story	18.0	131.0	1659217937	10.534438
36668363	NixOS and my descent into insanity	NixOS and my descent into insanity	yarapavan	14.898158	8.463736	story	19.0	109.0	1689005277	10.574539
19807042	GNU Guix 1.0	GNU Guix 1.0	brendyn	14.878349	8.43025	story	19.0	478.0	1556799618	10.523789
28599326	So, what's everyone's favorite deskt	So, what's everyone's favorite desktop/workstation Linux distro as of 2021?Edit: Anyone tried using NixOS as a desktop OS? I like the idea of scripting my setup.	p1necone	14.897496	8.461784	comment	19.0	59.0	1632173836	10.526691
38656382	NixOS has one fatal flaw	NixOS has one fatal flaw	schalkneethling	14.897974	8.463208	story	20.0	43.0	1702661473	10.544281
32693107	We want to make Nix better	We want to make Nix better	biggestlou	14.898414	8.464354	story	20.0	223.0	1662138209	10.57657
31141377	How Nix and NixOS get so close to pe	How Nix and NixOS get so close to perfect	behnamoh	14.898128	8.4636345	story	21.0	188.0	1650775751	10.56463
25718098	NixOS Linux	NixOS Linux	lemonspat	14.898483	8.462651	story	21.0	229.0	1610304858	10.558604
39395474	Guix on the Framework 13 AMD	Guix on the Framework 13 AMD	ingve	14.8805	8.433062	story	21.0	247.0	1708081515	10.506032
30681182	How to Learn Nix	How to Learn Nix	brendanfalk	14.897089	8.4615345	story	21.0	150.0	1647312347	-9.171045
22985331	>> Nix and NixOS ruined me. It’s har	>> Nix and NixOS ruined me. It’s hard to go back.I don't know. Not much about all this setup feels appealing. The apparent learning curve for nix looks...steep. I've been using linux for a pretty long time (I think kernel 2.1 was fresh when I started). I've done the slackwares and debians and redhats and arches and gentoos etc. And I have zero desire to put such effort into having a working system.I realize the post is prefaced with a warning that it's over-engineered. I guess my question is- can I use nix without going so hard down the rabbit hole? I don't think I have the time to invest like my gentoo (read: teenage) years.I'm pretty satisfied with doing a minimal install of fedora, setting up i3 and firefox and calling it a day. Maybe I'm just older and more crotchety than I thought.	_ytji	14.898342	8.462549	comment	21.0	174.0	1587886605	10.5608425
27573393	Nixos-unstable’s ISO_minimal.x86_64-	Nixos-unstable’s ISO_minimal.x86_64-Linux is 100% reproducible	todsacerdoti	14.89884	8.464376	story	22.0	778.0	1624219308	10.534931
27269292	Replit now supports every programmin	Replit now supports every programming language in Nix	bobrenjc93	14.898904	8.464271	story	23.0	263.0	1621887974	-9.423275
25024639	One Week of NixOS	One Week of NixOS	jaemoe	14.898201	8.463523	story	24.0	247.0	1604830664	10.565517
27825420	I switched my primary dev environmen	I switched my primary dev environment to NixOS in a graphical VM on macOS towards the end of 2020 and I love it: https://twitter.com/mitchellh/status/1346136404682625024?s=2...Previously, I used Nix on Mac (as this blog post suggests) but I had enough “gotchas” with Nix on Mac that I decided to go full NixOS.For those who ask why a VM or why I keep Mac around at all: I like macOS for everything else besides dev work. I use iMessages heavily, I like the Mac App ecosystem such as calendars, mail clients, etc. This gives me the best of both worlds.I usually run this on an iMac Pro but also have a MacBook Pro. It runs great on either. It’s also really nice with Nix to update one machine and the other is just one command away from being equivalent.I recognize this is a “weird” setup but wanted 	mitchellh	14.896532	8.459823	comment	24.0	192.0	1626205670	10.583044
22984639	My NixOS Desktop Flow	My NixOS Desktop Flow	goranmoomin	14.898537	8.464045	story	24.0	280.0	1587877672	10.552714
29303641	How to Learn Nix	How to Learn Nix	allenleein	14.897025	8.461384	story	25.0	322.0	1637564426	-9.304466
33655542	Devenv.sh: Fast and reproducible dev	Devenv.sh: Fast and reproducible developer environments using Nix	frankpf	14.897375	8.461153	story	26.0	382.0	1668783154	-9.303606
34490376	Zero to Nix, an unofficial, opiniona	Zero to Nix, an unofficial, opinionated, gentle introduction to Nix	biggestlou	14.898592	8.464917	story	27.0	383.0	1674489482	10.558219
18363522	NixOS – Purely Functional Linux Dist	NixOS – Purely Functional Linux Distribution	tosh	14.898649	8.463491	story	27.0	292.0	1541171088	10.599159
22295102	I Was Wrong about Nix	I Was Wrong about Nix	xena	14.89849	8.463852	story	28.0	278.0	1581383421	10.560396
