id	label	hovertext	author	x	y	type	relevance	size	year	umap1d
33092765	The code is horrible:https://github.	"The code is horrible:https://github.com/ad-aures/castopod/blob/develop/app/Views/...Tight coupling of the HTML/PHP and JS.If they were going to use PHP, at least they could have used Laravel or Symfony and had standardized libraries for authentication, views etc.I just checked their Composer.json, looks like it uses CodeIgniter ... so maybe there is a framework in there but still the code quality is atrocious:
https://github.com/ad-aures/castopod/blob/develop/composer.j..."	husainfazel	12.798252	-6.6273785	comment	3.0	11.0	1664958427	10.332086
33103393	You need a VERY good reason to use a	You need a VERY good reason to use anything except PHP. Perhaps Rust. These technologies are good enough to get almost anything done these days.	krick	12.704588	-6.582031	comment	3.0	10.0	1665021000	10.425078
33103430	Ruby on Rails used to be one of the 	Ruby on Rails used to be one of the most popular ways of implementing MVC applications in the server. Has Ruby been hit by a similar fate?	justusw	12.737172	-6.921421	comment	3.0	15.0	1665021414	12.344233
33103497	How did you miss PHP in that list of	How did you miss PHP in that list of languages? It’s the most popular web development language. It has 2 very popular web frameworks (Laravel and Symfony, although Laravel seems to have the bigger developer community) and the language has been evolving in a pretty good direction.	charrondev	12.724932	-6.636224	comment	3.0	11.0	1665022139	10.341136
33106963	Thanks ! But by compiled I meant com	Thanks ! But by compiled I meant compiled to binary, and I guess Typescript don't do it ?	poulpy123	12.344872	-6.8398166	comment	3.0	10.0	1665056360	5.1914916
33119009	> Using combinatorics, we can take a	> Using combinatorics, we can take any one Sudoku grid and, with various simple tricks, create enough unique grids for you to do one each day for the next century. Simply by transposing and rotating the grid or interchanging columns and rows we get exponentially more unique puzzles.You can sort the three columns of boxes in six ways, same for the rows of boxes. Within each column of boxes there are three columns that can be sorted in six ways - same again for the rows. That gives us (6 × 6) × (6 × 6 × 6) × (6 × 6 × 6) = 1 679 616 variations. You can also turn the grid 90 degrees, 1 679 616 × 2 = 3 359 232.Then you can shuffle the order of the nine digits, since they don’t have any mathematical meaning, but are just arbitrary symbols. That’s another 9! = 362 880.3 359 232 × 362 880 = 1 218 	tobr	13.452381	-7.4111357	comment	3.0	13.0	1665133914	-11.028941
33119326	Obviously, any such classification w	Obviously, any such classification would be subjective, but there’s probably a “reasonable” limit to solvability. (Without guess and check)It’s totally subjective. Since sudoku is a closed (fixed size grid, fixed number of symbols), guess-and-check is just a catch-all label for logical inference strategies which haven’t been named yet. New strategies are discovered (and named) all the time and one of the ways to do this is to guess and then, if the guess was correct, go back and try to understand why.This bias against guess and check seems to be some deep-seated issue from our culture. I know a lot of mathematics teachers frown on guess-and-check as well and that can rub off on their students, possibly implanting the bias for life. Unfortunately, having this bias can really damage a person	chongli	13.448304	-7.4081383	comment	3.0	23.0	1665137085	-11.481278
33119714	Any good sites for super difficult s	Any good sites for super difficult sudoku?	OneOneOneOne	13.450482	-7.4100666	comment	3.0	10.0	1665141025	15.072328
33135871	Spot on. Rails just let you get shit	Spot on. Rails just let you get shit done. All we needed was a Rails for Node.js.	erlich	12.755076	-6.8272605	comment	3.0	15.0	1665262095	12.324943
33139606	Typescript is for big project and te	Typescript is for big project and team collaboration. JS is still my choice for personal or small project. Fast!	shanghaikid	12.376729	-6.6952577	comment	3.0	19.0	1665310504	-10.453994
33140226	My project is small but TS takes 4-5	"My project is small but TS takes 4-5 seconds to compile it from scratch on each run.The main speed impact is in developer productivity though. If something ain't working right, now I first gotta fix the types before I can see if I've fixed the actual logic.I imagine if my codebase was more ""OOP-y"" (i.e. if I replaced every layer of my domain model with 3 layers of dependency injection, turning the whole thing into an inscrutable ball of spaghetti like the cartel wants me to) I could probably iterate without breaking the types.But for any sane developer having made the mistake to touch TypeScript, the capability to strip the types and run the code with broken types, is essential.""But then why have types at all?"" Exactly. They're a crutch for people who want their IDE to understand the code "	kuramitropolis	12.352758	-6.831588	comment	3.0	14.0	1665316902	-10.433371
33141393	I feel like I am the only one in the	I feel like I am the only one in the world not liking typescript. It is not that I don't like types, it is what those types do to the readability of the codebase in terms of verbosity. My original programming language was Java but I switched to Node.js because I liked the simplicity of the code written in it. Nowadays every Javascript project seems worse than a Java project in terms of verbosity.My main gripe with projects becoming verbose is that the code becomes hard to understand at a glance. Functions that usually could be 10 lines are now 15 lines becomes of the formatter and each line looks more gibberish because everything has a type. You have to manually filter out that noise. The best way I can describe it is that entropy is increased in order to get type safety.	DogLover_	12.331889	-6.8241286	comment	3.0	12.0	1665325518	-10.432348
33143811	> quite frankly it's where the PHP d	"> quite frankly it's where the PHP developers all slithered off toPHP isn't my favorite language but using phrasing like ""slither"" to describe an entire community of developers is frankly shitty. Every language has its problems including whatever you use."	jef_leppard	12.762514	-6.639791	comment	3.0	14.0	1665339418	10.343895
33183876	For those of you scaling Ruby on Rai	For those of you scaling Ruby on Rails: are you more constrained by memory or CPU consumption?If you could choose a 50% reduction in process memory footprint, versus a 50% reduction in CPU cycles to serve your average request, which would you pick?	compumike	12.766314	-6.930488	comment	3.0	13.0	1665610993	12.317393
33184940	I understand why marketing would ins	"I understand why marketing would insist, but ""Hegel attempts to prevent runtime TypeErrors with a strong type system"" sounds like ""we haven't been paying attention to the JS landscape for the last few years and didn't know TypeScript already existed""? And if it's just a better TS tool chain... that'd be worth calling out."	TheRealPomax	12.392115	-6.8457775	comment	3.0	15.0	1665615878	-10.448252
33185833	Rails really does not scale. In perf	Rails really does not scale. In performance or development. It’s still a great option for small sites though.	Gigachad	12.756423	-6.941304	comment	3.0	13.0	1665622334	12.343937
33186816	This is good and I pretty much agree	"This is good and I pretty much agree. One thing though is that I think #1 and #4 actually also apply to framework'd applications. In my experience, even apps built on Rails end up with a business logic-level ""framework"" that is ad hoc and not obvious to newcomers, which results in bugs.Not to mention, the frameworks tend to be hard to use ""correctly"". Rails devs will have heard the term ""the Rails way"". In fact this article has an awesome example. There's a snippet of code of a controller checking to see if a User exists with the given email. Any Rails veteran would know that you can just call `User.create` in the controller and rely on validations for that kind of check. But that's another problem with frameworks - you have to know the whole thing in order to use it well."	resonious	12.7898	-6.8775396	comment	3.0	10.0	1665631669	12.3315525
33206065	I've been watching how Go and Rust t	I've been watching how Go and Rust tooling has been finding its way into the JavaScript ecosystem. I've been out of the PHP realm for about 10 years but I did find RoadRunner for PHP at one point. That's also an app server written in Go I believe. I wonder how this compares.	nobleach	12.557905	-6.7525034	comment	3.0	10.0	1665766631	10.293041
33206611	I might be missing the obvious but w	I might be missing the obvious but why would you add extra complexity to your infrastrucutre setup when PHP can be run natively from within caddy, apache, nginx via fastcgi.	tiffanyh	12.734612	-6.620923	comment	3.0	16.0	1665769413	10.303718
33214306	Erlang’s formulas are incredibly app	Erlang’s formulas are incredibly applicable to things we work on today - and shockingly unknown to many developers.I’ve used them several times to show that a proposed system is mathematically impossible: “if the backend processes n requests/sec with a max response time of X, and the P95 of the backend is Y, the queue satisfaction is 0%”. People think you’re a wizard while you’re just plugging numbers into a century-old formula.	bad416f1f5a2	12.547221	-7.5195293	comment	3.0	16.0	1665838009	12.8951025
33219782	I don’t know. To me, the biggest ben	I don’t know. To me, the biggest benefit of TypeScript is dumping all the types on my brain onto the screen.It’s easier to maintain in the future, when I don’t have to do so many mental gymnastics to understand the data behind my code.	sergiomattei	12.343273	-6.851663	comment	3.0	12.0	1665878154	-10.378613
33256626	I'm glad I happened across the item 	I'm glad I happened across the item before you made the change!  The transcript is the best transcript I've ever seen of a talk.I think the ideas are very interesting.  I don't agree with his condemnation of Docker and single-threaded programming, but he's certainly right about the value of being able to kill threads in Erlang, and about the importance of being able to fix things that are broken, and about our computers cosplaying as PDP-11s (and the consequent teletype fetishism).I hadn't made the connection between Sussman's propagators and VisiCalc before.  I mean I don't think Bricklin and Frankston were exposed to Sussman, were they?  They were business students?  But if not, it's certainly a hell of a coincidence.My defense of single-threaded code and aborting is that the simplest wa	kragen	12.421638	-7.4417024	comment	3.0	21.0	1666145455	12.9017105
33275398	Related reading from DHH (creator of	Related reading from DHH (creator of Ruby on Rails, Basecamp, and Hey): https://world.hey.com/dhh/why-we-re-leaving-the-cloud-654b47...	queezey	12.769426	-6.8756385	comment	3.0	12.0	1666276756	12.386489
33323965	I created this new transpiled langua	I created this new transpiled language to bridge the gap between CoffeeScript and TypeScript. It's getting really good these days!	Yahivin	12.405355	-6.6205378	comment	3.0	10.0	1666653716	-10.498509
33332330	The libraries. Ruby has Rails. Pytho	"The libraries. Ruby has Rails. Python has... everything else (plus Django, so it also kinda has ""a Rails""). You'll likely be using something less well-maintained and shakier if you use Ruby outside of Rails stuff, than if you'd picked Python. Python's basically the modern Perl.Why that all happened, IDK.I write that as someone with a soft spot for non-Rails Ruby (after much consideration and repeated encounters, I kinda hate Rails). But it's rarely the best choice, unfortunately."	yamtaddle	12.681361	-6.915492	comment	3.0	10.0	1666713420	12.337959
33336803	Doesn't esbuild skip Typescript type	Doesn't esbuild skip Typescript type checking? https://esbuild.github.io/content-types/#typescriptYou'll still need to keep tsc around for that, though perhaps you're doing that with another step in Webpack...?	lelandfe	12.399279	-6.6495996	comment	3.0	12.0	1666735753	-10.435815
33347372	I am not.PHP is traditionally used s	I am not.PHP is traditionally used solely for websites. Some of those have grown rather large, to the point that having engineers optimize the language is cheaper than buying more servers.Python, on the other hand, is first and foremost a scripting language. When performance does matter, you often end up using a wrapper around a C library, like NumPy. This means there is relatively little money in optimizing the Python interpreter.	crote	12.633644	-6.6770706	comment	3.0	22.0	1666808130	10.251769
33347972	There are websites and large scale s	There are websites and large scale software. Google uses Python for a lot of its products.It would seem sensible that since Facebook poured a lot of resources in optimizing PHP, Google would have done the same for Python.Also, Python is the first or second most popular language.	DeathArrow	12.60638	-6.67005	comment	3.0	19.0	1666811346	2.8435786
33354245	Wow, I was just trying to solve the 	Wow, I was just trying to solve the problem of merging overlapping periods in ruby. Life would be so much easier if the database did it for me!	timwis	12.580351	-7.0082126	comment	3.0	13.0	1666854820	12.341551
33359210	Have you looked at Slim (PHP microfr	"Have you looked at Slim (PHP microframework)?
--> https://www.slimframework.com/"	jpoesen	12.713746	-6.5292654	comment	3.0	10.0	1666885064	10.277589
33360215	The Match Expression feature is inte	"The Match Expression feature is interesting. According to the PHP docs, it can even handle non-identity expression, although the approach seems a little hacky:https://www.php.net/manual/en/control-structures.match.php#e...    <?php

    $age = 23;

    $result = match (true) {
        $age >= 65 => 'senior',
        $age >= 25 => 'adult',
        $age >= 18 => 'young adult',
        default => 'kid',
    };

The above example will output:    string(11) ""young adult"""	Minor49er	12.53201	-6.671683	comment	3.0	12.0	1666888839	-3.9839118
33398703	I enjoyed poking around at Crystal, 	I enjoyed poking around at Crystal, but its library ecosystem seems heavily oriented towards web development (understandably, because its creators are a web dev consultancy), and I don't do much web development for my hobby programming.Also, I found that its static analysis tooling (eg LSP server) was really slow. Compiling small programs was also rather slow, and it generated large binaries.I also had some difficulty understanding the documentation related to importing and including modules and classes; it seemed written from a perspective assuming that the reader already knows Ruby, which I do not.At the time, I was also curious about Common Lisp and Nim, so I spent a bunch of time learning the former, and have lately been writing small personal scripts/tools using the latter.My experien	nerdponx	12.57248	-7.24422	comment	3.0	11.0	1667164012	-11.115646
33399061	Refactoring tools are nice (I guess;	Refactoring tools are nice (I guess; I've honestly only used them in Java; I'm mostly an Emacs person), but my main gripes with Ruby maintenance are harder to fix with type annotations:- In duck-typed languages you have to write a lot of tests to do verify things that the compiler does for you in statically typed languages.  That neuters much of the benefit of the concision of such languages.  Crystal shoots for the best of both worlds.  (Static type checking, but usually without explicit signatures.)  My main refactoring tool in statically typed languages is the compiler:  if I break something, it'll tell me.- Monkey-patching, open classes, etc.  I do it too.  Pretty much every Ruby-ist does.  But it makes it damn near impossible to track down bugs sometimes, because even finding out what	wheels	12.4901905	-7.082089	comment	3.0	17.0	1667166194	12.394626
33403775	> Url with variables routing?No. But	"> Url with variables routing?No. But then I find that trivial to implement. Takes around 10 lines of code.> Csrf generation?Yes. You can generate secure tokens and send them in headers.> Session loading?No. And this one is a pain point. But then I didn't find any session libs in go or nodejs that fitted my needs, so I have no issues rolling my own.> Forms processing?Not sure whats the need here. Do you mean validating the inputs?
Again thats just a few lines of code.> Templating?ECR Templating in stdlib  works well.> ORM? 
I do not use ORMs as I prefer to write my sql queries by hand. Crystal provides object mapping with query results by default.> Assets pipeline integration?Not very sure what you mean here.Overall, I personally feel that I can get all that i need for my app in about a cou"	rishav_sharan	12.63138	-7.2084293	comment	3.0	10.0	1667210634	-11.234429
26535270	> And I don't think erlang has a sha	> And I don't think erlang has a shared mutable statesAn actor has state. It's mutable - each message can modify it. It's shared - two process working with a shared actor share that state. To me, that's shared mutable state. It causes classic race conditions.(I know this is an unpopular opinion, and somewhat deliberately contrary and provocative, but ultimately truthful.)	chrisseaton	12.343407	-7.5170107	comment	3.0	14.0	1616371106	12.857651
26545665	I love the idea of Crystal but I rem	I love the idea of Crystal but I remember reading that compilation times can balloon very quickly for moderately sized apps.Can anyone who writes Crystal today dispel or confirm that information? I imagine the inferred typing makes building a fast compiler really tough.	terracatta	12.579658	-7.2591996	comment	3.0	16.0	1616441734	-11.218083
26545864	Crystal's appeal, for me at least, i	Crystal's appeal, for me at least, is the productivity of Ruby with the memory efficiency and execution speed of C++. Static typing is just a way of achieving that, it's not something I'm seeking per se.	Doctor_Fegg	12.584313	-7.2243204	comment	3.0	30.0	1616442554	-11.217279
26547925	Is static typing really necessary fo	Is static typing really necessary for speed?The fastest JavaScript engines and LuaJIT are closer in speed to Crystal than Crystal is to C.Granted - all these languages are really fast - and unless you're doing something INSANELY performance dependent and you REALLY know what you're doing - I think familiarity trumps all. You're almost certainly going to write faster Crystal code if you're a Crystal expert than you would write C, C++, or Rust.	onlyrealcuzzo	12.5876	-7.253362	comment	3.0	17.0	1616450732	-11.194512
26546142	Ruby 3 does static typing, so that w	Ruby 3 does static typing, so that would be the quickest path for static types.Crystal is interesting to me because its a systems language, using Ruby syntax and idioms.I'm a Rails developer by trade but I've been pining to go back into desktop GUI development. Right now the only viable cross-platform options seem to be Swing and Electron. I'm not sure what the desktop story is with Crystal but if it there is a workable solution based on GTK or something similar I'd be very happy!	tomc1985	12.584928	-7.20573	comment	3.0	11.0	1616443573	-11.223222
26557177	Would be great to see a paragraph or	Would be great to see a paragraph or two about how to write tests for this functionality. Testing has been my pain point regarding front end development with Rails. Compelling tech all the same and a great article.	lucidone	12.748787	-6.88962	comment	3.0	11.0	1616518365	12.354135
26558096	Does anyone use Live Preview / Live 	Does anyone use Live Preview / Live Views in Phoenix, but in production with a B2C product?I'm a bit skeptical of Rails performance with the method the author details here, given that Ruby is much, much slower than Elixir.I'm curious if even Elixir folks deploy Live Views in consumer-facing apps. But I can totally see it being used for admin interfaces or internal applications, for sure.	shay_ker	12.876891	-6.9137926	comment	3.0	10.0	1616522549	12.741783
26559922	I'm happy I don't have to deal with 	"I'm happy I don't have to deal with these paradigms day to day anymore:- Making everything go through a ""controller"" instead of well designed clients and APIs. Mixing rendering, redirection, ajax handling as well as page serving as well as business logic all into a ""controller"" is painful. (""Models"" and the spaghetti design patterns they come with are even worse)- PHP style templates that trigger database queries inline, making them difficult and eventually impossible to optimize- Scattering view code across random places instead of writing view code with its corresponding view logic in the same file/component- Wiring up functionality to templates by targeting selectors- Manually setting innerHTML for dynamic functionality- Dealing with rails ""turbo"" anything, which is not useful in a real"	stevebmark	12.7652	-6.629553	comment	3.0	12.0	1616530856	12.2702875
26566502	Mimemagic gem yank disrupts Rails in	Mimemagic gem yank disrupts Rails installations	jjgreen	12.700144	-6.964782	story	3.0	16.0	1616590381	-9.050695
26565845	Performance.Perl was a legit tool in	Performance.Perl was a legit tool in bioinformatics due to its insane text parsing performance. Ruby performance is absolute garbage.	blacktriangle	12.359211	-7.0264907	comment	3.0	13.0	1616585636	12.972432
26566444	There are loads of battle-tested wel	There are loads of battle-tested well-working Perl code around, and its cheaper to hire one smart dev who can learn Perl to maintain than to hire a whole team to re-write in a new PL. So no matter what is Perl's future in terms of evolution, or mindshare there will be Perl programmers until the code is retired, and its unlikely to happen anytime soon.	brokenkebab	12.327565	-7.0265574	comment	3.0	32.0	1616589952	13.188852
26565532	The Future of Perl apparently reside	The Future of Perl apparently resides on a JavaScript only site.  What a weird world.	mlang23	12.341805	-6.9100266	comment	3.0	15.0	1616582622	13.146173
26568527	How about the reported Perl6 / Raku 	"How about the reported Perl6 / Raku speed issues? Saying ""reported"" because I have not done an in-depth study if they exist, just read about it briefly somewhere (and a while ago, may a year or so). If they did/do exist, was/is anything being done about them? Asking because I, for one, found both Perl 5 and 6 interesting, and the language features of both, somewhat unusual and powerful."	vram22	12.330342	-7.04884	comment	3.0	13.0	1616599983	13.181179
26581967	I do not know anything about erlang,	I do not know anything about erlang, but I’m intrigued about your proposal.Could you make a github repo with an example project implementing your solution?	faeyanpiraat	12.544456	-7.5170093	comment	3.0	10.0	1616688326	12.909267
26591076	A small nitpick, Erlang doesn't impl	A small nitpick, Erlang doesn't implement the Actor model. The similarity of Erlang's processes and the actors, defined by Carl Hewitt, is accidental as stated by Joe Armstrong multiple times.Edit: Actors doesn't run concurrently.	nesarkvechnep	12.327794	-7.5224276	comment	3.0	11.0	1616760518	12.85802
26620478	Let's make a gentlemens' bet. If Den	Let's make a gentlemens' bet. If Deno is still completely free in 5 years, I'll give you $500. You up for that?	exhaze	12.533269	-6.451074	comment	3.0	14.0	1617020385	-11.022314
26620070	That's a very dated view of PHP. Mod	"That's a very dated view of PHP. Modern PHP is far ""cooler"" than it was a few years ago. Just look at the entire https://laravel.com ecosystem — the most starred web framework on all of GitHub, across all languages, is Laravel."	jw1224	12.786011	-6.631855	comment	3.0	15.0	1617017113	10.345222
26621452	facebook, vk, youtube, wordpress, sh	facebook, vk, youtube, wordpress, shopify - a lot of stuff runs on php	slt2021	12.783571	-6.571475	comment	3.0	11.0	1617025632	10.281196
26623218	So Deno is still committing to TS ru	So Deno is still committing to TS runtime?	threatofrain	12.518882	-6.4633923	comment	3.0	15.0	1617031775	-10.973591
26645121	I believe we should really dial down	"I believe we should really dial down the usage of the word ""magic"". There are some parts of Rails that feel ""magical"" as in ""surprisingly easy to use"" or ""very convenient"", but it's nothing like ""magic that nobody understands"". You can always read the actual implementation in your IDE, and Rails code is nice and readable with comments and examples. It's just as easy or difficult to reason about as other complex codebases. I don't remember myself ever hitting a wall and still not understanding what's going on two hours later."	Toutouxc	12.735162	-6.9540615	comment	3.0	21.0	1617182687	12.36286
26658900	Odd that there's no mention of PHP: 	Odd that there's no mention of PHP: many developers who used Perl/CGI back in the early days of server side development moved to PHP and PHP was much easier for beginners, especially if you wanted to incrementally move from a static to dynamic site. Perl was, in its day, as much the king of web development as it was admin scripting.	danjac	12.652782	-6.695405	comment	3.0	10.0	1617275230	13.066102
26661007	PHP was popular 20 years ago and see	PHP was popular 20 years ago and seems to still have wide adoption.	edoceo	12.775263	-6.6395335	comment	3.0	18.0	1617287904	10.342254
26661821	I agree with this. Deployment of Per	I agree with this. Deployment of Perl was a pain in the ass. With PHP you literally just FTP’d the files to your normal web directory and you were off to the races.Even today PHP still has that advantage over many other languages. To my knowledge even now you can’t just upload a bundle of .py, .rb or .jar files into a directory hosted by Apache and go.That being said these days the other languages become their own http server and are usually fronted by a reverse proxy or two. But still that is like an order of magnitude harder to stand up than PHP.	spookthesunset	12.62706	-6.7154574	comment	3.0	19.0	1617291445	13.089765
26674294	Do I need to know Ruby in order to b	Do I need to know Ruby in order to better understand Crystal? I'm interested in learning Crystal, but the community is quite small and the learning resources, sparse. Ruby on the other hand has a massive presence in the form of tutorials, books and blog posts. I have some minor experience with Python, Java and PHP.	edgarvaldes	12.627865	-7.244619	comment	3.0	12.0	1617388089	-11.239344
26705090	> Erlang already is a more concise l	"> Erlang already is a more concise language than Elixir but also noisier as there are more punctuation characters.What?Here's more-or-less the entirety of Erlang's ""noisier syntax with more punctuation characters""  -spec f(A :: any(), B :: some_type(), C :: list()) -> any().
  f(A, {B}, [C | _]) ->
    A1 = fun() -> io:format(a, []) end,
    A1(),
    case C of
       <<1, _/binary>> -> 1;
       _ -> #person{ok = ok, field = C}
    end.

Edit:  %% plus map syntax

  #{""tuple"" => {1,2}}
  M#{""key"" := ""new_value""}

  %% plus list comprehensions

  [X || X <- List, X /= 10].


Elixir has all that plus more. The equivalent in Elixir is something along the lines of  @spec f(a :: any(), b :: some_type(), c :: list()) :: any()
  def f(a, {b}, [c | _]) ->
    a1 = fun() -> IO.inspect(a) end,
    "	dmitriid	12.578791	-7.4739857	comment	3.0	16.0	1617659078	12.905378
26710349	Depends what you want to do, and why	Depends what you want to do, and why you're doing it. Very often when I make something in Flask, I end up with so many dependencies it might as well be Django (but without the cohesion). On the other hand, Django might be overkill in some situations (e.g. a small API without a relational database backend).	danjac	12.841048	-6.50851	comment	3.0	14.0	1617706240	10.053755
26710912	Honestly, I don't see the point of u	Honestly, I don't see the point of using Flask anymore. You can set up a Django project and just use a single module with a bunch of view functions, built-in testing and sensible defaults. Done. Not choosing that approach just because it takes a few more MBs on disk or needs a few more KBs of memory is shortsighted, IMO. You can't always predict what a project will end up needing.I'm legitimately asking: why would you use Flask instead of Django, even if you don't (but might) need the ORM, admin etc.? Thanks!	chpmrc	12.8288555	-6.5000863	comment	3.0	11.0	1617711739	10.058282
26719759	> Are there enough Ruby devs to sust	> Are there enough Ruby devs to sustain this?So far so good. We’ve been in business for nearly a decade now (with the game engine going onto year 3).> Unity, Unreal, React Native game engine, or one of the other (thousand) game engines out there?Well our ability to deploy to console eliminates most engines as competitors/options. Unreal is a fantastic engine for 3D games. Unity is... well... not that great to be honest.Other differentiators are on the site.	amirrajan	12.685888	-6.9950395	comment	3.0	34.0	1617760964	12.361023
26720571	Kinda scary how bad master.php.net w	Kinda scary how bad master.php.net was.- md5 passwords more or less- “...running very old code on a very old operating system...”- no parameterized queries	nerdbaggy	12.819102	-6.554057	comment	3.0	18.0	1617769309	10.225751
26720686	I'm assuming PHP is a victim of it's	"I'm assuming PHP is a victim of it's success here: Widely used systems feel incredible pushback to breakage of existing functionality when ""everything is working"". In this case, fixing the password security would've required breaking everyone's ability to commit to the PHP codebase, so it was not done.This is pretty much... all large scale enterprise IT: Everyone's good with security improvements until it interrupts a business unit, and then someone up the chain decides it isn't worth the disruption to deal with a hypothetical security risk."	ocdtrekkie	12.799367	-6.5709105	comment	3.0	13.0	1617770638	10.322113
26723434	20 years ago, I shipped a Ruby/SDL p	20 years ago, I shipped a Ruby/SDL powered quiz game to a network of Windows NT4-powered games cabinets in pubs. They had 64MB RAM and the jerky animation due to garbage collection pauses ATE ME ALIVE for about 6 months.What's changed in Ruby since then to make smooth animation possible?	mattbee	12.657221	-6.9934936	comment	3.0	10.0	1617796007	12.350701
26725677	In my opinion Python provides a bett	In my opinion Python provides a better syntax in almost all areas.Ruby has been a language in decline for quite some time.	VectorLock	12.444749	-7.0285306	comment	3.0	11.0	1617806738	12.393029
26739231	The author almost seems to apologize	The author almost seems to apologize for having a django monolith.But it's worth realising that one purpose of code organisation in larger companies is to mirror the team organisation. That's a constraint on code that can interfere with the best technical architecture.You can do better with a monolith in a one-man team!	sa1	12.708973	-6.4749	comment	3.0	11.0	1617892570	-13.818036
26767623	Show HN: UML model and code examples	Show HN: UML model and code examples of GoF patterns in Crystal	takaakit	12.606042	-7.2614822	story	3.0	35.0	1618117818	-11.202795
26772261	Would love to be able to write apps 	Would love to be able to write apps in Typescript.	I_am_tiberius	12.387189	-6.7745485	comment	3.0	11.0	1618164921	-10.434159
26800110	I found most of the dependency woes 	I found most of the dependency woes to go away with import maps: https://deno.land/manual@v1.9.0/linking_to_external_code/imp...	vexna	12.438986	-6.444012	comment	3.0	11.0	1618352409	-10.803616
26805379	Nice to see Datalog being validated 	Nice to see Datalog being validated by a big name, though I don't see what's modern about Logica in particular, or why one should use it over plain Datalog (as syntactical Prolog subset) when the available backends are restricted to SQL rewriters or locked-in to BigQuery. Will have to look into the model for aggregate queries which I guess is a selling point for Logica (as is modularization/composition with optimization), and a weak point since typically neither in Datalog (the decidable logic fragment) nor portable.Edit: also I find the title a bit grandiose since this isn't about Logic Programming in general, but only database querying	tannhaeuser	13.166847	-7.1521945	comment	3.0	31.0	1618398018	-12.459501
26807759	> ...or why one should use it over p	> ...or why one should use it over plain Datalog...I have been looking for examples of how to use a practical implementation of Datalog for years and the closest I've come to is actually miniKanren instead.  Could you point me to codebases that productively use Datalog internally?	cpdean	13.190172	-7.0228257	comment	3.0	14.0	1618411429	-12.414262
37580203	That's not on a per-host basis. Shop	That's not on a per-host basis. Shopify's design is, quite fortunately, one that partitions really well, as each store is completely independent of each other.Each store can be assigned to one pod, each pod can have as many hosts as it takes to optimize the use of a database instance, and then you can add more pods as the need arises.Edit: to be clear, that's not to say Rails can't scale. It can. It's just that it doesn't need to- you can scale anything with enough partitioning.	mabbo	12.737478	-6.9459414	comment	3.0	32.0	1695182060	12.348678
37580354	Ruby processes don't return the memo	Ruby processes don't return the memory to the system,they reuse memory already allocated. This is for efficiency - allocating and freeing system memory isn't free. Even if it did, your peak memory usage would be the same. It doesn't allocate memory it doesn't need.If your memory usage doesn't plateau you have a memory leak which would be caused by a bug in your code or a dependency.But 500 to 1gb of memory required for a production rails app isn't unusual. Heroku knows this, which explains their bonkers pricing for 2gb of memory. They know where to stick the knife.	jacobsenscott	12.590304	-7.0224867	comment	3.0	21.0	1695183800	-11.237406
37603516	For what it's worth; `eslint-plugin-	For what it's worth; `eslint-plugin-react` has been around for a long time and seems to support running in very old versions of Node.JS (back to v4[1] apparently! tho I can't find anything documenting that for sure.)I was surprised to learn that Object.values is only supported in Node >v7, Object.fronEntries was added in v12, etc. So for this project maybe the polyfills are needed.[1] https://github.com/jsx-eslint/eslint-plugin-react/pull/1038	jluxenberg	12.329299	-6.523883	comment	3.0	11.0	1695326843	-10.396186
37631898	`tsc` is extremely slow to transpile	`tsc` is extremely slow to transpile TypeScript sources into JavaScript. It's invaluable for typechecking, but for transpilation there are much better solutions like SWC or tsup [1] (which nicely wraps esbuild and Rollup).[1] https://tsup.egoist.dev/	franky47	12.373927	-6.7549615	comment	3.0	16.0	1695552233	-10.457598
37633950	I'm wondering if there's a tool that	I'm wondering if there's a tool that converts TypeScript into JavaScript that has JsDoc type annotations and preserves API docs? Then you wouldn't need to include anything else. Let the application minify if they choose.	skybrian	12.356346	-6.7881174	comment	3.0	11.0	1695569134	-10.472401
37637065	I think:> It provides an ahead-of-ti	"I think:> It provides an ahead-of-time compiler using C++ and gcc/clang as the backendWhich is kind of the new ""in"" lately.EDIT: If you see the the animation in the GitHub repo, you'll see at a certain point a file named ""bs"" (which is a binary file). I guess the standard Ruby compiler doesn't allow you to spit out binaries out of the box (?)."	mk89	12.559617	-7.071096	comment	3.0	14.0	1695588626	12.385714
37638255	Elixir gets a lot of praise but very	Elixir gets a lot of praise but very rarely mention that is't a dynamically typed language, people will talk about Dialyzer/type hints but it's vastly inferior to strongly typed language.	Thaxll	12.525182	-7.449017	comment	3.0	10.0	1695599335	12.902295
37667189	Ask HN: What Is the Future of Rails?	Ask HN: What Is the Future of Rails?	3dsnano	12.735845	-6.936433	story	3.0	2.0	1695770126	12.362731
37676872	I'm not sure if this is a troll or n	I'm not sure if this is a troll or not and I don't really want to debate this kind of thing on HN, but you've baited me.  It is not a straw man.  As I said, the source of the input could change in the future and it could be missed.  The safe version is no more complicated than the unsafe version, so why wouldn't you just do the safe one?  There is zero advantage to the unsafe way and it's straight up reckless to defend it.I'm one of those people who moved from Ruby to Elixir.  Ecto, Elixir's defacto database wrapper, will throw and exception if you try and write interpolated code like this, so luckily I don't have to have these insane arguments anymore (well, I work alone now, so there are several reasons I don't have to have them).EDIT: My bad, I glazed past the last part of your statemen	sodapopcan	12.665268	-7.432412	comment	3.0	13.0	1695831181	12.94223
37697846	The Internals of Deno	The Internals of Deno	dgellow	12.525334	-6.4499807	story	3.0	64.0	1695947559	-11.017726
37703679	"I disagree with the ""require"" specia"	"I disagree with the ""require"" specialized deployments – we have hosted our elixir apps for years as stateless web apps, just like any other architecture.In fact, you can build a release that's just a zip file which also contains the full elixir/erlang runtimes, that can be deployed on a barebones server (assuming the same libc, etc). It's not ""single-executable"" nice like Go/Rust/.NET but it's much simpler than it used to be.The one use case we've seen for clustering things is having our cache stay in sync. But apart from that, we really haven't seen a need to cluster our nodes.But if we wanted to, it's beautifully and trivially easy to do things in a cluster in Elixir/Erlang.Immutable state is definitely one of the steeper learning curves to get over."	atonse	12.6305065	-7.460322	comment	3.0	13.0	1695993171	12.893207
37724032	Tell HN: Flask and Quart have now pa	Tell HN: Flask and Quart have now partially merged	pgjones	12.56296	-6.6228375	story	3.0	20.0	1696150166	9.93272
37737152	Jenk — can you help me with a list o	Jenk — can you help me with a list of valid reasons to choose JavaScript so that the TypeScript community is pleased? This would help me a lot. Thank you!	tipiirai	12.415169	-6.710326	comment	3.0	13.0	1696249089	-10.506527
37750471	Elixir and Machine Learning: Q3 2023	Elixir and Machine Learning: Q3 2023 roundup	josevalim	12.729085	-7.4862795	story	3.0	39.0	1696332940	12.942268
37755391	I don't like using frameworks	I don't like using frameworks	cannibalXxx	12.76074	-6.598859	story	3.0	3.0	1696356160	10.329804
37768886	The TLDR on Ruby's new TLDR testing 	The TLDR on Ruby's new TLDR testing framework	thunderbong	12.613911	-6.9868183	story	3.0	19.0	1696441454	12.321476
37787236	I lost faith in rails JS integration	I lost faith in rails JS integrations.I either do SSR with slim or do API only with a separate frontend.Rails changed direction too many times trying to do JS (coffee script, asset precompiling, webpack, etc)	itake	12.751703	-6.7461715	comment	3.0	15.0	1696568233	12.315938
37787333	Goodreads is an example of a Rails v	Goodreads is an example of a Rails victim like yours. They customized the app on top of Rails, and it's been so bad that Goodreads is dead in the water and has not received major tech updates despite Amazon throwing engineers at it. Ruby is a dangerous language to refactor, so often you're locked for a long time. See also: Every blog post about Rails upgrades ever (see also: Stockholm syndrome)	stevebmark	12.732135	-6.9579654	comment	3.0	13.0	1696569788	12.348392
37787347	I agree. What are options here? Rail	I agree. What are options here? Rails in API-only mode?	roboben	12.774839	-6.8925495	comment	3.0	32.0	1696569908	12.327356
37787491	The performance of Rails serializers	The performance of Rails serializers is still a nightmare. God awful performance.	Rapzid	12.696734	-6.936684	comment	3.0	14.0	1696571345	12.364039
37787599	Looking at the new Hotwire stuff. It	Looking at the new Hotwire stuff. It’s neat from a technical perspective but looks dreadful to me. Why double down on a sloppy backend language when hardly any of the needed logic for a web application is backend? Especially when the alternatives include a full stack of TypeScript, a robust, performant, strongly typed, fantastically tooled language?I was an RoR developer for a decade. These code bases do not age well. The test requirements of loosely typed languages are so much greater. The lack of ability to automate refactors alone is enough to avoid ruby.	crystaln	12.453865	-6.7132535	comment	3.0	10.0	1696572705	12.291809
37787805	I'd like to throw in Phoenix LiveVie	"I'd like to throw in Phoenix LiveView here.Rails wins every battle for initial development speed, as the conventions are so thorough and well thought out that nothing even remotely comes close. Laravel is creeping in, but it's not there yet IMO.LiveView however, scales better (in every sense of the word). It also comes with batteries included (auth, database access, jobs, mailer, complete testing kit etc), little-to-no-DIY-JS, and one of the finest VMs there is (BEAM).If nothing else, I'm happy that these projects all fight the ""let's take a step back""-fight. At $DAYJOB I write React with Relay and the amount of hoops one needs to jump through is exhausting, even though I've been writing frontend JS for many years now and consider myself half decent in it."	fredrikholm	12.7763605	-6.7262616	comment	3.0	24.0	1696574445	12.384964
37788025	Interesting to hear your comparison 	Interesting to hear your comparison to Django and that you wouldn’t say they’re on par, at least for you, today. Any particular reasons for preferring Rails over Django?	tom_walters	12.789755	-6.706414	comment	3.0	19.0	1696576920	10.303906
37787282	Rails on the backend doesn’t get the	Rails on the backend doesn’t get the credit it deserves.On the front-end it’s been a mess for a really long while now though	ulizzle	12.774707	-6.903864	comment	3.0	45.0	1696568929	12.345268
37799940	I have been writing Elixir full time	I have been writing Elixir full time since 2018, and I quite like Phoenix, warts and all.Can a willing reader pitch Ash Framework in a few lines for me please? What is its killer feature vs Phoenix? Also, is it compatible, or does it have an alternative to LiveView?	sph	12.75638	-7.28657	comment	3.0	12.0	1696665838	-10.791009
37810815	"I find the ""state of Elm"" over the p"	"I find the ""state of Elm"" over the past couple of years absolutely fascinating. Some folks reasonably claim the language is dead and absolutely not suitable for production due to scarcity of updates, public roadmap, or bug fixes. Others run Elm in production and reasonably claim it's perfect/stable already. There's a steady stream of blog and forum posts on this argument. I read them all."	bbkane	12.999411	-7.6824656	comment	3.0	13.0	1696775680	-12.765214
37831614	Crystal 1.10.0 Is Released	Crystal 1.10.0 Is Released	mikece	12.650124	-7.2683053	story	3.0	44.0	1696943510	10.445744
37844438	We outlawed it immediately via Ruboc	We outlawed it immediately via Rubocop but I use it all the time in IRB.We also don't allow single letter variable names. I'm an old school rubyist and find this to be an annoying constraint that can't be auto-corrected so it adds a little friction to writing code but arguing for more terse code is always a losing proposition so I just deal with it.	kubectl_h	12.373074	-7.0718765	comment	3.0	12.0	1697032529	12.376072
37849244	Tangential but:> My homegrown theory	"Tangential but:> My homegrown theory is that the idea of array.each { ... } as the main syntax for cycles was the first “aha!” of the new language development for its author> The style that flourishes with this new shortcut is representing computation as a chain of small blocks, declaratively describing transformations from inputs to outputs. The style that is native to Ruby, the first mainstream language to have enumerable.transformation { ... } as the main cycle construct, and, I believe, played a role in normalizing “map”, “reduce”, and “filter” as a way of thinking about how things are handled.Matz got that from Smalltalk. That's why most of the enumeration methods in Ruby match the names of similar methods in Smalltalk (""collect"", ""reject"", ""select"", etc.) and not the corresponding na"	munificent	12.413579	-7.1512837	comment	3.0	10.0	1697053011	12.3774185
37858208	> This is incredibly hard to achieve	> This is incredibly hard to achieve in practice if you're not running something nix, and even then there are leaks of dependencies on kernel syscall APIs.You're misinterpreting that guideline. The text says (my emphasis):> Most programming languages offer a packaging system for distributing support libraries, such as CPAN for Perl or Rubygems for Ruby. Libraries installed through a packaging system can be installed system-wide (known as “site packages”)It's not saying not to depend on the operating system (of which glibc is part), it's saying not to require particular language package manager packages to be installed on the machine.Agreed that the other ones you mention are silly, though. Especially the one about environment variables - that isn't actually reasoned advice, it was just the	twic	12.339386	-6.8276873	comment	3.0	17.0	1697123033	12.415405
37868015	Mostly backend development in Ruby (	Mostly backend development in Ruby (most of the time Rails), some frontend for my side projects.I use Docker with multiple containers running almost all the time. Local PostgreSQL and MySQL.I use from time to time Affinity Photo and Affinity Designer.I mostly use now VScode, sometimes Rubymine.Video calls: Mostly Zoom, some Google Meet, rarely something else.	gls2ro	12.752935	-6.775111	comment	3.0	15.0	1697183893	12.354609
37869042	I left my last job and a toxic boss 	I left my last job and a toxic boss a few months back and decided the only viable future is to start my own thing again. But this time I was going to do it properly - lean customer development, speak to users before writing a line of code, etc.Instead, I became fascinated by the massive improvements in OCR and how they can be applied to digitising boring paper records. Decided to start out with the most boring problem of them all - credit card and bank statements.I decided this would also be a great project to make the leap to Python and Django. So, without speaking to a single potential customer, I threw myself into coding. After a while, I realised Laravel is so much better and jumped back to that. Have learned loads as a result.I've built a local prototype that works really well with im	wriggler	12.804168	-6.6400757	comment	3.0	11.0	1697193266	10.386519
14692576	> It is said that flask doesn't try 	"> It is said that flask doesn't try to suggest any particular structure for your project, but I would say that the effect of that the majority of the time is to produce a project with no structure.Don't blame Flask, blame whoever hired mediocre developers in your company. No framework that ""enforces"" things will compensate for bad​ human capital."	flavio81	12.734125	-6.567947	comment	3.0	13.0	1499128334	10.025845
14702569	Ask HN: Do You Prefer Typescript or 	Ask HN: Do You Prefer Typescript or Flow? Why?	larrysalibra	12.459991	-6.7064743	story	3.0	13.0	1499264339	-10.466987
14709639	Logic Programming (Prolog, ASP, etc)	Logic Programming (Prolog, ASP, etc) and GRAKN.AI (a distributed knowledge base)	graqlbot	13.123151	-7.249077	story	3.0	57.0	1499341917	-12.476492
14718418	What is the speed like? Ruby isn't e	What is the speed like? Ruby isn't exactly known for being the fastest.	spork12	12.568086	-7.0638742	comment	3.0	12.0	1499436566	12.359003
14735391	How to build video games for Windows	How to build video games for Windows using Crystal	RX14	12.63099	-7.2803054	story	3.0	6.0	1499690937	10.271882
14743931	Fine but its dangerous.   Javascript	Fine but its dangerous.   Javascript/Ecmascript, is a poor designed language, the scope of the variables is broken.  Instead, PHP is well defined in this aspect.	jorgec	12.640261	-6.5286403	comment	3.0	12.0	1499779415	10.293065
14746139	There's more problems with Ruby than	There's more problems with Ruby than just speed (but it is objectively slow). Most of them caused by Rails to be honest. But who's realistically writing webapps using Ruby without Rails?There are much better alternatives today that build upon the strengths of Ruby and leaves behind it's weaknesses. As processors become more about multi-processing, languages that leverage that are going to gain popularity.	sergiotapia	12.660989	-6.9910655	comment	3.0	10.0	1499794570	12.328544
14746608	"Website says ""The majority of web ap"	"Website says ""The majority of web applications handle far less than 1000 requests per second.""The benchmark provided (TechEmpower Benchmark) measure the amount of requests served, but these requests are for rather easy tasks like fetching data from a SQL database and serving it. Or doing JSON serialization.Drop in a more alghoritmically-complex and/or general-purpose task (say, compress this file using GZIP before saving it on your server), and then you will feel the speed (or slowness) of your platform. And here perhaps you couln't hit the magical ""1000 requests per second"" benchmark.Objectively, Ruby implementations (on the canonical Ruby MRI implementation) are slow. Sometimes even 100x slower than C.Taking a deep look at these graphs, where 1x is C's performance under GCC:http://benchm"	flavio81	12.679741	-6.941189	comment	3.0	10.0	1499797277	12.339858
14746940	No editor seems to handle ruby very 	No editor seems to handle ruby very well, why do I get an automatic closing bracket but no automatic end? I don't have to write a 1 char closing bracket why do I need to write a 3 char end?	rezistik	12.43481	-7.015973	comment	3.0	12.0	1499799353	12.380228
14748265	Good stuff. Erlang VM FTW!> mochiglo	Good stuff. Erlang VM FTW!> mochiglobal, a module that exploits a feature of the VM: if Erlang sees a function that always returns the same constant data, it puts that data into a read-only shared heap that processes can access without copying the dataThere is a nice new OTP 20.0 optimization - now the value doesn't get copied even on message sends on the local node.Jesper L. Andersen (jlouis)  talked about it in his blog: https://medium.com/@jlouis666/an-erlang-otp-20-0-optimizatio...>  After some research we stumbled upon :ets.update_counter/4Might not help in this case but 20.0 adds select_replace so can do a full on CAS (compare and exchange) pattern http://erlang.org/doc/man/ets.html#select_replace-2 . So something like acquiring a lock would be much easier to do.> We found that the w	rdtsc	12.511653	-7.518316	comment	3.0	12.0	1499808746	12.895936
14750500	It seems awkward to me. What if Erla	It seems awkward to me. What if Erlang/OTP team can not guarantee message serialization compatibility across a major release? How you are going to upgrade a cluster one node at a time? What if you want to communicate with other platforms? How you are going to modify distribution protocol on a running cluster without downtime?As soon as you introduce standard message format, then all nice features such as built-in distribution, automatic reconnect, ... are almost useless. You have to do all these manually. May be I'm missing something. Correct me if I'm wrong.For a fast time to market it seems quite nice approach. But for a long running maintainable back-end it not enough.	majidazimi	12.5768175	-7.484198	comment	3.0	13.0	1499840328	12.92098
14751288	Truly the strenght of elixir comes f	Truly the strenght of elixir comes for Erlang. I wonder if Scala is also as good as erlang for creating robust and fail proof distributed systems?	cooervo	12.579206	-7.5038114	comment	3.0	11.0	1499853618	12.911633
14764664	Not being PHP. PHP is brain-damaged.	Not being PHP. PHP is brain-damaged. With so many much-better languages there is zero reason to use PHP, or spend effort improving PHP.	TylerE	12.766612	-6.645604	comment	3.0	12.0	1499976087	10.326045
14768247	I can't agree, if you are a Ruby pro	I can't agree, if you are a Ruby programmer you immediately know what's going on in the first line and it's definitely more readable - you see it at a glance instead of having to scan three lines.	methyl	12.514823	-7.0631437	comment	3.0	16.0	1500018556	12.408296
14774266	I'm wildly confused by your comment,	I'm wildly confused by your comment, Dropwizard is 'all inclusive' but Spring is a micro-framework? Flask is both?	mbell	12.445394	-6.7790685	comment	3.0	10.0	1500077480	9.498058
14786529	This is /not/ AOT compilation of rub	This is /not/ AOT compilation of ruby code.It simply compiles a ruby interpreter and adds your code to the executable (as memfs).The output is an executable that /interprets/ ruby code.	bjpbakker	12.566686	-7.059335	comment	3.0	13.0	1500278845	12.321623
14789221	Have you seen Elixir's doctests[1]? 	Have you seen Elixir's doctests[1]? They're docs with a code example that gets run by your tests, and if the example doesn't work, your tests fail.[1]https://elixir-lang.org/getting-started/mix-otp/docs-tests-a...	ch4s3	12.656465	-7.453705	comment	3.0	15.0	1500304142	12.91045
14798706	It's funny to me that so many people	"It's funny to me that so many people on the ""PHP is bad"" bandwagon are apparently perfectly cool with writing every damned thing in Javascript."	chasing	12.640095	-6.4918437	comment	3.0	13.0	1500401148	10.289172
14798745	"""Don't write PHP, write Hack instead"	"""Don't write PHP, write Hack instead"" is probably a better title for this post.The author could have chosen to write about PHP best practices that are ignored in the ecosystem at large, but instead chose to evangelize HHVM features.For anyone who currently writes PHP like it's 2009 and wants to learn a better way (without dropping PHP entirely):http://www.phptherightway.com/https://planet.nomadphp.com/https://www.reddit.com/r/phpsec/If anyone prefers to drop PHP entirely, that's fine too, but that's not the only good answer and pretending that all PHP is bad (like many of the comments on this thread already do) is very disingenuous."	CiPHPerCoder	12.771073	-6.6435986	comment	3.0	33.0	1500401438	-1.4256161
14798757	Async queries, great advice..do that	"Async queries, great advice..do that. The rest meh...The bad:""Use HHVM"". Do not do this, just upgrade to PHP 7. HHVM does have better performance [in some cases, not all], but it also has many unsupported modules [such as Memcache based sessions]. It's difficult to get improvements added and you're going to get frustrated by something people in the mainsteam PHP branch can do that you cannot do.?int $var = null;This is a question of style. Personally, i can read it, but it is a little odd and I've seen people get confused over it. I'd personally avoid it. The null check and type check is much clearer."	verelo	12.703978	-6.650206	comment	3.0	17.0	1500401477	10.2481365
14798934	Are you aware of what the PHP ecosys	Are you aware of what the PHP ecosystem provides?  There is some pretty great stuff in PHP land.2 of my favorites are https://getcomposer.org/ and https://laravel.com/	deweller	12.787666	-6.626248	comment	3.0	15.0	1500402687	10.36097
14800767	Honestly, that's like a cup of ice w	"Honestly, that's like a cup of ice water in hell. Composer is a finally thing, and Laravel is a ""at least it's not garbage"" framework. The things you have to make do with in the PHP world are absurd. Find something in an array? Ugh.PHP is catching up to what other languages have enjoyed as a given for over a decade. It's very confused. There's been absolutely zero effort to overhaul the core PHP API which is, on the whole, absolute junk. Frameworks like Laravel do their utmost to insulate you from having to use it too much for the ugly things.As an example of what could happen, JavaScript has gone from this ugly, useless language that would crash your browser if used too much to something that's now widely deployed and powers significant web properties both client-side and server. The impr"	astrodust	12.791268	-6.645901	comment	3.0	11.0	1500419450	10.383684
14800235	Same, the JS cool-kids swore up-and-	Same, the JS cool-kids swore up-and-down that CoffeeScript was the future and we'd be fools to not jump on.It's another reminder that no-one knows the future.	s_kilk	12.42404	-6.5596623	comment	3.0	11.0	1500413623	-10.524315
14822102	Ask HN: Am I right or just procrasti	Ask HN: Am I right or just procrastinating?	methochris	12.693051	-6.8827047	story	3.0	1.0	1500656901	12.334714
14847242	Congrats on the new release! While t	Congrats on the new release! While this is all great news, it's still quite hard to get a full-time Elixir job outside of US. Kind of like staring at the candy shop display while it's closed. I'm wondering how to make this happen. I'm in a place where Elixir is just not going to happen and seems unreasonable to expect that I'll be able to convince people to switch to it right after joining a new place. Seems like the only option is to find spare time for playing with Elixir, but that proved to be difficult when I need to invested time in a different stack that actually helps me pay the bills.	stefanchrobot	12.703434	-7.4595866	comment	3.0	10.0	1500986654	12.948781
14847790	What do people use as a PaaS provide	What do people use as a PaaS provider for Erlang/Elixir?	Touche	12.627022	-7.486915	comment	3.0	14.0	1500991772	12.920896
14852459	God Typescript is glorious after dea	God Typescript is glorious after dealing with JS for so long.Just needed to say that.	slackingoff2017	12.371034	-6.6694384	comment	3.0	22.0	1501022232	-10.489701
14853497	I tried TypeScript yesterday and whi	"I tried TypeScript yesterday and while I really love the language, the tooling was wayyyy too complicated and confusing. All I wanted was to make a dead simple hello-world node app that let me write it in VS Code, and recompile the TS to JS every time I saved. Suddenly I had to learn about tsconfig.json, had to install nodemon and have a process running in the background that I'm sure to forget to kill later, and I have no idea how either tsc or ts-node plays into any of this... in the end I just decided to go with ES2016 and be done with it. Too bad, because I really like having type information available, especially for catching bugs. I enabled VS's ""pretend JS is TS"" setting so it catches some errors, but it's pretty hacky and not thorough, and I don't get to specify types in my program"	penpapersw	12.383364	-6.594409	comment	3.0	17.0	1501039920	-10.406521
14858661	Even though this could more properly	"Even though this could more properly be called, ""Why having language support for M:N thread multiplexing is important"", I thought it was a refreshing article on why I might actually use a bit of perl6.Last year I attended a conference and saw Larry Wall speak.  It was an overview of Perl 6 and I was completely underwhelmed.  Larry spent about half the time talking about unicode support.  It wasn't a boring talk, but I never felt a moment when I said, ""Awesome! This is a pain point in some other languages and I would pick up perl6 if this ever happened again.""I don't want to write perl6 completely off, but I have found that perl6 advocates have not done a great job on why you would actually want to use it.  It's hard to justify learning ""different"" syntax just because someone says, ""hey, it"	16bytes	12.32687	-7.046524	comment	3.0	17.0	1501092807	13.180933
14862270	Perl 6 carries 2 pieces of baggage f	"Perl 6 carries 2 pieces of baggage from its predecessor - prefixing variables with ""my"" to create lexical scope and the obligatory ""use v6;"" at the top of every script. Why can't an advanced language like Perl 6 scope variables without littering ""my"" everywhere? You don't see it in any other mainstream language I can think of."	cutler	12.326164	-7.0584326	comment	3.0	10.0	1501123210	13.18821
14863808	This is a huge bullshit article. RoR	"This is a huge bullshit article. RoR is not out it just is not sexy anymore and there are way more Java jobs than Ruby jobs.
Bootcamps are businesses like any others and they only care about making money. Of course they ditch Ruby/RoR if their customers want to learn the tech that is in demand. 
If you compare the raw numbers the only stacks worth learning are Java,C# and JavaScript."	holydude	12.702445	-6.9367313	comment	3.0	16.0	1501148539	12.330982
14864066	RoR is not out it just is not sexy a	RoR is not out it just is not sexy anymoreOf course they ditch Ruby/RoR if their customers want to learn the tech that is in demand.You seem to be agreeing with the article but disagreeing over phrasing?Ruby and Rails aren't special anymore, there's lots of other languages which can do the same thing but have huge advantages. Then again, that was the case going back to 2007 (Pylons is but one example - the Rails template on a better VM and with more libraries available and none of the bloat and magic). Rails has always been about hype and that hype doesn't matter when other stacks have 10x the performance and are just as productive.Brb, gonna go kill some zombie fcgi processes.	aaron-lebo	12.706895	-6.967483	comment	3.0	12.0	1501152013	12.357497
14865059	A few days ago a code school raised 	A few days ago a code school raised $85,000 USD on Kickstarter[0] to build a Rails application.Rails is really stable and has a battle hardened community around it. That's a good combo for teaching, learning and practical usage.When it comes to teaching / learning / real world usage, the last thing you want to deal with is 18 new versions of 5 different tools every month.[0]: https://www.kickstarter.com/projects/leotrieu/build-your-own...	nickjj	12.752294	-6.9205403	comment	3.0	10.0	1501162424	12.368808
14868056	How are you planning to deploy it? G	How are you planning to deploy it? Getting the benefits from Elixir/Phoenix seems to require much more old fashioned thinking: long-lived, mutable servers with direct interconnects, so none of that immutable infrastructure, or platform-as-service stuff.	jelder	12.730725	-7.3230553	comment	3.0	13.0	1501180123	12.85525
14873538	It might have been fine if elm-forma	It might have been fine if elm-format had chosen better defaults.Go chose tabs over spaces which are configurable in your editor, so everyone wins. Elm has other awkward style choices, like 'comma-first', and excessive line-breaks in-and-around statements. If they had less obnoxious defaults, people might be less bothered about this issue.And honestly, as a dev you work at a company for what, 3 months minimum. How hard is it to setup a .eslint file, vs. having to always write code in a style you don't enjoy.Universal consistency of code format just isn't that important, consistency within a team or company is what matters, and you don't lose that by allowing configuration.	allover	13.003091	-7.684678	comment	3.0	15.0	1501242675	-12.776059
14874360	We have a huge PHP codebase we may b	We have a huge PHP codebase we may be interested to bring into the .NET world. I have looked at Peachpie but I wonder how well it works in the real world and what the long term prospects are.Has anybody used it? The PHP code is full of questionable code which somehow works in PHP but I am not sure if it's possible to map PHP's behavior into .NET..	maxxxxx	12.700369	-6.625897	comment	3.0	22.0	1501251007	10.292515
14875524	A dotNet asp.net (Webforms, etc) to 	A dotNet asp.net (Webforms, etc) to PHP compiler would be more useful.Now that asp.net is end of life, these sad people are looking for ways to migrate their aging asp and asp.net code base to elsewhere. The only supported option is the incompatible new asp.net core on dotNet core - out of the jungle into the jungle.	frik	12.705597	-6.6255345	comment	3.0	10.0	1501260086	10.328072
14876871	I'm spending all my free time with P	I'm spending all my free time with Phoenix. I come from a Rails, Laravel, Django and a bit of .NET Core background. So far I am extremely impressed. I'm surprised it has not been adopted by that many folks in production.	fareesh	12.791005	-7.1122313	comment	3.0	36.0	1501270470	12.717433
14877379	We’ve been using Phoenix at my compa	We’ve been using Phoenix at my company in production for over a year now. So far the experience has been overwhelmingly positive, our team have totally come round to its adoption, our server costs have come down and our response times have gone down also.Coming from Rails, the ecosystem isn’t quite there yet, but it is far more mature than rails’ was this early on.The hardest thing for us has been deployment, but we’ve solved that internally, including giving back by building exrm_deb (it works with distillery too!) to compile the entire project into a Debian package.If you haven’t already looked at Phoenix (and Ecto!) give it a try :)	s0l1dsnak3123	12.775711	-7.1458273	comment	3.0	10.0	1501274261	12.696514
14877971	I wouldn't say I like things over C#	"I wouldn't say I like things over C#/.NET (I love C# and use it for mobile/desktop devel, but I've never used it for web).. but I'll list some things I like about Elixir:Erlang's concurrency model is amazing. It's like having micro-microservices running inside your virtual machine. And you can distribute across nodes. Nothing else really has this kind of thing.Pattern matching is beautiful and it's easy to use. Other languages have this too, so it's not like this is unique. This is one of my favorite things though; you can destructure things, you can pattern match inside a function using case, and you can pattern match on functions themselves like:    def say(""Hi""), do: IO.puts(""Hello"")
    def say(""Bye""), do: IO.puts(""Goodbye"")
    def say(_msg), do: IO.puts(""Where am I?"")

That's basical"	bratsche	12.548895	-7.4603677	comment	3.0	12.0	1501279358	12.89476
14878274	Even rails doesn't ship with an auth	Even rails doesn't ship with an auth module though. Lots of people use Devise and there is an equivalent for Elixir (Coherence)...but shipping with auth built in is an exploit waiting to happen IMO.	brightball	12.808367	-6.885969	comment	3.0	12.0	1501282985	12.34303
14878584	How are people hosting their Phoenix	How are people hosting their Phoenix projects? I'm used to Heroku or Laravel Forge. I don't really want to mess too much with servers.	Kiro	12.802508	-7.095727	comment	3.0	10.0	1501286490	-13.5000925
14877762	The beautiful thing about Phoenix fr	"The beautiful thing about Phoenix framework is that there is no ""one-true way"" to do things. Rails is omakase, Phoenix is not, and that's a good thing.You want the whole enchilada? Use Guardian.Need oauth? Use ueberauth.Just want email and password? Use comeonin to hash your password.It's liberating to know exactly how your system works and that it's not hidden behind some magical blackbox like Devise."	sergiotapia	12.818782	-7.059857	comment	3.0	19.0	1501277681	12.571997
14884391	>There are almost always better tool	>There are almost always better tools for the job than PHP, like Django, Rails, Go's net/http, etc. depending on the kind of thing you're writing.Except for the time when you are 10 times more proficient in PHP but none of those languages. Then no, none of those languages are better for the job.	icelancer	12.68311	-6.6453414	comment	3.0	12.0	1501387148	10.32624
14884632	it's really astonishing to see PHP s	it's really astonishing to see PHP still alive and kicking, despite all the backlashes it has received over the years. whatever it is they are doing, they must be doing something right.	jaequery	12.7747345	-6.619318	comment	3.0	25.0	1501395187	10.33412
14884778	I think that the cheap VPS is the ul	"I think that the cheap VPS is the ultimate cause.15 years ago (when, BTW, Python was already a thing) you _had_ to use PHP, unless you had extra money to spend on a more ""scalable"" technology (so enterprises, who had money, frequently chose Java). It was a monopoly like JS was/is a monopoly - you want to write code for a browser - you'd better know JS. Now, between AWS and DO, you can with relative ease start up in Go, Node, or Python, and there's no need for PHP."	greenhouse_gas	12.732675	-6.5947356	comment	3.0	10.0	1501398060	10.2713375
14884809	PHP has some design decisions (e.g. 	PHP has some design decisions (e.g. shared nothing architecture) that used to be laughed about - nowadays it's obviously known as a big advantage - PHP can scale linearly with no overhead.[Edit: read what Slack devs wrote about PHP, their server side is written in PHP https://slack.engineering/taking-php-seriously-cf7a60065329 and beside that Facebook uses PHP/Hack and MySQL as core tech)The syntax is inspired by Perl and C family (C/C++ and Java) and many functions one knows from C family are inbuilt. The advantage, it's friction free, hassles about memory management, dynamic typing allows rapid development, experience, etc.The focus of PHP is all around the web, it was the first successful language designed for the web. All inbuilt functionality has been carefully selected, everything is	frik	12.752349	-6.605565	comment	3.0	11.0	1501398625	10.3163395
14885001	> Its position as the #1 web server 	"> Its position as the #1 web server language has already been taken over by nodejsHow so? Because when I put a PHP script on a server with ""<?php echo 'Hello world' . date('Y' time()); ?>"" that is a one-liner and I'm sure it'll work for the next 20 years.With nodejs, I have to implement the whole webserver and then my web app is also a server, even if it's ""only"" 20 lines of code and I need other tools to make sure that this server never crashes or automatically reboots and all that stuff.Imho, the main benefit of PHP is: You can write a script today and because the language is mature, it doesn't change all the time and you can be quite confident that it'll keep running for another decade."	WA	12.6554165	-6.532254	comment	3.0	11.0	1501403316	10.25651
14889776	It is a while I don't code in elixir	"It is a while I don't code in elixir however when I was learning the complex part definitely wasn't the one in this course.The complex part is to start to think about decompose a big problem into smaller problems solvable by different Erlang modules.
When to spawn another process or when to re architecture the code.Really great work but I would go a little bit ahead and add some more specific Elixir/Erlang part.Also what really really helped me was to understand how a GenServer was written, it may be worthed to make the student write its own limited version of a GenServer..."	siscia	12.646177	-7.476236	comment	3.0	12.0	1501480492	12.930015
14890089	That doesn't handle custom JSON sche	That doesn't handle custom JSON schemas at all. I don't know much about Elm but at work in Haskell we mostly write FromJSON instances manually. It's probably the same amount of code as the data type definition.	kccqzy	12.969124	-7.57501	comment	3.0	11.0	1501485718	-12.728067
14890305	> making very heavy use of Ajax call	> making very heavy use of Ajax calls to a JSON-based RESTful APIand then> Want to decode some JSON? Hard, especially if the JSON is heavily nested and it must be decoded to custom types defined in your application. Doing this will require an understanding of how JSON decoding works in Elm and will usually result in quite a bit of code (our application contains over 900 lines of JSON decoders alone).What a great pragmatic language	dmitriid	12.972559	-7.6202064	comment	3.0	40.0	1501489496	-12.738212
14891829	     For an average JS developer Elm	"     For an average JS developer Elm is totally alien tech compare to React or Angular

To turn your argument the other way.
The JS landscape, where ""trendy"" libraries change every few months, is also alien to anyone that doesn't keep with the latest libraries every few months. Is that not worse?
I don't have to explain ""JS fatigue"", it's a fact.For example, I just got into a new team, and I have to now use what they use. 
I've been doing JS for 4+ years, and that stack I'm facing now, is alien and confusing to me. 
I have to invest time and learn what the hell those redux-sagas are, or what ""magic"" create-react-app tools hide, and in general, it's very confusing so far.With Elm, I spent a few weeks 1 year ago to learn the language, and that was it.
All the libraries are very simple to use"	antouank	12.932754	-6.7395883	comment	3.0	15.0	1501508444	8.603043
14892346	Wow!  Awesome to see Elixir School h	Wow!  Awesome to see Elixir School here.  I'm the creator, happy to answer any questions or listen to feedback!We've got a lot of big things coming this year.  A whole new site, new lessons, and a few exciting new additions.	doomspork	12.704157	-7.436425	comment	3.0	14.0	1501511777	12.920809
14895712	is there any news recently about Eli	is there any news recently about Elixir? I'm asking since recently Im seeing a lot of articles about how to get into Elixir which is really nice since I just started pickup the language as well.	beedn	12.6929035	-7.449973	comment	3.0	16.0	1501533675	12.9448
14896877	I feel that Erlang adoption is proba	I feel that Erlang adoption is probably the most realistic growth path for most serious Elixir developers.  All of these topics you mentioned (breakers, message routing, etc) have been discussed and developed in the Erlang community for years.  The only new thing that Elixir brings to the table in these areas is abstraction and syntax - both of which are arguably not needed in large complex systems.Source: full-time Erlang developer of 7 years who spent a full year coding Elixir in its v1.0.x days	jah	12.639311	-7.4827194	comment	3.0	13.0	1501545466	12.936178
14897034	I have first hand experience with th	I have first hand experience with this actually...Over the last 6 months or so a good friend of mine has learned to code from scratch. After much deliberation I took a gamble and set him up with Elixir as his first language (largely because he wanted to code so he can work with me on some projects, which use Elixir).I am really happy with this choice and so is he. Elixir is a language with very consistent ideas throughout and I think concepts like functional transformations, immutability, pattern matching and actor based concurrency are both extremely useful to learn early and very accessible to beginners in Elixir.Edit:I didn't think of it when I wrote this comment, but I think the single most helpful thing for beginners (and me!) in Elixir, is the 'h' function. If you run it with any fun	zensavona	12.645372	-7.4617825	comment	3.0	10.0	1501547524	12.931207
14929442	Want to affect the way you think abo	Want to affect the way you think about programming?Learn Prolog.	miguelrochefort	13.144595	-7.2928762	comment	3.0	10.0	1501860803	-12.43137
14932628	From crystal-lang.org, Crystal is a 	From crystal-lang.org, Crystal is a compiled languageI never understood the phrase compiled language.	sigjuice	12.624822	-7.2685537	comment	3.0	22.0	1501883449	-11.226912
14935705	Yes, I understand, I was just wonder	"Yes, I understand, I was just wondering if Erlang would be considered a ""proven language"".From my (limited) Erlang experience, Erlang & Elixir have the same core functionality. Elixir has a ""nicer"" syntax (I prefer Erlang's syntax but most devs I've talked to like Elixir's).So if Elixir isn't proven but the concurrency model & programming paradigms make sense, maybe Erlang is a good choice.* WhatsApp Scaling to 1 Billion users in erlang: https://www.youtube.com/watch?v=c12cYAUTXXs
* https://www.erlang-factory.com/upload/presentations/395/Erla..."	hellbanner	12.608506	-7.496768	comment	3.0	15.0	1501941428	12.944312
14935715	Don't use. You're gonna be in big tr	Don't use. You're gonna be in big troubles to recruit developers who knows that tech.It's already an issue with Erlang. It's made 10 times worse with Elixir.	user5994461	12.629996	-7.4811215	comment	3.0	16.0	1501941480	12.93354
14935856	I'm a bit biased in my development p	I'm a bit biased in my development perspective and a bit jaded with the state of back-end development, but here goes:I've done a decent amount of Elixir in prod over the last year and a bit and I've found the lack of a decent, modern static type system pretty frustrating. I love the idea of failing fast, but most of the time we're throwing 500s from trivial developer mistakes (and yes, we do TDD). Lazily evaluated libraries like Streams or Ecto.Multi explode in weird, non-local ways because the types are not checked at the call-site, making refactoring and iterating a chore.I have tried out Dialyzer, but it lacks many things you would expect from a modern type system (eg. parametric polymorphism). While experimenting with it I've been able to get it to accept trivially broken programs with	bjz_	12.337284	-7.4573402	comment	3.0	11.0	1501943000	12.91159
14940960	Talla – An Erlang Implementation of 	Talla – An Erlang Implementation of Tor [video]	jacquesm	12.465518	-7.5122375	story	3.0	180.0	1502021125	-9.414718
15005149	I also enjoyed the article but came 	I also enjoyed the article but came away with absolutely no desire to ever use or encounter perl6.	breatheoften	12.347964	-7.0470304	comment	3.0	11.0	1502661045	13.189031
15017057	I'm surprised no one has mentioned R	"I'm surprised no one has mentioned Ragel: http://www.colm.net/open-source/ragel/Ragel generates very fast code, is modular by design and has good error handling. It supports both compiled and scripted languages (e.g. can generate both Ruby and C) which is useful if you need a fallback.I've really enjoyed using it to implement the following:- A template language for Ruby: https://github.com/ioquatix/trenni/blob/master/parsers/trenn...- A SGML parser for Ruby: https://github.com/ioquatix/trenni/blob/master/parsers/trenn...- A HTTP V1 protocol parser: <a href=""https://github.com/kurocha/async-http/blob/master/source/Async/HTTP/V"	ioquatix	12.500482	-6.991789	comment	3.0	16.0	1502794911	12.374837
15018268	This seems to be the case in many pl	This seems to be the case in many places outside of Rails. I know that Clojure, at least, seems to encourage implementing things yourself by way of leveraging smaller libraries and modules.Auth is genuinely hard, and turnkey solutions often aren't enough.	rpazyaquian	12.701728	-7.6252785	comment	3.0	12.0	1502806021	12.378853
15036399	I don't think the Gartner hype cycle	I don't think the Gartner hype cycle applies to Elixir, and I think that is largely because it is built on top of a very mature, production-tested platform (Erlang OTP). I have been using it in production for almost two years without issue on https://teller.io/, so if the GHC applies, it's very elongated!	sjtgraham	12.682006	-7.4609084	comment	3.0	11.0	1502975380	12.934033
15036689	You can look into drab, an elixir se	You can look into drab, an elixir server-side DOM manipulation library: https://github.com/grych/drab. I've never used it, but many people in the Elixir community think it holds a lot of potential.	randomstudent	12.659301	-7.335549	comment	3.0	13.0	1502977501	12.889205
15037019	Well, I just started learning Erlang	Well, I just started learning Erlang... hopefully this doesn't affect that D;	Exuma	12.564613	-7.527371	comment	3.0	11.0	1502979826	12.921981
15039554	I also come from Clojure and Erlang 	"I also come from Clojure and Erlang and, tbh, couldn't get into Elixir for various reasons (I've followed the development closely since its inception):* Most of the Elixir community comes from the Rails world, so most of the libraries focus on the web.* Coming from the Ruby world, a lot of these new developers tend to be ignorant of the underlying Erlang machinery, believing that Elixir is the magic that makes Erlang a ""modern"" and usable language, which is simply not true.* The tendency to favor frameworks over libraries.* I'm probably alone in this one, but I find the syntax off-putting. It adds lots of sigils and complexity to Erlang's very succinct syntax.* In the end, I think Elixir adds very little besides the excellent tooling to the Erlang ecosystem."	rlander	12.635951	-7.484002	comment	3.0	10.0	1502995193	12.939477
15043445	That's... not true. You mention Kotl	That's... not true. You mention Kotlin, that was developed by JetBrains as a better language to develop Intellij and plugins.Hack/HHVM was developed by Facebook to modernize PHP.There are plenty of cases where organizations successfully developed their own languages/compilers that gave them advantages. It's insane only if you have no good reason to do it. This sounds like they have a need: compile times are slow.	carlosdp	12.762811	-6.649538	comment	3.0	11.0	1503028737	10.2937765
15044749	I started learning Erlang a few mont	I started learning Erlang a few months ago and after spending a week with the online class at Future Learn [0] I can understand why some people say Erlang is more readable than Elixir.I know if you're coming form Ruby world, Erlang almost feels second nature. However, for people coming from other languages, I recommend looking into Erlang as well. It's more expressive, IMHO.[0]  https://www.futurelearn.com/courses	salimmadjd	12.635801	-7.482138	comment	3.0	10.0	1503048632	12.936264
15052777	If the author wishes to continue wit	If the author wishes to continue with js/react/redux then he needs to pick up a library like immutable.js to cut down that immutabiilty helper crap.However, there is a better way ... lein new figwheel my-app, clojurescript+reframe gives you all the benefits of redux with an order of magnitude less boilerplate (also hot reloading and immutability by default without no extra setup or ceremony)	joncampbelldev	12.954985	-6.449911	comment	3.0	25.0	1503141665	8.626984
15064127	A supercompiler pass for Erlang	A supercompiler pass for Erlang	bryanrasmussen	12.531818	-7.503721	story	3.0	152.0	1503319374	12.90038
15064810	"""Not that the Futamura projections c"	"""Not that the Futamura projections can be used with erlscp yet, but, you know, just in case that day ever comes. A man can dream.""I feel like this is the lament of every compiler author."	DonbunEf7	12.485093	-7.4924994	comment	3.0	19.0	1503325332	12.897099
15080428	I'm not sure I'm understanding the p	"I'm not sure I'm understanding the point behind this. If the main point is to allow people to reuse components (i.e. a calendar widget) across frameworks, then good, but it's going to be quite messy when things start to get complicated and we start hitting integration problems, because some guy on the Internet writing a widget is not going to test & maintain it on all frameworks.It also bothers me the whole Typescript deal. I might be wrong, but I don't want to have Typescript installed & integrated into my build process so I can use a widget. The only way I can see this working out is that I suck it and follow the Typescript paradigm or widget creators can distribute their widgets on some sort of ""built"" pure JS file, something like JAR files... and we know how well that goes."	ubersoldat2k7	12.399743	-6.6460485	comment	3.0	16.0	1503486951	-10.476701
12538439	I would have switched to typescript 	"I would have switched to typescript but I had to rename EVERYTHING from something to something else in order to use TypeScript. If that's how ""compatible"" starts, well, no thanks cause clearly that's just the start of the pain.Compatible should be same files, new compiler = ""just works""."	forgottenacc56	12.372249	-6.812599	comment	3.0	10.0	1474368066	-10.458785
12539450	Why waste your time with half-baked 	Why waste your time with half-baked type systems that try to achieve some compromise over JS idiosyncrasies.Go all in with purescript[0] :DSimple, elegant, strong typed and compiles to JS.[0]: http://www.purescript.org/	HugoDaniel	12.331003	-6.785043	comment	3.0	12.0	1474379466	-10.443594
12539633	On the other hand, Flow is removed f	On the other hand, Flow is removed from the code transformation, so it doesn't have to bother with keeping up with the spec. That's a pretty strong point in Flow's favor in my opinion, single responsibility principle and all that :)	vcarl	12.372026	-6.614912	comment	3.0	13.0	1474380947	-10.408837
12540592	> I do TypeScript every day for work	> I do TypeScript every day for work, and honestly I don't see the point of it.really? I'm assuming you never refactor anything.	icholy	12.339815	-6.8216343	comment	3.0	12.0	1474387704	-10.473134
12546797	Which is why for certain things like	Which is why for certain things like `brew --prefix` we now do it purely in Bash rather than using Ruby ;)	mikemcquaid	12.499064	-7.048284	comment	3.0	15.0	1474452526	12.388522
12558886	I suppose the problem is that I see 	I suppose the problem is that I see typescript as the fragmentation. If MS leverages babel (they can even keep shipping TS as their own thing if they want, I just want them to provide babel plugins), we can all use that and focus on making it as cross-compatible and streamlined as possible. (Well, really, we can focus on providing a single well-documented on-ramp to new javascript developers, which I think is the main problem and the one MS set out to own with typescript.)Right now, we have the typescript ecosystem, the babel ecosystem, and the other wannabe ecosystems. If I like Typescript's type system but want to use babel for async-await (for instance, I'm aware it's in TS next), I'm basically SOL. Babel has more end-users (AFAIK), generally has the first/only implementation of <featur	easong	12.390769	-6.6501317	comment	3.0	15.0	1474568212	-10.441934
12558030	I can't wait to use some of the new 	I can't wait to use some of the new features in our production apps.  Typescript is/was my bridge into javascript development, because IMHO javascript was a broken language for a long time, and I am not sure if I could have ever done as much as I have without its existence.Non-nullable types, tagged union types, and easy declaration file acquisition are definitely the biggest wins for me with this release.	edroche	12.366926	-6.7623158	comment	3.0	38.0	1474562063	-10.455154
12580893	For me the biggest problem with SO i	For me the biggest problem with SO is that it's hard to get answers to advanced questions in some areas. Not a lot of people could answer the question in the first place, because it's about some obscure and rarely encountered problem, and these experts are constantly spammed with basic questions from inexperienced programmers. Though it depends on the area you're interested in - I've got almost no answers to advanced Rails-related questions and got pretty good responses to Scala-related stuff I'm interested in (but maybe it's because Scala questions were about more basic stuff)	pavlik_enemy	12.721535	-6.9545364	comment	3.0	11.0	1474889024	-0.5157772
12596596	Should we switch from CoffeeScript?	Should we switch from CoffeeScript?	vpj	12.421205	-6.58319	story	3.0	4.0	1475058252	-10.533278
12610494	The most underrated feature of TypeS	The most underrated feature of TypeScript is not the language itself, but the transpiler. With the flick of a switch you can support ES3, ES5 and in future ES6 and beyond - without changing your code (not entirely true, but it is possible to write code that transpiles well to all JS standards).Decoupling your development from the shifting sands of JS support - across multiple browsers and platforms - is a dream come true, and a good enough reason alone to use TS.	smegel	12.387028	-6.7196918	comment	3.0	28.0	1475209023	-10.452028
12611470	If I were to start a new project tod	If I were to start a new project today, I would use Elm[1] for the front-end. It's a very well-designed language (reminiscent of Haskell), specifically designed with HTML and DOM manipulation in mind.[1] http://elm-lang.org/	winter_blue	12.92308	-7.6097474	comment	3.0	11.0	1475229295	-12.721705
12628376	No, Express is much closer to Flask 	No, Express is much closer to Flask than Django. One of my biggest gripes with Node is that there's really no equivalent to Django/Rails in terms of developer productivity and best practices.	morgante	12.673315	-6.4888754	comment	3.0	19.0	1475509612	9.986288
12635478	Sorry, I'm confused: what do you mea	"Sorry, I'm confused: what do you mean by ""migrated a 5 year old codebase from Rails to React""? What are you using as your backend?"	enraged_camel	12.80973	-6.6021485	comment	3.0	11.0	1475589122	12.275253
12635640	Is this only a problem with Java fra	Is this only a problem with Java frameworks? (The hammer-factory-building-factory talk leads me to believe that).I stared learning Django a few years ago and have never looked back, it has increased my productivity loads. Admittedly its reasonably opinionated about the style of app you are building (but it covers the majority of apps and you don't need to use every part of the framework).	collyw	12.814646	-6.513986	comment	3.0	14.0	1475590442	10.046636
12652170	"""Those days are dead and gone and th"	"""Those days are dead and gone and the eulogy was delivered by Perl."" -- Rob Pike (in 2004, no less) [1][1] https://interviews.slashdot.org/story/04/10/18/1153211/rob-p..."	0xcde4c3db	12.345473	-7.0391064	comment	3.0	13.0	1475759919	13.163799
12667912	I feel like people are somewhat awar	I feel like people are somewhat aware of prolog but it's cousin datalog that's a db query language is much less widely known. I don't have too much experience with it but it seems like one of the technologies of the past that's superior to current alternatives but for some reason didn't take off.	adamnemecek	13.174395	-7.126609	comment	3.0	12.0	1475949747	-12.4436865
12668712	I had a Prolog course at university;	I had a Prolog course at university; it was interesting, but... very weird. (There's a joke that writing a compiler in Prolog is trivially easy; but writing a compiler in Prolog that does anything other than say 'No.' when given an invalid program is infeasibly hard.)I generally found that while getting Prolog to do cool things was fairly straightforward, getting Prolog to do cool things quickly involved knowing precisely where to put cut operators, and that was basically black magic. But it's been a while.BTW, our Prolog lecturer wrote a theorem prover in it. That's pretty straightforward; we all wrote theorem provers in it as an exercise; but his theorem prover had a polished MacOS GUI, and that was also written in Prolog. He was writing low-level MacOS stuff in raw Prolog. To this day I	david-given	13.146907	-7.294769	comment	3.0	13.0	1475960463	-12.489624
12669095	In my opinion, Prolog is a horrible 	"In my opinion, Prolog is a horrible programming language.
BUT...
The idea of logical programming has much promise. Not for programming, but for running queries on a knowledge base. In fact, unification / lambda calculus is arguably the only way you can make complex logical deductions without a brute force approach (you could also use machine learning, but that would not scale for queries with many variables).The only problem is, the domain in which this is useful is fairly small, and requires an explicitly defined knowledge base, whereas things like machine learning are very flexible and cover a broad variety of domains pretty well. One area I think it holds promise for is in games - imagine characters being able to make deductions about the world around them, and react appropriately - bey"	gavanwoolery	13.146758	-7.2912016	comment	3.0	12.0	1475967412	-12.488571
12670056	I've seen multiple examples of prolo	I've seen multiple examples of prolog over the years.  From looking at them, one gets the idea that you must hardcode all your data into your program and the only UI is a somewhat odd shell, with no way to actually send input in or get output out.  It gives the impression of a neat idea that is a cool academic toy but not a practical language for real-world use.  I think that it would be helpful if more prolog intros had a simple example that read a CSV file or JSON object or something, processed it using the defined rules, and output the results to text or HTML file.  That's a minor thing, but I think that it would give a better impression and get more people interested and trying it.Of course intros to other languages may gloss over I/O as well, but with mainstream imperative languages (	Falkon1313	13.147869	-7.2928796	comment	3.0	24.0	1475992549	-12.485769
12675908	I have never succeeded at installing	I have never succeeded at installing any Ruby software in one go.	edem	12.604235	-7.051546	comment	3.0	11.0	1476089496	12.383167
12681482	As someone who develops in PHP, and 	As someone who develops in PHP, and continues to be generally annoyed by the way many HN commenters will dismiss the language out of hand, I really hate to be the one saying this.However, while PHP has come a long way and modernised significantly in terms of development practise, WordPress is really not an example of that modernisation. It may have applications for a basic blog, but I find it very difficult to take a Wordpress-built project seriously when it's supposedly aimed at developers and includes auth/signup + handling user credentials.	lucideer	12.770914	-6.635371	comment	3.0	13.0	1476152927	10.32689
12704040	Well this is seriously making me ret	Well this is seriously making me rethink my opinion on the PHP workflow, if Hack is as much of a game changer as the article claims? Could anyone here comment on their experiences with it, and its pitfalls?	phreack	12.776462	-6.6263843	comment	3.0	10.0	1476392883	-3.7622733
12704092	I'm currently hesitating between PHP	I'm currently hesitating between PHP and Node.js for a new side project and I'm leaning towards PHP simple because I could do it 50% faster due to my experience with it.	kowdermeister	12.702358	-6.5384526	comment	3.0	24.0	1476393306	10.245533
12704337	I find the virtues quite uncompellin	I find the virtues quite uncompelling, take for example>First, state. Every web request starts from a completely blank slate.Except for, you know, when you don't want to reinitialize everything everytime someone makes a new request. There are tons of things that you only need to run once.>I claim that PHP’s simpler “think; edit; reload the page” cycle makes developers more productive. Over the course of a long and complex software project’s life cycle, these productivity gains compound.I cannot disagree enough with the conclusion he draws from the quick feedback loop in PHP. I do PHP in my day job, because that's what our codebase is in, but recently I finally got the opportunity to use Haskell for a side project. The feedback-loop might be slower (honestly not by much, automatic reloading	Tehnix	12.7484045	-6.640823	comment	3.0	13.0	1476395248	10.331143
12704836	It's not the decoding and encoding s	It's not the decoding and encoding stuff, every language has that, but the difference in accessing the data.$data['key']['value'][0] is a lot messier than data.key.value[0]. Ruby has ways of mitigating this, but you pay a performance penalty.	astrodust	12.403307	-7.0164948	comment	3.0	12.0	1476399334	12.366338
12704970	I'm surprised no one has posted this	I'm surprised no one has posted this fairly thorough criticism of PHP from a few years ago https://eev.ee/blog/2012/04/09/php-a-fractal-of-bad-design/	mrmagooey	12.821919	-6.7027383	comment	3.0	10.0	1476400456	10.482975
12705070	"I don't like the term ""garbage langu"	"I don't like the term ""garbage language"". People use to praise languages like Ruby or Python which don't even have private fields or type hinting the PHP has. Ruby libraries use approaches like monkey-patching classes in other modules. And if we look at Javascript, it is even worse than Ruby. How do you call Javascript if PHP is ""garbage""?"	codedokode	12.564689	-6.573953	comment	3.0	41.0	1476401560	8.33821
12705373	At least this one isn't ripping it t	At least this one isn't ripping it to shreds (so far). The other discussion...that was rough to read as a PHP dev.	toxican	12.767893	-6.624823	comment	3.0	22.0	1476405262	10.281133
12705921	Can you set up Python to have the sa	Can you set up Python to have the same pattern as PHP? I've always had to proxy the web server to the Python process running HTTP.	ryanlm	12.523658	-6.5740485	comment	3.0	11.0	1476414687	10.157276
12706250	Write an API for my client app which	"Write an API for my client app which returns user's data as JSON (or render HTML page for profile);You:<!-- api.php -->{<?phpmysql_connect(""host"", ""pass"");
mysql_select_db(""users"");$uid = $_GET[ ""uid"" ];$res = mysql_query( ""select * from users where uid = $uid"" );$ar = mysql_fetch_assoc( $res );echo ""name: "" . $ar[""name""] . "","";
echo ""location: "" . $ar[""location""];?>}<!-- end of api.php -->Just call it http://domain.com/api.php?uid=USER_ID( Yeah I know you want to scream and say all the things about this code, but this is kind of code you would encounter with PHP, most of the time it's more horrifying than this one. )People use it PHP for this reason, If you want to make same functionality in another language you need to setup an app and all the necessary things that protect you from garba"	menelaus35	12.804083	-6.530054	comment	3.0	15.0	1476422197	10.324539
12705232	There are plenty of great server-sid	There are plenty of great server-side languages and environments. C#,Java,Scala,Python,Ruby,Haskell.If this was about JavaScript and Front-End I might've agreed with you (there are transpilers but interoperability with JS modules can be tricky), however in the realm of servers there's so much freedom.. so why choose PHP out of them all?	NMDaniel	12.720801	-6.5986056	comment	3.0	12.0	1476403336	10.288788
12705250	> Can you give a specific example wh	"> Can you give a specific example where you think you need dynamic types? The diff operation you described sounds like it could be made generic pretty easily.How do you figure? This would require macros or runtime type introspection.A specific example might be ""serialize this json type without having to annotate the fields with how to serialize them""."	duaneb	12.353542	-6.445981	comment	3.0	14.0	1476403559	-8.86277
12705745	> It's a garbage language, and you k	"> It's a garbage language, and you know it. But it allows you to get something up and running, so dang quick.PHP didn't succeed because of the ""language"" part. It succeeded because it was limited and focussed to just being a tool to write small web-apps in a short time.It did one thing and did it better than anything else of the same era (I built CGI apps in C, Perl and Python before discovering PHP).It was just files, that you ftp-d in and it just worked.99% of the friction is in writing the first thousand lines of code and PHP meant that nearly all of those lines was business logic, not unescaping POST data or parsing GET parameters.PHP doesn't remove your ability to think clearly. It is true that it does not provide helpful additions for algorithmic work, but it does not put challenges "	gopalv	12.772921	-6.640467	comment	3.0	13.0	1476411602	10.314479
12708589	Funny that people complain about js 	Funny that people complain about js performance. In this benchmark it was 3 times  as fast as php7 and about 7 times as fast as java 8. Have not checked the details of the benchmark yet.	jbergens	12.65195	-6.631952	comment	3.0	11.0	1476457959	10.318174
12708802	PHP is the Toyota Corolla of program	PHP is the Toyota Corolla of programming languages.  Not many are passionate about the Corolla, but it's one of the most widely driven cars in America.I challenge you to come up with a better car analogy.	hotsy_botsy	12.759842	-6.6446595	comment	3.0	35.0	1476459620	10.342512
12711850	According to that, they're replacing	According to that, they're replacing PHP with Hack and HHVM.HHVM is backwards compatible (so runs your PHP, lets you include it from Hack, etc) but it's hardly a vote of confidence in PHP, the language.	oliwarner	12.760971	-6.639317	comment	3.0	14.0	1476488345	10.321246
12718255	I think JS will do quite well as JS 	I think JS will do quite well as JS becomes the back end scripting language over time (in place of lua for example.)I don't see a bright future for ruby, I think it had some lead advantage, but RoR/opinionated-design really cut down the options for innovation with a Ruby based web dev group. It is interesting to see how diametrically opposed philosophy of Ruby the language is from the RoR community, it is like Ruby created a liberal blank space and RoR immediately filled it with conservative inflexibility.Php is in an interesting position, but I think ecommerce systems catching up and offering more integrations will erode its position. It is very expensive to hire and retain loyalty on a php project, especially when it is of any complexity since anyone who will tolerate it and understands 	languagewars	12.683436	-6.8705664	comment	3.0	10.0	1476619936	12.277304
12718753	At the very least, Elm code should b	At the very least, Elm code should be compatible with Google's Closure compiler (just like Clojurescript). There is no reason the Elm folks should try to re-invent the wheel on this, just harness the power of the Closure utilities by making your emitted JS standardized and compliant. Then you get all sorts of things for free, like dead code elimination, just for starters. The Clojure team realized this from the start and it has done a lot for the cljs ecosystem.	hellofunk	12.915236	-7.6851606	comment	3.0	16.0	1476628405	-12.688837
12719464	I hope Elm doesn't get too closely t	I hope Elm doesn't get too closely tied with Elixir. It's a great language no matter what backend you choose.	leshow	12.998489	-7.6788306	comment	3.0	10.0	1476636189	-12.767932
12727943	Interesting discussion. Thanks for p	"Interesting discussion. Thanks for posting.As I've gotten to learn many different languages (PHP, Ruby, Go, Java, Python, etc) over the last 10 years, it has been really interesting to see how different languages and communities can vary so wildly in their quality of documentation.As it relates to programming languages, Go's ""Tour of Go"" (https://tour.golang.org/welcome/1) is an excellent introduction to the language. I wish every language had an intro guide as good.In terms of frameworks, I absolutely love the Ruby on Rails guides. They strike the right balance between staying high level enough for me to build a mental model of how the framework is working under the hood, while getting deep enough to be useful to solve individual problems I have.Overall, I think the Ruby community has don"	1_800_UNICORN	12.608541	-7.0082865	comment	3.0	10.0	1476729854	12.372977
12740047	On the landing page you may see a co	On the landing page you may see a computer screen with PHP code, but they just offer JAVA and .NET SDK right now, fun fact!	vitobeto	12.64297	-6.54133	comment	3.0	10.0	1476838005	10.288139
12741528	For me what's striking about Erlang 	For me what's striking about Erlang syntax is the meaning of the semi-colon and the period, as function clause separator. Most of the rest is just vanilla FP lang syntax.	old_sound	12.503173	-7.4668927	comment	3.0	17.0	1476857967	-12.122005
12795592	If it is super important, I write it	If it is super important, I write it down in a hard bound journal.  I find things get lost in digital note keeping apps.  Yes you can search, but there is no structure to the data so you get back a whole bunch of unordered keyword matches.I often thought that store some information as Prolog facts would make it more accessible while being somewhat structured.  I have not had time to build a proof of concept on this.	tmaly	13.156643	-7.2227	comment	3.0	10.0	1477481392	-12.467414
12797804	Reminds me of PHP back in the day. D	Reminds me of PHP back in the day. Doesn't work? chmod -R 777 /var/www	nathancahill	12.72961	-6.5871134	comment	3.0	15.0	1477499089	10.285225
12814840	I've been learning AngularJS 2 for a	I've been learning AngularJS 2 for around 2 weeks now, and I see why they push use of Typescript. They always have. AngularJS 2 was designed from the start to be typed. To be object-orientated. At the least be object-inspired. It makes sense to be consistent. Using a non-typed and functional-structured language for a typed and object-orientated framework is pretty dumb in my eyes.To digress a little, AngularJS 2 has been awesome, and at times can be simpler than React. The .js and .js.map file bulk with every .ts file is stupid though.However...Routing in AngularJS 2.It is bad.Very bad.	SamUK96	12.538137	-6.6696577	comment	3.0	16.0	1477654649	-10.4401245
12849875	What I find unusual is they publish 	"What I find unusual is they publish tutorials when there are plenty of good sources such as Railscasts, but its like the last 10 years doesn't exist to them and they rehash tutorials.I think it's normal. I've seen it a lot amongst people who are actively learning. It was common in the late 00s in the Ruby world, and is currently common in the JavaScript, Elixir, Rust and Go worlds. It doesn't matter if they're ""rehashing"" - they're writing stuff as part of the learning process, we haven't got to read it, and I can only celebrate their enthusiasm. (Plus, on some topics, it's handy to have tutorials rewritten for the latest OS and database versions, etc, anyway since things always change slightly.)"	petercooper	12.701751	-6.984144	comment	3.0	10.0	1478033179	12.373476
27537445	I used it as a quick html server as 	I used it as a quick html server as an alternative to the Python “simple” ones, which always had some issues for me.Useful when coding small demos:  php -S localhost:8000	agys	12.702971	-6.635366	comment	3.0	13.0	1623919558	10.279519
27537736	I don't even understand why they inc	I don't even understand why they included PHP in macOS to begin with. Perl? Python? I can understand, they are used by millions of projects and tools. But PHP? I've never seen a single CLI tool written in PHP, except the Phoronix Test Suite.	qalmakka	12.652937	-6.6799707	comment	3.0	12.0	1623922031	10.351783
27540166	I am teaching a web-development cour	I am teaching a web-development course with PHP at university. Since PHP was preinstalled on MacOS in a ancient version, it was extremly hard for freshmen to get their mac prepared for the exercices. Windows users had a very simple start, basically just downloading and extracting a zip file from php.net... This seems to be good news for me, however most students have older macs so this will propably take some time to take effect...	la_fayette	12.730577	-6.6201553	comment	3.0	23.0	1623941391	10.332108
27540481	‘brew install php’ works across most	‘brew install php’ works across most ages of Macs and provides consistent paths for config files across deploymentd, in case that’s useful.	floatingatoll	12.633317	-6.553959	comment	3.0	14.0	1623942907	10.253221
27546928	> More readable and writeable, and p	> More readable and writeable, and probably more popular in the past fifteen years.You're confusing PHP's general popularity for web development with it's popularity as a command-line scripting language. There's no way PHP is more popular than Perl for non-web scripting. Unlike Perl, PHP was never designed as a general purpose language.Try writing a PHP script which has to parse command line options. It ain't pretty. Python, Ruby and Perl were designed for this. PHP was not.PHP is extremely fast for scripts written in raw, procedural PHP but its shared nothing design makes it a liability with large frameworks such as Laravel and Symfony. In many tech empower benchmarks Django and Rails are listed ahead of Laravel.	cutler	12.641581	-6.7222605	comment	3.0	11.0	1623984999	13.074507
27550205	Is this not almost how logic program	"Is this not almost how logic programming (prolog, etc.) works? You tell the language some things which are true, and then it'll be able to infer answers to ""questions"" you ask:https://wiki.c2.com/?LogicProgramming"	oats	13.088133	-7.229216	comment	3.0	11.0	1624023849	-12.475433
27567287	1. Some modern PLs and frameworks ar	1. Some modern PLs and frameworks are making ffi easier, without requiring writing manual wrappers, or using a code generators. I can't recall project names now, but they do exist. But yes, they're not widely used or supported.2. BEAM (Erlang VM) has several native mechanisms to communicate with the outside world (both in-process and out-of-process). In-process ones: linked-in drivers (.so/DLL), NIFs (.so/DLL, like JNI), dirty schedulers. Out-of-process: ports (external executables), C-Nodes/JInterface (an Erlang cluster node interface can be written in any programming language, not just C or Java). See [1].3. Morphing into a Single Image System OS would be ideal evolution for the cloud vendors. I don't think Mainframe or Heroku-style PaaS are good directions, though. I have many ideas in 	nivertech	12.518345	-7.490833	comment	3.0	11.0	1624165867	12.862541
27567462	People don’t go full sheep mode. The	People don’t go full sheep mode. They just invest in an ecosystem, and don’t want to waste time looking for a new hammer.Part of what has also kept Ruby lagging is also cultural. It’s not a language that was ever adopted by engineers but rather artists, and it took a while for these artist types to realize performance actually matters.Python, on the other hand, always had an avid base of CS oriented folk that helped drive the language forward technically. Ruby instead only had Rails, which was a productivity marvel rather than a technical one.	fny	12.501076	-7.03505	comment	3.0	10.0	1624167883	-1.1193277
27567027	Andrew Kane seems to be one of the m	Andrew Kane seems to be one of the most productive Ruby developers out there - he has a ton of open-source gems that solve real-world problems: https://github.com/ankaneHe's done a lot of the hard-work for creating the tooling in the first place - the community can step in from here.	forgingahead	12.643559	-7.041966	comment	3.0	15.0	1624162540	12.357328
27567366	But will the community step in? I do	But will the community step in? I doubt it since Ruby gem output has dropped dramatically in the last couple of years. See modulecounts.com where Python output is about 10 times that of Ruby. That's the difference with the exponential growth of Python where you have the Python Foundation backing everything.	cutler	12.514304	-7.021793	comment	3.0	11.0	1624166865	12.368185
27582901	Thunderbong with an excellent link!C	Thunderbong with an excellent link!Chris Seaton is one of the most influential programmers out there for me. I'm so interested in just about everything he's touched. What a guy. Ruby will never die so long as people have ideas like his, though not all can follow through and create such cool things!I'm curious to see where performant ruby goes in the midst of Crystal. I quite like Ruby for exploring, Pry is an unrivalled repl experience, but then Crystal is very fast and quite efficient for big things. I like the idea of types guiding me amongst a big large codebase that I might not be familiar with.We'll just have to keep hacking and see what happens!	adenozine	12.634512	-7.18679	comment	3.0	19.0	1624302623	-11.266035
27584432	It's just impossible, ruby / python 	It's just impossible, ruby / python will always be fast'ish never really  fast because the foundation was not built for it.	Thaxll	12.533767	-7.001623	comment	3.0	18.0	1624309299	12.3231325
27591900	You’re missing a lot! In the case of	You’re missing a lot! In the case of a simple request/response web app yes it doesn’t do a whole lot. Imagine you’re building a complex system with lots of different behavior patterns. Let’s say a backend that fans out to 100 different 3rd party APIs, like a shipping aggregator that needs to talk UPS, FedEx, USPS, Canada Post, Royal Mail, etc… and you want to be able to carefully control rate limits, batch sizes, etc.. to those endpoints. An actor system with supervision trees is a very good way to build a system like this.Also... the rhetoric here on HN about Erlang/Elixir vs. Kube really needs to stop. People are misinformed. They are not mutually exclusive, you do not need to choose one or the other. We need to reconcile that because the discourse always goes to this weird war in the co	whalesalad	12.58842	-7.481682	comment	3.0	16.0	1624371429	12.912623
27593228	The rails community were keen about 	The rails community were keen about performance? You'd never have guessed.	callamdelaney	12.759412	-6.942969	comment	3.0	11.0	1624377109	12.34717
27596425	1) I don't know if I can pinpoint it	1) I don't know if I can pinpoint it... I have some notes, but it's mostly just little moments of frustration with the docs here and there. Functions that are undocumented, the docs glossing over important parts of the framework, etc. Can't put my finger on it, it's just constant frustration. I'm eager also to contribute to the docs: but specifically a tutorial for API development. This is an area where the docs are severely lacking.Best practices is also another one. I feel they take too little opinions on how to use the framework, and it's difficult to find a best practices source (think a book like Two scoops of Django). This can be jarring to beginners.I get that they're trying to be configuration first, but... People who use frameworks like Phoenix are trying to escape the freedom of 	sergiomattei	12.810106	-7.0023146	comment	3.0	11.0	1624391934	12.6209955
27602801	The funny thing is that nobody has e	"The funny thing is that nobody has ever once bothered to debunk a single one of my points in any of the comments that I've ever made against Elixir or FP on HN. I've written much more detailed points in the past. Only downvotes but no meaningful responses. Nobody ever properly responded to any specific point. The best I get is ""No it's not"" without any further explanation.When I said that I've never seen any well written Elixir or pure FP project in my career and challenged people to send me a link to such a project on GitHub, nobody could do this.All I've ever seen in pure FP is spaghetti code; full of dependency injections which make it difficult to follow the logic (where does that module come from?), global state store (no different from using global variables!) or state being passed a"	cryptica	12.417191	-7.4456625	comment	3.0	10.0	1624443452	12.928325
27607560	Thanks, Simon! I thought a lot about	Thanks, Simon! I thought a lot about how to position this piece, in terms of whether it was really about Django, or about Python, or about software architecture more broadly, or software architecture specifically for startups, or whether it's really primarily a business book that just happens to contain code snippets.In some ways it's all of these things. But I think for people who aren't already senior developers, it's much easier to understand the advice if it comes with some specific context and functioning code snippets. My hope is that by making it Creative Commons (including for commercial use), people will remix the book to make it work for their specific framework, startup, language, etc.This way people can also incorporate the sections they like into their internal style guides, c	Alex3917	12.828185	-6.5354147	comment	3.0	20.0	1624470415	10.068238
27607949	Not mentioned here but important, I 	Not mentioned here but important, I strongly prefer and recommend an opinionated framework like django, rails, (possibly ember) over mix match frameworks (express, flask) because they have already thought more about most design decisions than you want to (or your engineers).  Especially for an early stage startup, the performance, scalability, or reliability of your stack isn't going to kill you.  A long time to market will kill you,  reinventing the wheel will kill you.  When I see django apps built and developed, a shockingly high amount of effort is dedicated to actually solving business problems vs other less opinionated frameworks.	paddy_m	12.763411	-6.523341	comment	3.0	11.0	1624472024	10.040116
27610085	Are there any good articles or examp	"Are there any good articles or examples you can share that elaborate on why using services is best? Writing a custom model manager method for these sorts of operations seems to work best. For instance, the create_account service could easily be part of the User.objects manager:  class UserManager(models.Manager):
      def create_account(self, sanitized_username: str, ...):
          # the rest of the code in this method is the same as the example.
          ...
          return user_model, auth_token
  
  class User(models.Model):
      ...
      objects = UserManager()
  
  >>> User.objects.create_account(sanitized_username=""blackrobot"", ...)
  (<User: blackrobot>, 'fake-auth-token:12345')

The benefit here is that other parts of your code only need to import the User model to access the"	blackrobot	12.866059	-6.5097756	comment	3.0	11.0	1624481106	10.119319
27650979	Simplicity is PHP – everything is in	Simplicity is PHP – everything is included and you can get things done in minutes.	pkrumins	12.765542	-6.611844	comment	3.0	10.0	1624796276	10.377651
27651272	Crystals are by definition ordered b	Crystals are by definition ordered by a very regular pattern. I don't fully understand the mechanism, but I'm not surprised that it exists.	darkerside	12.627539	-7.248676	comment	3.0	13.0	1624799270	-11.147359
27683558	I would probably recommend against t	I would probably recommend against this for most things if you're running an agency. Hiring experienced Elixir developers is not easy nor cheap; and for your clients, if they want to hire developers, at some point, are going to have a really difficult time.	rubyn00bie	12.704332	-7.439321	comment	3.0	13.0	1625013032	12.923017
27683589	That really doesn’t answer the quest	That really doesn’t answer the question. What does the BEAM VM provide that cannot be implemented in Rust or Go or even Python.	jimsimmons	12.408957	-7.3945622	comment	3.0	15.0	1625013289	-8.816204
27684498	In the 200Xs, the BEAM VM had a clea	In the 200Xs, the BEAM VM had a clear performance advantage in dealing with high-concurrency network loads. It has never had a raw performance advantage in terms of the bytecode that it implemented, that is, the Erlang/Elixir layer (it was generally faster than Python/Ruby, but that wasn't saying much, especially back then, but it had clear performance disadvantages vs. C/C++/Java), but it had a superior internal runtime that could make up for that in performance benchmarks, as long as you didn't try to run too much BEAM bytecode. Much like how NumPy is very fast, as long as you don't try to run too much pure Python with it.However, since BEAM doesn't have access to unique CPU instructions that nobody else has or anything else, and since a lot of focus across a lot of languages has been pu	jerf	12.437022	-7.370329	comment	3.0	26.0	1625023426	-8.767655
27685819	> these are all of fairly low qualit	> these are all of fairly low quality compared to other competing languages/implementationsSeriously? You say this without providing examples?I'm not aware of any other programming environment that has BEAM-like processes.Not Go, not Java, not any other system I know.	divs1210	12.353473	-7.3927464	comment	3.0	17.0	1625037268	12.743043
27711143	You are by all means welcome to rema	"You are by all means welcome to remain ignorant of how computers and frameworks and libraries all work, incapable of tracking down and fixing bugs in your application stack that affect you. Build a career filling in the boilerplate that Spring or Rails or whatever generates, and when the system doesn't perform as you expected it to, throw up your hands and say ""I don't know what it's doing,"" and end the matter there. This is, presumably, a quite ordinary and common approach to software development.But if you do so, then I must ask: what are you doing on this site? What can you possibly get out of it?"	fennecfoxen	12.761106	-6.9214406	comment	3.0	13.0	1625232030	12.351665
27714236	"""Our broader goal in writing this up"	"""Our broader goal in writing this up was to illustrate some higher-level TypeScript features and type-driven design patterns in the practical context of modern web development.""Is type-driven design a think? For me it's just development ..."	nefasti	12.346421	-6.844274	comment	3.0	11.0	1625246353	-10.373349
27749584	Remote | Austin TX, Boston MAI'm loo	Remote | Austin TX, Boston MAI'm looking for a co-founder with elixir and strong front-end experience or product and sales experience.  Technical preference for now.  If you like mycology and working with Neo4J feel free to drop a line!The product I've been working on is intended for the pharma space and somewhat similar to Benchling but targeting a very specific agricultural niche.  I've yet to start looking for institutional investment, but now that covid is over I have the bandwidth and drive to take this product full-time!please email hydrated chia AT gmail DOT com	d33lio	12.7217045	-7.392405	comment	3.0	12.0	1625584022	12.9066515
27760232	>Then just post about your IDE on El	>Then just post about your IDE on Elixir forums.Not all users of Elixir hang out on Elixir forums. There are plenty that spend the majority of their time on the internet elsewhere.>and I certainly don't want ad companies that are following me on random websites to know that I'm a programmer who is interested in Elixir or any other data about me.Why not? Systems can become more efficient if they know you better.	charcircuit	12.698725	-7.445602	comment	3.0	16.0	1625660283	12.939591
27794603	Considering your long experience, di	Considering your long experience, didn't you feel like we lost a lot post-PHP? I also stepped out of the PHP world into JS, and never understood why there isn't any apache2-modnodejs... And to me, the serverless JS movement seems to be just that, but with a lot of unnecessary baggage.	emteycz	12.6542015	-6.4604893	comment	3.0	17.0	1625935053	10.278813
27819674	If you don't have the urge to jump o	If you don't have the urge to jump off a hill when you see heavy pragmatism, Typescript is very popular and well maintained. My experience is only positive.I was also wondering, does Blazor work with F#? That could also be an option. Not a front-end focused language but a front-end focused framework, so, there's that.	egeozcan	12.36645	-6.7395196	comment	3.0	16.0	1626175436	-10.416883
27819745	I truly believe TypeScript is the on	I truly believe TypeScript is the only true way forward for frontend web programming.Now what we really need is a functional dialect which compiles to TypeScript...	johnday	12.382838	-6.7093296	comment	3.0	13.0	1626176110	-10.449597
27836150	Wouldn't it be great if feathers, PM	"Wouldn't it be great if feathers, PMODs, etc. all used ROS2 to provide publish/subscribe and services so that anything could ""just work""?"	daly	12.696141	-6.849201	comment	3.0	10.0	1626285734	12.223387
35185244	> But if you’re already familiar wit	> But if you’re already familiar with TypeScript, have no fear! 5.0 is not a disruptive release, and everything you know is still applicable.Do you know what caused the typescript team to make it a major release? Has the decorator api changed sufficiently to become a breaking change?	azangru	12.370136	-6.77772	comment	3.0	13.0	1678988014	-10.461694
35186166	Your regular reminder, that it’s jus	Your regular reminder, that it’s just a regular release, since typescript don’t follow semver. After 4.9 goes 5.0	yanis_t	12.388149	-6.815784	comment	3.0	15.0	1678991233	-10.500388
35187328	I wish MS will fork Typescript into 	I wish MS will fork Typescript into a new language altogether that transpiles to JS or compiles to WASM.In that case, they can remove all JS weirdness from it, simplify it, add a proper standard library, and add other good parts from other (especially functional) languages to it.My wish list for such a language (in addition to what is already in Typescript), in no particular order:- Generic object literals (Why should generic type inference be limited to functions?)- Deep support for an alternative to exceptions using a Failable<TResult, TError> type- Localizable keywords (Why should programming languages be tools of cultural hegemony?)- Dependent types, with no real distinction between values and types (At a certain point, Typescript’s type system begins to look like a separate Turing-com	prmph	12.334623	-6.8739014	comment	3.0	17.0	1678995978	-10.425075
35189742	You can do all you list with effect-	You can do all you list with effect-ts/schema.Arguably the highest quality TS lib out there.https://github.com/Effect-TS/schema	epolanski	12.357145	-6.5308523	comment	3.0	11.0	1679005695	-10.441876
35207586	I am surprised there is no discussio	"I am surprised there is no discussion in the PHP community to introduce a module system.The current solution for code reuse (use longer class names to avoid clashes, we help you with syntactic sugar called ""namespaces"") is the wrong approach imo."	TekMol	12.33703	-6.6876473	comment	3.0	28.0	1679132034	6.8219876
35208082	As someone maintaining multiple 10+ 	As someone maintaining multiple 10+ year old PHP applications - after the migration to 7 things have been super easy/simple. Especially if you get Rector [0] involved.[0] https://github.com/rectorphp/rector	Implicated	12.760061	-6.6402416	comment	3.0	14.0	1679138390	10.305617
35321013	Rails has Bullet[0] to help identify	Rails has Bullet[0] to help identify and warn you against N+1Does Django have anything active? Quick search revealed nplusone[1] but its been dead since 2018.[0] https://github.com/flyerhzm/bullet[1] https://github.com/jmcarp/nplusone	irjustin	12.8574095	-6.5419936	comment	3.0	14.0	1679874644	10.231593
35366380	TypeScript has its own WATs too, and	TypeScript has its own WATs too, and to me they are almost worse, because you have this false sense of security based on it being TypeScript and not JavaScript.https://www.typescriptlang.org/play?#code/MYewdgziA2CmB00QHM...	jjnoakes	12.358147	-6.7420926	comment	3.0	12.0	1680138731	-10.435914
35367018	There's a lot of bummed out comments	There's a lot of bummed out comments in here about the syntax, but to me it looks a lot like what someone might see in a reimagined Typescript. Maybe a little Haskell thrown in for good measure. I agree they probably would have been better served just using an existing language with loads of existing tutorials like C# or Python, but if they're going to make something totally from scratch, I think a lot of decisions will actually make the language pretty easy to learn.Everything being an expression should prevent a big trip hazard for new developers. As someone who teaches programming a lot, expressions vs statements vs special forms really confuses new developers.In a lot of ways, this seems like a lot of good ideas from Haskell and Typescript, put into a straightforward syntax. I'd bet I 	JackMorgan	12.32892	-6.824367	comment	3.0	26.0	1680142916	-10.400369
35423827	At the risk of hijacking this discus	At the risk of hijacking this discussion, i feel like the BEAM needs a TypeScript/C#/Java like language much more urgently. Whenever I go from our Elixir backend to our TypeScript frontend I experience a sigh of relief because my editor tells me instantly whether what I type makes sense and why not.	skrebbel	12.340211	-6.9223776	comment	3.0	10.0	1680530943	-10.388367
35442111	Instant observability from any REST 	Instant observability from any REST API using autogenerated TypeScript clients	ericpsimon	12.344382	-6.832068	story	3.0	3.0	1680625450	-10.390523
35459791	You're not the only one.  I don't ha	You're not the only one.  I don't hate Typescript, but I don't think it's necessarily worth using everywhere.  I like using it for libraries that I might share or reuse, that contain some complex logic, in which case it helps my code keep guarantees.  But for view-layer code, I really don't get why a lot of people are dying to use Typescript that way.Beyond that, pretty much every Typescript project I've been introduced to suffers from just as many bugs as codebases that use plain JavaScript.  Strict typing at compile time doesn't replace conscientious development practices and rigorous testing.	ravenstine	12.368091	-6.8155184	comment	3.0	13.0	1680725716	-10.438006
35479048	We are also running on Rails - and l	We are also running on Rails - and loving it, too.However, incorporating this methodology into our workflow would be both a lot of work to set up and also a lot of work to keep running.There certainly is a size threshold under which this is clearly an overkill and we are under that threshold.Yet, if this could be turned into a product, a clean integration, a command I need to run... would definitely use it (and pay for it).	holistio	12.7806015	-6.9088883	comment	3.0	13.0	1680852032	12.327918
35479980	As a counterpoint I have yet to see 	As a counterpoint I have yet to see one that is locked in my 15 years working with Rails.	wlll	12.784713	-6.9355	comment	3.0	15.0	1680861813	-9.030751
35480470	These problems are always more commo	These problems are always more common in server-rendered apps though, because front-end state is always a patchwork. And the Rails developers and community have a strong preference for this architecture.	jeremyjh	12.793873	-6.7445455	comment	3.0	14.0	1680866656	12.30573
35481194	> “It must also be a massive boon fo	> “It must also be a massive boon for the Rails ecosystem to have such a large property running off the head.”I would have expected Microsoft to focus on developer efforts into speeding up Ruby as a language given they are one of a small few large companies that have deep language/compiler expertise.	tiffanyh	12.631883	-7.0189457	comment	3.0	12.0	1680872910	12.329966
35495670	A Rubyist's Walk Along the C-Side (P	A Rubyist's Walk Along the C-Side (Part 10): Benchmarking	thunderbong	12.568183	-7.0446615	story	3.0	82.0	1680975436	12.369403
35497680	What is lacking in the 2019 release 	What is lacking in the 2019 release and in what ways does the frozen feeling make things bad in reality?I am curious since we have one major project written in Elm since 2017 and it has been a great success.	jlundberg	13.003434	-7.6824327	comment	3.0	18.0	1680988321	-12.759694
35498145	"MS SQL? I've been a (""full stack"") w"	"MS SQL? I've been a (""full stack"") web developer for 18 years now, and I've never seen anyone use MS SQL for a web application. That's immediately a tell that I'm in a bubble, and obviously you are as well if you think MySQL/MS SQL are even in the top 3 (behind Postgres, MongoDB, Oracle?).Since you mentioned it, I just asked ChatGPT and in a list of 30 unicorn companies based around web applications, half of them were built in Ruby which isn't even in your list.If becoming a successful company is part of the justification for technology choices, you'd need a very strong argument to not pick Ruby.I'm not really sure that's true, but if you want to make strong recommendations I feel they need to be backed by data, and not some hunch on what technology is popular right now. And Ruby has been "	tinco	12.679321	-6.985558	comment	3.0	13.0	1680991773	12.381607
35498179	> Elixir, it's the builders FPI'm re	> Elixir, it's the builders FPI'm really glad to hear that, because to me it does seem like Elixir is the FPL that is closest to satisfying a GSD mentality and not getting caught up in too many interesting rabbit holes.	pmarreck	12.641557	-7.4559455	comment	3.0	15.0	1680992064	12.961428
35498226	> What is lacking in the 2019 releas	> What is lacking in the 2019 release and in what ways does the frozen feeling make things bad in reality?Things I've personally missed include websockets, missing features in the browser interface like preventDefault in the Keyboard API, etc. It's not a big deal, but if you need lots of less covered APIs and have to develop ports for many little things, it becomes an annoyance.In professional contexts, I haven't had trouble with Elm, but others have reported missing the kind of features people usually require, like server-side rendering, the ability to deploy a private package repository that doesn't feel like a hack, etc.0.19 was a great version, but it is very barebones, and some new developments that have happened in other ecosystems just didn't happen because of the way contribution w	pyrale	12.992297	-7.6730633	comment	3.0	11.0	1680992504	-12.762748
35502268	Ask HN: Django v/s Rails? Please bri	Ask HN: Django v/s Rails? Please bring your pitchforks	textread	12.811061	-6.61647	story	3.0	8.0	1681044809	10.193388
35503665	I’m not too familiar with Elixir. Wh	I’m not too familiar with Elixir. Why did you choose it and why do you say it’s awesome?	alexdanilowicz	12.684871	-7.449573	comment	3.0	10.0	1681054253	12.936788
22357653	RuboCop 0.80: Ruby static code analy	RuboCop 0.80: Ruby static code analyzer and code formatter	tosh	12.442245	-7.063341	story	3.0	70.0	1582046025	-10.90393
22359580	I appreciate this detailed response,	"I appreciate this detailed response, but I'm afraid if it takes an essay to respond to a simple question of ""why break out if more than 5 lines"", and the reader with 15 years of programming experience who's well-versed in half a dozen general purpose prog langs still haven't got a clue after reading it, it suggests to me that this is cargo-cult programming.Ruby is not the first language that has OOPish constructs, but no one else tells devs they are probably writing bad code if they need more than 5 lines of code in a method. I mean, what's wrong with a controller methods that just splits into 2 branches based on the existence of a param, and creates a model and save it to the DB? The entire method will consist of around 20 lines of code. There's no instance variable, no cache and no error"	wyuenho	12.566508	-7.0445766	comment	3.0	11.0	1582054980	12.373161
22369418	What would make explorables really t	What would make explorables really take off is a killer framework to make building them easier, ala Ruby on Rails.I know ncase has built some frameworks and I applaud his work, but this space just needs a lot more investment.Here's what I think the killer framework will do really, really well: (Note this is VERY rough, it comes from spending 20 minutes trying to create an explorable a long time ago and realizing that the tooling just isn't right)- 1) Turn the act of coding a model into mostly verbal reasoning by having a great framework language / API. Rails actually did this, turning the entire building a website into composing english. It greatly reduced the distance between the concepts / app that you were building and how you went about building it - i.e. Model has_many :users- 2) A st	spyckie2	12.621365	-6.9618607	comment	3.0	11.0	1582142300	12.359463
22384072	While web programming in Prolog has 	While web programming in Prolog has been insightful, I think there are more expedient areas of application for the language.Prolog is especially underutilized in databases.	ipnon	13.143906	-7.2605467	comment	3.0	14.0	1582300758	-12.483476
22384158	Between reasonml and elm which one s	Between reasonml and elm which one should I pick?	adamnemecek	12.776112	-7.6281357	comment	3.0	15.0	1582301423	-12.712554
22387468	The sudoku solver is equally impress	The sudoku solver is equally impressive, didn't realize that SQL could be bent to do these sorts of things.	rajangdavis	13.44958	-7.40578	comment	3.0	26.0	1582323302	15.078075
22398408	I am a Python / Django guy given the	I am a Python / Django guy given the choice. Python may be a slow language, but I haven't seen many places where python is the cause of the bottleneck. Rewrite stuff so that the database is doing the heavy lifting, and add the appropriate indexes and you shouldn't have any problems.SPA's are a pain in the arse. Usually close to twice the amount of code to avoid page refreshes. Usually the apps are way slower than a page refresh as well - with lots of JSON calls to get data that would be in one server side page load.	collyw	12.752931	-6.5238843	comment	3.0	18.0	1582481277	10.082576
22400473	If you're still suspicious of SPAs, 	"If you're still suspicious of SPAs, you can be sure there's still an alternate universe outside of the Valley bubble that builds server-side web apps on modern frameworks, though now we use Vue.js instead of jQuery. PHP has continued to be a top language of choice for the working class dev, and Laravel is an example of one of the most beautifully crafted (and wildly popular) web frameworks ever made.Examples of the kind of tooling built by the community that betrays the cultish appeal of Laravel (yep, people actually make a living off Laravel-specific tooling)- https://tinkerwell.app/
- https://laravelshift.com/"	igammarays	12.776675	-6.5702033	comment	3.0	23.0	1582502358	10.309747
22409308	ReasonML is Facebook’s OCaml for Jav	ReasonML is Facebook’s OCaml for JavaScript.https://reasonml.github.io/They have used it extensively:https://reasonml.github.io/blog/2017/09/08/messenger-50-reas...With impressive results:“ Messenger used to receive bugs reports on a daily basis; since the introduction of Reason, there have been a total of 10 bugs (that's during the whole year, not per week)! *”	melling	12.397035	-7.498983	comment	3.0	14.0	1582584742	10.265922
22430487	Exactly. You could access to it like	Exactly. You could access to it like viralquotesonline.com/.env. I did several mistakes for sure. It was my first project launched to the world and the first time I used Laravel, is a bit embarrassing to be honest, but hopefully helps other to realize that they are in a risk too.	ngranja19	12.806489	-6.6366053	comment	3.0	12.0	1582778058	10.373024
22433089	Django has had an automatic admin si	Django has had an automatic admin site since 2006 or earlier, this isn't a game changer for me.	jonatron	12.875577	-6.5521975	comment	3.0	14.0	1582810710	10.129514
22475496	Erlang is like Bugman from the Night	Erlang is like Bugman from the Nightmare Before Christmas. It is literally made out of microservices at every level.Microservices are a design philosophy that people confuse as a deployment strategy.	sitkack	12.5677395	-7.5068264	comment	3.0	11.0	1583250767	12.911936
22496038	Java, PHP, MySQL, Postgresql, OpenSS	Java, PHP, MySQL, Postgresql, OpenSSL, Linux come to mind.	toomuchtodo	12.552521	-6.5185533	comment	3.0	16.0	1583430738	10.17654
22518314	More productivity porn. War on leisu	More productivity porn. War on leisure! Only this one particularly bad because it’s trying to say “no pain no gain” is a lie. That if the gains come with pain, the gains must not be worth itHe’s not strong enough to squeeze the orange (rails contributor life perks) so the juice must not be worth squeezingBasically, that hard work ain’t worth it. Fun Uber AllesBut it’s like, the process of building a sexy body is not easy or fun. It’s gonna be at least a year, maybe more, till ppl start wondering what you look like shirtless. you’re telling us the Payoff isn’t worth it?Becoming a rails contributor was a worthy goal, no one said it would be fun. plus, what about when your personal project gets bigger, you don’t like maintenance work? You can’t be a developer. Developers maintain software. Yo	ulisesrmzroche	12.744551	-6.9504848	comment	3.0	25.0	1583679495	1.543387
22520892	I've stopped using since Laravel 5.4	I've stopped using since Laravel 5.4, switched to Symfony 2.8 up to now (5.0) and recently also Flask or Django (at least for back end).My biggest pains were the facades and also I wasn't a big fan of the Active Records (with the empty classes and only doing autocomplete by regularly generating loads of annotations).Being a freelancer and the increasing popularity, I suppose it's worth taking a look again.Though I'm still a bit hesitant to use it for my own long-term projects, especially since there are so many breaking changes and there are some side projects I won't be able to update for 3 to 12 months while I work freelance or build up new projects.Can anyone share their experience using + updating a Laravel-based website which is at least 2 years old, especially regarding maintainabili	kugelblitz	12.801092	-6.6335735	comment	3.0	11.0	1583704688	10.3516445
22529563	Oops that was what I meant! Thanks f	Oops that was what I meant! Thanks for the recommendations.Do you know if there are any books that are inspired by (or squeals of a sort) to Phoenix Project?	raybb	12.783759	-7.169011	comment	3.0	11.0	1583786654	12.762014
22538270	Yes! Our intention is to support Typ	Yes! Our intention is to support TypeScript as a first-class citizen in Redwood apps (while still supporting JavaScript as well). We're currently working to make sure all of the framework code is written in TypeScript.	mojombo	12.386134	-6.757316	comment	3.0	12.0	1583865992	-10.464257
22544406	Something I love about pandas is tha	Something I love about pandas is that often you can pass a URL in place of a file name.The other day I needed to scrape data from a table on a webpage. Thinking about traversing the DOM and building up an array was already giving me a headache. Thankfully pandas has the “read_html” function. Getting a list of dataframes for each table on the page was as easy as:  dfs = pd.read_html(url)	jpxw	12.342142	-6.4691935	comment	3.0	10.0	1583919876	10.096669
22544515	I think your post summarizes a major	I think your post summarizes a major reason why so many people ended up using small frameworks and appreciating glue code after using Rails/Django.My noob a-ha example is `rails generate devise:install` where I first thought, wow, what a time saver. Eventually I learned lessons like, perhaps authentication is too important to be hiding from your source code. In fact, maybe almost everything is.	hombre_fatal	12.775355	-6.7423835	comment	3.0	12.0	1583921212	10.388886
22573326	How? This is just a link to a Facebo	How? This is just a link to a Facebook job post.Guess this is a good time to plug Gleam though (along with Dialyzer, which has already been mentioned), a statically typed functional programming language which compiles to Erlang.https://gleam.run	markholmes	12.521795	-7.477784	comment	3.0	15.0	1584162426	-12.330944
22582931	"The problem with ""you can roll your "	"The problem with ""you can roll your own language constructs"" is that, er, everybody wants to roll their own language constructs -- as opposed to simply using a library of common ones that have been tested and proven stable and useful. That's what Algol-like languages give you. They free you from the pain of having to roll your own language and let you get on with developing applications. As an added bonus, developing to a single commonly accepted language spec means your boss can read the code and figure out what it's doing without having to understand the entire code base at once. (Ever been a neophyte on a Rails project? Multiply that bewilderment by like a thousand.) That's why they're so accepted in business."	bitwize	12.577835	-7.044723	comment	3.0	26.0	1584273379	12.37783
22596662	> It depends on what the alternative	> It depends on what the alternative is.Ruby Gems, PHP composer, PIP, etc. would all like a word with you....https://rubygems.org/pages/sponsorshttps://www.python.org/psf/	mbesto	12.727824	-6.7389145	comment	3.0	15.0	1584387367	10.3925085
22599135	Any companies using Erlang or Elixir	Any companies using Erlang or Elixir?	denalilumma	12.61786	-7.484118	story	3.0	1.0	1584399491	12.923673
22618100	"Assuming PHP you just described ""a t"	"Assuming PHP you just described ""a text editor and remote servers"""	Kamshak	12.706255	-6.5326366	comment	3.0	13.0	1584547329	10.272864
22625333	An article dedicated to why Rail's A	An article dedicated to why Rail's Active Record library isn't actually using the Active Record pattern would be interesting!	ptr	13.067805	-6.526971	comment	3.0	12.0	1584602845	12.233741
22631632	>  javascript is just typescript wit	>  javascript is just typescript with documentation stripped off.JS, at its core is a dynamically typed, functional language. Typescript aims to model a strongly typed, OPP language. The two programming paradigms have their own strengths, weaknesses and most importantly: patterns and best practices.If the only difference between your pure javascript code and your typescript code is the annotations, you are doing it wrong.	orange8	12.345506	-6.8403034	comment	3.0	14.0	1584651321	-10.470483
22659123	Very interesting, thank you for shar	"Very interesting, thank you for sharing this!Knowing the history of Prolog can be very useful to make progress in this area, because quite often, progress in this area means returning to what earlier systems already did.For instance, already in the very first Prolog system, Marseille Prolog, a string like ""hello"" was treated as a list of characters, i.e., [h,e,l,l,o]. This was great for usability, as one would expect from a language that was designed for natural language processing.Later systems switched this to lists of character codes, denoting code points in the used encoding. For instance, when using ASCII or one of its supersets, ""hello"" would then mean [104,101,108,108,111], which is much less readable in answers.Still other systems introduced their own ad hoc types that were not lis"	triska	13.142356	-7.300197	comment	3.0	30.0	1584914394	-12.484051
22659251	We often don't learn from the greats	We often don't learn from the greats of computer science (all sorts of APL goodness from the 70s is being rediscovered for data science today).As far as modern Prolog. I know commercial systems still exist, but I assume most work has switched to SWI-Prolog?	7thaccount	13.166691	-7.303912	comment	3.0	15.0	1584915423	-12.504165
22660730	Seems like the main takeaways from t	Seems like the main takeaways from this are that concurrency on BEAM is amazing and the JVM can't match that. So it feels like it boils down to whether you like Ruby syntax versus Lisp syntax. For me that is a no brainer, I love Ruby but always worried about the limitations of the runtime. Is there anything else I'm missing? BEAM plus Ruby seems like an absolute winner here.	xrd	12.574977	-7.150326	comment	3.0	11.0	1584930537	12.468817
15105010	"> The PHP ""builds"" as fast as I can "	"> The PHP ""builds"" as fast as I can refresh a browser pageJavaScript is just as fast, or faster. That's probably an important reason why it's ""eating the world""."	bambax	12.670475	-6.5683107	comment	3.0	19.0	1503746964	-10.760919
15105908	You don't know what you're talking a	You don't know what you're talking about. Python process needs to be bounced, or has to watch files and bounce itself on change. The PHP runtime is designed to read the file on each request. You have to go out of your way to require restarts (it is an optimization). PHP has the only mainstream runtime AFAIK that is designed this way (+ the model is stateless, so each refresh really is one). I'm not a PHP fan but it bothers me that people don't acknowledge some of its important, unique features and are content to rag on its inadequacies. It bothers me because we're probably ten years from people forgetting what PHP was, and creating a new, worse PHP (!).	thesmallestcat	12.708834	-6.6517053	comment	3.0	13.0	1503762093	10.291201
15129145	I have a mirror of all Rubygems from	I have a mirror of all Rubygems from last month. Should I scan em for PoCs?	trapperkeeper74	12.592206	-6.9756184	comment	3.0	11.0	1504057935	-9.282737
15129456	It's a fine startup postmortem.A sma	"It's a fine startup postmortem.A small gripe: I don't get why Django has to get dragged into this. Whether it's the title, or the venue. It distracts from the broader lessons he brings to the table in hindsight as a CTO-founder.Other than the author making fleeting references to Django, there's no technical depth or major points delivered on how the stack effected operations.I have nothing wrong with Django criticism, but the title needs to be fixed. Maybe: ""Autopsy of a slow train wreck (DjangoCon 2017)"""	git-pull	12.833392	-6.531387	comment	3.0	12.0	1504062564	-5.339809
15128898	I don't quite understand how this is	I don't quite understand how this is different from the status quo? I guess gems may (sometimes) be installed with a different user (or even root) than the application server?But even if: most systems today probably only run that one service, and the application server can rwx pretty much everything of interest because that's its job, right?10 years or so ago you'd often see some company's server running apache as well as a mail server, the internal document repository and the financial systems. In that sort of setup, it's important to (try to) keep these systems isolated from each other. But today, all that root access would give you is the ability to read a few more Ubuntu man pages.	matt4077	12.664981	-6.967519	comment	3.0	10.0	1504054572	12.366664
15141997	I feel like I answered most of these	I feel like I answered most of these questions on the post, but anyway:1 - I've tried a number of frameworks, although ember is the only one I've used extensively. As I said, the issue was mostly with the thick client / thin backend api set up rather than specific ember stuff, with the exception of ember being overly opinionated.2 - not interactive enough to require a js framework3 - BugMuncher is just me, so I'm also the UX guy and I think server side rendering is awesome4 - no (in my own humble opinion)	MattBearman	13.11355	-6.4454246	comment	3.0	11.0	1504200407	-15.512832
15146287	I'm really interested in this.I foll	I'm really interested in this.I follow the field fairly closely, I've implemented an open language question answering  system myself, as well as re-implemented parts of the Watson QA system form their papers. I've built NN based entailment systems, and I built a text summarisation system which still wins benchmark competitions 15 years after it was built. Also, I use Superset (AirBNB's opensource Tableau competitor) daily.Basically, I'm not a complete neophyte in this and related fields.But I don't have a clue what this system does.I know Prolog and some about CCG. But the it talks about Tableau and I'm completely lost.Can someone please explain?	nl	13.135086	-7.2323494	comment	3.0	14.0	1504242961	-12.29833
15148156	> With Typescript things that were r	> With Typescript things that were really easy to do on Javascript like defining a simple object were more complicated to do on Typescript.TypeScript in no way prohibits you from defining a plain old untyped object. Just don't assign a type to it, and it behaves just as it would in plain JS. I wouldn't use Angular 2/4 either, because of its needless complexity and over engineering — but not because of TypeScript. If anything, TypeScript is a bonus.> React mixes both JSX/HTML with JS code which I just don’t like since I strongly believe in separation of concerns and it looks ugly IMHO.This is valid only if you think separation of concerns is the same as separation of technologies. I don't think so. It makes more sense to group code based on function.In fact Vue.js allows single file compone	erokar	12.464652	-6.6944056	comment	3.0	45.0	1504272602	-10.459799
15148328	"""We invested in a beta product and t"	"""We invested in a beta product and then shock horror - it changes before it's released.  Let's blame the framework on that poor choice.""""We were unable to learn how to use TypeScript properly, so let's abandon gradual typing and suffer a net loss in productivity over the longer term."""	jinder	12.379736	-6.783465	comment	3.0	17.0	1504274208	-10.4605665
15161389	There's an analogy that describes PH	"There's an analogy that describes PHP as a weird sort of toolbox. Everything's there, but they are all a little funky.The hammer is a double sided claw hammer, the pliers don't have serrated edges. They will do a job, but perhaps not the job that you expected.Eventually it leads to everyone using this weird little toolbox ends up with a weird sort of house that might collapse at any moment.Things have moved on quite a bit since then. Certainly in PHP 7, you're able to give it the same treatment as a ""proper"" programming language and people do.My view is though, it's a little too late. I don't think new people are coming into PHP because the barrier to entry has become higher than other languages.It has become almost impossible to write a PHP application to do even the simplest task without"	jpswade	12.759512	-6.6584597	comment	3.0	11.0	1504446469	10.363265
15173550	Interesting. I'm not sure if enterpr	"Interesting. I'm not sure if enterprise OO design patterns / clean code / solid / GoF  
 / all golden OO etc.. is a help or hindrance in a typical build the world destroy the world per request model that is PHP. It might be in the spirit but if you're freshly creating all these objects and a big ass dependency graph from scratch per request for each request then you'd be better be sure the promise of PHP 7 VM being superbly improved holds true in your app's case.  In other stacks you'd have a lot of this available for the next request at app level or cached somehow (already deserialized), in PHP you really are Creation Day 1 each hit. When you grow to something as complicated as an ecommerce frontend all nasty hacks come into play around the New World New Request model definitely undo a lo"	sitepodmatt	12.739108	-6.626259	comment	3.0	11.0	1504602430	10.23554
15181642	It seems the entire Python community	"It seems the entire Python community disagree, and made the monolithic Django the most popular framework. No the minimalist flask. Not the very composable pyramid.Django.And the reasons for that are:- choosing tools takes time and resources. 
- integrating them takes time and resources.- keep up to update the stack so it works well together takes time and resources.- multiple tools mean multiple docs.- you need to train your newcomers to your whole whole stack.- when you change project, you have to learn a new stack.- multiple tools won't be nearly as well integrated or full featured than the big framework. Have you tried flask-admin ? It's very far away from django-admin.- ecosystems build on common grounds. They assume they have tools, configurations, conventions. If you just use anythin"	sametmax	12.808287	-6.5263863	comment	3.0	14.0	1504679609	10.040503
15182763	Still a recommended book if you need	Still a recommended book if you need to handle Erlang systems. Either as a developer or as an operator.* Still good if you work with Elixir* Good if you have, say, RabbitMQ or Riak in your stack* Fred knows his stuff.	jlouis	12.615444	-7.490713	comment	3.0	14.0	1504697084	12.916997
15188308	Absolutely false.While PHP has gotte	Absolutely false.While PHP has gotten better recently, the language is not nearly as powerful or complete as almost all of the popular alternatives. Up until very recently, something like the Django ORM was impossible to express in PHP. Take an honest look at the available frameworks (especially in comparison to something archaic like Drupal) and you'll find there's no competition.	tcdent	12.758933	-6.644261	comment	3.0	12.0	1504744872	10.3220215
15188306	"...where ""A Subset of TypeScript"" = "	"...where ""A Subset of TypeScript"" = JavaScript?If I am not using this, what are the other languages I can use today that compile down to WASM?"	freechessclub	12.33401	-6.6824937	comment	3.0	10.0	1504744856	-10.444584
15190735	It makes a difference if a person ha	It makes a difference if a person has 5 years java experience or 5 years php experience only.There is a lot to learn about culture, tools, frameworks etc.	sigi45	12.721814	-6.6582155	comment	3.0	26.0	1504783241	10.308226
15199651	Ember is so good, it does not need c	Ember is so good, it does not need comparisons any more :)https://medium.com/@alvincrespo/ember-your-best-bet-b5cd7275...	okket	13.118617	-6.4459887	comment	3.0	21.0	1504873624	-15.512835
15210572	Well they could in the ocaml to js t	Well they could in the ocaml to js translator.IMHO, Typescript exists and is of similar quality, far higher community mindshare, and moving from TS ->ES6 is much more easier (in an emergency).If you write in Reason, the ultimate risk is if you think you will ever be acquired by Google, Microsoft, etc	sandGorgon	12.385095	-6.709111	comment	3.0	28.0	1505017098	-10.438728
15219513	By far the most elegant solution I'v	By far the most elegant solution I've found for this is TypeStyle [0]. Composable typed JS objects-as-CSS are a revelation and lend themselves to the kind of abstraction/extraction that most devs do everyday.In contrast, inline parsed CSS such as styled-components seems nuts to me.[0] https://typestyle.github.io	look_lookatme	12.380558	-6.5939054	comment	3.0	13.0	1505145754	-10.43452
15229489	Flow is supported, but Reason is not	Flow is supported, but Reason is not ? I thought it would be the other way around.Anyone know which one is what the React ecosystem is moving to ?	sandGorgon	12.529308	-6.5105305	comment	3.0	10.0	1505238504	-10.479264
15236089	It's worth noting that with upcoming	It's worth noting that with upcoming Babel 7 it is possible to strip Typescript types like with Flow and use it just as a typechecker/linter [1]. This means following things:- You don't need ts-loader/at-loader with Webpack anymore. You'll lose typechecking during webpack build but you can run it as separate step. Your editor will show them as usual still.- You can use all the Babel plugins with Typescript without running two compilers (should speed things up)- Should add first class support for React Native as it uses Babel (or at least no more 2-step builds)[1]: http://babeljs.io/blog/2017/09/12/planning-for-7.0#typescrip...EDIT: For the curious here's my build configuration with Webpack demoing this with extra plugins https://gist.github.com/epeli/bb8ae386f9dbb2a4ae2159e1f265fd...	esamatti	12.514252	-6.616127	comment	3.0	26.0	1505285742	-10.467223
15236559	Wouldn't the simpler build setup be 	Wouldn't the simpler build setup be to use TypeScript only for compilation? Why would you want to use Babel as well?	stupidcar	12.395682	-6.528069	comment	3.0	11.0	1505292537	-10.468294
15239359	Ask HN: Would a server written in a 	Ask HN: Would a server written in a native language still need job schedulers?	hasenj	12.406987	-6.5122786	story	3.0	3.0	1505317351	9.831211
15249947	All that beautiful meta-programming 	All that beautiful meta-programming flexibility has come at a price. The research projects sponsored by the likes of IBM and Oracle to give Ruby a much needed speed boost are very slow in the offing – it feels like V8 was developed overnight in comparison. Aesthetically I think Ruby beats Python/Javascript/Perl but unfortunately that's not enough to move the needle on the dial.It'll be interesting to see whether Python or Ruby or Ruby get to WebAssembly first – I'm correct in saying that none has of yet, yes?	igravious	12.585321	-7.0411053	comment	3.0	10.0	1505408284	12.375353
15250082	I love ruby, but its falling almost 	I love ruby, but its falling almost irretrievably behind python in data analysis/visualization/machine learning libraries.	aswanson	12.516068	-7.0267587	comment	3.0	15.0	1505409045	12.374532
15250734	Ruby is just used rarely outside RoR	Ruby is just used rarely outside RoR, realistically speaking.	dom0	12.682936	-6.994466	comment	3.0	12.0	1505412335	12.397481
15251823	What exactly are you talking about h	"What exactly are you talking about here?Are you referring to Github, Shopify, Basecamp and many other functional businesses scaled and built on the shoulders of ruby ""unicorns"" and ""kittens"" ?Having worked with both languages, I can confirm that they simply have different view points with tradeoffs, and that in itself is a matter of personal opinion.But claiming one community does not build great tools because you view them as ""kittens"" is ridiculous.Also please do not generalize things like ""most people"" prefer X.[EDIT] I sincerely hope this comment does not come off as rude. I am just trying to understand OP's point of view"	swat535	12.613672	-6.996509	comment	3.0	10.0	1505418166	12.334557
15250896	Build systems really help reduce the	"Build systems really help reduce the number of scripts (and stylesheets) loaded. I currently use Ember-CLI, and it's just a ""vendor"" script containing all your third-party scripts and another with your app-specific code.The old-fashioned way of embedding scripts directly is really wasteful, I agree."	ralmidani	13.108492	-6.4449253	comment	3.0	12.0	1505413157	-15.51596
15253629	A little disappointed to see that th	A little disappointed to see that they're still shipping Ruby 2.0; a version shipped 4 years ago. I would hope that they would update this soon to keep up to date with the language and security patches	ryanbigg	12.67369	-7.022811	comment	3.0	11.0	1505435342	12.376896
15276889	Speed is one of the reasons to stay 	Speed is one of the reasons to stay on apache.  Using nginx to serve static and using php_mod vs fpm-php will be faster as long as you disable directory level .htaccess	wolco	12.713557	-6.553317	comment	3.0	13.0	1505749478	10.171659
15277819	i really wanted to like coffeescript	"i really wanted to like coffeescript, but the idea of compiling, transpiling or any other kind of piling of javascript just rubbed me the wrong way. this is true of scss, less and other css flavors too.i understand the problems these tools are trying to solve, but i don't like that you have to learn two (or more) grammars and syntaxes, and the quirky interactions between them, to get those benefits (because you can't debug one without debugging the other). it's a lot more cognitive overhead for what amounts to a little syntactic sugar.standard es-whatever javascript needs to be ""good enough"", and, despite my disdain for using coffeescript, the improvements that coffeescript induced in javascript are heartily welcomed."	clairity	12.398131	-6.5397224	comment	3.0	11.0	1505755991	-10.521327
15278640	I'm chief architect at Slack, and we	"I'm chief architect at Slack, and we migrated to Hack from PHP 5 throughout 2016.The toolchain for HHVM is all installed as a single big deliverable, which gives you the language engine and supporting runtime libraries itself, an in-address-space web server (Facebook's Proxygen), a debugger in the form of hhvm -a, and the Hacklang toolchain accessed via hh_client and appropriate editor/IDE integrations.I share your intuition that there is actually a glittering core of ""stuff-that-makes-you-successful"" hiding in the incidental complexity of PHP, and we wrote this blog post trying to put some substance behind that intuition: https://slack.engineering/taking-php-seriously-cf7a60065329"	kmavm	12.763288	-6.6480136	comment	3.0	11.0	1505761989	10.291253
15277730	TypeScript still seems the much bett	TypeScript still seems the much better choice.	XCSme	12.363083	-6.7675223	comment	3.0	10.0	1505755325	-10.450562
15277128	> So a CoffeeScript => is now output	"> So a CoffeeScript => is now output as =>Wait, using the arrow function notation doesn't bind this, arguments, super, or new.target[1] in javascript, as opposed to the normal function syntax.  Not being a user of coffeescript, did coffeescript not do that already, or did they also throw in code to change that in the generated code?It seem to me it would make sense to map items that match conceptually, not just notationally (unless it's common to have both coffeescript and JS side by side).  Can someone comment on how this is handled?1: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Refe...Edit: Added ""in javascript"" after reference to make it obvious I was talking about JS behavior for the binding."	kbenson	12.393256	-6.557369	comment	3.0	15.0	1505751172	-10.581224
15279554	it is weird for me why Laravel is so	it is weird for me why Laravel is so popular now given that as far as I've read documentation, a lot of it is written in static class calls, which is opposite of OOP and all good pratices coming with OOP.. I understand that it's kind of rails and gives short-term productivity, but if you have complex project, it will become an issue if majority of project code is spaghetti code without DI, IoC and so on.	akoncius	12.811078	-6.64522	comment	3.0	11.0	1505768583	10.406508
15320057	Learning PHP/Car Engines	Learning PHP/Car Engines	billphipps	12.763595	-6.630982	story	3.0	5.0	1506179225	10.275778
15320582	Not an expert by any means but to me	Not an expert by any means but to me the biggest change is no more Python 2.> Django 2.0 supports Python 3.4, 3.5, and 3.6. We highly recommend and only officially support the latest release of each series.People should not write new code in Python 2 at all. If you're learning Python today, I'd say pretend Python 2 doesn't exist.  Use python3-venv and renounce the baggage of the past.	keganunderwood	12.631004	-6.6750627	comment	3.0	21.0	1506185858	10.065557
15320627	The tutorial on the Django.org site 	The tutorial on the Django.org site is quite excellent. You'll also want to learn a few important extensions, like django-extra-views and djcelery.	i_am_nomad	12.833621	-6.540418	comment	3.0	11.0	1506186277	10.096224
15351058	It'll just encourage companies to re	It'll just encourage companies to rewrite all their software as one line of Perl.	insertnickname	12.334289	-7.025262	comment	3.0	10.0	1506538314	13.185791
15387286	I'm converting a codebase of Javascr	I'm converting a codebase of Javascript of about 200+ js files to Typescript today. I am about 5% complete... already found two places where the argument list was wrong and was being sent into a void. I also see the code that was making up for the fact that the third argument was being ignored (basically patching downstream because they thought the feature was broken).Now this codebase was written with a high degree of quality (it's pretty good but not perfect), but the lack of compile (and of course runtime)-time checks has caused waste.The second phase of my project to convert all promises to RX Observables :)	coding123	12.370014	-6.7752953	comment	3.0	12.0	1506973618	-10.417632
15389922	15 commits 4 years ago, 121 commits 	15 commits 4 years ago, 121 commits 8 months agoIf these things are so good why does no one use them? EVERYONE using Erlang is using the same hotswapping facility. This sort of dynamism is just fighting against the language in an environment like Haskell.	tree_of_item	12.550745	-7.5298853	comment	3.0	10.0	1507001892	12.918214
15396340	Ember.js: The Road to Ember 3.0	Ember.js: The Road to Ember 3.0	mixonic	13.115092	-6.447487	story	3.0	48.0	1507065901	-15.514509
15400094	> If you're a PHP user, don't use th	> If you're a PHP user, don't use this function unless you know you need to. There are better functions now.Don't leave me hanging! What are the better functions now?	jordanlev	12.764905	-6.635134	comment	3.0	10.0	1507121794	10.329488
15430103	I take it you've never used Rails' s	I take it you've never used Rails' scaffold generator ... it does much of what you speak of (db schema, basic html/css forms, etc.)	callmeed	12.749577	-6.903628	comment	3.0	11.0	1507498234	12.284708
15449623	Built in everything. Users, auth, ad	Built in everything. Users, auth, admin, ORM.Flask is the opposite: Bring Your Own Everything. It's not hard to replicate the functionality of Django but there is surely utility in having everything boxed up and ready to go.	speg	12.817487	-6.5329943	comment	3.0	18.0	1507729128	10.063656
15458452	Compared to what, though? I really l	Compared to what, though? I really like how everything is a method in Ruby as compared to, say, Python where it seems completely random if something is or isn't -- for example, I have to constantly remember that to get a length of an array in Python I have to do len(x) rather than x.len().Although I like what Rust and Nim are doing with making the method/function distinction irrelevant -- there, x.f() is just syntactic sugar for f(x) -- so you can use whichever you prefer.	jhbadger	12.385027	-7.1160846	comment	3.0	11.0	1507820413	12.332462
15463548	How do web programming languages lik	How do web programming languages like PHP and Ruby become native?	callumjones	12.627077	-6.7590265	comment	3.0	27.0	1507874489	10.4596815
15475129	> AUTHOR: MGThis is already in your 	> AUTHOR: MGThis is already in your commit history, so why hardcode it into the source?> FILENAME: functions.phpThis is obvious because you just opened the file. So again, why even put it there? When the file gets renamed the documentation is no longer correct? These things are also hard to refactor.> STATUS: ACTIVEEvery part of the code is always active...> PURPOSE: All of the functions for this application (app name)Okay, probably the most useful one here. But what if we're refactoring the code and the purpose changes? Or if someone adds a few functions and the documentation no longer covers the purpose?> NOTES: There are several unused functions in this file that are commented out but once in production They can be deleted as we likely will not be needing them at all.Very dangerous, aga	Avalaxy	12.602984	-6.4762883	comment	3.0	29.0	1508027490	10.309562
15486154	Random internet browsing! I have a p	Random internet browsing! I have a previous interest in astronomy and I stumbled upon our website, which had a jobs page. They were looking for someone with Django experience.The field has an increasingly large demand for people with software engineering experience due to the complexity of modern observatories, instrumentation and data analysis. It's only going to grow from here. The problem is competing with SV, which tends to be a black hole for talented software engineers.	WD-42	12.782809	-6.5394063	comment	3.0	12.0	1508183668	10.051807
15530544	Another interesting project is RDL: 	Another interesting project is RDL: https://github.com/plum-umd/rdlBoth Diamondback and RDL come out of UMD. I'm curious what drives this research there. From what I can tell, Ruby is barely touched otherwise by academia.	jbackus	12.666936	-7.0200458	comment	3.0	10.0	1508729891	12.37675
15571321	Apply for a job as a PHP programmer 	Apply for a job as a PHP programmer and see what you're offered.	Animats	12.779964	-6.625932	comment	3.0	13.0	1509131594	10.317097
15573130	But Reason is already version 9?(I k	But Reason is already version 9?(I know there's going to be some overlap between project naming, but Reason is a fairly well-known product...)	jonathonf	12.362765	-7.563216	comment	3.0	11.0	1509147570	-1.8690149
15574824	Crystal is a Ruby inspired compiled 	Crystal is a Ruby inspired compiled language, allowing it to run blazingly fast with a very low memory footprint. It uses LLVM for emitting native code, thus making use of all the optimisations built into the toolchain.I've been using Crystal for more than 2 years have some projects in production. Can't wait for 1.0 :)	sdogruyol	12.607444	-7.2438593	comment	3.0	35.0	1509191167	-11.210274
15575019	I've been working on https://luckyfr	I've been working on https://luckyframework.org and I can say that meta programming is extremely powerful and much easier for me to use than either Ruby or Elixir.You can see a bit of what the macro system enables here: https://robots.thoughtbot.com/lucky-an-experimental-new-web-...It generates a bunch of query methods and type specific querying. Without the macro system this would have been impossible.	paulcsmith	12.56455	-7.1445704	comment	3.0	20.0	1509195965	12.412168
15575189	Is there an easy way to get interop 	Is there an easy way to get interop working between crystal and ruby? It would be nice to be able to simply require a crystal module that calls out to a compiled binary in the middle of my Ruby code.	faitswulff	12.624714	-7.235008	comment	3.0	10.0	1509200028	-11.234948
15575067	Crystal really does feel like Ruby w	Crystal really does feel like Ruby without the annoying parts, plus the macro system feels like a _better_ meta programming facility.On the other hand I've read reports that sufficiently large codebases begin to hit machine memory limits for the compiler because they have to scan and construct every possible union type in the codebase. Not sure what there is to do about that other than bisecting the codebase into shared libraries over time.	look_lookatme	12.618322	-7.2313576	comment	3.0	16.0	1509197560	-11.2502985
15575420	The example from the blog post is a 	"The example from the blog post is a classic error we've all made. There seems to be an obvious opportunity for Rails do something creative about that.I like the String? sugar and believe there is probably some opportunity in Rails to address it. For example make a new NillableObject class that wraps the real object or delegates method_missing.The idea would be to throw a warning, raise an error, etc. when accessing a nillable attribute. This could get obviously more robust than the below example, hook into read_attribute, leverage validations, log a warning instead of raise a runtime error, etc... but hopefully the point is made.  class NillableObject
    def initialize(obj = nil);@obj = obj;end

    def method_missing(name, *args, &block)
      raise ""I'm nillable, don't call methods agai"	rubyfan	12.411331	-7.1165957	comment	3.0	13.0	1509204321	12.329293
15583381	> Plus, being a superset means that 	> Plus, being a superset means that if you want to 'drop into' JS to take advantage of some quirk or whatever at any time, you can just disable your linter and do the deed.This is an exact example of what GP was talking about with leaky abstractions though. You don't have to just learn TS to use TS, you need to learn TS and JS.IMO a proper, strict typed language; and plain Javascript; are both much better options than TS.	BigJono	12.366137	-6.779805	comment	3.0	11.0	1509344318	-10.558002
15583853	My point exactly. If people who like	My point exactly. If people who liked type systems could stand to use the JS type system (and I only barely managed to write type system without scare quotes), we wouldn't have TypeScript. Or Cofeescript. Or Purescript. Or Elm. Or Fable. Or Flow. Or even ES6.	alkonaut	12.350389	-6.787587	comment	3.0	24.0	1509355758	-10.434302
15594226	I'm surprised by JavaScript results.	I'm surprised by JavaScript results. I expected it to rival Perl for top place.	Yizahi	12.327715	-6.7531166	comment	3.0	11.0	1509465749	13.1754875
15594786	Announcing TypeScript 2.6	Announcing TypeScript 2.6	DanRosenwasser	12.427793	-6.839644	story	3.0	51.0	1509469817	-10.54337
15604331	Dare I say - but you can use Typescr	Dare I say - but you can use Typescript with other frameworks too.. just because it's built in here / there are more resources?	kierenj	12.391445	-6.7337365	comment	3.0	12.0	1509562165	-10.482359
15608393	> queue those up in a list (in the c	> queue those up in a list (in the code)That won't work in the language that most server-side website code is written in. PHP processes are created and destroyed per HTTP request, and even the FastCGI implementation won't let one share data across requests. PHP does have a sessions feature, but that data is written to either the filesystem (by default) or a database on every request!	dotancohen	12.739635	-6.563834	comment	3.0	16.0	1509606238	10.186489
15611434	Is this enforced in Ruby or just a c	Is this enforced in Ruby or just a convention? It's a great convention and is used in Clojure and older Lisps at least with the -p suffix (for predicate). There's no reason you can't use the same convention in Python. I've often wanted to write predicates with the -p suffix but stopped myself becasue I don't think other Python people would understand it. Maybe I should just do it anyway.	cup-of-tea	12.354157	-7.1057777	comment	3.0	13.0	1509637619	-10.951285
15625899	> I would be so happy if someone too	"> I would be so happy if someone took away my power to choose and just forced me to use something that will ""just work"".You are looking for django/ruby on rails."	midrus	12.799243	-6.669267	comment	3.0	12.0	1509815092	10.292707
15641747	It’s a shame that people feel this w	It’s a shame that people feel this way about Ruby. The thing about ruby and scripting languages like JavaScript is their nature make them very easy to dig in. That’s why you see these scripting languages being used everywhere. The same problems mentioned here plagues JavaScript yet it’s the most used language on the web.I’ve personally built rails app that have been running for the last 5 years with clients using it to process millions of USD and I rarely have to touch it. And even now when I have to make changes it’s easy to fix and patch up because it was built right.Most founders who don’t understand development “need things done yesterday”. If your business doesn’t take into account technical debt you are going to skimp on things and cut corners. It’s not ruby’s fault. It’s the busines	artellectual	12.714094	-6.9414153	comment	3.0	36.0	1510042813	12.348156
15641854	While I do echo some of the sentimen	While I do echo some of the sentiments of the author, I still LOVE Ruby. I use it for small scale projects, for very quick data processing needs or on Jupyter notebooks. I used to run a full fledged Ruby shop a year or two ago and I have to tell you, in this day and age, even today, there is NO full-fledged equivalent to Rails.Having said that, now I predominantly use Phoenix/Elixir for most new projects. And the framework is moving ahead blazing fast. It has its own pros and cons, but overall, it's been a VERY positive experience and it actually saves me a LOT of time because I'm able to find code errors at compile time.It's almost the only alternative to Rails which seems like home if you're transitioning, but it still has its own issues. For example, they screwed up the code organizatio	neya	12.75068	-7.021744	comment	3.0	15.0	1510044485	12.467259
15642050	">Ruby is ""too magical"" for its own s"	">Ruby is ""too magical"" for its own sakeMagic is extremely useful in the right place (e.g. building ORM or admin frameworks) - these can save you from writing a ridiculous amount of code.Unfortunately since it's an 'advanced' feature lots of programmers want to shove it in places where it not only isn't necessary, but is actively harmful.Python has all the same features and allows you to write code that is equally horrible (or powerful), but it benefits from a cultural bias in favor of simplicity.That said, I've still seen unnecessary magic code written by people looking to prove that they are no longer ""intermediate developers"".>People sell TDD like a OCD inducing religion instead of something that might be a good idea in some specific casesI think TDD with integration testing works in alm"	crdoconnor	12.496995	-7.0362763	comment	3.0	12.0	1510047831	-13.344316
15642063	I'm not really trying to make an arg	I'm not really trying to make an argument against it anyways.  IMO if you haven't jumped in early in the Rails's lifetime, it's really hard to catch up; this is what I'm saying.	gkya	12.767628	-6.940245	comment	3.0	18.0	1510048171	-5.6383433
15648563	Also, the author is advocating a UI 	Also, the author is advocating a UI model that has pre-existed React, it was just popularised by React.You could argue that Elm is actually closer to what the author is advocating.	beefsack	12.981032	-7.571918	comment	3.0	11.0	1510096152	-12.756736
15660916	So Flow seem to be complaining that 	So Flow seem to be complaining that number and string are incompatible types for the array elements. I attempted to change your arr.push(3) statement to one that is appending a string, and it gave the same error even though it should not have given an error in that case.Neither Flow nor TypeScript are correct in this instance. Neither keep track of the actual array element's value, just the general type of the array, which means they actually don't know for sure and do their best guess. So in the Flow example, it complains that the number and string types are incompatible even though it doesn't know that this specific case is incompatible, just the general case. In the TypeScript example, it should keep track of the type of the argument value supplied during the function invocation, not th	yladiz	12.416853	-6.772655	comment	3.0	11.0	1510218295	-10.470245
15671352	Ah, K&M. Lots of potential, many fun	Ah, K&M. Lots of potential, many fun moments, but it's far from rationalist fiction. Still, if you ever need wish fulfillment that the time you spend at work beating down technical debt could instead allow you to fight monsters and cast spells leveraging the mana pool of a giant robot, it's a fun read/watch.From an unofficial (and somewhat grammatically atrocious) English translation of the original novel [0]:> Normally, Eru would have given up at this stage and would have chosen a more practical spell. But he knew how to solve the problem because of his unique skills ― programming concept. He had experience in designing and coding software to handle multiple variables. That's why he skipped the beginner magic phase and jumped straight into the 'modified magic' phase. Reviewing the structu	btown	12.571135	-7.513453	comment	3.0	20.0	1510334504	12.930561
15672779	> - No supervision tree. Erlang exis	> - No supervision tree. Erlang existed far before Go but they didn't learn from this key feature. But it would greatly enhance Go to have itThis is the one thing in your list that I don't recognise. What is a supervision tree? Can you (or another Erlang programmer) point to your favourite reference?	cannam	12.452691	-7.580354	comment	3.0	10.0	1510346312	12.816856
15680787	WAM-CL: Common Lisp in Prolog	WAM-CL: Common Lisp in Prolog	lispm	13.133643	-7.3091645	story	3.0	67.0	1510493407	-12.486079
15682281	The link to the main github page, fo	The link to the main github page, for the curious: https://github.com/TeamSPoon/wam_common_lispIs SWI-Prolog really faster than CLisp? I had no idea. Prolog seems like a language that would be pretty slow by default, but maybe you can do some pretty novel optimizations	fasquoika	13.147387	-7.295768	comment	3.0	19.0	1510516206	-12.486876
15692781	Phoenix creator here. Happy to answe	Phoenix creator here. Happy to answer any questions. This article does an excellent job diving into the underlying details of Phoenix channels and pubsub.For those that want a thousand foot view and are curious what makes Elixir and Phoenix unique compared to other solutions, think of Phoenix channels as trivial realtime communication that is distributed out of the box. With Elixir, processes (green threads) are load balanced on both IO and CPU so no single channel client will block another, regardless of the work you may be doing. Channels are also multiplexed on a single concrete connection so the same client can be doing intensive work in one channel while receiving messages over another. The runtime is also distributed, so process messages can reach any server in the cluster which is w	chrismccord	12.748843	-7.2660756	comment	3.0	15.0	1510635291	12.805419
15700779	Erlang is amazing language in its si	Erlang is amazing language in its simplicity. And it was the perfect language for the web. I keep wondering why it never really took off.	noncoml	12.564484	-7.51674	comment	3.0	21.0	1510708539	12.922677
15702419	"Maybe it wasn't ""real web developmen"	"Maybe it wasn't ""real web development"" but I've worked in projects with O(thousands of lines) of transpiled and minimized typescript where they worked fine."	foota	12.370173	-6.733272	comment	3.0	11.0	1510736222	-10.423238
15704502	A lot of complaints usually affect n	A lot of complaints usually affect niche or rare use cases in the language (or you learn them fast).Though I guess the same applies to PHP.It's a lot nicer to write webapps in Go though since you have control over global state and not the per-request state of PHP, which makes for some easier solutions to problems (work-queues are easy to implement/use on the server-side unlike in PHP)Also the stricter type system compared to PHP is nice in addition to static linking making it more portable than PHP (minus not being portable to shared hosters)	zaarn	12.655833	-6.77233	comment	3.0	12.0	1510760746	10.297548
15704438	They forgot the mindshare of PHP use	They forgot the mindshare of PHP users. The tradeoffs Go makes are rather similar (simplicity, ease of deployment vs expressivenes and consistency).	nine_k	12.782508	-6.6207447	comment	3.0	30.0	1510760252	10.329428
15704466	I saw a tweetstorm by a longtime Go 	"I saw a tweetstorm by a longtime Go user who listed all the flaws and inconsistencies of the language. In the end it didn't look much better than PHP to me. Which is surprising, since PHP is a ""grown"" language and go has been ""designed"" by some longtime languages pros."	k__	12.616898	-6.8475432	comment	3.0	18.0	1510760515	10.25986
15714178	It gets flak for the same reason php	It gets flak for the same reason php gets flak.They both more or less accidentally became popular.  None of them were very well designed. They both lacked type safety.Unlike php though javascript became not only popular but it actually ended up being the only alternative.	eitland	12.670475	-6.564638	comment	3.0	14.0	1510851057	10.328768
15720174	erlang.As a programmer it was a reve	erlang.As a programmer it was a revelatory thing of beauty. When we tried to spread it within our org we found that the 'typical' (even relatively strong) programmer resisted its concepts and found it hard to learn.Therefore it didn't scale for us.	zwischenzug	12.552173	-7.5063057	comment	3.0	10.0	1510907004	12.924051
15751179	It's not exactly encouraging to see,	"It's not exactly encouraging to see, on the Willow Garage ROS website, that the page seems to have been last updated in 2013 (http://www.willowgarage.com/pages/software/ros-platform). You'll instead want to try http://www.ros.org/
or go directly to the installers, located at: http://wiki.ros.org/lunar/InstallationHowever, the latest version (Lunar) on OSX is described  ""This is a work in progress! It really won't work right now... "" and I've verified their instructions don't work. Instead, you'll want to use this shim: https://github.com/mikepurvis/ros-install-osxHope this saves some folks time."	jackhack	12.681992	-6.8253026	comment	3.0	20.0	1511295485	12.187589
37939011	Ruvy: creating Wasm modules from Rub	Ruvy: creating Wasm modules from Ruby code	thunderbong	12.38652	-6.8684144	story	3.0	98.0	1697694896	12.380267
37945569	>But the Flask-Login team is not act	>But the Flask-Login team is not actively developing the extension anymore.So they should tie the development to an extension that isn't in further development?	croes	12.728654	-6.5819974	comment	3.0	31.0	1697735388	10.05328
37945665	The issue with Flask-Login isn't eve	The issue with Flask-Login isn't even a functionality change. Flask just decided to stop making a particular function available in their namespace and now wants you to import it from the Python standard library instead.A better solution for a case like this would be to import the function from the Python standard library into the Flask namespace, so old code would still work. Then it wouldn't matter that Flask-Login is no longer actively maintained.Also, as the article notes, Flask-Login is by no means the only Flask-using Python package that was broken by this change. Are all of those other packages no longer actively maintained? I doubt it.	pdonis	12.728241	-6.5718307	comment	3.0	22.0	1697735868	10.025997
37946659	The elixir-tools Update Vol. 4	The elixir-tools Update Vol. 4	mhanberg	12.685995	-7.453406	story	3.0	68.0	1697740222	12.931215
37949210	VSCode + ElixirLS is usually enough 	VSCode + ElixirLS is usually enough for everything. ASDF is a useful tool to install desired Erlang/Elixir version. Don't think you need anything else	out_of_protocol	12.636429	-7.443467	comment	3.0	10.0	1697752277	12.9430275
37950995	I think it's that AtomVM is erlang s	I think it's that AtomVM is erlang specific, while nerves is elixir and erlang. I could be very wrong, but that's my initial read from the docs	voicedYoda	12.581696	-7.5020356	comment	3.0	13.0	1697763944	12.938638
37964085	whats the differene with this from f	whats the differene with this from flask?	kyahwill	12.730462	-6.53237	comment	3.0	13.0	1697862559	10.045149
37973258	Prolog is Turing-complete, and Datal	Prolog is Turing-complete, and Datalog isn't. In light of this, I think it's a bit of a stretch to call it a (logic) programming language. But people seem to do that.	trott	13.167655	-7.206661	comment	3.0	12.0	1697955773	-12.45036
37973629	> Is there any theoretically stronge	"> Is there any theoretically stronger expressive power one gets from Prolog over SQL,I guess this is best illustrated by examples.In prolog, you can define how people are related using ""facts"" or data:    person_parent(alfred, benny).
    person_parent(benny, carl).

This then forms relationships. In SQL you could write:    CREATE TABLE persons ( name TEXT NOT NULL, parent TEXT NOT NULL);

The difference lies in how you query said data.Let's say I want to know if ""carl"" is the grandparent of ""alfred"", in Prolog I would first write a rule to define what a grandparent is:    grandparent(X, Y):- person_parent(X, Z), person_parent(Z, Y).

Then query if ""carl"" is the grandparent of ""alfred"":    grandparent(alfred, carl). --> true

Now, the interesting thing is that I can use the same rule to as"	Skinney	13.155761	-7.2721496	comment	3.0	11.0	1697961321	-12.469447
37997218	Because of my career path spent almo	Because of my career path spent almost entirely as a consultant and now working with lots of startups, I must have seen 100+ web application builds.The productivity of Rails absolutely trounces JS-framework-de-jour in my experience.  It’s  almost certainly the framework I would be recommending for a CRUD app, which covers the vast majority of business software.	benjaminwootton	12.727981	-6.7567997	comment	3.0	34.0	1698144850	12.315248
37997233	Are new developers choosing Ruby on 	Are new developers choosing Ruby on Rails?I feel like there’s a real shift towards strong (er) typing.What does this mean for Rails?My main language has been Python for a long time now but I’m really coming to prefer typescript for certain applications.Does Ruby remain relevant as the industry moves towards typed languages?	andrewstuart	12.591124	-7.019965	comment	3.0	11.0	1698144980	12.36289
37997585	So batteries included user signup au	"So batteries included user signup auth flow?I can see why that would get you going quick.
Certainly Django doesn’t provide that. Most other frameworks I know don’t provide that.I know I’m dead sick of building my 50th user signup flow.Having said that, once it’s built that’s done.
What’s the ongoing productivity gain beyond that?"	andrewstuart	12.821813	-6.4993243	comment	3.0	10.0	1698147222	10.057524
38016285	> I don't have to worry about the st	> I don't have to worry about the state of my system, or reverting to an old version of ruby, etc. to get the old project running again.But wouldn't you want to update your project to a new(er) version of Ruby in that hypothetical?There have probably been security updates along the way.	nvy	12.650636	-6.9395776	comment	3.0	11.0	1698258088	12.365109
38037082	Gleam looks great.The only thing abo	Gleam looks great.The only thing about Elixir I'm unhappy with is the typing. Gleam seems to bring good things from the Rust type system to the Beam (especially sum types, pattern matching and avoiding nil).My question though, I've been really happy with Phoenix for web development. How well would it work to develop a Phoenix web app with Gleam? Would it even work with LiveView?Could I use Gleam on the frontend too (it also compiles to JavaScript)? How would that work with LiveView?	lawn	12.726566	-7.2609634	comment	3.0	11.0	1698405442	-12.323056
38038608	It's usage is mostly rest api's in s	"It's usage is mostly rest api's in silicon valley.
It's third party ecosystem is basically dying (especially noticeable when compared to ruby on rails). Job hiring for Django is disappearing from the non startup arena, which is especially bad for career developers since you need a career pathway."	stuckinhell	12.803898	-6.6512647	comment	3.0	13.0	1698415679	10.221208
38045418	I can’t see why this should not be t	I can’t see why this should not be the case. Logic Programming languages like Prolog can be used for general purposes. The main catch is that you need to be really good at Prolog to use it to full generality. But if you’re willing to put in the time it should be able the same.	rabbits77	13.133437	-7.27928	comment	3.0	13.0	1698450378	-12.472953
38050484	It’s mostly just a UI for CRUD. And 	It’s mostly just a UI for CRUD. And most systems are more complex, requiring UIs that operate on business logic.Rails and Phoenix also offer similar features (called scaffolds), but they are optional.  I’m sure other frameworks have similar options.Meanwhile, Django (like Python) sometimes has unconventional names and approaches to doing common things, so that makes the pair unpleasant and awkward for those of us with experience with several other tools and frameworks.	michaelteter	12.827254	-6.6206884	comment	3.0	19.0	1698506460	10.20911
38050493	I don't know Django but doesn't mode	I don't know Django but doesn't model validation apply to the admin screens?	petepete	12.861051	-6.503186	comment	3.0	11.0	1698506518	10.088063
38050558	Ok, how complex are _your_ systems? 	Ok, how complex are _your_ systems? Simple table views are available through a number of database management software (dbeaver). What does django provide beyond that?	sojournerc	12.900968	-6.4735284	comment	3.0	13.0	1698506918	10.091268
38099601	Yes... but I think the real question	"Yes... but I think the real question that will stump people is ""What is <? super Foo> and how is it different from <? extends Foo>"". :DJava generic semantics are wild and often surprising.But too your point, I think typescript is FAR more complex than C++ yet I almost never see similar complaints of its complexity.  The richer the type system, the more complex the language."	cogman10	12.32957	-6.863939	comment	3.0	11.0	1698852609	-10.440026
38099638	Perhaps we're finally at a point on 	Perhaps we're finally at a point on HN where people realize there's no need to question the use of PHP. it's a robust, capable language that's just as, or more, suitable for the majority of use cases as any other language.	stronglikedan	12.762978	-6.6396313	comment	3.0	12.0	1698852714	-1.5198593
38109747	Why focus on PHP?I've been at this g	"Why focus on PHP?I've been at this game long enough now to recognize that it's more valuable to think of being at a ""layer"" of the tech stack. In your case with PHP I'm guessing you're part of the web stack. There are plenty of languages for which you'd have plenty of pre-existing web experience that would make it easy to develop in. I'm mostly in the web stack as well and I've used several different languages at different companies and really never cared."	jabloczko	12.755152	-6.643636	comment	3.0	11.0	1698907161	10.327087
38121997	> Not sure why it's being compared t	"> Not sure why it's being compared to PHPprobably just because PHP is now recognized widely as fundamentally bad design. Its just that many people who came late to the party never really knew why, so they think to themselves, no this is actually great ""no API boilerplate, fetch, tRPC anything.. You just define a function and call it, very nice."".And so the cycle continues..."	lyu07282	12.740665	-6.6287622	comment	3.0	20.0	1698968510	10.2792225
38122266	Isn't PHP Laravel author owner of a 	Isn't PHP Laravel author owner of a Lambo? I wonder what the plate reads.	hu3	12.787934	-6.626511	comment	3.0	10.0	1698969934	-1.2481017
38146952	I forget where I learned this. But t	I forget where I learned this. But this follows my refactoring legacy code principal.Your new code (typescript in this case) should never reference the old code. Old code is the only thing that knows about new code.The reason being is if your new code ever knows about your old code, your new code will carry on old code forever. You can never escape.But if only old code knows about new code. Your new code is perfectly clean.For this typescript conversion problem the nice thing is you can configure typescript to allowJs and your existing code can import compiled  typescript	pyrolistical	12.364404	-6.8360333	comment	3.0	12.0	1699146535	-10.487267
38151952	Oh no, is ReactOS referred to as ROS	Oh no, is ReactOS referred to as ROS? ROS is already taken by Robot Operating System. I fear for the future of search results.	JCharante	12.716177	-6.7965546	comment	3.0	10.0	1699198283	12.169888
38155249	If you're curious how Git knows the 	"If you're curious how Git knows the syntax of different languages in order to support this kind of feature, take a look in https://github.com/git/git/blob/master/userdiff.cHere's how support for Python and Ruby are defined:    PATTERNS(""python"",
        ""^[ \t]*((class|(async[ \t]+)?def)[ \t].*)$"",
        /* -- */
        ""[a-zA-Z_][a-zA-Z0-9_]*""
        ""|[-+0-9.e]+[jJlL]?|0[xX]?[0-9a-fA-F]+[lL]?""
        ""|[-+*/<>%&^|=!]=|//=?|<<=?|>>=?|\\*\\*=?""),
        /* -- */
    PATTERNS(""ruby"",
        ""^[ \t]*((class|module|def)[ \t].*)$"",
        /* -- */
        ""(@|@@|\\$)?[a-zA-Z_][a-zA-Z0-9_]*""
        ""|[-+0-9.e]+|0[xXbB]?[0-9a-fA-F]+|\\?(\\\\C-)?(\\\\M-)?.""
        ""|//=?|[-+*/<>%&^|=!]=|<<=?|>>=?|===|\\.{1,3}|::|[!=]~""),"	simonw	12.3788805	-7.0363216	comment	3.0	10.0	1699215715	12.407795
38184807	I think it might actually be easier 	I think it might actually be easier to inspect the BEAM over those other VMs. For one, it is much older and stable. And secondly, the BEAM has a lot of self-introspection features.I highly recommend the talk The Soul of Erlang and Elixir by Sasa Juric which shows off the essence of the BEAM.https://youtu.be/JvBT4XBdoUE	bmitc	12.437461	-7.3653	comment	3.0	18.0	1699401003	12.827537
38191151	Build a Lightweight Code Generator w	Build a Lightweight Code Generator with TypeScript and JSON Imports	philk10	12.354376	-6.752342	story	3.0	21.0	1699455137	-10.472521
38218289	It's just a hype phase. Types are co	It's just a hype phase. Types are cool, but in the past few years they seem to be the panacea for all problems, by inexperienced engineers that have got their first taste of Rust and Typescript. As if writing in Typescript would produce less buggy, more stable or more maintainable applications than using Elixir.I'll say types are cool again before I get routed by angry static typing zealots.	sph	12.407587	-7.3970675	comment	3.0	14.0	1699621269	12.920352
38219954	YJIT tech lead here.On the flip side	YJIT tech lead here.On the flip side, YJIT is probably one of the most memory-efficient JIT compilers out there (for any language). I say this having spoken to other JIT implementers.We've worked really hard to reduce the memory overhead and at Shopify it's now down to less than 10% in our flagship production deployment.Regardless, if memory usage is a legitimate concern for you, you can very easily remove the Rails initializer that turns on YJIT. You can choose between memory usage and response time. The choice is yours.	maxime_cb	12.606751	-7.0278397	comment	3.0	10.0	1699629767	12.367741
38228357	For the sake of completeness, I can 	"For the sake of completeness, I can recommend Werkzeug. I use it for Django backend development and it's incredibly useful. It allows me to have ""PDB"" shell right in the browser whenever and wherever an exception is met."	adr1an	12.816506	-6.5119452	comment	3.0	12.0	1699688654	10.047474
38240089	Ruby 3.3.0-Preview3 Released	Ruby 3.3.0-Preview3 Released	yoelo	12.633719	-7.0108433	story	3.0	68.0	1699797376	12.386361
38249968	I couldn't agree more. There is also	"I couldn't agree more. There is also a technology aspect to it. Rails is objectively veeeeeery slow. Concurrency support is nonexistent. This is not a good
fit for all problems. It also to some degree prevents you from breaking out the parts that would benefit from a different language into their own services (Rails needs to call them, but it's really not good at IO)."	jupp0r	12.738118	-6.939562	comment	3.0	29.0	1699882771	12.341673
38253639	I'm going to have go push back on th	I'm going to have go push back on this.I don't like the RoR community, not because they're bad people, but because I think they're insane from a tech perspective.I only occasionally pick up RoR work because of how off-putting my first experience was.  But what makes it worse is that every project I've been on (including one I just started on a few weeks ago) has just been a cluster.What you're saying here is true in theory, but what you're not telling people is how the community is about as close to the attitude of npm as you can get on the server side.  hundreds of gems on your typical application, many of which are used in 1 or 2 places, helping avoid a grand total of less than 5 lines of code.Then there's the ratwheel you opt into with rails.  Every single damned time I find myself havi	PH95VuimJjqBqy	12.710707	-6.936843	comment	3.0	17.0	1699901318	12.341607
38265918	Oh, I see. I was hoping for somethin	Oh, I see. I was hoping for something new. I keep on hoping some sort of BEAM-like (from Erlang) process gets added to .NET.	bmitc	12.540135	-7.4748254	comment	3.0	13.0	1699980878	12.922213
38269138	Also for a practical tip on YJIT mem	"Also for a practical tip on YJIT memory usage, note that there is a ""--yjit-exec-mem-size"" option, see https://github.com/ruby/ruby/blob/master/doc/yjit/yjit.md#co... for more details. (This command-line argument is mentioned in the paper https://dl.acm.org/doi/10.1145/3617651.3622982 but not in this blog post about the paper.)At Heii On-Call https://heiioncall.com/ we use:    ENV RUBY_YJIT_ENABLE=1                                                                                                             
    ENV RUBYOPT=--yjit-exec-mem-size=16                                                                                                

in our Dockerfile for our Rails processes."	compumike	12.641781	-7.0277085	comment	3.0	16.0	1699993315	12.380364
38362938	I always found it easier to avoid `t	I always found it easier to avoid `ts-node` as it introduced a bunch of small compat issues.Since TS 4.5 and their support for `.mts`, I finally settled on just chaining `tsc --build && node ./build/main.mjs`.	demurgos	12.373301	-6.527448	comment	3.0	12.0	1700570892	-10.395975
38365241	I use swashbuckle and swagger-typesc	I use swashbuckle and swagger-typescript-api to automatically scrape my controllers and generate API calls and TS types every time I rebuild. No hassle or overhead at all. No need for converters or anything.I've been using this now for several projects, it's a great way to have all the power of TS for client side and C# for server side.https://www.npmjs.com/package/swagger-typescript-apihttps://www.nuget.org/packages/Swashbuckle	JackMorgan	12.440891	-6.605858	comment	3.0	10.0	1700581682	-10.47674
38366084	I mean, if you have a file `mod.ts`,	"I mean, if you have a file `mod.ts`, in Deno you cannot import `mod.ts` using the following import:  import {} from ""./mod.js""

You have to write:  import {} from ""./mod.ts""

ESbuild doesn't transform source imports. Thus, by transpiling your code using ESbuild, you get an erroneous import that leads to a runtime error in browsers and Node. The case is worse for TypeScript, because it refuses to tarnspile this code.By the way, bundling with ESbuild is possible, however when you write a library you generally want to transpile the code, not to bundle it."	conaclos	12.412152	-6.5189223	comment	3.0	14.0	1700585024	-10.619583
38386514	> Of the bugs that I've experienced 	> Of the bugs that I've experienced in large-scale, Rails production systems, typing is a small subset.Really? Are you counting errors where a value turned out to be nil when it wasn’t expected to be? Because that’s a type error. It’s not a type error that many statically typed languages fix (Java is notorious for null pointer exceptions) but it’s a type error that can, in principle, be fixed with static typing.	philwelch	12.453385	-7.1683497	comment	3.0	10.0	1700694565	12.376338
38404142	I think it just boils down to your d	I think it just boils down to your dev pool. If you already have Java devs, why bother establishing PHP as a new language in your company? Certainly, you can't justify paying them less than your Java devs...Let's face it, a major advantage of PHP nobody talks about is that devs are cheaper.I don't mean this all in a bad way, I have seen PHP used in high quality code-bases for websites of medium sized companies. But you are limited to input/output operations. However, there is also an advantage to this, as the PHP devs I have seen are more prone to trying out new tools and not reinvent the wheel in source code.Also, I want to shout out to the guys making Sulu CRM. Loved working with it, too bad it's PHP and symfony only.	DarkNova6	12.728136	-6.6419516	comment	3.0	11.0	1700835323	10.304894
38403260	Recently got a freelance Wordpress j	Recently got a freelance Wordpress job after like 10 years of inactivity in that segment, I was surprised by how good PHP has become. I am hoping that it'll continue in this direction.	jbirer	12.7760725	-6.623417	comment	3.0	22.0	1700828697	10.354857
38405677	I love these series and agree. Ruby 	I love these series and agree. Ruby was already very expressive language and IMO few major versions ago was a good time to reconsider this area of development in favor of something else. I think contributing to <<optional>> static typing would have had higher RoI...	pawelduda	12.539707	-7.098676	comment	3.0	26.0	1700843823	12.372
38407585	Show HN: I Wrote a Book on PostgreSQ	Show HN: I Wrote a Book on PostgreSQL for Rails	andatki	12.947116	-6.5490828	story	3.0	47.0	1700855959	12.229481
38421149	Crystal is a super cool and underrat	Crystal is a super cool and underrated language. But why do you mention it here? Does kagi use crystal in other places?	freedomben	12.629878	-7.262387	comment	3.0	18.0	1701002222	-11.224554
38451026	I don't think you can dismiss critic	"I don't think you can dismiss criticism of programming languages as ""PL tribalism"". The idea that all programming languages are equally great and ""best tool for the job"" excuses all flaws is clearly ridiculous.PHP is not a very good language. Yes, even modern PHP."	IshKebab	12.758231	-6.6570992	comment	3.0	12.0	1701204216	10.406903
38455860	I got burnt out on Rails after the t	I got burnt out on Rails after the third app in a row that I was responsible for upgrading. I appreciate Rails' contribution to web development. It took about a decade for the front end framework-library ecosystem to figure out that MPAs are more effective than SPAs for most apps. Fortunately, Astrojs is part of the ecosystem. It's sortof like the fullstack JS version of Rails/Sinatra...without the ORM which IMO adds incidental complexity.If you have a thriving business already using Rails, it's difficult to justify moving off of Rails...now that painful upgrades seem to be mostly in the past. However, I do find isomorphic JS components & state management to be a pleasure to develop & maintain compared developing an app in two languages.	briantakita	12.753826	-6.851709	comment	3.0	21.0	1701235277	12.359198
38460098	Then perhaps you shouldn’t be doing 	Then perhaps you shouldn’t be doing that? Or if the position is that environment variables are suitable to hold secrets, the php folks should document the phpinfo function as a security risk and something that should not be available to unauthenticated users.Not choosing is not an option, it leads to this ‘max severity score’ ‘vulnerability’.	tinus_hn	12.731588	-6.573732	comment	3.0	10.0	1701269828	10.264872
38461322	I think legacy code in any language 	I think legacy code in any language is a security nightmare; not just PHP. Imagine a half-a-decade-old NodeJS project...	gjsman-1000	12.75568	-6.6573935	comment	3.0	10.0	1701274670	10.322737
38471504	Ask HN: Is it worth it to continue b	Ask HN: Is it worth it to continue building this laravel forge OSS alternative?	marmotteio	12.816232	-6.631257	story	3.0	6.0	1701336705	10.355737
38505257	Ask HN: How do you implement authori	Ask HN: How do you implement authorization in Django?	saaspirant	12.868333	-6.474625	story	3.0	3.0	1701584449	10.059447
38518908	Another boring release without much 	Another boring release without much innovation. I wonder what's stopping Django from releasing more useful features like other frameworks are doing. Maybe the team is stuck in the past.They've been trying to improve forms for a long time but it still sucks. I think they should just remove it at this point and let external packages solve the problem.	saasjosh	12.784906	-6.5739346	comment	3.0	10.0	1701705713	10.091185
38521272	> 6 years later, the Django side nee	> 6 years later, the Django side needed minimal changes and is up and running (I jumped all the way from 1.11 to 5.0 beta).I've been using Django since before 1.0, and the upgrade story has been nothing short of fantastic for something that's been around this long. But still, YMMV!Depending on how ancient a project you run into, it definitely can be a major pain, even with the original authors' best intentions. For example, Django didn't have its own DB migration system until 1.7 (relying on third party solutions); this means you also have to adjust the deployment procedure, which means recreating an ancient setup (ideally in an easily repeatable fashion, because you're going to be trying that migration at least a dozen times).The builtin admin system is also a pretty decent CMS on its own	rollcat	12.876089	-6.4891095	comment	3.0	13.0	1701715575	10.069447
38528938	Slightly off topic: what is the pref	Slightly off topic: what is the preferred way to deploy Rails these days?Is it to use Puma? Unicorn, etc?	alberth	12.754093	-6.9032598	comment	3.0	11.0	1701770972	12.341644
38528939	How come Ruby frameworks don't utili	How come Ruby frameworks don't utilize HTTP/2, Falcon seems like the only alternative but I don't know how mature it is?	Alifatisk	12.621431	-6.8684607	comment	3.0	10.0	1701770981	12.329115
38529903	It always puzzled me why Crystal did	It always puzzled me why Crystal didn't catch up?It seems like they just had to publish couple of benchmarks and articles here and there and that could have been it.As it has good C interop story it could have a good chance riding on AI hype wave few years later in this alternative history.	mirekrusin	12.64589	-7.2712436	comment	3.0	12.0	1701778641	1.0685577
38546307	Google's DeepMind finds 2.2M crystal	Google's DeepMind finds 2.2M crystal structures in materials science win	PaulHoule	12.631933	-7.2550955	story	3.0	51.0	1701881309	-11.150573
38562135	Likewise, non-rails ruby stuff doesn	Likewise, non-rails ruby stuff doesn't get nearly enough love.  I still use and love Sinatra for small apps quick PoCs/demos/tools.  So wonderfully stable and mature, and does what it needs to do.	freedomben	12.719255	-6.937271	comment	3.0	12.0	1701985001	12.347733
38567156	Something can be dying for years and	"Something can be dying for years and not be dead. Other languages (python, golang, rust, ts) left ruby behind. Even big tech companies founded on rails have diversified their tech (Airbnb, Github, Stripe, etc.).Most companies will have an DS/ML team. ""ruby"" doesn't scale (in that you can't write efficient ruby code that can process data at the same level as python/c++ can without writing c-extensions to the underyling cpp libraries).checkout how ruby has fallen off a cliff on github: https://madnight.github.io/githut/#/pull_requests/2023/3"	itake	12.6638975	-7.0173235	comment	3.0	16.0	1702029157	12.375677
38575577	Oh nice! I hate PHP a bit less than 	Oh nice! I hate PHP a bit less than I did before!One of my biggest issues with PHP is that it doesn't cleanly separate the app and the system.You configure your server to work with PHP, you set up access control rules on the server for what files they can see, you enable modules.So then you need an extra tool to manage the configuration, and lots of YAML to declare what it should be.... meanwhile with Python you just plop it in a virtualenv and pip manages all the moving parts.It's good to see the PHP ecosystem getting tools like this!  Maybe we'll see more self hostable stuff we can install with one click now!	eternityforest	12.696951	-6.6396427	comment	3.0	12.0	1702074840	10.237812
38585652	stupid question but... doesn't Deno 	stupid question but... doesn't Deno also promise that possibility? Or at least to compile a js app into a binary	ikari_pl	12.472221	-6.441246	comment	3.0	12.0	1702153500	-10.932364
38595603	Right, both lein and depstar (or wha	Right, both lein and depstar (or whatever the latest deps.edn one is) make uberjars. And this works great on Linux - which I'm pretty sure is the dev platform for almost all Clojurists. Linux distros basically always come with a OpenJDK JRE/JVM. But installing a JRE is actually discouraged by the Java people. You will notice on java.com you can't actually download a Java 11/17/+ JRE. You can only get a Java 8 JRE!You're supposed to use `jpackage`.  It basically packages up the uberjar with all the necessary pieces of the JRE to run the uberjar (so a pared down JRE) and does platform specific bundling like adding meta data and creating an installer (so your application can have a place to save settings and whatnot between runs, have an icon in the Start menu/desktop and stuff like that)You 	geokon	12.50557	-7.680306	comment	3.0	16.0	1702246316	4.394928
26828075	It's nice to see PHP adding useful t	It's nice to see PHP adding useful things like enums and async (green threads). My foray into Web development started with Perl, but quickly segued into PHP with how much simpler it felt. The ability to hop into vim on your server (or use CPanel back in the day) and edit your site live was exciting back then – but now that very thought makes me shudder with what could go wrong, haha.While I've moved onto JVM languages and Rust professionally, I do hope PHP will continue getting future generations excited about Web development and building out their ideas quickly.FYI: Not sure if the author will see this but some spelling mistakes in the article. [0] E.g. s/reslease/release/0. https://stitcher.io/blog/php-in-2021#the-community	anw	12.735136	-6.6475935	comment	3.0	13.0	1618534666	10.323295
26828261	So basically PHP is still catching u	So basically PHP is still catching up to Hack and but not quite there yet?	mmckeen	12.7721	-6.6229897	comment	3.0	15.0	1618536161	10.3039255
26828497	Because getting a modern version of 	Because getting a modern version of PHP, postgres, and redis up and running isn’t necessarily easy for your average beginner.	hokumguru	12.784492	-6.647776	comment	3.0	13.0	1618538202	10.304025
26829417	"That's because the ""stink of old PHP"	"That's because the ""stink of old PHP"" never really went away.For example, Wordpress install guide [0] still talks about making your code directory writtable by web user -- practically guaranteed that any minute exploit will lead to permanent web shell.So does Nextcloud install guide [1].I am sure there are nice, modernPHP somewhere, but a lot of time you I see old-style programs with horrible security practices.[0] https://wordpress.org/support/article/how-to-install-wordpre...[1] https://docs.nextcloud.com/server/latest/admin_manual/instal..."	theamk	12.787708	-6.5980525	comment	3.0	11.0	1618546897	10.232615
26829962	"- shared nothing architecture
- sing"	"- shared nothing architecture
- single threaded code execution context
- copy files deployI was a PHP developer for over 15 years and those three concepts do more to lower the barrier to entry than any other language I’ve come across, and are constantly underestimated in their power to enable developers to concentrate on the business logic of their program."	jalfresi	12.752677	-6.604958	comment	3.0	12.0	1618551710	10.321114
26830288	It is a great language to put food o	It is a great language to put food on the table.Especially in Europe it is still the dominant backend language. If you want to have flexibility on where you work it is a good language to know.You have the productivity of a scripting language but still great static analysis tools that help you out. It really fills a sweet spot that no other language does.Yes, Node has Typescript but then you have a super slow compiler negating the scripting language benefits. With PHP I can change a file and see instant results. Also languages like Go make it hard to debug anything on an live server as it is all compiled.PHP code is mostly boring. The coding style tends to be very pragmatic. Even bad beginner code runs great due to dead code elimination and the like. Shared nothing architecture makes unders	cardanome	12.694467	-6.61908	comment	3.0	11.0	1618554376	10.277561
26830648	End users love PHP because you copy 	End users love PHP because you copy the files into a folder.That's certainly how people deployed web apps built by other people a decade ago, but these days isn't it more common to use something like Docker?Deploying a containerized app should be pretty much the same no matter what language it's written in. And Discourse does have a Docker container (https://github.com/discourse/discourse_docker), so I'm not sure the underlying language explains why it isn't popular.	onion2k	12.703168	-6.6244144	comment	3.0	11.0	1618557854	10.152987
26830602	I'd love to debate the use of PHP vs	I'd love to debate the use of PHP vs. Ruby and Elixir, but your arguments basically are:- The community is full of people who just care about hacking something together.- Ruby/Elixir are fantastic, developer friendly, and have solid foundations.The first happens with every popular scripting platform. Is JS community full of PhDs?The second is highly subjective. Ruby is problematic, because it's supported by one framework which is showing its age, and the language itself has lagged behind in performance, which matters increasingly for web workloads. Elixir is a niche dialect of a niche language (Erlang). Don't get me wrong, Erlang is amazing. But you don't need Erlang to set-up a blog.It seems the major reason going against PHP are:- WordPress and the entire ecosystem around it sucks. Well,	slver	12.686369	-7.346025	comment	3.0	14.0	1618557410	12.879587
26831022	> I appreciate Laravel and Symfony, 	"> I appreciate Laravel and Symfony, but PHP in 2021 has traded the feeling of being a cargo cult version of Perl for the feeling of being a cargo cult version of Java.As a Symfony dev I agree. And the process to convert PHP into a Java-esqe Kotlin-esque language is continuing. Why not use a different language if you like it rather than change PHP?> If I do write a new project in PHP, it's probably not going to be with any existing framework, because even the lightest one feels like endless mazes of ""get a Request object from a RequestFactory by instantiating a dependency injection container and passing it to a RequestFactoryFactory"".I'll be interested to hear what you come up with. Two anecdotes:1. I had to touch some PHP code I wrote many years ago based on the ColdFusion ""Fusebox"" archit"	porker	12.7569065	-6.636876	comment	3.0	10.0	1618560739	10.320136
26831972	>>  Go's development workflow is a l	>>  Go's development workflow is a lot worse than PHP.I beg to differ.- Runtime errors are more common in PHP and that's a good enough reason for me to say that PHP dev workflow is worse.- You also seem to miss some common errors when the PHP assets are missing. Suddenly the compile con becomes an advantage for Go.- Different servers (apache, nginx, etc) give you yet another thing to configure.From my very old past experience, PHP development gives you more headaches than Go.	themihai	12.7012	-6.719908	comment	3.0	12.0	1618568216	10.273401
26831160	> You can do this with one PHP file 	> You can do this with one PHP file , one a super cheap hosting , with code that is simple and clear.This.  PHP is basically Functions-as-a-Service over  commoditized virtual hosting.  Maybe we need a toolchain that can transpile down to PHP, starting from more common languages with better development workflow.	zozbot234	12.745033	-6.5749726	comment	3.0	25.0	1618561787	10.261298
26837534	I saw a fun debugging issue the othe	"I saw a fun debugging issue the other day on r/lisp that almost made me want to walk away from lisp for good.You have a function
(defun my-val () ""a string"")Referentially transparent, easy to reason about right? Wrong. Lisp strings are mutable, and everything is a reference. So if you do something like this(replace (my-val) ""b"" :start1 0 :end1 1)(my-val) => ""b string""I appreciate that CL doesn't force everything to be immutable, but it seems like at least strings would benefit from being treated as immutable values."	blacktriangle	12.423585	-7.4995637	comment	3.0	10.0	1618598532	-10.490386
26847077	I agree with you, but the problem, t	I agree with you, but the problem, the big problem, is that you're looked down if you propose to use simpler tools.It is horribly difficult to not use these advanced tools for simpler problems. At work my team does just f**ng CRUD forms, and for doing this we have the most overcomplicated stack I've seen in my life. Go backend with React, Redux, Rxjs,custom.webpack craziness, and 32 tons of internal weird libraries no one would willingly use ever even if pointed with a gun.If I propose to just use Rails for this and be done with it, I'd be declared and heretic and expulsed from the frontend team.	midrus	12.789018	-6.526199	comment	3.0	19.0	1618690381	12.309036
26852518	We just finished rewriting a 3 year 	"We just finished rewriting a 3 year old Rails app in Node+Knex, performance with 10k concurrent sessions is roughly 4x and p95 is 10x better.Keep this in mind whenever someone decides Rails is fine for a quick prototype and then leaves you to deal with production.I am of the unpopular opinion that Rails ""many opinions"" are confusing as hell to someone who doesnt breathe Rails due to the sea of implicitness: Symbols just appear you are supposed to know where from, debug requires context dumps, gems are an unholy mess of registering hooks and overloading core apis.  Combined with ""slow as a dog"", I really dont see what there is to love here."	kryptk	12.758411	-6.9218802	comment	3.0	10.0	1618754250	12.335053
26853670	"""connect to an existing node"" is goi"	"""connect to an existing node"" is going to be amazing.I imagine two interesting uses for this.1. producing reports.  Connect a livebook session to your system in prod, run a livebook (which pulls data from DB eg), then get back a report.  User engagement, cloud resources consumed, p90s, or an incident report...2. manual database intervention.  Suppose you need to manually make a batch of changes to the DB.  It would be very cool if you could run a livebook inside of a sandboxed checkout (a temporary transaction) and write your db changes, then write your code that verifies that the db is in a state that you want it to be in.  If you mess up your code, then you just terminate the transaction without committing.  Then when you're happy with your notebook, you run it once with a commit at the "	dnautics	12.530063	-7.46627	comment	3.0	20.0	1618762242	12.880724
26857643	Just out of curiosity, are you lever	Just out of curiosity, are you leveraging liveview at all?I also use Phoenix for my SaaS project (took me 5 years to hit $2.5k/mo so congrats!) but I went all-in on liveview. It's some solid tech and I'm pretty happy with it but I'm wondering what the limits are when there is a lot of interactivity which seems to be the case with your app.	mehphp	12.920576	-6.875445	comment	3.0	12.0	1618789005	12.726141
26868825	That's me with Python... For some re	That's me with Python... For some reason I find the documentation extremely cumbersome to navigate and parse. It's just so wordy and dense. And there are barely any examples - which is what I'm usually looking for instead of having to read a whole paragraph.The Elixir documentation on the other hand is succinct and always features basic examples for every function. It's a joy to work with.	erinan	12.6732025	-7.4121447	comment	3.0	10.0	1618873320	12.931047
26874451	How is it with Prolog practitioners,	How is it with Prolog practitioners, did it make 'click' at some point where you then suddenly approached problems differently or was it more of a slow change where you incorporated more and more ideas from Prolog in your daily work until you realized that you got it?	tonyjstark	13.146952	-7.2953706	comment	3.0	12.0	1618925788	-12.475722
26895434	It’s interesting to see people feel 	It’s interesting to see people feel this way about JS.Lately I’ve been trying to learn kotlin... and man... that stuff (gradle) adds a weird amount of boilerplate to everything.JS / TS on the other hand. It’s a package.json, or tsconfig. Not much else is required.Jump into deno and you don’t even need those. Feels like JS is one of the better languages in this regard	zackify	12.371158	-6.468378	comment	3.0	11.0	1619039086	6.2638745
26901007	The more comments I read in this thr	The more comments I read in this thread, the more this sounds like Perl 5 and Perl 6.	hnick	12.329734	-7.036921	comment	3.0	10.0	1619086712	13.183785
26903632	It's funny how quickly opinions seem	It's funny how quickly opinions seem to change.When I first visited HN (~2010) it seemed Ruby and Rails was all the hype; doing Ruby/Rails stuff seemed to be the hip and cool thing to do. Perhaps Heroku was also introduced around this time?Nowadays it seems Rails is mostly forgotten and Ruby, well ... Python seemed to have dethroned Ruby as Python seems to be used for similar purposes.I tried to get into Rails in the past, but it didn't quite click with me. Perhaps in part because I don't do web dev by trade. In general I just don't enjoy web dev. Ruby as a language, I did enjoy and I used it in combination with Calabash for iOS tests. But I believe most of my team members didn't get the same kind of enjoyment out of Ruby as I did, much preferring much to work with statically typed languag	wsc981	12.690502	-6.9707913	comment	3.0	11.0	1619104289	12.378338
26905854	Ask HN: From Rust to Ruby?	Ask HN: From Rust to Ruby?	anonyfox	12.506238	-7.119368	story	3.0	2.0	1619114683	12.394891
26950656	I think it's ironic that the author 	"I think it's ironic that the author claims that clean code is.......  Package your code down into small, atomic and reusable units
  Follow the single responsibility principle
  Use frameworks and libraries to avoid reinventing the wheel
  Whatever language you pick, don’t pick PHP

These are best practices. It is possible to follow every one of those rules and still have a pile of broken, insecure, garbage code. Likewise you can have a very elegant one-liner that fits none of those and gets a job done cleaner and easier than any alternative. You can even have a single page app that fits most of those, and I would argue that it would probably stay cleaner without adding a framework. Frameworks in many ways bind you to a certain style.It's all about keeping the scope of what you're doing in"	zelon88	12.707323	-6.5453167	comment	3.0	10.0	1619486750	10.305514
26961187	#ruby-lang is famous for K-lining pe	"#ruby-lang is famous for K-lining people who say ""guys"", for example."	busterarm	12.559173	-7.0607476	comment	3.0	10.0	1619555886	12.394335
26964310	Thank you so much for sharing this. 	"Thank you so much for sharing this. I've not yet finished a decade in the industry, nor ever laid an eye on Elixir before, and this made sense pretty quickly. Great job explaining it all!On a side note, its pretty amazing to see the impact on readability and understanding that native language features have on something like async. I've worked with similar systems to the example in the past in JS/Go/etc, and while you can definitely do the same stuff presented here, it tends to be a far messier callback-hell ime. For lack of better explanation, this Elixir code just ""flows"" better to my eye, which I know is a completely subjective and non-helpful unsolicited piece of info. Thanks again."	ammanley	12.652261	-7.4444294	comment	3.0	16.0	1619573457	12.922862
26981858	It's also somewhat risky to focus yo	It's also somewhat risky to focus your whole career on learning a product that a single company makes. In 10 or 20 years, it may be depreciated.There are plenty of Crystal Reports professionals who found that their skills didn't transfer as the software declined.	TheAdamAndChe	12.640753	-7.2586284	comment	3.0	11.0	1619707690	1.4863323
26989176	What benefit does inheritance provid	What benefit does inheritance provide over importing files containing functions? Ruby and loads of other languages let you import files and those functions work like they were part of the class itself.	SilverRed	12.384612	-7.10009	comment	3.0	10.0	1619748727	-9.117583
26991353	From the tech talks I vaguely recall	From the tech talks I vaguely recall, LiveView folks seem to disregard latency, which is where the entire model falls apart for me because the moment you need more control on the client over what to do when the server is not responding - you’re entirely out of luck.Though maybe I’m wrong and there has been some new developments to address this, I wasn’t following too closely.	keymone	12.925604	-6.757415	comment	3.0	32.0	1619774629	12.716164
27002013	I’m not really answering your questi	I’m not really answering your question here, but the best PHP CMS IMHO is Processwire, bar none, and I’ve used pretty much everything under the sun over the last 10+ years. Nothing else gets out the way and let’s you get on with the job in such an elegant way. I like their model as well, they essentially support their development through useful and elegant commercial plugins for things like caching, form builder, pro drafts, etc. The caching module is really worth every penny and then some.It’s got a beautifully simple API and templating system that really lets you tackle and manage projects how you want to tackle them.We’ve had production sites with thousands and sometimes tens of thousands of daily hits running off it for nearly a decade and had pretty much zero problems with it that I c	christoph	12.7605295	-6.5962405	comment	3.0	11.0	1619832966	10.292411
27010590	Effect of the Last Week on Ruby on R	Effect of the Last Week on Ruby on Rails	rbanffy	12.729231	-6.9559674	story	3.0	31.0	1619909320	12.378787
27043769	Was Cinder influenced by hhvm (Faceb	"Was Cinder influenced by hhvm (Facebook's vm for php/hack)?
A project that maintains a list of different JIT implementations for programming languages and compares them would be a great way to see what are the different approaches to implementing JITs and which language features make it hard to implement performant JITs.As an aside it is great that the Cinder team is specifically calling out that Cinder is not intended to be used outside of FB. Many people have been burned by lack of community around hhvm."	smg	12.710289	-6.588495	comment	3.0	12.0	1620168113	3.0249493
27060402	I don't think it's about it's dynami	"I don't think it's about it's dynamicism but more about it being functional. Plenty of super popular dynamic languages out there.
I think that's also what keeps elixir from becoming something more mainstream, most people come from OOP and are used to thinking about programming that way."	joelbluminator	12.358964	-7.405283	comment	3.0	49.0	1620288690	12.907672
27061547	This feels an awful lot like we're g	This feels an awful lot like we're going full PHP[1]. Can't this just remain as a library someone else could implement?[1]: https://www.php.net/manual/en/filter.filters.sanitize.php	prussian	12.681808	-6.5268307	comment	3.0	13.0	1620299702	10.3057
27073369	Curious. When will JS tooling ecosys	Curious. When will JS tooling ecosystem support executing typescript by stripping the type information? Are there any plans to add generic soft type annotations to the spec? It’d be great to write these in TS without changing the runtime tooling.	parhamn	12.348809	-6.842408	comment	3.0	14.0	1620373281	-10.457574
27103621	>  but instead people are re-inventi	>  but instead people are re-inventing 'sqlalchemy'SQLalchemy last version is asyncio compatible now:  https://docs.sqlalchemy.org/en/14/orm/extensions/asyncio.htm...> network libraries and entire web frameworks for the sake of two new keywordsThe trend in the community now is SansIO: https://sans-io.readthedocs.ioYou create entire libs without the IO parts, dealing only with the business logic.The you let the I/O libs to deal with the rest. This allows modern project to provides a sync and async API with the same protocol implementation. E.G: https://github.com/encode/httpxAlso, I'm pretty glad gevent has not been adopted:- it's very hard to know if you are doing something wrong with gevent. Or doing something with gevent at all.- gevent magic patching broke stuff in unpredictable ways, a	BiteCode_dev	12.779286	-6.445912	comment	3.0	12.0	1620632285	9.913334
27115715	Eh, my take, Typescript won. Does th	Eh, my take, Typescript won. Does the same thing as Babel but supports static types and inference in regular JS.	0x000000E2	12.375461	-6.70744	comment	3.0	15.0	1620722428	-10.552352
27125421	As casual python user I found Flask 	As casual python user I found Flask really nice for my projects	taf2	12.697519	-6.5599947	comment	3.0	10.0	1620780602	10.001239
27130913	OMG, YES! The JIT is here... and hol	OMG, YES! The JIT is here... and holy crap, if you haven't tried it yet... it's awesome (everything feels snappier). I'm particularly stoked for the receive optimizations and process aliases.BEAM just gets better and better. It's a good time to be an Erlanger/Elixirist...	rubyn00bie	12.45391	-7.3980227	comment	3.0	20.0	1620830633	-8.948472
27134808	I believe Flask 2.0 optionally suppo	I believe Flask 2.0 optionally supports it whereas FastAPI is async only. I could be wrong though.Edit: Thanks for the correction, my point is moot and irrelevant.	systemvoltage	12.496404	-6.6318264	comment	3.0	10.0	1620851561	-9.29543
27156298	Should you bundle it with Deno, not 	Should you bundle it with Deno, not Node, as Deno is also a rust project?	arodyginc	12.496456	-6.4442883	comment	3.0	14.0	1621010452	-10.946887
27156354	what if I don't like typescript	what if I don't like typescript	VWWHFSfQ	12.370866	-6.8292556	comment	3.0	10.0	1621010681	-10.459048
27181356	Interesting that some of them don't 	Interesting that some of them don't grow, or don't grow much, over time.Someone at PostgreSQL and Django is actually reading and fixing the TODOs.	JulianMorrison	12.839806	-6.5174403	comment	3.0	13.0	1621241537	10.105635
27181377	"See also the first ""good"" example at"	"See also the first ""good"" example at https://github.com/rubocop/ruby-style-guide#no-double-indent, and the placement of 'from' in it"	boffinism	12.516225	-7.075834	comment	3.0	12.0	1621241790	12.38812
27183598	(not a frontend dev, so excuse any i	(not a frontend dev, so excuse any ignorance)I agree CoffeeScript usage has gone down dramatically, but has Typescript not usurped it? It doesn't seem like everyone just went back to using JS, so maybe Scala was CoffeeScript, and Kotlin is closer to Typescript?	cs-szazz	12.418664	-6.620625	comment	3.0	22.0	1621260599	-10.505974
27193258	Nice question, I'm just starting wit	Nice question, I'm just starting with Elixir for a side project. Has anyone else find it to have a steep learning curve? Coming from Java/Scala and Python, I find it harder to wrap around then Scala was years ago. Shortcuts with mix like mix phx actually make it a bit more complicated for me because I'm used to understanding what is exactly happening under the hood.	salex89	12.688713	-7.4297585	comment	3.0	12.0	1621336660	12.932335
27193792	Liveview (as well as stimulus-reflex	Liveview (as well as stimulus-reflex) promote minimal JavaScript by trying to push most interactions to the server, and let the server decide what should change in the frontend. So for example, to show a modal, you send an event that signals the user wants to show a modal, so the backend sends back the html for the modal. You click to close the modal, this sends an event to the backend, the backend sends you the diff or the instructions to remove the modal from the dom.In the hotwire world, the encouraged approach would be to already have the html in the dom, and use a stimulus controller to show or hide it [1]. And you only issue backend calls when you really need to reach to the backend anyway (like submitting a form, or refreshing some actual content). You don't call the backend just to	midrus	12.872303	-6.6867614	comment	3.0	13.0	1621341632	12.673861
27193847	In addition to that, I struggled to 	In addition to that, I struggled to find a well maintained library similarly to Devise. Also, many people won’t agree to me, but Ecto is also a kind of pain. I think Phoenix would have been in a better position if there were libraries like ActiveRecord and Devise.	poisonta	12.79018	-7.0065207	comment	3.0	17.0	1621342015	12.421997
27194283	I am bummed out to see that this is 	I am bummed out to see that this is the top comment. I don't doubt your experiences but I hope that other people do not latch on to this and use it as a strong argument against using Elixir. All of these complaints are skin deep and kinda petty, to be honest.> Tooling is just terrible. The VSCode plugin is crap, kills the CPU unless you disable features. There is no IDE from jetbrains.This is a bizarre criticism of Elxir the language. There are a lot of developers out there who prefer a more lightweight editor and do not want the bells, whistles and crutches of a heavy duty environment. I would never complain about a language just because an IDE does not exist for it.Tooling in Elixir is really some of the best I have ever used as far as the consistency had with mix, hex, hexdocs, etc...> 	whalesalad	12.673195	-7.4336634	comment	3.0	16.0	1621344638	12.904944
27194518	Don't focus on tooling, focus on the	Don't focus on tooling, focus on their complaints about not having enough senior engineers familiar with the language.We're in a similar boat. I don't know the full history of how we came to use Elixir, but I would wager that early on in the company, someone really loved it and evangelized it. But now, we don't have that many senior people who know it well. I can count the ones I talk to regularly on one hand, and once I run out of fingers, I'm probably sixth place runner up, which makes me very uncomfortable.That's why I wouldn't suggest Elixir. Unless you're incredibly sure you won't have significant churn for the lifetime of your business, or have money to burn specifically hiring Elixir folks, I wouldn't recommend it.	pavel_lishin	12.693136	-7.456407	comment	3.0	11.0	1621345883	12.92594
27203926	I'm hoping ruby gets a bit of a resu	I'm hoping ruby gets a bit of a resurgence. It's really not as slow as it used to be (ran some benchmarks recently, and ruby/roda was pretty much on par with node.js/express with multiple processes). The Actor model looks promising too.	LAC-Tech	12.664494	-6.974196	comment	3.0	11.0	1621392012	12.35862
27208131	I highly recommend using the hexpm d	I highly recommend using the hexpm docker images, which you specify with elixir, erlang, and distro versions, e.g. hexpm/elixir1.12-erlang24.0-debian-buster.Since the official Elixir versions aren't pinned to a version of Erlang, we had issues where either Erlang or the distro should change out from under us. But not with the hexpm ones.	losvedir	12.625377	-7.505668	comment	3.0	11.0	1621430256	12.931833
27215348	Patricia’s Perfect Pull: A Crystal G	Patricia’s Perfect Pull: A Crystal Grower’s Story	sohkamyung	12.632441	-7.2448826	story	3.0	91.0	1621463314	-11.184827
27236550	This is legend. Rails can be and is 	This is legend. Rails can be and is used in high throughtput scenarios, people who say it can't scale all think they are working at Twitter while they just wrote inefficient code.It is true that spending time optimizing queries will give you more benefits than JIT though. CPU is not the bottleneck for most Web tasks.	aledalgrande	12.661616	-6.923923	comment	3.0	33.0	1621615929	12.30604
27236909	TIL about Falcon, which can power an	TIL about Falcon, which can power any rack app, including Rails: https://socketry.github.io/falcon/index.htmlTIL also that in Rails v5+, `config.allow_concurrency` is enabled by default, so Falcon works with it out of the box. Neat.Looks like Falcon's [benchmarks](https://github.com/socketry/falcon-benchmark#results) show 250+ concurrent connections serve with an order of magnitude less latency and 2-3x the RPS of puma or passenger, and >10x that of unicorn.Seems worth a look for anyone running Ruby in prod with really any concurrent traffic.	rattray	12.718606	-6.9383416	comment	3.0	20.0	1621617301	12.34617
27238192	Yes, it can be used.Yes, it is crazy	Yes, it can be used.Yes, it is crazy inefficient.At Wunderlist, we launched WL3 with something like 1K rails boxes on AWS, running a few services.  During the launch, my fun was tracking when we reached user/box parity :-)But it did work.After a while, we replaced each of the hundred+ rails boxes per service with 2 Scala instances per service.Also worked.  No change for users.The FP folks should be forever grateful to Ruby for making their languages seem fast in comparison.At another company where I consulted, for a web content management system, the rails devs were super excited to get the performance up to slightly below one second per request.We got much better than that 2 decades earlier, running a CGI-Bin (no fast-cgi, so complete restart on every request) that completely re-initalise	mpweiher	12.723051	-6.9388967	comment	3.0	11.0	1621622734	-8.0139675
27236328	I think in the context of high perfo	I think in the context of high performance it is pointless to talk about Rails. Even the memory requirements make it impossible scale above a certain (very low) threshold.In the context of developer productivity it is also pointless to talk about high performance because people sacrifice performance for developer happiness.Once you understand that you have these two dimensions most frameworks are revolving around it is getting much clearer which one to pick for a certain use case.	StreamBright	12.748821	-6.9400153	comment	3.0	37.0	1621615101	12.3407
27240547	> This may sound a little foreign to	> This may sound a little foreign to all you folks coming from a non-Unix background, but PHP doesn't cost anything. You can use it for commercial and/or non-commercial use all you want. You can give it to your friends, print it out and hang it on your wall or eat it for lunch. Welcome to the world of Open Source software! Smile, be happy, the world is good. For the full legalese, see the official license.What a nice, whimsical message.	hitekker	12.7817545	-6.595278	comment	3.0	36.0	1621634640	10.310493
27240715	PHP deliberately has a low barrier t	PHP deliberately has a low barrier to entry, and as a result there is a lot of poor quality code out there, written by beginners. People like to use this fact to suggest that the entire language is bad, which it most certainly is not.I've seen lots great, well structured and performant PHP code - the quality depends on the programmer, as it does for any other language.	osrec	12.784521	-6.6424437	comment	3.0	25.0	1621635770	10.332007
27240910	Definitely. I started with PHP when 	Definitely. I started with PHP when I was only 12 or 13 years old. Adding some logic inside your .html files (mostly includes, that were like magic back then[1]), renaming to .php and upload them to the server using FTP was so simple. A few years later, when I had to set up a lot of things to run Django I was surprised at how hard it was.PHP was simple to use, and to understand its logic, because it was embeded into HTML itself if you want to. No need to write views, controllers, templates, anything. And most of the shared hosting (paid and free) supported it.[1]Includes were like magic back then because if you had a heavy content website with a lot of inner pages (fansites), updating the navigation sidebar was a pain in the ass. Originally they were made with framesets, later iframes (wit	101008	12.764638	-6.591848	comment	3.0	15.0	1621637245	10.303361
27251242	That’s all well and good, I flirted 	That’s all well and good, I flirted with erlang for about 2 years, went to the conferences, got a few patches in here and there… but this was all as an individual developer, soon as I tried to introduce it anywhere it fell really flat on its face. The syntax and OTP are just too alien for most of the devs at least at the level I was working at then.Shame, it’s good stuff.Anyway, here’s to elixir ;)Edit: I would say tho learning erlang made me a better developer, it changed my brain in some kind of irrevocable way and I would recommend it to anyone even if the skill itself isn’t so useful professionally	cyberpunk	12.586348	-7.5143437	comment	3.0	18.0	1621727152	-4.263251
27365270	Nice, looks very clean.As in Elm, I’	Nice, looks very clean.As in Elm, I’ve never fully understood why the events emit a value of some message type that gets interpreted into a function from ‘state -> state’ instead of handling with a state transformation directly.Feels like boilerplate to me. I can see situations where this approach is useful, but should it be the default?I guess you can always change your message type to ‘a -> a’ and interpret with ‘id’ if you want to.	sfvisser	12.970857	-7.6367035	comment	3.0	12.0	1622612555	4.8181663
27365662	"Elm handicaps my attempts of ""making"	"Elm handicaps my attempts of ""making impossible states impossible"" because:- I can't have Sets of arbitrary Types they must be `comparable`. I cannot create a custom comparable type.- Records, Bool and custom Union Types are not `comparable`- Bool and Simple Union Types could have been comparable if their comparison worked like they were Enumerated Types. Elm does not have Enumerated types.Basically https://github.com/elm/compiler/issues/1008 made me look for better alternatives."	vyuh	12.938126	-7.6754227	comment	3.0	25.0	1622616230	-12.763259
27368235	Better a function that works in some	Better a function that works in some cases than not having a function at all. Also, by using TypeScript definitions you pretty much always know what's coming in and going out and VS Code will yell at you if you're trying to do something stupid.	antris	12.347443	-6.860603	comment	3.0	14.0	1622639260	-10.471686
27377265	> The language grew and evolved and 	> The language grew and evolved and somewhere along the line acquired a name, Erlang, named in honor of the Danish mathematician Agner Krarup Erlang (1878- 1929) whose name is associated with the telecoms industry.Huh, I always assumed it was a portmanteau of Erricsson and Language.	skavi	12.567199	-7.518287	comment	3.0	10.0	1622694886	-4.929478
27377414	I am learning Elixir... and I really	"I am learning Elixir... and I really get a kick out of it. It's zany and pushes me to bend my brain.It's like sort of Dr Seuss riff for an experienced programmer.So you've done a lot of program?Can you, can you, without a reference?Could you, could you, with nary a pointer?Will you, will you, use no return?No for loop? And less control flow goop?I had to switch back to do some Python and Swift maintenance/development last week after 2 solid weeks of climbing the Elixir newbie staircase, and I was amazed at how much code I write in ""normal"" languages whose sole purpose is to decide where the code goes next. For the first hour or two my brain kept screaming ""why do you keep putting all of these if blocks everywhere?!"""	travisgriggs	12.6667	-7.426328	comment	3.0	25.0	1622696654	12.92521
27381735	"""The thing is however, with Erlang y"	"""The thing is however, with Erlang you get all of that in a pretty easy to learn language and it will scale to practically anything.""But as I said in that thread, that's actually one of the traps.While Erlang/Elixir as languages and runtimes will scale to ""practically anything"", a lot of the technologies in the Erlang stack don't. Mnesia is almost useless, if not totally useless. Erlang's not the slowest language, but it's not very fast, and using something 5-10x faster can ""scale"" nicely too by needing that many fewer systems in the first place. The message system is not what I'd call best-of-breed anymore; very ahead of its time, but most messaging APIs have more functionality in them now for a reason. Erlang is 1-or-none and 1-or-many seems to be the choice winning out in general.As lon"	jerf	12.568393	-7.4990005	comment	3.0	15.0	1622729926	12.919785
27389667	By all means, I encourage everyone t	By all means, I encourage everyone to learn Elixir, Scala, Haskell, or other similar, functional, immutable languages for personal growth.The points I raised earlier in the context of choosing a language for building a company apply to all of those.  I don't see why Elixir is exempt - do you mind explaining?	jklm	12.673075	-7.463555	comment	3.0	10.0	1622771896	12.929469
27392803	It annoys me how much Elixir zealots	It annoys me how much Elixir zealots proselytize the language as the the objectively best thing since sliced bread, and all other languages are worse. But it's a well written article.Good on them for finding Elixir useful, but none of the benefits they talk about seem very compelling for me. Most of them are available as table stakes in other languages (rerunning failed tests as an USP of mix test, really?), or very situational/subjective benefits. I find the import system in Elixir to be very opaque, making it hard to know where a function is coming from after it's been aliased and use:d. I subjectively find explicit import statements much clearer when debugging code.The final drops for me are the missing explicit return statement, and the extraordinarily bad tracebacks on error. If I cou	strokirk	12.637487	-7.4552484	comment	3.0	12.0	1622808809	12.934145
27393142	What do Java or C# offer that Typesc	What do Java or C# offer that Typescript cannot offer? Genuine curiosity as I’m not quite sure myself.It seems, through my experience, that Typescript isn’t “hacked together” as you imply. It’s just another Type-system, just like Java or C#’s?	blitz_skull	12.347404	-6.7901845	comment	3.0	10.0	1622811563	-10.430896
27397357	This submission is probably the firs	"This submission is probably the first example of usage Phoenix Framework in big company that I know. I remember how many there were Elixir vs Go ""battles"" on HN in last three years but what I have noticed the Phoenix have worse traction and new adopters evangelizing it. That's sad, because I think Elixir and Phoenix Framework definitely is worth some attention."	pqb	12.764222	-7.191299	comment	3.0	16.0	1622832030	12.762085
27438762	My holy grail would be to (somehow) 	My holy grail would be to (somehow) create a release on Windows (my dev system) and deploy on Linux (our prod servers). However, I have little hope because of the Erlang binaries requirement. Still, you can always hope :)	spapas82	12.590358	-7.52654	comment	3.0	12.0	1623175875	12.9136095
27439696	I remember being a reviewer for an E	"I remember being a reviewer for an Elixir book where the first chapter was listing the pros and cons of Elixir, and one of the cons was:  it's kind of hard to manage deployment of Elixir applications.My feedback was ""hum, that's kind of a turn off for someone trying to learn the language/tech no?""I think the community has been looking for something for a while now and is iterating (too?) quickly.  There was erlang releases, there was distillery, now it's elixir releases.  There are different ways of configuring in production.  It goes a little too fast to keep up with to be honest."	dudul	12.677115	-7.4651723	comment	3.0	18.0	1623180636	12.922126
27447109	I will bet that a Linux kernel maint	I will bet that a Linux kernel maintainer is a more capable coder than someone stitching together web apps with Rails.Besides, something like language and kernel design is computer science, not day-to-day software development that most of us do.	papito	12.673815	-6.927257	comment	3.0	10.0	1623241575	12.359181
27465058	(non-Elixir dev here)Does Elixir hav	"(non-Elixir dev here)Does Elixir have anything akin to Haskell's ""do notation"" for result types? The provided best practice code feels verbose, and that surprises me given that Elixir looked clean & modern.For example    # Do...
    def main do
      with {:ok, response} <- call_service(data),
           {:ok, decoded}  <- parse_response(response) do
        decoded
      end
    end

would read in C# (.NET 3.5) as the following pseudocode, which personally looks much cleaner, avoiding  `{:ok, ...}`:    Result<T> Main(object data) {
        return from response in call_service(data)
               from decoded in parse_response(response)
               select decoded;
    }"	david_allison	12.338571	-7.450573	comment	3.0	16.0	1623355280	12.895278
27471340	Ruby seems to handle this out of the	"Ruby seems to handle this out of the box:  >> RUBY_VERSION
  ⇒  ""2.7.2""
  >> data = [1_000_000_000.1, 1.1] * 50_000 ; nil
  ⇒  nil
  >> data.sum
  ⇒  50000000060000.0
  >> data.sum / data.length
  ⇒  500000000.6
  >> data.sort.sum / data.length
  ⇒  500000000.6
  >> data.sort.reverse.sum / data.length
  ⇒  500000000.6

I know that ruby will auto-promote an Integer into a Bignum. It seems like ruby will also auto-promote other types? I should research this..."	pdkl95	12.576487	-7.072627	comment	3.0	10.0	1623406381	12.384474
27478606	Perhaps even more powerful would be 	Perhaps even more powerful would be spreadsheets + Prolog. Since Prolog's main strength is finding answers for you, I imagine putting that on grid would have very interesting results.	simplify	13.148264	-7.2487826	comment	3.0	10.0	1623446152	-12.48011
33427075	After programming in elixir/erlang f	"After programming in elixir/erlang for ~8 years (for fun and professionally), I have to agree. I've had to dig into the ""why"" of BEAM a number of times, and I can't remember ever being disappointed. The decisions that they make might be frustrating at the time (""why does passing a shared sub-binary through a process prevent it from being GC'd"") but I always come away from the docs with the understanding of how the design decision was the right one in the context of the larger system, which is very pleasant. They just took a handful of requirements around concurrency and fault tolerance, and all decisions logically followed from those. BEAM is not good at everything, but it is good at the things it wants to be good at, which is refreshing."	rozap	12.517372	-7.4256544	comment	3.0	33.0	1667334697	12.881922
33430102	My broad understanding of Erlang is 	"My broad understanding of Erlang is this:A single erlang node runs on a dedicated OS process. It consists of one or more Erlang processes, which are essentially Carl Hewitts actors, which are very lightweight, don't share any memory, and hundreds and thousands of them can be multiplexed onto the handful of cores of a typical server. The idea being that if one erlang ""process"" dies, the whole system doesn't come to a halt. There's also no stray pointers, because all communication is done through deep copying messages, so there's no pointers referring to the process of another memories process.Where it gets murky for me is how it interacts with databases. There's mnesia which... I don't understand. Is it embedded? I know it can run on top of stuff like LevelDB and RocksDb, and those engines "	LAC-Tech	12.490797	-7.503134	comment	3.0	12.0	1667350729	12.868179
33430441	> After programming in elixir/erlang	> After programming in elixir/erlang for ~8 yearsAre Elixir and Erlang very similar? Do they belong to the same family?	PrayagS	12.628434	-7.491307	comment	3.0	17.0	1667353087	12.897812
33483033	It's weird to me how scanning the co	It's weird to me how scanning the comments all seem to refer to systems with 100k-ish LoC and dozens of contributors.A big chunk of my job is writing node microservices in AWS Lambda. I do everything I can to avoid shared library code, since past experience tells me there be lots of dragons (mainly in when and how to push or pull lib updates to components). I have a very tiny shared lib that I try to never touch and definitely never introduce breaking changes.Unit tests are a breeze since I never have to cast objects or worry about generics, etc.Typescript would slow me down so much and add absolutely no benefit. Maybe I'm misinterpreting though and no one is claiming Typescript would benefit here.We also have some C# lamdbas and I find writing unit tests for those so much more of a pain -	suzzer99	12.392025	-6.6917243	comment	3.0	19.0	1667666127	-10.432813
33526032	I think my favorite part is buried i	"I think my favorite part is buried in footnote 5:> Ironically, the performance issue becomes less articulated in this non-http, non-rails context, yet in these cases people generally dismiss ruby as option, for its performance-issues. Which, catch-22, is one of the reasons Ruby is hardly used outside of Rails (and/or Web).It's a shame that most people only write Ruby in the context of Rails. It's a lovely language, and performant enough for a wide array of tasks. It can be startlingly elegant and exceedingly productive.Of course, it's valid to talk about Ruby performance in the context of Rails, as the author does. However, it's gratifying to see a more detailed discussion on what Ruby folks mean when they say ""your database is usually the bottleneck,"" and the author does a good job at exa"	drewbug01	12.74072	-6.932145	comment	3.0	27.0	1667952996	12.342129
33527065	> No, Ruby is slow. Its GC is ungodl	> No, Ruby is slow. Its GC is ungodly slow.Ruby is quicker than Python and that's the most popular programming language there is at the moment.> And you can’t truly multithread, thus you can’t properly parallelize or maximize concurrencyYou definitely can.  You've been able to fork processes for longer than I can remember.  Ractors just became a thing, making multithreading cheaper and easier.  Ruby's also had multithreaded servers for at least a decade.  Not that it even matters that much, most people are using on-demand cloud servers that just spin up more servers when needed, making multi-threading less useful anyway.Even if you forget Ractors exist, it's like saying C can't do multithreading because it's not in the language definition...	Mikeb85	12.623611	-7.0019608	comment	3.0	15.0	1667962735	12.347684
33527830	Got some sources? Ruby3 was faster t	Got some sources? Ruby3 was faster than python at some point, iirc	adenozine	12.498552	-7.002713	comment	3.0	11.0	1667971956	12.3568945
33536162	This is an old debate surely? My fir	This is an old debate surely? My first awareness of it was probably related to Django's settings.py back around 2007 but I got the feeling from discussions then that it was a discussion that had been bouncing around for a long time before that.The counter-argument is that declarative configs inevevitably sprout programming-like features - and if they don't someone will write code to generate them.(disclaimer - in true HN fashion I haven't properly RTFA'd - dinner is nearly ready and I'm feeling bold)	andybak	12.738877	-6.53282	comment	3.0	18.0	1668019858	10.101387
33536756	I think this comment actually uninte	I think this comment actually unintentionally is reinforcing his point.Other programming languages than Erlang exist for a reason, they're not just fun toy languages for low IQ folks. There are tons of reasons why Erlang may not be a good fit for some project, and one of these other lesser languages would be a better fit, and he doesn't want to work with people who wouldn't even consider something like that.	res0nat0r	12.5596485	-7.519357	comment	3.0	10.0	1668022627	12.919736
33548369	I'm pretty sure a lot of people don'	I'm pretty sure a lot of people don't understand the tradeoffs and don't really need concurrent code. There are really only a couple of use-cases where it's really handy: for example an API gateway, where you only get and send HTTP requests. Other than that, I don't see how it worth the insane complexity (compared to sync code).You can write web servers in a sync manner; Flask, Django is way better if you only need an API, choosing FastAPI for a simple REST API is a huge mistake.	kissgyorgy	12.705505	-6.5616193	comment	3.0	15.0	1668096026	10.0245695
33564344	> TL;DR: Mastodon’s Sidekiq deferred	> TL;DR: Mastodon’s Sidekiq deferred execution jobs are the limiting factor for scaling federated traffic in a single-server or small cluster deployment. Sidekiq performance scales poorly under a single process model, and can be limited by database performance in a deployment of the default Dockerized configuration.Well, that in short explains why Pleroma/Elixir is a much better stack to build this in. You don't need Sidekiq (https://sipsandbits.com/2020/08/07/do-we-need-background-job...) and you aren't stuck with a GIL (Global Interpreter Lock).	pmarreck	12.638401	-7.317265	comment	3.0	12.0	1668189939	12.764218
33579611	Show HN: Fed Up Inflation Game	Show HN: Fed Up Inflation Game	amalgamated_inc	12.891421	-6.905023	story	3.0	30.0	1668309269	12.737703
33595183	Supporting TypeScript OOTB in any ca	"Supporting TypeScript OOTB in any capacity was itself ""appealing to the masses"". Being able to use TS without the burden of setting it up was a big selling point that resulted in people giving Deno a try, particularly in the early days.Search this transcript for ""any mistakes so far"": https://changelog.com/podcast/443"	frou_dh	12.390593	-6.7012677	comment	3.0	10.0	1668439014	-10.477794
33608168	OK, OK! I keep seeing news for Cryst	OK, OK! I keep seeing news for Crystal lately. I can take a hint, Universe - I'll write a new project in it.	bovermyer	12.631611	-7.2618694	comment	3.0	12.0	1668514186	-11.216424
33612740	Well this is a very simple system an	Well this is a very simple system and could for instance be reimplemented in Ruby On Rails in ... a few days?	unixhero	12.781617	-6.888449	comment	3.0	11.0	1668535588	12.328815
33626094	> It’s important to call out that up	> It’s important to call out that up until v4 ESLint was vulnerable to a Regular Expression Denial of Service attack (ReDoS).If one points out ReDos 'vulnerabilities' in tooling as a reason to upgrade it, you've instantly lost the argument.By the same logic we should ban TypeScript because its type system is turing complete. This reasoning isn't even wrong.	krona	12.345397	-6.707705	comment	3.0	14.0	1668617030	-10.447297
33652463	I mean, their original setup during 	"I mean, their original setup during early years (and I'm not making this up) required them to restart their Rails service every day, else it would crash/stuck because of memory leaks.That's not a ""tech startup"" based on ""hardcore engineering"", that's a startup based on a social idea and implemented with some trivial tech.Scaling this to hundreds of millions is not exactly a ""hardcore engineering"" thing either. Mostly regular engineering with some good practices (like share nothing) and devops. Tons of companies do just the same, today you can even do it from your bedroom by building on top of AWS, GAE, etc, there are even templates for this..."	coldtea	12.777266	-6.837658	comment	3.0	10.0	1668764635	12.310026
33696380	To somebody who knows Erlang, isn't 	To somebody who knows Erlang, isn't this reinventing the wheel basically?	recuter	12.554365	-7.516527	comment	3.0	10.0	1669057036	12.911426
33708531	Framework-style libraries (i.e. Hana	Framework-style libraries (i.e. Hanami) pulling in other framework-style libraries (i.e. dry-rb) which themselves pull in other framework-style libraries (i.e. Zeitwerk) is asking for a whole lot of trouble.If your app uses Hanami and Zeitwerk, for example, breaking changes in Zeitwerk may REQUIRE you to update Zeitwerk before you can upgrade Hanami. Or, if dry-rb hasn't adopted the new version of Zeitwerk, you may be stuck on an old version of Zeitwerk, unable to update it. Depending on the nature of the breaking changes, working through this stuff could be a lot of work for a mature app.Maybe the maintainers are nice and release patch versions for older major releases. I don't know. What I do know is that either way, there is likely to be a lot of maintenance burden somewhere unless thes	dolni	12.66336	-6.948898	comment	3.0	10.0	1669139066	12.304546
33725997	Yeah. Unless you're already running 	Yeah. Unless you're already running a big Rails app that's not a good candidate for a rewrite, what's the point? Nothing against Ruby, but just use Elixir/Erlang already.	cpursley	12.71791	-7.1542377	comment	3.0	75.0	1669247096	12.659869
33727100	Combination of reddit swallowing eve	Combination of reddit swallowing everyone and every php webapp being a dumpster fire of vulnerabilities making them a constant source of maintenance headaches.source: I ran & hosted zx6e.net, a niche but active motorcycle forum, for over a decade. Sunsetted the site for lack of user growth combined with becoming sick of operating php trash.	pengaru	12.783881	-6.6010084	comment	3.0	10.0	1669255699	10.300205
33727658	Thread safety in Rails is a total pa	Thread safety in Rails is a total pain in the ass. So many libraries out there are not thread safe. I have worked with many large rails codebases and there always are gems that somehow work their way in with major threading issues. I think its a legitimate strategy to run rails apps single threaded and multi process. Not necessarily for all apps or workloads of course.	r-s	12.666333	-6.9543767	comment	3.0	12.0	1669262351	12.32868
33727852	Isnt the php concurrency story disti	Isnt the php concurrency story distinctly good, with every request spawning its own process?	letmeinhere	12.720102	-6.6555767	comment	3.0	12.0	1669264684	10.067359
33728083	The funny thing is that I basically 	"The funny thing is that I basically agree with you 100%. I constantly rail against, and mercilessly tease, companies building with microservices from day 1 or going with low-level high-performance languages like golang or rust before they even have a single customer ""because FAANG does it"". Monolith until you literally can't anymore. High level until you are forced to use something lower.I did say that Rails is perfectly adequate for certain classes of applications. I guess the point I was trying to make, poorly as it turns out, is that for consumer applications at least, Rails is no longer the ""sweet spot"" and you hit up against its limitations earlier than ever and will, not might, will be forced to deploy ever more complex workarounds for basic functionality that you get out of the box "	sho	12.749335	-6.879672	comment	3.0	16.0	1669268231	12.334563
33733073	Django does many things but “efficie	Django does many things but “efficient” is not one of them.	datalopers	12.810174	-6.523108	comment	3.0	14.0	1669306901	10.015681
33749448	KATT (Klarna API Testing Tool) Is an	KATT (Klarna API Testing Tool) Is an HTTP-Based API Testing Tool for Erlang	thunderbong	12.568994	-7.4882336	story	3.0	57.0	1669431484	12.916415
33757255	This seems already almost valid Prol	"This seems already almost valid Prolog syntax, which is also a syntactic superset of Datalog.The main question I have for implementors of Datalog and Prolog variants like this: If you are that close to using Prolog syntax, why not go all the way and rely fully on Prolog, a language for which a well-defined ISO standard and several interesting implementations already exist. One of the key benefits you get in this way is Prolog's strength for meta-programming and reasoning about programs with the same formalism you use to state the specifications and queries. Abstract interpretation, query optimization etc. can be easily implemented in this way, instead of having to parse an additional formalism.It may be possible to implement such Prolog-""variants"" entirely within Prolog by defining suitabl"	triska	13.1468115	-7.279388	comment	3.0	24.0	1669500163	-12.472399
33757857	Yes well, as you mention, that is on	Yes well, as you mention, that is only the default execution strategy, and nothing prevents us from using other execution strategies for either language. In fact, the main advantage of using a declarative language such as Prolog or Datalog is precisely that it can be readily interpreted with different execution strategies, and indeed many Prolog implementations already provide alternative execution strategies, the most common of which is currently SLG resolution, also known as tabling. Alternative execution strategies are applicable as long as you keep to the pure monotonic core of the language.The fact that the default execution strategies of Prolog and Datalog differ is not a valid argument for or against using a slightly different syntactic formalism. If, as seems plausible, an alternat	triska	13.150308	-7.2755804	comment	3.0	19.0	1669503996	-12.510947
33764235	I remember this post from 2012 being	"I remember this post from 2012 being when ""everyone"" decided it was enough.https://eev.ee/blog/2012/04/09/php-a-fractal-of-bad-design/"	dec0dedab0de	12.797758	-6.6894846	comment	3.0	10.0	1669567261	10.478225
33772677	Low dependency analysis is one of th	Low dependency analysis is one of the reasons I like Flask[0].[0] https://github.com/pallets/flask/blob/main/setup.py	robertlagrant	12.709564	-6.575459	comment	3.0	13.0	1669637766	10.095504
33773051	The fact that they would use JSDoc t	The fact that they would use JSDoc type annotations and tsc instead of just typescript seems insane to me.	redox99	12.359657	-6.7507973	comment	3.0	17.0	1669640382	-10.429538
33773826	Would of course depend on the situat	Would of course depend on the situation, and also I'm not employed to evaluate your use of TypeScript vs JavaScript, you usually do this at the start of each project depending on the needs of what you're building.But if I'd want something that is optimized for ease of install, ease of contributing to and minimal build tooling, choosing JavaScript over TypeScript is a no-brainer.As a second tradeoff, choosing JavaScript over TypeScript tend to make codebases less complect and more modular, at least in the teams I've been in who maintained codebases with both languages.	capableweb	12.3678255	-6.7770767	comment	3.0	14.0	1669644759	-10.470695
33789337	That’s because your premise is weak.	That’s because your premise is weak. You argue that Django is the wrong choice for lots of projects but the counter factual is that our job is to figure that out. We have to choose the lesser evil.It’s not convincing to just call everyone stupid. Everything is a trade off. You have no idea what those could be in any particular situation so that’s why your whole argument falls apartThen you focus on construction and coding and ignore everything else a framework offers, which has downstream effects on coding and construction. It’s not all about the code. The coding is actually the easy partThe only projects ppl pay us is for the ones that are so large and complicated that if you don’t use frameworks, you’re going to either die or go crazy	esparrohack	12.734361	-6.475286	comment	3.0	14.0	1669738184	10.083122
33794223	This is how Ruby works — you don't d	This is how Ruby works — you don't directly access an object's instance variables outside of the object, you call getter methods (commonly created with attr_reader) or setter methods (commonly created with attr_writer, or attr_accessor). In this case, there is no setter. This is the same error you'd get if you tried to set a read-only attribute anywhere else.	chc	12.374429	-7.1062446	comment	3.0	12.0	1669760576	12.3380575
33800290	Interesting. A huge part of the Erla	Interesting. A huge part of the Erlang value proposition is that the language and runtime are designed to complement each other, and both have significant constraints imposed by the language design.Taking half of that equation, and supporting any language, feels like you’re missing a big part of the benefit.	macintux	12.560568	-7.520722	comment	3.0	26.0	1669814540	-7.7823396
33804637	I think the best way to become a bet	I think the best way to become a better React developer is to learn Elm, and then build your React apps the same way Elm would have forced you to.	yakshaving_jgt	12.9872265	-7.6346216	comment	3.0	15.0	1669830902	-12.754296
33806419	Soufflé: A Datalog Synthesis Tool fo	Soufflé: A Datalog Synthesis Tool for Static Analysis	nickmain	13.155339	-6.993347	story	3.0	84.0	1669837150	5.843993
33853854	I would recommend Django, but it's r	I would recommend Django, but it's really only the backend half of what you're looking for.What you're describing sounds very nice though.I've often wanted a VB6 equivalent for the web, but open source.	freddref	12.813713	-6.4726443	comment	3.0	12.0	1670163202	10.05135
33862011	Are you familiar with Typescript? If	Are you familiar with Typescript? If it's possible, could you give me an example of 3 or 4 in Typescript?	thangngoc89	12.48946	-6.8237653	comment	3.0	12.0	1670220020	-10.4495325
33894904	"I thought Elixir was ""feature comple"	"I thought Elixir was ""feature complete"".https://elixir-lang.org/blog/2019/06/24/elixir-v1-9-0-releas...Granted, that doesn't mean it won't be worked on. But it does implies nothing ""huge"" will be happening."	tiffanyh	12.680709	-7.462823	comment	3.0	10.0	1670424543	12.923212
33895350	static types is the main thing that 	static types is the main thing that keeps me from putting more time into learning / using elixir.	vasergen	12.398956	-7.4162884	comment	3.0	16.0	1670426490	12.912211
33897367	https://medium.com/deno-the-complete	https://medium.com/deno-the-complete-reference/hello-world-p...	philippz	12.519808	-6.455046	comment	3.0	11.0	1670434621	-11.0179
33907337	I haven't used PHP in almost a decad	I haven't used PHP in almost a decade, but I've been super impressed with what I've seen in the most recent few versions. Looks really cool, it's gotten me tempted to dust it off again at some point	vegancap	12.758679	-6.6194634	comment	3.0	26.0	1670503936	10.311021
33907558	Many are praising the recent release	Many are praising the recent releases of PHP for their quality and performance improvements, and I wouldn't dare argue against that.  However, the current release schedule of PHP makes things a little bit difficult for sysadmins.  We're now using php-fpm docker containers so that we can (sort-of almost) keep up with PHP updates without doing OS upgrades every single year.  A LTS version would be welcome!	trey-jones	12.768633	-6.6483345	comment	3.0	18.0	1670505451	10.310048
33907685	> It's not a healthy eco-system.I'd 	> It's not a healthy eco-system.I'd argue that's true for all of PHP. Sure it got better, but compared to other langugaes it is still a mess.	cies	12.76808	-6.646416	comment	3.0	10.0	1670506393	10.358678
33908283	> but PHP does these almost fundamen	> but PHP does these almost fundamental breaking changes so oftenI have a private (non-internet) web-app that's still on PHP6.5; I like the new PHP features, but upgrading private code to conform to PHP 7 and 8 looks a lot like make-work. I wish it shipped with good upgrade tools.[Edit] @darkwater (below) is correct; I meant PHP 5.6. PHP6 was some kind of abortion - I can't remember the story.	denton-scratch	12.777865	-6.6438456	comment	3.0	10.0	1670510313	10.329927
33953363	Very intriguing! Is there an explana	"Very intriguing! Is there an explanation anywhere of how this is different from Prolog? It seems like almost the same thing. That is not a criticism BTW, I love Prolog. From what I can tell the main difference is it has functions with return values. It also looks like it has different semantics for the choice points, letting you nest alternatives in arguments and other expressions. I do like how choice points are seen as a more natural building block in the language vs. the 'magical' bagof in Prolog. For games, having real indexable arrays will be nice as well.   % Verse:
 x:=(1|7|2); x+1
   % Prolog:
 foo(X, Y) :- (X = 1 ; X = 7 ; X = 2), Y is X + 1.

I think it might be nice to implement this language using Prolog. For example I think you could do the type definitions like this (let's ig"	grose	13.1405	-7.2953095	comment	3.0	13.0	1670843042	-12.479575
33966823	God that's such a landmine when read	God that's such a landmine when reading code. Seeing a return without an explicit change of scope... Why ? To save one line ?Yep that's why I hate ruby - worked on one mature codebase for a year and after seeing various such gems used across the project - from >10 devs - I'm confident I will never touch the language again.	moonchrome	12.5376425	-7.074694	comment	3.0	15.0	1670926659	12.389634
33966569	I'm mildly surprised the article doe	I'm mildly surprised the article doesn't mention that Perl, one of the languages that influenced Ruby, also has unless.	shric	12.361101	-7.0892453	comment	3.0	10.0	1670924279	12.866023
33968082	I believe this is somewhat prevalent	"I believe this is somewhat prevalent in the Ruby community as of late where people try as hard as possible to ""lock down"" the language and limit the ways you can get to a solution in the name of the proverbial ""ease of understanding"".I wholeheartedly disagree and believe we should instead grow the developers to understand these different approaches as opposed to labeling half of the language ""bad practice"".As I said in another comment. Ruby was built to have multiple ways of doing the same tasks and criticizing it for this is... pointless.Yes people can create monstrosities with all of these variations, but that's true with any powerful tool. If you dislike Ruby for being Ruby, pick another language."	Draiken	12.548966	-7.066587	comment	3.0	11.0	1670935058	12.386118
33972496	There’s a cost-benefit analysis here	There’s a cost-benefit analysis here that you are refusing to do: Of the two variants you’ve posted, the first will click immediately with a generalist dev who doesn’t know Ruby. The second will have them reasoning out loud, and then reaching for the docs to double check that their common-sense intuitions are correct.This is not a contrived example. I regularly find myself having to read some code in a language in which I am not proficient. Stuff like ’unless’ is such a pointless obstacle in these scenarios.So ”elegance” doesn’t come free. The cost is a loss of transferable knowledge from other languages. Your intuition is that this cost is low relative to the benefit of ”elegance,” I have the opposite intuition. Why stray from such universal conventions in favour of one person’s subjectiv	dlkf	12.538154	-7.0736365	comment	3.0	19.0	1670953210	12.394321
33974017	I have to disagree pretty strongly a	"I have to disagree pretty strongly about the lack of a ""sudden burst in utility"" between non-pure actor model and the pure actor model. Erlang's (and Elixir's) VM, the BEAM benefits greatly from knowing, with absolute certainty, that it is impossible to express shared state between two actors.First off, it's garbage collection system: In Erlang, most actors don't get garbage collected at all until the entire actor is terminated and its memory freed. Long-running processes get handled with a little more grace than that, but it's very performant compared to Java's constant scanning.Likewise, certain language design decisions allow for optimizing the scheduling system: most obviously, Erlang's complete lack of loops. Want to repeat a computation? Recurse. That choice allows for the scheduler "	OkayPhysicist	12.403405	-7.519478	comment	3.0	16.0	1670958115	12.859595
33985718	But you can use them as evidence tha	"But you can use them as evidence that tsc is not working as it ""should"". Then go ahead and fix tsc Or spec or both as needed.Without the specs, there is no way to tell if tac is behaving as developers intended it"	rk06	12.334654	-6.7151136	comment	3.0	18.0	1671034866	-10.470811
33987872	Can't agree. Typescript already has 	Can't agree. Typescript already has a better type system than a lot of languages in common usage, but it's not good enough and we run into issues all the time because it's not powerful enough. It can probably stop adding features someday, but IMO that day is at least a few years away, when it is actually solving the problem of type safety in web development fully.	ajkjk	12.330814	-6.814037	comment	3.0	21.0	1671043157	-10.4161625
33990746	Can you speak of your experience wit	Can you speak of your experience with liveviewjs? I've been looking at it, and htmx, and everything else, over the past few months for a heavily-interactive frontend project I need to start.I'm an experienced ios dev, but in at the deepens with all this js frontend stuff. There are so many options! The one thing I'm sure of is I don't want to use react.	fatboy	12.859391	-6.461669	comment	3.0	15.0	1671052766	12.67461
34002176	> Off topic, but my new found love f	> Off topic, but my new found love for Python comes from realizing that many programming tasks can be done so much faster in Python.Wait till you get ahold of ruby. It is the most LISP like language I've found yet in terms of flexibility and what it can do for you.	kneebonian	12.489717	-6.998816	comment	3.0	12.0	1671122677	12.3617115
34038279	> Sorry for the rant. On the contrar	> Sorry for the rant. On the contrary, thanks for it!  I haven't been developing with Javascript that long but I also share same feelings and worse. On top of that there an astonishing number of frameworks that all claim the same: fast and under N KiB in size. On top of that people always on the edge using the latest craze out there, just because it is trend. It feels like Java in 2000 or C++ in the 90's but much worse. But the cherry on top are the TypeScript fanatics. I do pretty well with JS and maybe a light framework on top of it, thank you very much. I do not need TypeScript nor its guarantees. Why? Well because if you comply to your interfaces and add tests and docstrings that is enough to have things in place with decent robustness. When I see something like this:type NestedPartial	liendolucas	12.358218	-6.8082027	comment	3.0	17.0	1671375536	-10.453172
34067254	Shopify and Github being run on Rail	Shopify and Github being run on Rails sorta put it to bed a long time ago.	cguess	12.748672	-6.930688	comment	3.0	16.0	1671550321	12.350365
34067661	Switched to Elixir/Phoenix a few yea	Switched to Elixir/Phoenix a few years ago and have never looked back. Absolutely a 100% improvement on Rails in every way (except the availability of work!)	chrisbaker98	12.772819	-7.103165	comment	3.0	11.0	1671551847	12.582195
34068822	WHOA, suddenly I'm not so interested	WHOA, suddenly I'm not so interested in django, ruby, or laravel.	stuckinhell	12.786747	-6.7244916	comment	3.0	10.0	1671556224	10.313261
34074477	This almost reads more like a list o	This almost reads more like a list of cruft which should be removed from the stdlib (obviously not benchmark.rb though).  For delegation it is probably better to use forwardable and be explicit about delegated methods--delegate.rb smells like it uses method_missing magic.	lamontcg	12.546229	-7.0824265	comment	3.0	21.0	1671579372	12.3756695
34075015	… and ruins the life of future maint	… and ruins the life of future maintainers, there’s a reason few languages tried to borrow features from ruby’s metaprogramming (saying this as a rubyist)	jdkoeck	12.549025	-7.060571	comment	3.0	12.0	1671582488	12.36058
34075922	So the weirdest part is that the OP 	"So the weirdest part is that the OP is literally just a cut and paste of a bunch of scripts found in the ruby distribution ""samples"" folder (that I had no idea even existed).That pretty not great ruby wasn't written by the author -- it's actually included in a ""sample"" file with the ruby distro?https://github.com/ruby/ruby/blob/ruby_3_1/sample/dir.rbA file whose commit history shows... it's part of the very first commit recorded in git history, in 1998 by matz, the original author of ruby.I have no idea what's going on in that ""sample"" folder, very weird.The OP is simply regurgitating the weird ""sample"" folder. The ""author"" of the OP didn't write any of this code. According to git history... matz did?!?"	jrochkind1	12.607237	-7.0481067	comment	3.0	15.0	1671589196	-11.22847
34076271	This was written by matz some time b	"This was written by matz some time between 1993 and 1994. It appeared in the very first preview release of ruby, version 0.49. The original tarball has the file modification timestamps:    $ curl -s https://cache.ruby-lang.org/pub/ruby/1.0/ruby-0.49.tar.gz | tar -tvz | grep dir.rb
    -rw-r--r--  0 matz   root      127 Jun  3  1994 ruby/sample/dir.rb"	brasic	12.626265	-7.041429	comment	3.0	11.0	1671593028	12.383644
34096676	I see your point, but Facebook had l	"I see your point, but Facebook had large collection of code written in php(still is?), and they are far from having ""lack of investment or interest in technology."""	YetAnotherNick	12.787978	-6.5871944	comment	3.0	13.0	1671733837	2.8989127
34112337	I have been playing around with djan	I have been playing around with django for the first time in almost 5 years recently, and it’s so much more productive. Wondering if I should try out rails.	chairmanwow1	12.796417	-6.6715455	comment	3.0	13.0	1671841313	10.277331
22665456	I find it dramatically cleaner.Each 	I find it dramatically cleaner.Each clause is categorically isolated, unlike a case statement (the alternative in Erlang, with which I’m most familiar) where code can precede the case statement and thus introduce bindings that can muck up the logic.	macintux	12.503959	-7.4137125	comment	3.0	18.0	1584980349	-1.6276948
22688180	Erlang or Java (Reactor)	Erlang or Java (Reactor)	dericop	12.508165	-7.5123973	story	3.0	3.0	1585167844	12.893408
22693213	While I agree that Perl influenced R	While I agree that Perl influenced Ruby which I guess in turn influenced CoffeeScript and Elixir to some degree, the lineage of PHP seems to be dead. I don't really know any languages that are inspired by PHP itself, other than maybe Hack which one could argue is very closely related to PHP.	LeonidasXIV	12.751146	-6.670203	comment	3.0	11.0	1585228452	10.401866
22726978	>  In the past I've also tried Jekyl	>  In the past I've also tried Jekyll and Hugo. I found that both work great out of the box, but were hard to customize as I'm not very fluent in either Ruby or Go.Why do people not know about Eleventy, why?	azangru	12.593303	-7.0381823	comment	3.0	11.0	1585566804	12.38427
22728957	WHat do you mean by reasonml for ser	WHat do you mean by reasonml for server apps? If you mean running js(output of bucklescript) then no it will likely not benefit node users.	xfer	12.439122	-7.401413	comment	3.0	14.0	1585583582	10.275427
22729774	I don't yet use Crystal, but it's ki	"I don't yet use Crystal, but it's kind of painful that Windows support is in the ""What can wait? - after 1.0"" section. Cross-platform support is one of the reasons I've been diving into Rust.However ""we integrated a CI for Windows to ensure we continue moving steadily forward"" sounds like a good compromise for limited resources."	faitswulff	12.633772	-7.2683063	comment	3.0	17.0	1585587650	10.32107
22738265	>>browser-based technology struggles	>>browser-based technology struggles to utilize multiple cores in the same VM instance, while Clojure’s immutability by default, concurrency primitives and core.async make writing multi-threaded code a breeze;Are you kidding me ? You can achieve concurrency in either with Chromium or NodeJS by using worker threads. There are libraries (like Thread.JS for example) which provides a layer of abstraction over Worker Threads and Thread Pool to even make the job simpler. or You can use CLJS + core.async + web worker.>> javascript VMs choke on processing large amounts of data, which leaves them a better fit for advanced interactive forms than compilers or data processing pipelines;Worker Threads were shipped in January 2015. This is March 2020.>> Clojure’s REPL-aided development with fast feedbac	truth_seeker	12.405473	-7.4902425	comment	3.0	14.0	1585667497	8.796813
22755777	Ruby serves one ecosystem (web), bar	Ruby serves one ecosystem (web), barely.Python serves several huge ones: web, datascience, 3d graphics, sysadmin... all with different needs, different conventions, different “standard” tools to do this and that. The community is orders of magnitude bigger than ruby by now, and anything that requires coordination is much harder to accomplish than in a lot of other ecosystems.Python is now on par with ecosystems like C/C++ (where different build and packaging conventions are legions) or Java (where ever 10 years they write a new build tool on top of the previous one(s) to hide the complexity, and still, like python, they struggle to make simple executables 30 years on...). It’s just a hard problem to cater for so many different needs.	toyg	12.504866	-7.0267706	comment	3.0	32.0	1585795228	12.362547
22758255	History of Erlang and Elixir	History of Erlang and Elixir	factandfiction	12.622349	-7.4967384	story	3.0	132.0	1585831045	12.949268
22772240	Fired officially next week but to be	Fired officially next week but to be honest it was ongoing before the lockdown;)On the bright side it seems the tech job market is not too much affected here in Paris but we'll see how it goes.Well at least I can now finish some freelance gig that was taking my free time, and it gives me more time to continue learning elixir, I even finally took the time to open-source and deploy a demo of a LiveView game I made initially at the company that let me go. https://every-weak-tapaculo.gigalixirapp.com/potus	conradfr	12.697742	-7.4392343	comment	3.0	15.0	1585936852	12.926932
22776339	Ask HN: What are your experiences wi	Ask HN: What are your experiences with using Starlette or FastAPI in production?	larrykubin	12.377999	-6.628857	story	3.0	19.0	1585977334	-9.227244
22784666	A History of Erlang (2007)	A History of Erlang (2007)	vinnyglennon	12.533862	-7.559619	story	3.0	107.0	1586078517	12.914708
22785217	I'm surprised Apprun nor Solid have 	I'm surprised Apprun nor Solid have been mentioned yet.Are there any TypeScript reactive frameworks? I know you can use TS with the others, but finding tutorials can be a pain since it all these are JS first frameworks.	xellisx	12.565298	-6.515428	comment	3.0	25.0	1586089001	-10.47056
22789577	Logic programming is badly underappl	Logic programming is badly underapplied in general, I think. Most of the amazing work in this area never seems to have gotten far out of academia (if at all) -- Prolog being the almost singular exception.Would be awesome to see some motivating examples for this application. It sounds really cool!	Twisol	13.133422	-7.282174	comment	3.0	14.0	1586128928	-12.470632
22794822	I am learning Elixir and Phoenix. An	I am learning Elixir and Phoenix. And to be honest I am not sure I like either. The lack of decent resources (I mainly use Python and JavaScript with some C#) so I am used to reading a lot of blog posts, I don’t really like the documentation and the answers in forums are over verbose. And then there is Ecto which gives me new respect for SQLAlchemy or even  solutions in C#. Debugging is a bit rubbish as well and to top it off it’s not typed. Pattern matching is kinda cool though.	timc3	12.7077265	-7.34602	comment	3.0	10.0	1586188815	12.874447
22797186	For what it's worth, I don't think r	For what it's worth, I don't think ruby achieves this goal either. I've been programming full time in Ruby for nearly three years and things like this [1] still surprise me. Ruby feels less surprising than C++, sure, but that's a pretty low bar to clear.[1] https://makandracards.com/makandra/46939-ruby-a-small-summar...	edbrown23	12.578959	-7.055088	comment	3.0	13.0	1586203206	12.392274
22797531	I like erlang.  But erlang's syntax 	"I like erlang.  But erlang's syntax doesn't do it any favors.  Might as well use elixir.  Still the beam.I also don't think the beam's benefits are necessary for the vast majority of software which makes it perma-niche.  ""Why use erlang when I can use python, a database, and a distributed task queue?""I also really like Elm so I was sad to see it in the poll position, but I also don't base my language choices off of someone's blog."	rukittenme	12.611969	-7.484682	comment	3.0	25.0	1586205268	12.906324
22797993	I guess it depends upon what you mea	"I guess it depends upon what you mean by ""unfamiliar"".  Erlang's syntax is unnecessarily divergent from a lot of mainstream languages.  So much so that it makes it more difficult for mainstream developers to get into.Elixir was modeled after Ruby for a reason.  That reason was Ruby's very approachable and intuitive syntax."	crusso	12.60918	-7.5125685	comment	3.0	15.0	1586207907	12.926448
22798415	I've had trouble getting into it bec	"I've had trouble getting into it because the ergonomics are so incredibly, wonderfully, art-project level rough.For example:    $ erl
    Erlang/OTP 20 [erts-9.2] [source] [64-bit] [smp:8:8] 
    [ds:8:8:10] [async-threads:10] [kernel-poll:false]
    
    Eshell V9.2  (abort with ^G)
    1> 2 + 2
    1> 2 + 2.
    * 2: syntax error before: 2
    1> 2 + 2.
    4

Note the trailing whitespace(!) after the last `2 + 2. `, necessary for the result to be printed.I was coming from Haskell which has its own very serious tooling and ergonomics problems. Trying Erlang made me realize things could be even worse. My internal model in my head of language designers/promoters is COMPLETELY wrong, I have absolutely no idea how people could spend time promoting languages with such strange tooling to a gen"	seagreen	12.55383	-7.509492	comment	3.0	17.0	1586211280	12.91487
22817001	If you control both ends of an API, 	If you control both ends of an API, there's no reason not to use Thrift or equivalent (gRPC) rather than untyped JS. Even if you don't believe in typing in general, an API boundary is exactly where it's most important to make sure both sides agree on what the interface is.	lmm	12.413483	-6.616493	comment	3.0	10.0	1586379242	9.44433
22817098	> I wish I had time to learn it. I a	"> I wish I had time to learn it. I always wonder why it doesn't get more attention.pre-answered your own question really. Prolog 'died' in the AI winter, so no one knows it and no one knows anyone who knows it. Every time you think ""huh I bet this is like 100 lines in Prolog"" it doesn't matter because writing 2000 lines of Java (or whatever you know) is still going to be faster than learning Prolog.This is also the problem with literally any comment about ""using the right tool for the job"" with regards to programming languages."	Avshalom	13.147918	-7.2986717	comment	3.0	12.0	1586379710	-12.490031
22822649	My brief experience has been similar	My brief experience has been similar. Elm is a dictatorship that could be wonderful if it didn't exist in the realm of messy html/js. I experience an icky feeling of stockholm-syndrome part of the time, and just plain frustration at other times when dealing with Elm.What's infuriating is that I do see the benefit of some degree of strict stewardship. It's just that it's too much in this case.	mercer	12.998154	-7.679886	comment	3.0	12.0	1586441251	-12.767757
22823996	He doesn't claim it's not possible, 	"He doesn't claim it's not possible, he claims that the Elm community will excommunicate you for forking.I can't think of a language or platform that doesn't have some degree of ""soft"" forking that maintains communion with the language community. It's common for proprietary reasons (linux kernel, anyone?) as well as experimental reasons (e.g. PyPy). So this is an eyebrow raising claim."	billjings	13.00201	-7.685136	comment	3.0	29.0	1586449056	-12.720028
22824013	I don't agree with everything here. 	"I don't agree with everything here. Open source really does mean that you just have all the code to rebuild the thing from scratch under the right sort of license. Open source doesn't mean anything else, like having access to design decisions.That is acknowledged in the article.  But the fact is that you can BE open source without doing the things that make open source WORK.[...]
Elm users who are not happy should fork the code --- everything, including the ecosystem's dependencies on an ELM internet domain --- and maybe produce something that is completely self-contained. Software that relies on ""phoning home"" is a risk regardless of where that is hosted and whether the people are nasty or nice.Why should unhappy Elm users do this instead of going to a language+environment that they don't"	btilly	12.991373	-7.6647506	comment	3.0	29.0	1586449111	-5.8366756
22825131	This discussion about whether or not	"This discussion about whether or not the ""Elm community"" will be meanies is missing the point and inventing a hypothetical scenario where you get kicked out of some club. Kind of a weird conjecture to me. I guarantee nobody truly cares that you fork Elm. The thing is that generally people who threaten to fork Elm are quite hostile on the Elm forums and subreddit.If you fork Elm, an already tiny ecosystem, you'll realize that the hard part is building the community, not adding your pet features.Everyone who has threatened to fork Elm has realized this at the end of the day. It's also why people overlook the lack of their pet features: because ecosystem is far more important."	hombre_fatal	13.006379	-7.687171	comment	3.0	13.0	1586453992	-12.759724
22827963	When I decided to commit my project 	When I decided to commit my project to Elm, back in 2017, I have seen all those writings on the wall. Basically I am buying in someone's whim. One caveat is that I can stop following his whim, freeze source code that I need and carry on my development with out needing or caring about future releases, ie, I do the dreadful fork.I work alone so I choose my tech destiny.But when you look at the guy at which will you are submitting to, and can't but say he is the everything I want from a COMPILER MASTER. He have designed clean and well working language and ecosystem around it.This is the ecosystem where you are not afraid that one of library's dependencies might install crypto miner or steal your user data.You are sure with like 99.99999....% that you won't have errors in runtime.And language 	popara	13.004116	-7.676444	comment	3.0	12.0	1586472194	-12.761532
17891596	As we transition to a more multicore	"As we transition to a more multicore, multi threaded environment Ruby cannot perform well. And thus by induction Rails. 
An interesting way forward is functional programming, because of its composable nature can perform really well in such environments. 
I dont see where Rails ideal niche exists going forward, is it in Large Apps that need really scalable apps that exist on multicore environments? 
Does it lie in small SPA like apps for which it has virtually no support? or
Does it lie in the middle where you just throw more hardware at the problem before rewriting the whole app?
In the last one yr i have seen more enterprise apps being activated in Nodejs than in Rails. Why does the enterprise Like Nodejs while Rails is on its downward spiral? i suspect it has to do with Nodejs being Begi"	pankajdoharey	12.752129	-6.895078	comment	3.0	17.0	1535806221	12.342095
17891615	I'm not sure I agree with this, you 	I'm not sure I agree with this, you can always achieve parallelism with multiple processes and IPC, and can do so fairly efficiently if communication is light.Rails' biggest problem is that it isn't JavaScript, and thus code is not portable between client and server.	bodas	12.709558	-6.928595	comment	3.0	13.0	1535806549	12.346521
17891616	Would you consider laravel to be tha	Would you consider laravel to be that framework that allows rapid development increased speed and provides an  easier way to scale.	wolco	12.796457	-6.6263156	comment	3.0	26.0	1535806602	10.346941
17891770	In what way? What is your metric? La	In what way? What is your metric? Laravel is slower, has less support in the community and uses PHP.. It also lacks webpack and SPA capabilities which are already baked into Rails. So in my opinion Laravel is actually behind.	websitescenes	12.795824	-6.652186	comment	3.0	19.0	1535809014	10.362
17892071	It’s been a few years since I’ve use	It’s been a few years since I’ve used Rails, but when I did, it always felt like within a year or two a new version of Rails would come out and I’d basically have to rewrite the site from scratch if I wanted to update.I don’t know if the codebase has stabilized but the transition between 2.x to 3.x to 4.x was pretty rocky from my recollection. Hopefully it’s better, since Rails is probably the best framework to get a site up and running quickly.	rm_-rf_slash	12.757169	-6.9428253	comment	3.0	10.0	1535813185	12.367941
17892201	Same with flask and django. And the 	Same with flask and django. And the worst is that the flask version is often riddle with security holes (not flask's fault) that would have been prevented for free.I actually always say that despite the apparent easiness of the micro framwork hello world, you have to actually be very skilled to use them correctly to do anything beyong a few pages. While a full feature framework will make a beginer produce a decent work by default.	sametmax	12.728818	-6.562807	comment	3.0	21.0	1535815020	9.999163
17891586	Copy from my previous replyThis is p	Copy from my previous replyThis is pretty amazing. Both GitHub and Shopify are huge, billion dollar companies running on the original apps made over a decade ago. And they now both on the latest Rails, helping to push the framework forward [1]I can't wait for y'all to see what we upstream now that we're in a position to give back and improve Rails. My keynote; Rails 6.0: Scalable by Default [2] at RailsConf was just a small portion of our plans for Rails. [3]There are also work from Discourse on Rails performance, Ruby is getting a Method JIT. [4] and working on more pref work. TruffleRuby is close to 1.0 and it is available on all ruby manager [5]. The Open Source build is now also available on macOS as well.There are lots more, and all of them were years in making, It took a year for Git	ksec	12.744085	-6.9280486	comment	3.0	35.0	1535805995	12.344614
17895115	We’re going through a similar proces	We’re going through a similar process at my company - how do we refactor the decade old startup-style JS without 1) spending a year rewriting everything from scratch generating little business value and potentially introducing regressions in the process 2) continuing to build stuff on that shaky house of cards. It looks like the solution we’ve kind of settled on has also been TypeScript. At this point it’s probably sub-5% of our prod code that’s TS source, and it’s daunting given how much we have to change and how many years it will take at our current pace, but it is the middle ground moderate way and probably the right way to approach things like this.	markn951	12.400815	-6.5150476	comment	3.0	14.0	1535854304	-10.442257
17895118	TypeScript was released in 2012, I w	TypeScript was released in 2012, I wouldn't call a 4 year old tool an early release. And if you were already using Webpack picking it up was as easy as adding a loader.IMO, using such early proposals isn't worth the risk in production. Especially for proposals that are so young that they haven't even settled on a clear spec as to its behavior, like the pipeline operator.	TheAceOfHearts	12.388854	-6.7234087	comment	3.0	13.0	1535854310	-10.460109
17895169	I'm really eager to see availability	I'm really eager to see availability of some extra features via this new pathway.But I am less excited about projects containing TypeScript plus the large number of transitive dependencies from a typical Babel set up; I've been greatly enjoying TypeScript instead of that.	kylecordes	12.371624	-6.721176	comment	3.0	14.0	1535855119	-10.444593
17896335	So I know you also use React extensi	So I know you also use React extensively at twitch, so how are you finding react and typescript working together?I've been using the two together recently and its been great. Like you I don't think I could ever go back to not using typescript for anything but the smallest projects.However, often times I've found some common react patterns to be difficult to express in typescript. Namely default props and high order components. The type signatures I'v ended up with for my HoCs aren't as simple as I'd like, but I guess there is no way getting around that.I've actually started to prefer render props over HoCs simply because the type signatures are simpler. Still no idea how to handle default props correctly.	a_humean	12.467674	-6.7136664	comment	3.0	11.0	1535880490	-10.472404
17896608	I wonder if it's worth migrating fro	"I wonder if it's worth migrating from Flow to TypeScript?Flow has been great, but I've just tried to update to the latest version and I'm dealing with a flood of indecipherable errors, especially from the react-dnd library. Looks like no-one is really maintaining the flow types so I'm on my own, and I don't even know where to start.I also haven't been able to track down some errors, like ""Cannot read property 'foo' of undefined"". Flow thinks that this variable can never be undefined, and I have no idea how it's happening. It might even be a bug in Immutable.js, but I have no idea.So if TypeScript is more popular and has a bigger community, then maybe it's worth migrating just so I can get more help with these issues. And maybe TypeScript will catch more cases as well."	nathan_f77	12.462944	-6.7028127	comment	3.0	12.0	1535887617	-10.479347
17905369	IMO Erlang needs Elixir’s `|>` and `	"IMO Erlang needs Elixir’s `|>` and `with` pipes. I voiced my opinion on the ML and kind of started working on it!
I need https://bugs.erlang.org/plugins/servlet/mobile#issue/ERL-639 fixed first.I find Erlang a harder tool to shoot yourself with than Elixir yet there are definitely some things it could improve on, and not only at the language level (always running xref on compilation would be nice)."	fenollp	12.6204405	-7.5056005	comment	3.0	12.0	1536014854	12.92462
17914928	I'm no programmer, but I remember ba	I'm no programmer, but I remember back when Ruby 1.8.7 got really popular because of Rails even though Ruby 1.8.7 was not that secure or stable compared to other environments.  (Yes, I know Ruby is better now.) But, I was wondering why someone didn't take Smalltalk (or Squeak or Pharo) and find a way to make it more popular?  We have Node, Electron, Java, etc. So why not Smalltalk? Wouldn't it be easier to develop, run faster, and be more cross-platform than those popular environments? Is there something in Squeak or Pharo holding it back?Maybe the next Tim-Bernes Lee could use it to develop new protocols + a browser and create a safer and secure WWW-alternative?	da02	12.329794	-7.2747426	comment	3.0	28.0	1536119880	7.0861154
17925547	I spoke Mikael Arguedas at the 2018 	I spoke Mikael Arguedas at the 2018 French ROS days (JONAROS) where he gave a presentation about ROS 2 (talks are available online IIRC, in French). During his presentation; he said that most of ROS 1 was engineered before any of today's well known frameworks were available , hence the lot of custom tools. That has driven a major part of ROS 2's design (especially the use of DDS).Otherwise, I have been personally using ROS for building robots for the French (and European) robot championship (see https://twitter.com/AIGRIS_Birds). It works pretty well, it is convenient, easy to learn and provide some nice tooling (bagging for replaying messages, simulation with Gazebo...).It is the de facto standard for robotics middleware for scientific projects. It not widely used by industrials because o	Davidbrcz	12.703964	-6.8555984	comment	3.0	12.0	1536234500	12.189103
17939662	I like the use of template strings f	I like the use of template strings for, well, templating, with automatic differentiation between data values and event handlers, nice touch. The state mechanism seems similar to Elm and its derivatives (e.g. Redux), which I guess is a plus considering how much of a convention that's becoming.	fineline	12.900217	-7.2653155	comment	3.0	11.0	1536386715	8.517964
17950796	> For these we don't really need opt	> For these we don't really need optimizations.While it's true that many sites with high volume are written in high level languages, it's still true that these will require more CPU and memory than something which is highly optimized written in a lower level language. The trade-off is that it takes less developer time to write code in the high level language and the savings there are enough to invest in more computing power.However, if you can optimize code for high level languages even further, you're still reducing the hardware requirements and ultimately saving costs. If you can build a stable Ruby VM that runs with 10% fewer resources and is compatible with existing applications, I think you'll find people willing to throw money your way.	michaelmior	12.609308	-7.044157	comment	3.0	29.0	1536576396	12.361185
17955663	I've been working with compilation u	I've been working with compilation using Prolog (after Warren 1980 went by here on HN a month or so ago.[1])Two things:1) If you are writing a compiler and NOT using Prolog you are almost certainly working way too hard.2) I think I can see an alternate reality where compiler-like software exists but high-level programming languages as such do not.[1] https://news.ycombinator.com/item?id=17674859	carapace	13.134541	-7.2942595	comment	3.0	10.0	1536617820	-12.483657
17975739	Welp, so much for “PHP has JIT too.”	Welp, so much for “PHP has JIT too.”	aasasd	12.683132	-6.6375337	comment	3.0	15.0	1536809252	-9.096372
17977105	As a heavy React Native and Flow use	As a heavy React Native and Flow user for years, the disadvantage of projects such as those is that they actually are pure and true open source Github projects in the original meaning: The owner produces something for themselves and then shares it.What is the disadvantage then? Well, it is not a product, meaning the external users are not the main target of the project.The project owners have no incentive to implement anything they don't need themselves, or to fix any bugs that don't impact their own developers. It works fine if your own needs happen to be as close as possible to the ones of the project owner, if you patch stuff you need yourself, and if you don't expect anything from the owner in general.Especially when I compare Flow and TypeScript (I use the first quite heavily, the sec	ItsMe000001	12.5106125	-6.604031	comment	3.0	15.0	1536829359	-10.462873
17977170	Does this mean Facebook pulls its re	Does this mean Facebook pulls its resources out of PHP?Weren't they THE big player that kept PHP alive in the last years?	k__	12.791168	-6.6128297	comment	3.0	20.0	1536830253	2.954017
17977355	Show HN: Condor – A library for buil	Show HN: Condor – A library for building scalable TCP servers in Erlang	s1n4	12.548793	-7.4921327	story	3.0	65.0	1536833238	12.895719
17980225	FWIW, a couple of years back I had a	FWIW, a couple of years back I had a gentleman who was a 30 year mainframe programmer in a Rails & Postgres class that I taught. He learned both, was humble enough to take an internship for a Rails job at over 50 and then turned it into full employment.Anecdotal, but I found it interesting to watch the portability of experience.	brightball	12.735088	-6.93727	comment	3.0	10.0	1536857919	12.375944
17995641	The web site linked has very few det	"The web site linked has very few details.Whenever I read ""Ruby on Rails"", I can't help but think back to when it was the latest fad and everyone was playing with it, but then every single project would break whenever any of the 82 dependencies needed to be updated due to security issues.Since this site has no details, I've lost interest since I have no intention of revisiting that shitshow without someone telling me it's somehow different, that the dependency nightmare is now fixed. Pretty or not, projects which require significant energy to just keep up with security updates aren't worth it."	johnklos	12.716216	-6.939168	comment	3.0	12.0	1537038721	-9.166841
17996218	Counterpoint: Rails is not efficient	Counterpoint: Rails is not efficient for new developers who need to get up to speed on it. Other tools are more straightforward to onboard devs; just follow the API docs and read the code. With Rails you need Rails experts.	dcwca	12.763387	-6.9071894	comment	3.0	15.0	1537048598	12.318931
18014100	I don't understand this sentiment. H	I don't understand this sentiment. How is installing JRE any diffierent than installing Ruby?	unmole	12.494052	-6.9833694	comment	3.0	24.0	1537267844	12.37575
18015970	Sudoku Solver and Generator	Sudoku Solver and Generator	itchyankles	13.438198	-7.4059362	story	3.0	23.0	1537283635	15.078662
18019706	From what I can tell the Symfony guy	From what I can tell the Symfony guys have always been at the forefront of PHP development. Many Composer dependencies I use seem to depend themselves on Symfony libraries.Even though I'm not a massive PHP fan I can appreciate the hard work they're doing to make it a more viable and approachable language.	benbristow	12.760716	-6.632032	comment	3.0	12.0	1537308987	10.317631
18929657	I work a lot with Laravel, it is a h	I work a lot with Laravel, it is a hell of a framework, documentation is amazing, it's clean, very well done, super extensible, there are a lot of extensions (just have a look at the Spatie library) and allows me to build up a website/webapp backend with a good API, basic authentication and other basic features in minutes.Also, and this is a really strong point, can manage assets super easily, React and Vue stacks are supported out of the box with laravel-mix.And if you need something lighter (for building just an API for instance) Lumen is the light version of it.I have a lot of experience with PHP and Python frameworks, Laravel comes as absolute top for me.https://laravel.com/https://spatie.be/open-sourcehttps://lumen.laravel.com/	moray	12.789633	-6.588299	comment	3.0	14.0	1547720093	10.32297
18929847	Most complainers haven't looked at P	Most complainers haven't looked at PHP the last 20 years or so. A lot has happened since v4 but it's fun to make fun of people I guess.	Moru	12.782603	-6.6357493	comment	3.0	13.0	1547722617	10.343032
18930436	Can you go more in detail about what	Can you go more in detail about what is depressing in PHP compared to Python/Ruby or even Java?There are differences between the languages as such, e.g. PHP has traits, Python has Operator overloading, etc. From a tooling perspective I cannot tell that there is any big differences.	la_fayette	12.700977	-6.6718693	comment	3.0	12.0	1547730223	10.294405
18968601	Genuinely curious: Is there any indu	Genuinely curious: Is there any industry usage going on for Pharo?	m_mueller	12.343279	-7.2624607	comment	3.0	15.0	1548168710	7.070494
18969328	>If you aren't interested in a novel	">If you aren't interested in a novel immersive programming environment then you can safely ignore Pharo too.I was curious and so downloaded and ran the default image, and I'm beyond captivated by it, but I have to agree that neither the link nor the homepage do a good job of enticing me to do so, or even hinting and what can I expect.If I didn't feel like setting up and checking out random projects I stumble upon, I would have never even seen what Pharo is about, given the abundance of marginally different programming languages that pop up on HN.So yeah, I also think Pharo's best ""Hello, World"" is just opening it and trying out stuff, but maybe it should try to sell itself, at least a little, for the uninitiated?"	theon144	12.340549	-7.250579	comment	3.0	17.0	1548173769	7.0799656
18969488	I have not looked at Pharo, but the 	I have not looked at Pharo, but the Lisp development environment on my Symbolics computers is amazingly integrated, so this is a very high bar to surpass if true.	SomeHacker44	12.341892	-7.2633934	comment	3.0	17.0	1548174878	7.1044374
18972472	At this point why not just have brow	"At this point why not just have browsers run TypeScript natively? Remember the <script type=""text/javascript""></script>, maybe just put <script type=""text/typescript""></script> and be done with it."	dsego	12.367972	-6.738289	comment	3.0	17.0	1548191258	-10.463341
18973098	> The difference being that the Rail	"> The difference being that the Rails ecosystem is infinitely more mature than the Phoenix ecosystem (and community)What are you viewing as mature? It's a loaded word and many people use it with a different meaning in mind.> Ecto is still going through some massive changes (ActiveRecord is comparatively stable)As of the latest release of Ecto -- 3.0 -- the maintainers said they consider it mostly complete and said they will not do breaking API changes [0]; this part in particular:""With the release of Ecto 3.0, I would like to announce that I finally consider Ecto to provide a stable API. This means no more new features, although we will continue providing bug fixes and updates. For everyone running Ecto in production, rest assured that Ecto will continue to be a well maintained project wit"	pdimitar	12.749702	-7.186486	comment	3.0	17.0	1548195006	12.677591
18978747	There are lots of better languages t	There are lots of better languages that compile to JS and don’t let you make mistakes in the same way the two grand parents do. Just saying JS is complicated to make typed is completely true and not a good reason to use TS; it doesn’t excuse the fact that I spend all this time doing a Typescript dance and still wonder if my Types have weird flaws.I would encourage people to consider Reason or Dart or Elm or even plain old ES6 before they decide Typescript solves their problem.	andy_ppp	12.3611	-6.8048167	comment	3.0	16.0	1548256317	-10.438201
18988036	Thankfully nobody is using PEAR anym	Thankfully nobody is using PEAR anymore. Using composer doesn't solve the problem of blinedly pulling internet dependencies, though (as others pointed out).What I currently do is grepping vendor for common smells like usage of eval() or obfuscations of the same thing after doing a composer update on a project.	rawfan	12.365164	-6.472524	comment	3.0	16.0	1548332796	-9.37902
18990075	> we’ve tried to build as much as we	> we’ve tried to build as much as we can as to skip dependencies, I’ve spent enough time in rails to appreciate debugging owned code - an argument for another time...Okay, I'll bite.  I have no experience in RoR, but does this line suggest that RoR encourages NIH?This line feels like that scene in a horror movie, right at the beginning, when the camera lingers a little too long on the janitor's face as he cracks a smile that's wider than it should be.Red flags:* NIH (mentioned above)* Using Go in production (more specifically, complaining about the lack of support for Go in production -- you should have known what you were getting into)* Announcing a hacked-together MVP to the whole company* Escalated to a VP for a technical issue* Not using the company's recommended workflow, instead buil	diminoten	12.712419	-6.96435	comment	3.0	12.0	1548347166	12.327856
18990394	> The codebase will be ported from F	> The codebase will be ported from Flow to TypeScript. To understand the rational please continue reading, but a quick summary is that we hope this will help our community ramp up on Yarn, and will help you build awesome new features on top of it.Another major project moving from flow to typescript	misiti3780	12.440041	-6.7131414	comment	3.0	21.0	1548348894	-10.497351
18991014	If you write type annotations in TS,	If you write type annotations in TS, they're stripped away.If you write type annotations in Flow, they're stripped away.There's no difference. TS has some additional features which are purely optional that don't get purely stripped out, but you're not mandated to use them.	RyanCavanaugh	12.422177	-6.8092284	comment	3.0	14.0	1548352271	-10.477399
19003138	Sure... I guess you're saying that y	"Sure... I guess you're saying that you can use the typescript compiler just fine as long as you turn off literally the only reason for it?Have you been on a team that adequately managed a list of thousands of warnings, always finding and fixing just the ones that are ""important""?"	qwer	12.343044	-6.818109	comment	3.0	12.0	1548454890	-10.441829
19003561	Typescript projects definitely give 	Typescript projects definitely give me the most pain. You regularly end up to the point you have to resort to 'any' after hours of looking for a stupid type definition. IMAO it's just one big waste of time, just landed a job with a good old JS codebase, what a relief. TS might help for junior and medior developers so they make less mistakes. But I'm pretty sure if you can code Javascript well Typescript only stands in your way when you want to create something. Imagine you give a painter a brush that doesn't allow to be used freely, that's what TS does to a good JS developer.But TS is at this moment really eating JS jobs, and that kinda hurts. I just don't understand the proponents, besides the job opportunity, give me one single reason to write in TS? If you want to go for a strictly type	wanted2	12.361459	-6.806325	comment	3.0	15.0	1548458343	-10.444135
19052165	Rails would be the opposite example.	Rails would be the opposite example. Magic all the way down and the ecosystem is not even contemplating the idea of bailing on it.	Illniyar	12.768085	-6.924174	comment	3.0	10.0	1549003729	12.362497
19086438	I built a Mandrill clone based on SE	I built a Mandrill clone based on SES, Google AppEngine, Phoenix/Elixir. I moved everything there and it works pretty well, planning to open source it at some point.	neya	12.72871	-7.24697	comment	3.0	13.0	1549382090	12.843564
19097204	TypeScript revolutionized the act of	TypeScript revolutionized the act of writing JavaScriptReact and JSX revolutionized the act of writing HTMLGraphQL revolutionized the act of connecting front end and back endBut for CSS... SASS, SCSS, LESS, and such are by comparison pretty pedestrian tweaks on vanilla CSS	yodon	12.370573	-6.5415463	comment	3.0	10.0	1549473500	-10.444064
19111825	Is there any way to test php code th	Is there any way to test php code the same way a compile phase does in other languages to catch obvious mistakes from hitting your users?	argd678	12.695154	-6.6517444	comment	3.0	12.0	1549604359	10.286546
19111853	Plain PHP files work that way. But w	Plain PHP files work that way. But what if you use a framework (even an in-house one)? Does this holds true?	enz	12.740008	-6.5622873	comment	3.0	19.0	1549604612	10.306314
19111881	However, deploying a Flask/Django/Ra	However, deploying a Flask/Django/Rails app still is usually less fun than deploying a PHP app of the same spec written w/ Symfony or Laravel.Configuring a service to monitor gunicorn, which itself took a bit to configure, before I begin configuring NGINX or Apache... it's really a pain in the butt.LAMP/LEMP stacks just... are	jszymborski	12.764353	-6.572163	comment	3.0	12.0	1549604993	10.043553
19112166	> Each PHP file is an endpoint. As o	> Each PHP file is an endpoint. As opposed to having routers in code or client side SPA routing.Which becomes a security issue due to accidental endpoints or uploads becoming endpoints. Or becomes a mess of imports. Either way, PHP frameworks often end up with a central router anyway.> PHP files can be deployed independently, swapped out or updated live.Which means some people try to do that the naive way and end up breaking a few requests that happen during the deployment.> Can be as easy as editing a php file in notepad and dropping it on a ftp server.Which causes https://stackoverflow.com/search?q=headers+already+sent+bom&... because people don't realise they had an invisible character before all the code.I really don't think any of those are a good thing.	viraptor	12.765596	-6.5644617	comment	3.0	59.0	1549610202	10.261371
19111847	Why not try out Hack? It's kind of a	Why not try out Hack? It's kind of a cross between PHP and Go. Hack has a real type system, and HHVM is incredibly fast.	ilovecaching	12.742368	-6.6423774	comment	3.0	13.0	1549604538	10.294075
19113192	I just do not understand the fascina	I just do not understand the fascination with Laravel. When the first version of Laravel was released Symfony was already lightyears ahead.The only thing Laravel had going for it was that you could take more shortcuts, and it was a pain to integrate into any IDE if you wanted decent autocompletion.	Aeolun	12.807084	-6.6431317	comment	3.0	13.0	1549624594	10.352881
19113853	Question : modern PHP is great for w	"Question : modern PHP is great for websites, but what are the solutions when you need to make some async work ? For example if I need to make few third party API calls in parallel ? With Laravel I resorted to using queues which feels like more complicated than it had to be (each worker takes up quite a bit of memory). Eventually I switched to SQS + Lambda + node.js.
Is there any mature way to do async work in PHP ? In Node.js for example, it's quite trivial and powerful with promises and async/await"	EZ-E	12.412706	-6.7948155	comment	3.0	13.0	1549632058	9.334264
19114136	You conveniently leave out all the s	You conveniently leave out all the security mess of that design, especially WordPress. The plugin system is pretty much the cause of all the security issues in WordPress.Perhaps end-users should not have the capacity to so easily add third party PHP code, even if it’s “simple.”	eeeeeeeeeeeee	12.779859	-6.5672345	comment	3.0	12.0	1549634516	10.323089
19126384	I'm a self-taught junior developer w	I'm a self-taught junior developer who started with Ruby in 2016. I've very much enjoyed the experience so far, and am currently rather invested in Rails, though I'm preparing to branch out into other areas of web development (I'm looking at you, React).This thread is really opening my eyes to the sheer vitriol that gets directed at Ruby outside of its own echo chamber.I get that it has performance issues (to be addressed in Ruby 3) and interest in Rails is now less than half what it was at its peak.[0] Everyone has very strong opinions, and when people start soapboxing like they are in this thread, nobody learns anything.At this point, honestly, I just think the rest of the community could use a little bit of Ruby's characteristic niceness.[1][0]: https://trends.google.com/trends/explore?	rlue	12.685256	-7.0076923	comment	3.0	26.0	1549773339	12.381581
19131830	For example, having a compiling syst	For example, having a compiling system. That is a drag for everyone, but especially for newcomers and people getting started.Edit: can you really not imagine any situation where typescript slows down some team in some situations? :)	franciscop	12.337976	-6.738282	comment	3.0	14.0	1549855629	-10.465338
19132844	It's funny how TypeScript proponents	It's funny how TypeScript proponents seem to acknowledge that Java is bad and yet they consistently fail to point out in what way it's inferior to TypeScript.I've worked with TypeScript for over a year and before that, I worked with Java for about 2 years at university and if anything, Java is superior to TypeScript because it has a much more consistent type ecosystem. Pretty much every Java project uses the same URL class to represent URLs for example. TypeScript has no consistency between libraries and projects - This will be TypeScript's demise; once developers realize how empty and meaningless supposedly universal type names are as an abstraction, they'll be begging to go back to JavaScript.Enforcing a type system which is consistent between all projects is as pretentious as using glob	jondubois	12.3284645	-6.816333	comment	3.0	15.0	1549873688	-10.426401
19136051	The other day I was arguing this exa	"The other day I was arguing this exactly in a thread here about Ruby. People argue that Rails is outdated and is irrelevant for ""modern web development"", even though the web is not as modern as most people might think. Even what Facebook does, the only really hard part is the sheer scale they operate at. Facebook (the website) is not a single page app and other than the scale could be done in Rails with some AJAX sprinkled in or even Wordpress with some plugins.People use SPA frameworks and make SPAs with them and those SPAs end up functioning exactly the same as any Rails/Django/Laravel site except the URL bar doesn't change. MVC is still the way the web is built, except for the people who got bored and wanted to make web development even harder than it already is.YAGNI."	freehunter	12.7696495	-6.8973446	comment	3.0	26.0	1549905204	12.340714
19135605	I recently started a hobby project a	I recently started a hobby project and initially went with a JS solution. But when I had to start deciding on auth, maybe an orm, routing, db layer, and templating, I said fuck it and installed Rails.Previously I had never built a real product in Rails, only the book store tutorial. I'm really happy with Rails so far. I don't have to worry about a lot of shit I had to worry about in JS land and now I can focus on the app itself.	quest88	12.782908	-6.8039904	comment	3.0	11.0	1549902416	12.337116
19137630	If you maintain a popular public pro	"If you maintain a popular public project, you help the entire JavaScript community if you use TypeScript, because then you can ship perfectly accurate type definitions along with your code. Even if the user is using plain JavaScript, their editor can probably use those type definitions to provide coding assistance.Also, it's hard to call something a ""leaky abstraction"" when it's a superset of the thing it sits atop."	poink	12.35061	-6.8056264	comment	3.0	13.0	1549914577	-10.469733
19159394	Yeah, the JS runtimes are really imp	Yeah, the JS runtimes are really impressive. I'd be interested to see what a compiler could do with TypeScript though. There could perhaps be guidelines of which features you can use in hot code paths in order to get optimised code, which could be enforced by the compiler for sections of the code which you mark...	nicoburns	12.352082	-6.7040854	comment	3.0	12.0	1550115076	-10.455809
19167148	Crystal isn't exactly something I'd 	Crystal isn't exactly something I'd run in production.Besides it's crippled as a language due to never allowing anything to be null, so there isn't any powerful metaprogramming you can do with it. That is a big turn off for me. Otherwise Crystal would be such a nice sweet spot IMO .	james_s_tayler	12.626117	-7.2583723	comment	3.0	15.0	1550187572	-11.226468
19167169	But does Crystal have either of thos	But does Crystal have either of those? It's also a statically typed, compiled language. Rust would require a complete rewrite of the code, while Crystal would only be partial.	goatlover	12.566623	-7.2698326	comment	3.0	10.0	1550187735	-11.213437
19168006	I honestly thought it was myself unt	I honestly thought it was myself until I saw that it was an official GCP repo. Unbelievable...Sending emails is a one-liner in Django. Am I a sucker for not building my own email sending service?!Of course being a Google demo they have to include the obligatory ad server service, in Java no less. Nonsense like this is why I'm steering my kids away from considering software development as a career.	jbarham	12.835237	-6.521537	comment	3.0	17.0	1550197848	-2.0246494
19168082	Harmless yes, but is it useful? Prob	Harmless yes, but is it useful? Probably not. I have been teaching people Ruby and till this day, I have a hard time answering whenever a student asks me what the benefit of using Symbols over Strings is.I know it was in place early on for memory / performance reasons but as of Ruby 2.2, there are zero-performance gains using symbols over strings. Unfortunately it's too late to deprecate them since it's a widely adopted practice.When I teach Ruby, I try to evangelize how simple Ruby is but always hits the breaks whenever I have to explain Symbols.And ultimately, no matter how much I try to ignore, I just can't stand how this looks:opts = { adapter: :mysql}It looks like a double wall of some sort which is fine for those who are used to it but not for those beginning. (Especially those comin	jaequery	12.470693	-7.0646424	comment	3.0	11.0	1550198882	12.417705
19172619	looks like it's the react version of	"looks like it's the react version of https://dockyard.com/blog/2018/12/12/phoenix-liveview-intera... ?edit:
nvm, it's listed in the readme as inspiration"	janpot	12.889786	-6.8153086	comment	3.0	13.0	1550250653	12.73064
19173356	Yes, that was my inspiration! Chris 	Yes, that was my inspiration! Chris gave a great talk about it at ElixirConf is anyone is interested in watching: https://www.youtube.com/watch?v=Z2DU0qLfPIYSome differences compared to LiveView:- Type-checking: there are extensive JSX typings (https://github.com/karthikv/purview/blob/master/src/types/js...) that ensure you're attaching event handlers with the correct signatures, specifying supported props, using valid HTML tags and attributes, etc. Static-typing guarantees are one of my big priorities.- I'm not sure if LiveView intends to support nested components like React does. Having the ability to split up complex pages into components that you can nest and reuse (with mostly one-way data flow) is a key part of maintainability. I wanted to maintain a very familiar React interface, so	karthikksv	12.896312	-6.673554	comment	3.0	10.0	1550255118	12.6758585
19175971	The code presented in the article do	"The code presented in the article doesn't communicate the problem.  It communicates a clever optimization that will break if the spec changes at all.This code should be readable enough to give you an idea what is happening and how to change it.  my $board-depth = 8;
  my $board-width = 8;
  
  my $squares = $board-depth * $board-width;
  my @grains-per-square = ( 1 .. $squares ).map({ 2 ** ($_-1) })
  
  say [+] @grains-per-square;

Which if you read Perl6 says number of squares, and in each one put 2^n-1 grains, then add them all up.Hint: `[]` is the reduction metaoperator, it lets you specify an operator to use when reducing a list.  [+] means ""add it up"".It finishes basically instantly, and while Perl6 has gotten a lot faster, it is not a fast language (yet?).  So no need to optimize th"	daotoad	12.3390875	-7.0480804	comment	3.0	13.0	1550275410	13.162327
19207746	> Comparing to modern languages, erl	> Comparing to modern languages, erlang lacks a lot.Like?> With go and rust available,Yeah, tell me when those “modern languages” will be distributed, stop using stop-world GC, and contain at least 1% of introspection Erlang has.	lelf	12.523486	-7.521939	comment	3.0	12.0	1550670701	12.907851
19208186	> Comparing to modern languages, erl	"> Comparing to modern languages, erlang lacks a lot.The ""a lot"" part is emphasized. It has to be something massive? Classes? Objects?With the same token one can say most other languages lack a lot as well. That ""lot"" would be fault tolerance. Notice how most operating systems today use isolated processes instead of sharing memory like Windows 3 or DOS did. There is a reason for that. When the word processing application crashed, it would take down the calculator and media player with it. So modern operating systems have isolated concurrency units. And so do languages built on BEAM VM.And of course you could still spawn OS processes and run a language that uses shared memory between its concurrency units (threads, goroutines, callback chains). But you can't spawn too many. Or even worse, ev"	rdtsc	12.489228	-7.525195	comment	3.0	13.0	1550674141	12.896883
19208479	The thing is the BEAM model doesn't 	"The thing is the BEAM model doesn't have a bright future because it can be replaced by Kubernetes and is language neutral, almost all the feature BEAM provides are better done in k8s ( HA, deployment ect ... ).
As for hot code reload, I've never seen why you would need that since you can use blue / green or canary / rolling deployment, the only reason I see is to keep some state in your app, which I think is a terrible idea.Two others things:- deploying Erlang / Elixir app is difficult ( even with distillery... )- Erlang is slow, much much slower than Go"	Thaxll	12.575695	-7.4803405	comment	3.0	12.0	1550676092	-13.272555
19222533	I feel like most open source project	I feel like most open source projects are like that.https://github.com/antirez/redis/pulse/monthlyhttps://github.com/django/django/pulse/monthlyhttps://github.com/moby/moby/pulse/monthly	nerdbaggy	12.818087	-6.512762	comment	3.0	10.0	1550801501	10.093864
19226285	>> ... programming in TypeScript eve	">> ... programming in TypeScript every day.That explains why OP got depressed, considered quitting the industry and then switched to F#.
If I keep using TypeScript, I might just snap and switch to COBOL."	cryptica	12.364701	-6.8049126	comment	3.0	23.0	1550850514	-10.455555
19226778	It's probably a little multifaceted.	It's probably a little multifaceted. I'm a fan of Ruby but even Ruby develops warts with a code base that's too large.I was just about ready to exit programming entirely before I discovered Elixir, just because I got tired of dealing with the...exact...same...problems...in...every...single...dang...language.Elixir essentially forces you into a mode of operation that hits that perfect balance of productivity and concise code with a structure that inherently avoids almost every long term code base problem that I've dealt with in my career.It got me excited about programming again, which I didn't think was possible that far into my career.	brightball	12.685564	-7.3836584	comment	3.0	10.0	1550854193	12.828595
19239163	I'm a bit curious as to the message 	I'm a bit curious as to the message processing overhead. BEAM and HIPE are relatively fast, but string processing of any kind was kind of slow back when I messed around with Elixir...	rcarmo	12.6020355	-7.4337215	comment	3.0	10.0	1551025509	12.877183
19244511	> Is there a way to program that doe	"> Is there a way to program that doesn't do something like that?Logic and relational programming (Prolog, SQL) comes pretty close. ""Here's some rules about the data. Execute."""	paulddraper	13.1064205	-7.1830816	comment	3.0	16.0	1551089874	-12.444853
19245974	Isn't this what, for example, Django	Isn't this what, for example, Django models are? Or even js simpleschema?	foobarbecue	12.771311	-6.467562	comment	3.0	11.0	1551106255	10.019327
19256779	Rule 35: Every year, someone somewhe	Rule 35: Every year, someone somewhere will reinvent PHP or CGI or some combination of the two.	tathougies	12.786819	-6.6389065	comment	3.0	19.0	1551204528	10.362127
19262187	"""Any sufficiently complicated concur"	"""Any sufficiently complicated concurrent program in another language contains an ad hoc informally-specified bug-ridden slow implementation of half of Erlang."" - Virding's Law"	Jedi72	12.51326	-7.51481	comment	3.0	20.0	1551261342	12.896673
19278070	Erlang is very weird, and very compl	Erlang is very weird, and very complicated. The BEAM languages themselves are very small, but the BEAM is an all in one ecosystem that sends beginners on a trip. In Erlang, when a new person asks what library to use for X or Y, the answer is usually it’s already in the virtual machine, but it probably has some sort of quirk that makes you want to bash your head in the wall at scale.I’m a recovering Erlanger now. Erlang taught me a lot of valuable skills and expanded my horizons, but it’s a journey and anyone who goes down that hole is liable to never come back up.	ilovecaching	12.528953	-7.4912553	comment	3.0	17.0	1551416933	-8.987307
19279813	> I once cranked out a design based 	> I once cranked out a design based on abstract classes in TypeScript, and got ridiculed because apparently nobody does it this way in TypeScript. I certainly pretended that my colleagues were hopeless idiots. It used to help before, but that time it left me with a bad aftertaste.seems like both he and his coworkers would need some help in humility.	jypepin	12.344094	-6.7867823	comment	3.0	17.0	1551442514	5.425961
19280001	Are you suggesting that abstract cla	Are you suggesting that abstract classes are a good idea in TypeScript? Because to me, abstract classes suggest that you're doing a lot of inheritance, which is the opposite of a good idea in JS.	seattle_spring	12.336377	-6.822161	comment	3.0	13.0	1551444061	5.411902
19296307	Do you have any advice for PHP best 	Do you have any advice for PHP best practices? I'm starting  a job that will probably have me using PHP...	ambicapter	12.745377	-6.6564593	comment	3.0	10.0	1551641535	10.3225975
15766672	I was curious about the memory usage	I was curious about the memory usage for Elixir. It’s the second time I’ve read (without details).	igotsideas	12.691201	-7.4540925	comment	3.0	10.0	1511459484	12.928146
15773944	Any chance it'll ever be built out t	Any chance it'll ever be built out to be something more, eg: FusionPBX? Just tired of running another PHP site, would love to write things in Python instead.	StudentStuff	12.722303	-6.649964	comment	3.0	10.0	1511573350	10.290495
15776814	Wouldn't Python/Django make more sen	Wouldn't Python/Django make more sense in 2018 considering that Python could be used for data science and machine learning? I realize this is a Python vs Ruby question, but if you didn't know either Python or Ruby and were trying to pick between Django and Rails for a project, wouldn't you pick Django in 2018 due to future data science and machine learning opportunities?	touchofevil	12.701364	-6.701835	comment	3.0	14.0	1511630826	10.267148
15776872	Much of what you learn in Ruby and R	Much of what you learn in Ruby and Rails is not portable to other languages. Ruby and Rails are deeply flawed and much of what you learn is dealing with those flaws. Similar to learning PHP for example (but differently flawed than PHP). Ruby is also showing its age and is lagging behind modern languages.Rails is probably fine and fast and good for small projects. It is probably not good for professional large projects.	stevebmark	12.648766	-7.0146713	comment	3.0	15.0	1511631522	12.365432
15782322	I've used Rails for a long time, and	"I've used Rails for a long time, and Phoenix since early versions (0.6 or something like that?).Phoenix is amazing but productivity wise I haven't seen it get near the productivity levels you can get with Rails. Other developers I've spoken to say the same thing. This is even more true with the more recent release of Phoenix 1.3 encouraging the use of contexts. I think it's a good pattern to extract to once you have more knowledge about your application but trying to think about it up-front has slowed development speed down and has been hit or miss on whether or not the context was ""correct"". https://hexdocs.pm/phoenix/contexts.htmlI think Rails and Phoenix have a heavily overlapping place in web development but my personal tl;dr is that Rails is great for getting shit done and Phoenix is "	bwilliams	12.791564	-7.1056995	comment	3.0	11.0	1511722085	12.658849
15782497	One reason not to use Elixir is the 	One reason not to use Elixir is the absence of  vectors/arrays. Yes, you can import them from Erlang but they ain't pretty. Elixirists try to pretend that lists and tuples are all you need but Elixir's lists are Lispy lists, not the Python variety. It's one of these small print things you only discover after spending time with Elixir but it can be a deal-breaker. Ask on the Elixir lists and you'll get some very defensive responses which basically add-up to vectors/arrays being difficult to optimise in a dynamic functional language. String processing is also not quite as straightforward as in Ruby and Python due to how Erlang/Elixir uses binary representation.	cutler	12.638369	-7.483926	comment	3.0	16.0	1511724230	12.921378
15783115	I've used Django and Phoenix and Lar	I've used Django and Phoenix and Laravel. And they all have one thing in common: They're not the same at all.I don't know why people compare MVC-framework-X-that's-inspired-by-Rails'-foundations-and-fundamentals to Rails. Rails isn't great because MVC. Rails is great the vast and mature tooling and ecosystem that exists in Ruby (bundle, rake, thor; Rubygems), and the effortless ability to metaprogram (which is why Rails is what it is).Per Rubygems, there are literally hundreds of thousands of people who are smarter than me who have developed libraries that solve the majority of things that I will/may need to implement. I'm not smarter than them and I'm okay with that. I want to focus on domain-specific stuff. Not anything else.Those other frameworks... They're just not the same.It's like c	joshmn	12.783857	-6.71797	comment	3.0	16.0	1511731886	10.42485
15796534	If you know rails well and keep curr	If you know rails well and keep current, upgrading is perfectly straightforward, if uninspiring, work.It's a janitorial service of sorts, and it's totally appropriate for some corps to contract it out. It allows the developers with the best knowledge of the business to focus on that, where value is created. Regressions are mitigated by a strong culture of testing.	quesera	12.739743	-6.9484396	comment	3.0	14.0	1511871597	12.357178
15800076	>However if you come from Rails or w	>However if you come from Rails or want to do mostly web development, then Phoenix is a nice framework, so maybe a good place to start. Also Elixir has a very friendlier community for newcomers perhaps, kudos to Jose and team there, they went above and beyond to make that happen.One of the best parts about Elixir/Erlang/other BEAM languages is that you can use something like the Phoenix framework in your erlang project just fine.  You do not need to learn Elixir if you want to use any of the neat stuff developed in it.	lightbyte	12.638413	-7.4556007	comment	3.0	10.0	1511894512	12.902175
15808329	author here: wasn't expecting this t	author here: wasn't expecting this to show up on HN... sadly, it's kinda bad timing. A couple folks here have commented on problems getting it installed, AND there are some issues with large data in graphs which i've addressed locally but not pushed yet because.... I'm in the middle of rewriting this in Crystal so i can just give folks a statically linked binary to run and have better test coverage and many other good things (like cleaning up a codebase that kind sprawled out of control.... was just a quick hack that kept growing)So: if you're interested in this please message me on twitter (@masukomi) or email me at masukomi@masukomi.org and I'll let you know when there's a new version and / or help you get the current version working.	masukomi	12.62998	-7.2608743	comment	3.0	10.0	1511974396	10.485926
15815354	I don't know whether the alternative	I don't know whether the alternatives are objectively better, except maybe in certain domains.Mostly, people seem not to like PHP because they find it ugly and awkward... which is valid, but subjective. The major alternatives (JS, Ruby and Python) have documentation, frameworks and reasonably comprehensible paths to an MVP, although one could argue that PHP is still slightly better in terms of speed of deployment. Everything seems to have converged and normalized to the point that the factors affecting one's choices primarily have less to do with the language itself and more to do with the ability to hire for it, and whether or not you like significant whitespace.	krapp	12.72877	-6.6433096	comment	3.0	15.0	1512046629	10.342487
15826279	Author here. Thanks for reading my p	Author here. Thanks for reading my post! :)To answer some of the comments: no, this isn't satire, nor is it a marketing or advertisement piece.I'm just having fun with the language and wrote a post in the voice of The Grinch (https://en.wikipedia.org/wiki/Grinch). It's meant to be mean. That's all there is to it. Tomorrow's article (coincidentally, also written by me), will have a more sober tone and will describe Perl 6's system of containers and variables. See if you like it more.I'm OK if you don't like Perl 6 :) That's why we have so many different wonderful languages: everyone can find what they love. I love Perl 6. You should try it out.	zoffix222	12.352639	-7.035678	comment	3.0	10.0	1512154719	13.196892
15832524	Just out of curiosity, if the API is	Just out of curiosity, if the API is already being built in Java, why not just build a single-page-app to utilize the API instead of Django? I'd assume the deployment and overhead of maintaining a single-page-app would be way lower than Django. (i.e. uploading to s3 and setting up CDN vs. setting up a VM for Django with nginx, uwsgi, etc.)	Kpourdeilami	12.809298	-6.510248	comment	3.0	12.0	1512231377	10.04279
15832561	The biggest challenge with upgrading	The biggest challenge with upgrading Django is making sure all your Django-related dependencies have fixed things up.Django only has one paid full-time maintainer to my knowledge (Tim Graham). So given the team's limited peoplepower Only the last two releases (+LTS releases) get security updates. This means that Django 1.10 (released 18 months ago) won't get updates, so if you use any new features you're on the upgrade treadmill.Django itself is very good about offering clean upgrade paths. Very vocal about breakage, usually will not introduce breakage unless there's some good reasons to. Unfortunately third party libraries often take a while to update, so you can quickly find yourself overwhelmed with figuring out which deps are safe to upgrade and which aren't.I try to be a good OSS citi	rtpg	12.788999	-6.579217	comment	3.0	11.0	1512231765	10.133935
15832603	I would rather use Flask for that.	I would rather use Flask for that.	baby	12.708438	-6.584899	comment	3.0	35.0	1512232262	10.036026
15832489	Python - DjangoRuby - RailsPHP - Lar	Python - DjangoRuby - RailsPHP - Laravelall nice choices	_arvin	12.814326	-6.6632338	comment	3.0	15.0	1512231029	-10.412236
15832718	The advantage of Django is it comes 	The advantage of Django is it comes bundled with everything you could need. Flask is simple, but then you need user authentication. Which library do you use? Is it updated and maintained? What about an ORM, forms, templating, localzation. Do they all work together?Suddenly it's not so simple.That being said, if your app really is simple (single file, under 100 lines) flask is excellent.	orf	12.798984	-6.532462	comment	3.0	22.0	1512233419	10.012393
15838056	Knowledge is imperfect and uneven. P	Knowledge is imperfect and uneven. People don’t automatically know what should be normalThis has been a big one in my experience. Because our industry is growing fast, at any point in time, most people have not had very much experience. I worked a company which had hired a load of bright young things straight out of university and trained them up. They were great people. They also had no idea that a lot of what they were doing was really bizarre and unproductive. Or, if you hire people who have had a few jobs, they're often not very varied: for all values of 'Rails', someone with five years of moving around doing Rails will know a lot about Rails, but won't be in a position to appreciate just how screwed up a lot of things in the Rails world are.It's hard to escape from this trap, because 	twic	12.732452	-6.942334	comment	3.0	10.0	1512316288	12.350557
15851036	I find the section 5.3 from the pape	"I find the section 5.3 from the paper ""Out of the tar pit""[1] describes it very well:> It is for this reason that Prolog falls short of the ideals of logic programming.
Specifically it is necessary to be concerned with the operational
interpretation of the program whilst writing the axioms.I haven't heard of any approach that generalizes the goals of logic programming in a far better way. Is there any? (on specific usecases, having a sort of rule engine for running your ""business rules"" can indeed be an excellent approach)[1] https://github.com/papers-we-love/papers-we-love/blob/master..."	virgilp	13.132827	-7.2888436	comment	3.0	14.0	1512471441	-12.485953
15853424	are modern prolog just a layer on to	are modern prolog just a layer on top of the old semantics or somehow an incompatible paradigm ?	agumonkey	13.143658	-7.2957406	comment	3.0	11.0	1512494966	-12.485833
15857690	Crystal Survey 2017 Results	Crystal Survey 2017 Results	snake_case	12.633394	-7.253631	story	3.0	60.0	1512522319	-11.1114235
15872482	Ruby 3x3 Progress	Ruby 3x3 Progress	hit8run	12.653475	-7.0409756	story	3.0	22.0	1512670391	12.384319
15879498	Rails is still a truly incredible fr	Rails is still a truly incredible framework and it still moving very fast in terms of development. It’s front end stuff has always felt wrong to me and many others and we found weird ways to doing what we wanted. Rails 5 added support for a lot of them as the article points out but it still feels complicated.Rails is awesome bc it’s opinionated but the fact that it’s ruby still lets you do what you want. I think rails needs to really dedicate some effort to better generators that ask which of these modern front end approaches do you want to use and then setup the project to just work and let me get to my coding.	pducks32	12.757906	-6.852358	comment	3.0	11.0	1512748287	12.340066
15879897	Turbolinks is the official Front-end	Turbolinks is the official Front-end part of Rails and it works very well, but there is no mention of it in the article neither in the hackernews comments, so i think it is under-used.There's also turbolinks-ios and turbolinks-android, I built my mobile apps with minimal knowledge of Swift and Kotlin.	nicolasMLV	12.78889	-6.5258675	comment	3.0	13.0	1512750925	7.642071
15879937	I've transitioned from rails-everyth	I've transitioned from rails-everything to working exclusively with front-end frameworks and libraries (react, angular, polymer), and I'll tell you this still: if I'm working in rails, I use turbolinks. It's a wonderful approach, way under-appreciated.When two or more things on the page need to know about each other/you require a high-fidelity interaction that you can't easily handle with just it, then yeah - reach for vue, react, or what have you. But no need to start there! Use those as targeted air strikes	captain_crabs	12.783834	-6.665429	comment	3.0	10.0	1512751222	12.24961
15891184	A betting exchange is a stock exchan	A betting exchange is a stock exchange. Same thing.Let's say that there is a football game Liverpool vs Manchester.One client puts £5 that liverpool will win. The exchange takes the money and adds it to the order book.Another client puts £5 that manchester will win. The exchange takes the money. It's matched with the opposite order and frozen. The money will be redistributed to the winner at the end of the game, minus a fee.It's exactly like buying and selling in a normal exchange. You can do real time trading during the game and arbitrage between exchanges.Disclaimer: I worked in betting before I moved to finance.Erlang is super weird and hard to recruit for. When used right, it's not faster or more productive than C++ or Java. I wouldn't advise anyone to use Erlang for anything.	user5994461	12.561087	-7.492175	comment	3.0	13.0	1512910247	-4.5029893
15902503	Actually the first thing I do nowada	"Actually the first thing I do nowadays when I start a new project using rails is turn off turbolinks. Rails has so many ""magic"" hidden underneath and Turbolinks is the epitome of this problem. I have no idea how it works, but all I know is it breaks my apps too often if I ever make use of a lot of JavaScript code.Nowadays I do:1. Pure old school websites with no SPA approach (Surprisingly, most web apps work just fine this way. You're just being tricked into building SPA when you don't need one)2. Use rails as API backend and use frontend JS framework (I do this when I know I will need to make this work both on the web and mobile. Since I just need to write the API once and use it cross platform, it's much more efficient this way IF I'm doing something like this)Turbolinks actually doesn't"	cocktailpeanuts	12.779059	-6.508949	comment	3.0	13.0	1513044304	7.538392
15904209	Being skeptical is a good attitude. 	Being skeptical is a good attitude. I'm very skeptical of this Eldorado that some posters see in PHP7. My experience is quite different.> Additionally PHP has an amazing performance debugger by FB called xhprof.xhprof is unmaintained for years. The official version does not compile with PHP7. Various forks exist, but the only stable fork has been rebranded and defaults to sending all the performance data to the branding company.> PHP performance could always be increased hugely by making sure is cache buckets have enough memory (opcode cache, realpath_cache_size).Always, really? The history of PHP opcode's caches is complex. Before PHP5.6 where Zend published their opcache+, I've seen the various solutions (APC and others) cause vicious bugs.> Secondly with any web framework your app will 	idoubtit	12.745083	-6.6392484	comment	3.0	13.0	1513071808	10.29204
15930983	"Exactly.    {
        ""__directive__"	"Exactly.    {
        ""__directive__"": ""phpstyle_stringly_typed"",
        ""boolean"": ""true""
    }"	kroltan	12.375262	-6.7213717	comment	3.0	12.0	1513335651	-8.953789
15931431	Opaque Types in Flow and TypeScript	Opaque Types in Flow and TypeScript	phpnode	12.439385	-6.7780337	story	3.0	51.0	1513342721	-10.473657
15948487	I'm in the process of learning Elixi	"I'm in the process of learning Elixir and the observation I'm about to make may be completely off-base. With that said...Seems like the section on ""When to use processes"" is selling processes short a bit.  Certain kinds of state management would seem to call for processes to either manage or even hold state... but processes (as I understand them) are also key in designing for reliability.  So I would think I may well want to organize my code relative to processes as I'm also figuring out the supervision trees and various failure scenarios.  And yes, concurrency issues as well.  If I'm wrong on this, I'd be happy to be set straight.Anyway, yes, the section I speak of does get to some of the other parts of what I mention, but the emphasis on state management seems to distort and unbalance th"	sbuttgereit	12.6066475	-7.467848	comment	3.0	16.0	1513556410	12.917222
15947103	Elixir multiple processes: Basics	Elixir multiple processes: Basics	ck3g	12.627371	-7.4702916	story	3.0	131.0	1513537602	12.919018
15960385	Crystal seems like a great high-leve	Crystal seems like a great high-level language and alternative to Ruby, but the biggest blocker for me using it more generally is the lack of multi-threading support. There is WIP support for threading but it has not been committed. Moreover the Crystal developers either don't do a great job of updating their multi-threading roadmap [0] or work on multi-threading has died off. (I assume it is the latter because the thread-support branch has not gotten any commits in 10 months [1].) Ultimately if I wanted the high-level aspects of Ruby or Python and wanted more performance and great thread support I'd probably go with Elixir (even taking into consideration BEAM weirdness).[0] https://github.com/crystal-lang/crystal/wiki/Threads-support[1] https://github.com/crystal-lang/crystal/tree/thread-	eatonphil	12.610408	-7.253419	comment	3.0	21.0	1513693713	-11.2208805
15960225	"Please let's stop spreading this ""el"	"Please let's stop spreading this ""elixir is like fast/better ruby"". The syntax is not even that similar, and the runtime is completely different, the patterns and tools available not the same at all.I know it's probably a hill on which I'm gonna die and get a lot of downvotes, but we should really try to not force Elixir into being a new, fast ruby and let it evolve and solve problems in its own ways."	dudul	12.671036	-7.4239097	comment	3.0	12.0	1513692109	12.887368
15961101	The consensus in this thread is that	The consensus in this thread is that Crystal has lost a lot of steam recently and little is being done. In fact, it's been nearly 6 months since the last release. As a member of the core team, I'll be honest: this is correct.Manas, Crystal's main commercial backer has had a very tough year and has been unable to donate as much manpower to the project as previous years. The non-manas members of the core team have had difficulty finding time too. This has been a low point in the project, but it's very possible that 2018 will be a different story. Development is picking up right now, extremely basic windows support is just a few days from being merged into master, and the 0.24.1 release is imminent. There will be a blog post regarding this on crystal-lang.org soon.	RX14	12.636049	-7.276471	comment	3.0	12.0	1513699389	-11.196292
16002072	Perl p5p slipping? rurban please sav	Perl p5p slipping? rurban please save us	vgy7ujm	12.335746	-7.0322843	story	3.0	3.0	1514162837	13.179788
16005388	Huh... didn't even know what POODR w	Huh... didn't even know what POODR was...Guess I've been faking it for the past nine years... I mean, I did start a company that used Ruby/Rails as the primary platform. And I've worked the last six years in a shop that currently has a team of about 12 Ruby/Rails developers...Don't get me wrong, Ruby's a tool in my toolbox; I use it like I would any other tool. I like solving problems. Most modern languages make it easy and fun to solve problems.I don't like when it's easy to see where a language is encumbered by poor choices (I seem to have a diametrically opposed viewpoint of your opinion of the Javascript community; to me, the redundancy, low quality and churn of community libraries is one of Javascript's greater liabilities). But if it works for you, that's great.Language Holy Wars are	tres	12.641222	-6.9823546	comment	3.0	12.0	1514230424	12.356852
16020655	It's an implementation of the Erlang	"It's an implementation of the Erlang VM on top of Xen. Xen is  a virtualization hypervisor. Erlang VM is a virtual machine which runs Erlang bytecode. The default implementation is called BEAM and it runs on *nix, Windows and other architectures. This implementation is more lightweight and only runs on top of Xen. One of its main features is a fast boot time.So to recap instead of the typical stack of:    Erlang Code | BEAM VM | Linux or other OS | VM or Hardware

You get:    Erlang Code | Ling | Xen | Hardware


The use cases could be isolation, scaling or what authors calls 0-footprint cloud. That is, only spawn instances as you process requests. When requests are not coming, you don't have any instances running. In more modern terms maybe it could be used for building a serverless archi"	rdtsc	12.530154	-7.519173	comment	3.0	12.0	1514441930	12.896414
16022088	As a Turbolinks fan, I couldn't be m	As a Turbolinks fan, I couldn't be more excited about Stimulus. Sounds like it completes the front-end development story with Rails-like simplicity minus requiring that you know Ruby and Rails.I started off as a FE dev working on mostly Rails projects. Not knowing Ruby or Rails, I depended on others for updating controllers, debugging Rails errors, etc. I was also commonly frustrated when my teams treated the client as a second-class citizen for no apparent reason besides an aversion to JavaScript. JS' takeoff in the market was actually quite satisfying at first, but the more I worked with Angular, React & company, the more I missed the productivity of server-rendered JS responses, jQuery, and Turbolinks. I doubt Turbolinks + Stimulus wins prom king at JavaScript High next year, and I coul	bruncun	12.7933035	-6.614438	comment	3.0	19.0	1514470789	12.315743
16021808	Rails, Development, and More with Da	Rails, Development, and More with David Heinemeier Hansson [audio]	yannski	12.75554	-6.934513	story	3.0	92.0	1514466884	12.349406
16043643	Profitable remote job site built wit	Profitable remote job site built with single PHP file (4.5K lines of code)	vanilla-almond	12.76842	-6.6077256	story	3.0	7.0	1514763210	10.283129
16052348	For context, I'm in no way, shape, o	For context, I'm in no way, shape, or form a modern front end maestro. I'm good with ES6, Jquery, Handlebars, and Bootstrap. I've done a little with the Angular 2.From that perspective....What does this buy me over  the other more popular frameworks? What are the chances that this won't be abandoned if it doesn't gain traction? It's also easier to recruit developers if you say your stack is built on the more popular frameworks.On the other hand, even though I've never used Ruby on Rails, this is written by BaseCamp so I do give them a slight benefit of a doubt. Just like I would give Kotlin the benefit of a doubt based on my experience with JetBrains' products.	scarface74	12.733089	-6.700491	comment	3.0	35.0	1514906871	12.3310795
16055276	Although I agree that PHP is an odd 	"Although I agree that PHP is an odd choice, I do think there's something to be said for teaching computer science with a language that the students (probably) won't end up using professionally. In some sense, this permits a decoupling of the language ergonomics from the underlying principles, thereby emphasizing 'learning' over 'training'.[0]The very first language I was ever formally taught was Lisp. I haven't used it even one time since then, but it forced me to understand recursion at a cellular level, which has painlessly translated to every language I've used since then.There's a significant distinction between ""I understand how [inheritance|recursion|functional programming|etc] works in <language of choice>."" and ""I understand how [inheritance|recursion|functional programming|etc] wo"	gervase	12.744789	-6.657511	comment	3.0	11.0	1514924843	10.346428
16057376	Turbolinks are not good for usabilit	Turbolinks are not good for usability.They appear to make the pages painfully slow on slower connections.They add a loading bar across the top which can have different meanings depending on the site and browser:- some browsers add a bar across the top to indicate page loading progress (example: Firefox for Android)- some websites add a bar across the top to indicate how far you've read in an article- turbolinks adds yet another bar across the top to also indicate page loading progressI'm sure that using turbolinks is fine for people with fast Internet connections and certain types of websites/browsers, but it's terrible for usability in some scenarios.(`rails new app --skip-turbolinks`)	JoshMnem	12.770896	-6.5176606	comment	3.0	17.0	1514940487	7.6257653
16106777	Rails and Revenue: Building a Screen	Rails and Revenue: Building a Screencast Business	ChanningAllen	12.773189	-6.9265456	story	3.0	89.0	1515511535	12.334962
16827819	> It's not like my 3 years of experi	> It's not like my 3 years of experience in Ruby is immediately translatable to Java/Python/whatever.It should be.Picking up language X is very easy for most values of X (more esoteric ones excluded). After you know a few (and the more diverse the set, the less new concepts you'll see), picking up a new one is quick. If it is something like Go, it's a weekend's worth.Using the language in idiomatic ways and knowing the most useful libraries and frameworks does take more significant ramp-up time. If you are a solo developer, or if the entire team is ramping up at the same time, then it is bad.But a new, experienced team member, with zero knowledge in the most used language in the team? Sure, why not? They may even bring new skills to an otherwise homogeneous group.I always let the interview	outworlder	12.543263	-7.0270057	comment	3.0	10.0	1523604608	2.0506659
16838474	Ember is an incredible framework tha	"Ember is an incredible framework that's been carefully thought out by a team of super sharp people with loads of experience, and I'm constantly amazed by how quickly I can get real projects built using it. I've used it for many projects since ember-cli came out a few years ago. I feel about Ember for client-side projects how I felt about Rails for server-side projects—it made it fun for me again.But Ember gets a bad wrap from the internet because (admittedly) their marketing materials with the gooofy chipmunks make it look like a toy while React's make it look like you're learning quantum physics. And then there's the timeless ""convention over configuration"" divide where Ember people are generally on the left side, and React people just love the thought of fiddling around and hand rolling "	jeffkeen	13.110001	-6.442578	comment	3.0	18.0	1523728405	-15.513072
16873034	Did they hire a designer to do... th	"Did they hire a designer to do... this?Before people say ""OSS must look bad"" or ""It's a minimal style"", I encourage looking at https://www.djangoproject.com/. Aesthetically pleasing without sacrificing clarity, this website sets the standard for a technical project's homepage redesign.Boring and half-hearted UI's should be relegated to the likes of https://www.oracle.com/database/index.html than to a lauded and respected database like Postgres."	hitekker	12.850495	-6.500706	comment	3.0	11.0	1524106944	10.082594
16876600	> the task was to set up flask with 	> the task was to set up flask with two routesSetting up a web server is also a different skill than backend programming -- many experienced back-end programmers have never needed to spin up a new server for their job.	derwiki	12.768715	-6.5421214	comment	3.0	12.0	1524150955	10.01271
16906276	I think this is all well and good, e	I think this is all well and good, especially the compatibility with Flask. However, the biggest issue is the data access layer. Most flask apps will use an ORM like SQLAlchemy(SA) to create their data access layer.SA unfortunately, does not have a asynchronous version (its quite complex as it is). Therefore, I think it would require quite a lot of work, in order to actually get a standard flask app to work with quart.However, if you've built your data access layer directly on psycopg, then I think you're good to go.	gamesbrainiac	12.750078	-6.5678353	comment	3.0	11.0	1524509249	9.978064
16910627	Isn't the whole point of a hackathon	Isn't the whole point of a hackathon meant to be getting something quick and dirty up and running in limited time?I think using PHP warrants extra points for style.	jstanley	12.767213	-6.6312356	comment	3.0	10.0	1524555009	10.310917
16910673	PHP is great platform for prototypin	"PHP is great platform for prototyping, even better if you're experienced. I actually used PHP a lot for general purpose scripting and code generation because it was so easy and fast. Now I'm at node-land (I had no issues with PHP I just needed something with concurrency and PHP didn't have it at the time) for a few years but I still have great memories.Do what you want (and what makes you most productive) and don't care about others :-)BTW: What I especially love about PHP is its documentation, or sort of integrated stackoverflow. I can't remember any other platform having ""recipes"" integrated directly in the documentation (which in my opinion, is brilliant idea)"	cztomsik	12.747531	-6.5999756	comment	3.0	10.0	1524555622	10.31669
16910813	I always made fun of php. No reason,	I always made fun of php. No reason, I've never truly worked with it in depth and I'm also not the best JS dev. I never attacked a person for writing php I just mocked php itself. Even so, this made me feel bad and I'm going to change my attitude. Nobody should feel bad for doing something they enjoy. <3	mikedd	12.730633	-6.5794864	comment	3.0	16.0	1524557686	10.376118
16914006	> 1) Ruby is hard to get a job in, s	> 1) Ruby is hard to get a job in, so you are off to a rough start.Huh? Enterprise level companies are desperate for Ruby engineers to maintain large Rails apps and there still is a good amount of startups doing new work with it.	haskellandchill	12.711247	-6.9702144	comment	3.0	15.0	1524587049	12.363953
16914242	"I'm a ""Ruby engineer"" but tend to av"	"I'm a ""Ruby engineer"" but tend to avoid Rails teams because most of those large Rails apps are a giant pile of technical debt.  They're looking to hire senior talent to clean up the mess but aren't willing to make the organizational commitments needed to make that effort succeed.No thanks.Edit: My 'favorite' experience was the few months of consulting work I did with a team building Rails apps to deal with medical records and the app that I came into had tons of dead code paths that leaked HIPAA-regulated data all over the place.None of the API routes were 100% functional, so I spent my first few weeks cleaning that up and making it bulletproof.  Then I fixed their broken homebrewed SAML IdP.  None of that work that I did was appreciated as they only wanted (but wouldn't say that they want"	busterarm	12.750834	-6.9305367	comment	3.0	11.0	1524588366	12.362147
16918410	I don't mean promises; thunks are fi	I don't mean promises; thunks are fine, but don't solve the hard problems. I mean actions that start asynchronous processes such as fetching data remotely via XHR.In the end, such actions tend to be extremely similar. I tend to have groups of related actions that all such actions need. LOAD_FOO_REQUEST, LOAD_FOO_SUCCESS, LOAD_FOO_FAILURE, etc. A middleware can regex-match on the action name and count how many are in flight to render load progress. Similarly, errors can be caught that way.Idempotency is a bit harder. Often a load action has several dependencies (e.g. you want to load data based on a query and a limit) that need to be encoded in something that represents that request so that if another request is issued, it can be ignored if it's identical. This ends up being boilerplate, to	lobster_johnson	12.868545	-6.4803777	comment	3.0	11.0	1524626128	8.899307
16936771	Flask _does_ scale really well with 	Flask _does_ scale really well with lines of codes.  However the limitations of Python w.r.t. async log really start to show once you step beyond simple CRUD apps.	nicodjimenez	12.718659	-6.5655756	comment	3.0	19.0	1524783718	10.022325
16935913	This is epic. In theory now from V1 	This is epic. In theory now from V1 onwards it should be easier to convince people at big serious corps to use Flask as it cuts down a lot of Django bloat especially for smaller applications, microservices and other nimble backends.	jxub	12.744433	-6.546433	comment	3.0	21.0	1524777619	9.988276
16938130	It's bizarre there are few or no off	It's bizarre there are few or no offerings in that elusive middle ground. Rails & Django seems a little heavy. Flask & Express a little lite.I've never written an app that did not need user management, sessions, admin, db access, form processing, views/templating. Web2py is the best I've found (python).	pbreit	12.808118	-6.5013704	comment	3.0	10.0	1524797550	10.064846
16966307	> Unpopular opinion: I hate meta pro	> Unpopular opinion: I hate meta programming.As papaf asked, is it metaprogramming you hate, or bad metaprogramming?  Metaprogramming is just another tool in the toolbox, and hating syntactic abstraction (macros) makes as much sense to me as hating procedural abstraction (functions).  Yes, it’s easy to write bad syntactic abstractions, but it’s also very easy to write hilariously bad procedural abstractions, too.cbzbc states that metaprogramming is often harder to get write than functions.  I’m not certain that’s true; might it just not be the case that most programmers just don’t get very much experience with metaprogramming, since they’re typically using languages with very underdeveloped facilities for it?> A long time ago, I was freelancing Rails. I can't accurately describe the deflat	rauhl	12.586606	-7.071766	comment	3.0	11.0	1525176383	12.364985
16971946	A separate websocket server is a hug	A separate websocket server is a huge pain in any language. A great feature of Phoenix for Elixir is that the webserver and the websocket server are in the same process tree.I'll try this new approach for Ruby and see how it scales.	pmontra	12.722701	-7.1835423	comment	3.0	16.0	1525210721	12.811133
16980433	Best out of 5 times on my Debian tes	"Best out of 5 times on my Debian testing laptop for a ""hello world"", in order of worst to best:    ruby2.5:     83ms (-e 'puts ""hi""')
    python3.6:   35ms (-c 'print(""hi"")')
    python2.7:   24ms (-c 'print(""hi"")')
    perl5.26.2:  8ms  (-e 'print ""hi""')
    C (GCC 7.3): 2ms  (int main(void) { puts(""hi""); })"	avar	12.417286	-6.9878397	comment	3.0	14.0	1525289854	12.4555645
17005651	The thing that gets me about Erlang 	The thing that gets me about Erlang and Elixir is that it has transparent and simple to use microservices out of the box. These services are machine transparent, can be called locally and remotely, provide bounded contexts within your application, are robust and supervised against crashes, are simpler to deploy and far far simpler to develop, can be discovered using a variety of solutions or your own code. They also don’t require hundreds of containers interacting to work locally. I would go so far as to suggest that you shouldn’t build a microservices system without looking at the huge time, cost and complexity savings that Elixir or Erlang will give you.	andy_ppp	12.622928	-7.482102	comment	3.0	21.0	1525593759	12.936018
17011939	Core Erlang by Example	Core Erlang by Example	okket	12.547204	-7.5120425	story	3.0	241.0	1525693234	12.902409
17022180	This Is PHP Framework Written in C. 	This Is PHP Framework Written in C. It Is Simple, Fast, Standard, Security	fanjiapeng	12.751088	-6.604339	story	3.0	1.0	1525796865	-6.287236
17032529	This is really cool. Did you ever co	This is really cool. Did you ever consider an API to do the reverse - to insert a value at a particular point in the data?My interest stems from this issue[0] on the Ruby issue tracker to make a symmetrical method to Hash#dig (which does something similar to, but more limited than glom) called Hash#bury. The problem in the issue was that inserting a value at a given index in an array proved difficult and unnatural in Ruby, so I was wondering if there were other solutions out there.Another question occurs to me - does glom only support string keys?[0]: https://bugs.ruby-lang.org/issues/11747	faitswulff	12.406717	-6.983783	comment	3.0	10.0	1525890904	-5.429861
17048633	How is this different from elixir?	How is this different from elixir?	chewzerita	12.685301	-7.4623265	comment	3.0	23.0	1526056036	12.935097
17081259	My response to this is usually that 	My response to this is usually that Ruby is a great language because it's easy to get useful work done with a large, meaningful subset of the language.  You can ignore the warts just by not using them.  You can't do that in JS, because the warts are so fundamental.  (yes, you can be tripped up by library authors in Ruby, but there's community backpressure against providing footguns).	regularfry	12.570028	-7.002274	comment	3.0	10.0	1526466233	12.377745
17081361	The difference between the hostility	The difference between the hostility to php and the hostility to js is that there are many alternatives to php whereas, right now, if you want code to execute in the browser or on many different platforms, you don't have a choice. So where I would normally tell people who boo php to use whatever language they prefer, and get over it, that's not possible with js.	cm2187	12.63373	-6.489416	comment	3.0	12.0	1526467686	10.3013935
17083023	Hey, thanks for Ghost, seriously.I w	Hey, thanks for Ghost, seriously.I was looking to port over our homegrown django blog app into a proper blogging engine and I immediately though of Medium because of HN conditioning, and had so many problems with it, all of them boiling down to lack of control: No way to embed stuff we wanted (we wanted to embed interactive graphs and tooltips), no way to disable some bullshit features (highlight popups), no way to get our own domain name, etc.Ghost solved all this. And on top of that, it's markdown, which makes it just fantastic. And open source. And self-hostable. And you guys run a wonderful, exemplary foundation behind it. I have nothing but admiration for what you do, and I'm proud to be a paying client for it and recommend it to anyone for company blogs (it is unfortunately expensive	scrollaway	12.8008795	-6.450842	comment	3.0	14.0	1526483489	10.079665
17086224	Announcing TypeScript 2.9 RC	Announcing TypeScript 2.9 RC	pingec	12.414947	-6.8349404	story	3.0	19.0	1526502937	-10.536036
17100877	Also Java's Spring Data:https://docs	Also Java's Spring Data:https://docs.spring.io/spring-data/commons/docs/current/refe...Wasn't it an ActiveRecord thing to begin with? Spring got a lot of its more recent awful features by trying to copy Rails.	twic	12.753324	-6.8705087	comment	3.0	14.0	1526646808	12.309364
17103500	FYI All your subscriber's emails are	FYI All your subscriber's emails are accessible at https://whiteboardfree.com/email_subscribers.json since you didn't put any authentication on those endpoints. It's a basic Rails app so I'm guessing other users may got a hold of the list already.	slackoverflower	12.809277	-6.877881	comment	3.0	10.0	1526666233	12.327441
17121351	Thank you for the kind words!Regardi	Thank you for the kind words!Regarding companies that use Prolog, here are a few examples:A third of all airline traffic is handled by systems that run SICStus Prolog:https://www.sics.se/projects/sicstus-prolog-leading-prolog-t...A large portion of the New Zealand stock exchange is powered by Prolog:https://dtai.cs.kuleuven.be/CHR/files/Elston_SecuritEase.pdfOracle uses Prolog in the JVM specification:https://docs.oracle.com/javase/specs/jvms/se7/html/jvms-0-pr...IBM has used Prolog for natural language processing in Watson:https://www	triska	13.150615	-7.2827835	comment	3.0	13.0	1526932935	-12.567553
17124488	Prolog loses a lot of its magic when	Prolog loses a lot of its magic when you realize it's just DFS the language.	andromeduck	13.146549	-7.2979217	comment	3.0	11.0	1526978180	-12.490694
17128722	It tells us that a solo maintainer o	It tells us that a solo maintainer of a large project - with no assistance from the community possible, because closed source - trying to do it in his spare time, will eventually result in a massive accretion of technical debt.It's a testament to Graham's productivity that he was able to keep maintaining it for so long in spite of those disadvantages, and says very little about perl.	mst	12.3342285	-7.031846	comment	3.0	14.0	1527017414	13.188703
17131463	Also goodbye illguts then.Illustrate	Also goodbye illguts then.Illustrated guts is the description of the perl5 internals, in html and images. Metacpan still does not allow displaying it and I won't pay for hosting services.Static GitHub pages maybe, but how stable will that be, and it's another link away from the primary content. They knew of this problem for years.	rurban	12.340964	-7.0402155	comment	3.0	10.0	1527049417	13.186619
17133229	"Go ""T-shaped"".
In other words, be a "	"Go ""T-shaped"".
In other words, be a ""jack of [some] trades, master of [a few]"".Specifically, you almost have to choose modern JavaScript -- because you will need it on virtually any real project (it's everywhere), and you've already got the enterprise-y server-side covered. Don't get pigeonholed into backend-only, non-JS roles. Despite all the haters, es6+ is powerful and expressive.You'll want to suppress your OO habits though, and embrace FP as much as possible.Maybe get there by way of ClojureScript if you're up for it.  Good luck! Have fun!"	chrisweekly	12.437337	-6.4673367	comment	3.0	16.0	1527075280	-11.057801
17138285	I'm not an evangelist, so no. I don'	I'm not an evangelist, so no. I don't particularly care what you think about what I've experienced firsthand.Erlang is a language that doesn't have strings, for fucks sake. I'm sure something simple like parsing json is way easier and more convenient when dealing with lists of chars /sHonestly! BEAM is cool. I'll concede that point any day of the week. But a person who says erlang is suitable for modern web development is not living in the real world.An axe can be sharpened enough to shave with, but should an axe really be that close to your face?Edit: I did find an erlang lib called jiffy that has NIFs for pasting json. That's probably the least obnoxious solution to that particular issue, but my point stands that modern web demands a different model of problem solving than let-it-crash 9	qop	12.555068	-7.5172915	comment	3.0	18.0	1527109552	12.917305
17145171	> compared to Elm or ReasonMLPureScr	> compared to Elm or ReasonMLPureScript deserves a mention in this list as well. More full-featured and general purpose than Elm, cleaner design than ReasonML. Prolly the smallest community of the 3.	cies	12.555282	-7.5924497	comment	3.0	11.0	1527177027	-12.708438
17146352	The type system might be more powerf	The type system might be more powerful, my point is more that if you can bypass it and integrate directly with JS, then people will, and then much of that value is lost. Elm doesn’t have that problem.	danpalmer	12.97549	-7.6599555	comment	3.0	10.0	1527183565	-12.733677
17162761	I disagree that PHP does not have a 	I disagree that PHP does not have a consistent design. Since PHP 7 they have been intentionally removing all old PHP warts and pushing the language to real consistency. They even have an RFC process now for proposing new features from the community so they can be more responsive.It’s not statically typed like Go but it’s far from inconsistent IMO	no_wizard	12.716565	-6.728033	comment	3.0	11.0	1527350909	10.342277
17173136	Isn't Ruby known for these kind of i	Isn't Ruby known for these kind of issues?	k__	12.591152	-7.043751	comment	3.0	10.0	1527523592	12.368208
17174710	Is Prolog really used for medical-sy	"Is Prolog really used for medical-system software? It seems to me that it turned out to be the wrong path taken by Japan's Fifth Generation Project.In the early 80's I experimented with Prolog. Simple ideas were simply coded into programs; it was really very interesting. However, the need to understand the compiler's inner workings to get programs that ran efficiently by manually inserting ""cuts"" to limit backtracking ruins Prolog's claim to being simple to translate requirements into programs.An even more serious problem with Prolog is the simplicity of it's model for logic. It is very easy to end up with requirements in the real world that don't easily fit the model. See for example the SHOOT problem in [1], where the concluding sentence is:> As such, the claim implicit in the developmen"	todd8	13.152063	-7.296533	comment	3.0	12.0	1527540004	-12.486086
21029650	Ask HN: Is Spring still a good frame	Ask HN: Is Spring still a good framework for Java based web projects?	throwaway13000	12.73868	-6.5654273	story	3.0	3.0	1569003324	9.963127
21050910	> But rubyists would’ve loved C#.As 	> But rubyists would’ve loved C#.As a Rubyist, I'll admit that C# is the least bad of the C++/Java style of static OOP languages, but it was that it was always too tied to the .NET ecosystem and heavyweight enterprise tooling more than Microsoft's “supervillian role” with regard to FOSS that made it unattractive for lots of places where I would want to use Ruby. That's improved with Core, somewhat.	dragonwriter	12.509135	-6.930415	comment	3.0	12.0	1569258370	12.382291
21092439	Cool, but how does it help me reason	"Cool, but how does it help me reason about my code and maintain large projects? It doesn't even support typescript.
Sure, the components look okay in isolation, but what about the big picture?"	choward	12.378246	-6.736119	comment	3.0	11.0	1569594906	-10.517264
21094189	There is something close, even bette	There is something close, even better, when overall API design/architecture is considered, that is ember.js. Check ember-cli/embroider which angular-cli initially forked from. I give it 1.5 years for ember to pretty much dominate SPA development, In the last two years some people were laughing at me, now Im laughing at them.	izelnakri	13.106656	-6.440539	comment	3.0	18.0	1569605194	-15.5151825
21101004	As someone that writes Elixir at $DA	As someone that writes Elixir at $DAYJOB, I was really looking forward to replacing some JS with LiveView. However, after having used it for a simple feature, I'm not entirely sure if I will continue to use it. I realize it is still pre 1.0 and that there is still a lot of work being done on it.My biggest complaint is that if your server restarts for any reason (say, a rolling restart), you currently lose all state that was on the server[0]. There appears to be some kind of workaround for forms currently, but for anything more complex, I would need to write JS in order to attempt to not have my page get reset to the default view. So if I need to write JS already, I may as well just write JS (or something that transpiles or JS/WASM) to have fewer moving parts.[0] https://elixirforum.com/t/l	Ankhers	12.856515	-6.7575693	comment	3.0	19.0	1569685659	12.714614
21104061	While this discussion boils down to 	While this discussion boils down to the efficiency of the underlying regex engines for PHP and Rust, it does highlight (to me) why PHP is so popular: in the hands of average programmers, PHP is quick to write and fast (enough) to execute.I personally believe it's ubiquity is well-deserved, and I actually like it as a language despite all its quirks (which exist in almost every language I've come across)!	osrec	12.745305	-6.6511188	comment	3.0	79.0	1569716605	10.3466835
21112031	Although not in Erlang, Discord uses	Although not in Erlang, Discord uses Elixir which runs on the BEAM VM to much success as well for our real time distributed system as well as VOIP signaling components. Looking back years later - it’s safe to say we wouldn’t have chosen anything else.	jhgg	12.618115	-7.47268	comment	3.0	24.0	1569821731	12.888221
21112232	Erlang's advantage is being able to 	Erlang's advantage is being able to build a featureful, secure, scalable and performant enough communication backend in very little time and effort. This is a niche in which it can not be beaten.	rapsey	12.558145	-7.5120993	comment	3.0	21.0	1569824483	12.924685
21112359	Time/effort/security/performance, re	Time/effort/security/performance, really? IIRC the reasons to consider Erlang is purely to do with building a fault tolerant highly distributed system.	0xFACEFEED	12.537997	-7.518838	comment	3.0	10.0	1569826189	12.914131
21112448	To be fair though many Erlang progra	To be fair though many Erlang programmers also avoid hot loading code. For the rest, nice summary.	samvher	12.535974	-7.5069876	comment	3.0	15.0	1569827233	12.896364
21114972	Fairly blind question: does Erlang|E	Fairly blind question: does Erlang|Elixir and BEAM make any sense in a pseudo-embedded, edge compute or IoT environment with constrained resources (CPU and memory), or even ARM architecture?  Aside from the developer-side things, if AMQP were to the centralized communications hub (e.g. RabbitMQ) does using Nerves on devices make any performance benefit - meaning BEAM and app(s) there?The intent would be pre-process data and stream inward, or simply be a command-and-control interface -> process and provide response.	kitplummer	12.604543	-7.454875	comment	3.0	16.0	1569849189	12.894884
21115120	Saving Money by Switching from PHP t	Saving Money by Switching from PHP to D	pjmlp	12.777697	-6.6337843	story	3.0	22.0	1569850258	10.348817
21138422	Interestingly six of the top ten bui	Interestingly six of the top ten built on Ruby!Python is also strongly represented, but zero started with back-ends on Java, .Net. PHP, or other more broadly popular options.This is strong evidence that the startup world is dramatically different from that of enterprises and businesses where tech is ancillary (which dominate total numbers in popularly shared statistics). In many ways it's a vindication of PG's old essays. Though we're not all using Lisp, startups lean towards it.	AlchemistCamp	12.526012	-6.9603066	comment	3.0	26.0	1570034775	12.247523
21146069	"Agree with #1. 
I think Elm is proba"	"Agree with #1. 
I think Elm is probably the best functional language in this regard. Contains all the important bits yet is small and opinionated enough to be easily readable.If only weren't web only and run as a private project. An elm like language with llvm backend would be amazing"	rishav_sharan	12.893655	-7.610112	comment	3.0	10.0	1570104732	-12.713678
21171387	Well, what about this article? It cl	Well, what about this article? It claims I just have to understand 4 basic concepts to replace java, python and Ruby.Great, so using those simple properties let's reimplement Eclipse. Let me use tensor flow. Replace my Ruby on rail website.	CJefferson	12.518791	-7.0218563	comment	3.0	14.0	1570361989	12.297995
22842793	BS. Ruby isn't slow. The same apps c	BS. Ruby isn't slow. The same apps can be written in pretty much any language nowadays.The problem is in developers. They are slow and dumb and lazy and most often also biased. Blaming language is easy. Bad developer will always write spaghetti no matter which language he uses.	masa331	12.617198	-7.026603	comment	3.0	10.0	1586625640	12.360793
22842809	While it's still very slow, modern J	While it's still very slow, modern Javascript VMs are fast enough for many usages. Ruby is slow, but it could be a lot faster with a lot of time and money.	speedgoose	12.480532	-6.7941546	comment	3.0	15.0	1586625825	12.331256
22857314	typescript is just a language, how i	typescript is just a language, how is that a dependency? by that logic, nothing is dependency free.	W4ldi	12.340418	-6.742225	comment	3.0	16.0	1586795717	-10.424605
22897136	Same. I suffer through it, because t	"Same. I suffer through it, because the rest is pretty neat.There is no best way. Fortunately the Elixir core libraries are annotated with typespecs, which gets you like 30% there. But dialyzer sucks, and the typespec syntax itself, as well as its expressiveness, leave a lot to be desired. It's clearly an afterthought.One day I'm gonna make a TypeScript for Elixir.Note: There's eg Gleam a statically typed language for BEAM, but it's quite unlike Elixir and it has a much smaller community. https://github.com/gleam-lang/gleam. I doubt using eg Phoenix on Gleam is possible, or if it is, whether it's fun. It looks promising though, especially if you're into Ocaml/Haskell-style ""hard"" FP."	skrebbel	12.524512	-7.4386373	comment	3.0	11.0	1587111066	-12.346999
22898143	ioquatix (Samuel Williams, the autho	"ioquatix (Samuel Williams, the author) is doing tons of great work for Ruby at the moment. You'll want to check out, for instance:- https://github.com/socketry/async ""An awesome asynchronous event-driven reactor for Ruby""- https://github.com/socketry/falcon ""A high-performance web server for Ruby, supporting HTTP/1, HTTP/2 and TLS""I can recommend following him on twitter too: http://twitter.com/ioquatix"	thibaut_barrere	12.630759	-6.9432826	comment	3.0	13.0	1587123889	12.342013
22898505	In the linked article, the author al	In the linked article, the author also included some videos of himself implementing some of the presented parts e.g. exclusive Fibers [0], including writing the necessary C code using the Ruby C API.Recording yourself writing code and then publishing it takes quite a lot of courage, even moreso if it's a complex topic such as the one presented. Additionally, it's such a valuable resource: You can follow the whole implementation step by step.That's just awesome.[0] https://www.youtube.com/watch?v=cNaqbeagqUw	giu	12.588356	-7.048831	comment	3.0	10.0	1587127700	12.354195
22903398	"> What's that mean?""Concurrent appli"	"> What's that mean?""Concurrent applications"" as in the C10M problem (http://c10m.robertgraham.com/p/manifesto.html): servers serving a lot of clients at once; usually with the added assumption of a diverse request workload (i.e. some requests are IO-bound, some are CPU-bound, some are long, some are short, etc.)• WhatsApp used Erlang (on FreeBSD) to scale 50 engineers and ~1000 boxes to handling billions of chat-message transactions per second. (https://www.infoq.com/presentations/whatsapp-scalability/)• A lot of modern financial infrastructure (banks, exchanges, etc.) is built on Erlang. If there's a financial system that can get away with not being hard-real-time, chances are someone's considered writing it in Erlang.• Many massively-multiplayer games have Erlang in their backends or the"	derefr	12.504222	-7.499026	comment	3.0	10.0	1587161082	12.886559
22904481	A little disappoint that it doesn't 	A little disappoint that it doesn't have message passing, one of the most powerful weapons of the Erlang family. But the language looks clean and neat. I can understand it within couple of minutes	mshockwave	12.566585	-7.516179	comment	3.0	12.0	1587172115	12.919058
22906714	Mining for Malicious Ruby Gems	Mining for Malicious Ruby Gems	afrcnc	12.652541	-6.9928226	story	3.0	14.0	1587205628	12.359512
22904885	Nice! I’d imagine this is a much nic	Nice! I’d imagine this is a much nicer experience than dialyzer.If the author is reading is it possible to type message passing / processes? I couldn’t see this in the docs but i may have missed it	akst	12.470062	-7.3683515	comment	3.0	14.0	1587177317	12.918441
22905277	See also: https://github.com/purerl/	See also: https://github.com/purerl/purerl, an Erlang backend for PureScript, which is a lot more mature but unfortunately doesn't get the attention it deserves.	lelf	12.548017	-7.4581747	comment	3.0	10.0	1587183378	12.91527
22906950	Yes, but I mean we all got used that	"Yes, but I mean we all got used that ""Perl 6"" is a different language."	zerr	12.336849	-7.046115	comment	3.0	16.0	1587209174	13.177769
22907271	"They should skip ""Perl 6"" and go dir"	"They should skip ""Perl 6"" and go directly to ""Perl 7"", like Windows that skip ""Windows 9"" to avoid confussion."	gus_massa	12.362252	-7.0550356	comment	3.0	13.0	1587213137	13.192799
22949124	> Are many of the other languages yo	> Are many of the other languages you've used strongly typed? That's the thing that gives me pause - I feel like I rely on the compiler a lot in languages where it can do a lot for me, and that I'd be really frustrated managing a large project without it.As someone who has been writing Elixir professionally for 4-ish years, and who is otherwise about as big of a proponent of static types as is possible, this is simultaneously my biggest critique of Elixir, and also a critique that has ended up being more theoretical than not. I wish that it were statically typed, but in practice that hasn't been slowing me down.Part of the reason for that is that while Elixir is dynamically typed, I've found that it's possible to pretend it is a statically typed language if you squint just right. By that, 	QuinnWilton	12.458964	-7.440048	comment	3.0	30.0	1587582917	12.885439
22949529	To add to this, it's worth noting th	To add to this, it's worth noting that Elixir would have difficulty _ever_ becoming statically typed because of how message-passing works. For example, if you look at Gleam [0] -- the recent project that's trying to create a statically typed language for the BEAM -- it can't handle message-passing [1].And I totally agree with you here:> I've found that it's possible to pretend it is a statically typed language if you squint just right.My Elixir code tends to use a lot of pattern matching on structs. It's not real static typing, but it gets me a lot of mileage![0] https://gleam.run/index.html[1] https://gleam.run/faqs.html#how-is-message-passing-typed	scythmic_waves	12.5393715	-7.448829	comment	3.0	26.0	1587585345	12.908757
22949606	Hi, I'm the author of Gleam.We have 	Hi, I'm the author of Gleam.We have fully type safe message passing, we just don't have any special syntax for it. I'll update the documentation to make this clearer.	lpil	12.525445	-7.4477873	comment	3.0	11.0	1587585843	-12.335502
22950911	> When I say perfect, I mean, there 	> When I say perfect, I mean, there has been never once in my career where I hit a roadblock due to the language's limitation or complexity or flawed assumption. I faced this with other languages, but not Elixir.That is interesting.I've gone from Geocities pages to ASP Classic, PHP, WP, Rails, Flask and have been dabbling with Elixir and Phoenix for a bit.So far LiveView (and some bits of Elixir in general) has been the only time in my career where I felt like I'm seriously struggling hard to understand how things come together and how to solve real but fairly common web dev problems without asking for help (mainly with LV). I've had to ask for help on IRC / the forums an embarrassing amount of times. Where as with Rails and Flask almost everything except the most crazy problems were solva	nickjj	12.71268	-7.335188	comment	3.0	11.0	1587594614	12.897591
22955158	> 6. Maybe PHP Doesn’t SuckBeing a P	> 6. Maybe PHP Doesn’t SuckBeing a PHP programmer, I can concur: https://stitcher.io/blog/php-in-2020	brendt_gd	12.7623625	-6.639958	comment	3.0	38.0	1587644591	10.32464
22958100	>The same argument can be said of al	>The same argument can be said of all languagesAt least languages like Java and C# require static typing (though I'm sure there's some lazy sociopath out there writing C# with every single variable as a dynamic), PHP doesn't even have that minimum bar	HideousKojima	12.606857	-6.693786	comment	3.0	10.0	1587661181	10.325868
22979586	Me neither. I can't wait for Deno 1.	Me neither. I can't wait for Deno 1.0 next month.https://deno.land/	redmorphium	12.525769	-6.4534974	comment	3.0	13.0	1587835431	-11.000758
22994682	As a systems Erlang designer who wor	As a systems Erlang designer who worked for 2 of the biggest Erlang companies in the market, I can assure you that Erlang/OTP is not some magic pixie dust that suddenly makes all the distributed systems problems go away. Playing is one thing, making a reliable, fault-tolerant system is another.OTP doesn't give you _state of art_ distributed consensus algorithms out of the box.	h91wka	12.563125	-7.4639144	comment	3.0	11.0	1587984879	12.865094
23029001	> See bubble for example - https://b	"> See bubble for example - https://bubble.io . It’s basically “visual” Rails. The intention is to allow users to build complex, interactive software visually, without having to write code.Why the ""hate"" for code? I immediately understand the problems that typical programming languages have for people who are not trained in programming. But there exist good reasons why other approaches like ""visual programming"" have failed (except for some niches). So in my opinion the solution is not to ""spread hate"" against code for a ""stupid"" market pitch, but take the time to develop programming languages that are better suited to the needs of the customer."	wolfgke	12.434641	-6.934615	comment	3.0	13.0	1588238655	1.7185521
23030576	Traditional (non-SPA) web apps is wh	Traditional (non-SPA) web apps is where PHP is quite strong.Also depends on the team, if you have a PHP team and it's a web project, you probably want to use PHP.	The_Colonel	12.76313	-6.626678	comment	3.0	11.0	1588253517	10.323626
23030530	Matching Binary Patterns with Erlang	Matching Binary Patterns with Erlang	StreamBright	12.327026	-7.426979	story	3.0	51.0	1588253222	-9.711533
23032178	If I remember correctly I found a fe	"If I remember correctly I found a few edge cases, but they weren't ever hit by OTP, just by partially implemented VMs like mine :)It was kind of interesting exploring the OTP internals, especially some of the parts that haven't changed in a long time. One example is the PAM: I think it stood for ""patrick's abstract machine"" and it would compile erlang terms into bytecode for pattern matches (intended for fast ETS lookups). It's all there in one file and it took a fair bit of digging to figure out how it works since it's been static for a long while and nothing on the internet really documented it."	archseer	12.569961	-7.471972	comment	3.0	13.0	1588261864	12.899569
23033447	We do a lot of Erlang work here. The	We do a lot of Erlang work here. The BEAM is so reliable that I wouldn't spend 1 minute looking at an experimental alternative.	fortran77	12.538037	-7.469847	comment	3.0	23.0	1588267630	-9.012719
23060643	Ask HN: Use Cases of Elixir's Agent 	Ask HN: Use Cases of Elixir's Agent vs. Process vs. Task vs. GenServer?	fdeage	12.608509	-7.4489627	story	3.0	3.0	1588528321	12.925957
23077131	> I hope that RoR stays strong amids	> I hope that RoR stays strong amidst the current React/SPA framework/Node fad.Fortunately, rails has solid support for API only rails apps. Jbuilder is pretty great. In my experience, there’s still nothing in the node ecosystem that rivals ActiveRecord’s maturity.	nerdwaller	12.725761	-6.928839	comment	3.0	16.0	1588660287	12.377524
23077621	I've worked with PHP since 5.4, and 	"I've worked with PHP since 5.4, and to me the language has not been the obstacle, it has been my own skill-level that has held me back, and still is - I lack very much the core architectural skills in getting forward as a developer, among many other things.I've seen some codebases using an even older version, and I think I can understand where people are coming from with their angst towards the language - but I think we should look at ourselves before we jump to the bandvagon of just hating something blindly - I remember being part of the ""Apple sucks"" group for no other reason than hype, and now I've used one for years as a work machine."	tommica	12.75282	-6.639267	comment	3.0	19.0	1588665749	10.327706
23077659	I've been using PHP for over 15 year	I've been using PHP for over 15 years and always liked it. There is no other webserver language that's so easy to use and so deployable while still being fast.But for larger projects the available frameworks are just okayish. I think Symfony is closest to what a good framework should be. But every time I use it I wish it would be like .NETToday .NET core is also available on Linux and very easy to deploy so I don't think I will ever start a big project in PHP again.But for quick smaller and CMS[1] projects PHP is still my goto language.[1] If you are looking for a great PHP CMS: https://processwire.com/	thdrdt	12.756032	-6.6071978	comment	3.0	13.0	1588666141	10.312545
23077905	Alas, I feel the same way. After muc	Alas, I feel the same way. After much thought this weekend, I concluded that it was time to move on from PHP. I decided against the any other scripted language (Ruby, Python), as it felt like more of the same.Requirements were strict typing, functional programming support, built-in concurrency, decent library support, and real support for both native and Javascript. It pretty much came down to Kotlin or Rust.I really want to like Rust more, but the library support, and the jobs in my area just aren't there (yet?).Picking up Kotlin feels like coming home.	solraph	12.526907	-6.7611036	comment	3.0	11.0	1588668724	10.244362
23078146	Other languages haven't caught up on	Other languages haven't caught up on PHP about ease of deployment.If you need a fast hot reload, it isn't trivial in other languages. PHP does it with no effort. Save and refresh runs the updated code instantly, not to mention asking people to run PHP app is far easier as every general hosting provider has PHP installed.On the other hand, language structure is quite behind others but can't blame when it had been around since 20+ years ago.The new type hinting is so basic, not sure how realistically useful it is compared to typing in TypeScript.	mekster	12.67394	-6.651295	comment	3.0	15.0	1588671393	10.321335
23078199	Symfony is an outstanding framework 	Symfony is an outstanding framework and a real pleasure to build with.	tudorw	12.777864	-6.633285	comment	3.0	16.0	1588671920	10.328163
23078466	PHP isn't being replaced by Rust or 	PHP isn't being replaced by Rust or Go. It's being replaced by Medium, Wix, and Squarespace.At this point, the predominant reason it's still undergoing active development is that there is a metric ton of legacy PHP code. As the businesses still using it either mature, evolve, or fail, the need for PHP will begin to dry up.You're defending the language from an emotional standpoint.> choosing php for a new project is a no-brianer. The only other 2 stacks to which I can compare it are the Spring stack of Java or .NET coreThis is absolutely not the case, and you know it. Almost every language has a wealth of HTTP tools and frameworks, and many of them come built-in.Choosing PHP will be like choosing Python 2. In fact, that's my 2030 prediction.	echelon	12.744281	-6.6479883	comment	3.0	39.0	1588674803	10.380365
23078766	Ruby on Rails.Django.Revel.Actix.	Ruby on Rails.Django.Revel.Actix.	echelon	12.776325	-6.7920814	comment	3.0	16.0	1588677504	-10.545956
23078224	I can't really understand the hate t	"I can't really understand the hate towards php in general, never was able to understand it.
I started programming in PHP and then moved to c# and now mostly JS, but never really understood the motivations behind people bashing on PHP. Like, some of my friends that today mostly program in React/Nextjs praise the framework as something amazing and the SSR as something really innovative, and - honestly - it resembles PHP more than ever, but if you ask them about PHP they will immediately say it is a ""bad language"" and ""a joke"".
Laravel, as you stated, is a really amazing framework, but some people are carrying baggage from the time of PHP4 or something even older and never really tried to see current/modern PHP and some other people just built their idea of the language around it because it w"	jackofalltrades	12.785643	-6.6403756	comment	3.0	24.0	1588672106	10.340245
23079031	RoR and Django are probably the clos	RoR and Django are probably the closest (Laravel was inspired by RoR). Still, I don't think they support all those features.Like I can't find any official RoR support for payments, full text search, encryption, pagination, scheduled tasks or building CLI commands.With Django, full text search seems limited. It supports PostgreSQL, but I couldn't find first-party integration for Algolia, Solr, Elasticsearch etc. or a generic way to add backends (pluggable drivers) for them. There's support for WebSockets through Django Channels, but it seems a lot more basic than Laravel's broadcasting system. No official support for queued jobs or schedules?Revel doesn't seem to have support for building CLI commands, encryption, emails, pagination etc. Apparently, any kind of database access or ORM isn't 	AegirLeet	12.7796	-6.661472	comment	3.0	13.0	1588679693	10.381063
23080777	I haven't had your same problem and 	"I haven't had your same problem and I've been working with Ruby for the last 8 years. I've also deployed Go, Python, Elixir, and Javascript to production. Here are my thoughts on Ruby in 2020:Ruby, between versions, doesn't have many breaking changes, if any. They're more additive changes than they are subtractive. That obscure gem that has a last commit date of 2 years ago? Probably still works. Bundler complaining the Ruby version isn't supported in the gemspec? Fork, edit, push, bundle, success.When you say basic stuff, I think of ""busy work that's already solved by someone else, probably in a more complete than my half-assed attempt would be just so I can focus on more domain-specific problems and implement business logic."" That's a fine tradeoff. My clients don't pay me to implement t"	joshmn	12.672363	-6.8957143	comment	3.0	16.0	1588691138	12.36375
23080741	Go and Rust were designed for other 	Go and Rust were designed for other things... why wouldn't you compare it to the big language that was actually designed to compete in the same space as PHP? NodeJS.Front end devs are already programming in JS, so there's less adoption cost than PHP. I can't think of a single reason to use PHP over Node (I know both, and have delivered projects in both).The comparison to .Net and Spring makes me think you might be a bit behind the curve. Have you tried Node?	rgbrenner	12.605906	-6.7323174	comment	3.0	14.0	1588690956	10.212892
23080878	I think you're missing a third group	"I think you're missing a third group of PHP haters that's actually a majority: those who've used PHP, sometimes extensively, and built up a backlog of ""this is stupid"" bits in their head about it. They don't have deeply reflective reasons or a strong theoretical basis for hating it, they've just suffered with it for a good while, found some better alternative, and are now sceptical that any amount of improvement will be able to outweigh the friction they ""know"" will be there if they try to come back.So the anti-PHP feeling for this group is broad but shallow.  Here's what I think is interesting: JavaScript is here right now.  Like PHP, it's incredibly popular, almost mandatory to know in some degreee, and using it for any length of time causes one to build up a catalog of ""WTF?"" and workar"	fatbird	12.730706	-6.5601315	comment	3.0	10.0	1588691615	10.317703
23081104	Can you attribute that specifically 	Can you attribute that specifically to PHP making that possible? Why couldn't an equivalently capable peer use Python to do the same?	evilduck	12.661293	-6.661357	comment	3.0	12.0	1588692688	10.347958
23081234	I think there is a huge difference b	I think there is a huge difference between web sites and web applications. Most large applications today uses SPA and an api. The api can be done in any backend language and there is not many obvious benfits of using php but some clear drawbacks.If you just want to create a web site quickly then php works fine but on the other hand you can do it quickly with js, c# or Typescript also.	jbergens	12.748097	-6.618711	comment	3.0	11.0	1588693348	10.310768
23085037	Aw and you went to coding school to 	Aw and you went to coding school to learn Ruby of Rails for the IPO and are now stuck with an irrelevant skillset.AirBnB is the only reason the bay area uses Ruby. All those startups stuck maintaining old code bases can only find talent because of attrition or rejects from AirBnB.	vmception	12.694169	-6.9909306	comment	3.0	10.0	1588712621	12.369802
23100508	This looks absolutely fantastic!!For	"This looks absolutely fantastic!!For some reason I assumed Deno was an ""experimental"" project, didn't realise it would be released so soon.* Use TypeScript without transpilation* Need explicit permissions for filesystem, network etc* Extends JS standard library with useful modules like fetch, logging etc* Builtin tooling like test runner, formatter etc"	rkwz	12.483874	-6.4445176	comment	3.0	10.0	1588835269	-10.918543
23123003	I once saw someone suggest using PHP	I once saw someone suggest using PHP as a C preprocessor, which is hilarious in a way.	cozzyd	12.5991745	-6.6629286	comment	3.0	10.0	1589010669	-7.1934977
23146063	I just could not deal with such an o	I just could not deal with such an opinionated tool.   ESLint would not let us adjust settings to accept some of our normal convection's and company code style guidelines.I switched to jshint and have lived a much happier life.	PretzelFisch	12.328993	-6.5301228	comment	3.0	14.0	1589225823	-10.40144
23153147	Convention over configuration is one	Convention over configuration is one of the worst ideas ever in software in my opinion. All it means is that you have to memorize all the implicit assumptions about how an app is put together before you can work productively. It makes for great convention talk demos but in production what you really want is very explicit and obvious relationships between pieces. For example, this is the reason I find a React/Typescript codebase vastly easier to understand than Rails.If your language is so verbose that making things explicit is too painful then maybe it's time to reach for a more expressive language instead of hiding everything behind a set of implicit rules.	cageface	12.702758	-6.857547	comment	3.0	13.0	1589286212	12.344012
23168122	I’ve been out of the Erlang world fo	I’ve been out of the Erlang world for a few years now, but it doesn’t seem like a great fit for serverless. The VM has a non-trivial overhead, and the language (and VM) design is optimized for long-running, high availability services.	macintux	12.550666	-7.466193	comment	3.0	10.0	1589385075	12.851133
23168094	I've wanted to work with Elixir for 	I've wanted to work with Elixir for 5 years now. I attempted to go through The Pragmatic Programmer's Elixir textbook and couldn't make it through. This comment applies solely to me, I feel I didn't have the aptitude to pick up functional programming (and that's coming from someone who graduated in CS from a T3, had years of experience, and starting med school next month).	organicfigs	12.68684	-7.4410515	comment	3.0	13.0	1589384950	12.92252
23171962	Am I correct in saying that function	Am I correct in saying that functions written in C do not get pre-empted like Erlang functions?  If that is true, you could write computationally intense code in C within a BEAM app.  But I think this misses the point.  Pre-emption is really cool for concurrency abstractions, and the trade off is being less good at single threaded computation.  Trying to turn Erlang into something like a Bitcoin miner is kind of like combining a bunch of Roombas to make a Shop-Vac.	PopeDotNinja	12.499711	-7.5093923	comment	3.0	15.0	1589404851	12.919278
23173136	>> Internally Deno uses Microsoft's 	>> Internally Deno uses Microsoft's TypeScript compiler to check types and produce JavaScript. Compared to the time it takes V8 to parse JavaScript, it is very slow.>> We certainly think there are improvements that can be done here on top of the existing TypeScript compiler, but it's clear to us that ultimately the type checking needs to be implemented in Rust.Funny, I was just talking about something like this in an earlier TypeScript discussion today. I was saying that I don't understand why Microsoft doesn't have their own native TypeScript runtime engine by now.I have nothing against TypeScript as a language but I hate the TypeScript transpiler; it should be packaged as an engine, not as a transpiler. I just hate having to debug mangled transpiled code and dealing with sourcemaps. I wa	cryptica	12.397296	-6.656168	comment	3.0	12.0	1589412754	-10.466587
23173415	You'll like https://www.npmjs.com/pa	You'll like https://www.npmjs.com/package/ts-node - it allows zero processing use of typescript	gunn	12.389348	-6.612624	comment	3.0	13.0	1589414680	-10.439145
23174076	I guess I'm wondering why Deno is ta	I guess I'm wondering why Deno is targeting V8 instead of Servo?  Maybe I'm mistaken, but Servo [0] and Stylo [1] are both production-ready browser scripting and styling engines implemented in Rust.[0] https://servo.org/[1] https://wiki.mozilla.org/Quantum/Stylo	VWWHFSfQ	12.458974	-6.4737415	comment	3.0	10.0	1589419365	7.1216497
23174745	> This will invalidate the arguments	> This will invalidate the arguments for Erlang concurrency model.What about failure domains?  As far as I'm concerned, this is the strongest reason for actor-based concurrency.  I can design my architecture so that groups of processes that need to die together die together.  And it's usually one or two lines of code, if any.Here's a real life example.  I have a process that maintains an SSH connection to a host machine, and that ssh connection is used to query information about running VMs on that host machine.  If the SSH connection dies, it kills the process that is tracking the host machine, which in turn kills the processes tracking the associated VMs, without perturbing any of the other hosts' processes or vms.  This triggers the host process to be restarted by a supervisor, which th	dnautics	12.411811	-7.5058136	comment	3.0	11.0	1589424694	12.878034
23183091	The article doesn't even discuss ben	"The article doesn't even discuss benchmarking Ruby against other languages, so I'm not really sure what you're on about. Couldn't resist taking a performance jab at Rails?Also, I'll take ""double the hardware specs"" if it means I'm actually able to focus on what I'm building and not dicking around with devops or rebuilding all of stuff Rails metaprograms for me by hand.If there was a framework for being as productive as Rails at half the cost then it would be flourishing. There isn't and as a result Rails isn't going anywhere any time soon."	mindfulmore	12.684591	-6.9680257	comment	3.0	41.0	1589479440	12.355416
23183379	Stop painting ruby as slow. In bench	"Stop painting ruby as slow. In benchmarks i've seen it's handily beat out PHP, which still runs much of the web. the ruby 3x3 goal, of getting running super mario at 60FPS, was if i recall correctly, already reached (or close to it) in ruby 2.6. https://developers.redhat.com/blog/2018/03/22/ruby-3x3-perfo...additionally:
> Sinatra + Sequel is already very competitive in web performance with Go
> Between Ruby 1.8 and 2.5, performance has improved around 13x in tight loops[2]. The Rails performance issue has been massively overblown since 1.9 was released.https://news.ycombinator.com/item?id=17220967"	meesterdude	12.645096	-7.037135	comment	3.0	21.0	1589480847	12.353988
23183911	I wish we could just take Ruby, scra	I wish we could just take Ruby, scrap it, and as a community replace it with Crystal Lang	sealthedeal	12.626048	-7.2416673	comment	3.0	14.0	1589483092	-11.248095
23185577	> And yet Phoenix hasn't stolen a si	> And yet Phoenix hasn't stolen a significant amount of market share from Rails.I thought we all learned popularity does not correlate with quality. It correlates pretty closely with corporate inertia and perceived lower risk of developer churn though. Businesses love tech stack for which there are bigger pools of programmers. Says nothing of the quality of the stacks.> If you're measuring hardware loads and busting out your stopwatch to measure response times, then sure.Needlessly snarky. Response times matter in a lot of businesses. Count yourself lucky that it hasn't been an important metric in your work.> Have fun writing Ecto queries by handI do have fun writing those. Most times the code in my functions ends up more readable than the equivalent Rails code I wrote years ago. There are	pdimitar	12.814434	-6.9998546	comment	3.0	31.0	1589490957	12.488974
23186453	Shopify is an insanely huge e-commer	Shopify is an insanely huge e-commerce platform (and a $100B company). I'd say their developers are pretty productive with Ruby on Rails.	pdog	12.745602	-6.931165	comment	3.0	10.0	1589495993	12.347263
23186777	If you want the luxury of scale prob	"If you want the luxury of scale problems down the road you do RoR until you lock down that first couple billion dollars of valuation. Just ask Stripe, Github, AirBnB, Gusto, Shopify, Coinbase, Dropbox, Twitter, Door Dash etc. Then you can have the ""problem"" of picking the wrong language. Massive survivorship bias in the panning of Ruby/RoR IMO...Also the Ruby/RoR community and culture is better than most other languages/framework. I think culture is a totally valid performance reason to pick a language. Sure there are faster languages and there are jerks everywhere but on average it seems RoR devs are on average nicer and more collaborative people relative to peers.There is a just a mindset for wanting to write in a language optimized for developer happiness that dovetails with wanting to "	pcmoney	12.700161	-6.97318	comment	3.0	11.0	1589498007	12.310832
23187513	It is surprising until you realize t	It is surprising until you realize that Rails' ActiveRecord consistently wastes 100-200ms on every request just to serialize / deserialize data from/to the database.So yes, a language that's both faster and has less overhead in its ORM / DataMapper library definitely will help you.	pdimitar	13.048245	-6.5214024	comment	3.0	20.0	1589502702	12.267261
23197482	I recall when we first adopted Coffe	I recall when we first adopted Coffeescript, the engineers who did it touted that we had about 20% fewer lines of code as an example of coffeescript being better - a lot of which was probably just the removal of lines that only had curly-braces.  In hindsight, this wasn't a good metric to judge the language on.As a larger engineering organization, what we've definitely learned over time is that we need to prioritize readability (and maintainability) over writability - as our code is going to last a long time and the original engineer who wrote it, will likely move on to another project, team, or even company.  And while maybe they train their replacement, after a second or third iteration of that, the knowledge can easily end up lost.Coffeescript, as a language, definitely prioritizes ters	dgoldstein0	12.401644	-6.5859528	comment	3.0	35.0	1589577178	-10.520964
23198189	I worry about the long term viabilit	I worry about the long term viability of using an offshoot language of Javascript such as Coffeescript or Typescript. These types of languages have a habit of falling out of vogue and basically becoming a dead language, which is exactly what happened to coffeescript. If a company decided to write an app in coffeescript in 2010, today they have a big pile of code written in a dead language on their hands. If instead the company had chosen a mainstream language with a guaranteed future such as JS, Java, or c# it wouldn't be an issue.	fourseventy	12.393095	-6.558986	comment	3.0	10.0	1589581177	-10.480899
23201841	PHP 8 in 8 code blocks	PHP 8 in 8 code blocks	brendt_gd	12.776109	-6.6775837	story	3.0	5.0	1589620711	10.342681
23212491	Why is Ruby so popular here at Hacke	Why is Ruby so popular here at HackerNews, I just don't get it!	SydneyPumpkin	12.641798	-7.039238	comment	3.0	10.0	1589727863	12.391063
23212819	Thanks for doing this. I have a few 	Thanks for doing this. I have a few questions regarding packages/dependencies, and TypeScript in general.I tried installing Deno, and I tried including a package, and immediately the TypeScript typechecking in my IDE (VSCode) failed, of course. The IDE doesn't know what to do with a URL as a dependency. Is this something Deno will be able to handle?The next question is that TypeScript packages I have written in the past use `baseUrl` and `paths` in their own configs to allow for absolute import paths. When I look at third-party Deno repositories, I didn't see any that were building out to JS/declaration files, and were instead just meant to be included as the original TypeScript source code. Won't this break things like absolute import paths and other behaviors of the dependency's own tsco	ralusek	12.430685	-6.4479747	comment	3.0	10.0	1589731083	-10.817258
23213463	What would a good liveness and ready	What would a good liveness and readyness probe do for a rails app? What kind of work and metrics would these 2 endpoints do in my app?	config_yml	12.793565	-6.890693	comment	3.0	11.0	1589736023	12.38509
23235248	Yes. Logic wasn't conjured up from a	"Yes. Logic wasn't conjured up from abstract ideas, but from a concerted effort to distill the essence of what humans (regular, average people) find reasonable and convincing. (To mention just one example, there is a reason one of George Boole's major works is called ""The Laws of Thought"".)Our strategies for understanding language also involve inference and unification that is similar to logic programming. This is not to say the exact semantics and evaluation strategy of Prolog is what humans carry around, but part of our cognitive apparatus clearly operates in a manner similar to logic, and by extension Prolog.I discussed this topic with one of the inventors of Prolog recently: https://thesearch.space/episodes/1-the-poet-of-logic-program..."	felixyz	13.102812	-7.2757587	comment	3.0	13.0	1589898603	-12.444445
23234716	I have used Prolog in a few professi	I have used Prolog in a few professional projects.I think if they came out with a version in hardware like they use to have lisp machines,  it would have much better performance.	tmaly	13.134825	-7.285612	comment	3.0	11.0	1589895386	-12.476212
23236878	Kind of offtopic, but does anyone kn	Kind of offtopic, but does anyone know a good resource around implementing a simple prolog/similar language? My previous attempts at learning logic programming have failed, and it just _feels_ like a thing that becomes clear after you've seen how it works under the hood.	badtuple	13.134945	-7.288126	comment	3.0	10.0	1589906134	-12.469965
23250554	The BEAM is a huge win: having light	The BEAM is a huge win: having lightweight threads means you can often do away with things like Redis for job queues and PubSub stuff. I love this answer on StackOverflow by Elixir's creator:https://stackoverflow.com/questions/32085258/how-can-i-sched...So simple. Something that would require a job queue and a job runner fades away into a piece of the OTP application tree. When it crashes, it will even come right back up!Phoenix feels a little too heavyweight for really small projects—maybe I'm spoiled having used Mojolicious's [0] single-file web servers. (Example on the linked page.) But for anything slightly larger, Phoenix scales really well. I work on a decently-large application in Phoenix for work and it's been an absolute joy to work with this langauge.Typing could be better. Thoug	ashton314	12.761617	-7.2109747	comment	3.0	20.0	1590001791	12.835962
23250655	> 1. Ecto is simply the best DB libr	> 1. Ecto is simply the best DB library I've encountered in any language. I'd almost recommend learning Elixir just to be able to use Ecto.It's interesting, people always talk about Phoenix, which is nice, but Ecto is really special. I often recommend it to anyone who is feeling burned by Active Record implementations.	ch4s3	12.73485	-7.2415395	comment	3.0	14.0	1590002406	12.854147
23251422	There is no web framework out there 	There is no web framework out there which comes with such  elegant concepts, syntax and feature-richness like Laravel. I have seen them all - Laravel is incredibly good, especially for small - mid sized projects! And this statement comes from a python guy.	karxxm	12.774431	-6.59065	comment	3.0	12.0	1590006727	10.324769
23251158	Free Elixir/Phoenix LiveView Course	Free Elixir/Phoenix LiveView Course	gstipi	12.841387	-7.0785794	story	3.0	92.0	1590005241	12.776708
23254458	This is one of the primary reasons m	This is one of the primary reasons most people hate PHP.  Let me ask a simple question:  What does the documentation for your homegrown framework look like?  Having worked for several organizations that decided to roll their own framework in PHP, it is an absolute nightmare. No one else knows how it works or how to use it and it usually comes with no documentation. Furthermore, you don't get any updates or bug fixes unless you write them, taking time away from working on the project that is being held up by your homegrown solution. There are plenty of fast, low bloat, PHP frameworks to choose from: Phalcon, Slim, Luman and Silex just to name a few.  I guarantee they all have better documentation and support.  If you need some custom functionality, extend one of these existing solutions to 	kwhat4	12.765561	-6.6336746	comment	3.0	15.0	1590030521	10.33547
23284008	One counter point to elixir is that 	One counter point to elixir is that there's a significant learning wall to onboard new developers, more so than simpler a language like Go or Python.	flaque	12.653787	-7.453371	comment	3.0	20.0	1590249718	12.922871
23284141	Because of it's magic.Debugging it i	Because of it's magic.Debugging it it a nightmare especially when you have to roll up your sleeves and go into Erlang.	nojito	12.558516	-7.5224295	comment	3.0	10.0	1590250602	1.9150935
23284167	> I'm a bit confused by this comment	"> I'm a bit confused by this comment. Having used both Ruby and Elixir (more Ruby) both languages have type systems which are quite capable of modeling domains[1]. They lack static type checking, but I find that a thorough test suite catches most type errors anyway.Most of this is incorrect, both for and against your argument. Elixir has a very incapable and incomplete type system. It's optional but can be checked via `dialyzer` but never confidently and exhaustively checked because `dialyzer` will sometimes plain not work, sometimes be foiled by bad library specs and sometimes fall back to ""Everything must be OK because I can't prove this incorrect"".All in all it's not a useful substitute for a real type system used to model things.Type specs aren't useful for domain modelling but serve m"	59nadir	12.33117	-7.344909	comment	3.0	13.0	1590250822	12.788276
23284249	Our Ruby / Rails agency tried implem	Our Ruby / Rails agency tried implementing a project in Elixir. After 3 weeks we stopped the experiment and re-did everything in Ruby.What stopped us was not so much the lack of libraries, but programming ergonomics. E.g. when using keyword lists for function options, callers need to pass the keywords in the exact same order. Also mocking was difficult in tests.Elixir is a great project with a friendly community, it just didn't work for us. YMMV so by all means try it out if you're interested!	triskweline	12.700963	-7.375069	comment	3.0	16.0	1590251313	12.86636
23284304	Right tool for the right job, I thin	Right tool for the right job, I think. I’ve had absolutely wonderful experiences with Elixir doing web apps (both LoB style and SaaS style). Probably the best one, and it’s such a canonical example, is a group chat app using Websockets. It just feels so good, and with libcluster, multiple nodes in K8s can autodiscover and join each other. No problems at all having chats where the members are connected to websockets on different nodes; everything mostly Just Works.On the flip side, I prototyped out a drone flight controller in Elixir thinking that the “fail and restart” portion would be awesome for reliability (if the RTK receiver craps out and restarts, no big deal, the EKF can just fall back to using the IMU until the RTK is back online). That part of it all worked great, but doing real-t	tonyarkles	12.656838	-7.399663	comment	3.0	20.0	1590251711	12.814224
23285666	I’ve played with Elixir/Phoenix a li	I’ve played with Elixir/Phoenix a little bit and was not very happy with a few things:- Debugging is hard. You can’t throw a REPL wherever your want in your code and pipe states are hard to inspect.- Serving static files in Phoenix is oddly super hacky.- Deploy is hard. Mostly by the lack of support out there in term of documentation and services.	hartator	12.768582	-7.2629914	comment	3.0	12.0	1590262140	12.859539
23285921	Your comment was so spot-on that I s	Your comment was so spot-on that I suspected we worked at the same company for a minute.Erlang / Elixir are languages that are easy to begin learning, but difficult to master. In our case, the team was able to get the basics up and running quickly, but the service became increasingly difficult to manage as our product requirements expanded beyond the strengths of the Erlang ecosystem's core competencies.In our case, the original team of developers was excited to write a greenfield service in Erlang, but much less excited to maintain and scale it long-term. Some of them used their experience to speak at Erlang conferences, which led to them being recruited away by companies who were desperate for Erlang developers to maintain their legacy code after the core team left. Ironic.At first we tr	PragmaticPulp	12.629087	-7.486827	comment	3.0	16.0	1590264434	12.925657
23310496	Show HN: Kiba Pro v2 – Commercial Ru	Show HN: Kiba Pro v2 – Commercial Ruby Extensions to Kiba ETL	thibaut_barrere	12.595507	-7.008059	story	3.0	55.0	1590497715	12.374292
23322880	To me there's a sliding scale betwee	To me there's a sliding scale between productivity, where you use a heavy framework like Django and Rails to do everything for you, and control, where you write boilerplate to stitch all your favorite single-purpose libraries together using your preferred patterns.They each have their purposes. Django will get you to market fast with all the features you need, and keep you there for a long time. But it forces (through its library structure) and encourages (through its common patterns) ridiculously tight coupling.I work on a Django Monolith now that runs an org needing to grow beyond it. We need something not quite offered by a Django library, or we need to move something with different scaling needs out to another service - it's all miserably difficult, because they followed all the Django	skrtskrt	12.837	-6.521804	comment	3.0	18.0	1590586328	10.044519
23345177	> The Deno CLI works like a browser,	> The Deno CLI works like a browser, but for code. You import a URL in the code and Deno will go and fetch that code and cache it locally, just like a browser. Also, like a browser, your code runs in a sandbox, which has zero trust of the code you are running, irrespective of the source.Guessing it uses containerization or virtualization, hopefully with no gaps in security.	paulryanrogers	12.486281	-6.4395156	comment	3.0	16.0	1590714447	-10.948533
23359094	I worked the opposite way round. I b	I worked the opposite way round. I built my own custom PHP frameworks for each project for 15(ish) years until Laravel and then I was finally convinced it was better to use someone else’s framework than mine.I liked doing it this way round because when I did Finally use a framework I had a pretty good idea of how it was all put together and also really appreciated the elegance and design choices they had made.I’m not sure I would have appreciated it so much if I had started out with the framework and not learned all the things it takes to build one under the hood.	jv22222	12.790165	-6.614737	comment	3.0	13.0	1590821545	10.331105
23359529	True, but the alternative to C++ wit	True, but the alternative to C++ with that reasoning is Rust or Go (depending on your liking), not Ruby. And with both of these you can step around a lot of deployment issues, because a single server can be sufficient for quite high loads. Avoid distributed systems as much as you can: https://thume.ca/2020/05/17/pipes-kill-productivity/	Perseids	12.634136	-6.9827447	comment	3.0	13.0	1590827613	12.346792
23360840	Yeah and the Perl 5 to Perl 6 move..	Yeah and the Perl 5 to Perl 6 move... oh wait...	aryonoco	12.331258	-7.0400963	comment	3.0	12.0	1590843496	13.16859
23368033	PHP and Javascript both improved sig	"PHP and Javascript both improved significantly, but both still have horrible legacy baggage that can't be rid of, namely weak typing (not dynamic, where a variable can hold any type, but weak, where ""1""+2=3). For me, that makes programming in either language like running in a minefield. And still, I write Javascript daily, because myeusers don't care about weak typing :-)"	SonOfLilit	12.577233	-6.5625563	comment	3.0	25.0	1590912365	10.284837
28011787	Does the combination of Yarn, VSCode	Does the combination of Yarn, VSCode and TypeScript work now?I've wasted time twice now trying to move projects to Yarn 2 just to have the tsserver LSP break every time, being unable to find the packages despite following the documentation to the letter.	mixedCase	12.333551	-6.546588	comment	3.0	11.0	1627675296	-10.435718
28014257	Better Business Intelligence in Elix	Better Business Intelligence in Elixir with Livebook	sergiomattei	12.691965	-7.3749804	story	3.0	47.0	1627693470	12.901403
28013815	The big question that I did not see 	The big question that I did not see answered is does it support location transparency. One of the huge benefits of Erlang is that it is easy to take a process and move it to another machine or even another data center.If Lunatic can do that, it would be a game changer for distributed computing.	RcouF1uZ4gsC	12.54514	-7.503373	comment	3.0	12.0	1627688788	12.910796
28014685	Normally I wouldn't suggest Crystal 	Normally I wouldn't suggest Crystal [1] with Rails Shop given how different they are, but Stripe uses a tight subset of Ruby and Type Check everything I am wondering if they have ever looked at Crystal and what are their thoughts on it. Given they are looking at Java and Go as well.>Architected this way, the Sorbet Compiler turns Ruby into a language for writing Ruby native extensions! Instead of having to write C, C++, Rust, or some other compiled language to write native extensions, people can continue to write Ruby but gain the benefits of native compiled speeds.To me this is the biggest feature that could impact the whole Ruby Ecosystem. Along with another Ruby JIT that is currently being tested at Shopify.[1] https://crystal-lang.org	ksec	12.621049	-7.2306867	comment	3.0	10.0	1627698608	-11.225999
28024639	I’m not sure what this role even doe	I’m not sure what this role even does. As far as I see them they just appear in meetings once in a while to mess up our (the actual dev team) carefully balanced schedule by suddenly requiring us to do something completely different.Like suggesting it would be better to stick with Javascript over Typescript since it would be more stable.	Aeolun	12.363559	-6.7294927	comment	3.0	14.0	1627804947	-10.464724
28043237	I think Erlang and Elixir are incred	I think Erlang and Elixir are incredible, and this particular feature of libraries starting BEAM processes seems cool in the abstract. However, this PARTICULAR task, Erlang/Elixir might be the worst possible language you could choose:> The Elixir approach to shared mutable state is wrapping it in a process. In this case, I needed a counter and the easiest way to implement it is to use an Agent which is a kind of process designed to handle simple state. In this case, the get_and_update function allows me to return the counter and increment it as an atomic operation.This is literally just an atomic counter. It’s a single CPU instruction that is guaranteed to be safe. I don’t care how lightweight a BEAM process is, it’s not faster than updating an atomic counter. Doing it this way is also abs	OskarS	12.50853	-7.4664044	comment	3.0	12.0	1627941554	12.881431
28042939	I really wish that in elixir we drew	I really wish that in elixir we drew a distinction between dependencies that do and don't spawn their own supervision trees.  It would be nice if this were reflected in, say, hex.pm, possibly using different tags for them.	dnautics	12.588844	-7.4331827	comment	3.0	22.0	1627939856	-9.213919
28059192	If you are writing a new large proje	If you are writing a new large project in JS without TypeScript, you are doing it wrong period. Bare JS is a cute language for personal websites but it's not feasible for anything more than a few thousand SLOC.	zarzavat	12.408717	-6.6111646	comment	3.0	22.0	1628071341	-10.444115
28062250	For those coming into this that aren	"For those coming into this that aren't of an Elixir background, here's some of the things that make BEAM (Erlang VM that Elixir is built on) interesting for soft real-time features:  * BEAM provides out-of-the-box capability to network nodes together. This is extremely important in real-time flows because server A may originate a message that needs to get pushed to a user connected to server B + C (2 tabs open). The capability to both connect + send messages between nodes is built in.
  * The process model in the BEAM provides a really natural fit for WebSocket connections. Each connection is its own process, and other processes are spawned off of that for various needs. The benefit here is that a failure in one process (connection drop, code error, crash, etc) won't affect other users. It"	sb8244	12.637581	-7.3944845	comment	3.0	10.0	1628091415	12.839578
28085282	The PHP of today is now a fine house	The PHP of today is now a fine house built on a terrible foundation. The warts from the original language are still there, but inexplicably they have decided to just soldier on and build a good language on top of them.For instance they've built a perfectly good object system with many advanced features; yet arrays, strings, etc aren't objects so you can't even call methods on them, they can only be manipulated by a dated, procedural API.	zarzavat	12.735458	-6.6530023	comment	3.0	12.0	1628245381	10.341113
28132618	"Yes.
We also don't use it with types"	"Yes.
We also don't use it with typescript (and would actively advocate for its removal from deno when asked), best JS runtime I've ever used."	j-pb	12.4656	-6.5326552	comment	3.0	22.0	1628621264	-10.765776
28145119	I feel like all of the problems in t	I feel like all of the problems in the blogpost are solvable without moving everyone to this crazy web development environment. To quote one of the proponents:> I do solemnly swear that never again will my CPU have to compile ruby from source....yeah, why was that even happening? Why not distribute pre-built artifacts? I feel like the whole docker ecosystem only exists because people forgot how to distribute software and/or python/ruby and friends make deployment so hard.	Boxxed	12.530385	-6.9426255	comment	3.0	11.0	1628703572	12.39216
28180590	PHP 8.0 was not shipped in bullseye 	PHP 8.0 was not shipped in bullseye specifically because it could not be supported by Debian.  A semi-official backport will most likely be available shortly after bullseye is released and testing/sid are reopened for new updates.	zozbot234	12.767294	-6.651144	comment	3.0	13.0	1628948919	-8.897473
28184195	We use Elixir, and basically every d	We use Elixir, and basically every developer we’ve hired has had zero Elixir experience prior to joining our team. Like any language it takes some time to get up to speed with the ins and outs, but I’d rather have a good developer with no Elixir experience than a mediocre-to-poor developer well versed in the language.I can’t speak for any other company, but I suspect that any team that has made the decision to use Elixir is (a) well aware of the low market penetration it has, and (b) not screening out resumes based on inexperience with the language.Edit: I should add that, despite all of that, I think it’s a fun language and any developer would probably enjoy dabbling in it regardless of vocational prospects.	peterbonney	12.692887	-7.459317	comment	3.0	22.0	1628977671	12.931637
28186218	"And we've been making the same ""mist"	"And we've been making the same ""mistakes"" with JS too!But if PHP and JS are so shit and full of churn, why are they so popular and widely used? And have been used to build larger, globally successful projects?"	edoceo	12.6160345	-6.4541955	comment	3.0	10.0	1629000994	10.2989235
28189429	Another reason to move to Elixir fro	Another reason to move to Elixir from Ruby...	gjmacd	12.687805	-7.3895206	comment	3.0	19.0	1629040596	12.859849
28189512	Where Phoenix does a better job with	Where Phoenix does a better job with all this and you don't have Ruby's baggage anymore.	gjmacd	12.729554	-7.072075	comment	3.0	10.0	1629041178	12.583814
28192208	(CH employee here)The job of the cof	(CH employee here)The job of the cofounder is to create a thing that people want, which has nothing to do with performance. The first goal is capturing lightning in a bottle with social products. Performance doesn’t matter until the lightning is there, and 99%+ of the time you never have to worry about performance, because you don’t get the lightning. So, probably the correct choice is leveraging the tech stack that gives you the best shot at capturing the lightning. Django seemed to help!	taylorhughes	12.800776	-6.5323105	comment	3.0	13.0	1629059216	10.045829
28192761	This is just silly excuse.The job of	This is just silly excuse.The job of the cofounder is also to anticipate possible risks.And building your company on an astronomically inefficient technology sounds like a huge risk to me.Those 1000s of servers are probably a very significant cost with such small technical staff. Just by choosing the right technology for the problem, most of that cost could have been avoided.Django has nothing special in it that would allow building applications faster than in a lot other frameworks that are also much more efficient.So it is just a matter of simple choice.Nobody expects people to write webapps in C++ or Rust. Just don't choose technology that is famous for being inefficient.	lmilcin	12.752483	-6.5056596	comment	3.0	10.0	1629063476	9.989779
28197331	What I don’t like about backticks in	What I don’t like about backticks in Ruby is that they “ignore” errors in commands you run. It’s up to the program author to remember to check $? for the last executed command’s exit status. And guess how many times the average Ruby script using this feature implements error handling? Usually it’s totally forgotten.To be safe, abstractions that make it easy to shell out must also:- escape all variable interpolations by default using “shellwords” or similar.- throw exceptions on error by default.Backticks in Ruby are very easy to use, but aren’t safe.	jitl	12.360292	-7.0855145	comment	3.0	10.0	1629117579	-3.2817283
28210875	Metamine represents the latest break	"Metamine represents the latest breakthrough in programming, it offers a mix of tradition declarative programming and reactive programming. The ""magical equals"" for lack of a better term, lets you do ""reactive evaluation"", the opposite of lazy evaluation.If any of the terms that a term depend on change, the result is updated, and all it's dependencies, etc.  You can use the  system clock as a term, thus have a chain of things that update once a second, etc.Being able to use both reactive and normal programming together without breaking your brain is a whole new level of power.It's brilliant stuff, and it seems to have been yoinked from the internet. 8(Here's a previous thread about it:  https://news.ycombinator.com/item?id=27555940"	mikewarot	12.537936	-6.465523	comment	3.0	13.0	1629213797	8.536523
28222728	Elm is awesome, its compiler is awes	Elm is awesome, its compiler is awesome, but its ecosystem is kinda stalling, isn't it?I mean, a lot of libraries aren't updated to the last lang version, debugging JS-Elm interactions been a real challenge for years, yadda yadda. Overall I'd say Elm ecosystem doesn't receive enough attention to survive.I'm not complaining, I'm just sad about that and kinda surprised I didn't found a mention of that in the OP article.	folex	13.00053	-7.686667	comment	3.0	35.0	1629301020	-12.76193
28226972	Kernel code and custom operators are	Kernel code and custom operators are only allowed under elm/ and elm-explorations/, so only 7 core packages can use them. The core developers cannot use those features in projects like everyone else.	G4BB3R	13.000145	-7.6906037	comment	3.0	13.0	1629319929	-12.755329
28276730	> personally I don't see why you'd w	"> personally I don't see why you'd want to use anything other than Typescript right now. It certainly feels like TypeScript has ""won"" and is now the defacto standard for anyone doing any kind of work in the JS-ecosystem.There are a bunch of nice languages featuring good FP support that compile to JS that are have viable sized developer communities and longer histories than TS. For example ReasonML, ClojureScript, Flow and Elm. Then you have the bunch of languages that compile to asm.js or WebAssembly. Not to mention the majority of Node and FE developers who continue to use JS."	fulafel	12.370322	-6.7064724	comment	3.0	18.0	1629730545	-10.490997
28278199	Do you know if Deno chose to use str	Do you know if Deno chose to use strings instead of buffers to be more consistent with the browser? I know buffers can be faster, but overall I like that readTextFile is returning a string here. I suspect most use-cases ultimately want to handle the output as a string.	steve_adams_86	12.5174885	-6.4391136	comment	3.0	10.0	1629735562	-10.943412
28277384	We don't ignore these problems. We f	We don't ignore these problems. We find web compatible ways to solve them. If you had done just about 3 seconds of research before posting, you would have noticed we have support for import maps[1]. These elegantly solve the issue in a way that also works in the browser. No node_modules needed :-)[1]: https://deno.land/manual@v1.13.1/linking_to_external_code/im...	lucacasonato	12.442502	-6.4533606	comment	3.0	10.0	1629732699	-10.834794
28281024	The fundamental advantage of TypeScr	The fundamental advantage of TypeScript (vs other languages like Scala.js) was that it could easily leverage the entire Node.js (EDIT: JavaScript) ecosystem and vice versa in a very smooth way.Deno goes in the wrong direction. It's a TS fanboy invention in search of a problem.And I say that as a TypeScript fanboy.	paulddraper	12.460186	-6.4737654	comment	3.0	10.0	1629748118	-10.859886
28315324	Modern Treasury is a Ruby on Rails s	Modern Treasury is a Ruby on Rails shopI really wouldn't want to write a service that deals with money in an unsafe language. It's so easy to make a mistake in ruby there's no compiler to help you.	ianpurton	12.545843	-7.086702	comment	3.0	16.0	1629987702	12.38579
28325726	Weeks(2).from_nowI don't understand 	Weeks(2).from_nowI don't understand how monkey patching is beneficial beyond personal preference.	pharrington	12.327715	-7.0004225	comment	3.0	12.0	1630055711	-8.558509
28327002	When learning elixir and phoenix, it	When learning elixir and phoenix, it is hard to find updated tutorials. Whenever I try an youtube tutorial, there is always an error. Can you share some updated links/books for a beginner?	CrownSoft	12.732291	-7.3557496	comment	3.0	14.0	1630067734	12.906532
28328324	Elm is awesome! I would really like 	Elm is awesome! I would really like an equivalent for software/game dev	Narice	12.993418	-7.683542	comment	3.0	13.0	1630074939	-12.779151
28329794	Can someone explain the difference o	Can someone explain the difference of redux to elm? I don’t see a difference on the first look. I‘m a React/Redux Developer.	patwoz	13.013076	-7.2087636	comment	3.0	11.0	1630081838	-12.776868
28337743	Yeah it's kind of funny that there w	"Yeah it's kind of funny that there was a ""controversy"" in the very FIRST YC batch, when Reddit switched from Lisp to Python (~15 years ago!)And there was data that showed that like 90%+ of YC startups use either Ruby (often Rails) and Python, including all the most valuable ones like AirBNB, Stripe, Doordash, etc.So basically it's been 15 years since Ruby and Python have been acceptable (or even better) Lisps, according to PG's own metrics.Ruby and Python both have garbage collection, REPLs, and enough reflection/metaprogramming to ""compress"" your code."	chubot	12.581905	-7.04	comment	3.0	10.0	1630156178	12.322432
28360883	"Actually - I've found the ""elegant p"	"Actually - I've found the ""elegant properly engineered code"" a total NIGHTMARE to deal with. Reflection, endless hierarchies, complexity on complexity.The PHP script kid basically writes a linear program (tons of duplication) with no crazinesses. Yes, it's ""low quality"", but if you do a few function out refactorings you've got something very easy to work with.I just wish there was a standard template - access check, runtime complexity at code comment at top of function (ie, O(1), O(n), O(n^2)) some reasonable comments, error handling, done. Throw in some unit tests if desired."	slownews45	12.753028	-6.653879	comment	3.0	22.0	1630357673	10.336539
28366772	I can't believe Facebook hasn't cann	I can't believe Facebook hasn't canned Flowtype yet and moved to TypeScript. They will have to do it eventually.	erlich	12.525635	-6.5924153	comment	3.0	10.0	1630411152	-10.430198
28374942	I took a mook Erlang class and after	"I took a mook Erlang class and after that, I couldn’t really get into elixir. 
Erlang just felt a lot more expressive"	salimmadjd	12.633352	-7.489755	comment	3.0	23.0	1630453353	12.958546
28375845	Hmmm it’s been a decade so maybe I’m	Hmmm it’s been a decade so maybe I’m misremembering, but I remember needing to use the REPL or escript to access the logs of my otp services… were they simple files?	butterisgood	12.597116	-7.475603	comment	3.0	10.0	1630462979	12.860694
28376600	>You’re given these language options	">You’re given these language options:
>
>1. Ruby on Rails
>2. PHP
>3. C++
>4. x86 AssemblyDefinitely not 2."	de6u99er	12.62079	-7.012273	comment	3.0	10.0	1630472904	12.372847
28392262	I've noticed that as well, that seni	I've noticed that as well, that senior Ruby/Rails people will become very valuable in the coming years, which is good to hear. However, 10+ years into the future is the real scary part. Will jobs dry up so much so (especially due to the accelerating pace of tech turnover) that Ruby/Rails will essentially become the FORTRAN of the times? Who knows.	JohnWhigham	12.72877	-6.9601545	comment	3.0	12.0	1630592029	12.339099
28426833	Really this is what drives me nuts a	Really this is what drives me nuts about Rails.  You can never really know what exactly any line of code is going to do.	emodendroket	12.773214	-6.90086	comment	3.0	13.0	1630868769	12.35028
28470410	If anyone is looking for a similar s	If anyone is looking for a similar service to deploy Ruby/Rails apps, check out https://www.hatchbox.io from Chris Oliver. Unfortunately doesn't come with a free tier but worth every penny!	axelthegerman	12.748216	-6.8334765	comment	3.0	16.0	1631199504	12.330243
28494172	Why Flask will teach you more about 	Why Flask will teach you more about software engineering than Django	olzhasar	12.773379	-6.55199	story	3.0	5.0	1631383198	10.031478
28501516	I'm switching to a ruby career. Any 	I'm switching to a ruby career. Any advice for a young rubyist?	ta988	12.685605	-6.9825606	comment	3.0	17.0	1631457332	12.363116
28510789	As an ex PHP developer, I don’t thin	As an ex PHP developer, I don’t think it will ever go away. There is just way to much software that was written in PHP (e-commerce, blogs, CMS systems, Nextcloud/ownCloud, …) that isn’t going away.PHP isn’t something I ever want to touch again (its libs are wonky and I dislike the syntax choices of the last years) but the execution model was sort of nice before the frameworks (an entry point with a clean state you can work yourself through).The statistics are a bit misleading though. Just because 80% of the sites run PHP in some way doesn’t mean there are that many Jobs. A lot of the work with PHP world is not necessarily going to be PHP work (a lot of HTML, JavaScript and Plugin configuration) and there is complexity in learning your way around a system well enough to build plugins. The j	johntdaly	12.763298	-6.6268	comment	3.0	21.0	1631537164	10.34533
28511150	In PHP's case it's about WordPress w	In PHP's case it's about WordPress which still being deployed at a very high rate. While the blogging thing isn't that much in focus anymore, WordPress + Divi + WooCommerce is an extremely common stack for setting up eCommerce sites.An yes, then there's Drupal, Laravel, Symfony, and many others, and they're going strong too. Heck, even Joomla is actively developed even though it's probably small enough today to be considered legacy.	fogihujy	12.746133	-6.4535575	comment	3.0	13.0	1631539398	10.278185
28519584	If so, it should be possible for HN 	If so, it should be possible for HN commemtators to chime in with notes that they do indeed use it somewhere in their stack.I’m guessing the usage in a web site is primarily Wordpress, which is pretty widespread. I doubt 70%+ of devs actually touch PHP in any given year.	quantified	12.768989	-6.630948	comment	3.0	10.0	1631587374	-1.5153039
28524469	Just curious. In which way is data.t	Just curious. In which way is data.table superior to pandas? Really interested about it! From my personal experience pandas is just sometimes a bit slow.	MichaelRazum	12.358571	-6.476417	comment	3.0	12.0	1631626134	-11.629402
28536744	I get the sneaking suspicion that th	"I get the sneaking suspicion that this is a case of Ruby's magic being slightly too magic; it's a problem I have tripped across in the past.Slightly tangentially reminds me of the ""More Magic"" switch of GLS fame."	tankenmate	12.591319	-7.06981	comment	3.0	13.0	1631695601	12.388033
28546020	Yesterday I made a prototype of a ve	Yesterday I made a prototype of a very small dynamic webpage (less than 50 lines of code). I am the only person who will ever visit this page. PHP was the obvious tool to use—but I still found myself stopping to question that choice, in large part because of the contempt for PHP that I have seen online.Incidentally, I am not a software developer—I’m an artist and art historian. I have no real need for hacker cred. And yet I still find myself trying to earn it by doing things the hard way.Which is all to say: this post resonated with me, and I really appreciate the insight.	nickloewen	12.765539	-6.595365	comment	3.0	10.0	1631749811	10.334231
28550537	We've reached a new low in modern he	We've reached a new low in modern hell if this is where we're going. Old bbs php or what was it's name was way more manageable.	barrenko	12.7735	-6.635622	comment	3.0	14.0	1631793264	10.324491
28560827	I think it's easy to say it's declin	"I think it's easy to say it's declining based on things like Red Monk's ranking, but with GitHub, Stripe and Shopify behind it, it's not going anywhere soon.
And apparently Rails us is slowly increasing: https://arstechnica.com/gadgets/2021/09/php-maintains-an-eno..."	jamesfinlayson	12.750947	-6.9320927	comment	3.0	18.0	1631848810	12.401644
28561757	Rails doesn't scale?  Github's the l	Rails doesn't scale?  Github's the largest code repository site in the world.  Stripe's one of the largest fintech sites in the world.  Shopify is one of the largest ecommerce sites in the world.  There's also Airbnb, TripAdvisor, many others that are huge.Also, you can write shitty, slow code in any language.  You can make too many calls to the DB in any language.  You can also scale to Google size in any language.Python isn't a quick language. Also most of the ML bits are C++ bits.  Ruby is faster than Python for most things.  But Google (and others) have done well with Python (and other bits).  Facebook got huge with PHP (which no one truly likes).Ruby is a fine language (also very pleasant to use), Rails powers many huge companies, sometimes nitpicks are just that.	Mikeb85	12.708709	-6.9549174	comment	3.0	12.0	1631858037	12.350643
28568298	I love Django, but version upgrades 	I love Django, but version upgrades are a gigantic hassle.	ldiracdelta	12.814564	-6.5604296	comment	3.0	22.0	1631899886	10.107752
28590441	As JS developer it took me sometimes	As JS developer it took me sometimes realizing the importance of generics, as by default in JS problems it solves doesn't exist. Funny how typed language advocates want automatic casting in the end after all.	techsin101	12.349767	-6.7934847	comment	3.0	11.0	1632112823	-10.39266
28596290	I have to admit I've had a similar r	"I have to admit I've had a similar reaction, at a previous company we were ""forced"" to use Ruby to be consistent.I grew to love Ruby, though I admit I always approached it with half a mind pretending I was writing Perl.These days I've sometimes fallen back into Ruby, but then had issues sharing it with colleagues - so I've largely switched to Go.  While most people don't have a dev-environment setup I can give them binaries built via github/gitlab/jenkins, and so sharing tools & utilities is just that little bit less painful than with Ruby (and even Python)."	stevekemp	12.597364	-7.0260234	comment	3.0	10.0	1632158804	12.300901
28608816	There already is one, and it’s used 	There already is one, and it’s used by Deno!https://swc.rs/	flaque	12.505471	-6.4451675	comment	3.0	10.0	1632252312	-11.003294
28610114	I don’t get why there is so much neg	I don’t get why there is so much negativity on Django when Instagram and other large websites still use it.I used it a few years ago for a startup and I liked it. It also has a user management system built in also .	zitterbewegung	12.839435	-6.5220428	comment	3.0	18.0	1632259224	10.099261
28620911	We use Phoenix and LiveView to power	"We use Phoenix and LiveView to power all of our non-video interactions on Glimesh.tv[0] and the immediate out of the box features and performance are unmatched. LiveView allowed us to get a completely real time updating channel where streamers can edit their metadata (game, title, viewer count, etc) and all of the viewers can see it in real time. Not to mention we implemented a distributed chat system that sends message updates in real time to both browser clients and API clients. Both of these features combined amount to less than 1000 lines of code and ""just work"" across multiple web nodes.It can be daunting to jump into such a strange world as a LiveView environment may look (Elixir syntax, OTP terminology, etc) but honestly once you dig in deeper, everything just makes sense. LiveView "	clone1018	12.891927	-6.835486	comment	3.0	17.0	1632340104	12.7171755
28621101	I've tried to get into Phoenix a few	I've tried to get into Phoenix a few different times, but I've always been stymied by the unfamiliarity of Elixir's syntax, especially codebases that made heavy use of composition and guard clauses, meaning that the business logic was scattered across a half-dozen different files which had to be read in sequence to understand a single web request. This was a big let-down from the (to my mind) very straight-forward nature of MVC code and project structure that Rails pioneered. Do you have any tips for structuring Phoenix projects or approaching these kinds of codebases?	nightpool	12.7694	-7.173286	comment	3.0	15.0	1632340966	12.782302
28621273	I've had such hard time wrapping my 	"I've had such hard time wrapping my head around how to think in liveview - I've tried tutorials and building my own projects, but always end up thinking ""am I doing this the right way""? How do other people structure their codebase, and what are the considerations they have? I think I'm trying to force my way of working with react and laravel, and lack some kind of a fundamental way of thinking to get my ""aha!"" Moment"	tommica	12.890004	-6.6802626	comment	3.0	10.0	1632342207	12.718201
28621323	Hi Chris - this is superb, really pl	Hi Chris - this is superb, really pleased to see LiveView getting so much attention, and thanks for all your hard work.Can you talk a little about the current story with deployments and managing state across/during those?Obviously Erlang/OTP supports hot upgrades, but those are hard to design correctly and not supported by container/VM environments like Heroku and (I presume?) Fly.io.	scraplab	12.892438	-6.855189	comment	3.0	10.0	1632342433	12.760803
28621478	Non technical Fly.io founder here: L	Non technical Fly.io founder here: LiveView and Elixir work very well distributed all over the world. Here's an example app I fumbled my way through to show it in action: https://liveview-counter.fly.dev/	mrkurt	12.901429	-6.8760266	comment	3.0	11.0	1632343212	12.734336
28621870	These kinds of discussions miss a to	"These kinds of discussions miss a ton of nuance unfortunately (as most tech discussions do), so hopefully I can help answer this broadly:First off, it's important to call out how LiveView's docs recommend folks keep interactions purely client side for purely client side interactions:
https://hexdocs.pm/phoenix_live_view/Phoenix.LiveView.html#m...> There are also use cases which are a bad fit for LiveView:> Animations - animations, menus, and general UI events that do  not need the server in the first place are a bad fit for LiveView. Those can be achieved without LiveView in multiple ways, such as with CSS and CSS transitions, using LiveView hooks, or even integrating with UI toolkits designed for this purpose, such as Bootstrap, Alpine.JS, and similarSecond, it's important to call out how"	chrismccord	12.899933	-6.767839	comment	3.0	11.0	1632345097	12.702491
28621963	I have never used LiveView, but I'd 	"I have never used LiveView, but I'd love to see the web moving towards this kind of interfaces. HTML over the wire is powerful! The deep integration between all the parts (Phoenix, LiveView, the HEEx engine...) is nice, and compile-time template validation looks really cool.One thing that concerns me about doing everything over WebSockets, is that it seems you now need to keep a connection with every connected client, even if they are not doing any ""highly interactive"" actions. I think (in most cases) it would be more efficient to do a bunch of AJAX requests to receive those HTML chunks. Now that we have CDNs, HTTP/{2,3}, etc. the benefits of using WebSockets for everything seem less obvious.This is what HTMX[0] does by default, and then you can use WebSockets[1] if you need it. Another gr"	polyrand	12.885852	-6.713051	comment	3.0	13.0	1632345582	12.677402
28622625	Lots of answers here including one f	Lots of answers here including one from Chris McCord himself, but I'll offer my take based on my professional experience developing web apps (though I've never used Phoenix professionally):A large majority of businesses out there start off targeting one region/area/country.  The latency from LiveView in this scenario is imperceptible (it's microseconds).  If these businesses are so lucky as to expand internationally, they are going to want to deploy instances of their apps closer to their users regardless of wether or not they are using LiveView.LiveView could be a huge help to these startups.  The development speed to get a concurrent, SPA-style app up and running is unparalleled, and it scales really well.  My guess would that be that people who are worried about the latency here (which 	sodapopcan	12.902817	-6.8266025	comment	3.0	13.0	1632348519	12.663876
28623231	"""Do you remember when Ruby on Rails "	"""Do you remember when Ruby on Rails was first released? I do. Rails was also a revolution.""I remember and I disagree. It was dog slow, run by a guy who made slides that said ""Fuck you."" and was rife with memory leaks."	mmaunder	12.747168	-6.954493	comment	3.0	10.0	1632352244	12.358734
28623250	LiveView will automatically recover 	"LiveView will automatically recover the connection, but you are correct it requires a connection to allow interactivity, but this isn't different from being unable to post a tweet while driving under the subway. The interesting thing about the subway usecase is even google docs last I checked will go into read-only mode when the connection is lost, so I don't consider this scenario particular different than the status quo.LiveView adds a `phx-disconnected` class, which is what I assumed you mean by beachball, and interactions are paused while the user awaits the UI to tell them they are good. This is all driven by your CSS and you can also hook into the connection life-cycle with a few lines of JS, so the app should be telling the user ""Reconnecting..."" vs it appearing broken, so this is r"	chrismccord	12.898018	-6.7497826	comment	3.0	11.0	1632352433	12.702396
28624361	Long live Ruby. It has never lost wi	Long live Ruby. It has never lost wide interest; however, it seems there's a king of resurgence around it recently.	stanislavb	12.67521	-7.020655	comment	3.0	13.0	1632361600	12.37967
28625472	As someone with loads of Python and 	As someone with loads of Python and Django experience, should I invest in learning Erlang first or dive straight into Elixir/Phoenix?Would the experience be enlightening regardless if I choose to deploy apps with it and use it at work?	nsomaru	12.630126	-7.481524	comment	3.0	10.0	1632374882	12.91638
28626421	"One question here;
is there anything"	"One question here;
is there anything special about Elixir/Beam which makes Liveview on Phoenix a great fit?Or can LiveViews be done on more performant languages like Go, Rust etc? I am just surprised why we don't see more LiveView implementations in other languages?"	rishav_sharan	12.859549	-6.969744	comment	3.0	10.0	1632383888	12.763093
28640122	A couple of years ago every new Go p	A couple of years ago every new Go project was being reported here; before that every new Elixir project was being reported; I don’t know if HN was around in the mid-2000’s but I’m pretty sure if it was, it would be full of every new Ruby on Rails project… these phases have been coming and going for as many years as I’ve been signed up here at least ¯\_(ツ)_/¯	Shish2k	12.748247	-6.9810467	comment	3.0	13.0	1632474400	12.4229765
28661740	Related to this --  many popular pac	Related to this --  many popular packages churn through changes for change-sake.  For example LTS on Symfony is just 3 years and on Doctrine, a single contributor is renaming a bunch of standard PHP/DBAL functions for no serious reason other than feels.  It would be nice if LTS was more like a 10 year commitment but I know that's not fun for developers and it is a serious drawback to a lot of open source projects.  The frameworks have to change because PHP is changing and then you get a stack that's broken and needs multiple upgrades and major refactoring.	pirate787	12.740267	-6.571762	comment	3.0	10.0	1632670703	10.307924
27862343	Even though people love to hate PHP,	Even though people love to hate PHP, people have been able to achieve that dream of only writing code and a hosting provider takes care of the rest for almost 20 years now.I recall in thr early 2000s having a personal VPS account with Dreamhost and doing just that since they managed the OS, Database and Apache/nginx.It’s amazing how in many ways - deploying code over the years has only become radically harder than simpler.	alberth	12.769822	-6.5661993	comment	3.0	13.0	1626478267	10.30988
27865770	Does performance matter considering 	Does performance matter considering Elixir is already very slow in per-thread performance?	blunte	12.640222	-7.457689	comment	3.0	20.0	1626529973	12.914548
27870740	For those wondering why on earth thi	For those wondering why on earth this isn’t simply a contribution to Ruby, the FAQ has a really nice explanation - tldr is that this is a variant optimised for the very specific context of Linux, x86/64, server environments, with pre compiled and packaged binaries, with special memory allocators (jemalloc).These changes are specific to this context and are unlikely to be accepted into the more generalised Ruby core.Same team as Phusion Passenger, so excellent background.	sudhirj	12.541557	-7.064576	comment	3.0	32.0	1626582226	-11.225063
27870735	Cool project. Not a big fan of the n	Cool project. Not a big fan of the name. Kind of hard to sell to a sourcing team. If they called it “Enterprise Ruby” or something like that the conversation is going to be much easier.	mberning	12.68216	-7.0010724	comment	3.0	17.0	1626582135	12.369863
27872419	Many of them are adopting Jemalloc, 	Many of them are adopting Jemalloc, but they do the Jemalloc integration work themselves because they have the engineering talent and capacity. Fullstaq Ruby is for everybody else: those who can't, don't want to, or can't be bothered to do it themselves. It's for the masses.	FooBarWidget	12.614958	-7.051065	comment	3.0	15.0	1626611938	12.361035
27873267	Here I explain why it can quickly be	Here I explain why it can quickly become not so trivial: https://news.ycombinator.com/item?id=27872696The goal of Fullstaq Ruby is to democratize the fight against Ruby memory bloat. Democratization means that as many people should be able to reap the benefits as possible. It's 2021 now, and expecting users to compile Ruby or Jemalloc from source is no longer realistic. Compiling anything is no longer a non-scary, low-friction thing to do.	FooBarWidget	12.617688	-7.071215	comment	3.0	15.0	1626618855	12.357154
27881753	Phoenix 1.6 will switch to esbuild b	Phoenix 1.6 will switch to esbuild by default, dropping node and NPM	losvedir	12.677969	-6.74077	story	3.0	16.0	1626696909	12.685016
27887558	I've really liked Prolog during univ	I've really liked Prolog during university, but I've never used a constraint solver embedded in Prolog. Do you know of any non commercial Prolog system with this kind of integration to play with? I remember using SWIProlog at the time	alserio	13.150171	-7.2952867	comment	3.0	11.0	1626730784	-12.483308
27908489	"I'd love to see a ""why"" somewhere in"	"I'd love to see a ""why"" somewhere in there... telling me that its syntax is similar to Ruby and that it has a type system (which Ruby also has as of version 3, yeah?) isn't particularly helpful in telling my why the language is compelling.I don't really see a ""why use Crystal instead of Ruby"" (or any other language, really) explanation anywhere. Maybe the things listed on the main page are meant to be that? Even if it's not on the main page a comparison would be nice in the docs (https://crystal-lang.org/docs/) or the reference (https://crystal-lang.org/reference/)"	TranquilMarmot	12.622039	-7.2585683	comment	3.0	13.0	1626885441	-11.252771
27916542	Ask HN: Why is shared hosting only u	Ask HN: Why is shared hosting only used with PHP?	KronisLV	12.757938	-6.5852447	story	3.0	1.0	1626940725	10.311767
27918634	I'm very happy to see the inclusion 	"I'm very happy to see the inclusion of ""Control Flow Analysis of Aliased Conditions."" This has been something I have been wishing for for awhile now and a delight to see it come out in this release. TypeScript just keeps getting better and better."	adamddev1	12.377065	-6.7939167	comment	3.0	13.0	1626960802	-10.450758
27918519	TypeScript 4.4 Beta	TypeScript 4.4 Beta	bpierre	12.390431	-6.847356	story	3.0	63.0	1626960196	8.15099
27948269	This strikes me as a quite language-	"This strikes me as a quite language-specific treatise, and may indicate a shortcoming or particularity of the syntax or semantics of the described programming language (i.e., Disco) rather than an essential conceptual difference.For comparison, in Prolog, a type is indeed a set of terms! For example, the type ""integer"" truly denotes the set of integers, and if an argument has the type ""integer"", then we know that the predicate can only hold if that argument is an element of this type.Quoting from the Prolog ISO standard:    7.1 Types

    The type of any term is determined by its abstract syntax
    (6.1.2).

    Every term has one of the following mutually-exclusive
    types: V (variables), I (integers), F (floating point values),
    A (atoms), CT (compound terms).

    A term with type"	triska	13.119002	-7.295401	comment	3.0	10.0	1627210942	-12.427576
27954286	> However its hard to find any big c	> However its hard to find any big companies here that uses PHPThere's one pretty big one....Faceledgar? Peoplebook? Something like that.	paulddraper	12.77686	-6.6133556	comment	3.0	12.0	1627260116	10.307183
27954490	> This means there's nothing specifi	> This means there's nothing specific to PHP about this problem.I don't particularly care if languages that I am not using have the same problem. It's up to people who use those languages to make those criticisms.> Many higher level libraries, including for PHP, abstract over this problem and do offer arrays by binding per query.Feel free to link an in-built PHP library that supports this feature, that would be far more useful than just obliquely suggesting that one exists.	sellyme	12.642223	-6.641776	comment	3.0	15.0	1627262223	10.119356
27956486	So why should Perl, Go, PHP, or Rust	So why should Perl, Go, PHP, or Rust?	mike_d	12.574615	-6.807513	comment	3.0	10.0	1627282677	13.085792
27956583	Comparing a language to a framework 	Comparing a language to a framework is a bit wonky isn't it? Laravel (PHP framework) for instance has {{ $foo }}	corobo	12.783031	-6.629377	comment	3.0	11.0	1627283646	10.322612
27958408	> In defense of PHP, this is probabl	> In defense of PHP, this is probably due to simplicityI don't consider this to be a good defence; in fact, I'd argue that makes PHP itself insecure.I like to think of secure coding in terms of the 'path of least resistance' for a lazy/busy/inexperienced developer. If doing things securely makes life harder, things will be done insecurely.We don't need to make the secure approach easier in absolute terms; we can just make the insecure approaches more painful. In this case: have database functions require arguments of an 'SQL' type, rather than strings; make it easy to write literal SQL values; make it easy to parameterise SQL values; make it as hard as possible to convert a string value to an SQL value, e.g. bury it in some deep namespace hierarchy, with a long and scary-sounding name, req	chriswarbo	12.80775	-6.5302043	comment	3.0	12.0	1627301137	10.31481
27982293	I just looked through there website 	I just looked through there website and I fail to see how it would be quicker or better than spinning up a quick rails app with a bootstrap template. Most of my time developing is thinking about the domain model and workflows. Once I've decided on that it takes a matter of minutes to code features and then you are not restricted in your ability to adjust and enhance after the fact.	rorykoehler	12.768232	-6.8525004	comment	3.0	14.0	1627468941	12.341691
27988638	Hard to say, as you pointed out, Wha	Hard to say, as you pointed out, Whatapp runs on Erlang, and despite their upstream patches, no BEAM based framework is competitive on the techempower benchmarks.But let's not forget, AWS SimpleDB was written in Erlang, as well as the first iteration of Facebook Messenger.I invested a decent amount of time in learning Elixir and Erlang and understanding BEAM. My personal takeaway, which seems to be mirrored by every big company, is that the ecosystem just isn't worth the investment.	zinclozenge	12.561144	-7.4460316	comment	3.0	11.0	1627500859	-8.793689
27989830	What is not mentioned here, the lack	What is not mentioned here, the lack of static typing in elixir. I think for some people it could be no go. That is one major downside for me as well. On the other side, totally agree with the developer experience, really love it. I work profecionally with nodejs/typescript and on my free time looking on other languages,  especially functional ones.  I tried clojure before, but found the ecosystem in Elixir way better,  especially dev tooling. It feels like it all really stick to each other. Another part,  because all structured around modules, it is easy to check documentation and find the function you are looking for.	vasergen	12.601301	-7.663966	comment	3.0	11.0	1627507024	12.903696
12006427	Interesting.  It doesn't amaze me th	Interesting.  It doesn't amaze me the continued popularity of PHP.  The language, framework, and ecosystem just work.  Plenty of people well versed in it.  It's not sexy, and I've done more than a few years of consultancy there.New energy in an ecosystem is never a bad thing.	jmspring	12.769462	-6.6307054	comment	3.0	34.0	1467258470	10.347498
12006850	When I started out making web softwa	When I started out making web software 20 years ago the choices for server-side code were essentially C, Perl, or ASP with VBScript. Then PHP came along and made things a great deal easier because managing a server was hard, and PHP just worked pretty much everywhere. In that sense PHP was amazing.We aren't working in that environment any more. What software runs on a server is no longer up to the hosting company. A developer/devop can configure a server far more easily, with no input from a sysadmin. The process can be completely automated. That change has opened up development options considerably. That doesn't mean writing code in PHP is a bad choice, but it does mean there is a choice. PHP's primary advantage has been eroded to the point where it should no longer impact the decision ma	onion2k	12.750058	-6.6274767	comment	3.0	30.0	1467266178	10.282175
12007325	This just reminded me that, I'm a Ze	This just reminded me that, I'm a Zend Certified PHP Developer  . Those days :))	BilalBudhani	12.760654	-6.630025	comment	3.0	13.0	1467276365	10.3647175
12006808	A language with some consistency wou	A language with some consistency would be a start. Go, TypeScript, Elixir are all superior to PHP in that aspect.PHP lacks consistency in naming conventions, function signatures (is that a string or bitmask I'm supposed to pass?) and tons of other things.I could write a novel about it, but there's already multiple websites/articles dedicated to PHP's inherent design flaws:http://phpsadness.com/https://whydoesitsuck.com/why-does-php-suck/https://eev.ee/blog/2012/04/09/php-a-fractal-of-bad-design/Plus it's limited in capabilities compared to stuff like Node.js (or other libuv bindings), considering we get stuff like Hot Module Reloading, isomorphic/universal applications, simple websockets integration, all of which PHP is either incapable of providing or provides inferior soluti	wyqydsyq	12.74092	-6.642152	comment	3.0	11.0	1467265293	10.338332
12006927	Indeed, PHP is part of that industry	"Indeed, PHP is part of that industry.
Some parts of the PHP eco-system are even leading the way, believe it or not.Laravel is the best example for this,
with spin-offs in several other languages.
(Fair notice: many of the ideas in Laravel are not new, but borrowed/inspired from C#, rails and others)* Node.js frameworks inspired by Laravel: http://www.adonisjs.com/, https://quorrajs.org/* Python: http://www.pylonsproject.org/projects/pyramid/about, https://github.com/aacanakin/glim* Java: http://wings.loonydev.com/and so onIn other news, the `trait` type was recently popularized by PHP and can now be found in many languages: <a href=""https://en.wikipedia.org/wiki/T"	wuezz	12.734187	-6.6307287	comment	3.0	13.0	1467267807	10.33382
12007088	As a Django dev, I don't think its a	As a Django dev, I don't think its anywhere as easy to deploy Django as PHP.	collyw	12.774311	-6.5251513	comment	3.0	24.0	1467271820	10.019685
12012625	I'm still fairly new with Elixir/Pho	"I'm still fairly new with Elixir/Phoenix (as I think most of us still are), but so far I feel intuitively that it's more maintainable and I admit that I don't have the experience or numbers to back that up yet.There are some things that you simply must use other tools for in Rails, because it can't maintain state like Erlang can. Once you start adding in these other things, you're no longer just a ""Rails app"" but you're really creating an entire system. Now you've got different things you potentially need to test, and you're adding in extra stuff to your system to monitor and measure the different parts of your system. You might do the same thing in Erlang/Elixir, but you also might not. You can potentially keep your entire ""system"" inside Erlang, either in one node or distributed. So righ"	bratsche	12.789103	-7.2166767	comment	3.0	33.0	1467328562	12.787582
12013049	I'm a mostly Python / occasionally R	I'm a mostly Python / occasionally Ruby web developer.There isn't much you're missing. About the only use-case I can think of where Ruby has a clear advantage is in creating a DSL.Other than that, there are differences in what already exists in the two ecosystems, but (at least for web development) generally there are equivalents available (eg. Nokogiri vs. BeautifulSoup). The Rails and Django frameworks are roughly comparable, for example, with Rails being more 'magical' vs. Django being more explicit. Which one is better for you may just come down to your personal tastes.Now, outside of web development, Python has a clear advantage in areas such as scientific computing, game development, machine learning, and many other areas in which Ruby doesn't really have much of a presence. This isn	webmaven	12.536455	-6.9930487	comment	3.0	12.0	1467333655	12.358436
12013179	Elixir has no native array syntax no	Elixir has no native array syntax nor any array functions in the stlib so arrays are basically second class citizens rather than completely absent. Ask not why I need them but why anyone might need them if the Elixir is supposed to be a general purpose language. Why does Clojure need them or Ruby or Python (lists)? If I want to process data as a large indexed array Elixir isn't going to help me and some Elixir devs have conceded that it may not be suitable for large scale data processing. We all know Elixir/Erlang excels at distributed concurrency but the question here is whether it is deficient in other areas, making it too much of a niche language.	cutler	12.653802	-7.5767975	comment	3.0	12.0	1467335637	12.917438
12016268	I really like Elixir and Erlang, but	"I really like Elixir and Erlang, but haven't found he time to play with Phoenix. But...  > You're right basically, but the migration wave from
  > rails to phoenix has noticeably started, and 
  > it shows.

People have previously said this about:  * Clojure
  * Node
  * Go

And lots of things before that."	steveklabnik	12.758476	-7.234535	comment	3.0	17.0	1467383295	12.758258
12017378	> It doesn't matter whether your res	> It doesn't matter whether your resumé says PHP or PhDPlease remove this line from your job ads, It's belittling and adds absolutely nothing. there are other way to say that you're language agnostic.	phpphd	12.748772	-6.623549	comment	3.0	18.0	1467389788	2.1221793
12044445	Escher: An Elm-like web framework fo	Escher: An Elm-like web framework for Julia	tanlermin	12.899748	-7.6570764	story	3.0	60.0	1467824917	-12.730183
12048642	Just FYI. Brujo is close to being ex	"Just FYI. Brujo is close to being expert in Erlang. This post is a more of a ""warning for juniors"" than ""damn, today I've discovered something new"".And there is nothing really WAT about it. Just part of rather simple Erlang language grammar."	pepesza	12.560372	-7.530235	comment	3.0	11.0	1467890991	-5.145176
12049396	Interesting! What's the relationship	Interesting! What's the relationship between Akka.NET and Akka? Is Akka.NET fully compatible with JVM Akka, from a remoting and clustering perspective? Or is the idea of the project to basically recreate roughly the same library, but for the .NET platform?	acjohnson55	12.354518	-7.3823247	comment	3.0	12.0	1467900641	12.720724
12052631	Django was released in 2005. That's 	"Django was released in 2005. That's MVC for python.Ruby on Rails, 2005. That's MVC for ruby.Zend Framework, 2006. That's MVC for PHP.
phpBB, 2001. MVC for PHP. But not generalized, specific usecase only.Backbone.js, 2010. That's MVC for JS.Sounds to me like in 2005 the web was pretty wild westy in terms of separating data from views and application logic."	Swizec	12.799117	-6.6215305	comment	3.0	10.0	1467932202	10.102803
12061680	Ask HN: Ruby on Rails vs Go – What w	Ask HN: Ruby on Rails vs Go – What would you suggest to a newbie webdev? why?	pvsukale1	12.643897	-7.0507374	story	3.0	1.0	1468078301	12.267332
12066053	My first thought is: Neat! Languages	"My first thought is: Neat! Languages with different grammars, syntax, and libraries have different expressivities; my first thought is always compiler implementation in OCaml. I would love, for example, to (effortlessly!) dip into OCaml or Haskell while writing a high-performance C++ program, for example.I am very intrigued by Lia [0] as an example for how languages can be embedded inside of one another for useful effects. See Will Crichton's great blog post for more [1].However, I am wondering why Python and PHP were chosen. I can't think of a compelling use for having both languages simultaneously. They are both dynamic scripting languages with similar design objectives.[0] https://github.com/willcrichton/lia
[1] http://notes.willcrichton.net/the-coming-age-of-the-polyglot..."	piemonkey	12.569967	-6.7070646	comment	3.0	15.0	1468167102	10.309051
12070743	Good stuff. I've started using Elixi	Good stuff. I've started using Elixir and Phoenix in a new project (I wanted concurrency for making a lot of HTTP calls) and while functional programming does take getting used to (you can not write something like a counter that increments itself in a loop) it's been relatively easy to pick up. Compared to learning Node.js, it's been a more relaxed and productive experience (although maybe I'm not making a fair comparison because I've implemented way more things in Node that I have yet to try in Elixir.)	firasd	12.658305	-7.2724695	comment	3.0	15.0	1468242402	12.893792
12071168	I think part of it is that it fits w	"I think part of it is that it fits well into the microservices paradigm - where there is a separation of work even within the same program.But that said, for where Erlang shines - backends and distributed services - first-class concurrency is damn near a must-have these days (see: Go, Erlang, etc. recent surge in use and popularity).I ended up with Go, but had I more time to learn Erlang (or Elixir was 1.0 when I started looking) it would have been a solid contender.Also, don't discount the incredibly solid and robust BEAM VM. If you are writing distributed services or servers (see: Riak, RabbitMQ) the overhead for spinning off ""instances"" or ""processes"" within the VM is virtually zero-cost, and in production systems has like sixty-four 9s of uptime. [0][0] ok, nine, but still: https://pra"	themartorana	12.482679	-7.5006166	comment	3.0	20.0	1468246574	12.87796
12072870	> This release includes plenty of ne	> This release includes plenty of new features, such as our new workflow for getting .d.ts files[0]Does this mean that using Typings is no longer necessary, or is there some additional benefits that Typings still offers?0. https://blogs.msdn.microsoft.com/typescript/2016/06/15/the-f...	jameslk	12.336362	-6.850998	comment	3.0	10.0	1468259470	-10.433493
12073004	The docs / language manual is embera	The docs / language manual is emberassingly sparse right now.The Elm dev(s?) really need to fix the Architecture Tutorial and write a proper language handbook.Right now, the bad docs are pretty off-putting to someone coming to the language.It's a shame, really, because I think Elm is great.	the_duke	13.005508	-7.6889243	comment	3.0	14.0	1468260562	-12.746323
12073087	Do you have the same complaints abou	"Do you have the same complaints about optional parameters too?    let x = (id: number, name?: string) => { return; };

Is it abuse to use interfaces as well? They are not present in vanilla JS.How about React's move away from React.createClass({}) to ES6 classes extending React.Component? Do they abuse classes?Async/await is coming too and it will turn JS on its head, does eschewing callbacks for async functions also count as abuse?I won't even get into generics as that's a whole different can of worms.Microsoft and the TS team have issued a mandate that TypeScript will always be a superset of EcmaScript and if ES2019 includes decorators that are incompatible with TypeScript's then it will be addressed at that time.TypeScript was never meant to be just type annotations+ES6, there is Flow[1"	ihsw	12.354483	-6.8204913	comment	3.0	17.0	1468261234	-10.390062
12073174	>   let x = (id: number, name?: stri	>   let x = (id: number, name?: string) => { return; };hmm, it would make more sense if it was written like that>   let x = (id: number, name: string?) => { return; };But I guess it's more or less ok. But I definitely feel inconfortable with the ! .> How about React's move away from React.createClass({}) to ES6 classes extending React.Component? Do they abuse classes?I don't use React.> Async/await is coming too and it will turn JS on its head, does eschewing callbacks for async functions also count as abuse?The probability is higher for ES to implement async/await than the ! operator. The former is a safe bet, the latter isn't, by a long shot.> Microsoft and the TS team have issued a mandate that TypeScript will always be a superset of EcmaScript and if ES2019 includes decorators that are	spriggan3	12.347972	-6.82677	comment	3.0	12.0	1468261932	8.696838
12073967	There's several reasons, one of the 	There's several reasons, one of the simplest (but not the most trivial) being that I can't share code between the client and the server. For example, data validation. I did a tonne of programming on GWT back in the day, and this was something it actually did well.Most of the other reasons boil down to Haskell not being Elm --- they work in different ways and solve problems differently. There's always going to be impedance mismatch between the two. (Do I solve this problem with monads or with state-mutation functions?) This is going to use up valuable problem-solving bandwidth which I'd rather spend making the project more awesome.	david-given	12.819808	-7.67531	comment	3.0	11.0	1468267309	-12.806465
12074123	Is it me or is the bundle generated 	Is it me or is the bundle generated by Elm a bit too big? Maybe it's gotten better lately but I've always thought it overkill for simple apps.	sotojuan	12.999635	-7.690632	comment	3.0	11.0	1468268333	-12.747036
12088172	In my experience, as long as you hav	In my experience, as long as you have a well tested data model and use proptypes/Flow/TypeScript, testing the components themselves becomes almost entirely irrelevant.However, I can see the utility of component testing if I were wrapping something like Ace editor or a jQuery plugin or something of that nature.	tengbretson	12.377138	-6.7899785	comment	3.0	11.0	1468432274	-10.367401
12094121	Interesting, somehow this project di	Interesting, somehow this project didn't come onto my radar. I was just about to start using Flask to build a REST API for our Oracle database. Definitely checking this out instead.	overcast	12.722068	-6.5398993	comment	3.0	20.0	1468506820	10.003552
12094225	agreed - maybe it will be integrated	agreed - maybe it will be integrated into django someday like south was	misiti3780	12.820542	-6.5645866	comment	3.0	14.0	1468507449	10.151196
12108027	This is the starter code:    publish	"This is the starter code:    publish :: Bool -> IO ()
    publish isDryRun =
      if isDryRun
        then do
          _ <- unsafePreparePackage dryRunOptions
          putStrLn ""Dry run completed, no errors.""
        else do
          pkg <- unsafePreparePackage defaultPublishOptions
          putStrLn (A.encode pkg)


This would be nicer if you could do multiple functions with pattern matching. In Elixir this would be:    @spec publish(boolean) :: any
    def publish(true = _isDryRun) do
          _ = unsafePreparePackage dryRunOptions
          IO.puts ""Dry run completed, no errors.""
    end

    def publish(false = _isDryRun) do
          pkg = unsafePreparePackage defaultPublishOptions
          IO.puts (A.encode pkg)
    end


Pattern matching is pretty powerful, even going as far "	true_religion	12.350226	-7.4462614	comment	3.0	11.0	1468706114	12.902038
12109046	Really, how does it handle parsing? 	"Really, how does it handle parsing?  What kind of languages can you parse?I recall this paper, by Joe Armstrong of Erlang... I'll have to go read it again.""Use of Prolog for developing a new programming language""https://scholar.google.com/scholar?cluster=23466104209097450...Hm after scanning it, I think the reason I never really got it the first time around is that I don't know Prolog :)  Might be time to fix that.What turned me off to Prolog is that there's no way to reason about the computational complexity of the algorithm.  Declarative languages often have this problem.  That's why you have SQL queries that literally take thousands of times longer than a Python script in production (hours vs seconds).  Programming models also need performance models."	chubot	13.133152	-7.275046	comment	3.0	11.0	1468730549	-12.484798
12109444	On my degree we had two tracks on lo	"On my degree we had two tracks on logic programming, the first one just using a visual language for logic and the second one with Swift Prolog, shared between EE and CS degrees, for some of us like myself it just felt natural but the majority hated those lectures.Logic programming seems to be like monads, either you get it or not, but it is hard to explain to others.Prolog and Lisp were the two languages we were forbidden to use in compiler design project, as it was considered ""cheating"" versus using something harder like C."	pjmlp	13.1415	-7.289737	comment	3.0	13.0	1468743135	-12.486612
12111099	In my programming career 3 languages	"In my programming career 3 languages have changed how I look at programming. The first one was scheme which is still my go to language for most of my personal projects. The second one was prolog and the third was Forth/factor.Whenever someone asks where to ""widen their view"" I generally recommend prolog or factor (15 years ago, I would have said scheme, but lisps seem to have been all the rage so I no longer need to)."	Johnny_Brahms	13.144843	-7.2943296	comment	3.0	11.0	1468779487	-12.458325
12118703	you might be interested in http://er	you might be interested in http://erlangonxen.org/ (LING) if you haven't seen it already!	gooseyard	12.558784	-7.5262613	comment	3.0	12.0	1468886529	-4.3587213
12122877	There are a lot of weasel words for 	"There are a lot of weasel words for the other languages, but the comment about ruby is extremely interesting:""For example, the TruffleJS engine which implements JavaScript is competitive with V8 in benchmarks. The RubyTruffle engine is faster than all other Ruby implementations by far. The TruffleC engine is roughly competitive with GCC."""	dangerlibrary	12.569165	-7.007369	comment	3.0	32.0	1468947138	12.349015
12130230	Iunno, what's unique to ruby?I can o	Iunno, what's unique to ruby?I can only think of module mixins. Everything else (blocks, anonymous functions, syntax sugar) can be roughly approximated (i.e. generics), since I strongly doubt the book would use any of the metaprogramming features.	phillmv	12.538563	-7.090068	comment	3.0	10.0	1469031649	12.404046
12135964	Yes, it's a pain and particularly th	Yes, it's a pain and particularly the user authentication solutions are very complex.  The best I have found is this example but it's 100% not a starting point as the first thing you'll have to do is rename everything!https://github.com/hassox/phoenix_guardian	andy_ppp	12.820933	-7.0910063	comment	3.0	14.0	1469097838	12.711237
12137699	I'm not going to be able to comment 	I'm not going to be able to comment on everything on this article and it is indeed a wonderfully put together resource, but I must say that I tend to disagree with the over-all premise. Yes, if you are a first time or beginner developer Rails can be overwhelming and you will learn a lot more by using a smaller framework such as Sinatra.On the other-hand if you are undertaking a medium to large scale project (and not a micro-service), you probably want Rails. With Rails you have the benefit of a complete package of libraries that work out of the box and are quite extensively tested. I can almost guarantee everything else will cause you more pains, subjectively, if you really dislike the Rails style, it may be worth it.I also have a minor quibble with the suggestion that multi-level delegati	forgotpwtomain	12.758374	-6.9044557	comment	3.0	17.0	1469116722	12.349886
12137875	Yes, you shouldn't do Ruby developme	Yes, you shouldn't do Ruby development on Windows if at all possible. But is there any reason why OS X is not mentioned in the Linux section? It is after all what many Ruby developers use.	acangiano	12.61944	-6.957242	comment	3.0	11.0	1469118140	-9.060487
12145741	Purely Functional Data Structures in	Purely Functional Data Structures in Elm – course lecture notes (2015)	myth_drannon	12.720858	-7.572725	story	3.0	84.0	1469212992	7.3617206
12151896	I was under the impression that type	I was under the impression that typescript is a superset of javascript. Is that not the case?	cheez	12.345365	-6.808669	comment	3.0	13.0	1469326365	-10.444457
12157938	No, it is built right on top of Erla	"No, it is built right on top of Erlang for seamless integration, and of note is that it was created by Robert Virding, one of the original creators of Erlang along with Joe Armstrong.LFE macros deliver true homoiconicity to Erlang.
It is a Lisp 2, and supports function and macro definitions at the REPL.I prefer it to Elixir, because I prefer Lisp. Robert has also created a Lua 5.2 written in pure Erlang.Evidently, Erlang's actors and BEAM VM were influenced by the JVM and Scala, so I guess doing a JVM Erjang was in the cards. [1][1]  https://www.infoq.com/news/2011/04/erlang-copied-jvm-and-sca..."	eggy	12.522316	-7.500114	comment	3.0	14.0	1469446739	-5.2676377
12164154	I'm in the same boat, it's one of th	I'm in the same boat, it's one of the only tools I feel almost fanatical about sharing and spreading. It's really nice and it's a shame it doesn't get more love on HN.The only downside is it takes a while to get your head around its object model and how to structure your apps in terms of computed properties and observers. Once that clicks though your in a nirvana of productiveness, and having toyed with the react ecosystem I've got to say that Embers learning curve is a lot nicer.There is Glimmer 2 comming out soonish, fast boot taking off and the Ember engines RFC implemented in the next version. Things are looking good!	orf	13.11186	-6.43742	comment	3.0	12.0	1469521978	-15.511286
12177590	In the Ruby world, very few people u	In the Ruby world, very few people use the standard library because it's got so many flaws, and they can't be fixed. So you end up with Nokogiri rather than REXML, all the various HTTP libs rather than net/*, etc. So it just ends up being bytes sent over the wire, wasting disk and bandwidth...	steveklabnik	12.634524	-6.99672	comment	3.0	13.0	1469665970	12.347071
12181153	Preemptive Scheduling of Erlang NIFs	Preemptive Scheduling of Erlang NIFs	hansihe	12.4511	-7.5207644	story	3.0	81.0	1469722443	12.900098
12191745	I cant believe how much more accessi	I cant believe how much more accessible typescript is than javascript. Type signatures are helpful. Refactoring is so much less stressful. Even things as simple as catching misspelled imports have saved me tons of time.At one point in time, a 'this' bug ate up half of my day. Ever since moving to typescript, I haven't had a single 'this' bug make it past the compiler. I still don't fucking understand 'this'...all I know is that Typescript knows what it is and can tell me to fix something before I send it off to the browser.Typescript will never be my favorite language...not even close. But since we can't actually get rid of javascript, I'm pretty happy we have typescript around to make it not suck so much.	saosebastiao	12.341094	-6.7972875	comment	3.0	15.0	1469855869	-10.427403
12192174	It is interesting for me to follow h	"It is interesting for me to follow how the community mindset develops around TypeScript/JS/... over the years. Many in the JavaScript community frowned upon GWT, Closure Compiler, Dart and other typed compile-to-JS tools, most of which predate TypeScript, and provided state-of-the-art tooling at the time. ""Types are overrated, everything that is non-JS must go away"" was a common mentality.Now some of these people started to see some value in tool-based refactoring, and suddenly realize that types are not always bad. TypeScript undeniably improves the situation over JavaScript, with the caveat that it won't stop you shooting in the foot with the bad parts of JS. So now, types are good, nevertheless JS must stay.I wonder how many years it will take for people to lobby for a clear break of JS"	isoos	12.357693	-6.772802	comment	3.0	17.0	1469867664	-10.439858
12193730	I'll always be upset that my college	I'll always be upset that my college web development class got changed from following this tutorial to early 2000s PHP without a database.	sotojuan	12.783677	-6.603542	comment	3.0	26.0	1469898097	10.316784
12194673	Meanwhile, if you try to run the sys	"Meanwhile, if you try to run the system lldb on the system ruby interpreter on OSX, you get this:  % lldb ruby
  (lldb) target create ""ruby""
  Current executable set to 'ruby' (x86_64).
  (lldb) run
  error: process exited with status -1 
  (cannot attach to process due to System Integrity Protection)"	0x0	12.624837	-7.0207477	comment	3.0	17.0	1469912379	12.408244
12205425	Edit: looks like this is now the 2nd	Edit: looks like this is now the 2nd to last release to support Python2.Original: It doesn't mention it on this page, but this is also planned to be the last Django release to support python2.  Django 2 will require python3.	stenius	12.532223	-6.6583138	comment	3.0	10.0	1470081611	9.971594
12206027	Why a shame? What would Channels buy	"Why a shame? What would Channels buy you if it were included into the framework?I would love to see Django split up into smaller official external packages and repackaged as two or three different official starter packs (Traditional, API, SPA, etc.) with each containing a different set of packages that make sense (DRF, Channels, Models, Views, Forms, etc.).I know this goes against the current ""Batteries are included"" model, but why can't we treat Django as the standards body, and the various starter packs as the more targeted ""batteries are included"" frameworks."	hrayr	12.802388	-6.553661	comment	3.0	14.0	1470085920	10.083975
12210906	I love how close some of these are t	"I love how close some of these are to plausible.""HelloWaurd"", ""ruby-franwork"", ""Contect-Server"", ""php-squere"", ""griend"" (friend + grind?).Also: ""libdog"". A library, for dogs. Does exactly what it says on the tin."	camtarn	12.48215	-6.9165306	comment	3.0	12.0	1470153886	12.448724
12219031	Yea you are correct. Just saying whe	"Yea you are correct. Just saying when you read a Django tutorial and they say a ""View is not a View"", meaning that the Django View is different... that is not exactly newbie friendly."	rampage101	12.838159	-6.531942	comment	3.0	10.0	1470240799	10.082741
12220223	They're also the ones bringing PHP i	They're also the ones bringing PHP into the modern world and making it much harder to sneer at.There are some plain-crazy things about this language, but there are also some plain-crazy things about other popular languages too. It's like we forget that JavaScript was absolutely reviled for over a decade. PHP is undergoing a JavaScript-like transformation, though it will never get that kind of popularity because of the lack of client-side browser usability.	busterarm	12.709962	-6.617394	comment	3.0	19.0	1470248672	10.314795
12223674	Is Elixir really fast for web apps t	Is Elixir really fast for web apps though? According to the web framework benchmark [1] the performance of Elixir is pretty bad - it's consistently slower than python and ruby frameworks.[1] https://www.techempower.com/benchmarks/#section=data-r12&hw=...	continuations	12.675604	-7.4080815	comment	3.0	14.0	1470290107	12.897134
12223697	I'm the author of Kemal(kemalcr.com)	I'm the author of Kemal(kemalcr.com), a simple, fast and modern web framework for Crystal.We've been using Crystal in production(at Protel) for more than 6 months for some heavy load APIs (100-200 req/s). We've replaced our Rails API with 64 unicorns to just 1 Kemal process and it's not even breaking any sweat while consuming nearly 100x less resource and 30x less CPU.You can ask me about our experience.	sdogruyol	12.6294	-7.245129	comment	3.0	19.0	1470290468	-11.237997
12223768	I have seen Erlang VM handle 100k re	I have seen Erlang VM handle 100k requests per second on a distributed clusterA single JVM server can do that load, scaling and providing fault tolerance for a server that just accepts requests is trivial these days, also, if your requests do computationally intensive stuff you are going to have a very bad time with Erlang.It all depends on the problem domain.Exactly, and the domain for Elixir/Erlang is way more niche and specialized than applicable domains of other languages.I don't have anything against Elixir but part of its crowd just advertises it as the best thing for everything.	Scarbutt	12.6201725	-7.482664	comment	3.0	11.0	1470291945	12.918762
12223778	Crystal doesn't support a REPL yet b	"Crystal doesn't support a REPL yet because inferred static typing complicates incremental compilation.Blog: https://crystal-lang.org/2014/12/06/another-language.html
Github Issue: https://github.com/crystal-lang/crystal/issues/681"	mshenfield	12.610438	-7.2591333	comment	3.0	10.0	1470292055	-11.199353
12224116	Crystal seems to be targeted at a do	Crystal seems to be targeted at a domain where ruby is not fast enough. That includes domains where GC is a problem.A tracing GC means that you either have to deal with potentially long GC pauses or you need a lot of extra free memory at all times to give the GC time to catch up before running out of memory [1].Go says it can achieve 10ms max pause time using 20% of your CPU cores provided you give it 100% extra memory. In other words, memory utilisation must be kept below 50%.Cloud/VPS prices scale roughly linearily with memory usage. So using a tracing GC doubles your hardeware costs. Whether or not that is cheap depends entirely on what share of your costs is hardware cost and how much productivity gain you expect from using a tracing GC.I would be very interested in learning how much C	fauigerzigerk	12.608421	-7.2324715	comment	3.0	13.0	1470297618	-11.242821
12224631	"""Friendly for newcomers""? I tried to"	"""Friendly for newcomers""? I tried to write something the other day, and had an Erlang developer friend to help me. The Elixir docs section just says ""buy one of these books to get started"", which is completely unacceptable, and we (mostly my friend, as I had no idea what anything is) spent an hour trying to figure out how to run a node, with Google not providing any useful answers.That's as hostile to newcomers as it gets. Contrast this with the Rust book, that gets you from ""I have no idea how anything works"" to ""hey I just wrote a small program!"" in a few minutes."	StavrosK	12.639568	-7.4855757	comment	3.0	13.0	1470307110	12.935311
12231526	I haven't done anything with Smallta	"I haven't done anything with Smalltalk, so I can't comment on it. However, learning Lisp (using SICP) and Prolog are both good choices. SICP uses Scheme. It'll teach you how simple concepts can be composed to build any software you want. You'll come to understand how interpreters work and execution models. With Prolog, pattern matching will become a dominant way of thinking. Prolog is also fairly unique in its backtracking execution model: backtracking is ""baked into"" the language itself.Later on you can utilize your knowledge of Haskell and Prolog by studying Curry, which (sort of) marries the two together.Depending on the area of AI you choose, Lisp can be a good choice but Prolog can be as well. The class I took focused on supervised learning with support vector machines, decision trees"	bpyne	12.363922	-7.290291	comment	3.0	15.0	1470398115	7.0640516
12251060	Eh, in Ruby, just installing Rails i	Eh, in Ruby, just installing Rails is like 80 dependencies.  Would be surprised if Django wasn't 40+	ebola1717	12.801375	-6.6825128	comment	3.0	10.0	1470692330	10.209092
12264897	This appears to do exactly the same 	This appears to do exactly the same thing as Oracle's Crystal Ball add-in: Monte Carlo Simulation for business forecasting.The only difference I can see is the incorporation of a more sophisticated process for getting estimators.Can somebody explain to me how this is better than Crystal Ball? Or am I missing the point?http://www.oracle.com/us/products/middleware/bus-int/crystal...	R_haterade	12.6347885	-7.2483907	comment	3.0	10.0	1470864887	-7.4179187
12296510	Why is it 'clearly' on its way out? 	Why is it 'clearly' on its way out? IMO Rails is still the best web framework around, and the last release has really put it ahead of its closest competition.	jsmith0295	12.752763	-6.9258432	comment	3.0	12.0	1471343407	12.344535
12308173	"    .col-md-8
       #{@record.name}"	"    .col-md-8
       #{@record.name} / #{@record.description}
       - binding.pry
       = check_box_tag(display, true, @record.display, :disabled => true)
       = _('Display in Catalog')

Ruby syntax is terrifying. There is so much going on here I can't even begin to figure out what this code is supposed to do."	csense	12.489833	-7.0858784	comment	3.0	11.0	1471465654	12.360667
12319220	No it's not easy. You need to be sur	No it's not easy. You need to be sure you escape everything, setup a mecanism for allowed host, CSRF, anti click-hijacking and of course ensure your auth workflow is nicely designed.And that supposes that not only you know about it, but also how to implement it properly. Not to mention the time to code it, document it, test it and maintain it.Most custom PHP site I encounter are full of gigantic holes.And then other developpers comes in, and have to learn how to use your non standard code, that is unlikely to be half as well written, tested or documented than standard solutions.Of course custom code has also a cost, which means doing all that, even not very well, will take a toll on the budget, which you can't spend on other security aspects. All that while security is generally the last i	sametmax	12.806065	-6.5323644	comment	3.0	18.0	1471604923	10.220419
12319292	PHP was the first language I ever us	PHP was the first language I ever used professionally. The code I wrote - the code every single one of my colleagues wrote - was atrocious. We were paid bottom dollar ($30k in 2008) to write absolute shit code. The PHP community in my area was the same. All newbies, all paid barely more than a fast food manager, all writing code that could be taken down by a HS student with Fiddler.I'm sure different experiences exist, but the majority of folks who I speak to have experiences that match mine very closely.PHP is a ghetto.	pc86	12.772313	-6.642932	comment	3.0	13.0	1471606087	10.332155
12325504	Would PHP have become popular if MyS	Would PHP have become popular if MySQL had maintained a strict license? I wasn't a web developer at the time and am genuinely curious what the database landscape was like back then.	ben_jones	12.851226	-6.525416	comment	3.0	11.0	1471675392	10.218833
12329133	Perl is a great language. I haven't 	Perl is a great language. I haven't had an op to use 6 yet but 5 is great for small programs.The big problem with Perl is it requires discipline to prevent creating a mess for your team or eventual successor.	meddlepal	12.341811	-7.05181	comment	3.0	12.0	1471745434	13.177837
12344393	Here's the thing though: The end use	Here's the thing though: The end user, the one who pays the majority of our bills, doesn't give a shit about your language choice, your code, your DB choice, or any of it. They care if it works, if it's easy to use, and usually if it looks nice and that's about it.People publish blog posts about how they aren't using MongoDB or aren't using PHP anymore because X and Y and do you know who cares? Pretty much no one aside from the pro PHP people who get mad or the anti-mongo people who point to it as justification for their part in a completely pointless argument.Yes, low skill and approachable languages attract amateur coders because that's what they're supposed to do. PHP was designed from the get go to be an accessible web server language that anybody could use, that was the POINT so natur	FussyZeus	12.764907	-6.655005	comment	3.0	15.0	1471965475	10.312906
12351168	As my PHP fluent colleague said to m	As my PHP fluent colleague said to me - don't bother learning PHP or you will end up having to fix (our) Wordpress sites and thats a nightmare. We have a Python application, and while its not written well, the PHP sites we have seem to be a fair bit worse even the ones not done in Wordpress.	collyw	12.751568	-6.646666	comment	3.0	27.0	1472037554	10.339043
12351211	Wordpress is horrible. Never going t	Wordpress is horrible. Never going to touch that again (Senior PHP Dev myself) or anything else like it (Magento, Drupal,...).And yes there is a lot of horrible PHP code out there, writting by bad developers. I guess newer or not as accessible languages don't have as many bad devs as PHP/JS.But if you have good devs, I prefer a good PHP codebase to any other language that I have come across (I tried a lot of them).	dreistdreist	12.743885	-6.621655	comment	3.0	23.0	1472038070	10.319397
12385413	...You know, they could just limit m	...You know, they could just limit monkey-patching, and drop call/cc and a few other features (not having call/cc opens a lot of options), and they'd have a dramatically easier system to work with, right?When was the last time somebody used call/cc in ruby code, anyways? By current implementation, it's only useful for thought experiments and toys, and we have Scheme for that.In short, deoptimization seems like a case of solving one of the sinister black tendrils of the problem, not the root cause.	qwertyuiop924	12.550792	-7.062124	comment	3.0	21.0	1472505389	12.382873
12390782	Speed is one thing, but the fact tha	Speed is one thing, but the fact that you must replicate your business model client AND server-side with Elm is a huge minus. I would take ScalaJS over any 4 of those frameworks any day.	asciihacker	12.676824	-7.6508126	comment	3.0	16.0	1472569550	-12.760463
12395704	+1 on RiakCS. They now call it RiakS	"+1 on RiakCS. They now call it RiakS2 for kicks. The scalability and reliability of their server is insane. You just can't beat Erlang software in that regard.Unfortunately, Basho has been so successful with their TSDB and KV products that they have basically put S2 on maintenance mode. They are still ""supporting"" it, but no new features. I was hoping this Minio tool could do something similar, but with a single daemon is a single point of failure. Unacceptable for serious deployments."	Natales	12.550027	-7.48776	comment	3.0	10.0	1472612432	9.894924
12398164	Fun is in the eye of the beholder. I	"Fun is in the eye of the beholder. I'm worried that Elixir will take off because it's ""hip"" and ruin the chances for other people to use a pure and consistent language (Erlang) at work.It is amazing what kind of middleware bloat is forced unto people these days."	9919839219	12.665517	-7.4716973	comment	3.0	13.0	1472650622	12.939675
12397673	What I found interesting (or very, v	"What I found interesting (or very, very boring, depending on how you think about it) about this when I first saw it is that this ability is just due to the nature of how receive works. That is, you can receive any kind of message, at any time. Want to listen to a different set of messages? Just call a different receive clause, be that in a different function, or inline.I remember having a coworker who was in love with Akka. He was trying to sell everyone on it, despite my team's having a strong Erlang presence. He showed us Akka's ""become"", talking about how powerful that could be, and how Erlang didn't have anything comparable. He didn't seem to realize that Akka's needing a special keyword for it was actually a limitation rather than a feature, that Erlang didn't have a special keyword t"	lostcolony	12.408796	-7.5076632	comment	3.0	18.0	1472645704	12.888318
12403826	Great share, but I'd like to kindly 	Great share, but I'd like to kindly suggest that you think again about your conclusions there. You were dismissive of an entire programming language and its community (we've all been there), and then 1 member of that community did something impressive, and you changed your entire opinion of said language and community (I guess most of us have been there too).Wouldn't it be a much more interesting conclusion that there's fantastic people and not-so-fantastic people everywhere and it mostly just depends on where you look?I mean, HN likes to be very dismissive of PHP but at the same Composer (the de-facto PHP package manager) avoids dependency conflicts entirely and provably because it contains a home-cooked SAT solver[1]. In PHP. Tackling an NP-complete problem without breaking a sweat. To m	skrebbel	12.76516	-6.653918	comment	3.0	15.0	1472720125	10.314684
12415815	Ask HN: Code School for web dev/stac	Ask HN: Code School for web dev/stack basics?	staticautomatic	12.420417	-6.44294	story	3.0	1.0	1472846182	6.7455516
12424173	https://enboard.co - a web app where	"https://enboard.co - a web app where you can create ""boards"" filled with linksSome examples of such boards:• https://enboard.co/web/• https://enboard.co/frontend/• https://enboard.co/webdesign/• https://enboard.co/startup/It'd be willing to hand it to someone (on partnership basis) who could maintain it and grow it.Stack is Linode/Ubuntu/Python/Django/Sass."	DominikSerafin	12.7245245	-6.446752	comment	3.0	11.0	1472995059	9.927111
12434332	How is that a good thing (sass)? Tha	How is that a good thing (sass)? That means that instead of having a full JS build now they need Ruby too...	eloisant	12.621722	-6.7532945	comment	3.0	10.0	1473149226	12.295909
12440905	It defaults to the OpenSSL userland 	It defaults to the OpenSSL userland CSPRNG, if available, because Ruby's maintainers believe (incorrectly) that urandom is unsafe for key generation.	tptacek	12.56697	-6.977967	comment	3.0	29.0	1473221277	-8.367356
12451132	> The slides say that an exception i	> The slides say that an exception is thrown if an object of a different guild is accessed, but doesn't that mean that Ruby needs to check the guild at every object access?Ruby is already checking the class of the object on every access. You could combine the guild and the class into a tuple and compare against that instead, so it adds no extra overhead.There is a paper at OOPSLA this year on doing just that http://2016.splashcon.org/event/splash-2016-oopsla-efficient...	chrisseaton	12.463758	-7.128961	comment	3.0	14.0	1473321976	12.290849
12457788	"Typescript is great and is ""natively"	"Typescript is great and is ""natively"" included in Angular2, however it's not the case for react and vue.js ecosystems.Tried to use/learn typescript, in the meantime I wonder if there is a document showing how to use certain ""safe"" javascript along with its strict mode to make javascript secure enough so that I don't need use Typescript? i.e. how about using a subset of native javascript with certain rules that can achieve what typescript provides, is this enough? is 'strict-mode' the answer?If there is a book/blog stating ""using javascript the way as your typescript"" I will buy it right away. :)"	ausjke	12.3643465	-6.7934604	comment	3.0	16.0	1473372353	-10.460792
12457889	The standard recommendation seems to	The standard recommendation seems to be to use PropTypes. And also in general, to use Babel with React programs. Would be interested to hear experiences of using Typescript with React.	Brakenshire	12.555915	-6.568063	comment	3.0	11.0	1473373005	-10.450341
12470849	Tcl is a better lisp than Ruby. Homo	Tcl is a better lisp than Ruby. Homoiconic. Yield and tailcall make it easy to implement FP idioms. Macros available if needed.	kevin_thibedeau	12.476469	-7.0554776	comment	3.0	21.0	1473541043	12.3954935
12487069	This entire article is about Elixir,	"This entire article is about Elixir, not Erlang. Can someone fix the submission title?Also this fits with my experience with Elixir. I can apply all my OOP baggage very well in Elixir; one active process maps beautifully one object.The only thing I miss is a clear _terminology_ distinction between the Elixir versions of an object and a class. Both are called processes, which is a bit messy. Strictly a process is just the runtime thing (the ""object"") and the ""class"" is just a function (or, in practice, a module that follows a certain convention). But I've heard many people refer to the latter as ""processes"" too and I'd love a better word."	skrebbel	12.605386	-7.4866514	comment	3.0	12.0	1473765964	12.927488
12506726	That depends on circumstances really	"That depends on circumstances really. Yeah it's easy to fix dumb code... unless there's 10 tons of itI once worked with about 1.5 million LOC worth of ""naive"" PHP code. It was one big e-commerce system. The SSOT principle wasn't followed, certain assumptions were scattered all over the place.For example the fact that a product could only ever belong to a single size group. The task we were given was to remove this constraint. It took a few man-years of work, because it was hardcoded EVERYWHERE, from database scripts to frontend JS. And don't even get me started on how many bugs angry customers encountered before it got kind of stable.It wasn't overengineered, just dumb, and a lot of it. I'd much prefer having to deal with some matryoshka OOP abstractions - they could be merged, simplified "	V-2	12.781474	-6.630867	comment	3.0	11.0	1473951763	10.334884
12509624	Instead of microservices, I split my	"Instead of microservices, I split my projects in tons of libraries and think of them as products, enforcing a well thought of and consistent api (usage api, not http one). I call that an atomized monolith.I get the cool things about microservices: properly isolated functionalities, ability to assign a team on it, simplicity of code and considering each feature as important, not just ""that thing in the codebase"".But it also have all the good parts of monolith: easy deployment and local setup, aggregation made easy, and ability to run integration tests.For my rails projects, geminabox was of great use for me to achieve this, as it allowed me to host private gems. Lately, I've done a lot of golang, and was surprised to see how it's a natural pattern with go packages.Only hurting part for ruby"	oelmekki	12.557789	-7.0547895	comment	3.0	12.0	1473971881	10.364529
12510640	I will never voluntarily allow Ruby 	I will never voluntarily allow Ruby into any stack I control or work on ever again.	KirinDave	12.619087	-7.056846	comment	3.0	14.0	1473981245	12.406437
12520858	Elixir is great in the sense of attr	Elixir is great in the sense of attracting people who are interested in functional programming, distributed systems, and scalability, but aren't willing to give up pragmatism/productivity/readability in exchange. In my experience, these are the best kinds of people to work with. Cs theory + get shit done = good engineering.	danenania	12.68558	-7.439044	comment	3.0	13.0	1474125886	12.919429
12523869	Ewww, You Use PHP? (2010)	Ewww, You Use PHP? (2010)	acangiano	12.760569	-6.6348867	story	3.0	14.0	1474171220	10.3595
12866474	That is interesting, I did not know 	"That is interesting, I did not know that.Still, I don't want to use TypeScript for the reasons I wrote. I'm as minimalist as possible, and I don't want to use a language that changes my code to something else without any gain for me since I can write exactly what I want in ES 2015+ already. So it's just those types, and I could get them from ""Flow"" too and in that case keep my ES 2015+ code. Yes I know TypeScript is very close to ES 2015+, but I never know when it does change the code unless I look at the transpiled result.EDIT: Actually, I did know that, looking at that page I remember why I dismissed it:  > Note any tags not listed explicitly below (such as @typedef, or @constructor) are not yet supported.

But that is something I make heavy use of. It would be really messy if I wasn't a"	Noseshine	12.378125	-6.781344	comment	3.0	13.0	1478197038	-10.437578
12879503	For comparaison, Ruby 3 is gonna int	For comparaison, Ruby 3 is gonna introduce a pretty big breaking change (frozen string literals) but they already shipped a way to optional enable it by-file (magic comment) and globally to the ruby interpreter (just a parameter) so that all the libraries and projects can slowly fix it in a compatible manner (often just calling .dup is enough).So that's when it's time for Ruby 3 the transition will be pretty painless.More info: https://wyeworks.com/blog/2015/12/1/immutable-strings-in-rub...(Frozen string literals allows strings to be in memory only once and not having to reallocate each time, so a pretty big memory and cpu optimization)(Also for instance rubocop already recommends adding the magic comment to all ruby files)	dorianm	12.519726	-7.056048	comment	3.0	16.0	1478349525	12.367673
12888924	I love perl 5 and have been using pe	"I love perl 5 and have been using perl since 1997.  I haven't touched perl 6 yet simply because the whole mess is still too confusing.  It's not obvious what I should download and the frequent release announcements just confuse the issue further.  If I want perl6 why am I downloading rakudo star?  What the heck is a moar vm and why do I care?  Why is the download page telling me it supports ""Christmas Perl 6 (6.c language version)?""  What is 6.c?  Are there multiple versions of perl 6 that I have to worry about?  Why does every release announcement say something like this:""Please note: This announcement is not for the Rakudo Star
distribution[^2] --- it’s announcing a new release of the compiler
only. For the latest Rakudo Star release, see
<http://rakudo.org/downloads/star/>.""Perl 5 is mu"	saberworks	12.329101	-7.06764	comment	3.0	10.0	1478495076	13.183841
12890300	Because we aim for organic growth: n	Because we aim for organic growth: not too fast and not too slow. Based on stats, our userbase doubled since last year; and that's with an yet-to-be-optimized compiler that's an order of magnitude slower than competitors and by some people's standard not yet production ready.It'll also take a bit for people who loudly push 25-year-old languages like Python and Ruby like holy grail to... die off (no, I don't want them to convert). Perl 6 is a next generation language over them and it'll take next generation of programmers to make use of the new programming paradigms.What you're probably asking is why hasn't Perl 6 went viral like Swift, Rust, or Go? Well, we don't have a multi-million (or -billion) company backing us, so fanboys and people who are after the latest shiny things aren't flocki	zoffix222	12.3286295	-7.039425	comment	3.0	27.0	1478518309	13.173863
12891401	I think the biggest problem Perl6 fa	"I think the biggest problem Perl6 faces now is the perception that it is unfinished. This is mostly a problem of their own making. The language was in development for 15 years! In that time people got it drilled into their head that it wasn't done yet and likely would never be.While this perception did hurt Perl5 it seems to have also hurt itself since reading this thread and seeing the number of people saying that it is ""still in progress"" or ""still changing"". This brings me to my second point, and the one that frustrates me more.In fact Perl6 was released as stable 1.0 on Christmas of 2015.  You could be excused for not noticing it. There were a few articles in a few technical journals in the months leading up tot he release but mostly the release day went by completely unnoticed and bar"	joelberger	12.340886	-7.0465064	comment	3.0	11.0	1478530240	13.172903
12902197	TypeScript 2.1 RC: Better Inference,	TypeScript 2.1 RC: Better Inference, Async Functions, and More	DanRosenwasser	12.355994	-6.789062	story	3.0	31.0	1478626443	-10.442834
12915900	The creator of Elm works for your co	The creator of Elm works for your company though [1]. Seems like your experience is going to be a lot different from the average developer because you can probably walk 20 steps to the designer of Elm to ask a question. I haven't used Elm just raising the point.[1] https://twitter.com/czaplic	renlo	13.004862	-7.687974	comment	3.0	11.0	1478733767	-12.762513
12916378	> Elm code is boilerplate heavy, it'	"> Elm code is boilerplate heavy, it's a trade off you guys have made to make the language simple.I just straight-up disagree with this. If Elm added Haskell-style typeclasses today, and we refactored our whole code base at work to use them, I bet it would save us less than 1% LoC.This is such a weird thing to try to respond to. It's like a group of people started insisting that JavaScript's big problem is all the parentheses, and accusing JavaScript developers of sticking their fingers in their ears about the most obviously glaring weakness in the language.What reasonable response can anyone make to that claim, except ""I really don't think that's what the language should focus on improving?"""	rtfeldman	12.978137	-7.6691847	comment	3.0	19.0	1478737270	-12.747946
12916529	Could anyone more knowledgable expla	Could anyone more knowledgable explain whether or not my feeling is correct that Elixir becoming (relatively) popular is making Erlang a less viable choice? Whereas the total number of libraries may be increasing, code that might have been written in Erlang is now written in Elixir and established Erlang codebases (RabbitMQ for one) have started to migrate (parts) to Elixir. Calling Erlang from Elixir is easy, but what about the reverse? It reminds of me of how, at least in the early days, Play Framework (largely Scala) could be used from Java but not without much friction. Should I prefer Erlang as a language for its maturity and fewer constructs, it would be a pity to then miss out on new libraries or frameworks, such as Phoenix, that revolve around Elixir.	thijsvandien	12.623721	-7.491733	comment	3.0	17.0	1478738518	12.938741
12919265	Anyone has a small-ish gig where I c	Anyone has a small-ish gig where I could learn Phoenix/Elixir? I am a senior level programmer but all my experience is with PHP/Drupal. I would very much like to work on a smaller side (15-20 hrs a week) gig learning Phoenix/Elixir. A lot of experience is going to transfer, I hope (problem solving is not really language dependent) and so I think I offer a pretty good deal: you could get a very experienced coder for a language learner's rates :)	chx	12.757262	-7.298984	comment	3.0	11.0	1478774236	12.826995
12941787	James, check out Mercury next as it'	James, check out Mercury next as it's a faster, better Prolog with some industrial use.https://mercurylang.org	nickpsecurity	13.143266	-7.295029	comment	3.0	14.0	1479009772	-12.482656
12945457	There's also the hugely popular Hugi	There's also the hugely popular Huginn, if you're on a Ruby stack (Trigger Happy seems to run on Django) https://github.com/cantino/huginn	danso	12.814877	-6.4970946	comment	3.0	12.0	1479068859	10.057583
12964595	Elm – “Designing to infantilize a ta	Elm – “Designing to infantilize a target audience is how we got Java”	HappyAndHarmles	12.996097	-7.682202	story	3.0	7.0	1479271550	-12.76736
12970605	PHP is some tool that was never real	"PHP is some tool that was never really good, but had some compelling features that no other tools provided. Except that now there are better tools for any task it solved, excluding the task of ""maintaining a PHP codebase"".If you are starting a new project on it, you should indeed feel silly."	marcosdumay	12.766271	-6.631984	comment	3.0	15.0	1479324893	10.32883
12971681	I'm a big fan of Ember, although a w	I'm a big fan of Ember, although a word of warning: To get the most out of Ember you should follow the Ember way of doing things, we found our selfs wrestling with Ember data, and APIs that don't follow standard responses (this is to be expected mind)Still a great framework for large web apps.	joshuahornby	13.109505	-6.443936	comment	3.0	12.0	1479331382	-15.509008
12989416	https://www.trip.com is 90% Rails I'	"https://www.trip.com is 90% Rails I'd say.
Everything you see on the surface is Rails.As you grow, you do less of ""belongs_to"" and ""has_many"" and you do way more Ruby and way more Glue code that will work with all the models in the system and generate something for the user.Scaling is a big issue, you constantly work around ""best practices"" that don't scale. (active-model-serialization for example) in favor of more fine-grained control over your models and data flow.These days, the work is about 45-45-10, 45% you do APIs, 45% you do JS/React/etc... and 10% you do ""Rails"" (likely even less).When the project grows, the monolithic nature of it starts to be a very big pain in the ass. We are moving more and more into services that do one thing well and not automatically include everything into"	avitzurel	12.750434	-6.925405	comment	3.0	10.0	1479497420	12.348927
13004604	Ruby 2.3.3 released	Ruby 2.3.3 released	lucascaton	12.633568	-7.0366673	story	3.0	205.0	1479728064	12.378902
13006546	There is rubyspec, but it doesn't co	There is rubyspec, but it doesn't cover all possible paths, just the ones that the developers deemed important enough to test.What I am curious to know is _what_ does ruby use besides rubyspec? Do they run tests against the top 100, 1000, etc rubygems before releasing? I know other communities like Rust (and even Perl) do this kind of regression testing. While this won't catch all possible regressions it seems like a reasonable starting point to uncover issues before a release.	dkubb	12.6724825	-7.018486	comment	3.0	14.0	1479745312	12.392859
13013291	Is quality Typescript/Node.js code, 	"Is quality Typescript/Node.js code, which is ""intelligently decoupled"", harder to maintain than poorer quality code?"	i_feel_great	12.3603735	-6.8022904	comment	3.0	10.0	1479813845	-10.431933
13017123	This is how it works in Ruby.In the 	"This is how it works in Ruby.In the CRuby/MRI interpretter when a segfault happens it calls the #to_s method on the current execution context, to get the some memory address and technical details. Ruby happens to be flexible enough that you can override that method. Then you can call whatever you want and you have effectly ""recovered"" from a segfault. The parser is totally in an inconsistent state and could crash at any moment for any reason but it works often enough people have done it live in front of audiences for talks.It is not officially specified that I am aware of that overloading #to_s on anything allows recovering of segfaults it is intended for converting things to_strings.For more on what I mean start reading the Ruby standard, which was about 1,500 pages last I checked. Then c"	sqeaky	12.482377	-7.060872	comment	3.0	13.0	1479844891	12.365765
13019050	I'm going through it as a tech profe	"I'm going through it as a tech professional who is a non-developer. I know how to code, I just don't do it professionally (and I don't know Ruby, let alone Rails).I'm loving it. Obviously the ""here are some commands"" and ""go find Google Chrome"" made me laugh a little but I understand the audience they're for. I love how quickly we get into actually creating something, it keeps my interest when I see progress. It's been 15 minutes and I already have a Rails blog set up, yay!Seriously, I haven't gotten that far in, but right now I'm fully believing there is a success story with your teaching method. Congrats, that's not an easy feat."	freehunter	12.73876	-6.9266047	comment	3.0	11.0	1479862577	12.366614
13024241	If you want to use Python then use D	If you want to use Python then use Django. As with any framework, it can be hard to work around but Django gives you the most options to work around the framework than any other framework I've found.Normally, if you are having a hard time with Django its because you're trying to work around it the wrong way. This takes time to learn but Django can be really elegant to work around and with.The second option is Flask or Tornado which are pretty great too. Both would give you more freedom but also less structure. I find it better to have the structure because unless your an experienced engineer your Flask or Tornado project will turn messy quick.  Django projects can turn messy too, but at least there is a more training and protocols for people to follow.I use Flask/Tornado if I want to use P	cyberpanther	12.784256	-6.5134497	comment	3.0	12.0	1479923152	10.026956
13039010	see, you can still scale and make mo	see, you can still scale and make money with Rails in 2016, even if it's not cool anymore :)	riffraff	12.76535	-6.942154	comment	3.0	13.0	1480100165	12.348861
13052264	First, TypeScript type definitions a	"First, TypeScript type definitions are almost the same as standard JavaScript JSDoc type annotations, so (to the level they're used in Immutable.js), yes, people should learn them.Second, TypeScript should be considered a best practice for nontrivial JavaScript development in 2016. And pretty much any app that would benefit from Immutable.js would be ""nontrivial"" by that definition.Third, everyone using JavaScript or TypeScript knows what a Map is, I would hope. The docs for it that read ""Immutable Map is an unordered Iterable.Keyed of (key, value) pairs with O(log32 N) gets and O(log32 N) persistent sets."" are perfectly legible to me, having never used Immutable.js, just because I had a few undergrad (not ""a Ph.D."") computer science classes. I don't even have a computer science degree [0]"	SomeCallMeTim	12.326428	-6.8116336	comment	3.0	10.0	1480289196	-10.407942
13054030	Is anyone aware of a supervisor syst	Is anyone aware of a supervisor system like otp supervisors that manage unix processes? I'm trying to throw together a collection of small services on a server in a reliable way, and there doesn't seem to be anything that does this on the OS level.	andrewchambers	12.465792	-7.461531	comment	3.0	19.0	1480319370	12.91111
13056537	Yep. Then we would also use it to bu	Yep. Then we would also use it to build high-level research data processing tools at university (http://pharmb.io).Right now, I'm sifting through the internet to find any other (up to date) similar system supporting datalog querying.Let me know if you know about one!(Only one I found so far being Cascalog [1], which is unfortunately only supporting old sluggish hadoop)[1] http://cascalog.org	samuell	13.201012	-6.92954	comment	3.0	17.0	1480351361	-12.353182
13062585	Thanks! Datalog library for clojure 	"Thanks! Datalog library for clojure is something I should definitely look up.Will think hard about the suggestion of using some functional language instead also ... you for sure got me thinking! :)Feel free to share any pointers regarding this!In the meanwhile, sharing my thoughts so far: What I have so far thought was pretty ""unique"" about datalog is that it support ""named queries"", which can be used as a kind of ""duck typing"" classification, to build up a model of your domain of interest that is always computed on-demand, leaving the raw data unchanged in it's default (""normal""?) form.Because of the ""named queries"", you can combine lower-level queries in higher-level ones, to create a hierarchy of ""dynamically generated concepts"", which I haven't seen any other technology be able to do.("	samuell	13.16355	-7.162663	comment	3.0	12.0	1480422071	-12.429345
13085095	>  Angular is a not a JavaScript fra	">  Angular is a not a JavaScript framework, but a TypeScript framework. TypeScript likes to pretend it is safe because it is strongly typed. This is somewhat true, but TypeScript suffers from the exact same problem Java does - it is not null safe. Worse, because TypeScript has no runtime component and emits no warnings for many unsafe casts, the language only offers the illusion of safety. For instance, this is perfectly valid TypeScript code that raises no warnings.TypeScript has compiler flags to give compiler errors when null errors are possible. You can also turn off the implicit ""any"" type and use linters to stop explicit use of it.It's a pretty good compromise given it has to work with what's out there already and it's certainly an order of magnitude safer than plain JavaScript."	seanwilson	12.338753	-6.8416424	comment	3.0	11.0	1480640283	-10.448124
13087064	I agree OOP PHP is way to bloated fo	I agree OOP PHP is way to bloated for a dynamic language. Did they have to copy Java?I feel like PHP5+ was made by Jetbrains to sell their overpriced Web IDE solutions.	naranha	12.714856	-6.6471505	comment	3.0	15.0	1480667696	10.328181
13087367	It gotten tons of syntactic improvem	"It gotten tons of syntactic improvements and bells and whistles after version 5.It got a proper, rewritten, parser.It got a free-double-the-speed update for almost all working code in version 7.It got a full featured package manager (composer).It got many next-generation frameworks and libs that don't fall prey to the issues that plagued early PHP codebases.It got the ""share nothing"" model correctly from the beginning.It's still the easiest and cheapest to deploy, and has tons of extensions for everything.There's active work for a JIT and async (a la Node/Tornado etc) hooks."	coldtea	12.7204275	-6.5634046	comment	3.0	18.0	1480672200	10.321218
13088066	As somebody not into the whole ruby-	As somebody not into the whole ruby-ecosystems: What's an example that breaks compatibility between ruby and other implementations? And what's so wrong with JRuby that you won't even consider it?	LeanderK	12.489149	-7.004627	comment	3.0	12.0	1480681965	12.319231
13088257	Yeah PHP can be pretty slow. For exa	Yeah PHP can be pretty slow. For example on the symfony3 project (also with Vuejs) I currently work on which has ~6 doctrine DB classes, 5 controllers and returns just a simple json representation (1kb) of one the entities using symfony serializer I get response times of 70ms in production mode on an i7-4790K with 16 Gigs of ram. Getting the same entity simply from CouchDB yields response times of 3ms.The problem is that PHP needs to bootstrap the entire environment for every request (minus some more or less efficient caching) which may be OK for monolithic applications but as soon as you want to build an app on HTTP2 that runs many requests, it will just always feel sluggish. And for this symfony already cheats massively by merging all class files into one huge bootstrap.php file etc. PHP	naranha	12.730727	-6.629713	comment	3.0	15.0	1480684413	10.284524
13089316	haskell on rails. the amazing static	haskell on rails. the amazing static typing, binary compilation, etc of haskell, with a large ecosystem and monolith framework (like rails) behind it. haskell's community's focus on challenging, technical, scientific or mathematical problems has left normal web developers plainly not using it. but as our rails codebase has grown, it's hard to identify refactoring issues outside of obessive and overlapping unit tests.i think Java actually comes closest to what I want here but unfortunately it's pretty hard to get past all the cruft the ecosystem has accrued over the years, plus it's java and marketing that as a company/developer sucks. also java is missing some expressiveness of haskells TS	jtmarmon	12.554815	-7.1169014	comment	3.0	13.0	1480692506	12.322488
13092588	"> Logic systems don't have ""And noth"	"> Logic systems don't have ""And nothing else will ever be true!"".Uuh. Closed world assumption? Everything that is not true is false. Most logic systems do have this. Prologs (not a logic system I know) cut operator even turns this statement into an operation.I feel like Rich really gets it wrong this time. His request to support all the abominations that you have ever written and keep them compatible with recent changes, might work if you have people pay for using your library and a company behind it. But doesn't fly if you maintain these things out of goodwill in your anyhow limited spare time.The best example of this style going horribly wrong are the linux kernel file system modules. Different api versions all in use at the same time by the same code with no clear documentation on what "	j-pb	13.135338	-7.2863255	comment	3.0	13.0	1480715034	-12.498482
13107108	I wonder what the benefits of this a	I wonder what the benefits of this approach is to say, a json driven microservice between elixir and ruby?	mackdaddysly	12.696711	-7.3946557	comment	3.0	16.0	1480958539	12.867514
13108019	I don't see any practical use for th	I don't see any practical use for this. You're just sending text around. This breaks most OTP conventions, you lose insight from the Observer, etc..If all you want is message passing you should just use something like zeromq which would allow for a lot more than just Elixir to Ruby.	poorman	12.624132	-7.407592	comment	3.0	16.0	1480963395	12.873834
13124583	I have to second Mr.timruffles. Afte	I have to second Mr.timruffles. After using TS in a couple of projects I grew to miss it when I couldn't use it.If you don't like the C#-ness of Typescript, try using Facebook's flow. Typing isn't a magic bullet, typescript isn't even type safe, but it sure makes development easier and your apps more stable.	g00gler	12.411853	-6.800451	comment	3.0	15.0	1481133680	-10.44758
13124692	One thing I never understood with Ba	One thing I never understood with Babel is which features are shimmed in the output JS and which features are re-implemented?What I means is: I didn't know how to tell Babel which browsers I was targeting, and I'm pretty sure that some of their feature implementations do not feature test the platform before activating, since they were so compiled in.  Is that the case?Also, do you have to tell TypeScript your target runtime for it to it to use it's ES3 async/await logic vs. it's ES2015 (which uses generators), or does it automatically figure it out?	euroclydon	12.383928	-6.4547887	comment	3.0	12.0	1481134365	-10.428438
13127250	Yeah, I cottoned to that eventually 	"Yeah, I cottoned to that eventually - it's short(er)-hand for Perl 5's qw() construct. I guess Set is a method (coercer!) of...lists? List-shaped things? Sets seem list-shaped, although indexing doesn't work by any syntax I could find, and certainly not by any that an @ sigil should suggest. Can I call Set on a set? Does it do something weird if I do? And if I'm going to deal with this kind of high weirdness, why not just bite the bullet and go with Haskell or even Urbit? This just feels like it's trying to out-Ruby Ruby, and Ruby is Ruby enough already.The OP had some snark to offer on the subject of ""Texas"" operators, and the documentation lists them by their Unicode glyphs. That they work I get. But I think it's reasonable to gather a sense of second-class citizenship from their present"	throwanem	12.368175	-7.0950627	comment	3.0	10.0	1481154111	12.416039
13127325	I am a Ruby dev so I definitely don'	I am a Ruby dev so I definitely don't pretend to know, however it does seem wild that something like Babel is even needed.It seems to me that it's like trying to mix Ruby 1.8.7 and 2x in the same project and needing a tool to translate it into 1.9.3. Why not just write in 1.9.3 if that's the required target?I clearly don't know what I'm talking about but what's wrong with actually just writing the JavaScript that Babel spits out? Why is something like Babel even tolerated? What I mean is that I would never try to mix five different Ruby versions and expect that to be a good practice. Someone educate me -- I'm not entirely sold on what's happening or why it's considered good.	briandear	12.588519	-6.8668017	comment	3.0	11.0	1481154959	12.323462
13137094	>PHP made web development accessible	>PHP made web development accessible to the masses. Because PHP is embedded in the HTML itself, it is way easier to work with than Perl or Java, especially in the context of The Web In 1999.PHP didn't make it easy. It made it possible.Until fairly recently, getting a VPS was insanely expensive, so any learner, hobby, startup went to shared hosting.As a result, any tech which required starting servers or elevated permissions was out, so Java and ISAPI (remember that?) were out.So the only choice was PHP/ASP or perl/C/tcl cgi scripts.cgi scripts had to be located in the /cgi-bin directory, so they looked ugly in the URL and simply wasn't designed for the web (so no url_parsing libraries (but no register_globals!)) and no git/github/blogs/stackoverflow whee to just go and download them.So one	dispose13432	12.6717005	-6.6410437	comment	3.0	12.0	1481265059	10.291569
13138022	Exactly.While Datalog is a subset of	"Exactly.While Datalog is a subset of Prolog, Datomic isn't Datalog. From their tutorial:    [:db/add ""foo"" :db/ident :green]

This isn't Prolog syntax at all. Prolog would be    assert(""foo"", ident, green)

Franz, Inc. does it as well - calling something Prolog for their Lisp product which it just isn't.I've nothing against Clojure but I wish the functional programming fans wouldn't call their DSLs Prolog or Datalog. If you're using Prolog or Datalog, you're expecting it to be (reasonably) portable accross Prologs, which this isn't at all."	tannhaeuser	13.127026	-7.2978783	comment	3.0	12.0	1481281533	-12.412598
13149574	I find the Ruby solution more elegan	"I find the Ruby solution more elegant: https://github.com/bruceadams/pmape.g.: Replace:    require 'open-uri'
    (1..100).map { |i| open(""http://httpbin.org/get?a=#{i}"").read }

To:   require 'open-uri'
   require 'pmap'
   (1..100).pmap { |i| open(""http://httpbin.org/get?a=#{i}"").read }

From 17.55s to 0.72s."	dorianm	12.470566	-6.691135	comment	3.0	11.0	1481430068	12.338775
13160523	I understand why the Ruby community 	I understand why the Ruby community has warmed up to Elixir and the Phoenix web-framework, however, I'm curious what the advantage or use-case of having Ruby talk to Elixir in an application is?	arcaster	12.705475	-7.4000607	comment	3.0	14.0	1481567796	12.863194
13164596	I used Typescript on the front end a	I used Typescript on the front end a couple of years ago but not on the back end yet. I imagine that it would be better than es6 since there would be some typing. I'd still rather go with C# and not have to deal with callback/promise land.	santoriv	12.381429	-6.5321155	comment	3.0	29.0	1481605446	-10.321617
13165161	Not op, but:IMO somewhat uninformed 	Not op, but:IMO somewhat uninformed opinion (longtime dev on two of the biggest platforms, played a bit with node etc a few times) the Javascript ecosystem has seems to have numerous issues. Here is my impression:- being equally bad or worse than php in a number of ways (I used to write php, the right way ; )-to: having bad dependency management-to: the complete ecosystem being in a churn, always. Like if php constantly was having the php4-5 transition or if python 2 and 3 was simultaneously in a flux.-to: being pushed for the wrong reasonsSame goes for gradle (and I guess a number of other hip technologies):I start looking into it and it turns out it isn't even faster! The unique selling point of gradle seems to be that it is not xml-based or something.Thanks but no thanks. Not interested	reitanqild	12.657205	-6.5425615	comment	3.0	17.0	1481613862	10.35736
13193555	Yes, I worked on a startup that did 	Yes, I worked on a startup that did pretty much something like Ruby on Rails, but with TCL, inspired by AOLServer.The speed critical parts were written in C and loaded as TCL extensions.Back in the first .com wave.It also taught me to never again use a programming language without JIT/AOT compiler on their standard toolchain for heavy loads.	pjmlp	12.532768	-6.991629	comment	3.0	11.0	1481899754	12.343344
13200503	I'm excited about this release becau	I'm excited about this release because it means that developers of frameworks and libraries that target SQL Server will no longer need to have Windows available to test their software. As a specific example, the SQL server backend for Django could now (soon) be bundled with Django directly and enjoy the same level of support that other backends do. It'll also mean that users will be free to run Django on Linux, and use the drivers to communicate with a windows or Linux based SQL server.I should note that Django isn't planning to add more backends to the core project, and has actually discussed moving some into separate packages. But that doesn't mean a backend couldn't be developed by the Organisation.	jsmeaton	12.804114	-6.5735307	comment	3.0	22.0	1481978818	10.080663
13209737	Pretty easily. Crystal looks like Ru	"Pretty easily. Crystal looks like Ruby, but it doesn't feel like Ruby or work like Ruby. It seems fine, in a very Golang ""it works for projects where you need to fling a blob of binary somewhere"" sort of way, but it's not remotely as dynamic-as-a-language as Ruby (and that dynamism is precisely why I use Ruby), nor is it dynamic-as-a-platform--something like CLR assembly loading or Java classloading to get a statically-typed, reflective representation that gives me something similar. And you might not need that, and it's totally cool. But Ruby enables a lot of things Crystal, as designed, seems unable to.It's not bad. It's fine. Not the pejorative, dismissive sort of ""fine"", but fine. But it's not Ruby. Ruby is slow in large part because Ruby does hard things. Some of them aren't really ad"	eropple	12.622409	-7.2175474	comment	3.0	21.0	1482127271	-11.241311
13209946	I've been using and contributing to 	I've been using and contributing to Crystal since 2015 and i can easily say that it's really great potential. It's simple, fast and productive from day 1.I wrote a web framework (http://kemalcr.com/) and it's in production without any problem for more than 1 year on a big scale app. You can check my slides for some interesting graphs (http://www.slideshare.net/sdogruyol/kemal-rubyconfbrasil-201...)Also be sure to check out http://crystalshards.xyz/ to discover Crystal projects(shards).	sdogruyol	12.629073	-7.2411656	comment	3.0	11.0	1482131342	-11.22997
13211216	You seem to make the assumption that	You seem to make the assumption that crystal's purpose is to be for ruby developers, and as soon as it deviates from ruby, you've switched gears and might as well use Java or C.I don't think that's the case. Crystal takes its syntax from ruby because it's easy to write, easy to read, and familiar, it doesn't have to be the same as ruby in semantics. In fact that's impossible because it's statically typed (which I personally prefer to ruby).If you're going to resort to Java or c for speed, why not use crystal? Crystal beats Java and c on expressivity of type system, expressivity of code (less boilerplate) and performance per unit effort (at least on common tasks). So the question is why Java or c? They both certainly have larger and more mature ecosystems, and if you have compute-heavy work	RX14	12.618731	-7.239713	comment	3.0	10.0	1482154150	-11.256003
13215305	Reducing the maximum latency of a bo	Reducing the maximum latency of a bound buffer in Erlang	red_bikeshed	12.530493	-7.4879813	story	3.0	165.0	1482184411	12.901686
13216543	Sure, like this:  %__MODULE__{buffer	"Sure, like this:  %__MODULE__{buffer | size: buffer.size + 1, queue: :queue.in(item, buffer.queue)}

So that involves a bunch of operators that are very specialized to Elixir -- the %, the | are both very unclear in my opinion.  And the __MODULE__ construction is clumsy.Or worse:  {:ok, {
      :ets.lookup_element(buffer.ets, pull_index, 2),
      %__MODULE__{buffer |
        size: buffer.size - 1,
        pull_index: rem(pull_index + 1, buffer.max_size)
      }
    }}

Same problem as above, plus the nested set structures that Erlang loves, but which rapidly become super difficult to decipher.  Oh, and also the overloading of atoms to work like pseudo-objects."	aetherson	12.520926	-7.4501314	comment	3.0	14.0	1482196901	12.903162
13227088	One of the best (or worst) bugs fixe	One of the best (or worst) bugs fixed was the aborted transaction for PGsql. I am pretty sure hundreds of Rails developers are battling it every day and don't understand where it's coming from.Even if you don't upgrade, this is something you should backport using a monkeypatch.	avitzurel	12.746528	-6.9403367	comment	3.0	10.0	1482299569	12.337606
13228593	Interesting, my experience is the op	Interesting, my experience is the opposite: liberal use of ruby's dirty tricks often makes code hard to understand and thus debug.	rmchugh	12.594403	-7.0396695	comment	3.0	10.0	1482323738	12.372927
13227029	TLDR: Definitely worth upgrading.App	TLDR: Definitely worth upgrading.Approximately hundreds of small bug fixes, across much of  Rails. The fixes include some important ones for database types, time comparisons, thread issues, record reloading, etc.IMHO these fixes address dozens of bugs that could cause major puzzlement for a typical Rails developer.Thanks to all the contributors for excellent work on this release.	jph	12.738656	-6.95298	comment	3.0	32.0	1482298534	12.371721
13235324	I share the author's optimism.  I wo	I share the author's optimism.  I work for a start-up, and we just released a mobile app that uses Elixir on the back end.  I'm the architect on the project, and this was my first time using Elixir professionally.  I've been blown away by the speed and stability of the product, the ease of hot deployments, and the intuitiveness of Elixir's syntax.  Behaviors are amazing, and for the first time in my career, concurrency isn't a huge pain in the ass.  The codebase is extremely easy to maintain and organize, and Elixir just takes baby sips at our cluster's resources.  Elixir has far exceeded my expectations, and has provided me with one of the smoothest product launches of my 27-year career.  I cannot speak highly enough about it.Regarding learning Elixir, I thought LearnElixir.tv was great, 	innocentoldguy	12.680968	-7.4355135	comment	3.0	20.0	1482388161	12.91708
13248109	From an Erlang/OTP vantage point, wh	From an Erlang/OTP vantage point, what Elixir ended up being famed for is its relatively good tooling.	_nato_	12.647709	-7.4722013	comment	3.0	10.0	1482542133	12.945196
13249529	> Elixir has it all (well, almost). 	"> Elixir has it all (well, almost). It's fast, it's [...]Dude, Elixir compiles to BEAM, it's slow as hell. Have you ever compared its
processing speed with virtually anything else? It's not processing speed that
Erlang is sold about."	dozzie	12.609913	-7.469404	comment	3.0	20.0	1482582121	12.892766
13264274	I watched both of his talks, but I'v	"I watched both of his talks, but I've never heard before about this ""code on the slide was not valid Perl"" complaint.You're not talking about a small typo, are you?Can you point to the wrong examples/slides?"	berdario	12.3301935	-7.02999	comment	3.0	10.0	1482858112	13.171574
13271084	A good tldr of the resulting change 	A good tldr of the resulting change here: https://blog.heroku.com/ruby-2-4-features-hashes-integers-ro...	fbernier	12.577884	-7.062188	comment	3.0	10.0	1482939059	12.388847
13283802	I think Crystal is a very practical 	I think Crystal is a very practical language to work in for web. It doesn't have the polish of Go (yet), but it feels more approachable to me. Rust has its place with low-level systems work, but Crystal gives you something that is reasonable to write and still compiles to a binary. In turn, it performs well and is easy to distribute, deploy, and containerize as well.	andyfleming	12.552993	-7.254908	comment	3.0	29.0	1483096124	-11.2007885
13283905	> it doesn't sound like it brings an	> it doesn't sound like it brings anything new to the tableA fast and typed Ruby, isn't it enough? ;)	galfarragem	12.585484	-7.088067	comment	3.0	16.0	1483098618	-11.143826
13289180	Sure. Basically, a bunch of scriptin	"Sure. Basically, a bunch of scripting languages (Ruby, PHP, Python, a few others) share the same properties, that make them hard to compile:- they're not really specified anywhere- they use `eval` and similar dynamic constructs- they allow you to mutate your data in weird ways (in particular, you can change variables dynamically by knowing the name of the variable, aka ""variable variables"").I looked at how to solve these problems in PHP by embedding the PHP interpreter into the compiler as well as into the compiled program. Then I looked at how to do alias analysis in PHP - alias analysis is a type of static analysis to figure out which names in the program point to the same value. This had been done before for a subset of PHP but not for the full generality of the language, in particular "	pbiggar	12.6646805	-6.6481977	comment	3.0	14.0	1483153013	10.3207245
13293624	Looks like recursive anonymous funct	Looks like recursive anonymous functions were introduced in Erlang R17, which is quite old now. Does anyone know the current status of this feature in Elixir or if it has been implemented yet?	jswny	12.5665	-7.4675426	comment	3.0	12.0	1483224503	12.939186
13300662	I first thought cool. On second look	"I first thought cool. On second look I see it is based on PHP. I'm sure newest PHP is really fast and advanced but I don't want to invest any of my time on that language (just my personal opinion).
Update: OK, it also runs on nginx. Made a wrong claim it does not run on it. Sorry."	therealmarv	12.770931	-6.615291	comment	3.0	11.0	1483358652	10.299933
13309343	The core team indicated they quite l	The core team indicated they quite like the sequential numbering that SVN gives them. I'm considering building it into GitLab as an option if they would use it to host ruby :)	sytse	12.525649	-7.055994	comment	3.0	11.0	1483454050	6.3257923
13310788	Perl 5, of course!It's an awesome la	Perl 5, of course!It's an awesome language and both the language and the ecosystem is getting better and better all the time	mfontani	12.33257	-7.036415	comment	3.0	15.0	1483464012	13.184221
13311096	I think that's not quite right.Elixi	I think that's not quite right.Elixir is a subset (nay, it's a language within it's own right language now, the method chaining syntax is very readable) of Ruby running on the BEAM vm from Erlang.. not Erlang itselfCrystal is a native compilation of Ruby (or a subset at least), not Python btw.	_joel	12.655026	-7.462272	comment	3.0	11.0	1483465713	12.913087
13322817	> LinkedIn has bet big on Ember.I li	"> LinkedIn has bet big on Ember.I like how as technologists we talk about ""betting"" on things. As if technology choices are like gambles."	dkarapetyan	13.116734	-6.4435573	comment	3.0	21.0	1483569790	-4.4822927
13323696	I'm not sure why you want to compile	I'm not sure why you want to compile Elixir or Erlang to JS... Most of the magic of the language is provided by BEAM and OTP which for a multitude of reasons cannot be properly implemented in any JS engine/backend I'm aware of. If anything I'd think the abstractions of Elixir/Erlang would be cumbersome and very awkward when writing performant code which had to be transpiled to JS. The biggest reason being is BEAM can do preemptive scheduling, interrupting a running process to ensure all have equal execution time. This is a stark contrast to everything I know about how most any other VM or runtime work (which cannot preempt).While yes the language is nice, I think using something like Opal would provide most of the syntactic pleasantries while being easier to understand when it comes to tun	rubyn00bie	12.594375	-7.4392366	comment	3.0	11.0	1483577285	12.901102
13329563	"it is just a chat client
why does it"	"it is just a chat client
why does it need to support all those languagesi understand that Perl5, isn't really exciting anymorebut .. i think it's ok"	systems	12.338264	-7.0394225	comment	3.0	14.0	1483639234	-13.568091
13347151	TypeScript is the modern way to 'do'	TypeScript is the modern way to 'do' JavaScript. It solves every problem that JavaScript ever had.	ClayFerguson	12.357496	-6.7106457	comment	3.0	17.0	1483829518	-10.431692
13350453	Nope. At least my annual efforts to 	Nope. At least my annual efforts to dig into that direction always fail. It seems, that there is something: literal programming, html-based prolog posted here recently (someone please help to recall its name). But it is not exactly that. And it always contains esoterics under the hood. I want C, C++, Perl, Java, anything mainstream; not Prolog.I'm too busy and too single to make prototype on my own (and more related ideas on top of that in thoughts.txt). I've posted this in forum comments for years, and sometimes got critics that made me temporarily think it is just another view on existing techniques (as of company-wide, not person-wide). Now I run the company and this got only more demand.Honestly, maybe I'm just doing existing things wrong, idk.	wruza	13.148744	-7.294552	comment	3.0	11.0	1483892996	-12.4752245
13366720	Flow is cool, but TypeScript has way	Flow is cool, but TypeScript has way more traction. Would jump on this in an instant if it had TypeScript support and a VS Code plugin.	SomeCallMeTim	12.42991	-6.7035885	comment	3.0	13.0	1484069302	-10.44171
13390253	> Especially C codeIsn't WhatsApp an	> Especially C codeIsn't WhatsApp an Erlang app?	hellofunk	12.713418	-7.340159	comment	3.0	11.0	1484310082	12.787807
13396646	Rails is not that employable anymore	Rails is not that employable anymore. Sure, you can find gigs for it in tech hotspots, but that's true for any language. For people living in the Real World outside of the tech bubbles, Rails jobs have mostly died out and been replaced with Node jobs.	cookiecaper	12.738161	-6.947606	comment	3.0	12.0	1484364155	12.361844
13434300	Oh boy. And here I am still using Py	Oh boy. And here I am still using Py2.7 with Django 1.6	karthikp	12.833073	-6.5468087	comment	3.0	12.0	1484817461	10.091853
13434460	>and if you're starting a brand new 	>and if you're starting a brand new Django project there's no reason on earth you should choose Python 2 anymore.How about millions of lines of code in your company in Python 2, and several Python 2 based services and websites?Why on earth will you go to Python 3 at huge rewriting costs? To get some fancy syntactic sugar and improved unicode?	coldtea	12.55329	-6.6718626	comment	3.0	17.0	1484819503	9.925016
13434193	This call has been made a while back	This call has been made a while back, and it makes perfect sense. Python 2 is slowly being EOL'd and if you're starting a brand new Django project there's no reason on earth you should choose Python 2 anymore.Sure legacy projects still need support and for that they get the 1.11 LTS, but otherwise it's really time to move on.	yuvadam	12.770975	-6.601838	comment	3.0	53.0	1484815954	10.051676
13435869	I always expected Pyramid to offer s	I always expected Pyramid to offer some performance benefits over Django, given the origins (taking the best of framework X and Y), esp given that you can choose your own ORM (e.g., SQLAlchemy), etc.However, once you're out of the unrealistic scenarios (single query benchmarks, etc.), it doesn't do that well[1]. It's not prohibitively slow, but to make the jump from something as well documented and with as large a community as Django, most developers would need to see major gains in one or more areas; performance, docs, community, coding efficiency, etc.Pyramid doesn't offer these gains. It only makes promises about maintainability, which are hard to verify, unless you personally know somebody that you trust as a skilled developer, and who has worked on a sufficiently large enough project 	mangeletti	12.829707	-6.5554304	comment	3.0	15.0	1484835220	10.043641
13437010	I keep coming back to the idea of le	I keep coming back to the idea of learning erlang/elixir. Can you point out the resources you've been using? Functional programming is still a little foreign to me.	spyspy	12.537416	-7.492886	comment	3.0	11.0	1484843266	12.9113035
13437198	I used Pyramid for a couple of large	"I used Pyramid for a couple of large projects back when it was Pylons, and around the time of the merger that resulted in Pyramid.Django has grown up a lot in the last several years. It used to be really hard to use a different templating language, and I personally really dislike Django's templating language. That was the biggest turn off for me every time I looked into Django. If it had been pluggable earlier, this probably would've changed the calculation for me.I've always thought of Pyramid as the ideal framework, conceptually. It feels like you're writing Python, not Pyramid, which is GREAT. Pyramid only shows up when you say ""OK, I have my Python stuff; I need to make this show up in the web browser now."" It is entirely unobtrusive. All frameworks should strive for that.Unfortunately"	cookiecaper	12.796969	-6.5052614	comment	3.0	11.0	1484844441	10.080883
13446975	So besides Elixir and Erlang, is any	So besides Elixir and Erlang, is anyone using any other language in this family in production?	ocschwar	12.607657	-7.491373	comment	3.0	15.0	1484946412	12.900752
13447907	I am curious if you or any of the ot	I am curious if you or any of the other Elixirists(not sure what the community is called) spent time learning Erlang first or jumped right to Elixir? If yes would you recommend spending time with Erlang first or is not necessary? I guess I don't know if there is an Interop similar to Clojure and Java.	bogomipz	12.665637	-7.4960337	comment	3.0	11.0	1484956271	12.926097
13448056	More importantly, a lot of this is d	More importantly, a lot of this is diminished in importance in Elixir by supervisors. Its ok to just let code crash and reset in small chunks in Elixir. Code in Elixir should be structured to take advantage to the ability to crash and recover gracefully.	ch4s3	12.635269	-7.463315	comment	3.0	35.0	1484958261	12.939332
13448407	How about Crystal, then? It's largel	How about Crystal, then? It's largely Ruby syntax with most of it's OOP model, minus some of the metaprogramming. But it's statically typed with a good type inference system, and it's compiled.That way, you get the expressiveness of Ruby (mostly) with the benefits of static compilation. It also has macros to make up for some of the missing metaprogramming.	goatlover	12.511825	-7.1103616	comment	3.0	10.0	1484965232	-11.142713
13449397	This looks pretty interesting. It ma	This looks pretty interesting. It makes me want to learn OCaml. :-PI've been using Coffeescript in projects for about two years. I know people have raised issues with it vs ES6, but I still really like Coffeescript. I feels more natural with my Scala/Ruby background and it outputs into Javascript in ways that (mostly) make sense and are predictable.	djsumdog	12.406295	-6.5852013	comment	3.0	17.0	1484988224	-10.518454
13449440	This is the answer I was hoping I wo	This is the answer I was hoping I wouldn't get.I understand that it runs on BEAM, much like I understand that IronPython runs on the CLR.However, IronPython's performance is slower than C#'s performance due to the dynamic nature of the language, even with the special builtin support that MS built in.What I was asking is whether or not Elixir's performance characteristics were significantly different from Erlangs.	braveo	12.641636	-7.4511037	comment	3.0	14.0	1484989459	12.906898
13452120	I've been in a pretty similar situat	I've been in a pretty similar situation.I think for many folks Haskell is too big of a gulp all at once. It's not that it's too hard (I think that's a bit of a myth). It's that it's just too different. It's hard for an experienced Java programmer to go from being highly productive to seriously struggling to even solve FizzBuzz in Haskell, let alone dealing with lazy IO and various terms and concepts that don't show up anywhere else like monad transformer stacks.In my experience, this is where languages like Elm come in and are extremely valuable. This is also why I think Elm is much more important than PureScript. I've recently had a lot of success advocating for and using Elm for an internal tool at work. We've now got several thousand lines of pure Elm code, and for the most part everybo	nilkn	12.937986	-7.6642113	comment	3.0	13.0	1485032346	10.338855
13457778	I built a non-trivial webapp in node	"I built a non-trivial webapp in nodejs + Typescript but abandoned it due to these issues:1. You can generate source maps for your TS files, but node can't use them. There is some support for source maps via the node-source-map-support, but it doesn't play well with a lot of stuff out of the box. Just getting accurate stack traces in my logs turned into a project of its own.2. Most node libraries don't include type definitions, and what is on DefinitelyTyped is more likely than not to be out-of-date and inaccurate. Having the wrong type definitions might be worse than none at all, which means for the most part you'll be declaring a lot of stuff as ""any."" It makes even preserving the types in your own code difficult, as anything that touches a 3rd-party library is going to come back as the a"	pyrophane	12.368333	-6.609008	comment	3.0	13.0	1485121992	-10.463681
13458494	It takes a while to get used to the 	"It takes a while to get used to the idiomatic constructs of a language. Luckily it's much easier than with natural languages.My first Ruby programs were very Java like. I doubt that my first Java programs were C like, if you use classes and methods it just can't be. No problem with using Python and Ruby together. They are maybe like German and English, close but clearly distinguishable. And Javascript, Perl, PHP, Elixir... too long to write about.A consequence of multilingualism is that one starts noticing the differences in the implementation of the same features in different languages. Some are smooth, others are frustratingly hard to use or to remember. A quick test on a trivial nuisance, you must not Google it: in Python it's array.join("","") or "","".join(array)? And ""1,2,3"".split("","") o"	pmontra	12.449449	-7.038076	comment	3.0	11.0	1485129133	12.386637
13460347	I always wonder if this could be don	I always wonder if this could be done once and for all languages, instead of Ruby making bundler, Haskell Cabal sandboxes or stack, Perl Brew, etc. Is this where Nix is going?	zoul	12.521821	-6.9544177	comment	3.0	10.0	1485153996	12.367774
13475235	Do you realize how silly this sounds	Do you realize how silly this sounds?  You are disregarding not only Erlang, but decades of research and development on concurrent programming best practices.  Immutability has been promoted for parallel programming since the 1970s.  For the past fifteen years, even languages like C++ have moved to promote this style of programming.(Also, Erlang has a compile-time static type checker, if type safety is something you're after.)	gamache	12.340308	-7.5038114	comment	3.0	16.0	1485290264	12.872402
13475567	That's true, but when I read that se	That's true, but when I read that sentence I place the emphasis on should. I see it as aspirational.A better way to phrase this would perhaps would be to say that perfectly preemptive scheduler should be able to keep all cores hot. Blocking of one Erlang process should not halt the program's progress.As Erlang requires message passing overhead by design, it will never see perfectly linear scaling behaviour. Still, its scheduler, its GC model and M:N threading implementation are extremely robust and can be relied upon to write extremely reliable networked services.	timClicks	12.375397	-7.500488	comment	3.0	12.0	1485292674	12.874278
13475737	Rails, as any backend system such as	Rails, as any backend system such as Drupal or Symfony, is inevitably a dead end technology.The web is increasingly moving frontend and the system of 2018 onwards will simply be the M in MVC.Note, I'm not saying Rails is not worth learning. I'm just saying it's now the Cobol of web technology.	0xsnowcrash	12.7859335	-6.8665304	comment	3.0	13.0	1485293582	12.341868
13476065	Each user today commands a personal 	"Each user today commands a personal fleet of many devices.  ""You get to use Ruby"" is a weak justification for a monolithic architecture."	patsplat	12.669981	-6.980887	comment	3.0	18.0	1485295322	12.354855
13475606	Erlang is a great programming langua	Erlang is a great programming language after one takes the time to understand the principles underlying it and its design. Everything fits very nicely into place. There are definitely things that could be done better, but then that’s the case with most programming languages and technologies after they have accumulated some dust. Elixir on the other hand, in my personal opinion, is a false prophet simply because it looks like something which it isn’t. It looks like Ruby and gives the programmer the feeling that he’s right at home, except it is in fact a very different beast with very different semantics, Erlang semantics, as opposed to Ruby. Therefore, if you want to program on the BEAM (the Erlang virtual machine) you better make sure you actually understand the system, its design, princip	mnd	12.600657	-7.4757056	comment	3.0	19.0	1485292921	12.913024
13476851	>only if your program is embarrassin	>only if your program is embarrassingly parallel is irrelevant, because a almost every program is embarrassingly parallel in Erlang. The language is built around concurrency to the point that parts which wouldn't be obviously parallel in another language are in Erlang. Further, slow hashes in crypto have taught us that is actually quite difficult to make something which can't be parallelized.OK. Not an Erlang user, but I can't let this statement go.I've studied parallel numerical algorithms. Many/most of them will involve blocking because you're waiting for results from other nodes.If you're saying Erlang has somehow found a way to do those numerical algorithms without having to wait, then I'd love to see all those textbooks rewritten.Amdahl's Law reigns supreme.	BeetleB	12.453995	-7.509001	comment	3.0	17.0	1485300850	12.903868
13478572	Well Coffeescript was refreshing in 	Well Coffeescript was refreshing in being very terse and introducing a lot of niceties that were missing in JS. It was also trivial to introduce footguns given its whitespace rules and some pretty radical syntax rules.New Javascript has basically taken the best that CS had and wrapped it in the necessary turd that is backwards compatibility in a hastily designed language, but the results speak for themselves and modern JS is just much more pleasurable.	Daishiman	12.405737	-6.524436	comment	3.0	10.0	1485319107	-10.52673
13477422	Maybe a more relevant question is wh	Maybe a more relevant question is whether Rails is worth learning if you're looking for a job. Searching Indeed.com's API by title, which removes duplicates, there are currently 133 Rails jobs in the USA compared with 763 PHP (excl. WP, Drupal etc.) and 467 Node.js. In the UK there are 104 Rails jobs compared with 1013 PHP (excl. WP, Drupal etc.) and 230 Node.js. However, if you deleve deeper it turns out that half of the Rails jobs are in London. Outside the capital there are 22 PHP jobs to every Rails job (35 including WP, Drupal etc.) and 3 Node.js jobs to every Rails job so it would appear that unless you have a particular preference for the Ruby language Rails is not a good bet in today's job market.	cutler	12.718055	-6.953931	comment	3.0	11.0	1485305867	12.362708
13478432	Actors should be in a process no? If	Actors should be in a process no? If it's in a thread then it'll take the main process down with it.Erlang's BEAM VM every actor is in it's own process. So if something goes bad then it can be restarted via supervisor.Scala is on JVM and JVM isn't built with concurrency in mind and I think Erlang's BEAM is too good at this. Akka is gimped too, you have to write actor a certain way iirc other wise it takes over the scheduler. BEAM is preemptive, it doesn't matter if you have a for(1) loop, your process/actor can only take some much of the cpu time.I think hands down Erlang is a really really beautiful language for concurrency. It's syntax is ugly but it's such a small language that does everything you need for concurrency. Scala is just big and there are so many way to shoot yourself in the	digitalzombie	12.339427	-7.514501	comment	3.0	11.0	1485317534	12.838948
13491666	I used Laravel for some projects tha	"I used Laravel for some projects that deal a few users. 
Where I work, we are reviewing different stacks for a project that will deal with a bigger quantity of users and I would really like to use Laravel, does Laravel have some performance issues or similar stuff when dealing with lot of users?"	garymoon	12.810942	-6.6337276	comment	3.0	10.0	1485441454	10.367742
13498190	> They are two different species a c	> They are two different species a compiled vs VM based languageThis is an implementation detail.Anyone can write a VM for Go, or an AOT compiler to native code for Elixir.	pjmlp	12.622335	-7.4795785	comment	3.0	22.0	1485499365	12.925876
13540148	Django needs this kind of performanc	Django needs this kind of performance boost, without depending on gunicorn/uwsgi servers	tuyguntn	12.766003	-6.5079823	comment	3.0	11.0	1485951891	9.997079
13545927	Ask HN: Worth switching from PHP to 	Ask HN: Worth switching from PHP to Java?	gotojava	12.677513	-6.6682773	story	3.0	7.0	1485987359	10.273063
13546074	If you like all the things that are 	If you like all the things that are positive about PHP I would not touch Java. Rather look into Nodejs or Go.Those Java jobs that pay a lot in the banking sector etc are soul crushing. Slow release cycles and being a very little cog in a big machine...For ultimate developer happiness look into modern Perl!	vgy7ujm	12.708104	-6.649742	comment	3.0	13.0	1485988504	10.295363
13547015	"How is Spring Boot ""enterprisey""? It"	"How is Spring Boot ""enterprisey""? It makes modern java programming simpler and more accessible by hiding some of the unnecessary complexity. It enables things like https://jhipster.github.io/ which to me is the Rails equivalent in the java world."	bjoernw	12.3852625	-6.9451404	comment	3.0	12.0	1485996355	8.929821
13552151	My favorite conference talk is about	My favorite conference talk is about the multiple facets of Erlang that combine to make it such a great language. Take an opinionated language, an opinionated VM, and a focus on a specific problem space, and magic happens.Take one or two features from Erlang into another language, and you have meh.	macintux	12.570937	-7.5176964	comment	3.0	12.0	1486055291	12.925029
13551609	Not sure why it should be trusted mo	"Not sure why it should be trusted more than Akka or Akka.Net. Akka is much much more than just ""actors""."	ex3ndr	12.363282	-7.4717183	comment	3.0	11.0	1486052145	12.714077
13577919	Other languages can definitely do it	"Other languages can definitely do it:Ruby:    class X
      attr_accessor :y
    end

Crystal (full working example):    class Y
    end

    class X
      def initialize(y : Y)
        @y = y
      end

      def y
        @y
      end
    end

    y = Y.new
    x = X.new(y: y)
    puts x.y"	dorianm	12.405025	-7.164616	comment	3.0	15.0	1486373309	-11.197393
13580088	I honestly haven't heard of anyone u	I honestly haven't heard of anyone using Perl for anything new. Sure there is a lot of legacy Perl 5 being used and maintained, but Perl 6? For a new project? I've never even seen it on a short list.	ams6110	12.334008	-7.052354	comment	3.0	25.0	1486393935	13.184523
13581293	As someone who knows neither version	"As someone who knows neither version, I find this surprising.  Surely, even if none of your code works, switching from Perl 5 to Perl 6 is much less of a ""culture shock"" than switching to, say, Ruby or Python?"	marvy	12.339542	-7.0498214	comment	3.0	12.0	1486399857	13.182377
13587436	What are your thoughts on Elm compar	What are your thoughts on Elm compared to the other three?	Jarwain	13.010031	-7.6902857	comment	3.0	17.0	1486447472	-12.75713
13590638	That was great to read.As soon as he	That was great to read.As soon as he said mod_perl I knew where things were headed. Having used both mod_perl and PHP (and ColdFusion - anyone remember that?), perl was just a nightmare to use well for this.Then when he talked about the custom templates written in perl? That's why PHP was invented, because at its core it is a template language. (i.e. the pages are HTML, with code inside them, rather than code, and HTML is treated as a string.)I suspect that if the forums had been written in PHP they would not be getting shut down right now.And yes, I know that people love to hate on PHP (including the author who said he disliked PHP because he didn't use it). But sometimes the tools you choose make a huge difference.It was a great writeup though, really brought back memories.	ars	12.683279	-6.731309	comment	3.0	24.0	1486486522	13.091888
13590832	I thought it was odd that he says th	I thought it was odd that he says the cool kids were using Perl. I taught myself Perl from a book in the late 90s and couldn't find any kind of welcoming community on the internet, while PHP was the complete opposite. Since it was made for the web it flourished there; PHP even had user comments on its own documentation!	ukyrgf	12.66071	-6.725794	comment	3.0	11.0	1486487800	13.07788
13606692	Elixir hasn't gone through the usual	Elixir hasn't gone through the usual hype phases because it's just syntactical sugar, less boilerplate and more modern than Erlang making it more palatable for Ruby/Python devs.The BEAM VM is what makes all this possible and the BEAM VM has been around for decades.	hackerboos	12.651817	-7.457922	comment	3.0	10.0	1486646568	12.918374
13608585	Anything similar for Digital Ocean? 	Anything similar for Digital Ocean? Also, it's my understanding that Elixir/ErlangVM deployments do not require the use of NGINX. Is this true?	MrBlue	12.629115	-7.498855	comment	3.0	13.0	1486660154	12.932504
21207215	I think there is a clear distinction	I think there is a clear distinction between languages and frameworks.But again, what are the clear benefits for the customer  of choosing Elm compared to the more popular choices in the market, given the (IMO significant) drawbacks of a niche language?	vlangber	12.998014	-7.685412	comment	3.0	14.0	1570650701	-12.750083
21210229	> A common misconception is that it 	> A common misconception is that it is risky to use a non-mainstream language, since it will then be difficult to find developers with the right experience. We have found, however, that we don’t need people to know Elm beforehand.Are there a lot of people who actually want to use Elm tho? Seems like the real risk to me, not finding anyone interested in learning and using Elm.	ggregoire	13.002436	-7.688062	comment	3.0	10.0	1570673529	-12.783666
21211010	I work mostly in Python for data ana	I work mostly in Python for data analytics but I like to play with front end from time to time. So I tried elm. I loved learning about the elm architecture and the concepts of a ml type of language. But the community and the principles of it threw me off. I need a simple parser and found this https://package.elm-lang.org/packages/elm-tools/parser/lates...I guess if you have a CS degree you can understand how that parser works, I couldn’t. The community tried to help me on the forums but you are supposed to know a lot of key functional concepts to even understand their answers.Then I learned about how they decided to throw away Javascript interops. I mean I love benevolent dictators but this was too much. Just fyi their benevolent dictator thinks if you need a library you should program it 	kfk	12.980609	-7.6846905	comment	3.0	10.0	1570682993	-12.743353
21227661	Sure but there's a reason that devel	Sure but there's a reason that development has moved off of Perl.	bifrost	12.33605	-7.039247	comment	3.0	28.0	1570822431	13.186014
21227835	For that matter, Erlang has been aro	For that matter, Erlang has been around for like almost 30 years and has had multicore support since 2007, and has always been dynamic.	tombert	12.539264	-7.514686	comment	3.0	21.0	1570823714	12.929675
21228087	Perl 5 was released in 1994.  At thi	"Perl 5 was released in 1994.  At this point, the ""5"" isn't really a version number anymore.  It's just part of the name.If you did a ""major version bump"" from here, you'd probably have to bring the ""5"" along for the ride.  Like Java version 2, where you had J2EE version <X> for years.In reality, there probably never will be another major version bump of Perl 5, in the marketing sense.  The minor version number is really the major version number now."	StevePerkins	12.343626	-7.046363	comment	3.0	10.0	1570825272	13.168527
21228470	I didn't know that Elixir had such a	I didn't know that Elixir had such a low-threshold for one-off programs.Have you tried Crystal? Both are on my list of programming languages to look into next, together with Elm, Reason and Zig.	xyproto	12.617339	-7.426058	comment	3.0	20.0	1570827967	12.920263
21228501	Why should first-class concurrency n	Why should first-class concurrency needs be required to script in Elixir? This question seems to imply that Python is somehow a default language and special requirements must be needed to justify writing in something else. Elixir is general-use and pleasant to write scripts in so seems reasonable to me for someone to do so if that's their thing.	vaer-k	12.616088	-7.4725404	comment	3.0	23.0	1570828190	12.874279
21228520	Its a saying, but since you're being	Its a saying, but since you're being pedantic I'll use my personal favorite example -> Having to use mod_perl or cgi/fcgi is awful.	bifrost	12.452026	-6.72364	comment	3.0	10.0	1570828270	13.114552
21230926	If ruby was performant enough for Sh	If ruby was performant enough for Shopify, this article would not have been written.	jonny383	12.752709	-6.9407945	comment	3.0	11.0	1570858834	12.321549
21231315	> For everything else, it's great, a	> For everything else, it's great, and it's almost always a good default to choose speed of development and engineer productivity over runtime performance.Doesn't Elixir on Phoenix[1] provide the elegance of Ruby on Rails without its drawbacks?[1] https://phoenixframework.org/	krn	12.764265	-7.1963243	comment	3.0	18.0	1570866178	12.736249
21233963	what are modern practices for scalin	what are modern practices for scaling rails apps when the database is the bottleneck? I have a GIS-heavy app that is built with rails, but leans on PostGIS a lot for the heavy computation. Simply getting bigger and bigger database instances doesn't seem to scale very well, and moving the GIS computation code in to ruby is not an option either (RGeo is good for some things, but can't replace PostGIS for most of my needs)	durkie	12.782757	-6.83954	comment	3.0	13.0	1570894802	12.3044405
21234709	Our research has indicated that Elix	Our research has indicated that Elixir has basically stopped growing in the general market.... really only getting any growth from converted erlang devs.Have you seen anything different?  Most enthusiastic vendors I’ve talked to have moved away from elixir due to low adoption and demand.Tiobe, google trends, etc tell the same story.I’d love to find evidence to the contrary but the low numbers of elixir devs seems to be both a supply AND demand problem... ie lack of traction and interest.	kweinber	12.689579	-7.462772	comment	3.0	10.0	1570901093	12.94281
21236093	These all just seem related to synta	These all just seem related to syntax, not actual program structure or capabilities. The only program structure thing I see is list comprehensions, which is one of Python's great strengths. Ironically they say Ruby is more pleasant to write, when Ruby has the deepest structural flaws of any dynamic programming language.	stevebmark	12.427947	-7.0442986	comment	3.0	10.0	1570913015	12.399417
21241054	And that's OOP I can subscribe to.Bu	And that's OOP I can subscribe to.But is it OOP that is encouraged or made easy by standard OOP languages? Sounds more like Erlang to me.	youerbt	12.551625	-7.498383	comment	3.0	10.0	1570982191	12.926374
21242116	You just gave me an idea.. because w	You just gave me an idea.. because we've shared a similar experience.I really miss the elegance of Coffeescript. ES6 is great, Typescript is great, but sometimes I feel like I have to visually parse a lot of static cruft to read the essence of the program.What if one's editor had a toggle hotkey to hide typescript typings. Maybe you could turn it off to visually parse the program real quick, before turning it back on to edit it.Hmm...	switz	12.412352	-6.5938377	comment	3.0	11.0	1570992808	-10.498944
21242403	Typescript seems to be approaching C	Typescript seems to be approaching C++ levels of syntax and expressiveness. The main difference seems to be the existing tooling, tutorials, libraries, etc for node.js and others.But if compiled languages like C++ or Go had as many dedicated libraries for webserver management as JavaScript, would there really be a benefit to using Typescript?	seieste	12.37966	-6.775187	comment	3.0	12.0	1570995293	-10.473206
21256537	>The only people who think PHP is dy	>The only people who think PHP is dying is those who don’t use it.That is absolutely not true. I didn't care about PHP at all when I didn't use it. Then I got a job where I had to use it (and the management didn't want to hear about changing it), and I started slowly disliking it. Then I got out of that job and again mostly forgot about it and curretly don't really care what happens to it.Weird defences like yours resurge the dislike, so there seems to be some amount of lingering trauma. And of course there's the worry that the more popular PHP is, the more probable it is that I will have to face it again some day.	deragon	12.774925	-6.6359224	comment	3.0	12.0	1571127891	10.356647
21281289	I'd be interested in hearing more ab	I'd be interested in hearing more about this. I'm keen on learning Elixir, but have fallen back to Rails at least 2 times when starting something fresh, because I'm very comfortable with Rails ops. It's simple enough for my case and rails console is just a blessing to dig around when something weird is going on.	config_yml	12.738668	-7.2769	comment	3.0	47.0	1571315450	12.751061
21281867	It's understandable. Elixir is one o	It's understandable. Elixir is one of those languages you won't really appreciate until you've experienced the problems that it addresses.You're getting down voted mostly because of your tone (IMO) but the appeal if Elixir is just a reality of experience.When I found it, I was 15 years in my career and when I dove in, learned it and saw how it addressed so many short term and long term issues that appear in application development...the balance was the closest thing I'd seen to perfect.But if I hadn't experienced the pain, I would never have appreciated it all the little details.	brightball	12.696232	-7.461035	comment	3.0	17.0	1571319305	12.928743
21286354	There's no secret sauce in Elixir wh	There's no secret sauce in Elixir which isn't in Python to make it 10x faster: https://gist.github.com/jamatthews/7b41b5ce5058f3f4ed674b6ac...Elixir and BEAM are clearly enormously better at some tasks but general performance is actually very similar between Elixir, Ruby, and Python if you use similarly performant frameworks.	jashmatthews	12.649942	-7.4283104	comment	3.0	22.0	1571346276	12.89779
21294690	What’s the easiest/best way to host 	What’s the easiest/best way to host python+flask?	fastbeef	12.664872	-6.5347548	comment	3.0	11.0	1571429366	10.036011
21306752	I much prefer frameworks/modules for	"I much prefer frameworks/modules for which code is executed only once you invoke their ""setup"" functionDjango _does_ have a ""setup"" function. You can't import and use Django database connections outside of a running application without it.Flask also has a ""run"" method and does no i/o without it."	nerdponx	12.743201	-6.554382	comment	3.0	14.0	1571602335	10.057046
21310736	This post dismisses Elm on the basis	This post dismisses Elm on the basis of lack of typeclasses, but fails to mention miso (https://haskell-miso.org), that includes typeclasses. Miso is Elm-as-an-embedded-DSL written as a Haskell library for GHCJS that allows one to share types on the front and backend, take advantage of the entire Haskell ecosystem and has experienced commercial use.	dmjio	12.963119	-7.674034	comment	3.0	11.0	1571654192	-12.753149
21312784	Object Detection in PHP with 15 line	Object Detection in PHP with 15 lines of code	frkmollick	12.756809	-6.621067	story	3.0	4.0	1571668881	10.301161
21348339	Ask HN: How widely used is Ruby with	Ask HN: How widely used is Ruby without Rails?	vanilla-almond	12.739829	-6.9397645	story	3.0	6.0	1571945418	12.348328
21354547	Congratulations!  You have discovere	Congratulations!  You have discovered the absolute nerdiest activity on the planet.  Writing Perl in Klingon.	jandrese	12.33559	-7.038492	comment	3.0	10.0	1572008963	13.181608
21371114	> Common approach is to serve static	> Common approach is to serve static files with nginx and use apache / php_mod to process.Not sure how common that really is, I've personally never set things up like that and just use nginx + php-fpm and don't know anyone that still uses apache with mod_php.	cbg0	12.754717	-6.540216	comment	3.0	10.0	1572197506	10.231337
21381329	It’s difficult to deploy Erlang apps	It’s difficult to deploy Erlang apps in Erlang-style using Docker. The style I speak of is zero downtime deploys where the VM is never turned off, but is updated with new software as a living organism.You can run BEAM apps in a container the same way you’d run any other app. It’s possible. But BEAM is less like a PHP/Python/Ruby etc interpreter and more like an abstraction for the OS (some might even consider it to be one). When you’re in Erlang you think in Erlang and the runtime abstracts things like processes, threads, and network partitions away... so you tend to want a big beast BEAM instance (or a few big beasts) rather than a lot of tiny ones (as one might scale up a horizontally scaled app like one on Heroku dynos).It can be done. It’s just kinda going against the grain.	whalesalad	12.535828	-7.519418	comment	3.0	10.0	1572294735	12.888015
21380334	Erlang first.There is a large overla	Erlang first.There is a large overlap with Elixir stuff, mostly at a higher level; whatever covers OTP, handling supervision, releases, docker image practices, approaches to testing, production practices, etc. will very likely be useful to Elixir users.But the lower-level details like handling dependencies, build tool commands, test framework specifics, the code snippets and samples, and so on are all going to be Erlang-specific.I use both languages frequently for work and there's far more in common between them than there are differences. If that's not your cup of tea and Elixir is really all you're after, you can look for Ben Marx's Adopting Elixir (https://pragprog.com/book/tvmelixir/adopting-elixir) book. We are not affiliated with it and don't aim to cover the same content (we just ha	mononcqc	12.65639	-7.4860516	comment	3.0	13.0	1572289379	12.925408
21385358	I would guess whatever you do on top	I would guess whatever you do on top of typescript, its still a superset of javascript, which will always have holes in it. Its that 100% guarantee that the author is looking for, and that Elm provides.The difference between 99% and 100% is enormous in my experience. A part of your brain that constantly evaluated the situation can now be totally at rest, spending that energy at other things.Note that I have not used Elm myself, but looking at it I get the point. I have the 99/100% experience in other things	jdance	12.968505	-7.6521215	comment	3.0	17.0	1572341489	-12.747937
21390779	The arrow uses a cut internally whic	The arrow uses a cut internally which renders it nonlogical and ruins any benefit you'd get from even writing Prolog. At that point you're just using Prolog as a quirky imperative language.Unfortunately since it's almost impossible to model ideas without stuff like the arrow, cut, or \+ (not) operators, writing actual pure logical Prolog programs that actually do interesting things is supremely difficult.	superdisk	13.150933	-7.295074	comment	3.0	16.0	1572375463	-12.4892025
21399306	Surprisingly enough, PHP is a good e	"Surprisingly enough, PHP is a good example of environment that doesn't break backward compatibility much.About the only change that had a significant impact on projects I worked on was removal of the 'mysql' DB extension (replaced by 'mysqli' and 'PDO'). For an older project I created a few shim functions and it still works just fine.While frameworks come and go, the core of the language is highly backward compatible. The choices made early on were in the UNIX style, so they were right.To quote an earlier post[1],--There is something to be said about PHP's staying power. The early versions of the language weren't considered ""right"". Except maybe they were right for the problem at hand.The way I see it was PHP captured the vector of change, and left ample room for future developments. Both "	dexen	12.759575	-6.6433973	comment	3.0	12.0	1572452099	10.329715
21431819	SuperMicro's rails and OOB managemen	SuperMicro's rails and OOB management are still horrendous.	sithadmin	12.765084	-6.9462466	comment	3.0	14.0	1572749970	12.359571
21437458	I was reading up on ROS the other da	I was reading up on ROS the other day when the thought occurred that Erlang is, in many ways, similar to some of the core functionality of ROS, and might be a good substitute for [parts of] it.	carapace	12.556246	-7.5113397	comment	3.0	17.0	1572823162	12.909605
21454906	What's the end state for TypeScript?	"What's the end state for TypeScript? Does it one day become feature complete and slow down? One of the frustrating things about trying to find help with TS today as a beginner is the plethora of SO and blog posts talking about much older versions. If you're lucky there'll be some comment ""As of 2.6 you can now do ..."", but even 2.6 is a lot of versions back - how do I know that's still the best way to do it in 3.7?I'm for progress, but it makes me a little wary to start my team of no-previous-TS-experience JS devs on a TypeScript project when there's still a new version every few months. Keeping up with Webpack is enough of a hassle..."	vosper	12.392602	-6.7095184	comment	3.0	13.0	1572977194	-10.463951
21476477	Not an Erlang user, but my understan	Not an Erlang user, but my understanding is that the Erlang VM (BEAM) schedules on function calls. Which works fine for that use, since Erlang does looping with tail calls, but is not a solution for procedural languages.	jabl	12.469027	-7.5053	comment	3.0	10.0	1573155046	12.882786
21493756	Unfortunately, PHP doesn't ship a to	Unfortunately, PHP doesn't ship a tool for this (and it’s hard due to the way autoloading works). So PHP's typing is slightly less useful than e.g. TypeScript.	j_jochem	12.358663	-6.8026404	comment	3.0	12.0	1573328194	-9.007616
21494689	"> there's no such thing as a ""perfec"	"> there's no such thing as a ""perfect programming language"". Every language has it's quirks and that's fine. PHP might be old and boring but it helps you get things done faster than using the new coolest language.I disagree with you on this point. I worked with PHP for two years on some legacy systems, as well as some Laravel-based systems. While Laravel yields results that are worlds away from PHP build in the 90's, I still wasted dozens of hours because of poor constructs that the language is unfortunately coupled to. I documented each instance where I wasted a significant amount of time due to issues like scoping issues, closure problems, arrays-that-are-arrays-sometimes-but-maps-other-times, etc.PHP has gotten better. But there are so many good choices that provide much better tooling,"	ashton314	12.725255	-6.661591	comment	3.0	22.0	1573336802	10.32756
21495467	As a Laravel dev who almost went dow	As a Laravel dev who almost went down the Rails path, I’m curious: what advantages do you think Rails has over Laravel at this point?	sowhatquestion	12.779942	-6.7233915	comment	3.0	14.0	1573344770	10.36839
21508429	This looks surprisingly neat, honest	This looks surprisingly neat, honestly. I've never used Perl, let alone Perl 6, but I think I see why people cared about it.	MrEldritch	12.326903	-7.0236945	comment	3.0	24.0	1573503353	13.182968
21543618	An expert system answer (Prolog, CLI	An expert system answer (Prolog, CLIPS) would be cool to see here.	jhoechtl	13.148139	-7.3015428	comment	3.0	16.0	1573811466	-12.509951
21559397	Congrats on the launch. As a fellow 	"Congrats on the launch. As a fellow Ruby/Rails developer I love seeing great open-source Ruby/Rails apps in a world where everyone seems to be trending to what's ""sexy"" now instead of what's tired and true."	joshmn	12.760016	-6.9463725	comment	3.0	14.0	1574017408	12.38312
21559963	> As I've seen it said, Erlang is Sm	> As I've seen it said, Erlang is Smalltalk done right.As I see it, It's not, but it’d be a decent platform to build an asynchronous smalltalk on top of. One key thing it is missing is a convenient syntax for defining processes (either via instantiable templates equivalent to “class” in many OOPLs or as singletons equivalent to “object” in Scala) in terms of the message handlers and local state (volatile state of the kind that would be held in the process dictionary and the kind of “transactionally updated” state that, in Erlang, would be carried in function args.)	dragonwriter	12.414609	-7.4774165	comment	3.0	10.0	1574023515	-9.181641
21560615	We need a strongly typed version of 	We need a strongly typed version of Erlang so that garbage collector can tell when a future (i.e. process) inaccessible.	ProfHewitt	12.4805975	-7.5165234	comment	3.0	12.0	1574031633	12.885653
21568659	That assumes you've got apache set u	That assumes you've got apache set up, or nginx and php-fpm. It also uses the php interpretor. If you had to build a binary like Haskell would, your approach would be different (although you could run haskell in interpreted mode I wouldn't recommend it). It's also kind of unfair because PHP was created for making web pages, Haskell wasn't.	leshow	12.59367	-6.7356963	comment	3.0	10.0	1574115163	10.378516
21584530	If you want to know how to build a P	"If you want to know how to build a Prolog . . .When I learned Common Lisp, I devoured the available textbooks in 1989 and for a few years after.  A book from the early 1990s is: Paradigms of AI Programming: Case Studies in Common Lisp.  By Peter Norvig (now employed by Google)The book first teaches you Common Lisp, which isn't that difficult to pick up.  But that itself is a transformative experience.Then the book shows you how to build a number of amazing things using Common Lisp.  It starts IIRC, with pattern matching.  Term rewriting.  Unification matching.Then you proceed to build a few things like:1. A program that solves high school style algebra word problems.2. A ""prolog"" (but expressed in Lisp syntax) that is a ""hair's breadth"" (in the author's words) from real prolog.This book wa"	DannyB2	13.148611	-7.2988014	comment	3.0	12.0	1574262598	-12.566582
21654600	"The four ""lines of code that changed"	"The four ""lines of code that changed everything"" arguably could be:  #!/usr/bin/env perl
  use strict;
  use warnings;
  use CGI;

While no longer in vogue, nor applicable for many systems today, the web would not be what we know it now were those four lines of code never typed."	AdieuToLogic	12.41578	-6.8348107	comment	3.0	25.0	1574915659	13.123753
21658332	A lot of those large web properties 	A lot of those large web properties are going to be using old versions of PHP. Newer versions have breaking changes that make upgrading a large codebase difficult.To these companies, PHP 7 is a hip new language that they're not using.	daveFNbuck	12.75937	-6.652093	comment	3.0	18.0	1574957666	10.329059
21658766	> A lot of those large web propertie	"> A lot of those large web properties are going to be using old versions of PHP.Is that true? PHP 5.6 and 7.0 were EOL'd in 2018, and acording to data at https://blog.packagist.com/php-versions-stats-2019-1-edition... the use of PHP 7 and later is ~90%. Web properties like DreamHost have supported PHP 7+ for years, and have deprecated versions before 7.1.> Newer versions have breaking changes that make upgrading a large codebase difficult.The documentation on this is pretty good[1], and there's some nice tooling that can help[2]. I wouldn't say that I've migrated ""large"" codebases, but FWIW in my limited experience this hasn't been particularly onerous.[1] See https://www.php.net/manual/en/migration70.php and related appendices
[2] https://auth0.com&#"	CharlesW	12.777356	-6.6432204	comment	3.0	11.0	1574960692	10.34614
21666478	What's the current state of the art 	What's the current state of the art in Datalog performance?	jules	13.159882	-6.9872675	comment	3.0	11.0	1575057567	-12.394493
21683166	It's worth pointing out that the ASG	It's worth pointing out that the ASGI support in this release is very low level, and doesn't let you write async views or anything yet. We're still working on that.	andrewgodwin	12.388728	-6.714032	comment	3.0	14.0	1575300427	9.923562
21683767	> ASGI support> Django 3.0 begins ou	> ASGI support> Django 3.0 begins our journey to making Django fully async-capable by providing support for running as an ASGI application.Bleh. ASGI is probably the worst implementation I can think of for a common async interface. Stringly-typed callbacks? async generators exist for a good reason. It's also very asyncio-centric, and asyncio is Not Good.	904baf11	12.449396	-6.6797028	comment	3.0	17.0	1575303401	9.968029
21727815	I was a bit surprised by>When a meth	I was a bit surprised by>When a method has been called a certain number of times (10,000 times in current prerelease Ruby 2.7), MJIT will mark it to be compiled into native code and put it on a “to compile” queue. MJIT’s background thread will pull methods from the queue and compile them one at a time into native code.I would have thought that you wouldn't wait for 10,000 iterations but just start from the beginning and compile the methods with the most calls and keep the compiler thread busy. Flush less frequently or no-longer needed compiled calls and limit the total to some defined resource usage cap. You'd probably win overall.	Lerc	12.647058	-6.9994626	comment	3.0	12.0	1575682029	12.3600645
21728162	New Rails dev here: I believe the en	New Rails dev here: I believe the entire ActiveRecord model is constant monkey patching.	t-writescode	12.875047	-6.754143	comment	3.0	11.0	1575687243	12.288808
21735564	Not to be confused with Crystal Pala	Not to be confused with Crystal Palace FC.	nathancahill	12.637619	-7.2643843	comment	3.0	10.0	1575808055	-11.184773
21743168	"An aside but ...> ""mechanic suggeste"	"An aside but ...> ""mechanic suggested a $20,000 engine overhaul, I spent the next two weeks researching the issue on my own, called multiple friends of mine and it turned out I just needed to replace a $300 part""Do you think the equivalent in the web industry is a someone stating an entire app needs an overhaul, ""because PHP"" when maybe it is a simple bug fix?Us engineer minded folks are quick to want to re-engineer things."	matt_s	12.772032	-6.594547	comment	3.0	16.0	1575903647	10.3533125
21750978	And if it wasn't bad enough that the	And if it wasn't bad enough that the site is using Laravel, that framework is also exposing a ton of sensitive data about the server. Perhaps disable dev mode? Anyway horrible choice of a framework.	faraday2211	12.805812	-6.626966	comment	3.0	11.0	1575970073	10.371
21751708	Do you have an email address?  Your 	Do you have an email address?  Your app has a bug where it's popping up some kind of Laravel debugger, and it's exposing things...like where the web-world-readable file with all the collected emails is.	tyingq	12.824532	-6.6139026	comment	3.0	10.0	1575979665	4.657573
39088147	I for one will not be running this s	I for one will not be running this sort of low performance setup when PhpWM would obviously be an order of magnitude faster.*it really would though	dingdingdang	12.732462	-6.63735	comment	3.0	14.0	1705920630	10.322551
39090845	For TypeScript specifically there is	For TypeScript specifically there is some justification in that the TypeScript compiler is rather slow, so any speed benefits of Biome would go away if it relied on TypeScript for type information.But as a whole, not-invented-here syndrome has plagued Biome/Rome for the entire lifespan of the project. Like take a look at their error reporting code[1]. They made their own markup abstraction with their own Display trait and Write trait and a proc macro on top of it. It's cool code and probably does produce very nice error messages, but they could have easily used off the shelf crates like miette or ariadne and moved on to more important tasks.Or even their JS parser. It's a really nice JS parser! Maybe the best in terms of error reporting and AST resolution. But they could have easily used s	wrongcarwhy	12.362096	-6.797013	comment	3.0	15.0	1705939061	-10.445628
39100982	Hmm, as a Ruby dev my experience dif	Hmm, as a Ruby dev my experience differs vastly.In a context where I'm working on a few languages regularly and among a larger set of languages that coworkers are in charge of, I can see how Ruby has solved a ton of problems that other languages are still struggling with.- package management: bundler/rubygems has been a sa-holved problem for the longest time whereas npm/yarn is an unholy mess, python is only beginning to see the light after refusing for so long, go mod is kind of a step in the right direction but still falls short in others, cargo is an outright copy but tries too hard to also be rake, a distinct problem making it a kintchensink... Gemfiles being descriptive, one can generate  lockfiles from their platform including information for a foreign one and it's going to resolve c	lloeki	12.590497	-6.963006	comment	3.0	18.0	1705999623	-9.2151165
39101164	> testingSounds like I should give !	"> testingSounds like I should give !rspec a go... Since the rest of your comment was super informative, I'm interested in your take on RSpec and Cucumber?> RBS+SteepHot damn I am out of date and this sounds amazing. Can't wait to try it out... Thank you for posting!> not too sure what you're referring toBest guess is it's like with patterns: Ruby doesn't have that many ""patterns"" (particularly the canonical kind) because they're just plain unnecessary. Similarly, thinking over other languages... there's just not much that's needed, which might then look like ""not a lot""."	RangerScience	12.568128	-7.0364027	comment	3.0	11.0	1706001180	12.361488
39104911	The whole topic of logic is largely 	The whole topic of logic is largely absent at my University - can anyone recommend some literature or a path to follow?I'd like to understand the relationship to RDF / SHACL / OWL and Datalog - additionally what about first order logic with relations like it's used in model checkers like smtlib and temporal logics?Could I build a system based on miniKaren that implements RDF and OWL? Can I do that with Datalog (i.e. cozodb?)How would you implement something like validation / SHACL with a logic language? Datamotic / XTDB seem to use some idea like a record and offer bitemporality - is this somehwere in the literature described on a theoretical level?How is the relationship to Hoare-Logic (we had a brief stunt into that for prooving correctness for loops)Is it a feasable idea to implement so	nisa	13.1224985	-7.108813	comment	3.0	13.0	1706024781	-12.429024
39111283	Free online sudoku sites supported b	Free online sudoku sites supported by minimal ads have produced steady income since 2005:https://www.samurai-sudoku.comhttps://www.fiendishsudoku.comhttps://www.extremesudoku.infohttps://www.sudokuhints.comhttps://www.sudokuprintables.org	dave333	13.450452	-7.4100065	comment	3.0	13.0	1706051350	15.0869465
39125655	Anyone else actually having a great 	Anyone else actually having a great experience with full-stack typescript?	teaearlgraycold	12.395904	-6.720386	comment	3.0	11.0	1706150665	-10.466695
39126598	>> What would you recommend I look a	">> What would you recommend I look at in JS land knowing I love django and dislike flask?I just use typescript and nodejs and the database.No framework except the express web server.It's incredibly raw and close to the metal, which I like.Here's a throwaway example of register and login from ChatGPT to illustrate how easy it is. Totally unchecked but it's just to show approximately what's involved - and it's not much at all.    import express, { Request, Response } from 'express';
    import bcrypt from 'bcrypt';
    import db from './db';
    
    const router = express.Router();
    
    router.post('/register', async (req: Request, res: Response) => {
      const { username, password } = req.body;
    
      // Hash the password
      const saltRounds = 10;
      const hashedPassword = "	andrewstuart	12.710363	-6.438316	comment	3.0	10.0	1706161839	9.736825
39132176	> Over time you start realizing that	> Over time you start realizing that there are no silver bulletsI hate to be that guy, but there is 1 silver bullet. Erlang. Whether you are writing code for a cluster of machines or a single node, the developer experience is the same.	ephemeral-life	12.560863	-7.5176964	comment	3.0	11.0	1706204216	12.907955
39159577	Yep, so it's the classic Rails bug p	Yep, so it's the classic Rails bug pattern.	tptacek	12.766075	-6.901659	comment	3.0	25.0	1706387828	12.349636
39174270	This is more or less personal prefer	This is more or less personal preference though. When you say that Ruby ignites a passion for coding for you then that might not happen for other people. For example I only feel a headache when I look at Ruby code.For context: I worked with C, C#, some Python and now mostly work in Go.	VonGallifrey	12.617906	-7.0236907	comment	3.0	22.0	1706519149	12.400584
39209283	"It's called an ""AI"" computer. Prolog"	"It's called an ""AI"" computer. Prolog was AI in 1986. I don't see that as a gimmick. I also don't see why one would assume the concept was really about games except for the fact that we know Sega as a games company today."	ilaksh	13.151249	-7.295296	comment	3.0	14.0	1706734572	-12.507281
39238619	10 Years ago there was the so called	"10 Years ago there was the so called Perl Renaissance. 
Which should turn Perl around. Sad truth is. 
People already moved on.
Everything to little to late and not what the people where looking for."	ecef9-8c0f-4374	12.326965	-7.030797	comment	3.0	21.0	1706950164	13.189192
39249808	Show HN: Love Ruby but meh Daily Sta	Show HN: Love Ruby but meh Daily Stand-ups (DSU)? You might like my gem:)	gangelo	12.737016	-6.9450026	story	3.0	3.0	1707051024	12.363992
39259775	I still believe Rails is one of the 	"I still believe Rails is one of the best and most productive web frameworks out there and using it for a new project is a no brainer. I hold no special love for Ruby but Rails feels more like a DSL for creating websites than anything else. Sure it's not the fastest stack out there but the vast majority of websites will never outgrown it.I think a part of the reason why it has become ""boring"" is that everything's already there and so you don't read every week about a new shiny thing like in the good ol' RailCasts days.https://www.ruby-toolbox.com/categorieshttp://railscasts.com"	jiripospisil	12.748645	-6.901602	comment	3.0	13.0	1707130853	12.347659
39260244	> A program run with Deno has no fil	> A program run with Deno has no file, network, or environment access unless explicitly enabled.You can do this using containerization technology, no need to invent this per language runtime.	mborch	12.475619	-6.4464307	comment	3.0	16.0	1707134056	-10.895663
39290461	Keathley did a good job discussing t	"Keathley did a good job discussing this in https://keathley.io/blog/good-and-bad-elixir.html#:~:text=Av.... The preferred style is to specify the errors in separate functions e.g.    def main do
      with {:ok, response} <- call_service(data),
           {:ok, decoded}  <- decode(response),
           {:ok, result}   <- store_in_db(decoded) do
        :ok
      end
    end


where call_service, decode and store_in_db return the specific errors like {:error, :bad_request}, {:error, :conflict}."	ollysb	12.371512	-7.4801316	comment	3.0	14.0	1707323032	12.9023
39302269	>Because I believe that Ruby is a po	>Because I believe that Ruby is a powerful tool that can help you achieve your goals in record time, and I want to help you make the most of it.No, you're doing 5 hours free so you can get people into the start of your sales funnel, after which you'll attempt to sell them the paid service. Even if it may be a good worthwhile service, the dishonesty is a hard stop for me and many others.Just say it's like a free trial and if people want even more out of it, there's a paid version with more hours/features. Just be honest man.	VoodooJuJu	12.729456	-6.973197	comment	3.0	15.0	1707402561	12.36097
39309381	I moved from PHP/Laravel to Elixir/P	I moved from PHP/Laravel to Elixir/Phoenix about two years ago and I can't imagine using anything else these days.	stanmancan	12.763899	-7.2224617	comment	3.0	33.0	1707435817	12.792932
39309830	Maybe it was true 6 years ago, but I	"Maybe it was true 6 years ago, but I'm currently playing with Elixir/Phoenix and I feel very productive, Phoenix is well design and adding new functionalities is not that hard and the code is easy to debug. On the other side, Elixir and Erlang are not that popular and every time I talk about it to other developers, they may have heard of it but can't talk about it, so it's probably not that easy to find devs for a startup. But the barrier to entry is probably what keeps the libraries well designed. For anyone interested in Elixir I would start with those books in this order ""Elixir in Action"", ""Programming Ecto"" and ""Programming Phoenix Liveview""."	y04nn	12.720572	-7.3897796	comment	3.0	25.0	1707438940	12.878351
39309451	Do you have experience with Ruby on 	Do you have experience with Ruby on Rails?I've built apps both with Elixir/Phoenix and with Rails. Yes, the Elixir/Phoenix stack is amazing and is definitely superior over Rails in several ways; however, with regards to Bootstrapping and releasing a real-world app/business (web based), Rails is still the king.	stanislavb	12.779954	-7.0850396	comment	3.0	22.0	1707436320	12.583925
39349019	Id go with Fast API in Python over D	Id go with Fast API in Python over Django.	ActorNightly	12.74204	-6.5459595	comment	3.0	19.0	1707765491	10.043824
17193661	I like Ruby, I hate Rails. But Sinat	I like Ruby, I hate Rails. But Sinatra is awesome.	philliphaydon	12.719577	-6.9355597	comment	3.0	10.0	1527736131	12.284168
17196015	It's better to be wrong and function	It's better to be wrong and functional than correct and complicated?PS: This is the approach PHP took in the early days too.	philipwhiuk	12.74717	-6.633241	comment	3.0	17.0	1527772535	10.321033
17197856	hey (author here), so the code isn't	hey (author here), so the code isn't available as I haven't decided to open source it or not yet. You are correct to point out that it's a LOT slower than more traditional Prolog due, in part, to a different architecture.	CocoaGeek	13.144842	-7.296701	comment	3.0	13.0	1527785446	-12.484589
18025489	Is Ruby on Rails really a candidate 	Is Ruby on Rails really a candidate for bare minimum? Part of the reason I backed off was the enormity of Rails. Part of why I'm doing this is to understand what's going on under the covers and Rails feels like it has a broader and more opaque cover than most other options.	criddell	12.749797	-6.946724	comment	3.0	11.0	1537375171	12.363417
18026579	I feel where Ruby's optional parenth	"I feel where Ruby's optional parenthesis syntax really shines is in method call chaining.e.g.    employees.flat_map(&:addresses).map(&:city).uniq.sort
    # in place of
    employees().flat_map(&:addresses).map(&:city).uniq().sort()"	iamrohitbanga	12.353263	-7.103367	comment	3.0	20.0	1537382327	12.346294
18026998	As a non-Ruby programmer, this sound	As a non-Ruby programmer, this sounds like it makes it non-obvious whether you're calling a class' method or attribute. Do you end up relying on your editor to help you out ?	globuous	12.447902	-7.0953755	comment	3.0	15.0	1537385237	12.365587
18027259	I agree. Ambiguity kills software re	I agree. Ambiguity kills software readability.I'm currently learning Elixir at a new job, and I really, really dislike the (what I think of as) the ruby-style where `return` statements and function call parentheses are optional.	pavel_lishin	12.587951	-7.3828754	comment	3.0	11.0	1537387406	12.786355
18031077	How is that different from what Djan	How is that different from what Django does?	mimi89999	12.83085	-6.5249634	comment	3.0	10.0	1537438378	10.052805
18042983	Am I correct in assuming Elixir/Erla	Am I correct in assuming Elixir/Erlang does a much better job at this compared to Node/Python/etc., putting aside (what I understand to be) the rather big problem of their relative weakness for computation?	mercer	12.632306	-7.500332	comment	3.0	10.0	1537567343	12.926721
18051476	Thanks for sharing and Kudos for Typ	Thanks for sharing and Kudos for TypeScript! This question is not aimed at you and certainly not at your work.I used to be a game developer from an OOP background. I find this really hard to read.https://github.com/thi-ng/umbrella/blob/master/examples/hdom...Would anyone be able to give 2 cents about where the industry is headed in this regard? Will I be looked down on that my codebase is OOP in the future? Also for those who were cut from my cloth, did you find the transition difficult?	Fifer82	12.351743	-6.796263	comment	3.0	10.0	1537716389	-10.418981
18054424	I’ve been researching Traveling Ruby	I’ve been researching Traveling Ruby quite a bit recently and, while disappointed in its lack of updates, am also not convinced it’s the correct solution for easily distributable Ruby apps. The main reason is that each required gem with a native extension needs to be compiled by hand with the irregular/nonstandard flags for it to work with the specially compiled Ruby. While this works, it’s an unsustainable development model that creates a somewhat parallel maintenance track for each gem. I wish Ruby had a better story on this front, but I’m not sure what that looks like. Maybe something could be built with the new JIT functionality in 2.6?Either way, foobarwidget deserves props for releasing this at the time as it’s gotten some great use!	cookrn	12.577734	-7.0367255	comment	3.0	10.0	1537752873	12.36069
18085055	It's actually nothing to do with the	"It's actually nothing to do with the pipe operator in Elixir.In any programming language, the order in which you compose functions is important.In CSS — and in keeping with your analogy — the order in which ""functions"" are defined is important."	yakshaving_jgt	12.507656	-7.409242	comment	3.0	11.0	1538059945	7.869741
18086842	TypeScript is fine. I used it for ab	TypeScript is fine. I used it for about half a year when wokring on an Angular app. But for new projects with React now I seldom see the need to include it.Sure, TS gives you a little bit better autocompletion in VS Code, you can document your function signatures a little bit better and you can catch a few trivial type errors — but it also has some costs: Extra set up, extra build steps, the need to also import type definitions when including a library, cluttering the code with interfaces and type definitions.I find the extra value it gives over PropTypes in React is pretty low. And while types in function signatures arguably increase understanding, elaborate interface definitions, sometimes in their owen files with the need to import them, can clutter up the code and be a detriment to rea	erokar	12.388507	-6.7951093	comment	3.0	19.0	1538070100	-10.447215
18094639	If you didn't know that then let me 	If you didn't know that then let me share with you this interesting story from 2012. I'm going to repeat it from memory so my details may be a little fuzzy but I'll include a link which should tell the story more faithfully.So back in 2012 rails had a default behavior where you could mass assign values from a POST to a user and there wasn't any scrubbing of that, by default. Someone realized this was a Bad Idea and issued a pull request that would have fixed it. Instead of accepting the PR, DHH (I think it was him) said something along the lines of 'competent programmers would not leave that setting in place' and rejected the PR.The exploit discoverer thought about this and tried it against github, which was known to run on rails and the code worked! From there he was able to manipulate th	powersurge360	12.78368	-6.831103	comment	3.0	13.0	1538151908	12.36064
18094928	> Ruby is one of the most dangerous 	> Ruby is one of the most dangerous dynamic languages to refactorA thousand times this. It's so much easier to do breaking changes and refactors in a language that's supporting you, instead of working against you.	majewsky	12.548736	-7.0686707	comment	3.0	31.0	1538154011	12.384487
18094984	ok, owner of the repo here.  So this	ok, owner of the repo here.  So this project was purely to show the macro differences between interpreted ruby and compiled crystal to beginner ruby devs at a meet up.I decided to add the top languages on github to help give some idea of how crystal performed against them.I'm happy to see so much discussion about it and was taken by surprise when my inbox was full this morning.  Thanks @anonfunction.  ;-)The breaking benchmark examples were just that, examples of how to break the benchmark.  I didn't expect to get a memoized version of every language and really don't think comparing them from a performance benchmark makes much sense.  Let me know if i'm wrong about that.I am fine adding all of your change requests and will try to keep the benchmarks up to date.	drujensen	12.592887	-7.243005	comment	3.0	10.0	1538154387	-11.242518
18097409	Not critisizing RoR, it is the grand	"Not critisizing RoR, it is the grandmother of all of the web frameworks we enjoy in practically every mainstream language. Also it is dynamically typed. I do prefer static types on the code I write because I am less likely to make mistakes and I like to have a more explicit 'contract' in place between code boundaries. However I am open minded to why people prefer dynamic types and I imagine it is all to do with speed of initial development akin to ""Move fast and break things"" and ""MVP"".That said Microsoft's ASP.NET MVC would be a good contender for your call to suggest a better language.framework.It is indeed very productive. It has a massive package ecosystem, great documentation, a very long lifespan (not as old as Rails, but probably about 10 years old now). ASP.NET MVC is all over the "	quickthrower2	12.475835	-6.715752	comment	3.0	16.0	1538172041	12.277098
18099188	> that is more productive than Rails	"> that is more productive than RailsSo, spending a year and a half on a major version upgrade of your web framework is ""productive"" how exactly?I mean, whatever time you think you've saved by using Rails during the initial prototyping phase (and I don't think even that's true), you'll more than pay for in maintenance costs."	pka	12.754552	-6.928803	comment	3.0	15.0	1538207166	12.351141
18110245	I especially don’t get the ide suppo	I especially don’t get the ide support bit, because Visual Studio Code already does that for regular JS.I think typescript is s mistake that most people will regret because it adds so much complexity to the process for so few advantages gained. I mean, we were predominantly a C# house, if anyone should be using Typescript it should be us, but we found it to be much less productive than JS exactly because stuff like prototypes becomes more complex and typesafety kind of gets in the way of the process when you’re not exactly sure what you’re making.I don’t think it’s exactly coffeescript though, I mean, I just ranted about typescript, but it doesn’t get in the way like coffescript. Since it integrates sort of decent into JS, it’s not a horrible thing, we just found it unnecessary.	eksemplar	12.398385	-6.6324897	comment	3.0	10.0	1538371683	-10.474924
18113889	>  but I’m increasingly unclear if y	">  but I’m increasingly unclear if you hold your position that asyncio is bad solely because it makes SA ORM less competitive - and less of a ecosystem standard.It's not that the ORM is less ""competitive"" because I am certainly able to make an async version of SQLAlchemy, it's just I don't have the time / interest / resources to do so, and as I've gone through the effort to write about in detail, it is a bad idea.    If you want to pay me a salary to make an async SQLAlchemy I can totally do that.  It would be a worthwhile effort in that it would make people happy.   But also it would be a wasteful effort in terms of advancing the field of Python database programming.  That's the decision I'm facing and it would be a lot easier if folks would just realize asyncio isn't getting them much ov"	zzzeek	12.766383	-6.539817	comment	3.0	10.0	1538409522	9.996543
18118962	Flow offers a more sophisticated typ	Flow offers a more sophisticated type system that is designed to express types that correspond with the sort of idioms you see in JavaScript in the wild. TypeScript is simpler and less flexible, but that simplicity can translate into increased productivity since there are less foot-guns and also less bugs. Strange/buggy behavior and odd performances issues are not totally uncommon with Flow whereas TypeScript doesn't seem to suffer from this as much. Since TypeScript is much more popular, IDE support tends to be a lot better out of the box, but the flow-langauge-server gives you all the same IDE-like features (intelligent autocomplete, jump-to-def, module resolution etc).Personally, I like Flow more, and I also think its easier to integrate into an existing codebase (either as comment anno	root_axis	12.412631	-6.7363257	comment	3.0	17.0	1538456920	-10.483643
18141836	PHP is way better with this than Go,	PHP is way better with this than Go, and much easier to learn.	GatoVolador	12.737858	-6.6630907	comment	3.0	11.0	1538673990	10.308333
18142080	We had a developer interview here wh	"We had a developer interview here who was an Elixir zealot - and I use that word entirely purposefully.  He was very adamant that we needed to rewrite our entire platform in Elixir because it was obviously better.We ended up not hiring; he refused to touch certain technologies that make up a core part of our stack (Node being the biggest issue), and he was honestly something of a massive tool -- on our take-home thing (takes most developers maybe a few hours) he limited himself to one hour, didn't get it done, wasn't even solving the right problem, and, when he sent in his solution... ""It's ok, I know you won't get it, but that's OK."""	hmschreck	12.687439	-7.457657	comment	3.0	10.0	1538675751	12.934098
18142526	Ericsson abandoned Erlang, or Erlang	Ericsson abandoned Erlang, or Erlang abandoned Ericsson, depending on how you look: Ericsson banned it internally, and shortly afterwards when the Erlang team managed to get it open sourced, they resigned from Ericsson and founded their own Erlang company.(source: http://webcem01.cem.itesm.mx:8005/erlang/cd/downloads/hopl_e...)	fulafel	12.5797825	-7.515562	comment	3.0	13.0	1538679232	12.912526
18154466	OK. I use a very similar set of heur	"OK. I use a very similar set of heuristics to what's described in this post.Here's the documentation for the most recent thing I released:https://django-registration.readthedocs.io/en/3.0/And the one before that:https://pwned-passwords-django.readthedocs.io/en/1.3.1/Here's the next of my packages that I'm working on, not because the code needs work but because the documentation isn't up to my standards anymore (in fact, I'm doing a rolling refresh of all my personal packages right now):https://webcolors.readthedocs.io/en/1.8.1/I don't expect everyone else to match my output in documentation. I do expect people to write some type of prose documentation covering more than just ""here's an auto-generated API reference, good luck"", or q"	ubernostrum	12.827844	-6.5720563	comment	3.0	10.0	1538822754	10.101283
18154563	I would like to know what Prolog imp	I would like to know what Prolog implementation the author used. In particular, the article claims:1. > An initial analysis found that we would need to implement a complex depth/breadth search algorithm either in the client application or in SQL.2. The Prolog runtime would efficiently solve this problem given rules that naively described it.I am skeptical, as this is emphatically not my experience with Prolog. In my experience, for any problem requiring a complex search strategy, Prolog is not your friend. Most Prologs do something approximating a naive depth-first search with unification, and on complex search problems this approach rapidly blows up. This can _sometimes_ be fixed by:1. Making careful use of cut (`!`) or other non-declarative operators to change the search order.2. Using t	rntz	13.144577	-7.291346	comment	3.0	11.0	1538824795	-12.47284
18162128	Converting “lisp” to JavaScript in t	Converting “lisp” to JavaScript in the sense of this article is basically trivial (but then it was done in only 350 lines of Haskell).Compiling, say, Common Lisp to JavaScript is hard. There are “easy” steps (in the sense that they can be ignored or done a stupid way at first) like dealing with numbers, namespaces, packages, (I.e. the symbol foo can name a function and a variable, amongst other things, and the symbols #:foo and #:foo are not equal).There are the “boring” steps like doing argument parsing (and harder is working out how to make it efficient)There are the hard steps like working out how to compile lexical goto and return-from, eval-whenThere are the very hard steps necessary for macros like having to reimplement a macroexpander (for macrolet and friends) and then realising th	dan-robertson	12.329883	-7.1540437	comment	3.0	10.0	1538939398	-10.39941
18175580	I will never understand why it was n	I will never understand why it was not possible to leave Perl5 as Perl and call Perl6 something else, maybe 'Butterfly'. They share very little except their creator.	okket	12.341851	-7.045464	comment	3.0	11.0	1539090438	13.184373
18176129	Just in case you don't quite know wh	Just in case you don't quite know who Larry Wall is: https://en.wikipedia.org/wiki/Larry_WallI wrote code for a bank using perl. I'd say 95% of their code at the time was in perl. Website called perl, back-end processing was perl scripts. Cron jobs were all perl script that needed to run to do house-keeping.	jason_slack	12.3304825	-7.0183926	comment	3.0	19.0	1539094483	13.1965
18188604	Is there any good resources for the 	Is there any good resources for the internals of prolog / writing a prolog interpreter?	keithnz	13.15007	-7.2929544	comment	3.0	13.0	1539203782	-12.488631
18188637	I ask this seriously.  Does it make 	I ask this seriously.  Does it make more practical sense to learn a modern business rule engine (like JBOSS BRMS) than to learn Prolog?	jayd16	13.145869	-7.293478	comment	3.0	11.0	1539203937	-12.490712
18195644	"Videos for ""Learn Enough Ruby to Be "	"Videos for ""Learn Enough Ruby to Be Dangerous"""	mhartl	12.669718	-7.0078764	story	3.0	48.0	1539280582	12.313297
18218306	Hi there, great work writing oat++. 	Hi there, great work writing oat++. I am the author of Passenger (https://www.phusionpassenger.com), an application server that powers 650.000 companies and sites world-wide such as Apple, Pixar, Juniper, etc. Passenger is mostly written in C++ and like you, performance is a priority for us.I've done a fast code review, and I thought I'd share some of my findings with you. These are based on my experience with writing high-performance servers. You can read about some of my experience in these blog posts: https://www.rubyraptor.org/how-we-made-raptor-up-to-4x-faste...Hopefully you can use my feedback to make oat++ even faster and better. Code review here: https://github.com/oatpp/oatpp/issues/15I've covered:- Pools and contention- Shared_ptr and atomics everywhere- 	FooBarWidget	12.62637	-7.038222	comment	3.0	11.0	1539593619	12.346173
18219979	>And besides: If Sinatra starts a se	">And besides: If Sinatra starts a server listening for incoming traffic, why does it still seem common to run a regular webserver like nginx in front of that server?This is a common technique used for tls-termination and management of 'virtual hosts', among other things.The mentioned ""issues"" don't seem to be Sinatra-specific, but rather about the authors shallow understanding of the topic as a whole"	coderobe	12.729453	-6.874561	comment	3.0	14.0	1539614063	12.279508
18220614	"Sinatra is not an ""approach to web a"	"Sinatra is not an ""approach to web apps"" -- it's a single purpose tool that maps HTTP requests to Ruby. Like Flask or Web.py (Python) and Express (JS).You are comparing apples to oranges."	whalesalad	12.74635	-6.887084	comment	3.0	10.0	1539618162	12.314905
18223931	Depends:* Do you like to be able to 	Depends:* Do you like to be able to build things fast?* Do you prefer not having to reinvent the wheel?* Do you care if it's not the new hotness?If you answered no to any of those, run away! Rails is mature-ish. It's boring now. Its ecosystem is stable. Your sanity won't be tested.Reads...* Michael Hartl's Rails Tutorial is probably the book you'll want to read to get a simple grasp on Rails (it can be overwhelming).* 99 Bootles, POODR (Sandi Metz)* some RSpec book* Finish it off with https://rebuilding-rails.com/	joshmn	12.7648535	-6.9297366	comment	3.0	10.0	1539638782	12.357785
18223938	Yes, of course it's still worth lear	Yes, of course it's still worth learning. Whether you learn Rails, Django, or anything else, the concepts will apply pretty well for any web framework.I've been making screencasts for Rails developers at GoRails (https://gorails.com) showing how to build various features of websites in Rails.If you're a beginner though, I would first recommend the Rails Tutorial - https://www.railstutorial.org/book	excid3	12.708898	-6.900424	comment	3.0	10.0	1539638841	12.341901
18224208	Why React over rails front-end? It s	Why React over rails front-end? It seems like it adds undue complication. What’s the real benefit? Basecamp works great and it’s a rails front end. Rails make full stack development pretty easy.	briandear	12.853121	-6.562231	comment	3.0	13.0	1539640733	12.286672
18226429	Prolog is probably the language of g	Prolog is probably the language of god.	zepto	13.14565	-7.298381	comment	3.0	11.0	1539663085	-12.488204
18229223	> This is interesting to note, becau	> This is interesting to note, because a common use of Lisp in AI was (is?) to write an interpreter for a logic programming language and then use that interpreter to perform inference tasks as requiredNot sure how you come to that conclusion. Literally none of the notable Lisp AI programs (ELIZA, STUDENT, SHRDLU, AM, EURISKO, MICYN) had anything to do with reimplementing Prolog.Implementing Prolog however is trivial in Lisp, so many textbooks used it as an intermediate level exercise.	varjag	13.148222	-7.294821	comment	3.0	24.0	1539697032	-12.4887085
18233233	Oh, syntax is important. Otherwise, 	"Oh, syntax is important. Otherwise, I can implement Lisp in Prolog trivially,
by rewriting each function of arity n, by hand, as a predicate of arity n+1
(the extra argument binding to the output of the function). After that, I
wouldn't even need to write an explicit Lisp interpreter- my ""Lisp"" program
would simply be executed as ordinary Prolog.I believe that if I were to suggest this as a honest-to-God way to implement
Lisp in Prolog, any decent Lisper would be up in arms and accusing me of
cheating.And yet, this is pretty much the approach taken by the Lisp textbooks we're
discussing. Their ""Prolog interpreters"" cannot parse Prolog syntax, therefore
programs must be given to them as Lisp. Then, because Lisp is not an automated
theorem prover, one must be implemented, accepting the Lisp "	YeGoblynQueenne	13.148762	-7.295257	comment	3.0	12.0	1539723696	-12.488246
29683377	"""The following default gems are now "	"""The following default gems are now bundled gems."" Great to see slow removal (or carve out) of rarely used stdlib stuff.Ruby would benefit from a trimmed down stdlib, where effort could be spent keeping a smaller footprint stdlib more polished than it is today. Turning them into opt-in gems is a good first step.A few examples:- `rss` to parse RSS documents/streams- `win32ole` for Microsoft Windows OLE Automation- `dbm` for DBM databases- `abbrev` for finding the shortest unique abbreviation amongst many stringsThis page has more details:
https://stdgems.org/"	sandstrom	12.6383705	-7.005549	comment	3.0	11.0	1640440591	12.363299
29738476	The community was in the functional 	The community was in the functional space before react. Angular 1 was very function oriented too, and relied heavily on ordinary functions and closure scope rather than class. And then everybody latched onto class in the phase of time between angular 1 and next gen frameworks.Class was something pushed by all the next gen framework authors at the time. Then most next gen frameworks abandoned class, because it proved to be worse in many ways than ordinary functions did. Which was the position I held at the time, and seem to have been borne out.The easy way to tell types apart in ordinary JS is to have consistent naming conventions. If you always name things such that the name implies the type (not Hungarian style, but more natural language oriented), you can infer the type from the name cor	adam_arthur	12.436706	-6.7580323	comment	3.0	12.0	1640883970	-10.449068
29824076	Benchmarking CRuby, MJIT, YJIT, JRub	Benchmarking CRuby, MJIT, YJIT, JRuby, and TruffleRuby	shelajev	12.439049	-6.9661226	story	3.0	91.0	1641480178	8.484217
29828453	Is the Rails performance something t	Is the Rails performance something to do with the amount of meta programming going on - I can imagine that being hard to optimise!	klelatti	12.731307	-6.94748	comment	3.0	13.0	1641496584	12.34176
29834903	The same argument can be made of PHP	The same argument can be made of PHP, COBOL, or even FORTRAN.None of this is changing the fact that Ruby has been on a sharp decline for a decade now and it's probably never coming back.My personal interpretation: Ruby is extremely slow, dynamically typed, and RoR hasn't kept up with the web innovations of the past decade.	hota_mazi	12.683286	-6.969964	comment	3.0	13.0	1641530158	12.396079
29837157	I've been using Django for over a de	"I've been using Django for over a decade. I don't think most of these are a big deal and outright disagree with others. Happy to offer my own criticisms of django to add value to this comment thread.My real criticism of Django is that, at long last, I think it's starting to look dated. Templating hasn't been the preferred way of making web app UIs for some time. Modern web apps are maintaining models in the client and staying current though a combination of ajax queries and websockets. Setting up a project to do this is cumbersome. While there are third party solves, Django's greatness comes in part from how opinionated it is.I understand DSF may see adding more javascript as out of scope, but in keeping with the ""batteries included"" philosophy I hope they one day embrace something in cont"	madrox	12.785617	-6.4707203	comment	3.0	12.0	1641548849	10.035597
29846369	We use Mongoid. I treat every upgrad	"We use Mongoid. I treat every upgrade, no matter how small as its own piece of work involving going through the changelogs with a fine-tooth comb. This particular issue got flagged up when we last looked at upgrading. Currently Mongoid upgrades are stalled until we have the time to figure out the impact of some of their more egregious changes.I have a generally low trust approach to all dependency upgrades, irrespective of how minor they are, I've been bitten by enough ""minor"" changes. But I treat Mongoid as an active adversary who is setting out to break things with every update.It's the complete opposite approach to that of the Rails core team and those that work on ActiveRecord (as the nearest equivalent to Mongoid). Changes to Rails core are always well flagged with really good advance"	noneeeed	12.766491	-6.898114	comment	3.0	25.0	1641597705	12.362744
29848077	You would feel spoiled if you were a	You would feel spoiled if you were a ruby developer too.This type of library API breaking change on a minor version update basically never happens.And if it can happen in ruby land, it can happen in JS land too.	fouc	12.5524235	-6.8644137	comment	3.0	18.0	1641609783	12.358548
29849150	Ultimately this is why I don't like 	Ultimately this is why I don't like to work in Ruby.  You can just never trust any line of code between the gem updates, the unhelpful signatures, the overreliance on hashes everywhere, and a million different levels of mix-ins and indirection.  Yeah, it's expressive, but how much time are you really saving once you consider all these maintenance headaches?	emodendroket	12.656644	-6.984025	comment	3.0	38.0	1641623145	12.347715
29849480	I guess this is a Rails thing where 	I guess this is a Rails thing where people treat the db as a just dumb store.	cpursley	12.919012	-6.636116	comment	3.0	10.0	1641626868	12.263054
29849582	No, this is particularly bad in Ruby	No, this is particularly bad in Ruby.  Many languages, esp. compiled do not have the same issues.	gedy	12.532803	-7.0584383	comment	3.0	11.0	1641628027	12.380999
29876322	I also took a while to get used to t	I also took a while to get used to the typing in Crystal but once you do get it, it's worth the effort IMO. I occasionally still fire up Ruby but if I have anything more to do than a quick command-line command, I use Crystal, so many less problems.	brigandish	12.620678	-7.230237	comment	3.0	27.0	1641828642	-11.261677
29876548	Having tried both Node and Rails, Ra	"Having tried both Node and Rails, Rails was a horrible experience. I hated every minute of it and will ignore any job listings including it. Your whole project is in a billion files and everything works by ""magic."" There is so much complexity and different flies that it sucks to work with. Meanwhile with Node you can start with a simple index.js and work your way up."	charcircuit	12.753665	-6.8412437	comment	3.0	17.0	1641829526	12.312795
29879870	Want something easy to host? Use PHP	Want something easy to host? Use PHP.Want something fast and simple? Use Go.Want something really fast and powerful? Use Rust.Want something ubiquitous, with lots of developers in the labor market? Use Java.Excuse my ignorance, but what is Ruby's strength?	jebronie	12.647518	-7.0019903	comment	3.0	13.0	1641841358	12.344091
29885323	Deploying Elixir Book	Deploying Elixir Book	miguelcoba	12.683664	-7.4458766	story	3.0	26.0	1641861076	12.920584
29890265	it kinda has - we use gunicorn with 	it kinda has - we use gunicorn with fastapi using the uvicorn asgi workershttps://fastapi.tiangolo.com/deployment/server-workers/	sandGorgon	12.473337	-6.570109	comment	3.0	13.0	1641901224	9.893465
29890521	I was a php developer for some time 	I was a php developer for some time two years ago, before switching to go.I was mainly solving high performance parallel processing and distributed problems.There are things like ReactPHP which are an awesome achievement, but still every lib you use needs to be developed for ReactPHP.After learning about go and goroutines I only find it painful to solve these problems in PHP, even using ReactPHP.	m4l3x	12.672153	-6.7445655	comment	3.0	17.0	1641902786	10.284442
29890658	"> Its concept of ""one endpoint is on"	"> Its concept of ""one endpoint is one script"" is one of its biggest killer features that no other language has been able to deploy in such an accessible manner.I don't see that as its biggest killer feature. In fact most projects built on PHP using a framework won't use the feature, as every request will be routed through a front controller. This has been true for at least a decade.I think the killer feature of PHP is its shared-nothing architecture, tear-down at every request (or every x requests if you're using php-fpm) which has proved remarkably successful as it is so resilient."	heurisko	12.757578	-6.6255045	comment	3.0	11.0	1641903710	10.2989025
29890755	Javascript is what PHP should be sin	Javascript is what PHP should be since day 1.	revskill	12.650493	-6.471891	comment	3.0	19.0	1641904406	10.285658
29890815	A language that uses archaic syntax 	"A language that uses archaic syntax with dollar vars, semicolons, is pretty verbose itself may die before it evolves into something sensible. Not that I believe PHP will die any time soon, but just replying to your ""slow is good""."	mojuba	12.752742	-6.6516395	comment	3.0	15.0	1641904876	10.324665
29890885	In its early years up until around 2	"In its early years up until around 2006, PHP was mostly ""HTML on steroids"", that is, an HTML preprocessor with lots of goodies like ""batteries-included"" DB access, form handling, image processing, text processing, all accessed via a single Apache module. You simply rename your .html file to .php, and put some magic between ""<?php"" and ""?>"".Then came along templating engines like Smarty, and they introduced a new templating language for a language that was already built for templating. For some reason, ""<?= $foo ?>"" was considered much worse than ""{$foo}""."	bluetomcat	12.630291	-6.535018	comment	3.0	10.0	1641905369	10.276873
29891034	Can't wait for:  - Pattern matching 	"Can't wait for:  - Pattern matching in switch statements (done horribly wrong)
  - If, while, and switch expressions
  - Inferred type system
  - Consistent array method argument order
  - Actually usable higher order functions and reflection


Big reminder: Php is a fractal of bad design, and I intensely hated using it at work for many years. The only good thing in Php is Symfony2 framework.https://eev.ee/blog/2012/04/09/php-a-fractal-of-bad-design/"	peterhil	12.582011	-6.739894	comment	3.0	10.0	1641906513	10.308925
29891065	I'm glad the community around modern	I'm glad the community around modern PHP is thriving, but filler articles like these are getting on my nerves. Reiterating a bunch of content that has already been covered extensively on the web in the past months (and in 10+ previous posts on your own blog), slapping a misleading title on it and filling it up with call-to-action's for your own personal video/newsletter/courses isn't good content. The author had some really good articles in the past, but this reads like fluff just to fill up his blog. Quality over quantity.	dreadnip	12.786328	-6.6370606	comment	3.0	11.0	1641906726	10.331666
29891239	Is it? Last time I used PHP (around 	"Is it? Last time I used PHP (around 5.x-7.x) it was exactly the other way around. For production you needed php-fpm, nginx, opcode cache... it was a nightmare compared with go or even java.
Is it better now?"	snov	12.67389	-6.722418	comment	3.0	14.0	1641907876	10.279811
29892140	Laravel and Livewire is the best-kep	Laravel and Livewire is the best-kept secret ever because everybody is too busy being biased against PHP.	gjsman-1000	12.8164	-6.6509695	comment	3.0	15.0	1641913071	10.395574
29904956	Reminds me of CoffeeScript, and look	Reminds me of CoffeeScript, and look where that went.	ostenning	12.415817	-6.600449	comment	3.0	11.0	1641986935	-10.536724
29971975	It's a little disturbing that this Y	It's a little disturbing that this YJIT was accepted into ruby 3.1 near the end of its cycle, just a couple months ago, and now it's being rewritten in a new language.  Kind of a smell if you ask me.	baggy_trough	12.634954	-7.0441184	comment	3.0	14.0	1642455572	12.377523
29972187	> you wouldn't use ruby outside of L	"> you wouldn't use ruby outside of Linux, Windows, Mac, FreeBSD, OpenBSD and Rust has support for more than that[1].Ruby has support for plenty of ""exotic"" systems like HP UX, AIX etc. It's unclear how many people actually use it, but it's there.> I don't know if they want to use an existing JIT codegen like LLVM or Cranelift, or their own.Their own."	byroot	12.551751	-7.045582	comment	3.0	13.0	1642456974	12.388165
29984888	Sonora: Python implementation of gRP	Sonora: Python implementation of gRPC-Web built on top of WSGI/ASGI	BiteCode_dev	12.398449	-6.465381	story	3.0	53.0	1642536131	9.66153
29987267	tldr: avoid features in TypeScript w	tldr: avoid features in TypeScript which must emit runtime code when compiling to JavaScript - that is, any TypeScript-exclusive feature that’s not type annotations.Honestly most of these features are really useful, and as someone who never wants to work in raw JavaScript, I wish they were just added to JavaScript instead. Why shouldn’t JavaScript have enums, namespaces, private modifiers which aren’t #, and decorators? JS already gets new features which break backward-compatibility, mine as well add features which fix compatibility with TypeScript.	armchairhacker	12.357687	-6.8020606	comment	3.0	24.0	1642546209	-10.43657
29989482	Funny to reflect that there was a ti	Funny to reflect that there was a time not so long ago when writing web apps (CGI usually) in C wasn't at all unusual (shortly before Perl became much more popular for this). And today, it is indeed kind of crazy.	galdosdi	12.451313	-6.4600906	comment	3.0	12.0	1642562002	8.795755
30024503	A lot about the Rubocop philosophy r	"A lot about the Rubocop philosophy really grates on me. Many of its preferences are arbitrary and don't, in my opinion, contribute to code readability. Many others are good as a rule of thumb but cause more harm than good when they are blindly enforced by a robot. A recent example from my work went something like this:  if some_verbose_condition && some_other_verbose_condition
    do_the_thing unless excluded_case || other_excluded_case
  end

Rubocop changed this to  if (some_verbose_condition && some_other_verbose_condition) && !(excluded_case || other_excluded_case)
    do_the_thing
  end

which is just worseand then it had the gall to complain that the line containing the `if` was too long.That said, if you disable half its rules, Rubocop can be a useful tool. We've long had a list of "	jstan65536	12.425291	-7.1088963	comment	3.0	17.0	1642777799	-10.915264
30035412	What makes Elm appealing to me is th	What makes Elm appealing to me is that is allows me to completely avoid the whole JavaScript ecosystem. There’s no dealing with npm, webpack and all the rest of that confusing mess.	mrweasel	12.988637	-7.6768675	comment	3.0	10.0	1642847205	-12.773874
30035683	Reliability isn't really part of Typ	Reliability isn't really part of Typescript's pitch though.It's maintainability.	skrebbel	12.349686	-6.8373203	comment	3.0	10.0	1642850032	-10.450047
30042462	I don't like PHP or MySQL, but WP is	I don't like PHP or MySQL, but WP is a pretty decent piece of software.	forinti	12.791534	-6.550703	comment	3.0	23.0	1642898540	10.293314
30043854	Despite the absolutely terrible inef	"Despite the absolutely terrible inefficiencies, the scaling benefit these """"""serverless"""""" technologies provide is hard to replicate with traditional software. Throwing a Javascript file into some *aaS platform and having that run on a datacenter near the user, automatically upload the output to storage near the user, and scale up dynamically if there's a sudden influx of thousands of users is very hard to accomplish manually without reserving tons of VMs or using some kind of data center API with auto provisioning.Most businesses have no need for such a system, of course, and the costs per function execution are astronomical in comparison to a native program, but for some use cases, the benefits outweigh the costs.As for Ruby and Python, the cost is measured in dev time rather than server"	jeroenhd	12.332052	-6.765752	comment	3.0	22.0	1642915414	8.572143
30045640	A guide on how to use Ranch with Eli	A guide on how to use Ranch with Elixir	carlosfritz	12.682366	-7.4603305	story	3.0	24.0	1642940647	-13.407675
30052673	I got foiled by PHP's deceptive Fran	I got foiled by PHP's deceptive Frankenstein “dictionary or list” ARR (cont)	whack	12.532416	-6.64381	story	3.0	8.0	1642988400	10.290547
30068929	I think they're just heavily and nar	I think they're just heavily and narrowly targeting webdevs. Python for Django, Ruby for Rails, PHP, then a whole bunch of CSS/React-y stuff I'm not too familiar with.I'm sure people use Go for back ends, but it's more for systems right?	sterlind	12.604957	-6.5353417	comment	3.0	10.0	1643093499	9.962712
30074214	Other than existing code bases, what	Other than existing code bases, what's the advantage of using Ruby for new projects these days when better tools exist? For example, Elixir - ergonomics of Ruby but cleaner functional approach, distributed and much faster for typical web apps.	cpursley	12.664204	-7.0051856	comment	3.0	17.0	1643129719	12.382164
30075808	I get the appeal of TS, but why the 	I get the appeal of TS, but why the fuck would any project tie themselves to the language in this way? Angular 2+ did it, I didn't realize Deno did as well. Very bizarre decision unless I'm missing something.	danielvaughn	12.433501	-6.5012507	comment	3.0	17.0	1643135255	-10.899866
30088172	I am currently finding Rails view ge	"I am currently finding Rails view generation to be shockingly slow.  (no DB query involved, just the view generation computation). I guess I do too many complicated things in my view generation.(But one thing I don't currently do that has always looked shockingly slow when I've measured it, is Rails i18n. But in general, I'm kind of surprised to find you saying Rails view generation is pretty dang fast! It's always seemed to me like the Rails answer was ""yeah, we know, that's why you cache."" But now I wonder what I'm doing terribly wrong...)"	jrochkind1	12.731537	-6.9384933	comment	3.0	12.0	1643216834	4.276789
30100793	Every language should come with a Pr	Every language should come with a Prolog interpreter. :) Well done, ichiban team!	gmfawcett	13.136376	-7.2973685	comment	3.0	17.0	1643292859	-12.48174
30125341	I've been experimenting with this vi	"I've been experimenting with this via a babel plugin for a while.The difference in ergonomics is huge, and it's readable too!At first, I was so excited to try it, I wanted to ""simulate it"" via some library I developed: https://github.com/egeozcan/ppipe Then I realized it was super hard to add typings for it (I use Typescript nearly exclusively these days).Anyway, I can't wait this to be adopted by Typescript!"	egeozcan	12.342381	-6.825476	comment	3.0	12.0	1643452959	4.7683334
30168070	Wow I can't believe how light years 	Wow I can't believe how light years ahead Deno is than Node. You want imports you want fetch you want TS, use Deno.	stereocodes	12.500703	-6.4632106	comment	3.0	12.0	1643744626	-10.901347
30175073	Honest question, how would that work	"Honest question, how would that work?PHP code is not sandboxable (ignoring the ability to disable functions), AFAIK. Is it? So plugins do have complete (read) access over the entire code, the secrets in the config files, the database etc.?Not allowing plugins to directly execute PHP code would either fundamentally break the wordpress plugin model or require an interpreter for a turing-complete ""wordpress plugin programming language"", right? That would kill any performance, especially on uncached wordpress instanced, even on PHP 8, wouldn't it?"	schroeding	12.73918	-6.6258583	comment	3.0	10.0	1643789954	10.280562
30175396	There are companies that ask you to 	There are companies that ask you to write a sudoku solver after a day of interviews :(	wdb	13.4503765	-7.408551	comment	3.0	20.0	1643793391	15.078768
30175676	The issue is that if you’re developi	The issue is that if you’re developing like this on WP you don’t gain much from it except the ability to use a select few plugins and an admin UI. At this point why not use a solid PHP framework like Laravel?	dgb23	12.793759	-6.613875	comment	3.0	18.0	1643796104	10.38966
30175497	I don't even know how to play Sudoku	I don't even know how to play Sudoku.	barbecue_sauce	13.447064	-7.4073343	comment	3.0	17.0	1643794498	15.072975
30175779	Don't do this! What TS is trying to 	"Don't do this! What TS is trying to tell you is that this variable may not have been set in the environment, and thus it's value inside of the program will evaluate to `undefined`.What you are doing when you create the environment.d.ts file is forcing the transpiler to assume the variable will have been set, which is not really true. The program may still end up being executed in an environment in which the variable was not set.Instead, what I like to do is create a config file in your project where you export an object containing all configuration values for your project. There, you can set default values for variables coming from the environment. In this way, you guarantee a value will be present for the execution of your program:  export const config = {
    dbConnectionString: process."	lobstrosity420	12.344951	-6.5250573	comment	3.0	11.0	1643797060	-10.454842
30194136	Rails is not written in Ruby	Rails is not written in Ruby	psadauskas	12.709525	-6.9558167	story	3.0	11.0	1643904294	12.354233
30196462	I really enjoyed using Symfony for a	I really enjoyed using Symfony for a lot of years.The frameworks around before, Zend & CodeIgniter, were flawed in my opinion and Symfony was a breath of fresh air. More recently though, it feels like Laravel is doing a better job at letting people just get on with building a website.	jonwinstanley	12.800088	-6.635981	comment	3.0	11.0	1643912853	10.33418
30207320	I think the author is trying to comp	I think the author is trying to compare what it takes to create an MVP web-app with all modern features versus creating it in the JS ecosystem.Also, Rails is well known to have Convention over Configuration. That helps to set up and maintain a project since everybody has to follow the same pattern. The cons is that you lose flexibility from the architecture perspective. But in Rails, you have ways to overcome that easily.I think Rails lost popularity when the front-end JS framework movement started. Rails didn't have a response to that; people had to create the Rails app, remove the Views and use a JS framework to create the one-page app experience.Now, if you are already spending that much time using JS for the front-end, why not use JS for the backend? But then things got too complex in 	designium	12.757792	-6.78609	comment	3.0	11.0	1643985828	12.306531
30207949	"> There is no such thing as ""the nod"	"> There is no such thing as ""the node way"".And thank fucking god for that.  It turns out there's no such thing as ""The one way"" - it's a choice for a reason: It has consequences and trade-offs that are applicable to your goals.If it turns out your goals are a very simple crud app for a team of under 5 - Rails is probably a great choice.For most everything else, you should probably understand why Rails made the choices they did, and what the trade-offs are.  (ex: I would argue that the author is making a HUGE mistake by not just immediately outsourcing auth to something like a self-hosted Keycloak instance, or Okta/Auth0 - but my needs require enterprise auth support (SAML, OIDC, Provider support, etc) and maybe his don't)But the thing is... there are TONS of simple CRUD app frameworks out "	horsawlarway	12.800403	-6.895451	comment	3.0	11.0	1643988374	12.360672
30208117	The dominance of Rails for its use c	The dominance of Rails for its use case within the field of Ruby is is only one half of the equation. The other half is that Ruby has mostly collapsed into Rails, there's not much Ruby happening outside of Rails. This could never happen with a js framework of similarly scope, because all the other js use cases won't go away. One example of such a thing that won't go away is doing client-side stuff in the scope of a Rails protect. JS would have to lose a lot before it could achieve similar focus.	usrusr	12.746315	-6.8600936	comment	3.0	14.0	1643989030	12.332933
30207372	The point here is that you do not ha	"The point here is that you do not have to think about choices, there is a ""rails way"" for every problem. There is no such thing as ""the node way"". They are hundreds of ways, some of them are dead ends."	WolfOliver	12.75494	-6.889784	comment	3.0	15.0	1643986052	12.330659
30209382	The article makes a comparison to re	The article makes a comparison to react, but that’s a front end library. Does rails also do front end?!	jb1991	12.820569	-6.6173143	comment	3.0	18.0	1643994050	12.30148
30210331	What I've gathered, over the years, 	What I've gathered, over the years, is that the people who dislike Rails because it makes a lot of decisions for them think they're just too cool for that. It insults their programming ability. OK, I can see that. So, go ahead; have it your way. But while you're still writing thousands of lines of boilerplate in both the front and back ends, and getting your types sorted out, I'm done with my app, and moving on to the next one.	TheRealDunkirk	12.756801	-6.9189034	comment	3.0	14.0	1643997966	12.352043
30214450	I think this is the beauty of Ruby. 	"I think this is the beauty of Ruby. The core philosophy of Ruby is that it was designed to make ""1.day.ago"" possible. That's why DHH fell in love with it and used it to build Rails. You can't do that with many other languages.""1.day.ago"" is not really a piece of code, it's a sensibly named shortcut to existing code that already solves easy problems. It's is not designed to be built upon; not all code has to be designed that way.For example:// How to get last day of month?// Javascriptvar month = 0; // Januaryvar d = new Date(2008, month + 1, 0);console.log(d.toString()); // last day in January// monkey patching in ActiveSupportDate.today.end_of_monthThis is the definition of a great DSL. It abstracts away easy problems so you don't have to solve them hundreds of times and allows you to foc"	spyckie2	12.691064	-6.962508	comment	3.0	10.0	1644014546	12.360248
30214649	I understand that if you like Ruby a	I understand that if you like Ruby a whole lot and like being a web developer, but you don't like Rails for whatever reasons, it can be a frustrating experience over the long haul.But as a counter-example to that, I'm constantly amazed that there are a ton of Ruby gems out there which pretty much work as advertised outside of Rails (even if Rails gets a privileged happy path during config). Not to mention you can use ecosystem stalwarts like Puma, Rack, Sidekiq, and many other subsystems outside of a Rails app entirely. Heck, you can pull just bits of Rails in if you really need them. Want Active Record for your ORM but nothing else? That's totally possible! (But of course then you get a bunch of Active Support stuff too which is what the author objects to.)Personally I love Active Support	jaredcwhite	12.826464	-6.8265033	comment	3.0	18.0	1644015451	12.306043
30242212	It comes from Laravel (https://larav	"It comes from Laravel (https://laravel.com/); ""The PHP Framework for Web Artisans"". The command line entry point is also called ""./artisan""."	BafS	12.782813	-6.6215587	comment	3.0	13.0	1644225235	10.308585
30242549	Well... I wouldn't recommend JavaScr	Well... I wouldn't recommend JavaScript. TypeScript is much nicer and removes a lot of the JS pitfalls.	rbanffy	12.32945	-6.5647063	comment	3.0	22.0	1644227754	-10.465034
30242934	> And several libraries and framewor	> And several libraries and frameworks built around it are flourishing.Yes.> PHP is actually a really decent option these days.I beg to differ. What comparative options do you have experience with to base your claim on?	cies	12.768263	-6.6208663	comment	3.0	25.0	1644230498	10.334721
30242920	Totally agree. This is beyond taste 	Totally agree. This is beyond taste or preference.Yes you can build a great app in PHP. But so you can in Kotlin or Ruby or ...Yes some have a career by starting with PHP. But that does not make it a good language for beginners. Same can be said (and to me is verrrry true) fro JavaScript.Language design matters. It shapes how you think about code. Talk to people who've learned AND USED many languages including some esoteric ones like Haskell, a LISP or OCaml. Then see what they have to say PHP and JS for beginners.	cies	12.720771	-6.6450257	comment	3.0	20.0	1644230391	10.324123
30243438	I will just leave these here:https:/	I will just leave these here:https://eev.ee/blog/2012/04/09/php-a-fractal-of-bad-design/https://software-gunslinger.tumblr.com/post/47131406821/php-...	nalekberov	12.821053	-6.7007666	comment	3.0	12.0	1644234143	10.483076
30245648	It's a decent website - a useful col	"It's a decent website - a useful collection of information and links to additional information, that can serve as a starting point to learn more. For those who use PHP, or for those who'd like to learn to use it, this might be useful resource.The same thing can't really be said of the comments in here though. I don't see how emotionally charged debates over what is the ""best"" or ""worst"" language, help anyone.It's almost as if some people can truly have their ego shattered, by someone on the internet liking another language than they do...Couldn't we just agree that there is no ""best"" language for every possible use case, and that everyone is allowed to like whatever language they want to like? It's not like the whole bickering is going to change anyone's opinion."	hooby	12.745915	-6.6536417	comment	3.0	11.0	1644245752	10.324067
30246568	> That's precisely what I'm saying: 	> That's precisely what I'm saying: The whole purpose of a major version is to indicate breaking changes.this is what I don't get. Why would anyone in their right mind use a language ecosystem where each major version upgrade breaks their code?I just don't understand why people accept this from their tools. Imagine if Google would just randomly change their APIs every couple of months and then stop supporting the old ones. Nobody would use their stuff. But somehow the PHP community thinks this is perfectly normal.It just boggles the mind.	inoop	12.679468	-6.608335	comment	3.0	14.0	1644249554	10.288814
30246030	I do think its pretty weird to hire 	I do think its pretty weird to hire someone as a frontend dev and have them in Rails a bunch IF you were in models, controllers, and elsewhere a lot.  If the majority of your work was in views, ERB or otherwise, I don't think its that strange.There's a sort of all or nothing aspect to how you handle the view layer in Rails, at least for a smaller code base.  However, I'm sure Shopify is large enough that they have apps doing a little React, a little server rendered in ERB, and others that are fully React backed with an API, and probably some that don't have any JS framework at all.	jmuguy	12.765828	-6.846912	comment	3.0	11.0	1644247346	12.33364
30262735	If you want to talk about potentiall	If you want to talk about potentially irrational reasons to be put off Laravel: when picking a framework I ended up going with Zend over Laravel mostly due to the modularity of the former... but also because the wide prevalence of Laracasts made me concerned that written documentation would be difficult to use and the documentation space of the framework would slowly migrate to being half-out-of-date video and audio snippets that slowly became more and more misleading and inapplicable without being updated due to a lack of motivation.	munk-a	12.802832	-6.6576114	comment	3.0	13.0	1644346419	10.348786
30262853	Just for some context, here's how th	"Just for some context, here's how the items under ""Ecosystem"" on laravel.com break down on free vs. paid:Free:- Breeze- Cashier- Dusk- Echo- Horizon- Jetstream- Mix- Octane- Sail- Sanctum- Scout- Socialite- Telescope- ValetPaid:- Envoyer- Forge- Nova- Spark- Vapor"	tnorthcutt	12.829271	-6.6114707	comment	3.0	17.0	1644346902	10.360252
30264188	As a solo bootstrapped SaaS founder 	As a solo bootstrapped SaaS founder that literally relies on my app to pay my rent and food, I owe my sanity to Laravel. I've been doing web development for 10+ years. Nothing else understands the needs of a business owner AND solo programmer like Laravel does.I worked with Python (Flask/Django) for (4+ years) longer than I worked with Laravel (only 1 year), and yet I'm already 10x more productive in Laravel than I have ever been in Python.Software projects follow Conway's Law, i.e. [1] the software architecture reflects the team structure. Laravel reflects the needs of business owners and one-man-companies because it is built by a business owner and has an ecosystem supported by one-man-companies who build high quality products for profit. I want beautiful high level abstractions AND a th	igammarays	12.792015	-6.6234446	comment	3.0	20.0	1644352226	10.337273
30288110	I just shipped my fourth large proje	"I just shipped my fourth large project based on Phoenix LiveView and I think it is the best thing that happened to web dev since forever.The javascript is minimal (like to manage selection in text field or to handle copy/paste). Everything else is in elixir. Tailwind is used for CSS.Having the full client state available on the backend is really incredible. It is so much easier, no more ajax/graphql... You just have all your backend data ""under your fingers"".I can only recommend giving it a try.Also, if your app is offline first, phoenix channels are great for sync. It is not live view, but it is easier to use than ajax calls."	kuon	12.878054	-6.833522	comment	3.0	12.0	1644509025	12.709622
30286722	Can anyone clarify what this quote r	"Can anyone clarify what this quote refers to: ""what really sets Erlang apart, for McCord, is its ability to preschedule processes so that the CPU doesn't get hung up on any single thread.""What's this concept called? Is it simply a matter of setting a priority level on a certain task, that way the scheduler can make sure it doesn't block?"	rashkov	12.351831	-7.497359	comment	3.0	10.0	1644504273	12.837909
30305383	Thanks for checking it out searchabl	Thanks for checking it out searchableguy.  Tbh, I haven't run any performance/scaling tests just yet. :)  I certainly don't expect it to be as performant or scale as well as BEAM right now and agree with your point that BEAM is particularly well suited for this paradigm.That said, I think there are other server technologies to back LiveViewJS apps that may be able to scale out and perform just as well as BEAM including: Redis and DynamoDB.  I plan to experiment with these in the near future.Additionally, a big motivation for me was that I wanted to write apps in a language that I am very productive in (namely Typescript) which also has a large ecosystem and larger population of developers.Lastly, in terms of other languages that I think could be well suited for this paradigm, Golang stands	floodfx	12.841349	-6.8910465	comment	3.0	13.0	1644605006	12.699362
30307601	I have a strong feeling that deno wi	I have a strong feeling that deno will be the io of our age: important for pushing node forward and ultimately be brought into node proper but not worth investing any apps/projects onto.	beardedetim	12.515705	-6.4605203	comment	3.0	19.0	1644617370	-10.90901
30307654	I find it highly unlikely that Node 	I find it highly unlikely that Node will ever choose to support TypeScript out of the box. I’d love to be wrong, but it would be a sharp departure from their “bring your own” approach (eg with --loader/--require, the former being under active development).	eyelidlessness	12.404246	-6.6646132	comment	3.0	15.0	1644617683	-10.444721
30324610	I used to use Django for this kind o	I used to use Django for this kind of thing, but I have found that Flask connected to your fully managed database of choice like AWS with dynamodb (nosql db gets rid of even worrying about schemas) is the simplest way to quickly get up and running and do almost everything in Python with very little learning of various settings and details of specific frameworks since it is so minimal. This is how I tend to prototype then if there's anything promising I'll move to a better stack of tech based on the needs of the user (ex: is the end result going to be better as an iphone app, are there particular scaling needs that I need to worry about, etc.).	dbish	12.795414	-6.5126896	comment	3.0	10.0	1644779658	9.980068
30359004	It's always driven by hype, or maybe	It's always driven by hype, or maybe groupthink. Every year I feel bad for the Ember contributors when this thing comes out cuz the respondents boldly claim Ember's bad while also admitting they've never used it and have no interest trying it. The clear mark of a popularity contest.	somehnacct3757	13.122256	-6.451129	comment	3.0	10.0	1645013530	-15.541744
30362286	I am constantly reminded how lame ru	I am constantly reminded how lame ruby and the rails ecosystem is. Consistency was solved long ago in the .Net ecosystem and using standard tools would not lead the author down a dark road of ‘it just works’ but it really doesn’t. All this ‘you could use xxxx but I haven’t setup my instance that way’ is just fan boys trying to pull the wool over your eyes to hide the fact that the tools are really crap. Consistency is paramount in the enterprise and anything less is just a lie that the system works. It doesn’t.	yesdocs	12.747311	-6.933649	comment	3.0	10.0	1645030158	12.3594885
30368752	It’s a solved problem? The most diff	It’s a solved problem? The most difficult to navigate and extended codebase I ever saw was a medium-to-large sized Rails codebase.	amw-zero	12.742413	-6.9316535	comment	3.0	10.0	1645063873	12.344716
30423154	I don't know much about Laravel or S	I don't know much about Laravel or Symfony, but your error pages show a full stack trace with the source code of the PHP files. Might want to turn that off.	amanzi	12.815922	-6.6264195	comment	3.0	22.0	1645494481	-3.4789886
30429724	The speed is fixable. Performant AOT	The speed is fixable. Performant AOT is very possible with Typescript. But if Facebook is not doing it, then the performance is good enough for them. Plus one can always code the problematic part in the native language.	_0w8t	12.331139	-6.5168386	comment	3.0	14.0	1645546754	-10.423597
30455562	> types were not remotely the most c	"> types were not remotely the most common type of problem I ever ran into, and certainly not ""every"" bug.If you took that away from what I wrote, I apologize. I meant that without a compiler and type-checker, you would only find bugs at runtime. In my experience, the vast majority of these would be easily discovered by a compiler. Presumably that experience is shared by Ruby devs since they're now adding type-checking.> This hasn't been a serious problem in a decade.That may be true. I haven't had any need to revisit Ruby or Rails since I moved to Go. But it was a serious problem with no workaround, and I've never encountered any scenario like that since switching to Go."	hellcow	12.490094	-7.099585	comment	3.0	18.0	1645715192	12.372303
30455752	If you're finding bugs in production	If you're finding bugs in production that a compiler or typechecker could have found then there's something seriously wrong with your test suite. That's how Rails works, if you don't have 90%+ statement coverage it will be hell.	tinco	12.588303	-7.04088	comment	3.0	11.0	1645716452	12.354116
30455943	I'd add Phoenix to the list when it 	I'd add Phoenix to the list when it gets its documentation in the same echelon as that of Rails or Laravel. It may be as productive if you already know how to use it, but good luck building anything non-trivial on your own if you don't.	MathCodeLove	12.792901	-7.114739	comment	3.0	15.0	1645717282	12.665118
30460909	I don't think this is a fair charact	I don't think this is a fair characterization of their post.  They aren't playing with legos.  Rails trades boilerplate code savings for abstraction.  The GPs point is that boilerplate isn't hard to write while abstraction makes everything harder.  And I think it's a fair criticism.  Large Rails projects are difficult to work in because of that abstraction.  It can be hard to even figure out what code is running let alone identifying bugs there.	treis	12.740792	-6.9466405	comment	3.0	18.0	1645740189	12.381897
30494916	Just out of curiosity, why do you fe	Just out of curiosity, why do you feel that php is well suited for the model?	CSSer	12.762036	-6.6254344	comment	3.0	12.0	1646010860	10.340159
30532644	Haven't used Lombox, RxJava is great	Haven't used Lombox, RxJava is great, but it just feel like bandaids on a language that wasn't really designed for it.There's no accounting for taste, but I'll take either Scala or Clojure on the JVM any day of the week. Scala's monads don't feel like a library feature, they feel baked into the language...because they are.	tombert	12.3420925	-7.5848775	comment	3.0	15.0	1646252941	8.563164
30546548	Running TypeScript on ESP8266/ESP32 	Running TypeScript on ESP8266/ESP32 Devices	skittleson	12.368722	-6.610113	story	3.0	31.0	1646339532	-10.410005
30571922	"Why is it called an ""engine""? Is tha"	"Why is it called an ""engine""? Is that some new type of gem or package in Rails?"	animex	12.725673	-6.915556	comment	3.0	12.0	1646514708	6.694962
30578551	If anyone else who hasn't yet abando	If anyone else who hasn't yet abandoned ruby wants to suppress ruby-language-level warnings, this gem is super helpful: https://github.com/jeremyevans/ruby-warningPersonally, I'm really happy that 2.7/3.0 is the biggest backwards change ruby has had in years, and still wasn't really that bad, was pretty easy to update codebases for. I'm happy that ruby committers are taking avoiding breaking changes pretty seriously.(the deprecation warnings are part of a standard of making what breaking changes do occur easier to handle, I don't think I'd agree with removing them. In this case, gitlab would have had to change their code for 3.0 with or without the warnings in 2.7; the warnings helped them do so reliably. There may be ways to make them less annoying without being less useful. I do think th	jrochkind1	12.535311	-6.993541	comment	3.0	11.0	1646583379	-5.942495
30600486	The drama sucks, but I feel like the	The drama sucks, but I feel like there's drama in almost every dev community. I mostly just don't pay attention to any of it, because it doesn't affect my day to day usage of something like Rails.	Trasmatta	12.738414	-6.936704	comment	3.0	10.0	1646751020	12.32637
30619951	I don't see the point. This proposal	I don't see the point. This proposal only goes halfway and large swathes of syntax (like enums) will not be supported. So it doesn't achieve its stated goal of letting you run Typescript in the browser. The cost is making all JS engines implement the parser, raising the barrier for entry for new JS engines, and hampering innovation in the future by tying Typescript down to the slowest JS engine developer.The solutions we already have (typescript in comments, or lightweight dev servers like vite) aren't perfect, but they don't come with the gargantuan costs of types in JS.	exclipy	12.332232	-6.865332	comment	3.0	18.0	1646860002	-10.460809
30622971	What you say means it's worth learni	What you say means it's worth learning if you can land in the right company which is quite risky.Besides, unless a language has a strong point compared to others, it's a hard sell, like PHP is good on web, JS is known by everyone and ecosystem is huge and python is good for ML and scientific stuff but what's the selling point of ruby besides rails?With that said I do like the language itself (but not the typing system in 3) and would like to use if there's a place for it.	mekster	12.624597	-7.010183	comment	3.0	18.0	1646883283	12.367783
30622996	> what's the selling point of ruby?I	> what's the selling point of ruby?I'd say it is custom webapp development (with rails) and scripting on the command line (anything bash can do, ruby can do better).PHP is good on the web with the huge installed base of wordpress, but when it comes to custom web app development, ruby (well, rails, really) holds its own with laravel, symfony and the other MVC frameworks.	mooreds	12.727763	-6.889804	comment	3.0	10.0	1646883622	12.2979145
30627507	I mean, with all due respect, who ar	I mean, with all due respect, who are you to decide what Javascript is and is not? There's obviously a huge demand for type safety in Javascript, hence the existence and adoption of Typescript.	halfmatthalfcat	12.348809	-6.761094	comment	3.0	34.0	1646923708	-10.454814
30627595	Compare the lines of code (on Github	Compare the lines of code (on Github, say) written in straight Javascript and the lines of code written in Typescript.I do not think the demand is quite as huge as you think it is.	Turing_Machine	12.364635	-6.7804976	comment	3.0	14.0	1646924206	-10.474094
30654680	This topic came up earlier this week	This topic came up earlier this week, and I just don't see what the big win is. I guess people want to be able to skip setting up a build system for TypeScript, but if you do that, you'll be sending a bunch of extra junk to browsers that will just be ignored. So you'll need to setup a minifier to strip it all out, which means you have to setup a build system anyway.Is there some other advantage? Easier debugging on the client, I guess, but proper source maps do that pretty well already. I dunno, this just seems to be making a complex language more complex for not much gain.That said, if the runtime actually used the types for safety or performance, I could maybe see some value added there.	dlbucci	12.372917	-6.7659135	comment	3.0	13.0	1647117508	-10.4479
30689044	What do you build where you see that	"What do you build where you see that ""healthy margin""?  I build mostly webApp, and API services (boring business stuff). Reaching for Go or PHP is about the same (read JSON, business rules, database). For this stuff PHP was hardly better than CGI-Perl - except for application performance - where PHP was better than CGI and Go is better than both. What am I missing in using the tools that I don't see that margin? Maybe I'm measuring the wrong thing?"	djbusby	12.722377	-6.659069	comment	3.0	12.0	1647368952	10.284806
30717459	"Hard to beat the Erlang ""destructuri"	"Hard to beat the Erlang ""destructuring"" bit syntax, for example [0] parsing an IPv4 datagram from `Dgram`:  -define(IP_VERSION, 4).
  -define(IP_MIN_HDR_LEN, 5).

  DgramSize = byte_size(Dgram),
  case Dgram of 
      <<?IP_VERSION:4, HLen:4, SrvcType:8, TotLen:16, 
        ID:16, Flgs:3, FragOff:13,
        TTL:8, Proto:8, HdrChkSum:16,
        SrcIP:32,
        DestIP:32, RestDgram/binary>> when HLen>=5, 4*HLen=<DgramSize ->
          OptsLen = 4*(HLen - ?IP_MIN_HDR_LEN),
          <<Opts:OptsLen/binary,Data/binary>> = RestDgram,
      ...
  end.

[0] https://www.erlang.org/doc/programming_examples/bit_syntax.h..."	lsllc	12.428803	-7.4561415	comment	3.0	13.0	1647564259	-9.551498
18264424	Well TypeScript also had a huge corp	Well TypeScript also had a huge corporation with infinite budget and a large full time team of contributors and evangelists which probably helped adoption.	sdegutis	12.382638	-6.7697964	comment	3.0	34.0	1540057426	-10.473473
18270501	> That ship already sailed ...That d	"> That ship already sailed ...That doesn't prevent launching a new ship.> and changing it now would just massively add to the confusion ...There are two types folks who care about Perl - both are in dwindling numbers. The old-timers -- they never have and will never be confused and clearly understand that there is urgency for that ""ship"", now more than ever. The new-comers and those have deserted the ship and looking for an opportunity to come back -- they are massively confused as hell right here right now.There is only one real reason for not launching that ship -- Larry Wall has taken that sailed ship long ago and will not come back (admit his mistake)."	hzhou321	12.337233	-7.0351725	comment	3.0	13.0	1540158421	13.137838
18273496	ioquatix, just I'm clear, if this is	ioquatix, just I'm clear, if this is an evented server it will use just one core? Or does it create one process per core? If not do you recommend we use https://github.com/stripe/einhorn to split the work across N falcon processes (one for each core)?And do you have advice / recommendations on database pool sizes when using Rails? I assume that each process will have access to as many connections as specified in the DB_POOL config? Does falcon need any pre/post fork re-creation of all connections?	sudhirj	12.679525	-6.9527473	comment	3.0	10.0	1540204206	12.301413
18273450	Countdown to PHP 5.6 EOL	Countdown to PHP 5.6 EOL	wimgz	12.780186	-6.638793	story	3.0	17.0	1540203516	10.363112
18277350	This seems like a solid product and 	This seems like a solid product and I will definitely keep it in mind. One thing that I really like is the number of languages you support (https://repl.it/languages). I would recommend adding support for Elixir and Phoenix down the road. While the community is small (compared to other languages/frameworks), it is growing, and the community is great.Congrats on securing your funding and all the best!	snake117	12.677594	-7.402459	comment	3.0	10.0	1540235157	12.904454
18280087	I'd love to use TypeScript, but I've	I'd love to use TypeScript, but I've hit walls of errors that are nearly as bad as the old C++ template errors! (Though to be fair, this was a while ago, the compiler may have improved).SO: Any good way to learn TypeScript, particularly the more complicated types?	chris_st	12.360402	-6.819242	comment	3.0	14.0	1540258025	-10.5222225
18288152	So is this by the same people behind	So is this by the same people behind 'vanilla' perl (Larry etc)?I am assuming not but could not immediately find the information on the (mobile) website.	Insanity	12.348815	-7.0195208	comment	3.0	17.0	1540334637	-10.65943
18288546	> without a lot of the strange quirk	> without a lot of the strange quirks of perlAnd instead with a lot of the strange quirks of Ruby!\s, only kind of, I love Ruby but it does have a few quirks that I see confuse some people coming from other languages when they start writing non-trivial Ruby code (literally everything is an object being a big one — “what do you mean a class is an object?! modules too?!”).However, these quirks are much, much easier to learn, understand, and possibly eventually come to like, rather than some (many) of the quirks that exist in Perl.	cutety	12.445811	-7.046235	comment	3.0	35.0	1540339159	12.934928
18289892	And yet Perl 6 has been droppping th	And yet Perl 6 has been droppping their performance floor by enormous factors, with a lot of room for improvement still.Everyone always shrugged at me when I explained that Perl 6 was designed to be able to be fast, with the ability to outstrip Perl and even other languages.And now that it's happening? They are still shrugging, but its the uncomfortable shrug of someone trying to shake off an inconvenient truth.	snapdangle	12.353014	-7.047359	comment	3.0	13.0	1540358107	13.2080965
18309695	When working on V2 of our architectu	When working on V2 of our architecture we tried out both Elixir and Go extensively. For our workload Go was roughly 8 times faster than Elixir, while both handling concurrent workloads exceptionally well. (bit of background on the type of work we do: https://stackshare.io/stream/stream-and-go-news-feeds-for-ov...)That being said, I'd love to find an excuse to work on a little project with Elixir and Phoenix. Some really cool concepts. Especially the build in support for realtime is really nifty. With Go that's much more work to get up and running.	tschellenbach	12.532703	-7.5055876	comment	3.0	12.0	1540565269	12.840557
18313516	Reports of perl's death are greatly 	Reports of perl's death are greatly exaggerated.	ryl00	12.330112	-7.0372386	comment	3.0	19.0	1540597610	13.198317
18317755	Also probably shouldn’t put RoR as t	Also probably shouldn’t put RoR as the first item in your list of full-stack frameworks if your title says “at scale”	scottmf	12.703475	-6.913091	comment	3.0	23.0	1540675685	12.344444
18331939	"""The big deal was encapsulation and "	"""The big deal was encapsulation and messaging to provide loose couplings that would work under extreme scaling (in manners reminiscent of Biology and Ecology).""This describes exactly why Erlang scales so well."	jimbokun	12.562026	-7.5196247	comment	3.0	21.0	1540850359	-7.6814036
18383792	This is an interesting bit that HN s	"This is an interesting bit that HN seems to discuss a lot:Some community members believe ""Perl 6"" is a very confusing name: it uses a digit as part of 
the name and it conflicts with the name of a sister language ""Perl"". Some outsiders don't realize 
""Perl 6"" is a brand new language—vastly different than ""Perl""—and so avoid it, thinking they 
know what it is already. At the same time, some who love ""Perl"" come to ""Perl 6"" and feel tricked, 
because the language isn't the next release of that language, but an entirely different one.To clear up the confusion, Larry Wall created a second name for the language, a ""stage name"" if 
you will. That name is ""Raku"". It can be used interchangeably with the original ""Perl 6"" name or 
even be combined with it to form ""Raku Perl 6"". Pick the one that wo"	kbenson	12.33086	-7.072157	comment	3.0	25.0	1541436677	13.187112
18395912	I love Perl5, and would like Perl6 t	I love Perl5, and would like Perl6 to succeed.  I just don't see it happening though.  It took this long for the features to settle, but now people will wait for the performance to improve.  In the meantime, the userbase has left for Ruby or Python or something else.Interesting thread from this summer: https://www.reddit.com/r/perl6/comments/8p26bb/is_perl6_fast...	tyingq	12.370984	-7.0463734	comment	3.0	10.0	1541547907	13.16471
18397303	It's interesting that this language 	It's interesting that this language won't die. To me Perl is a great course in how not to design a language. And Larry Wall somehow seems to default to being wrong about design choices. Perl is one of those things that people spend a long time learning and pride themselves in it, not realizing what they're learning is useless. Only Ruby seems to be worse, but at least it has fewer sigils.	stevebmark	12.366932	-7.044321	comment	3.0	13.0	1541569276	13.041987
18397904	Maybe I have the history wrong but i	Maybe I have the history wrong but it seems to me that researchers moved on from classical logic to lambda calculus and intuitionist Martin-Lof type theories and associated programming languages (ML, Miranda, Ocaml, Haskell, Coq).Am I wrong in thinking that Coq for example can be considered a replacement of Prolog?	js8	13.149475	-7.295	comment	3.0	11.0	1541580849	-12.483969
18403692	Kind of feel bad for this one: https	Kind of feel bad for this one: https://www.manning.com/books/phoenix-in-actionStill a MEAP, and only covers up to 1.3Elixir and Phoenix seem to have very fast release cycles.  I don't know if it's a good or a bad thing.  It's great to add a lot of features, or remove the ones that don't really work, but it also renders literature obsolete pretty quickly.	dudul	12.790424	-7.0954995	comment	3.0	14.0	1541639665	12.772236
18423228	I tried using ReasonML for a blockch	"I tried using ReasonML for a blockchain project, and I just couldn't get past being able to express this logic of interacting with a third party library:```
const contract = new web3.eth.Contract(ABI, contractAddress, {from})
```in ReasonML easily, despite spending hours on trying to figure it out. At the end I finally reached to a feature request asking to be able to do 'new' on member functions, and it was in 'planning'.On the other hand Elm's approach to JS interop seemed to be far superior for quirks like these. Javascript code lives on the other side of the border, and Elm code on this. You don't have to create a type for the whole class of the third party library, just the data you want Elm to manage."	splintercell	12.770329	-7.6264286	comment	3.0	13.0	1541880561	-12.687202
18445466	Have you ever written a Sudoku solve	Have you ever written a Sudoku solver. It works like that.You start with an array where every tile is possible in every location. Then you pick a random cell and assign a tile to it. That tile implies some choices are impossible, so you set those possibilities to false. That further implies some other possibilities are false and so on. You propogate that as far as it goes, and when you are done, pick another random cell and assign a random possible tile to it.Because you are propogating information as much as possible before making the next choice, the algorithm very rarely needs to backtrack. You can run WFC without any backtracking at all and it'll still find a solution most of the time.Some animated examples I put together might illustrate things more: https://boristhebrave.github.io/De	BorisTheBrave	13.446287	-7.4073935	comment	3.0	14.0	1542147589	15.07716
18448546	That is absolutely insane. I can't e	That is absolutely insane. I can't even begin to imagine the complexity of that codebase. I thought my Rails test suite was slow because it takes 4 minutes. If I wrote it in C or C++ it would probably be 10 seconds.I can't imagine a C/C++ application where the test suite takes 20-30 hours on a test farm with 100-200 servers. And if you can break 100-1000 tests with a single change, it doesn't like things are very modular and isolated.And 30 hours between test runs! I would definitely not take that job. That sounds like hell.	nathan_f77	12.718785	-6.9456983	comment	3.0	33.0	1542186470	12.363443
18472981	Someone knows if this is a good fit 	Someone knows if this is a good fit for a dev machine: Rails, React, PostgreSQL & Elastisearch? VS Code?	EastSmith	12.804023	-6.6467533	comment	3.0	10.0	1542413151	-8.939665
18474058	I'm a Python developer (web back) wh	I'm a Python developer (web back) who occasionally does some fixes on legacy RoR project and I always ask myself why does Ruby needs so much sugar. Also it does not look very consistent to me, but it's probably because I get to practice only once in a couple of months.After Java, CPP and Node, Python looks to me as the greatest of all. Syntax is just comes to you and usually does not produce problems. And Python even right now has so many areas of application, and does it without much compromises, that I wonder why would I want to change anything.	robben1234	12.500164	-7.037409	comment	3.0	13.0	1542431206	12.372564
18484762	Miguel's Mega-Tutorial was invaluabl	"Miguel's Mega-Tutorial was invaluable to me when I was learning Flask circa 2011-2012. It's a great resource.That said, IMHO, if you're going to implement a simple CRUD app in Python, you may as well just use Django. Django includes all of the ""batteries"" for handling forms, authentication, databases (the ORM), etc. right out of the box. I think Flask has its place; but when it becomes a simple reimplementation of Django, I'm not sure I see the point."	ryannevius	12.789807	-6.528219	comment	3.0	11.0	1542613643	-4.9164104
18485726	I'm a bit hesitant about this articl	I'm a bit hesitant about this article's proposition, although I'm open to be convinced.In the end there's a GIL. For pure CPU-bound workloads, your only true source of parallelism will be putting more processes into the mix, be it via forking or simply spawning more processes from scratch.But inside a given a process, it seems to me that no matter what you do (fibers/threads), only 1 CPU can do CPU-bound work at a time.If I was to design a high-performance Ruby solution, I'd ditch forking, threading and fibers. I'd focus instead in creating low-memory-footprint, fast-startup processes (read: no Rails!) that one can comfortably spawn in parallel, be it in a single server, or in a cluster (think k8s). Max Ruby processes count: 1 per core.	vemv	12.6687	-6.959056	comment	3.0	12.0	1542627980	12.340555
18500120	Personally, I find this quite timely	Personally, I find this quite timely, because I recently wanted to get involved in open source and looked into working with Django. Their ticket tracking system looks far easier to follow and get involved with than many other large projects, but still I find zero tickets marked 'easy pickings' and 'unassigned'.This may be the wrong response, but my takeaway is that the project is too far along for new contributors, so it's better to try and get involved with smaller, less well known projects where I can contribute.In part, I'm commenting because I would love for this to not be true, and would be quite excited if someone pointed out flaws in my understanding!	jamestimmins	12.828366	-6.525904	comment	3.0	25.0	1542773763	-7.259151
18500434	Wow, Django must be used by many of 	Wow, Django must be used by many of the biggest companies around. Instagram comes to mind...Its so retarded to me that companies don't have a model for paying the open source projects they built their whole infrastructure on :(	devxpy	12.817317	-6.5152087	comment	3.0	13.0	1542779322	10.092299
18512145	JSX is only type-checked because som	JSX is only type-checked because someone wrote a type-checker for it.It's completely possible to write a type-checker for HTML templates like lit-html. In TypeScript we even have access to third-party extensible interfaces for all the elements with the HTMLElementTagNameMap, so we can check buildings to properties.We'll be working on a lit-html type-checker for TypeScript early next year.	spankalee	12.352342	-6.857669	comment	3.0	15.0	1542916569	8.354935
18525167	Somewhat related : are there any gui	Somewhat related : are there any guides/tutorials about how to do secure file uploads in webapps and how to avoid obvious security pitfalls?Reading the Django docs https://docs.djangoproject.com/en/2.1/topics/security/#user-... , specifically,>Django’s media upload handling poses some vulnerabilities when that media is served in ways that do not follow security best practices. Specifically, an HTML file can be uploaded as an image if that file contains a valid PNG header followed by malicious HTML. This file will pass verification of the library that Django uses for ImageField image processing (Pillow). When this file is subsequently displayed to a user, it may be displayed as HTML depending on the type and configuration of your web server.is a little concerning. They recommend serving ima	mr_puzzled	12.830588	-6.453944	comment	3.0	13.0	1543114348	9.9917
18533085	Could Kotlin or Swift do it? I like 	Could Kotlin or Swift do it? I like Python/Flask/Sqlalchemy for backend web dev, but I long for a modern, statically typed FP alternative that’s equally (or nearly as) practical and accessible. Just a pipe dream?	asplake	12.56914	-6.480172	comment	3.0	11.0	1543238296	9.947761
18538556	> a version of PHP that's not focuss	> a version of PHP that's not focussed on web requests, which is sort of the entire point of PHP.But even for web requests it's terrible. Or at least, it was, last time I used it years ago. Couldn't really do any long-running tasks in response to an HTTP request, or load a single data set into memory to share among all the HTTP requests over the lifetime of the server. (Maybe you could, but I couldn't figure out how.)I'm quite happy that I haven't touched PHP in years. As fun/cool as this project is, there's nothing I miss from PHP that isn't present -- or even better -- in Go.	mholt	12.7191105	-6.6588454	comment	3.0	11.0	1543282417	10.286965
18553495	What's an ERG?  _Something _Somethin	What's an ERG?  _Something _Something Group I'll take it?	twoquestions	12.560688	-7.507185	comment	3.0	10.0	1543426319	-9.002929
18556571	Just wanted to know what's wrong wit	Just wanted to know what's wrong with Django?	doanguyen	12.838306	-6.533549	comment	3.0	12.0	1543446741	10.066561
18559539	PHP has also its upsides:- High-qual	PHP has also its upsides:- High-quality packages (e.g. FlySystem or anything by https://thephpleague.com/)- Very nice and mature frameworks such as Laravel.- Pretty good OOP features- No concurrency / async, which makes thinking about the code way easier than sometimes in Node.js	stabbles	12.735089	-6.567495	comment	3.0	11.0	1543492063	10.287157
18563923	Announcing TypeScript 3.2	Announcing TypeScript 3.2	DanRosenwasser	12.41304	-6.8207994	story	3.0	57.0	1543524974	-10.526336
18571240	I wish they could get Ruby working i	I wish they could get Ruby working in Atom out of the box. I still can‘t believe how weak the tooling is in the Ruby on Rails world. Even Jetbrains fails miserably. Why on earth can‘t we have decent code completion in Ruby?! If the human brain can tell what will be available why can’t my computer.	hit8run	12.6319685	-7.0387607	comment	3.0	10.0	1543602344	12.382342
18575699	Does this run a separate Beam instan	Does this run a separate Beam instance for every Function? If so, isnt that an enormous waste of Erlang? If not, how isolated are requests? Can I send messages between them? Should I?	skrebbel	12.496521	-7.487065	comment	3.0	14.0	1543648469	-8.908207
18576246	Every time i read this kind of news 	Every time i read this kind of news i wonder : is there any real point to use erlang if you’re not taking advantage of its concurrency model ?Since the lambda model means concurrency is completely managed by the platform, why would you code in this language ?	bsaul	12.527254	-7.511155	comment	3.0	13.0	1543661694	12.915299
18577159	>As a PHP dev when I have to perform	>As a PHP dev when I have to perform something is to find if there is a Linux CLI app that does this, install the app on the server and call it (like ffpmeg, wkhtml2pdf, an epub to mobi app, etc) I can trust a CLI app that is packaged in Linux then a random package.This is only better because your distribution has a curated set of packages with trusted maintainers that (in theory) read through the source code to make sure it's not doing anything malicious.	ryukafalz	12.75346	-6.5468845	comment	3.0	13.0	1543678518	10.298399
18579306	That's not a very fair comparison. R	That's not a very fair comparison. Ropjar is used by thousands of companies at scale today. It takes a bit of effort, but don't undersell the advantage of being able to easily hire ropjar developers (good luck finding a flopnaxer willing to work on your CRUD app) not to mention taking advantage of all the well tested, production-grade woozblats that you get with the ropjar ecosystem.	gfodor	12.692721	-6.8974013	comment	3.0	13.0	1543702336	12.111099
18578895	Article should mention that TypeScri	Article should mention that TypeScript is made by Microsoft.	dvh	12.355761	-6.765015	comment	3.0	10.0	1543698034	-10.473031
18587212	TypeScript Express tutorial 1: Middl	TypeScript Express tutorial 1: Middleware, routing, and controllers	mwanago	12.447663	-6.737016	story	3.0	45.0	1543825758	-10.514054
18601724	It's written in PHP..... need I say 	It's written in PHP..... need I say more?	intothemild	12.750541	-6.6344657	comment	3.0	37.0	1543945600	10.301062
18601901	no, facebook was initially written i	no, facebook was initially written in PHP but as it grew they realized it sucked and invented HHVM / Hip Hop to transpile the php to C++.	grezql	12.7862835	-6.604106	comment	3.0	10.0	1543946569	2.9493134
18618650	It's worth mentioning that there are	It's worth mentioning that there are much faster JSON parsing libraries than the default in Ruby stdlib. I still don't think Ruby is the best choice for doing raw JSON parsing. Last time I had to care about JSON speed we were transforming billions of events and the Ruby JSON lib was becoming a bottleneck	jb3689	12.598469	-6.8979263	comment	3.0	23.0	1544109487	12.371019
18656071	I both admire Elixr for making Erlan	I both admire Elixr for making Erlang “cool” and detest it for ruining my single most favorite part about the language, it’s simplicity and clarity.There’s only one way to do a given thing and you can learn each of the things the syntax can do in a weekend.It was my first non-C-like, non-assembler language and I loved it.	BoorishBears	12.628369	-7.4857287	comment	3.0	12.0	1544543370	12.925626
18657079	My limited understanding of erlang/e	"My limited understanding of erlang/elixir is that it helps easily run actor model programs (fail-safe loosely defined as something with retries built-in) in a grid of long-running interconnected instances. With more and more focus on ""serverless"" development that I am being exposed to, I am curious to know if it is a good fit in this space. Say if you are constrained to use AWS serverless solutions -  sqs, sns, dynamodb, lambda, cognito, api-gateway ... etc, with event-sourcing (for event-drivenness) with retries (automatic/configurable), (why) would using erlang/elixir vs say nodejs/typescript/go/haskell/java be a good choice (let's assume you equally love these languages for the sake of not getting in to 'but X is better than lang Y')?"	dhab	12.595129	-7.4755745	comment	3.0	12.0	1544550333	12.895933
18662465	It does feel like just FTPing a .php	It does feel like just FTPing a .php file into your LAMP webhost, but with autoscaling, slicker UX and much more vendor lock-in.	TeMPOraL	12.769156	-6.544091	comment	3.0	14.0	1544606185	10.292666
18690477	I love how everyone always shat on P	I love how everyone always shat on PHP (the original serverless technology...convince me otherwise) and now everyone is scrambling to reinvent PHP.	orthecreedence	12.76524	-6.638606	comment	3.0	14.0	1544909923	10.330566
18699619	Interactive Beginner's Guide to ROP	Interactive Beginner's Guide to ROP	bordplate	12.680801	-6.839498	story	3.0	43.0	1545061500	12.214862
18725897	A bit surprised, pleasantly I must a	A bit surprised, pleasantly I must admit, to see Django keep pace with Rails. I have never been quite able to explain the startup world's love affair with Rails. Nothing wrong with it but the money question is why?	pbhowmic	12.798237	-6.703303	comment	3.0	12.0	1545321026	10.321489
18739942	I cannot believe how popular TypeScr	I cannot believe how popular TypeScript has become. Is Microsoft running a huge ad campaign?I've used TypeScript for frontend work (Angular 2) for about 6 months. I did not renew my contract because I did not enjoy constantly fixing TypeScript configuration, versioning and source mapping issues.My new company switched to TypeScript for backend work and development across all teams has slowed down noticeably. I spend a lot of my time just discussing with colleagues what types should be called and whether or not we should merge two types together into one or whether or not it makes sense to have two different types to represent essentially the same data in order to enforce different constraints on the user of the data depending on the kinds of functionality that we want to expose.Then, as we	jondubois	12.371484	-6.821936	comment	3.0	21.0	1545473280	-10.4380665
18740055	What are you talking about? Lost pro	What are you talking about? Lost productivity compared to what, JS? Merge types? You can just use `&` to combine them if need be? Discussing types? Does it matter that much, and I mean refactoring them isn't a big deal if need be. Two different types represent essentially the same data? You've tried extending interfaces or using generics?Seems like you lack an experienced TS developer in your team and are contributing your lack of experience as a fault of the language itself. The typing has saved my ass maany times and makes the code in our projects actually maintainable for us and for someone outside of our team's bubble. It might take a while longer to code the app, but it'll take less hours in the long run to keep it safe and working.	tekkk	12.385444	-6.8010216	comment	3.0	18.0	1545476247	-10.404242
18746161	Elixir. The ecosystem has been stead	Elixir. The ecosystem has been steadily growing (and, more importantly, becoming more robust and mature) throughout 2018 with continuously improved tooling, libraries and frameworks. I'm excited for many of the upcoming things [1] in the Elixir world, and how those things can improve the way I build (web) software in 2019.[1] For one example, https://dockyard.com/blog/2018/12/12/phoenix-liveview-intera...	juhatl	12.73964	-7.315422	comment	3.0	10.0	1545574481	12.884245
18748170	If you don't understand the problem 	If you don't understand the problem you're trying to solve well enough to write tests, you shouldn't start coding.Sometimes there are problems that are only really possible to appreciate after one starts coding. In many instances, I've found that attempting to build a prototype is the best way to understand the problem. In those instances, TDD is a huge mistake. It ties you to architectural decisions that you know you're going to change when you better understand the problem.Contrast Ron Jeffries' attempt to build a sudoku solver using TDD with Peter Norvig's attempt [1].[1]: http://ravimohan.blogspot.com/2007/04/learning-from-sudoku-s...	quanticle	13.440192	-7.4088087	comment	3.0	14.0	1545597499	15.075925
18752593	Try Crystal and you get the joy of R	Try Crystal and you get the joy of Ruby enumerables together with a static type system.	yxhuvud	12.478214	-7.1362476	comment	3.0	23.0	1545666046	-11.1971855
18753582	The only collection I wish Ruby impr	"The only collection I wish Ruby improved upon is a simple Lisp style linked list. Kind of amazed JS has an easier way to do cdr than Ruby:    const list = [ 1, 3, 4, 2, 8, 5];
    const [fst, ...snd] = list;

But I suppose that's just a result of JS implementing pseudo-pattern matching."	_hardwaregeek	12.39973	-7.095567	comment	3.0	13.0	1545677235	12.368267
18754107	I was going through this recently be	I was going through this recently because my brother is going through the CS program that I went through, which is the only time I've encountered anyone mention Prolog. I still can't really envision how to create comprehensive systems in this, but it seems the logic paradigm could be applied to some really useful new areas that it hasn't reached yet, similar to how the influence of functional languages is pretty much expected for any trendy new language today (Rust, ES6).	njn	13.133561	-7.294087	comment	3.0	12.0	1545683229	-12.478873
18764278	"> import { test } from ""https://unpk"	"> import { test } from ""https://unpkg.com/deno_testing@0.0.5/testing.ts"";This feels both very pragmatic and frightening at the same time."	settler4	12.438246	-6.445482	comment	3.0	13.0	1545853479	-10.860863
18767059	I'm a single core server, and I have	I'm a single core server, and I have a queue of tasks. I can process them one at a time. But say I don't want to work on one task at a time. I might decide to do some database operation and while I'm waiting for the response to come back, I might decide to do some work on a separate thread so I'm not idling. We now have concurrency. If I add more cores, and my program is coded to be able to take advantage of that, I have more workers to execute that queue and now we have parallelism! If I then go and add separate computers (nodes) and connect them over a network, we have created a distributed system which itself may be a concurrent, parallel system.What Erlang and therefore Elixir gives you is a very sound mental model whereby your communication between nodes and separate workers is done v	_asummers	12.538277	-7.4904914	comment	3.0	10.0	1545881695	12.897455
18768136	from my experience, erlang actor mod	from my experience, erlang actor model had some of the strongest queue mechanics and the most resilient systems I have deployed.  As some background, I worked as a contractor for a telco and built a 6 9's system for their service monitoring using Erlang and its supervisor model.  In 3 years the system has always been able to recover from errors with near 0 downtime (the 6 9s comes from production metrics).	randaouser	12.385361	-7.5125766	comment	3.0	12.0	1545897180	12.864747
18778325	I agree with the author. Elixir and 	I agree with the author. Elixir and Ruby share almost only the R letter in the name and some name of modules/method/functions. They are two very different languages.A complaint of mine about Elixir is that `with` is a macro and not a statement of the language. That probably made it easier to implement but moving code inside/outside a `with` is a pain: transform the = into <- and add a comma at the end of the line. This is against programmer happiness.The feature I love most is pattern matching in function arguments. It makes the code more readable by removing almost every single case/if.	pmontra	12.662117	-7.392453	comment	3.0	17.0	1546020285	12.836025
18778354	I put a lot of value into the mainta	I put a lot of value into the maintainability of what I'm writing and I think legible syntax is a language quality that's often minimized but provides a lot of value in terms of labour savings over the lifetime of a project.  I've been working in PHP a bunch lately and the expressiveness there is amazingly strong, every time I go back to writing C++ it feels much more cargo-culty.(Also, PHP isn't perfect, but it's really good at allowing clear readable code, while also allowing terrible code, also the performance is terrible... Basically, don't waste your breath on why PHP is terrible - it isn't, it's a decent language - you're just using it wrong)	munk-a	12.734589	-6.6604943	comment	3.0	11.0	1546020515	10.328194
18788113	Why PHP & Symphony ? This joke which	Why PHP & Symphony ? This joke which is getting way too far. I'm getting tired of seeing it, and I'm tired of arguing why sticking with a language like that is a mistake.Bug Bounties are great, but I'd like to see people put their brain on for a moment and stop relying on what they learnt when they were 14 neither propose it as a valid solution today or encourage other people to use them.I'm getting very tired of this sh*t.	azdacha	12.7761135	-6.641903	comment	3.0	19.0	1546158628	10.353118
18825682	For those who can't stand javascript	For those who can't stand javascript, typescript was made for you	chaostheory	12.366391	-6.7003818	comment	3.0	15.0	1546622062	-10.422972
18832531	$ php -vPHP 7.2.10 (cli) (built: Oct	"$ php -vPHP 7.2.10 (cli) (built: Oct  9 2018 14:56:43) ( NTS )$ php -r ""echo 9999999999999999.0 - 9999999999999998.0;""2$ php -r ""echo bcsub('9999999999999999.0', '9999999999999998.0', 1);""1.0bcmath - http://php.net/manual/en/function.bcsub.php"	preinheimer	12.742436	-6.649799	comment	3.0	11.0	1546706537	10.32384
18839833	That's even more work? Most develope	That's even more work? Most developers already have redis/Postgres running, the issue there is the added complexity in complex operations.Not to mention, microservices are not always the answer. And even if they were, they're still an insane amount of more work than literally changing what functions you call.I'm not saying you should never use an RPC, but I've significantly reduced the times I'd want to use one. The only reason I even advocate for one now, is because I prefer to empower developers to use whatever language makes them happy, even if I personally greatly prefer Elixir.	quaunaut	12.671926	-7.3004093	comment	3.0	10.0	1546800548	10.245147
18851229	While I agree with you, I just start	While I agree with you, I just started a new project and we need a decent amount of backend work done, and I wanted to do that in Golang, Java, or Rust, but no one else on the team knows Golang, Java or Rust, just Javascript and Typescript so it made sense to go with a language the team was good with. So far I'm liking typescript on the backend, especially because we use it on the frontend. Also my coworkers can give me much better code reviews because they all know the language. But we will see going forward, still very much a green field project.	2trill2spill	12.354907	-6.501484	comment	3.0	30.0	1546902446	7.5838237
18864878	I believe it was this post: https://	I believe it was this post: https://www.reddit.com/r/ruby/comments/ad46f9/whining_ruby_e...	config_yml	12.615128	-7.0554824	comment	3.0	10.0	1547044288	12.391181
18866186	It always seemed so incongruous to m	It always seemed so incongruous to me that the Ruby language community could be so nice, while the Rails community (following the self-aggrandizing example of DHH) would be so aggressive to anyone with unorthodox thoughts.	btown	12.6194725	-7.0401235	comment	3.0	11.0	1547052303	12.380909
18872286	> Ports == lots of boilerplate and “	"> Ports == lots of boilerplate and “loose” typingThis is a common criticism of Elm, and I've never understood it.The criticism seems to be that ""Elm is bad because I still need some JavaScript, and JavaScript is dangerous.""Like, what's the alternative? More JavaScript?"	yakshaving_jgt	12.971801	-7.660581	comment	3.0	52.0	1547107211	-12.754948
18872312	I've always thought that Elm was lik	"I've always thought that Elm was like Purescript in the way that it was just another way to bring the good parts of Haskell (a good type system) into JS.I didn't consider elm's architecture as the main value proposition -- if you squint it looks just like every other data management model for component-based approaches these days -- flux, redux, etc all work in a similar way, +/- immutability.Hopefully people aren't out there thinking that Elm has done something to magically make it much harder to write runtime errors -- they added a powerful ergonomic-where-possible type system.If developers out there are still thinking types are ""bad for JS"" or that using types in code is weird/unnecessary, they might be suffering from Blub[0], and need to go out and see what other languages are doing ma"	hardwaresofton	12.950122	-7.660653	comment	3.0	13.0	1547107647	-12.74982
18872507	Have you seen ReasonML?  [@bs.val] e	"Have you seen ReasonML?  [@bs.val] external pi : float = ""Math.PI"";
  let tau = pi *. 2.0;
  [@bs.val] external alert : string => unit = ""alert"";
  alert(""hello"");

Elm was trying to make it very hard to use JS in Elm which is always a bad idea when you are a transpiled language. Clojure is so popular because you have access to most of Java and the libraries written in Java. ReasonML makes super easy to use JS (or other languages, same FFI interface) while being an ML family language just like Elm. For me ReasonML is clearly the winner of type safe JS for these reasons."	StreamBright	12.907271	-7.680695	comment	3.0	43.0	1547110793	-12.674406
18873416	> North Korean style crapThis confir	> North Korean style crapThis confirms my belief that most criticisms of Elm are emotional responses, not rational ones.Allowing arbitrary JS functions to be called from wherever would indeed break everything. Want to use `Math.random()`? Whoops! There goes referential transparency. Want to use `document.querySelector()`? Hello runtime errors my old friend. Want to use `function(x) { return x / 0; }`?Yeah, have fun with that. I'll stay in North Korea ¯\_(ツ)_/¯	yakshaving_jgt	12.988914	-7.676551	comment	3.0	26.0	1547124263	-12.758419
18873746	> Ruby isn't the most beautiful lang	> Ruby isn't the most beautiful language out thereHuh, I sure think it is. I wonder what the author thinks the competition might be? Ruby has its issues for sure, but aesthetics ain't one of them - far and away my favourite out of any major language.	sho	12.570295	-7.0577025	comment	3.0	43.0	1547128029	-9.784048
18874300	Wouldn't Crystal fit the bill for a 	"Wouldn't Crystal fit the bill for a fast compiled language explicitly designed to emulate Ruby's syntax?
(I don't have any significant Ruby or Crystal experience, so if there are reasons why that doesn't fit the bill, I'm sorry)"	marcolussetti	12.620249	-7.204017	comment	3.0	13.0	1547132806	-11.2408085
18874355	"> ""Whimsical inventiveness is the on"	"> ""Whimsical inventiveness is the one thing that keeps me enjoying the art of programming.""A personality difference then. Reading clever code does nothing for me. I'm much happier digging around hulking layered codebases that may look ugly but do something valuable for the user.I agree that the cuteness of a programming language is just a matter of taste and habit. I'm not going to pretend my criticism was anything deeper than an expression of why I personally dislike having to work in Ruby."	pavlov	12.487744	-7.0362506	comment	3.0	11.0	1547133170	12.413244
18874485	I wholeheartedly agree. My main grip	I wholeheartedly agree. My main gripe is that people insist Ruby is 'easy', because it 'looks just like English'. Yeah, well, it doesn't.Programming languages are different from normal languages because they have different goals, different users and different requirements. The result in of this forced unification in Rails is something that resembles English, if you squint really hard, but in order to do so, it uses a massive amount of non-intuitive assumptions (sorry: conventions) that I as a programmer somehow should know. This makes debugging unnecessary hard. Also, when developing new features I'm constant guessing whether I should this or that form. The only way to find out is trying things out. This is fun as a hobby, but irritating  when you're on the clock.The idea that a programing	DJHenk	12.604991	-7.0441303	comment	3.0	10.0	1547134081	12.3839035
18874499	"The core question is, ""have you ever"	"The core question is, ""have you ever experienced a runtime error?"" Have you ever spent time debugging a runtime error deployed to production?You can't get those in Elm."	aarpmcgee	13.001447	-7.6889935	comment	3.0	17.0	1547134228	-12.763553
18874869	Is it backwards compatible with Ruby	Is it backwards compatible with Ruby?	aantix	12.624654	-7.0453644	comment	3.0	10.0	1547136598	12.385614
18875903	So...eh.Ruby has the easiest data ac	So...eh.Ruby has the easiest data access tools, between ActiveRecord and Sequel (which I prefer), out there. I don't know too many folks who'd disagree with you about that. But where you're happy with Rails taking a few lines, I am as of late big on Kotlin (because I agree with you regarding Java) encouraging me to be correct. I'm building a new product using Spring Boot, Kotlin, and JDBI and while, yes, there's boilerplate - it's not the thing that slows me down. I liken it to touch typing; I don't worry if a programmer can't touch type because getting text onto a screen is never the slowest part of the process.The thing that slows me down, as it does whenever I'm programming, is thinking, and I've learned over time that Ruby doesn't really help me with that. (A lot of other toolchains, b	eropple	12.680382	-6.9728556	comment	3.0	14.0	1547141816	12.325498
18877176	Opposite ask:What would your state o	Opposite ask:What would your state of the art be for starting something new with Rails? / suggestions to become quickly productive	colechristensen	12.766326	-6.9250407	comment	3.0	11.0	1547148596	12.348031
18875315	Do you have any experience with Djan	"Do you have any experience with Django? I haven't used rails myself, but I'm told they are very similar in the ""look at what I'm not doing"" regard."	ATsch	12.802857	-6.6752872	comment	3.0	15.0	1547138909	10.2295265
18884579	"Why not teach it better?
https://glo"	"Why not teach it better?
https://glot.io/snippets/f8g0wlar0dNo wonder PHP developers have a bad reputation."	DoctorPenguin	12.768115	-6.630549	comment	3.0	10.0	1547224123	10.346261
18884727	I love PHP, it was my first “real” p	I love PHP, it was my first “real” programming language, and I’m glad there are still people trying to make it easier to adopt.Having skimmed through several of these chapters, though, I just feel like it’s too similar to the official PHP docs, even down to the TOC.Wouldn’t it have been better for everyone to put this effort into improving the docs, rather than developing yet another book in a silo that likely won’t have the longevity we’d like?	chrismeller	12.761048	-6.651319	comment	3.0	14.0	1547225163	10.367003
18894432	Things Ember Data's `findRecord` doe	"Things Ember Data's `findRecord` does:* Checks if you already have the resource to prevent sending an unnecessary request (can be forced)* Retrieves the resource based on a convention for the URL* Parses the JSON based on a convention* Stores the resource in the ""store"" for use in the appBatching is also very simple thanks to a plugin from Netflix:https://github.com/Netflix/ember-batch-requestThe reason the Ember community doesn't talk about any of this stuff is because, from the developers perspective, nothing interesting happens, which is why developer productivity is high in Ember."	EduardoBautista	13.125825	-6.463853	comment	3.0	24.0	1547343048	-15.513947
18894018	Property-Based Testing with PropEr, 	Property-Based Testing with PropEr, Erlang, and Elixir	mononcqc	12.424535	-7.45759	story	3.0	116.0	1547337207	-9.620666
18905479	Elixir v1.8 released	Elixir v1.8 released	_asummers	12.6938715	-7.459294	story	3.0	241.0	1547492946	12.948108
18907661	Does TypeScript let you build a prog	Does TypeScript let you build a program interactively as a living thing? Example of what dynamic languages for the browser (ClojureScript) have been doing for 5 years now: https://www.youtube.com/watch?v=KZjFVdU8VLI Given that frontend work is so often an endless series of tweaks I don't know how people stand doing anything big for a long duration the classic way of edit -> compile (refresh) -> rebuild runtime state to look at what changed/play around/test -> repeat.	Jach	12.344242	-6.715104	comment	3.0	14.0	1547509426	-10.412916
18918994	The TypeScript team really made the 	The TypeScript team really made the right call by adding support for TypeScript syntax to Babel. Ever since that got merged, the floodgates have opened: more and more projects support TypeScript by default or practically only requiring you to flip a switch, making the cost of adopting it (if you don't need to spend time learning it as well) practically zero. No matter how small the project, if I start a new one today, it will be written in TypeScript.Adoption is now at a point where it is exponential: more projects adopting TypeScript, resulting in more typings being available, resulting in more projects adopting TypeScript.If there's one thing you can focus on to learn as a Javascript developer in the near future, I'm sure it is TypeScript.	Vinnl	12.3629675	-6.7558665	comment	3.0	26.0	1547624541	-10.4736
18918925	I'm from the C# camp. I wouldn't mov	I'm from the C# camp. I wouldn't move to TS even if they paid me half a million dollars.	knocte	12.398288	-6.6705174	comment	3.0	10.0	1547623570	0.88422585
18919027	As an uninformed typescript dev, can	As an uninformed typescript dev, can you explain to me how TS Babel support changed things? I understand its mechanical implications, but I don't see why it would matter for adoption.	scrollaway	12.388267	-6.6711783	comment	3.0	15.0	1547625077	-10.448636
17211497	> If people in America just stopped 	> If people in America just stopped to look around at how other countries do things they'd be doubly as well run. Most parts of Europe, Japan, Canada, and many other places are well run and have a great deal of governmental involvement.One big problem with this approach is that it basically pretends that the American citizenry is interchangeable with those of the countries you mentioned. It's not. Identity politics problems, legacies of slavery and of the colonial / revolutionary mindset are still big issues.The people of Detroit and of Baltimore and of other ruined American cities are not the same as the people of Norway or of Japan. The solutions that work in high-intelligence, high-trust, coherent communities with strong traditions of work ethic won't work in every environment.You want 	core-questions	12.77358	-6.644267	comment	3.0	11.0	1527896319	10.375802
17217865	I looked into rails in some detail a	I looked into rails in some detail about a year ago, and I think it's the only pretty good solution for this I've come across—but there's a steep up front cost in learning/setup etc. (or so it seems).	tty7	12.762262	-6.920072	comment	3.0	17.0	1527999080	12.343161
17218175	What are the best resources to learn	What are the best resources to learn Ruby/Rails these days?	modernerd	12.719652	-6.9712334	comment	3.0	11.0	1528006654	12.385584
17218634	This comment is highly presumptuous 	"This comment is highly presumptuous about the actual development experience of more modern languages and tools.> True speed comes when you don't have to deal with other people's bugs and poorly designed mistakes.PHP is often, in practice, a language where bugs are more likely compared to these ""stylish"" other languages you mention. [0][0] http://delivery.acm.org/10.1145/3130000/3126905/p91-ray.pdf?..."" For [languages] with positive coefficients
we can expect that the language is associated with
a greater number of defect fixes. These languages include
C, C++, Objective-C, Php, and Python. The languages
Clojure, Haskell, Ruby, and Scala, all have negative
coefficients implying that these languages are less likely
than average to result in defect fixing commits."""	hellofunk	12.5988035	-6.7539425	comment	3.0	12.0	1528016378	10.335444
17220068	What do you mean by bias here? Some 	What do you mean by bias here? Some languages are practical, some more/less efficient. The BEAM was BAD in 2005. The language is ugly and this has hindered adoption in a myriad of applicable areas for decades. Elixir was a wrapper for people who already knew Erlang. Languages don't live in a vacuum, they are for people and organizations (where decisions are made about non-existent people) to use. Erlang could be done without being so horribly ugly and with more syntactic specificity (give atoms an identifying symbol). You have to consider the pareto distribution when thinking about design, not just how intelligent some programmers naturally are.	jack9	12.62709	-7.490785	comment	3.0	10.0	1528040664	12.930259
17220649	why ruby innovate and not python ?	why ruby innovate and not python ?	karag	12.495717	-7.0316257	comment	3.0	10.0	1528047538	12.366933
17220840	> We’re going to implement method in	> We’re going to implement method iniling in JIT compiler, which is expected to increase Ruby’s performance in order of magnitudeAn order of magnitude as in .. 10x? This seems too good to be true. Half the arguments against Rails melt away like butter if that's truly the case.Anyone with a better understanding of the details care to comment on the likelihood of these performance gains being actually realised, and if not, what we might realistically expect?	sho	12.604889	-7.024191	comment	3.0	52.0	1528049745	12.384844
17226318	The obvious part is that Ruby does n	"The obvious part is that Ruby does not have a distinction between ""compile time"" and ""runtime"". As such, if you want to catch those cases, you need tests.Duck-typing can be boiled down to: The type of a parameter to a function is defined by the methods that will be called on it, not by its class.E.g. if you have:    def foo source
      dosomething(source.shift)
    end

Then absent additional restrictions inferred from requirements of dosomething(), the class of ""source"" is irrelevant. The relevant type information is whether or not ""source"" responds to ""shift"".A proper Ruby-ish type checker will need to be able to handle that, or it'll push people to write non-idiomatic Ruby."	vidarh	12.414937	-7.131494	comment	3.0	16.0	1528107515	12.368041
17252862	One takeaway from this is how Micros	One takeaway from this is how Microsoft is killing it currently:* Much-beloved TypeScript* Much-beloved VSCode* Much-beloved GitHubIf they hire Ryan to flesh out his vision for deno we'd probably need a new acronym, MAFANGOn a more serious note, I wonder if deno could support a lower level construct like Observables. As much as Promises are perceived to be an improvement over callbacks, they still have major flaws (only one of which is mentioned in this talk), this is something that Observables can address	arenaninja	12.481813	-6.4913526	comment	3.0	13.0	1528339536	-10.902504
17256028	Its a nice language though some of t	Its a nice language though some of the output is weird. Like I did a PHP target as a test and I think I did a print statement and it added a lot of code in there when i was expecting a simple echo or something. So it can have its downsides depending on what you do. Definitely curious where it stands for Mobile though.	giancarlostoro	12.692723	-6.6435513	comment	3.0	10.0	1528381846	10.3785515
17266061	Are you implying PHP devs are earnin	Are you implying PHP devs are earning more than Go devs?	ergo14	12.7573	-6.654736	comment	3.0	14.0	1528469977	10.323987
17279490	Interestingly, I'm learning Django r	Interestingly, I'm learning Django right now because of enough bad experiences with Rails. This may sound obvious but if you don't do things the Rails way then you'll have a harder time taking advantage of what Rails gives you. Some things which I consider essential to web development are not included with Rails but available via gems which I think are unfortunate: session management, authentication and administration. The model files don't contain any information on the schema like you would expect. You have to dig into the schema file in order to find that. The documentation is bad for Rails and the Ruby ecosystem in general. Lots of magic...	msie	12.794566	-6.754167	comment	3.0	15.0	1528655623	10.296172
17279528	So is RoR something like Flask[0] wh	So is RoR something like Flask[0] which provides you with basics and all other bells and whistles (e.g. ORM, Forms, Admin, Auth, etc..) are available via extensions?[0] http://flask.pocoo.org/	cryptography	12.708247	-6.634016	comment	3.0	10.0	1528656033	10.274593
17281453	I hear you, and I too love Ruby, and	"I hear you, and I too love Ruby, and I too have yet to actually need the performance benefits of Crystal.  But man, you don't realize how awesome static typing is until you actually start using it.  There are whole classes of bugs that just get nixed before the program even runs.  It makes you think more about how to structure things, how you're passing arguments, how you use variables, etc.Now maybe you're really really really good w/ Ruby and you don't make those mistakes anymore, but for an ""advanced beginner"" like myself, it's really helpful."	nlh	12.621058	-7.232044	comment	3.0	30.0	1528686471	-11.222715
17282614	Hi, one of the Nim core devs here. A	Hi, one of the Nim core devs here. Any ideas how we can fix that?Crystal has a surprising amount of web frameworks with great marketing behind them. Could that just be because it's a Ruby-like language, and Rubyists are far more interested in web frameworks?That's my theory, but I could be totally wrong. I'd love to know how we could improve here.Perhaps it's because I created a web framework that is good enough (jester) early on and so nobody feels like stepping in with their own implementation. A website for jester would be great and it is on my to-do list, but so are many more things.	dom96	12.592928	-7.2504973	comment	3.0	15.0	1528704428	-11.166588
17292550	Would Elixir be able to support this	Would Elixir be able to support this? If yes, then it could be a huge deal (atleast for me). Imagine writing a POS system's code in Elixir. That'd be very nice, although I understand at this point this is just wishful thinking.	neya	12.573667	-7.3130198	comment	3.0	11.0	1528806032	12.922762
17293171	"""GraalVM runs Ruby about 10x faster "	"""GraalVM runs Ruby about 10x faster than standard Ruby, for example.""Which puts it roughly up against the plateau I observe for dynamically-typed languages across the board, except LuaJIT (which AIUI compromises the dynamicness a bit to get there). Ruby is a great deal more than 10x slower than optimal (which is still roughly C, though keep an eye out on that as languages continue to challenge it).Based on the way Erlang works, I wouldn't expect it to get much past two times faster than it already is no matter how much money is poured into it.I remember hearing the line about how there are no slow languages, only slow implementations, back in the early 2000s, when we didn't have any implementations of dynamic scripting languages that had really had a lot of effort poured into them, by mode"	jerf	12.5276165	-7.42651	comment	3.0	10.0	1528811237	12.879702
17296852	I think the patch should have been t	I think the patch should have been to rip out eval() and build/use a shunting-yard parser/evaluator.  A quick search found this: https://github.com/ircmaxell/php-math-parserLeaving a call to eval() with user supplied input, no matter how well filtered, seems like way too big of a risk.	dugmartin	12.361078	-6.696896	comment	3.0	20.0	1528830663	10.176186
17302101	For sure! That's our preferred way o	"For sure! That's our preferred way of using JavaScript. TypeScript in the end is just a static type linter that compiles to JS. Heck you can even ""use"" TypeScript's typechecker without even using a .ts file. We do this for the webpack project using JSDOC Annotations (Project: https://github.com/webpack/webpack, Example: https://github.com/webpack/webpack/blob/master/lib/ChunkTemp...) because we didn't want a build step."	thelarkinn	12.385324	-6.714412	comment	3.0	13.0	1528889617	-10.451616
17313643	My impression about the Elixir/Erlan	My impression about the Elixir/Erlang so far has been the same.> Elixir comes with one of the nicest and most helpful communities aroundUsing Elixir, it's easy to write gorgeous code, with a language that for the most part is really minimalist, and you get to play with the great piece of software that OTP is without all the warts of Erlang (which is mostly the developer experience). The BEAM community is fantastic and really supportive (disclaimer: I'm a GSoC student working for them on making Elixir bindings for Barrel, a replicated document database).Maybe we could think that it's best in terms of the character of the community if Elixir stays small, however Rust community seems a great example of something bigger to follow that hasn't evolved into a soulless graveyard of enterprise code	jxub	12.636019	-7.463814	comment	3.0	64.0	1528998455	12.923194
17314058	How can you compare the overall deve	How can you compare the overall developer experience of Crystal, which isn't even 1.0 yet and has very few libraries, with the mature ecosystem of Rails?	cutler	12.634358	-7.235677	comment	3.0	25.0	1529000574	-11.282326
17314070	Just some random background for thos	"Just some random background for those reading about why Erlang/Elixir<->Rust interop is A Big Thing.The whole point of Erlang and Elixir is robustness in the face of high concurrency. All other design choices (eg functional programming, immutable data), follow from that goal. Core is that if one green thread (""process"" in Erl/Ex lingo) crashes for whatever reason, the rest keep on running. Interop with native code is the sole exception here, which makes interop very scary. If a C function that's called into from Erl/Ex crashes, the entire program crashes. Boom, gone. Sure that holds for most other languages too, but Erlang/Elixir people get extra nervous because they're more accustomed to thinking about error scenarios and because they don't always have the same seven restart/recover layer"	skrebbel	12.483224	-7.522891	comment	3.0	11.0	1529000670	12.867308
17314308	You're right that the major downside	You're right that the major downside I can see is the ecosystem is not as big. But when I jumped into Rails over a decade ago, the Ruby/Rails ecosystem was not huge yet either.But, static typing and being able to compile and deploy a binary is a pretty sweet developer experience. And the syntax is nearly identical to Ruby with a few nice additions. Many companies like ThoughtBot (a huge Ruby adopter) are jumping into Crystal. The future is definitely in compiled/static languages IMO.	everdev	12.661177	-6.993137	comment	3.0	17.0	1529002222	12.361251
17316244	PSA: You can run Wordpress headlessl	PSA: You can run Wordpress headlessly, there are libraries in a few languages which consume its API to help you render how you want.You can hate PHP but Wordpress is king for non-technical users.	whistlerbrk	12.744947	-6.5414085	comment	3.0	17.0	1529018542	10.317694
17319094	> Because Crystal is compiled, it is	"> Because Crystal is compiled, it is impossible to have a true REPLFirst of all, the problem isn't that it's ""compiled"" - Python is ""compiled"" too, but still has one of the best REPLs available.The problem is that the language is static. But static (and compiled) languages can have REPLs, for example C++ has an excellent REPL called Cling.It's not impossible, just requires some more effort.As for Crystal, it looks like a neat language. However, if it's going to try to compete with the fast compiled runtimes such as Java, it will need some parallelism support."	_m96l	12.614517	-7.2612653	comment	3.0	17.0	1529064011	-11.231478
17319204	I've been keeping my eye on Crystal 	I've been keeping my eye on Crystal for a while now thinking about making the plunge and writing something production ready in it.But I'm a bit vary as for the casual observer the Crystal project github (https://github.com/crystal-lang/crystal) seems brim with unsolved issues (over 500 issues!) and stale PR-s (over 105!). I'm not sure if this is a sign of poor project managment, development stall or poor community engagement but still it leaves a bad first impression. Contrast this to elixir project page (https://github.com/elixir-lang/elixir).Maybe someone who is actively involved in the development of Crystal could shine a light?	mannycalavera	12.641764	-7.2625756	comment	3.0	15.0	1529065385	-11.208407
17320003	I really like Crystal, and while it 	I really like Crystal, and while it hasn't reached a 1.0 yet, it is still great and used in production. I think the main selling point of Crystal is performance + nice syntax. The docs are great and will help anyone curious to learn Crystal along the way. Crystal's biggest problem is that it doesn't have the support of a company or a large base of users so the core team isn't funded as much as they'd like. All in all, I think it is a great language!	prydt	12.627099	-7.268835	comment	3.0	11.0	1529072852	-11.234108
17321334	Erlang isn't in the same category as	Erlang isn't in the same category as the languages being discussed here.  It's great for long running parallel tasks, but is slow af.	Mikeb85	12.529128	-7.515018	comment	3.0	20.0	1529081765	12.916868
17325269	Thanks to TruffleRuby, Ruby is about	Thanks to TruffleRuby, Ruby is about to become an order of magnitude faster	stanislavb	12.579633	-7.064007	story	3.0	24.0	1529113073	12.36191
17332324	Great to see more databases written 	Great to see more databases written in Erlang.	codeadict	12.579844	-7.501515	comment	3.0	23.0	1529242921	12.908148
17355791	The problem is, the sort of devs who	The problem is, the sort of devs who would jump right into Ruby On Rails a decade ago are now doing stuff with React, Node, Go, and (if they're lucky duckies) Elixir.	spamizbad	12.733672	-6.882394	comment	3.0	11.0	1529505542	12.324656
17360357	You can use arbitrary tools to progr	"You can use arbitrary tools to programmatically generate YAML (or JSON, or XML, any of the other ""data only"" formats.) This allows for tools to drive other tools by generating a spec file and feeding it in. See e.g. Kubernetes for a good example of that.There's no language that I'm aware of that can natively generate PHP syntax, and there's no common multi-language-platform library for generating PHP syntax. I think that's most of the reason.To contradict myself, though: Ruby encodes Gemfiles and Rakefiles as Ruby syntax. And Elixir encodes Mixfiles, Mix.Config files, Distillery release-config files, and a bunch of other common data formats as Elixir syntax.And, of course, pretty much every Lisp just serializes the sexpr representation of the live config for its config format (which means "	derefr	12.68788	-6.6841702	comment	3.0	15.0	1529533214	12.615544
17361185	You don't know when you'll need to g	You don't know when you'll need to generate or parse your config files with something that either can't read, write or execute your language.Django's settings.py sucks. I've used Django since the 0.9 days. It's extremely impractical and needs to be worked around constantly.	scrollaway	12.342158	-6.4732275	comment	3.0	11.0	1529542198	-9.243411
17363743	This is a valid question, I don't kn	This is a valid question, I don't know why you (originally) got downvoted.The answer I think, for the applications in industry at least, is that PRISM and other probabilistic programming langauges are not as developed as Prolog, a language that has been around for a good four decades now. Swi-Prolog in particular, is a free and open-source Prolog interpreter with an IDE, a graphical package and a veritable somrgasbord of libraries, including an http server, json and xml processing, encryption, interfaces to SQL and other databases etc etc etc. Swi is in active development, compatible with YAP-Prolog (currently the fastest implementation) very well supported and documented and has an active community.It's a lot easier to setup a production environment in Prolog, especially using Swi, than i	YeGoblynQueenne	13.150231	-7.293724	comment	3.0	15.0	1529577530	-12.49616
17373702	Structural row typing I hadn't heard	Structural row typing I hadn't heard about. Elm is on my to-learn list, so I'll look it up separately, but...Coming from Haskell, what's the elevator pitch for it?	Filligree	12.966385	-7.6762815	comment	3.0	13.0	1529673444	-12.757348
17416964	Django is a hell for APIs and big pr	Django is a hell for APIs and big projects. It's good for beginners and small projects, but once you need the least amount of actual control, you will find it's too late	myf01d	12.827514	-6.524743	comment	3.0	11.0	1530194936	10.066956
17418055	"> I've had the ""pleasure"" of working"	"> I've had the ""pleasure"" of working with other large projects built on flask and ever time it gets to a certain size I wonder why we didn't just use Django.Actually, I've had the exact opposite experience. I like using Django for small and mid-sized projects, because with Flask I have to spend time adding all these extra libraries for universally required functionality on a quick app whereas, with Django it's plug and go.However, the larger the project gets, the more I like Flask since I have near total control and understanding of the app. There's no digging into Django internals to make some obscure customization.Then again, it's been several years since I last used Django, so it may have changed for the better here."	jnbiche	12.81062	-6.5267434	comment	3.0	26.0	1530201875	10.027068
17418408	I've worked with django for a consid	I've worked with django for a considerable amount of time now (~9 years), and I have found the documentation a joy to work with. The documentation generally covers each piece of functionality, and the source code is rich with documentation.When it comes to django itself, there are nuances, and yep, some of them probably can be smoothed over for developer experience, but developers must have knowledge over their tools.If you feel like django is getting in your way, take a step back. Maybe you can remove some of the abstractions it provides and do it yourself? Maybe look at the source code? If the magic is no longer working, it's time to realize that it isn't magic to begin with, but possibly a lack of understanding.	ryanisnan	12.826636	-6.5625653	comment	3.0	10.0	1530203987	10.087523
17419246	For what it’s worth, on a Django cod	For what it’s worth, on a Django codebase of 180k lines, 100k lines of templates, 1000 URLs, 380 “apps”, 350 models, we have a nice coherent structure across the whole codebase that makes us really productive.I haven’t seen a Flask code bass do this anywhere near as well. They all seem to end up becoming very different and tricky to onboard new devs onto because they are so custom.Django hides some complexity, but we haven’t found many pets we can’t effectively customise, and the architecture at scale is great, something I haven’t seen in many other places.	danpalmer	12.800602	-6.511853	comment	3.0	11.0	1530210021	10.051715
17424791	Interesting! I’m surprised you didn’	Interesting! I’m surprised you didn’t move to Elixir given the syntax similarities to Ruby	abritinthebay	12.676263	-7.4137836	comment	3.0	16.0	1530283429	12.8738365
17424809	I've programmed in both and as far a	"I've programmed in both and as far as I can tell here's the best use case for each:Go - I want to program explicitly and don't mind a little extra code or syntax to do it. I want close to the best performance possible and a single distributable binary. I don't mind being encouraged to ""roll my own"" api / web app rather than using a framework.Crystal - I want to feel like I'm writing in Ruby, but with type checking at compile time and much better performance. I don't mind being a little less performant than other compiled languages. I want access to Rails/Sinatra-like frameworks for web/API apps rather than having to ""roll my own"".Basically, if you want something quick and fun that can run in production, I love Crystal. If you want something that needs to be custom and highly performant, I "	everdev	12.627753	-7.204834	comment	3.0	22.0	1530283609	-11.2204075
17425871	Won't the impending releases of Truf	Won't the impending releases of TruffleRuby, Graal and Substrate VM make Crystal irrelevant?	cutler	12.629473	-7.2676697	comment	3.0	11.0	1530292230	-11.230247
17437254	Ask HN: Any service available to tra	Ask HN: Any service available to translate 60 lines of Algol60 code into Ruby?	vinnyglennon	12.6194725	-7.060861	story	3.0	3.0	1530475184	12.429105
17442513	Ask HN: Is Fastly down?	Ask HN: Is Fastly down?	jpetrucc	12.6722145	-6.969382	story	3.0	5.0	1530545559	-9.203358
17447154	PHP Graphic User Interface Library	PHP Graphic User Interface Library	rakibtg	12.736778	-6.599665	story	3.0	19.0	1530587015	10.269335
17454848	Feds used Rails? That's neat!If you 	Feds used Rails? That's neat!If you don't mine telling, were you a contractor or like a permanent dev? I'm very surprised that feds would choose Rails for projects. Maybe for prototypes or in house stuff or whatever.Anyways, cool!	qop	12.789627	-6.9174256	comment	3.0	11.0	1530669726	12.361706
17485779	https://github.com/turbolinks/turbol	https://github.com/turbolinks/turbolinks is pretty close?	detaro	12.770508	-6.5050693	comment	3.0	16.0	1531079088	7.6318073
17501939	This is exactly what we've been prep	This is exactly what we've been preparing for.  Don't use yaourt, and read those diffs.  I know a lot of people don't do this, but it's important.	jdlyga	12.459029	-7.6669955	comment	3.0	16.0	1531255195	-13.259187
17512293	The rescue of the crew of the yacht 	The rescue of the crew of the yacht Django (2016)	curtis	12.8194895	-6.5587707	story	3.0	52.0	1531371646	10.102517
17517005	This is really exciting! I actually 	"This is really exciting! I actually ran into two problems that this already solves, one of which I briefly touched on in the article I posted to HN this morning.One is project structure. I came up with a solution for type-safe RPC that required a shared file for type definitions, and my solution was to symlink that file. It looks like the new project feature should let me get rid of that and have a ""shared"" TS project as a sibling to ""server"" and ""client""!The other is spread arguments. I recently ran into the error ""Spread types may only be created from object types"" [1] and I think this feature is addressed by TS 3.0![1] https://github.com/Microsoft/TypeScript/issues/13557Call me crazy, but I really think TypeScript is the future of the web and I'm betting my whole career on it by diving "	sbjs	12.368537	-6.783256	comment	3.0	14.0	1531417983	-10.418117
17522445	> This is true to an extent, but loo	"> This is true to an extent, but look at the time and money poured into PHP and how slow it still is after all these years.PHP7 isn't a slow language at all - it's much faster than previous versions actually. There are servers like aerys [1] that easily handle 10,000 concurrent requests on reasonable hardware. The reason sapi (read ""regular"") PHP isn't ""faster"" is because caching and the ease of deploying more servers makes it less of a priority to stakeholders.Like I said - this is more dependent on the libraries used than the language.>  In Javascript, objects are stored as a map of key->value pairs, and aren't strongly typed.This is also not true - JavaScript objects are stored through a technique called ""hidden classes"" akin to a C like struct in most modern runtimes [2].> This design "	inglor	12.489134	-6.4554186	comment	3.0	10.0	1531486019	-8.611787
17540253	A vanilla install of Phoenix with Br	A vanilla install of Phoenix with Brunch yields a node_modules with 388 packagesLook at what Phoenix (https://hexdocs.pm/phoenix/overview.html) and Brunch (https://brunch.io/) can do. To suggest 388 packages for all that stuff is too much is ridiculous - there's a lot of functionality, so there's a lot of code. The fact that it's not one huge, opaque blob is a good thing. Could they be implemented with less code? Maybe. Does that mean they'd be better for it? I don't think I've ever come across a reasonable argument that says 'less code is always better'.You could very reasonably argue that you don't need all those features, and maybe the two things are bloated. I would suggest that means you've picked two things that do way more than you need, and you've not chosen your tech stack very we	onion2k	12.765057	-7.1432467	comment	3.0	14.0	1531738528	12.745256
17542512	ERPNext has been around for a decade	ERPNext has been around for a decade now and doing quite well! https://github.com/frappe/erpnext.Founder here, happy to answer questions.	rushabh	12.594214	-7.5037184	comment	3.0	11.0	1531758194	13.0345125
17580011	Removing duplication != abstraction.	Removing duplication != abstraction.Many copy & paste scenarios can be avoided without creating any meaningful abstraction. Generally this is best done with a stateless (pure) function that has few if any conditionals and does not involve design patterns such as inheritance, overriding, or even creating new compositions. It should feel easy and boring when you are doing this.Abstraction is a new representation that calls for deep thought and I agree is easy to mess up.The need for DRY also depends on type-safety. Type-safe boilerplate generally adds verbosity, but few bugs. This article is coming from the Ruby world where a bug lurks behind every untested line of code: this can create a lot of pressure to make boilerplate free code which can end up turning into abstractions. But every code	gregwebs	12.461711	-7.088033	comment	3.0	10.0	1532132321	12.380508
17600824	Why is the pace of releases an impor	"Why is the pace of releases an important metric for using a programming language?Focus on code quality, and maintenance simplicity.If anything, being able to use the same version for x years and having it be consistently better than any JS library/framework I used, means that the work done is of high quality.Maybe you should watch Evan's talks from various Elm conferences ( search on youtube, for example https://www.youtube.com/watch?v=uGlzRt-FYto )
He addresses that concern that some people have, and why it has the pace it has.As I understand it, it's better to do things right and take as long as it needs, rather than hurry and ship fancy things just to ship them.Elm is perfectly production ready as is, and beats any JS stack for me. Both in code quality and maintenance cost."	antouank	12.989579	-7.6740823	comment	3.0	19.0	1532439269	-12.762719
17613034	The surprising thing is Elixir has b	The surprising thing is Elixir has better tooling than many lang. funded by the tech giants.	qaq	12.661462	-7.4683094	comment	3.0	30.0	1532554217	12.937873
17613295	I don't even bother with vanilla JS.	I don't even bother with vanilla JS. Babel and Typescript let you magically use the latest features without caring about compatibility at all really, except CSS	thermodynthrway	12.4041	-6.466469	comment	3.0	13.0	1532555996	-10.457063
17613109	I believe much of this is due to the	I believe much of this is due to the Erlang/BEAM foundations Elixir is built on. Ericsson has invested considerably in Erlang for decades, giving Elixir a boost in the tooling department.	brentjanderson	12.5950775	-7.4890876	comment	3.0	16.0	1532554594	12.920071
17614960	Coming from someone who went from ha	Coming from someone who went from hacking out PHP projects to using Elixir, and only having three years total dev experience, switching to Elixir was tough. It probably took me a month where I felt like I was productive, and three before I started to understand processes and pattern matching and Gen Servers where I could really utilize them properly.There’s just a lot that’s different. Now, I’m looking for a job and I mostly know Elixir, and it’s making it difficult to find stuff when all you really know is how to write code in a (good, but) relatively unused language.	wincy	12.663853	-7.4583282	comment	3.0	10.0	1532577483	12.94545
17616022	How well supported is Elixir (and Ph	How well supported is Elixir (and Phoenix) on Windows? I've experimented with it on Windows, and it generally seems to work, but I'm curious if people are actually using it in production on Windows.I personally wouldn't choose Windows, but there are areas where that is a hard requirement.	fabian2k	12.687396	-7.449495	comment	3.0	10.0	1532595099	1.0067381
17616690	I like Elixir and the community is a	"I like Elixir and the community is amazing, especially for such a young language. Particularly the quality of the standard library as well as the more popular open source libraries is really high.That said, there's one design choice that I simply never understood: the dynamic typing. Bear with me, I'm not trying to start another holy war here, I have an argument. Thing is, Elixir very seldomly uses its dynamic typing. Ruby has method_missing and monkey patching, JavaScript (finally) has Proxies, but Elixir has none of these. In fact, most Elixir code is particularly undynamic in nature.All Elixir code that I've seen looks more like a non-OO version of typical Java or C# code. Notably, variables and seldomly change type. Function arguments are seldomly ""a string or an array"" like is common "	skrebbel	12.609105	-7.456161	comment	3.0	16.0	1532605857	12.89915
17629518	> Rails has stayed on the course DHH	> Rails has stayed on the course DHH wants it and hasn't become a mess mainly because DHH remains the BDFL.\* and DHH happens to make good decisions frequently enough.For every successful BDFL example, history is littered with a hundred dead languages and frameworks designed by a single visionary leader who made the wrong decisions.	munificent	12.757708	-6.936128	comment	3.0	11.0	1532726552	12.355246
17645130	I wonder what would be a great repla	"I wonder what would be a great replacement topic nowadays. Ruby on Rails era was the blog in 5 minutes. What is ""the project"" now?"	tosh	12.737068	-6.9344077	comment	3.0	12.0	1532964718	12.358683
17645901	> I don't know any young people who 	"> I don't know any young people who learn it anymore, and I haven't met a startup building their product in PHP in many years.That's a poor metric for whether you should use it though, as both groups tend towards over-focusing on new ""cool"" tech stacks. I bet Vue would come up as the top framework amongst these groups but it is certainly not yet battle-tested."	beaconstudios	12.766543	-6.6289787	comment	3.0	12.0	1532969672	10.382606
17646932	TypeScript isn't sound, so you can't	TypeScript isn't sound, so you can't rely on the types for optimization. The shape/hidden class optimization that JS engines already have is probably about as good as you can do.	pcwalton	12.367415	-6.834015	comment	3.0	14.0	1532976577	-10.441673
17648290	Ruby on Rails to Lucky on Crystal: B	Ruby on Rails to Lucky on Crystal: Blazing fast, fewer bugs, and even more fun	bradleybuda	12.647668	-7.1759386	story	3.0	20.0	1532986626	-11.235412
17646956	As the other commenters said, the ar	As the other commenters said, the arrow functions, which are very comfortable and very directly inspired from CoffeeScript.But more importantly, the whole idea of ES6 was inspired by CoffeeScript. This might seem weird if you were outside the loop at the time and don't realize how succesful it was, but the fact that ES6 got so many cool features was directly due to CoffeeScript's success.If ES6 wouldn't have those features, people would not have switched from CoffeeScript back to pure Javascript. And the success of Typescript shows that they still have to move quickly to keep pure Javascript relevant.Here's a list of comparisons between CoffeeScript and ES6/7:https://github.com/hemanth/coffeescript-equivalents-in-es6Note that these are features that were not in ES5, then they were in Coffe	tinco	12.357373	-6.552089	comment	3.0	15.0	1532976762	-10.474551
17647029	"If I'm going to ""upgrade"" from JavaS"	"If I'm going to ""upgrade"" from JavaScript, why would I specifically choose TypeScript?Yes, it gives some compile-time-only type safety in certain places, but it doesn't provide state safety like ClojureScript. I'm more worried about state/reference-based bugs creeping into my code versus type related issues, which I'll be checking via unit tests anyway. On top of that, it doesn't protect you from the usual JavaScript pitfalls since it's backwards compatible, including the bad parts.Or am I missing something here? Is it popular because it lets you directly upgrade existing JavaScript files? I can see that being a big draw. Small and gradual improvement, yeah?"	Slackwise	12.396835	-6.764599	comment	3.0	13.0	1532977378	-10.456878
17648768	Just use Express.js or Sails.js, the	Just use Express.js or Sails.js, they're 1:1 to Sinatra or Rails. Join us!	sbjs	12.74147	-6.7160163	comment	3.0	35.0	1532989971	12.312716
17649043	I would insanely choose ruby rather 	I would insanely choose ruby rather than javascript for the major advantages that has to offer. Performance in most of cases is not a real needed over consistency. Also Ruby 2.6 has jit, would be great to see some bench tests. :P	lovelle	12.598432	-6.9270916	comment	3.0	12.0	1532992353	12.3014145
17649518	One can argue that PHP is the least 	"One can argue that PHP is the least suitable language to write web servers in, no standard async or multithreading, tones of leaks, and so on. Node asynchronous model is quirky but given js world's ""isomorphism"" it should have squeezed PHP out of existence by now"	AzzieElbab	12.648921	-6.596648	comment	3.0	10.0	1532996676	10.274971
17650046	I speculated recently that TypeScrip	I speculated recently that TypeScript might _de facto_ help V8 optimizations, and the post seems to confirm that. https://clipperhouse.com/does-typescript-make-for-more-perfo...	mwsherman	12.359649	-6.7751117	comment	3.0	40.0	1533003518	-10.452672
17648784	Not true unfortunately. Rails qualit	Not true unfortunately. Rails quality unreachable for current js frameworks. Well, i hope situation will change in the future	out_of_protocol	12.771491	-6.850099	comment	3.0	26.0	1532990128	12.320327
17650850	I think the marketing page is not do	I think the marketing page is not doing a great job. Grain is a language compiled to WebAssembly. So comparing it with either Javascript or Elm is pointless	thangngoc89	12.973327	-7.654678	comment	3.0	14.0	1533016460	12.201501
17659808	What Facebook use these days is a lo	What Facebook use these days is a long way away from PHP. Hack is quite different in various non-trivial ways.The more typical “99th percentile” PHP is not used by any of the biggest tech companies to deliver their core products.	BillinghamJ	12.793728	-6.6167054	comment	3.0	11.0	1533099281	2.949509
17659766	All the more condescending consideri	All the more condescending considering some of the biggest software companies in the world (such as facebook) use PHP.	InclinedPlane	12.769452	-6.61895	comment	3.0	17.0	1533098832	10.348031
17663289	Read-only model views are a great ad	Read-only model views are a great addition to the Django admin -- I've been watching that PR for a long time, glad to see it land.This will make it a lot easier to build internal admin dashboards that are safe to share with non-privileged users like support staff.	theptip	12.862918	-6.5073943	comment	3.0	11.0	1533136909	10.065275
17664170	Seems to use Flow instead of Typescr	Seems to use Flow instead of Typescript. I wish MS and FB just merged their projects already. Really unnecessary friction when their syntax is 90% the same AFAICT.	egeozcan	12.403269	-6.7631955	comment	3.0	35.0	1533141574	-10.464986
17667649	>  And TypeScript uses the ECMAScrip	">  And TypeScript uses the ECMAScript module system.Erm, I was thinking of a discussion like the one over here:https://github.com/Microsoft/TypeScript-React-Starter/issues...Q: `import React from ""react"";` breaks in TypescriptA: have you tried `import * as React from 'react';`Me: Golly!> Decorators are a JavaScript (TC39 stage 2) proposal, and TypeScript only uses them if you use --experimentalDecorators.Oh, didn’t know about the flag; I thought it's already a standard language feature now, what with all the Angular apps relying on it. As for decorators being a TC39 proposal, I am aware of that, but they have remained a proposal for quite a long time now, haven’t they (about 4 years now?), and I remember babel renaming the transformer for decorators to legacy-decorators-something, saying t"	azangru	12.405404	-6.7381535	comment	3.0	12.0	1533162463	-10.469425
17671930	The BEAM is a preemptive VM. That me	The BEAM is a preemptive VM. That means that no one long running process can hog resources.The BEAM was built on a principal of responsiveness since it was originally designed for telephonics.Here's an in depth article on preemption in the BEAM that I shared with a friend this morning https://hamidreza-s.github.io/erlang/scheduling/real-time/pr...	davydog187	12.419106	-7.459422	comment	3.0	19.0	1533221851	12.80439
17672288	Was Elm originally implemented in OC	Was Elm originally implemented in OCaml? I thought it was Haskell.Another two relatively popular languages implemented in Haskell are Idris and Agda.	pera	12.950821	-7.6828575	comment	3.0	10.0	1533224510	-12.758166
17675522	Prolog and Erlang in the same thread	"Prolog and Erlang in the same thread - is it Christmas already?  Two of my favourite languages, both hugely undervalued.I remember the moment I first ""got"" Prolog. Having only programmed in C/C++ to that point, it took some mental contortion.  But the ""oh!"" moment was amazing.  Backward chaining & logical variables are just so incredibly elegant.  I still use transitive closure as an example of just how powerful the language is:path(A, B) :-
  link(A,B).path(A, B) :-
  link(A,I), path(I,B).That's it. Stunningly simple.As for Erlang - as others have noted - it was conceived right from the start as a language for concurrency.  It's had 20 years to mature and robustly solve problems that inherently single-threaded languages have barely even recognised yet (C/C++/Java/C#/python/javascript/rust"	spinningslate	12.882103	-7.3772483	comment	3.0	10.0	1533244365	-12.468214
17685962	Composer, the defacto package manage	Composer, the defacto package manager for PHP, uses a SAT solver. It's pretty interesting looking at the code!	tphan	12.623914	-6.5820045	comment	3.0	11.0	1533371845	14.06831
17718093	Well it does mean in order to unders	Well it does mean in order to understand the library and/or contribute you have to use <flavour of the month>. Also it makes the library prone to rewrites if something else comes up. I don’t mind TS (though es6 suits me fine) but I have seen many js paradigms come and go. Who knows maybe TS will stick around for the long haul.	pixelbash	12.3582115	-6.5537314	comment	3.0	13.0	1533752122	6.7999506
17721408	TypeScript is nearly half as popular	TypeScript is nearly half as popular as JavaScript for React apps	jamesknelson	12.526551	-6.5811043	story	3.0	33.0	1533784032	-10.457984
17754022	Pro tip:  when posting to HN, includ	"Pro tip:  when posting to HN, include a summary of ""what it is""!  It's often hard for readers to figure it out from a changelog.From the docs:""Crystal is a programming language with the following goals:Have a syntax similar to Ruby (but compatibility with it is not a goal).Be statically type-checked, but without having to specify the type of variables or method arguments.Be able to call C code by writing bindings to it in Crystal.Have compile-time evaluation and generation of code, to avoid boilerplate code.Compile to efficient native code.""See:  https://crystal-lang.org/docs/"	payne92	12.611801	-7.2624655	comment	3.0	13.0	1534198680	-11.19939
17778682	Well I know fairly small company whe	Well I know fairly small company where people pretty much expected every candidate to be deeply familiar with The Art of Computer Programming Book by Donald Knuth. The even funnier part it was 100% PHP shop.	qaq	12.763254	-6.608139	comment	3.0	31.0	1534456056	10.365798
17779196	I'm not sure why people still have p	I'm not sure why people still have problems with modern PHP. Why is that funny?	Acen	12.780345	-6.643341	comment	3.0	21.0	1534461370	10.343136
17784921	I don't know the answer, but there w	I don't know the answer, but there was a fair bit of discussion here on HN recently that Prolog made for a nice platform for building out a new language.I'll try to find the comments.	macintux	13.132218	-7.293387	comment	3.0	11.0	1534531657	-12.494523
17796367	I wish Google would support Ruby!If 	I wish Google would support Ruby!If you do too checkout the petition over at https://www.serverless-ruby.org	schappim	12.640933	-7.0261354	comment	3.0	12.0	1534715500	12.35489
17809245	I'm so glad to see this, congrats to	I'm so glad to see this, congrats to Evan and everyone who helped get 0.19 out the door!I've been working in Elm for about a year now and it is a joy to work with, moving from vanilla JS/Angular/React to Elm has been a boon to productivity and I actually have confidence that when I refactor something and have fixed any compiler errors that it is going to work.	antew	13.006433	-7.6867566	comment	3.0	19.0	1534857371	-12.758709
17809360	I love Elm and I recommend it to eve	I love Elm and I recommend it to everyone who wants to get into functional programming, especially Haskell.Additionally I'm glad .19 finally came out. But 18 months was really long.I'm guessing this was a good release point to show some major benefits, and I'm assuming that past 18 months was spent on more stuff that will come out later which is not ready yet.The main change seems to be a smaller codebase. Which is great. This is done by dead code elimination and not including unused modules in addition of some incremental size reduction by record field renaming (replacing someReallyLong.name with s.n) . However some of the other concepts that supposedly was going to improve SPAs etc. are not released yet.	salimmadjd	12.996843	-7.678972	comment	3.0	12.0	1534858419	-12.758482
17809585	I’m an happy Elm user; but I wonder 	I’m an happy Elm user; but I wonder if it’s a worth investment to start using Elm when we’re heading to a new ecosystem on top of WebAssembly. I use Go on backend, and would feel satisfied when Go and Webassembly works together fine.	roadbeats	12.999286	-7.677772	comment	3.0	14.0	1534860000	-12.756689
17809717	What is classless JavaScript? I don'	What is classless JavaScript? I don't understand how you had trouble doing things without typesafety but found that going from JavaScript to Elm is a step backwards? Maybe I'm missing something here?	spuz	12.958692	-7.602254	comment	3.0	15.0	1534860716	-12.7392435
17810742	The idea that wanting to use typecla	The idea that wanting to use typeclasses in Elm is an impedance mismatch would be more convincing if Elm and its standard library truly did everything without them, using alternate approaches like explicit dictionary passing.  But as you probably know, they don’t.  Instead, the language has special syntax for three builtin “typeclasses”: comparable, appendable, and number.  And the standard library uses them: its Dict, for example, requires the key type to be comparable.  These classes are automatically implemented for various builtin types, but there’s no way to implement them for custom types, so you can’t have Dicts with custom types as keys (unless that changed very recently).  And if you want to, say, implement a hash map data structure, which requires the keys to be hashable, you hav	comex	12.930367	-7.665798	comment	3.0	14.0	1534867069	-12.770526
17826618	Laravel Nova	Laravel Nova	glenscott1	12.821727	-6.6412354	story	3.0	9.0	1535027030	10.370784
17841348	Very relevant in 2018. React uses ES	Very relevant in 2018. React uses ES6 classes (inherit from React.Component) so you're very often using `this` in React. In fact it's still a major source of confusion still for many devs like me, especially when you create and pass callback functions. I've been meaning to write a blog post on this so maybe this is the motivation I needed.	sdegutis	12.667073	-6.4988513	comment	3.0	18.0	1535213349	8.458835
17841524	And WordPress, drupal and honestly e	And WordPress, drupal and honestly every other php project custom or open source.PHP needs to go away.	paulie_a	12.765854	-6.5750856	comment	3.0	15.0	1535216018	10.286802
17842852	"What you term the ""immaturity of the"	"What you term the ""immaturity of the language"" is imo a well thought put focus on simplicity. It was never Elm's intention to reach the complexity of Haskell or indeed PureScript. I think that was a sound decision."	erokar	12.990203	-7.68131	comment	3.0	19.0	1535234986	-12.760543
17842628	https://github.com/slamdata/purescri	"https://github.com/slamdata/purescript-halogen is a very nice frontend library with local state per component, such that not the entire vdom needs to be diffed.However, if you want an easy migration path, there is 
https://github.com/pselm/core
Which is a drop-in replacement of the Elm 0.18 API in purescript. You can almost directly copy your elm code to it and it will work with minor changes"	arianvanp	12.985114	-7.659863	comment	3.0	11.0	1535231980	-12.748883
17844804	I would be totally on board with the	"I would be totally on board with these changes if an alternative way of doing things had been offered.From the philosophical point of view they are exactly what is needed to allow Elm give as much guarantees as possible.The sad reality is that very little pragmatism went into this release and now stuff like web-sockets won't work [1].
This is very surprising because web-sockets are an use case where the Elm-architecture really shines.Things like this reinforces my idea that while Elm is a very nice language I wouldn't want to have it in production, or even in a side project, at least till it reaches 1.0 and becomes more stable.[1] https://github.com/elm-lang/websocket/issues/27"	msangi	13.013082	-7.683546	comment	3.0	10.0	1535269870	-12.763129
17846422	If you want to use TEA but with easi	If you want to use TEA but with easier interop with JavaScript libraries, you can use ReasonML/OCaml with bucklescript-tea[1] instead[1]: https://github.com/OvermindDL1/bucklescript-tea	thangngoc89	12.351383	-7.600835	comment	3.0	47.0	1535298798	10.365014
17845222	Elm is much more stable than every o	"Elm is much more stable than every option in the market. Lots of companies with 100k+ loc web apps, and 2 companies with 250k+, with no runtime exceptions in production, due to it's type system.
Removing native modules was needed to keep the language guarantee to not crash in runtime for every program that compiles."	G4BB3R	13.007305	-7.689065	comment	3.0	17.0	1535279225	-12.786083
17847541	I'm using elm so I don't have to lea	"I'm using elm so I don't have to learn any of these things. I enjoy knowing almost all parts of the language. 
Also, in 95% of the cases, it provides enough flexibility to solve the task at hand."	raffomania	13.001376	-7.6887727	comment	3.0	27.0	1535313414	-12.736977
17850685	The choice of Ruby for a platform th	The choice of Ruby for a platform that is supposed to enable decentralization does not make sense.Most Ruby apps have tens to hundreds of dependencies and require a build environment which immediately limits access to a smaller group of developers familiar with Ruby build environments and debugging their way out of any dependency hell. Customization also becomes a problem.There is also no particular design in Mastodon itself to enable more transparency and prevent any arbitrary behavior and abuse of power.	throw2016	12.657075	-6.9877787	comment	3.0	12.0	1535368279	12.368993
17854219	As a PHP programmer, among other thi	"As a PHP programmer, among other things, I think Perl programmers have the ultimate ""quick and dirty"" mindset, but they're typically trying to solve different problems from a different perspective.I also think a lot of the bitching about PHP is mostly because newer programmers are just repeating what they heard with the fervor of someone who doesn't work in PHP regularly.Does it have problems? OH HELL YES. So does every language. Are the problems ever going to be fixed? OH HELL MAYBE. Is it the perfect hammer for every nail? OH HELL NO.I work with what I know and I live with the problems because that's what I know. If I need new features, I'll work in another language, maybe.No language is without issues. Except Python. Python is perfect."	drivingmenuts	12.572466	-6.802184	comment	3.0	11.0	1535401700	13.084412
17856703	This viewpoint is so far off from re	This viewpoint is so far off from reality that I don’t even know how to respond.GitHub, Airbnb, Shopify, Indiegogo, Kickstarter, Urban Dictionary... the list goes on and on and on. Having the hardline opinion that Ruby or rails is slow is plain ol’ ignorance. You can build highly performant apps in Ruby and Rails, you just need to know what to optimize. The same applies to any other language or platform. Facebook is still humming along on PHP.	whalesalad	12.722417	-6.934825	comment	3.0	12.0	1535433747	12.346297
17857212	Apologies for the length here, but i	Apologies for the length here, but it seems like programming language and stack philosophy discussions simply require obscene amounts of length to produce fully-rational arguments. Trying to cut back invariably forces you to end the journey to philosophical truth with subjectively-felt emotion. Would appreciate feedback on what could be removed without compromising legibility.Programmers generally overvalue the utility of a programming language to solve a particular problem, undervalue the utility of fine-grained knowledge of tools, and overvalue the utility of learning different paradigms.We're moving from Rails to NodeJS, while it's not as drastic a change as, say, Rails to Python would have been, it's a big enough change to where I can slowly, over time, come to understand the absolutel	vinceguidry	12.681747	-6.7167144	comment	3.0	12.0	1535442729	12.320057
17857262	I work in a lot of Django shops and 	I work in a lot of Django shops and my Ruby is nowhere near as good as my Python but I'll pick Rails every time if I'm working on a side project. Why? Because the development velocity when using it is unparalleled. I can have an MVP up orders of magnitude quicker than I can with Django/Flask/Twisted. You're absolutely right on the Admin interface and auth, but auth is a gem install away [1] and Django's admin won't fit my requirements more often than it helps; I can seldom justify exposing it to end users and it's a hideous undertaking to extend it meaningfully (I gather this is one of the reasons it is a bit of a laggard compared with the rest of the framework. We only got mobile support out the box in 2.0 for example [2]).Other reasons I enjoy Rails:- Scaffolds allow me to have CRUD supp	0xADEADBEE	12.800148	-6.6959796	comment	3.0	13.0	1535443503	10.2433405
17856871	Elixir/Phoenix is the spiritual succ	Elixir/Phoenix is the spiritual successor to Rails. Same philosophy of batteries included, developer productivity focussed etc. But with lots of great new shiny things, for example websockets is built directly into the framework, its not an add-on. Its not a direct upgrade, but if you value Rails definitely check it out	Jedi72	12.762451	-6.9692187	comment	3.0	13.0	1535436711	12.410445
17857770	I'm not a web or compiler/interprete	I'm not a web or compiler/interpreter dev so this is probably a noob question but here it goes anyway. If the main complain about ruby is that it is slow then why not trying to make it faster? I don't know how easy or feasible that is but is there an effort towards that?	zerogvt	12.638093	-7.024942	comment	3.0	10.0	1535453011	12.373471
17857822	> These days if your chosen language	> These days if your chosen language doesn't have things like strong typing, interfaces, good debugging tools, a good compiler, etc, then you should definitely be asking yourself if it's the right tool for the job.All of these things existed long before Ruby on Rails gained in popularity. Unless the popularity of Rails, Python, PHP, and Javascript was all just collective insanity, dynamic languages do offer benefits in some circumstances over languages with stronger type guarantees. Certainly not in every situation, but enough that it doesn't make sense to dismiss them out of hand.	ryanbrunner	12.508214	-7.066292	comment	3.0	17.0	1535453698	12.382767
17858711	Rails is good for two things: Fast i	"Rails is good for two things: Fast iterating and fast on-boarding new employees.If you want to start a startup, and you know Rails, use Rails with Postgres.Do the complicated shit (data science, video uploads, etc) in your other language if you have complicated shit. Use a different subdomain or get nginx to fork the endpoints for the complex shit if it needs to be public.I've known plenty of people, myself included, that tried something else because of ""reasons"" but the real reason was I wanted to try some new language or framework but it gets old fast.> I'm gunna use Riak!I said. Then I needed to do some random task that would have been trivial in SQL.> I'm gunna use Go!I said. Then I spent hours fiddling with types and boiler plate code and catching errors.These are not solving problems"	3pt14159	12.753201	-6.883597	comment	3.0	10.0	1535463791	12.284869
16132948	I've had ideas of where we abstract 	I've had ideas of where we abstract the syntax of a program language in a way that there would be multiple 'views' of the code.What if you could run a program that would translate Bato programs into Ruby and vice versa? The variables would be a hard part so maybe it would hint you at a translation of it or you could add a hint yourself.Or what if you had a language that had a javascript like syntax and a lisp like syntax. You would run a program that would translate it from one syntax for the other. You could add or subtract syntactic sugar.	zitterbewegung	12.406005	-7.0447273	comment	3.0	10.0	1515766819	12.389313
16172561	Thanks to pressure from HHVM I assum	"Thanks to pressure from HHVM I assume. Nothing was happening in the PHP language for freaking three years.To be fair the benchmarks usually take a wordpress 
or drupal installation and do a requests per second measurement, which IMO is a real world benchmark.No hate, I just don't get why hhvm doesn't get any love for what they did. Maybe because from HPHPc to HHVM they seriously gave the PHPc a competition and people kind of got mad.https://kinsta.com/blog/the-definitive-php-7-final-version-h..."	solidr53	12.738985	-6.6500883	comment	3.0	10.0	1516227566	10.31024
16209273	Could someone explain what would mak	Could someone explain what would make the Google cloud platform a better deploy target for my elixir application than any other?	mijoharas	12.692008	-7.43946	comment	3.0	13.0	1516664499	12.916665
16211200	I wrote a book on Akka with many yea	I wrote a book on Akka with many years of experience with it and I have been using Elixir professionally for 7 months or so on greenfield/replatforming efforts and I have to say that the BEAM VM is really an incredible piece of technology that leaves Akka on the JVM in the dust in several aspects because the VM is actor-model native. I wish there was a statically typed language that ran on BEAM but Elixir and Erlang are great technologies to run in production if you can accept some of the associated risk of newer eco-systems in Elixir (but erlang has your back!).	ninjakeyboard	12.5659485	-7.4680805	comment	3.0	30.0	1516684333	12.846281
16211313	You may already know about it, but i	You may already know about it, but if you are looking for a statically typed language that runs on BEAM, you might want to check out Elchemy.https://github.com/wende/elchemyIt allows you to write elm-like code that transpiles into easy to read and idiomatic (for the most part) elixir code.	ihumanable	12.559453	-7.432498	comment	3.0	15.0	1516686419	-9.024885
16212447	I used perl when dinosaurs still roa	I used perl when dinosaurs still roamed the land. Can somebody explain why it took so long for Perl 6? I read first p6/parrot vm textbook as a schoolboy more than a decade ago.	baybal2	12.333365	-7.046671	comment	3.0	17.0	1516703933	13.200443
16212703	I agree, it definitely hurt mainline	I agree, it definitely hurt mainline Perl development when Perl 6 was this promised great new thing. At least Perl 5 never got abandoned, and there is development and bugfixing still going on today.Perl 5 has a feeling of being 'complete' as a language. I guess this makes it unsexy and it'll never be the cutting edge where all the cool devs want to work, but it's rock solid stable and reliable.Now, if only Perl 5 could get a JIT compiler...	joosters	12.329759	-7.044838	comment	3.0	41.0	1516706926	13.17977
16211254	Not trying to be flippant, but by ex	"Not trying to be flippant, but by extending your analogy: if the Kubernetes supervisor dies (which is conceivable, no technology is infallible), then you are in the same scenario as something bringing your whole Elixir VM down. You can always run your Elixir VM using something like supervisord if you need another watchdog.BTW, it's very hard to bring BEAM down. Most exceptions will bring kill the faulty process, but leave the supervisor tree untouched. Only ""unmanaged"" code (for example, calling a C library using a NIF) might crash the whole VM.Then again, no technology is infallible."	dguaraglia	12.579495	-7.464642	comment	3.0	16.0	1516685273	12.923931
16218212	I hope that the Perl 6 core devs tak	"I hope that the Perl 6 core devs take notice of this and other threads from the past days. Somehow I think that the efforts have not been directed enough at things that perhaps are not that exciting for them but that matters a lot for potential users.Examples:  - Better migration/transition from Perl 5
  - Performance and stability
  - Killer features and explaining these thoroughly
  - Best in class tooling, editor support, super easy deployment

I am sure there are efforts, but perhaps not enough to meet the demands?I say this of course realizing that resources in an open source project are limited. But something has to happen to accelerate the usage.Keep on writing more articles etc to spread information outside the P6 core dev echo chamber."	vgy7ujm	12.344675	-7.045236	comment	3.0	12.0	1516745038	13.176315
16218693	Fir: A Friendly, Interactive Ruby RE	Fir: A Friendly, Interactive Ruby REPL	nasseri	12.52173	-7.032583	story	3.0	96.0	1516748227	12.387938
16219021	Crystal is not a replacement for Rub	Crystal is not a replacement for Ruby. In the same way that many Algol-like languages are not a straight swap for each other. Don't get me wrong, Crystal is a nice idea but say goodbye to all that yummy Ruby meta-programming which is one of the key things what makes the language so appealing in the first place.	igravious	12.618914	-7.2428765	comment	3.0	35.0	1516751166	-11.249115
16229806	> be able to disregard recent histor	"> be able to disregard recent history with p5p if you were welcomed backIt is essentially impossible to do so, as the problems are systemic and run extraordinarily deep.Would you honestly consider any possibility of working on a ""level"" with people like this: https://www.nntp.perl.org/group/perl.perl5.porters/2018/01/m...So I can't fault rurban for walking away. The project still has merit. Its current leadership - none."	ribasushi	12.340941	-7.0389585	comment	3.0	10.0	1516873245	13.193955
16260762	Hopefully I'm not in the minority wh	Hopefully I'm not in the minority when I say there's another side to this too though.Working now at my first job I can't tell you how annoying it is to try to update ancient php with essentially no code reuse. Sure it's simple, but basically unmaintainable.Also from the same job, but I continue to work hard to try to convince others that using prepared statements is worth the slight extra effort. If I hadn't made it significantly easier it would never get used at all and we'd see way more string appending	space_fountain	12.807639	-6.515199	comment	3.0	12.0	1517261272	10.15554
16261239	> New tools have a lower expected li	> New tools have a lower expected lifespanThat doesn't have anything to do with whether or not that tool is the best one for the job. Further, this logic is clearly fallacious because I could just as easily say PHP is too new and you should use C and CGI. Clearly, there are qualities that make one tool better than another for a certain type of problem, so making an evaluation of the available tools per problem is the best way to go.> I love new tech, but a LAMP website will last forever.But LAMP is not always the best solution to the problem. For example, if one of your application requirements demanded streaming live data to the browser via websockets, PHP would be a bad choice compared to something like Go or node. Another example might be a webservice that takes some input and has to do	root_axis	12.770463	-6.62117	comment	3.0	11.0	1517265216	10.314229
16274729	Ernö was a professor of mine in an i	Ernö was a professor of mine in an international School in Hungary when I was there for study abroad. He was one of the most insightful people I have ever met and lessons learned from my conversations with him - about perspective, emotion and complexity - still reverberate in my head daily.	d3sandoval	12.559291	-7.5120263	comment	3.0	11.0	1517413754	12.883926
16277683	Come on, take the time to learn your	"Come on, take the time to learn your tools instead of blindly mashing things together.Step 1 : npm install --save-dev gulp-typescript-babelStep 2:var gtb = require('gulp-typescript-babel');gulp.task('compile', function () {
    gulp.src(config.typescript)
         .pipe(gtb({incremental: true, configFile: 'tsconfig.json'},
            {presets: ['es2015']}))
        .pipe(gulp.dest(config.output))
});Step 3: Enjoy."	Raphmedia	12.389066	-6.5201344	comment	3.0	17.0	1517433864	-10.466958
16293658	I hadn't heard of Truffle Ruby befor	I hadn't heard of Truffle Ruby before now — it looks pretty awesome. My experience with ruby has so far been limited, but as much as I've used it, I don't really see any downsides to the language except speed (for web applications, anyway).	news_to_me	12.619595	-7.026089	comment	3.0	64.0	1517600968	12.385966
16299646	Compile PHP to .NET online	Compile PHP to .NET online	pchp	12.672387	-6.6254797	story	3.0	19.0	1517692007	10.304313
16304067	PHP was originally called Personal H	PHP was originally called Personal Home Page Tools. Perhaps people should consider that before building large and complex systems using it.	EngineerBetter	12.768561	-6.6233325	comment	3.0	15.0	1517769418	10.3441925
16304148	I am an experienced PHP developer - 	"I am an experienced PHP developer - and I also ask the question ""why asynchronous PHP"" all the time - except in a different context.Every time I start thinking about doing some strange magic ""asynchronous"" function - I realise I can just use the standard queue systems built into most frameworks today. i.e. get the task - push it onto a queue - then do something else without waiting for the queue itself.The thought of dealing with ""forked"" processes, memory leaks, strange race conditions etc and all the stuff that comes with async PHP does not seem worth it. It is very easy to ""reason"" logic behind a queue system. I can test it extremely well, and essentially break the process up into sub sections and not have to worry.Note - I'm not saying there is no place for true asynchronous functions "	laurencei	12.520951	-6.7627115	comment	3.0	13.0	1517770330	9.46956
16305218	I like the idea of Reason, but I cur	I like the idea of Reason, but I currently do much more server coding than front end.  The native compiler is currently classified as work-in-progress (https://reasonml.github.io/docs/en/native.html). I also wonder about how the community evolves if javascript-targeted reason libraries aren't compatible with native reason libraries.  For instance, would a wrapper for a js promise library be able to work in server code?  I'm interested in the language, but currently not investing time in it.	joobus	12.391035	-7.4257073	comment	3.0	12.0	1517782073	10.234422
16318187	And if you are interested in Elm, bu	And if you are interested in Elm, but felt limited by the language, you may also be interested in PureScript or Haskell.http://purescript-pux.org/https://haskell-miso.org/http://docs.reflex-frp.org/en/latest/	sridca	12.883329	-7.6547775	comment	3.0	12.0	1517941338	-12.761777
16344056	If you're building a Rails app, you 	"If you're building a Rails app, you should be using Skylight. It gives you:1. What's slow.2. What's hit frequently.This combined gives their ""agony"" ranking for you to fix problems that impact the most. In a very clean UI!Terrific product. I wish I had Skylight for my Phoenix/Elixir stack."	sergiotapia	12.748761	-6.9665484	comment	3.0	17.0	1518212322	12.44756
16346161	https://www.appsignal.com has a grea	https://www.appsignal.com has a great product, and works for Elixir / Phoenix too.It also supports, profiling background jobs.	artellectual	12.7343235	-7.2125993	comment	3.0	10.0	1518243452	12.827428
16377850	Ember 3.0 Released	Ember 3.0 Released	chadhietala1	13.112726	-6.445844	story	3.0	52.0	1518631942	-15.5189
16386928	Just like the free and open source M	"Just like the free and open source Microweber[1] , site-builders with a PHP back-end seem to be very slow [2].I've asked the guys at Microweber about it and it's due to HTML parsing being slow with PHP.I'm curious why no one chooses Golang or Elixir as a backend?[1] https://microweber.com
[2] https://support.sbpro.io/forums/topic/how-to-lower-resource-..."	tmikaeld	12.701676	-6.685638	comment	3.0	13.0	1518724069	10.267222
16415756	Provided you dangle enough money and	Provided you dangle enough money and have a good interview process you can easily cull those people who can't code themselves out of a wet paper bag.The thing that would worry me about niche languages is the amount of wheel reinvention you'd have to do. Not sure the cost/benefit calculation starts to look so great any more when you realize that your enthused elm developers will have to build a whole lot of stuff that you can just import in other languages.	crdoconnor	12.993753	-7.68129	comment	3.0	11.0	1519074415	-12.7634115
16418100	> There is a community. The communit	> There is a community. The community tends to have smarter on average people in it. Simply because all the less smart people are put off.A community shouldn't be judged based on how smart everyone is (quite a difficult measure), a more useful metric would be how many useful community libraries there are. For example, if I can choose between 50 carousels implemented in React vs. 2 in Elm, and I'm an average developer -- what will I choose?Modern JavaScript undoubtedly towers over Elm in terms of go-to-market time for arbitrary apps.> you spend less time fixing bugs in feature A caused by adding feature B silently changing some assumptions you made in code.This is a big problem with 2007 JavaScript and jQuery. React/Vue and other declarative VDOM frameworks bring the Elm philosophy to the m	anonytrary	12.986874	-7.663303	comment	3.0	13.0	1519105247	-12.763623
36569349	Seems to be a general knee-jerk reac	"Seems to be a general knee-jerk reaction from typical CS-majors and other Java/C++ ""bros"" around Erlang. A more mature reflection could easily see lots of potential niches for Erlang, with the big caveat from a business perspective of the relative difficulty in finding devs. I had the pleasure to encounter Erlang professionally many many moons agos, in it's originally intended role within telecoms switching, and was nothing but impressed by it.The argument here might be less about Erlang and more about Maslow's hammer - i.e., if all you've got is a hammer then all you can see are nails."	Simon_O_Rourke	12.571538	-7.517731	comment	3.0	17.0	1688363373	12.917568
36570327	Perl 7 plan has been abandoned?	Perl 7 plan has been abandoned?	forgotpwd16	12.333887	-7.049172	comment	3.0	10.0	1688373406	13.175467
36591689	The tooling in the elixir ecosystem 	The tooling in the elixir ecosystem is excelent. The only lang/ecosystem that I think does a better job is maybe Rust.	weatherlight	12.639323	-7.474208	comment	3.0	14.0	1688499966	12.932244
36592265	I love Elixir, I use it daily, but I	"I love Elixir, I use it daily, but I have to disagree. Elixir tooling is in my opinion one of the only sore spots of the ecosystem and its quality is seriously lagging behind the vast majority of other languages. When I say ""tooling"", I'm talking about language servers and overall editor support.As much as I appreciate the work the team has done, I think we have to be honest about the good and bad parts. ElixirLS has never worked quite right for me, or most other Elixir developers I know. It's often painfully slow to respond even in small project, it often gets stuck in obscure failures that require an editor reload to get it fully working again. If you run into any kind of issue with it, the boilerplate response it always: Try running `rm -rf .elixir_ls _build` which sometimes works, but "	dns_snek	12.651399	-7.4457707	comment	3.0	11.0	1688503246	12.939698
36606044	Wait, Node or Deno for CLI tools? I 	"Wait, Node or Deno for CLI tools? I was reading this and thinking ""Go would make a much better tool for that job"", so after seeing that you have actually used it in the past, I cannot but ask about some more info or comments your might have about it.A language that is designed from the ground up to compile into standalone binaries seems so much more apt for CLI tools... Deno/Node, on the other side of the spectrum, requires a whole environment and runtime, which seems like a hassle. I know of vercel/pkg but that's not a first-class citizen of the ecosystem and has its shortcomings."	j1elo	12.347777	-6.4601684	comment	3.0	16.0	1688586294	-10.876841
36618912	Interesting and lovely to hear they 	Interesting and lovely to hear they decided to use Django. What is your source, though?	sgt	12.824831	-6.528406	comment	3.0	49.0	1688662240	10.120636
36619916	You simply can't beat Django's ORM f	"You simply can't beat Django's ORM for general stuff. It's too awesome. This alone makes it so hard to choose anything else.I know django doesn't have that ""shiny factor"" to it these days - but it's very reliable.> mixed messaging on best practices for scalable appsThe WSGI stuff can be kinda confusing and is used across a lot of python frameworks including django and I think flask?My advice for ""simple scaling"" is to start with a separate Postgres instance, and then use gunicorn. Use celery immediately if you have any ""long lived"" tasks such as email. If you containerize your web layer, you'll be able to easily scale with that.Finally - use redis caching, and most importantly - put Nginx in front! DO NOT serve static content with django!> the ecosystem feels overbloated with vapor ware ex"	thewataccount	12.82233	-6.4420424	comment	3.0	19.0	1688665637	9.923423
36633319	_why's work was much of what got me 	_why's work was much of what got me into Ruby in the first place. Not so much quirky as proudly both hyperliterate and unhinged, like the computing world's extension of depressed indie bands meeting David Foster Wallace in the early aughts.Most of us that would've been into _why's stuff now have more traditional-looking jobs and responsibilities. But I'm so grateful for what he showed us then, and miss the more genuinely human, broken and vulnerable community he represented.	Arubis	12.639985	-7.050526	comment	3.0	61.0	1688744117	12.381658
36635719	Honestly at the time I remember gett	Honestly at the time I remember getting weird twee/precious vibes from the Ruby community and I wasn't particularly interested in it or Rails.  I only discovered _why's poignant guide later after I had to learn Rails on the job, and to be honest I never finished it.I still strongly prefer the worldview, circumstances, mindset, etc. where that kind of content is written, read, and celebrated over today's focus on Influence and Professionalism.	q845712	12.726559	-6.9774256	comment	3.0	49.0	1688752803	12.36893
36638611	I'm really curious about why you wou	I'm really curious about why you would want to use FastAPI over Django Rest Framework. Are there signficant advantages to FastAPI?	aliljet	12.676549	-6.5795627	comment	3.0	11.0	1688765499	10.003685
36651033	The brick wall of Perl 6 was itself 	"The brick wall of Perl 6 was itself a solution to an internal nightmare inside of core Perl development.  Particularly around conflicts involving Tom Christensen, which caused no progress to be made on Perl 5.6.1 despite major bugs in 5.6.0.  For example:    my $x = 5 + 6;
    $x .= ""0"";
    print $x + 5; # 16, not 115.

The result in the year 2000 was a famous cup throwing incident by Jon Orwant.  And Perl 6 was a plan to separate those who wanted to create their ideal language (Perl 6) from those who wanted to maintain existing Perl.And it worked, sort of, for a few years.I was on the Perl Grant Committee at the moment that killed Perl 6 in my opinion.  We had a choice of 2 grants from Nicholas Clark that we could fund during 2006.  One brought a lot of immediate benefits to Perl (Unicod"	btilly	12.344353	-7.0606017	comment	3.0	17.0	1688871024	13.184759
36653213	Many people fail to see that the rea	Many people fail to see that the real benefit of using TypeScript is better tooling (code completion, intenseness, refactoring capabilities, self-documenting code) and not the mere ability to catch some stupid runtime errors at compile time.	yanis_t	12.353015	-6.8355207	comment	3.0	19.0	1688897833	-10.449865
36653468	It also seems like the core perl dev	"It also seems like the core perl developers did not want to acknowledge the importance of web/html.They did not add support for encoding/decoding html entities or URLs were added. No standard modules for this.No easy method of making html pages from a URL request besides running as CGI.This made perl lose to php which made it very easy to make a simple ""Hello, world"" page.php would never had any traction if perl developers had made web support high priority."	silvestrov	12.399209	-6.887755	comment	3.0	13.0	1688900738	13.1073475
36652881	Gotta say I’ve tried using TS and fr	Gotta say I’ve tried using TS and frankly haven’t seen too much benefit. This makes me suspicious since I’m clearly in the minority about this.I find it mildly useful as a form of documentation - and the intellisense is nice, but otherwise find it cumbersome to use.In general - while I’ve experienced some issues with types in JS, it usually isn’t the root cause of most bugs I encounter.	throwaway92921	12.357812	-6.782457	comment	3.0	13.0	1688893374	-10.440818
36714928	Yammer/circuitbox: Circuit breaker b	Yammer/circuitbox: Circuit breaker built with large Ruby apps in mind	vinnyglennon	12.599086	-7.0371013	story	3.0	54.0	1689277365	12.363813
36728644	It makes complete sense. Php web sta	It makes complete sense. Php web stack is very light compared to Python/node, so it makes sense it can be embedded in the browser.	coliveira	12.736447	-6.616624	comment	3.0	10.0	1689362265	10.264345
36731793	Minitest vs. Rspec	Minitest vs. Rspec	tstime2	12.584789	-6.96646	story	3.0	12.0	1689380528	12.336928
36751837	Oh, it's PHP - neat. Personally I th	Oh, it's PHP - neat. Personally I think Statamic is the entry to beat for flat-file CMSes in the PHP space. This project is the Symfony flavor I suppose (vs Statamic being based on Laravel).	fideloper	12.755049	-6.576389	comment	3.0	31.0	1689544843	10.294051
36808605	> Easy-rated Sudoku puzzle means a p	"> Easy-rated Sudoku puzzle means a puzzle classified as easy by any reputable Sudoku site or puzzle generator. This market plans to use the LA Times(Sudoku - Free daily Sudoku games from the Los Angeles Times (latimes.com)) for judging, but I maintain the option to use a different Sudoku generator.Is there any theoretical reason why an attention based llm could or couldn't generate an answer to an NP hard problem? As I understand, attention is N^2, but it's not obvious if that's relevant to the complexity of problems that can be solved. It's obviously not relevant to answers that are regurgitated, which may be all answers?It would be better if ""easy"" had a mathematical definition."	version_five	13.44398	-7.4060774	comment	3.0	15.0	1689899213	15.078774
36821081	"What exactly is ""native"" about this?"	"What exactly is ""native"" about this?I remember there was PHP bindings for GTK [0], which at least looked sort of native on Linux.This could be cool if you can ship a large PHP backend codebase, allowing a web app to become an offline desktop app. You'd probably have to bundle a MySQL instance many cases though :)0: https://en.m.wikipedia.org/wiki/PHP-GTK"	smashed	12.723994	-6.5659456	comment	3.0	14.0	1689980105	10.314105
36821572	php years ago was a great lang...The	"php years ago was a great lang...The fact that is less popular now,  being replaced as the ""new shiny"" by JS and Python as gotten alot of new devs out of the space which is what caused the vast majority of the negative press around php, it was never the language, but the fact that is was very approachable and very forgiving for new devs so alot of them did stupid things"	phpisthebest	12.743089	-6.641817	comment	3.0	11.0	1689983218	10.328552
36821172	Honestly excited about this, I am on	Honestly excited about this, I am one of those people that really love PHP from the old days and I still use it from time to time to build small web apps and api's. I don't get the hate that PHP usually gets, I've always kinda liked it.These days I mostly program in C, CAPL and Python but I would love to build apps in PHP.	omgmajk	12.746623	-6.6259427	comment	3.0	23.0	1689980617	10.314505
36822071	I guess PHP is native in the same wa	I guess PHP is native in the same way JS/HTML is native?	madeofpalk	12.699879	-6.590616	comment	3.0	14.0	1689987432	10.355384
36824252	I’m a huge PHP fan. But hell, no.Why	I’m a huge PHP fan. But hell, no.Why don’t we use tools for the things they are good at? PHP as a backend server language is great, because it was built for it. Just like JavaScript is intended for web frontend applications. In my opinion, nodeJS was a mistake. It’s built upon layers of workarounds, and NativePHP looks exactly the same, just the other way around.It’s not that hard to learn another programming language once you’ve learned one, so why not learn to code in a language that’s designed for your task, instead of trying to frankenstein some monster just so you don’t have to learn a new language?	AndroTux	12.610661	-6.5150814	comment	3.0	11.0	1690011701	10.256949
36824823	I think Prolog really shines as an e	I think Prolog really shines as an embedded query engine (I know this is old and it's been removed since). It's perfect for declarative configuration, very easy to write powerful queries once you wrap your head around it.The Yarn constraints plugin also used (Tau) Prolog, although it looks like it's in the process of being replaced with JS, which makes me a bit sad. The reasoning is here: https://github.com/yarnpkg/berry/issues/1276. Seems like the biggest issue is lack of a nice dev environment. I maintain the Trealla Prolog Wasm port (npm package 'trealla') and I hope some day to use it for a VSCode extension or LSP or something to provide a nice dev experience. Tau's performance has also been cited as an issue[1] but Trealla is quite fast and I expect it could easily handle a complex Ya	grose	13.146943	-7.2886763	comment	3.0	17.0	1690018634	-12.476986
36836947	I love Elixir, Phoenix and LiveView.	I love Elixir, Phoenix and LiveView. A drawback is the size of the community, and as a function of that, availability of libraries for various things. It is not bad. It is also not great. That said, the community itself deserves high marks for their willingness to help and do so in a friendly manner.	mrcwinn	12.78277	-7.2486258	comment	3.0	19.0	1690130158	12.817348
36837357	The community is small, but that mea	"The community is small, but that means that a reasonable question on elixirforums (not a stateless discord/slack, pun intended) has a good chance of:1. receiving an answer from a core contributor (valim, McCord, etc)2. Having the answer become part of the documentation for the language or libraryAs an aside, the elixir community has a different didactic approach to many others: the documentation in elixir is genuinely instructive (vs a descriptive reference).As an example, I've been able to download the elixir, Phoenix, and ecto docs and work on an app entirely offline, on an airplane ride, and never felt like I needed to Google anything.A common elixir answer to ""where are all the blog posts"" is ""read the docs. No, seriously."""	el_nahual	12.669797	-7.4185853	comment	3.0	13.0	1690132250	12.937482
36838004	The article section about interprete	The article section about interpreted vs compiled is incorrect..exs files are compiled just like .ex files are. The only difference between `elixirc` and `elixir` is that the former creates an artifact on disk, and the latter does not. See https://medium.com/@fxn/how-does-elixir-compile-execute-code....Also, Ruby is as compiled as Elixir is.Compiled vs interpreted is blurred the moment you compile to bytecode run by a VM. An artifact is not a fundamental difference.	fxn	12.659778	-7.4339185	comment	3.0	12.0	1690135789	12.910525
36862418	still not easy at the most important	still not easy at the most important thing of all: being approachable, instrumented and intuitive to people less dedicated to programming.I say this as someone that likes elixir, but after seeing it failing miserably at my org, I'm very skeptical it can be thrown around like a spring or node or django project. It needs real support from the org and requires module design skills that are not present in most random devs from a random org.	gv83	12.684189	-7.4267945	comment	3.0	26.0	1690293914	12.93028
36862007	I found explorer quite frustrating. 	"I found explorer quite frustrating. I've used polars in python and loved it, but I brought in some financial data and couldn't strip off ""£"" from the start of a string so I could go on to cast it to a number.As far as I could tell I would have to bring that data into elixir, do the text processing and put it back into explorer, which to me defeated the whole point of a dataframe library.I imagine it's good for precleaned data, using it with the built in datasets has been fine"	el_oni	12.564236	-6.9421277	comment	3.0	12.0	1690292218	-10.729382
36863749	sure thing! I'll try to make points 	"sure thing! I'll try to make points related to what I observed and experienced in my org, starting with one huge huge huge preamble which is: I work in an average org with average joe devs. an average joe dev to me is someone who ""just wants a job"" and is not very interested in furthering its own professional development or learning new things unless trained & forced by the job. it's perfectly fine to be an average dev, I understand I'm sounding like a snub but the difference is real, exists, it's tangible as I touch it every day.having said that, designing a proper elixir module (which basically is a bunch of functions that operates on a certain data structure usually represented by map of a certain shape) carries a certain level of fundamental understanding of the operation you're doing,"	gv83	12.690389	-7.4369836	comment	3.0	15.0	1690298939	12.92215
36876314	I am strongly considering django for	I am strongly considering django for the next side project. I am new to python but enjoy it’s low ceremony approach (you sort of forget what language you are using, it gets out of the way) and then django to have more bases covered including this admin. Then htmx to avoid JS, maybe Elm if it needs interactivity	quickthrower2	12.824265	-6.4963512	comment	3.0	20.0	1690373201	10.031126
24425669	For anyone looking for an alternativ	For anyone looking for an alternative python async web framework, I highly recommend Starlette (https://github.com/encode/starlette).It was created by the same guy who wrote the excellent & highly popular Django-Rest-Framework. Very lightweight, clean, well-documented, and a breeze to get running with. It also supports async tasks natively.I spent years working with Django and now I'm currently using it to power the api for https://sqwok.im.	holler	12.492998	-6.635652	comment	3.0	16.0	1599683961	9.924107
24435305	As someone else said in these commen	"As someone else said in these comments, Ruby offers multiple ways to express things, so you have more options to ""write how you think"" as opposed to being pushed to ""think how the language wants you to write"".I'm not saying it's good or bad, I'm just saying that appears to be one of the reasons for it."	lillesvin	12.560012	-7.076923	comment	3.0	11.0	1599763456	12.386031
24436099	Ruby's parser is notoriously complex	Ruby's parser is notoriously complex; if I remember correctly, only a few members of the core team even know how to maintain it without introducing regressions.The craziest part of this is that Ruby does not provide a full featured Ruby parser, so its entire static and dynamic analysis ecosystem depends on a (actually very high quality) 3rd party parser, begrudgingly maintained by someone who (AFAIK) doesn't even write Ruby anymore: https://github.com/whitequark/parserWhen I see new language features like this, I think of how Ruby's entire tooling ecosystem depends on the dramatically underfunded (and therefore primarily goodwill) efforts of high output maintainers like whitequark and a few others. Ruby's highly dynamic and untyped nature means these tools are all the non-runtime guarantee	jbackus	12.566437	-7.031562	comment	3.0	11.0	1599768822	12.387683
24444750	We did look and learn; a lot of crat	We did look and learn; a lot of crates.io was informed by several of us having experience with CPAN, RubyGems, and npm. Both the good and the bad.And also by the experience of going through GitHub hosting a RubyGems server and all the fallout that happened there.	steveklabnik	12.470116	-6.862072	comment	3.0	24.0	1599843546	12.37036
24462971	Any experience embedding deno in a c	Any experience embedding deno in a c++ application? I absolutely lovehow seamlessly lua integrates into my code, but I just find the language itself absolutely unpleasant to work with.	crocodiletears	12.487518	-6.4614496	comment	3.0	10.0	1600022689	-10.937741
24483563	I think we can do better than Java, 	I think we can do better than Java, Scala and Kotlin. All of these ended up to be piles of abstractions and complexity. Scala went too hardcore for somebody that just wants to deliver. Kotlin gives you anxiety everytime they push for supporting a new platform. Java, though it is still nice, has accumulated too much cruft during the years. I wish for a Go-like language on the JVM. A modern language that offers you a minimum number of features from which you can build upon. Moreover, lower, well-thought out abstractions would give a boost in perfomance with the new garbage collectors that have been added in the JVM. I can imagine  Clojure is something that I would like to try again sometimes, but the fact that it is a LISP and lacks even simple types make it less attractive to the majority o	johnnycerberus	12.371915	-7.6787367	comment	3.0	19.0	1600189180	-11.262904
24501798	Ask HN: Anyone still doing monolithi	Ask HN: Anyone still doing monolithic Django?	fruiapps	12.703587	-6.4619336	story	3.0	2.0	1600324409	9.979013
24504370	My experience is that preparing a re	My experience is that preparing a release is much more straightforward since Elixir 1.9, which added release support to the Elixir standard distribution. That said I tend to treat a release as a black box, I haven't tried to understand what all those files are and I just interact with bin/myapp.However I still have two complaints.First, the system on which the release is built and the system where it's going to run need to be similar (same version of the same Linux distribution). In practice this means that these days we build releases in containers matching the target host.Second, releases can't run mix commands so we have to write boilerplate code specifically for releases for things like database migrations, etc. It would be nice if writing app management commands could be a bit more DR	rhizome31	12.707241	-7.4464874	comment	3.0	12.0	1600349540	12.938123
24504568	First, answers to your questions, an	First, answers to your questions, and then a general addressing of your idea:1. Having an “entrypoint to your application” isn’t the right way to think about an Erlang release.An Erlang release is like a virtual appliance: an OS (ERTS) with a set of “service” packages installed in it (your apps and libraries.)And, just like when assembling a VM instance using Terraform or the like, you can set up/install multiple root-level applications/services within that VM. Like, say, a LAMP stack. Different root-level services, none installed as a dependency of the other; all just running as siblings and configured to talk to one-another; all in one VM image. The VM image, so-composed, would be a “release” of a single networked system component. Not a single service, but a single set of services, depl	derefr	12.573584	-7.522532	comment	3.0	12.0	1600350603	12.90154
24506078	we are actually doing precisely the 	"we are actually doing precisely the same thing at instacart (breaking our 1+ million lines of code monolith into discrete components, which we call ""domains""), and typing the boundaries and as much of the internals of these domains as possible with sorbet types.this has the benefit of ruby dynamicism (fast development within domains, you can use all the nice railsy tooling, activerecord, and all the libraries we've built over the years), with type safety at the boundaries (we've also put in timeouts, thread separation, and error handling at the boundaries).the additional benefit for using sorbet is that it makes making typed RPC calls (over twirp or graphql) much easier as you can introspect the boundaries trivially.really cool to see other companies evolving similarly given the same start"	octernion	12.523078	-7.118339	comment	3.0	19.0	1600357680	12.369854
24506266	A number of years ago, I worked on a	A number of years ago, I worked on a team (~20 engineers in total) that successfully carved off two relatively independent portions of a large Rails app using engines. I'm happy to see that Shopify is also using that strategy.I'm curious to know more what sorts of challenges they have around managing dependencies across engines — I think what we were doing was fairly vanilla Rails, and we didn't have the opportunity to run into those sorts of issues.	straws	12.759819	-6.9134154	comment	3.0	17.0	1600358404	12.339737
24506358	Slightly off topic, but does anyone 	"Slightly off topic, but does anyone know if this ""component based"" development is what umbrella applications are in Elixir?"	dragosmocrii	12.681258	-7.441452	comment	3.0	12.0	1600358813	12.943399
24506796	2.8 million lines , 100 billion busi	2.8 million lines , 100 billion business. Rails can scale.	joelbluminator	12.752381	-6.926154	comment	3.0	21.0	1600360741	12.399692
24508768	Yep, that's a good trick. At a previ	Yep, that's a good trick. At a previous PHP shop we had a large amount of static XML configuration (well it was generated, but not that often).  Converting it all to PHP arrays and including it was significantly faster than parsing the XML on each request, and then PHP would cache that result too. Re-running the XML->PHP tool just caused it to re-include/cache these giant arrays of static config.  It worked great.  I mean, arguments about whether that was a good design or not aside...(edit to reply since I can't reply to a reply to a reply)Yep, it is very common in lisp/smalltalk environments to dump the state of the world to disk and re-load it later.  This is one of those tricks that gets relearned every generation. :)For bonus credit apply this analogy to docker images. :)	owyn	12.734345	-6.638687	comment	3.0	10.0	1600370341	10.324285
24512083	I've been doing Rails development fo	"I've been doing Rails development for a decade.  Concerns are probably the biggest code smell/anti-pattern I've ever seen in any application.  It's used as a bandaid to ""break up"" classes which do too much (but you really don't, you're just hiding the complexity), or it's way over done and everything is magic and almost incomprehensible and unmaintainable.  Overall, just a total nightmare to deal with.  Would not recommend, and I always try to steer people away from using concers during code reviews."	rubyist5eva	12.78202	-6.9824004	comment	3.0	28.0	1600393454	12.365509
24512333	What's the alternative to sharing lo	What's the alternative to sharing logic across ActiveRecord models?	Axsuul	13.083225	-6.4848857	comment	3.0	25.0	1600396119	12.233518
24537456	I use typescript a lot. It's way bet	I use typescript a lot. It's way better than JS but the type erasure problem is far worse than Java. Essentially all types are erased, so bugs where typings don't match what you expect and everything blows up are common. This isn't possible in Java because it's statically typed at runtime.JS also uses several times more memory, is slower, and has a terrible (non existing) threading model. Yes you can run multiple instance of node or whatever, but sharing objects between them requires message passing which is orders of magnitude slower.Until JS has a good threading model I'm never using it for backend. It's too expensive to use a bunch of single core machines to make up for it.All of our devs use Typescript and Java daily for front and backend, the only overhead is making sure objects were 	throwaway189262	12.392404	-6.5197034	comment	3.0	13.0	1600636391	-10.418607
24541183	I am under 30. I find it very frustr	I am under 30. I find it very frustrating and unfair to see older programmers being displaced or misstreated because 1) I need to squeeze out every damn ounce of wisdom these people have in order to accelerate my own progress and 2) one day I'll be in their place. I want them to be treated the same way I will be treated.I have a real life example of the five monkeys story. A company I used to work for had a pile of legacy systems in php4, mysql 5.0 and a frontend working only on IE8, no ci/cd, no tests. Almost instantly I was lead to beleive this system is a black hole that can't be saved due to the technical difficulties plus management issues. The head of IT was there for almost 20 years watching tons of developers contribute to this mess and failing to take meaningful action to address 	gtsop	12.792816	-6.587134	comment	3.0	83.0	1600678426	10.313638
24541764	I am all for your love of Rails, but	I am all for your love of Rails, but tools should not be picked based on how much you love them. Choose the correct tool for the job, if it is rails, good for you.	codegladiator	12.769811	-6.9137626	comment	3.0	14.0	1600684321	3.3717723
24571423	Enforcing Modularity in Rails Apps w	Enforcing Modularity in Rails Apps with Packwerk	flavorjones	12.739272	-6.929417	story	3.0	105.0	1600891982	12.354495
24588502	as far as I understand, PHP web appl	as far as I understand, PHP web applications don't benefit from a JIT that much. Each request is like running the entire application from scratch, which is why the opcache can help so much.	elktea	12.718148	-6.617692	comment	3.0	13.0	1601030904	-8.999967
24588511	Truffle is an integration layer for 	Truffle is an integration layer for interpreted languages in GraalVM. The canonical Truffle language included in the Graal distribution is GraalJS, a replacement for the now deprecated Nashorn JavaScript engine for the JVM. Similarly, TruffleRuby is an alternative to JRuby and GraalPython is an alternative to Jython. Neither of these Truffle implementations has gained traction and they will not until they fully implement the main frameworks for each ecosystem (Ruby on Rails and Django/NumPy respectively).The same will hold true for a Truffle implementation of PHP. It will need to support the C interface components like PDO database drivers and the Laravel web framework.The linked project was created as part of a graduate thesis and demonstrates the feasibility of GraalVM/Truffle as a perfo	sradman	12.460016	-6.717953	comment	3.0	11.0	1601031014	10.311264
24593842	I love Ruby and great to see Ruby lo	I love Ruby and great to see Ruby love on hacker news. Just curious on how popular it is in the hacker news community ?	shadykiller	12.6700735	-7.006697	comment	3.0	16.0	1601066152	12.36735
24593532	Reactor model. Nice. Very nice. So r	Reactor model. Nice. Very nice. So real ruby multithreading at last.Okay time to upgrade to latest rails and wait for the multithreaded rails release. :P	Justsignedup	12.694248	-6.9650397	comment	3.0	13.0	1601063913	12.332561
24595152	This is all great stuff. I’m rather 	This is all great stuff. I’m rather meh on RBS, mainly because separating types from code is less than ideal but I like the potential here.But the right hand assignment operator. What on earth. Nobody asked for that and nobody wants it. Why.	rco8786	12.429807	-7.109632	comment	3.0	11.0	1601077208	12.364232
24595905	The programs aren't doing the same t	The programs aren't doing the same things. The Ruby one seems to buffer the matches into a huge string then print. Don't know how different it would be but better to compare apples.	karmakaze	12.481509	-7.0213614	comment	3.0	10.0	1601086444	-10.950965
24596453	I left Ruby because the performance 	I left Ruby because the performance and security weren't improving and the community was slowly dying. I delved into Go before that got flooded with newbs, then looked at Crystal and Pony, before settling on Rust and Haskell for most things.	hexbinencoded	12.586386	-7.175069	comment	3.0	10.0	1601095061	12.331212
24596675	The thing that most annoyed me about	"The thing that most annoyed me about Rails (not Ruby) was that    users.size
    users.length
    users.count

are all valid, all useful, all have different meanings, are all present in plain Ruby but with different meanings, and contain absolutely no information about what they do.For reference, .length loads everything and gets the length of the collection, .count runs a SQL COUNT query, and .size uses length if the query has already been run and .count if it hasn't."	strken	12.693295	-6.9594517	comment	3.0	16.0	1601098361	-3.192054
24605705	Type hype is real. It almost seems l	Type hype is real. It almost seems like job-creation propaganda at this stage.When I judge things, I look at practical outcomes; and the fact is that I produce better software with more features within the same timeframe if I use JavaScript rather than TypeScript and the product in both cases is equally robust. This has been true for me both independently and as part of a team.With JS, I can write more code and more tests within the same amount of time and there is no drop in quality.I'm very surprised that nobody else seems to be experiencing the same thing. I've been back and forth many times between the two paradigms and for me it's clear as day.	jondubois	12.369891	-6.7908244	comment	3.0	10.0	1601203773	-10.465992
24612251	On TypeScript	On TypeScript	schwartzworld	12.374379	-6.851721	story	3.0	1.0	1601258958	-10.441969
24616160	Can't speak for the GP but my single	Can't speak for the GP but my single biggest complaint about TS is how it's basically a massive set of assumptions layered on top of JS. If the JS types at runtime don't align with your assumptions in TS, the whole house of cards can come crashing down.	Merad	12.3724165	-6.7484717	comment	3.0	21.0	1601298098	-10.385714
24615959	Could someone ELI5?Actually, I wrote	Could someone ELI5?Actually, I wrote a lot of code in TypeScript and I know my SQL but I have absolutely no idea what is going on here.	dandare	12.359133	-6.8605967	comment	3.0	15.0	1601296672	-10.446618
24623760	In ML, your value moos. It is inferr	In ML, your value moos. It is inferred to be a cow.In Ruby, your value moos. Could be a cow; might be a MooDuck. Do you really care?	samatman	12.518703	-7.044757	comment	3.0	12.0	1601347956	12.369531
24638503	the next release of Crystal will als	the next release of Crystal will also be 1.0 too.https://crystal-lang.org/	sdwisely	12.649384	-7.2697196	comment	3.0	15.0	1601472568	10.437676
24671838	As someone who occasionally hires te	As someone who occasionally hires technical people, I'm torn on this one.The process at my employer is that resumes are submitted via the web site, they get stored in a shared folder (each application gets a folder with all of their attachments plus whatever they entered into the form on the web site), and once the competition closes the people doing the hiring (usually a manager and a team lead) review them.When I review resumes, I spend about 30s per resume on my first pass through.  This is where I just visually scan the document for keywords.  For example, if I was hiring a Django developer (I'm not, this is contrived), I'd look for Django (obviously), but also for other Python web frameworks (e.g., Flask, Pylons, web2py), other big Python frameworks (e.g., SQLAlchemy), and other relat	Mister_Snuggles	12.797427	-6.5046787	comment	3.0	10.0	1601730835	10.076743
24689218	I was playing with Joy ( http://joyp	I was playing with Joy ( http://joypy.osdn.io/ ) and got nerd-sniped by Prolog and wound up messing around with Joy-in-Prolog ( https://git.sr.ht/~sforman/Thun/tree/master/source/thun.pl ) and, uh, it's really neat.Something about Conal Elliott's Compiling to Categories ( http://conal.net/papers/compiling-to-categories/ ) ...New paradigm...  hand wave...	carapace	13.13321	-7.2956004	comment	3.0	13.0	1601915317	-12.506165
24692561	Academically (And, to some extent, p	Academically (And, to some extent, practically speaking) Orleans Virtual actors aren't the same as Erlang (or Akka) actors.Major differences:- Normal actors are pretty flexible, can work in local or remote contexts. Orleans is probably best described as Sharded Actors, It's a 'guided' implementation of Actors compared to Erlang or Akka where you are given a toolkit and have to build out what you intend to do.- Orleans doesn't have any ordering guarantees. While this is not a firm requirement of the Actor model itself, both Erlang and Akka guarantee ordering between a given Sender-receiver pair (i.e. messages sent from A to C will be sent in order)- Akka and Erlang have the concept of Supervision. i.e. An actor may have a child, and if that child crashes, the (parent) is notified and may ch	to11mtm	12.332227	-7.5261707	comment	3.0	14.0	1601935540	12.834441
24693718	I really enjoy how TS is the same on	I really enjoy how TS is the same on server and client. The C# runtime is way richer, but I like the TS type system more. Not sure I’d want to use different platforms on backend/front end even if C# did server rendering like React.	dmitryminkovsky	12.44407	-6.657898	comment	3.0	12.0	1601944943	-10.441752
24692785	It was created by Microsoft Research	It was created by Microsoft Research and introduced the Virtual Actor Model as a novel approach to building a new generation of distributed systems for the Cloud era.Hmmm, getting a very strong Microsoft Enterprise Library vibe.The Microsoft Enterprise Library is a set of tools and programming libraries for the Microsoft .NET Framework. It provides APIs to facilitate proven practices in core areas of programming.Packed full of Best Practices and more Enterprisey than Kirk, it was inscrutable to me.Based on the novel Virtual Actor Design model, I assume Orleans is Design Patterns all the way down.	ourmandave	12.351677	-7.396374	comment	3.0	10.0	1601937143	12.790434
24702004	Speaking for myseld, rebinding varia	Speaking for myseld, rebinding variables in Elixir is my least favorite part of the language, and I specifically avoid using the feature.	PopeDotNinja	12.620636	-7.455679	comment	3.0	15.0	1602016131	12.924705
24704702	Been a little while since posting on	Been a little while since posting one of my own pieces on here, but have been hoping to get some discussion going about these new techniques that are popping up inspired by Elixir Phoenix's LiveView. Freshness in a field that has been pretty stagnant lately (server-based web apps).Since writing the blog post I found out that there's another competing framework that might realize the design goals I'm describing in succint, self-contained fashion:https://github.com/unabridged/motion	obiefernandez	12.870807	-6.783298	comment	3.0	24.0	1602037325	12.706829
24706567	Developing with Squeak on a Cellphon	Developing with Squeak on a Cellphone	tonyg	12.326769	-7.2981334	story	3.0	42.0	1602063074	7.0171485
24714322	What You Always Wanted to Know About	What You Always Wanted to Know About Datalog (2018) [pdf]	simonpure	13.182644	-7.0085125	story	3.0	62.0	1602115981	5.754324
24742756	Deno does away with most of the tool	Deno does away with most of the tooling configuration. You get linter, bundler, docs generator, formatter, watcher, version manager, std library, inbuilt tests, and many things that you would otherwise source from third parties in node ecosystem.Support for webgpu and local storage incoming. Makes it a delight to write scripts. You can also scope them by permission.https://deno.land/Great community: https://discord.gg/deno	searchableguy	12.465526	-6.442165	comment	3.0	12.0	1602373509	-10.920349
38597971	Isn't this basically PHP, but in go?	Isn't this basically PHP, but in go? Or am I missing something?	20after4	12.690475	-6.704682	comment	3.0	14.0	1702273202	10.2951145
38649831	What would you recommend instead? Pe	What would you recommend instead? Personally, I think Typescript makes a great config language	bbkane	12.363955	-6.7595463	comment	3.0	13.0	1702602698	-10.431432
38651502	Why not just plain JS or TypeScript?	Why not just plain JS or TypeScript?	mati365	12.362751	-6.717372	comment	3.0	14.0	1702620766	-10.420307
38662893	Well the approach we use (and has be	Well the approach we use (and has been used at MS research before gpt was a thing) is to ask the llm to provide guesses for instructions to get to a (sub) solution and then let ips (in prolog in our case) do the rest. It seems to work for what we are doing.Disclaimer: did my dissertation on ips (with genetic programming), but in the 90s when we basically had no computer power. The results were horrible outside trivialities, now they aren't anymore.	anonzzzies	13.15908	-7.292134	comment	3.0	14.0	1702717615	-12.482992
38687229	Yeah, our last benchmark was with 3.	Yeah, our last benchmark was with 3.1.2 + YJIT, but we actually saw a regression in term of performance while RAM usage was indeed up: https://serpapi.com/blog/benchmarking-ruby-3-1-yjit-ruby-2-7...	hartator	12.650409	-7.0422807	comment	3.0	11.0	1702928795	12.394509
38689370	Maybe this is just my experience, bu	Maybe this is just my experience, but the thing that sucks a lot about programming to me it that the most enjoyable programming languages are often the ones with the smallest job market.My job as a programmer would be infinitely better if I could spend it programming Elixir all day, but there is basically no Elixir jobs compared to Typescript, Python, and Java.But instead I hate my job working in Typescript all day solving problems that I wouldn't have to if I could just use Elixir.Ruby use to an exception to this, but almost no one is building on Rails anymore compared to how many people build on React, and NextJS.I'm talking about full stack application market, this is probably different for Rust users for systems, and Python for Data/AI.	impulser_	12.58425	-7.3740883	comment	3.0	11.0	1702938893	12.815654
38689522	I love the syntax of Ruby blocks (IM	I love the syntax of Ruby blocks (IMO it's the best syntax for higher-order functions in any language) but I don't understand why they were implemented the way they are, where some things are blocks, some things are procs, and neither one is really a function. I would prefer if Ruby blocks were just functions.	MichaelDickens	12.438756	-7.1268454	comment	3.0	11.0	1702939809	12.376047
38691306	It does, but at this point it’s like	It does, but at this point it’s like saying that JavaScript is DOM even though you can use it outside a web browser. Or it’s like blaming Python for TensorFlow. Like, yes, Rails is a use case for Ruby, and a popular one, but not the only one.	lstamour	12.696744	-6.9171176	comment	3.0	11.0	1702955197	12.349458
38695411	Hello everyone. I'm Elise, the autho	Hello everyone. I'm Elise, the author of the post. This is just wild. I mostly write for myself and never imagined I'd make it onto Hacker News.I think an overlooked part of my point in this post is that the language felt intuitive to me from the beginning. It really matches the way my brain was already thinking about code. Think in messages, focus on small objects and what messages they can receive. There's a lot of comments about not understanding Ruby or finding it hard to maintain, but we're all different. I know people who feel the same way I do, but about Javascript, or Kotlin, or even Objective-C(which I find impossible to follow).I get that Ruby isn't everyone's cup of tea, but for me it's pure joy. And when I'm working with other Rubyists, it feels like we're flying along effortle	eliseshaffer	12.528792	-7.074877	comment	3.0	12.0	1702993407	12.37541
38694135	Indeed, the live interactivity of Ru	Indeed, the live interactivity of Ruby is it's strongest asset, and the best part of it's Smalltalk legacy. I think it's the thing non-Ruby devs understand the least. For instance in good Rails apps, your models don't just serve as the business layer of your web forms, background jobs and rake tasks-- they serve as the interface for developers and operations folks too. The ability to get directly into the machinery to inspect and command the state of your systems is super powerful, and as a result, very little work is put into higher level ops tooling like it might be in more opaque systems.This is true in the dev space too. In dev, you can just set breakpoints by inserting a pry/byebug call and the debugger is just part of the application at runtime. Can you do it in a sufficient Ruby IDE	rezonant	12.596488	-7.0098867	comment	3.0	11.0	1702983564	12.327994
38708926	Gov.uk Conventions for Rails Applica	Gov.uk Conventions for Rails Applications	rmhsilva	12.764146	-6.930561	story	3.0	35.0	1703081815	12.363995
38751548	To Ruby’s credit, they foresaw what 	To Ruby’s credit, they foresaw what others bolted on years if not decades after.Remember Python didn’t start with being fully object oriented, everything is not exactly an object, they bolted on the useful functional stuff later (like every language has now after a weird period of people crapping on FP for some reason) and to top it off bundler, and Ruby version manager again were just largely copied over to Python as pip and venv. I like both languages, and I say this after getting schooled a few times about great things I thought Python did that I was a few times rather embarrassingly shown to have just been Ruby ideas picked up by others.I’ll give you the language looks a bit funny and I’m not saying it’s better or anything, I work in Ruby and am all too aware of the warts. Just trying 	oglop	12.490813	-7.028406	comment	3.0	13.0	1703398346	12.380245
38751580	I wouldn’t be so harsh, as to call i	I wouldn’t be so harsh, as to call it gross, but I also much prefer Python, because Ruby reminds me of Perl. It feels clever, but not in a way that I expect to shorten its BNF. It still bugs me a bit, that ruby has pascals ‘end’, and Python uses whitespace, but it worked out in the real world.Given just the syntax, I would always recommend Python as a first language to scientists in a lab, rather than ruby. The code just reads and writes itself better, without special characters.But, I think it’s not fair to call Ruby gross, given some people love C++, php, bash, JavaScript… I’d take ruby over many languages, given a choice.	Demiurge	12.513214	-7.0418296	comment	3.0	24.0	1703399101	12.384839
38751647	From my perspective (DevOps/SRE) Rub	"From my perspective (DevOps/SRE) Ruby is a horrible platform. It is heavy on resources, it is difficult to run (Unicorn is a pain), maintain, monitor, debug. Many Ruby projects has silently failed (Chef? Puppet?) and the biggest Ruby tool in DevOps world which is Gitlab is incredibly difficult to run on premise and struggles with a ton of issues that I believe are caused by the platform.
If I had a choice, I would never work on a ruby project."	ArtemZ	12.675755	-6.983377	comment	3.0	19.0	1703400016	12.344333
38760586	I think Ruby 3.3 is perhaps one of t	I think Ruby 3.3 is perhaps one of the most important and feature rich Ruby release in the past 10 years. I never thought Ruby would have a shipping and production ready JIT before Python. And Prism, Lrama, IRB. A lot of these were discussed in previous HN submissions.But one thing that is not mentioned or discussed enough, is Ractor, M:N thread scheduler, Fibre and Async. Especially in the context of Rails. I am wondering if any one are using these features in productions and if you could share any thoughts on the subject.	ksec	12.576897	-7.0124946	comment	3.0	43.0	1703489645	12.329799
38760778	I mean, only because it's possible t	I mean, only because it's possible to learn to live with doesn't make it pleasant. Especially for managing large projects it can get unwieldy. Most high level languages I can think of have moved away from this approach.I used to be a huge Ruby fan but having exposure to Python where this isn't an issue, life is just easier.	hetman	12.530693	-7.04729	comment	3.0	10.0	1703491795	12.380294
38761902	> I seriously don’t think it’s worth	> I seriously don’t think it’s worth comparing Ruby to languages like C++ and the rest.It is worth comparing any two languages and ecosystems if they are used for the same things, in this case -- web backends.Anything and everything that has a web backend is a fair game for comparison.	pdimitar	12.6206455	-7.027246	comment	3.0	46.0	1703505592	12.346087
38762965	I worked with ruby, ruby in rails(Ro	I worked with ruby, ruby in rails(RoR) more specifically, a bit more than ten years ago(2011-2013). At that time it was already the afterglow of RoR, the framework for web development that had come to life in 2005 and raged between 2007 and 2009. The latest-technology-addicted crowd was jumping into the boat of node.js, that was crazy fast compared to anything done RoR, and API oriented development with angularjs. In 2013 RoR already showed its age as the standard ways of doing things with it was still the monolithic way and the framework was not transitioning very well to the new paradigm of frontend/backend development.This introduction about a framework built with ruby and not ruby itself was necessary because even today, I would guess that 95% of all development with ruby is RoR applic	lp4vn	12.669432	-6.9673424	comment	3.0	20.0	1703515537	12.357801
38764164	Can you dumb this down to ELI16 for 	Can you dumb this down to ELI16 for me? I'm intrigued but am not following.	okdood64	12.680058	-7.4373164	comment	3.0	11.0	1703523798	12.923829
38764027	Ruby and Ruby on Rails are not in a 	Ruby and Ruby on Rails are not in a downward trend. There were maybe some year where the interest was decreased but in the last 2 years a lot of things happened: Ruby has a lot new features, Rails 7 is out and comes with a new approach to web apps like for example Horwire with the just released Turbo 8.And there is a lot more: new conferences, new books and new gems.(Shameless plug: I curate a newsletter called Short Ruby that covers news from Ruby world every week).Maybe Ruby is not at the level where is was in 2007-2009 but it is also NOT in a downward trend.	gls2ro	12.715105	-6.98323	comment	3.0	15.0	1703522982	12.378112
38766263	Rails is no more productive than go,	Rails is no more productive than go, and a developer taking 20 extra minutes (frankly, not likely, even if we’re talking rust) to write go rather than Ruby is not going to cost more than the $1000 a month the extra Ruby servers cost you just to run.“But but but developer productivity” is a myth.	wredue	12.622935	-7.079553	comment	3.0	12.0	1703539476	12.292607
38770537	Not denying it, I just struggle to f	Not denying it, I just struggle to find any non-RoR usage of Ruby out there except maybe for Homebrew.	pdimitar	12.678156	-6.9821677	comment	3.0	12.0	1703586986	12.37085
38794496	The simple answer: supervision trees	"The simple answer: supervision trees. And fault-tolerance usually means that the failing process would be restarted. It would not handle stuff like netsplits or node going down though.Check code of cowboy, ejabberd, MongooseIM, RabbitMQ for examples.
There are many factors on decision when to make a new process. Data locality, the pattern of interaction with other processes, performance considerations.
Good idea is to have one process per TCP connection, but not one process per each routed message. And be careful with blocking gen_server calls - these could block or fail."	octacat	12.474193	-7.451977	comment	3.0	11.0	1703778132	12.863139
38805815	I'm still partial to LearnXinYMinute	I'm still partial to LearnXinYMinutes[0]. It's how I learned enough MatLab/Octave in a couple hours to test out of an intro CS course.Usually I just use that site in addition to the official tutorial when a concept really stumps me.Here's their article on Elixir[1][0]: https://learnxinyminutes.com[1]: https://learnxinyminutes.com/docs/elixir/	cobertos	12.693956	-7.4291577	comment	3.0	12.0	1703863005	12.941298
38810974	The internet is made of tubes. And t	The internet is made of tubes. And tubes are made of circles.2024 is the year of PHP.	AlienRobot	12.7823	-6.625179	comment	3.0	10.0	1703888722	10.329211
38839820	That's great; Haml is one thing I li	"That's great; Haml is one thing I like most when doing web development on Ruby/Rails. The only thing I don't like about this implementation is the blocks with inline code:    - if user != nil {
     %strong The user exists
    - }"	ceritium	12.520008	-7.0462117	comment	3.0	10.0	1704188281	12.388373
38893383	what is ERG?[edit] ok this is news t	"what is ERG?[edit] ok this is news to me  
So what are Employee Resource Groups (ERGs)?Employee Resource Groups are voluntary, employee-led groups whose aim is to foster a diverse, inclusive workplace aligned with the organizations they serve."	plexman	12.555016	-7.50532	comment	3.0	12.0	1704562856	-9.031898
38903276	The Erlang Ecosystem (2018) [video]	The Erlang Ecosystem (2018) [video]	rramadass	12.565372	-7.520975	story	3.0	86.0	1704649536	12.909888
31776197	Adopting Erlang: Hard things to get 	Adopting Erlang: Hard things to get right (2019)	eproxus	12.568516	-7.5229034	story	3.0	98.0	1655461243	12.94669
31828031	I changed my view on this―I hated ho	I changed my view on this―I hated how things were going full circle. But in reality, human civilization loves overdoing a particular direction and then reverts to the mean. You see this with the economy, moral fashions, everything.I am an optimist in that I (have started to) believe that this slowly allows us to converge on better solutions for everything.PHP was easy to set up, easy to host, easy to understand and easy to build stuff with, but it resulted in an unmaintainable mess over the long run.Then Node was all of that, but JS was a better language than PHP. Then Node grew warts in the form of the clutter that is npm, then it grew complex build systems and unstable libraries.Now there's Deno. It uses TypeScript by default, which is a surprisingly useful and productive language, it re	thegeomaster	12.642322	-6.5255632	comment	3.0	17.0	1655839466	10.29447
31849320	Ruby 3 adds Scheduler Interface for 	Ruby 3 adds Scheduler Interface for Fibers	ksec	12.569808	-7.0172977	story	3.0	85.0	1655993246	12.304226
31852520	I've seen a few large Rails codebase	"I've seen a few large Rails codebases that included a state machine library like mentioned in the article. Every single one was worse because of it. It pushes the code down a path where hidden hooks run when magic methods are called. At this point in my career I'm just done with that type of ""clever"" code.The article starts with examples that just define the state machine by hand. This is a much better approach and scales to larger code much better. You can grep ""def start!"" and just read what the method does. A state machine DSL is really not providing much value and eventually just gets in the way."	jeremycw	12.345861	-6.7566595	comment	3.0	13.0	1656005792	8.829707
31852527	Counterpoint:  State machines in Rub	Counterpoint:  State machines in Ruby should be used sparingly, and only when necessary, because they start out quick and easy, but almost always grow into things that are big, ugly, and difficult to refactor or remove.Here are somebody's notes from a Railsconf talk that made this point, plus a link to the video:https://gist.github.com/benoittgt/05521e272e13c7b7c9c89eb4a9...But the short version is the takeaway quote:> State machines are magnetic : they attract more states, transitions, events, callbacks and they accumulate callback logic where our bugs hide	knodi123	12.446778	-6.846668	comment	3.0	14.0	1656005811	12.299354
31857071	I used to build everything with one 	"I used to build everything with one giant “monoapp” and completely ignore that aspect of Django, which worked pretty well. Eventually though you need to split up your models into multiple files, and then your views, and admin, and so on, and it turns out there’s a lot of benefits of just segregating things into “apps” from the beginning. The only real downside I’ve noticed in practice is the omni-file-search feature in my IDE is harder to use, because you now have 7 “models.py” and it’s a bit harder to quickly navigate to the right one. If you split up files without using apps (just normal Python imports), you don't have the same problem with all the names being duplicated.The pitch that you can ""reuse"" apps across projects always seemed weird to me, because that's basically never somethin"	nojs	12.84768	-6.51308	comment	3.0	14.0	1656035725	10.06858
31872739	Crystal's Interpreter (2021)	Crystal's Interpreter (2021)	philonoist	12.611737	-7.2575126	story	3.0	93.0	1656133226	-11.206538
31900616	What about stuff like Phoenix LiveVi	What about stuff like Phoenix LiveView, which can push dozens of updates per second per client to hundreds of clients simultaneously?	TylerE	12.90038	-6.814162	comment	3.0	24.0	1656363060	12.699867
31901816	I believe that typescript type syste	I believe that typescript type system is so flexible, powerful and complex just because it had to be adapted and built around the shortcomings and limitation of javascript. It makes no sense to have something like it if you build a language from the ground up (or if you could just scrap backward compatibility in a bad designed one)	yulaow	12.34755	-6.807267	comment	3.0	10.0	1656369425	-10.441906
31908302	I really like the idea of Deno and F	"I really like the idea of Deno and Fresh's philosophy also resonates with me (I'm a Rails guy). I would like to see an integrated ORM (can be an existing one) and testing framework though, before I would consider it a ""full-stack"" web framework."	shafyy	12.679591	-6.5236673	comment	3.0	16.0	1656427280	12.270172
31908574	Is there any company that is hiring 	Is there any company that is hiring that uses fresh or deno in production?	colesantiago	12.511537	-6.4453197	comment	3.0	14.0	1656428341	-10.993345
31959819	I switched from pandas to polars[0] 	"I switched from pandas to polars[0]  . I'm happy with the performance gain. You still need to use Spark/dask on ""big"" data, but polars give you more room before reaching to these solutions.[0] -- https://www.pola.rs/"	wdroz	12.365629	-6.53673	comment	3.0	21.0	1656775565	10.099387
31970647	I'm a sceptic to the claims; most bu	I'm a sceptic to the claims; most build speedups I've seen come from the bypass of Typescript type checking/compiler errors. Since there is no other competetive compiler to Typescript than the official (and slow) tsc, I think vite works this way too? Getting hot reload and fast page refreshes is nice, but the idea is that if I get a compiler error, I ought to fix it first before I move to the browser to test my code.	littlecranky67	12.349069	-6.7238364	comment	3.0	11.0	1656879388	-10.425364
31980150	> We do not make the (unwarranted) a	> We do not make the (unwarranted) assumption that this transformation can or should be expressed as a pure function. While that would be nice, there are many reasons why this is not a good idea, some pretty obvious.So obvious they are left as an exercise for the reader?This whole article seems to be based on the idea that pure functional programming is absurd and impossible, and this is just obvious and doesn't need to be shown. For someone who has written a decent amount of Elm, it certainly isn't obvious to me.	Latty	12.891124	-7.6564226	comment	3.0	11.0	1656958361	-12.752022
31990946	OpenSSH has already chosen NTRU-Prim	OpenSSH has already chosen NTRU-Prime. Will there be a retrofit of CRYSTALS-KYBER? Or has the market already chosen?DJB is an author on the SPHINCS+ team; glad to see that his work will be part of the standard.https://sphincs.org/	chasil	12.649294	-7.2506294	comment	3.0	27.0	1657041362	-11.184326
31991918	CRYSTALS-Kyber and CRYSTALS-Dilithiu	CRYSTALS-Kyber and CRYSTALS-Dilithium are references to star wars and star trek FYI to those who didn't know.	matt321	12.629317	-7.2498817	comment	3.0	13.0	1657045776	-11.1566305
31992175	It sometimes feel like me learning P	It sometimes feel like me learning Prolog completely ruined me for SQL. Doing even simple things seems ridiculously hard with SQL.	ginko	13.166701	-7.2604957	comment	3.0	26.0	1657046985	-12.482096
31992528	For me it is the other way around.Pr	"For me it is the other way around.Prolog allows effects on its database while executing the ""query"" - you can add or remove facts from database. SQL prohibits that, separating queries and data manipulation statements.And, of course there are things like list comprehension in Haskell and other languages which are more or less the same as SQL but definitely more succinct."	thesz	13.156628	-7.2572203	comment	3.0	20.0	1657048828	-12.522378
32005631	yet ruby on rails and ruby is in dec	yet ruby on rails and ruby is in decline. its getting harder to hire younger developers in this field, many don't even know what Ruby is or cares for it.Seems like its another PHP type of situation, one which companies will move away from in the coming years. Not the fault of the ecosystem or language but simply because it gets expensive and the talent pool shrinks, not a good driver for business decision makers to back.edit: i really dont understand the downvotes here I am simply mentioning the changing requirements in many companies that used to be on RoR that cannot find enough senior developers with the budget they are used to, to the point that they are moving to a new platform. theres just not enough RoR jobs and not enough RoR senior devs in the marketplace today and it will be far 	ezekiel11	12.705829	-6.9648175	comment	3.0	34.0	1657135689	12.363775
32005967	I actually think it's both.The langu	I actually think it's both.The language: Tech companies are becoming more aware of the dangers posed by maintaining and updating large codebases written in an untyped language. I know there's a lot of work still being done in Rubyland on this problem but it feels like the horse left the barn long ago. A lot of Rubyists seem aesthetically opposed to types, including influential language stewards. Sorbet is arguably the Typescript of Rubyland, but it doesn't feel like it's taking off to nearly the same degree. (My theory is that the expressiveness required to support a language as flexible as Ruby results in poor developer ergonomics in terms of the necessary type annotations.)The ecosystem: Rails is still king, for better and for worse. Back when Rails was in its prime, there weren't as man	notpachet	12.567219	-7.06344	comment	3.0	23.0	1657137277	12.367295
32026902	Rails being slow is usually not some	Rails being slow is usually not something that the user can perceive.  Instead, it's just something that increases your operating costs (more servers).For most online businesses, the operating cost of servers is small relative to the costs of support, sales, marketing and R&D.So, yes rails is slower, but it usually isn't slow in a way that is much of a negative for the business.	andrewmutz	12.724748	-6.946998	comment	3.0	18.0	1657313581	12.322609
32026664	I disagree. It is much easier to mak	I disagree. It is much easier to make big changes, especially refactors, using a language such as TypeScript. The amount of `undefined method 'example_method' on NilClass` errors in Ruby on Rails projects is astounding. After working with a typed language on the backend, I am confident it is easier to more quickly ship correct code with a typed language, while Ruby on Rails makes it easier to quickly ship incorrect code.	EduardoBautista	12.5661	-7.039367	comment	3.0	14.0	1657312715	12.362744
32028782	Nothing wrong with using Ruby, but i	Nothing wrong with using Ruby, but if this is a justification build something that doesn't scale you're incredibly wrong and complacent. Scale creeps and when it creeps it quickly takes over. You should always build infrastructure with scalability in mind from day 1. If you're writing in Ruby it shouldn't matter if you container it, but what surrounds that application is what matters. It also matters if you build a monolith or not.	Sparkyte	12.703026	-6.9599867	comment	3.0	21.0	1657320760	12.340944
32034151	Ask HN: What Happened to CoffeeScrip	Ask HN: What Happened to CoffeeScript?	subset	12.432653	-6.5789313	story	3.0	6.0	1657367452	-10.564485
32102225	Erlang has had hotloading for a long	Erlang has had hotloading for a long time and seems to be fine security wise AFAIK.	dmix	12.554367	-7.523506	comment	3.0	10.0	1657838247	-3.3957727
32116242	It really doesn't... After years usi	It really doesn't... After years using Ruby my mind never managed to parse its complicated grammar.	batiste	12.4938	-7.0633492	comment	3.0	30.0	1657960926	12.384249
32116540	I've used both. I slightly prefer py	"I've used both. I slightly prefer python over ruby. But I haven't used either recently.Ruby's strength is internal DSLs. Python's strength is that it's simple to pick up for people. There's a large community of people that are not primarily programmers that use it. The reason for this is that it is a very easy language to get started with.Both share the same problem: they are weakly typed scripting languages. Both have in common that type annotations have been retrofitted to the language. But it's an uncomfortable and awkward retrofit in both cases and their respective communities seem to regard using types as an optional and inconvenient thing. 
Ruby with types of course exists. E.g. Crystal is nice apparently. But I've not really seen that used in the wild.Python is enormously popular; r"	jillesvangurp	12.482658	-7.0474887	comment	3.0	10.0	1657965105	12.39146
32117027	In Ruby it’s “require” rather than “	In Ruby it’s “require” rather than “import.” But it would be more like “require bar; foo()”.However, Ruby does have auto-loading conventions. So you could define “module Baz{ module Bar { def foo end; } }” in “baz/bar.rb” from the root of your project. You should then be able to call “Baz::Bar::foo()” from any other file in your project structure without a “require” at all. This is not standard Ruby IIRC, but Rails and other frameworks use it.	86J8oyZv	12.4034395	-7.0154366	comment	3.0	10.0	1657970883	-9.013204
32116382	Or with numbered parameters (since r	Or with numbered parameters (since ruby 3.0)  list.each { work_on(_1) }	greenpeas	12.459414	-7.070745	comment	3.0	10.0	1657962825	12.364076
32117934	Agree Ruby code is super hard to und	Agree Ruby code is super hard to understand, this seems largely overlooked by the community	mountainriver	12.58088	-7.051887	comment	3.0	17.0	1657978669	12.396559
32118022	I am sure it will not bring you back	I am sure it will not bring you back :) but in case others might read this and have the same issue the solution is to config bundler to install the gems locally inside a project folder (I usually go for ./vendor/bundle) and the add that to .gitignoreThis way if you work with multiple projects each using different Ruby versions and different gem versions you don't keep to keep reinstall the gems whenever you switch the directory.	gls2ro	12.678507	-6.949294	comment	3.0	16.0	1657979124	-9.204804
32118033	(out of curiosity) What is hard to u	(out of curiosity) What is hard to understand about Ruby?	gls2ro	12.610434	-7.0439563	comment	3.0	10.0	1657979184	12.379343
32122966	For our liveview project, a lot of t	For our liveview project, a lot of the bugs we find are edge cases in the pattern match. We find the bug in appsignal, build another arity match and go on with our day. It's pretty cool.I've been working in Elixir exclusively since 2016. I do think a lot of the Let It Fail is just marketing from Elixir (and BEAM) but there is a lot of truth in it. In reality you will most definitely not write everything under an explicit supervisor. You will just see errors in function clause matches and add another arity.	sergiotapia	12.716646	-7.336368	comment	3.0	11.0	1658014871	12.881116
32123574	The article doesn’t seem to look at 	The article doesn’t seem to look at how resources are cleaned up when a BEAM process crashes. https://elixirforum.com/t/understanding-the-advantages-of-le... says “All resources are owned by a process in Erlang, and the VM guarantees clean-up of resources once the process dies”. My Google-fu failed me when I searched for more details about Erlang process cleanup of resources, or how to register cleanup actions (e.g. delete some temporary file on crash).	robocat	12.466746	-7.5018296	comment	3.0	10.0	1658021391	12.862553
32141863	Spring, hive, iis, and typescript ma	Spring, hive, iis, and typescript makes for a more solid stack	mirntyfirty	12.3300495	-6.5120697	comment	3.0	12.0	1658169947	7.052799
32157978	In rails you get these things for fr	In rails you get these things for free. What I don't get is why everyone rolls their own framework with node.js. It's basically 90s PHP all over again.EDIT: Soft delete is a trivial piece of code when the framework has a well defined transaction system for its ORM. It's not really related to Rails per se. Your statement is extremely disingenuous, while trying to look smart. Audit trails _can_ be(but don't have to be) more complex, especially when the framework uses a lot of stored procedures to handle operations. But other than that these frameworks are specifically designed to REDUCE complexity of such operations, dependency costs - which are huge in node.js, specifically because you can mix and match anything into everything.Node.js people tend to stitch together XSS solutions, random te	rjzzleep	12.749604	-6.889083	comment	3.0	18.0	1658264796	12.359754
32159563	Until metaprogramming, autoloading, 	Until metaprogramming, autoloading, DSLs and everything that eventually makes Ruby code unreadable takes place due to personal preferences.Ruby is clever, it can be beautiful, but I've never seen a good codebase using it grow well without enforcing strictly opinionated ways of writing it to ensure maintainability. Which breaks a lot of the expectations of some Ruby developers that chose the language because they like to write it in their own way.	piva00	12.585736	-7.042457	comment	3.0	10.0	1658275128	12.377158
32158626	I don't know why you're ragging on N	I don't know why you're ragging on Node.js users or even PHP for that matter as both ecosystems have this stuff covered too.Also you're comparing language/runtime with an actual framework and then dogging those users...If you want to compare Rails with Node/PHP then I'd suggest comparing with things like Laravel (PHP), Adonis (Node) and you'll find everything you can do in Rails is done in Node/PHP too.	joshmanders	12.738931	-6.805132	comment	3.0	14.0	1658268562	12.307477
32222459	Indeed, ROS set out to create an eco	Indeed, ROS set out to create an ecosystem of reusable robot software infrastructure, but a monoculture has grown instead.I started building a ROS alternative called Mech (see my profile) after becoming frustrated with ROS. It’s getting there but not ready for prime time yet.To answer the sibling comment, my biggest problem with ROS is how inscrutable it is for undergrads. I’ve witnessed students struggle to even install it while following directions step by step. It is a huge mess of incidental complexity, layering the complexity of C++ build systems on top of an IPC system on top of an expansive middleware.The learning curve is so high that when I spend a semester teaching robotics, students still struggle with ROS basics at midterms. The course turns into more about learning ROS rather 	cmontella	12.712142	-6.8494844	comment	3.0	14.0	1658743515	12.209684
32242897	Ask HN: is learning Elixir suitable 	Ask HN: is learning Elixir suitable for a kid who currently uses MIT’s Scratch?	ralmidani	12.682715	-7.4452715	story	3.0	3.0	1658864226	12.927178
32243748	nice article, I agree Deno is probab	nice article, I agree Deno is probably not going to win, especially after watching this pretentious talk [0]. I personally expect WASM based solutions to take market share from JS/TS by enabling any language to be used. Still a bit out in time I suspect, but the interest is definitely there on the user end.[0] https://www.youtube.com/watch?v=3NR9Spj0DmQ	verdverm	12.458719	-6.4414105	comment	3.0	14.0	1658868379	-10.893844
32255452	> Erlang because stability.Maybe bec	> Erlang because stability.Maybe because of WhatsApp acquisition ? Some services might still be running in Erlang. Last I heard, Erlang was being replaced by C++.> Haskell because elitism.Haxl used to be a project at FaceBook, not sure what Haskell is used for now there.Thoughts as an outsider. I dont work [neither have worked] at Meta.	reil_convnet	12.618885	-7.479242	comment	3.0	10.0	1658949900	12.945775
32258329	Show HN: TypeScript Editor that gene	Show HN: TypeScript Editor that generates structured forms from TypeScript types	fwouts	12.340502	-6.7977376	story	3.0	12.0	1658963825	-10.459576
32260303	For people used to working in TypeSc	For people used to working in TypeScript who suddenly find themselves having to work on a vanilla js app... and don't wanna use JSDoc?	culi	12.377659	-6.7227135	comment	3.0	18.0	1658980444	-10.439694
32262555	After some frustration with the Type	After some frustration with the TypeScript schema library ecosystem, I've decided that I'd prefer to declare my types using TypeScript's excellent type syntax, so I can take advantage of generics, mapped types, etc. Then, I'll take those TypeScript types and compile them to whatever alternative schema format I need.There are many libraries that claim to convert your Typescript types to other formats, such as ts-json-schema-generator, ts-to-zod, or typeconv/core-types-ts. These libraries work by interpreting the Typescript AST, essentially re-implementing a bare-bones type system from scratch. Most do not support advanced Typescript features like generic application, mapped types, or string literal types. So, what's the point? To avoid those limitations, I use Typescript's first-party ts.Ty	jitl	12.371726	-6.8004375	comment	3.0	12.0	1659003835	-10.420081
32279790	I am optimistic though. We are still	"I am optimistic though. We are still in the early days of server-side javascript. It took 20 years for the greater php community to coalesce around a handful of quality libraries, frameworks, and solutions to things like user management instead of everyone rolling their own or using things like '$_GET[""pass""] == ""foo""' they they grabbed from a google search. Node is barely over a decade old. We are already seeing patterns mature in the node ecosystem and I hope things keep progressing that way."	moojd	12.637802	-6.485455	comment	3.0	30.0	1659116365	10.323699
32280781	despite it's terrible APIs it was fa	despite it's terrible APIs it was fast and easy to setup and manage. Speaking from over a decade ago here.. My experience was good with PHP for simple web applications. However any form of concurrency can't easily be achieve with PHP, so that limits the types of applications you can build easily.Today, you'd be much better off picking up a language that provides concurrency primitives and has tools to build simple pages w/ a request/response flow.Just my $0.02	sigmonsays	12.7450075	-6.624911	comment	3.0	12.0	1659122502	10.31611
32288524	Interesting insight. I've never trie	Interesting insight. I've never tried to call Erlang libraries from Elixir, but I'm not sure I'd want to either :)	janetacarr	12.629127	-7.4847913	comment	3.0	11.0	1659201783	12.924148
32291232	T'was all fine until folks had to co	T'was all fine until folks had to come up with useless typescript and modules and webpack churn and Es2015+ bloat. It's not like we didn't warn them to turn JavaScript into Java; for some of us getting away from Java bloat was the entire point of node.js. Well that, and because CommonJS was portable, or used to be at least. If you want a typed language, just use one, rather than foobaring JavaScript or Python into something they just aren't, a fool's errand.	tannhaeuser	12.343109	-6.516994	comment	3.0	14.0	1659221963	-10.349231
32295603	Great timing! I've lately been study	Great timing! I've lately been studying up on Prolog and miniKanren, and increasingly I've been wishing that I had one or the other embedded in my usual programming languages. I believe there is already at least one miniKanren implementation in each of JS and Python, but it's cool to see this pop up.One thing I've wondered about with such systems as performance: I would be nervous about pathological cases leading to really bad performance or even DOS attacks. My understanding of Prolog in particular is that sometimes in order to get your program to run to completion requires a nontrivial understanding of the backtracking algorithm them so you can judiciously place cuts, etc.Inspired by Will Byrd's many presentation on quines, this leads me to wonder: what if you had a logic language that d	nerdponx	13.142735	-7.2900147	comment	3.0	10.0	1659276776	-12.470993
32303374	That's why any new open-source proje	That's why any new open-source project designed to be run in different environments should prefer Go over Ruby:https://news.ycombinator.com/item?id=31686536	krn	12.595057	-7.0146775	comment	3.0	13.0	1659342016	12.385443
32306624	Surely this is not shaving from the 	Surely this is not shaving from the build? It's shaving from the source. The build would never have 80MB of TypeScript types included.	afavour	12.360758	-6.7868576	comment	3.0	14.0	1659364876	-10.453922
32308469	Not the parent, but my interpretatio	"Not the parent, but my interpretation of ""my Typescript build"" would be the build output, not the input to the build process."	returningfory2	12.346726	-6.8151946	comment	3.0	10.0	1659371207	-10.4587145
32319862	I think Elixir/Erlang is uniquely po	I think Elixir/Erlang is uniquely positioned to get more traction in the inevitable microservice/kubernetes backlash and the return to single server deploys (with a hot backup).  Not only does it usually sip server resources but it also scales naturally as more cores/threads are available on a server.	dugmartin	12.619222	-7.465855	comment	3.0	10.0	1659454206	12.913738
32325589	I love PHP, it fits that niche of ha	I love PHP, it fits that niche of having a fast startup like Perl, while having  a big standard library like Python. However after using Go and Rust, I don't like the idea of the package manager being this separate thing (Composer).I think the package manager should be part of the PHP distribution itself, not some other thing that people have to find and install separately. I am fine if people want to implement other/better package managers, but I think the PHP distribution should include something, if only a rudimentary tool.	svnpenn	12.679955	-6.6150613	comment	3.0	21.0	1659482564	10.302679
32325659	Composer is the de facto package man	Composer is the de facto package manager for PHP. I’ve never seen anyone try to compete with it.I also don’t believe a bundled package manager is necessary — NPM isn’t bundled with JavaScript, and it seems to be doing ok.	muglug	12.653787	-6.5922527	comment	3.0	15.0	1659483069	10.306721
32326120	What cult? PHP is technically, objec	What cult? PHP is technically, objectively inferior to almost every other web technology (which is impressive, actually, given how terrible most web technology actually is) in almost every use case one can think of. That doesn't mean it's bad or that nobody should ever use it, or that it isn't a superior solution in some cases. But in basically any non-trivial use case, it's a poor choice.	sidlls	12.773523	-6.63906	comment	3.0	10.0	1659486068	10.397159
32326360	[I have no experience with Elixir.] 	[I have no experience with Elixir.] Would that be possible to have elixir intelligently manage multiprocessing of python scripts? I would be especially interested in being able to have the scripts talk to each other, but have no idea how it could work, besides perhaps having them communicate by writing to / reading from the same files, which seems risky.	dr_kiszonka	12.661493	-7.4433374	comment	3.0	11.0	1659488052	12.931604
32326912	Biggest flaw of php to me is getting	Biggest flaw of php to me is getting paid well and the number of jobs.From the stack overflow dev survey, php devs get paid much less than others.Laravel and php is a beast, super easy to use. All that annoying shit is setup for you. But, how many ppl hire Laravel devs? Job boards are stacked with react, vue etc. Personal use is great though.	langsoul-com	12.787129	-6.624717	comment	3.0	13.0	1659493474	10.336643
32330284	Eqwalizer: A Type-Checker for Erlang	Eqwalizer: A Type-Checker for Erlang	hasheddan	12.409824	-7.4746184	story	3.0	86.0	1659526252	-9.097007
32330283	Guess I best upgrade my production s	Guess I best upgrade my production side-project from Django 1.5.9	buro9	12.80168	-6.5477047	comment	3.0	14.0	1659526239	10.093437
32330339	> That seems to be using WSGI, not A	"> That seems to be using WSGI, not ASGI, though, so no natively `async` views..?One does not simply go async. Changing your entire app to go full async has serious implications, requires every library you use to support it and requires a completely different mode of thinking.The example project includes an ASGI file if you want to use an async app server like uvicorn with async views instead of gunicorn. That would involve changing a couple of lines of code. That's very much a ""per user"" decision and in my opinion shouldn't be the default for the project when 4.1 only landed a few hours ago. It's going to take a long time until apps are ready to go async by default, both from waiting on libraries to support it and the community to shift towards this style of building apps."	nickjj	12.473824	-6.6594586	comment	3.0	11.0	1659526653	9.919854
32347341	If you've got Typescript on front-en	If you've got Typescript on front-end and back-end then I'd recommend looking at tRPC. The schema is your types, which might often just be the type of your DB response, leading to low-code but fully type-safe coding.https://trpc.io/	vosper	12.472465	-6.673634	comment	3.0	13.0	1659641932	-10.458285
32382563	Trealla is one of the most interesti	Trealla is one of the most interesting new Prolog systems: Notably, as in other new systems such as Scryer and Tau Prolog and ichiban/prolog, the default setting of the Prolog flag double_quotes is chars, and therefore lists of characters can be conveniently written as  double-quoted strings in Prolog code. Second, as in Scryer Prolog, such lists are very compactly encoded internally, making Trealla suitable for analyzing and processing very large amounts of text conveniently and efficiently.In addition, file contents can be processed directly with Prolog's built-in grammar formalism, Definite Clause Grammars (DCGs): Internally, Trealla maps the file contents directly to memory with mmap(2), an innovation that is currently unique to Trealla!There is also a recent WASM embedding:https://git	triska	13.132855	-7.3019495	comment	3.0	20.0	1659935874	-12.489542
32386232	Not someone else's code but I had th	"Not someone else's code but I had the strange experience recently of revisiting an old project of mine (DNS server written in typescript + deno) and being intimidated by the quality of my own code.I had those familiar feelings of ""I could never write code like this"" or ""I'd never have thought to do it like that!"" or ""This person must really know their shit"".  Turns out it was me all along and I'd just forgotten I'd done it all.Grokking it and modifying it after 2-something years was actually simple as I'd left good comments, abstractions, and even reasonable unit test coverage (even integrated with GitHub actions that run on push) so changes were a breeze.There has to be a life lesson there somewhere."	mattlondon	12.3849745	-6.6627207	comment	3.0	11.0	1659970753	-10.460982
32402313	Imo Erlang's scalability benefits ar	Imo Erlang's scalability benefits are oversold. Unless you're a national carrier the performance of Java far outweighs Erlang's scalability. Instead, Erlang's undersold killer feature is its robust support for hot code reloading. It enables almost any part of the system to be upgraded without affecting running processes. Other languages and VMs can't do that because they optimize call frames differently and rely on mutable state. It's like building a new road on top of an existing one without impacting traffic. Almost magic and very important for always on services like emergency numbers.	bjourne	12.553531	-7.514299	comment	3.0	11.0	1660071335	12.912693
32409041	As for anecdotal evidence seen in a 	"As for anecdotal evidence seen in a consultancy function: You are wrong in assuming that companies always hire database experts or data scientists to write their db queries who know how to not make the db the bottleneck.
In reality you'll find developers who claim ""we can't use Ruby here because it's too slow!"" while they're unaware that the reason their page needs seconds to load is because of hilariously inefficient queries to the db."	suction	12.772466	-6.9073114	comment	3.0	12.0	1660118605	12.303185
32410397	I would summarize the article as:- R	I would summarize the article as:- Ruby would benefit from object shapes and JIT compiling- Good news, both of those are being added / improved- The jury is out about C extensionsI hope ruby has a renaissance in the next few years. People can and will howl about its performance, but it’s far faster than it was even a few years ago, let alone 10. The changes mentioned in the article, the async gem, and ractors are all exciting things that could push it even faster and unlock previously unavailable design patterns.Byte for byte, it’s one of the nicest languages (in my opinion of course), and for many use-cases Rails is like having developer superpowers.I hope renewed excitement leads to more investment from folks, because it’s honestly just such a nice, ergonomic ecosystem to use.	drewbug01	12.644532	-7.020988	comment	3.0	25.0	1660132240	12.389998
32410798	"Isn't Elixir a ""faster ruby""?"	"Isn't Elixir a ""faster ruby""?"	Dowwie	12.679765	-7.39683	comment	3.0	11.0	1660134548	12.8847275
32412503	Thanks for the anecdotal counterpoin	Thanks for the anecdotal counterpoint, that is what I was looking for!I think we're talking about different things though.I think OP was suggesting/questioning whether a typical Rails apps may spend 90% of it's overall time in I/O.I am suggesting the reverse, that typical Rails apps (so long as they don't have bugs where they fetch more than they need) will spend spend 60-80% of their time in CPU rather than I/O.I am curious if this is true of shoppify's app; my guess is it still would be (especially cause I think shopify will not have very many bugs where it's fetching things inefficiently or that it doesn't need to fetch, shopify will be higher-quality than a random rails app).You are suggesting, I think, that at shopify atypical, problem requests were always due to I/O.I think all of th	jrochkind1	12.764559	-6.902684	comment	3.0	10.0	1660141493	12.331067
32415957	I think the answer is Datalog. It is	I think the answer is Datalog. It is simple, simpler than SQL but powerful like Prolog. Why hasn't it caught on?	galaxyLogic	13.177315	-7.117592	comment	3.0	12.0	1660154088	-12.446184
32444945	I'd be willing to bet it's because s	I'd be willing to bet it's because some trader's tooling written 20 years ago broke after a format change so they successfully raised hell to make sure it would stay the same format forever. Probably perl.	chaps	12.341466	-6.987727	comment	3.0	10.0	1660344989	13.187356
32469203	This might sound odd, but: one thing	"This might sound odd, but: one thing I've wanted to do is use the Typescript compiler without using NPM.  (I'm not smart enough to know why I hate NPM.  I just want a tool that compiles TS.)It almost sounds like I could write a self-contained deno command-line ""app"" that does this.  Does that seem right (for those that know better)?"	timmg	12.469699	-6.475184	comment	3.0	21.0	1660569042	-10.886838
32469216	What you're looking for is ESBuild: 	"What you're looking for is ESBuild: https://esbuild.github.io/TS ""compilers"" basically strip out the type annotations, they don't care about the validity of the types, so you'll be missing out on the main reason to be using TypeScript."	ricardobeat	12.328371	-6.828405	comment	3.0	14.0	1660569114	-10.4254675
32485055	For the most part, I think there is 	For the most part, I think there is a lot of feature parity between the .NET and Ruby on Rails frameworks when it comes to developer tooling.As I grow older I guess I am growing more fond of statically typed languages. It's easier for my decaying/distracted brain to reason about. There is less mental overhead I suppose [might be a good blog post?]They both have a good database migration system and various generators for scaffolding views, controllers, etc. To be fair I believe Entity Framework does most of the work for the .NET side on the database developer tooling but I just consider it part of the .NET ecosystem since it seems to be the go-to ORM/database tooling library. I want to be fair to Rails -- I really think they set the bar very high for other frameworks. Productivity w/ Rails 	lovetocode	12.703784	-6.81771	comment	3.0	15.0	1660667206	12.255812
22008098	How do you recommend running it? The	How do you recommend running it? The install guide lists a half-dozen different possibilities including PHP, Node, Ruby which all look to be vastly different solutions.	whalesalad	12.731587	-6.643318	comment	3.0	13.0	1578626979	-4.9794893
22056671	Instead of focusing on what TS does 	Instead of focusing on what TS does not, focus on what it does.TypeScript is not sound; JavaScript isn’t either. The first one will catch some type errors, the second will catch none.Syntax highlighting, linting, testing, and now type checking: every step can make you more confident about the code you ship, before it even hits the browser.You can forgo using any help and probably you’ll code faster, but, again, you lose confidence.	why-oh-why	12.374725	-6.8220434	comment	3.0	27.0	1579111784	-10.457301
22059299	IIRC there are still many large comp	IIRC there are still many large companies using Ruby/Rails still, they've just also diversified their tech stacks (as larger companies tend to do).  AFAIK the list includes: GitHub (MS has a few Rails-based acquisitions now), Airbnb, Groupon, Square, Cookpad, Kickstarter, Hulu, etc..	noodle	12.73876	-6.943777	comment	3.0	16.0	1579126046	12.362954
22061012	"PHP is rarely considered ""old school"	"PHP is rarely considered ""old school."" It's considered bad. And not without reason given its history of hostility to its own developers and the sysadmins who have to manage it.I think pretty much everyone has acknowledged that it's improved. Where opinions differ is in how much it has improved and whether that's enough to entertain its use (my answers to which are ""not enough"" and ""not even if you paid me"", respectively)."	eropple	12.77502	-6.636654	comment	3.0	14.0	1579140118	10.344855
22068738	Are there any sensible ways to do th	Are there any sensible ways to do this with Django? Ideally with migrations to create and update the views.	j4mie	12.892139	-6.4592853	comment	3.0	10.0	1579207744	9.98971
22073662	This to me is what I really miss abo	This to me is what I really miss about Ruby on Rails being a more popular platform, way more than any of the metaprogramming magic or super-readable syntax. It made a ton of choices for you, which helped with productivity on teams more than anything else.If you had a new developer coming onto a Rails project, there's no need to ask how logging is done, where models and controllers were stored, what the naming convention of database tables were, how assets are compiled, where to find tests or how to run them, how to start your application, or probably a hundred other little tiny decisions.Sure, you have less control over things, but 90% of the time, that control doesn't matter, and you're making life more difficult for every other person who will ever read your code in the pursuit of what's	ryanbrunner	12.721954	-6.956134	comment	3.0	10.0	1579259138	12.362623
22083216	Asked for an HTTPS one liner on stac	"Asked for an HTTPS one liner on stackoverflow a while back and got this answer:    ruby -r webrick/https -e '
      WEBrick::HTTPServer.new(
        Port: 8000, DocumentRoot: ""."",
        SSLEnable: true, SSLCertName: [%w[CN localhost]]).start'

https://stackoverflow.com/a/37986354/59325"	scanr	12.600204	-6.8836684	comment	3.0	10.0	1579336710	12.355286
22090615	Honestly, I never could get into the	Honestly, I never could get into the Ruby language. I always kept making mistakes with the syntax and ended up gravitating towards python and relearning JavaScript	torgian	12.57201	-7.0155687	comment	3.0	10.0	1579429930	12.359617
22090804	I remember loving this when I learne	I remember loving this when I learned Ruby. There's a certain elegance to it.However, I'd say for practical purposes, it still leaves me with the problem that in my day to day coding I'm left with the same ambiguity. I don't know if I'm calling a simple-assignment auto-generated method that is setting a property, or a method that does all sorts of stuff under the hood.While I'm still fond of Ruby, I've come to prefer less ambiguity. I like to be able to see at the calling site whether what I'm doing is calling a method or setting a property, and parentheses are a great way to signal that.As an aside, one thing I didn't like about Elixir was that it also made parentheses optional. Once I realized why this was necessary, and once the formatter was added and enforced parentheses as a default,	mercer	12.429738	-7.1061916	comment	3.0	10.0	1579433035	12.404627
22091393	To add to this, dynamic typing is pr	To add to this, dynamic typing is proper tool to use for API, because the input payload is just formatted text, without / with very few type definition. My experience said that it's hard to play with JSON on static typing, without adding a strict data validation / conversion at the start. Serialization comes with a set of strict rules that need to follow and state beforehand too.The contrary, on dynamic typing language nested object as well as array can easily be parsed natively and be used immediately.	fendy3002	12.341717	-6.4896965	comment	3.0	11.0	1579441608	-8.980394
22091707	That would be a very jarring change.	That would be a very jarring change. Ruby class definitions are executed to define a class. There is no way to statically define a class in Ruby. This is frequently used. E.g lots of Ruby libraries add class methods that are executed during the definition of a class to mutate it during definition. This is Ruby's alternative to macros.As such, you'd gut large parts of the language if you stopped evaluating code on require.	vidarh	12.455387	-7.090265	comment	3.0	12.0	1579445661	12.418187
22092571	I don't understand why the Node comm	I don't understand why the Node community doesn't have an analogous to Rails. I love the Ruby language, but given that much of my work is on the front-end, I'd love to avoid context-switching between two languages for my stack. Also, with some requirements like server-side rendering, being able to natively do that in my web server is nice. I haven't used Rails since the early 2010s.	JMTQp8lwXL	12.656035	-6.9952703	comment	3.0	13.0	1579454754	12.375603
22094162	> RoR is an extremely powerful toolT	"> RoR is an extremely powerful toolThe issue I always had with Rails is that there would come a point where I would want to achieve something which wasn't really in the ""blessed path"" of a Rails application, and then I would end up with something that felt like a hack to circumvent Rails' default behavior.  That, or I would want to do something which is very simple conceptually, but I would have to add some unnecessary complexity and/or ceremony around it to fit into Rails' interfaces.Also I'm not a huge fan of the Rails' model of having everything from request handling to routing to DB access in one big framework.  The needs of each application can be quite varied, and I'd rather plug whatever components together I want to for a given project than to be limited by some outer structure.> R"	skohan	12.660435	-6.995372	comment	3.0	12.0	1579468738	12.374305
22100640	I think that the way you’re describi	I think that the way you’re describing the solution for Ruby tells me that you don’t see the problem the way that I see it. The problem isn’t rewriting things in builtins. The problem is making an IR in which you can reason about the standard library at scale: reason about its speculation opportunities, all of the implied dependencies and effects, it’s GC impacts, etc.None of the IRs I’ve seen people try for Ruby does that. JSC’s DFG IR does a lot of this. Hence I don’t think folks have really tried the JSC approach for Ruby.	pizlonator	12.606186	-7.0386224	comment	3.0	27.0	1579542871	12.345998
22112188	Although I don't use PHP, I'm impres	Although I don't use PHP, I'm impressed by its staying power and the improvements in speed (which are substantial compared to other dynamic languages). It has almost universal support amongst web hosts. It can be deployed by simply uploading your code to a directory on your web host. It's a widely criticised language, but still accounts for the vast majority of server side code (80% according to some sources).And in 2020, it's still the only language that gives your users a relatively easy method to self-install web apps or products. (Sorry, but Cloudron, Sandstrom, Docker etc will never match your customers definition of 'easy'.)Having a ridiculously easy web app installation process for servers would unlock countless opportunities for developers to reach more users or customers. PHP is c	open-source-ux	12.762799	-6.618902	comment	3.0	15.0	1579644475	10.305878
22112341	I should probably get around to maki	"I should probably get around to making a ShowHN, but my co-founder and I, having worked with loooots of clients that are still very actively working with PHP code bases (sometimes even still in datacenters!), aggregated and productized our ""dream"" stack as a PHP PaaS.  Please check it out, kick the tires, and let us know what we forgot!https://www.lamp.io/"	jimatlampio	12.76294	-6.6242857	comment	3.0	12.0	1579645485	10.289946
22112360	> needs a package manager, environme	> needs a package manager, environment variables, command line experienceIs this not the same with PHP? If you want to use packages then you'll need to use a Package manager, you still need command line experience etc.Node.js comes with a package manager NPM, and has no need for anything like virtualenv's to keep packages separate per project.Python doesn't need virtual env's at all, it's just good practice.And to be fair, as a naive non-PHP user, I have 0 clue how you would go about setting up long running scripts that don't necessarily correlate to a web request.	penagwin	12.520253	-6.528629	comment	3.0	43.0	1579645570	10.294373
22112396	Why sad?The objective is to build a 	Why sad?The objective is to build a business, generate value and execute on a vision using a programming language, not win a popularity contest by proclaiming your use of anonymous classes, unicode codepoint escape syntax, and the spaceship operator.I'm doing some really cool things in PHP, and some really ancient things as well.  Who cares?  The business is killing it, delivering some of the latest and great technologies to end users.  That's all that matters.	blantonl	12.715862	-6.647672	comment	3.0	10.0	1579645786	10.297439
22112432	It's not an actual advantage, and PH	"It's not an actual advantage, and PHP's ""throw the world away"" execution model is so so dumb."	TylerE	12.756949	-6.6190825	comment	3.0	16.0	1579645947	0.19342302
22112671	Not to mention that actually debuggi	Not to mention that actually debugging with PHP is a pretty big chore.	pathartl	12.663298	-6.5994205	comment	3.0	14.0	1579647482	10.319592
22138773	I clicked because I thought it's abo	I clicked because I thought it's about Laravel's Lumen - turned out it wasn't, that immediately made me CTRL + W. IMO, bad name choice at this stage :/	fraktl	12.805729	-6.6465187	comment	3.0	14.0	1579877784	-10.112291
22138796	Why? Just because Laravel came first	Why? Just because Laravel came first and made an abandomware project?	bnt	12.806075	-6.647968	comment	3.0	10.0	1579877985	10.365748
22139077	> how would some typical frontend be	> how would some typical frontend benefit from thisAt ElixirConf I built a simple supervisor DOM tree model. When we are ready to implement it for real we're going to experiment with mapping the DOM to a supervisor. Each node being an element. This way events and rendering take place in each node in the supervisor tree. Rendering would be diff based and merged its way back up. Events would be captured as messages in the idiomatic Erlang/Elixir way.This is all guess work right now and we don't yet know what will be practical vs what sounds good in theory.However, we are dedicated to the idea that the programming model of the BEAM is one that complex client-side applications will benefit from over what JavaScript current offers.	bcardarella	12.578942	-7.3721557	comment	3.0	12.0	1579879865	12.89127
22139999	Interesting project... I wonder does	Interesting project... I wonder does it have same kind of processes preemption based on reductions like BEAM?	h91wka	12.419019	-7.394538	comment	3.0	10.0	1579884830	12.790684
22149590	I work for one of the companies that	"I work for one of the companies that partnered with Stripe and have been using Sorbet for ~1 year in prod now (before it was made public).1. You can migrate class by class or even method by method.
2. You add type support to a method by prefixing it with a special lambda (Sig) that is read at class evaluation.
3. It provides its benefits right away. But really, most value comes from network effects. You won't get type warnings if the method you're calling isnt typed, because the return type cannot then be inferred.
4. No gems are typed right now. We type out type definitions for external dependencies in *.rbi files.It's funny that you mention typescript because in that sense the two are quite similar. Types are defined either inline or in separate files .rbi/types.dOpinions in the company "	eckesicle	12.524298	-7.1096253	comment	3.0	10.0	1579998777	12.369755
22157260	I use Django’s included authenticati	I use Django’s included authentication.	clintonb	12.845725	-6.505364	comment	3.0	12.0	1580106926	10.072296
22159846	How easy (or hard) is it to learn El	How easy (or hard) is it to learn Elixir for someone with Python/PHP/JS background and zero knowledge of functional programming? Also, are there job opportunities for Elixir or is it a niche language?	justaguyhere	12.686651	-7.4488354	comment	3.0	14.0	1580137268	12.931512
22160719	anyone mind explaining the /# to me?	anyone mind explaining the /# to me? like `Application.get_env/3`. been wanting to learn Elixir for awhile now, but didn't even know what do Google for that one.	brintnc	12.668721	-7.451814	comment	3.0	17.0	1580142084	12.931533
22161965	Still Django. It's in a weird state 	Still Django. It's in a weird state where it's starting to show its age, but everything else is at least 10 years away from catching up. So still the best bet if you're starting something new today.	Alex3917	12.83077	-6.560977	comment	3.0	15.0	1580147960	10.110354
22162117	I picked up _Programming Erlang_ bec	I picked up _Programming Erlang_ because I like Joe. I'm trying to understand why the platform, and the accompanying language(s), aren't more widely used? People seem to speak very highly about Elixir, BEAM, and OTP. It all seems really great...I see comments likeThis:>A very interesting language on powerful platform with a promising web framework... I talked with a couple of companies that jumped on it initially, but later decided to move...And this:>I recently had a convo with a company that moved into Elixir because they had an easier time hiring...I see this comment pair somewhat often.Also,From @hajile>BEAM is about an order of magnitude faster than Cpython ...If you prefer Ruby syntax over Python, there is no contest here.>BEAM is slower than the JVM, but much more stable.The second 	ericsanchez	12.645923	-7.4236207	comment	3.0	13.0	1580148941	12.892314
22194158	Sure but does it have web support li	Sure but does it have web support like Django or Rails? There’s more to it than performance when it comes to web dev!	exdsq	12.748387	-6.7234306	comment	3.0	12.0	1580410495	10.211266
22199554	There is such a language, and it is 	There is such a language, and it is Erlang.	IggleSniggle	12.561718	-7.517699	comment	3.0	11.0	1580451675	-5.0040956
22204658	As an engineering manager who's had 	"As an engineering manager who's had to push adoption of new technologies, I feel this argument in my bones.That said, taking your argument to the extreme, we all probably should've stuck with PHP, since everyone understood it and, well, was it really worth the switching cost? Naturally that's dumb, so there's a certain amount of ""how do we get there?"" with any new technology that's probably a good idea.That's probably not going to get answered by the principal engineer who says This Tech Is The Future. It's going to get answered by people like you who think about switching costs and the impact new tech has on people."	madrox	12.772029	-6.642949	comment	3.0	10.0	1580498471	10.394677
22209142	TypeScript’s goal isn’t to be sound.	TypeScript’s goal isn’t to be sound.  Its goal is to be a balance between type-safety and effort.  Full type safety would require a lot of runtime checks injected into the final JavaScript, which TypeScript intentionally avoids.JavaScript will never be fully type-safe without fundamental changes, which will probably never happen.	shhsshs	12.350697	-6.8909187	comment	3.0	15.0	1580539898	-10.431864
22213747	It seems to be a Ruby equivalent to 	It seems to be a Ruby equivalent to sysexits.h.[1]  I don't know how widely used the codes are, but the idea is neat.[1] https://manpage.me/index.cgi?apropos=0&q=sysexits&sektion=0&...	gdwatson	12.475702	-7.046395	comment	3.0	10.0	1580597210	12.394443
22215437	This is a great talk, I was struck b	This is a great talk, I was struck by how similar some of the high level design goals are to LLVM https://www.aosabook.org/en/llvm.htmlI kind of hope Anders moves on from TypeScript soon, he’s done a fantastic job there considering the constraints of JavaScript, but I’d love to see him tackle something new.	tybit	12.382145	-6.5799804	comment	3.0	19.0	1580623574	-10.460761
22220717	that page seems to state that it onl	that page seems to state that it only works in the context of a single requestunless you've got CPU bound PHP code... it seems like a complete waste of effort	blibble	12.710944	-6.5445256	comment	3.0	12.0	1580693150	10.181767
22221812	It never should have, the treatment 	"It never should have, the treatment php gets mostly feels like people finding it ""not cool enough"", seldomly I've seen someone have a real reason to avoid it"	krsdcbl	12.771473	-6.6349096	comment	3.0	17.0	1580710106	10.345812
22221939	"My pet peeve:
http://phpsadness.com/"	"My pet peeve:
http://phpsadness.com/sad/47TLDR: checking passwords in php used to rely on using the correct comparison operator. Using the'==' operator would introduce subtle flaws. Using '===', you're fine."	Beldin	12.495559	-6.671425	comment	3.0	14.0	1580711729	-4.822802
22222933	I would say that e.g. the current Ra	I would say that e.g. the current Rails stack actually is quite complicated, but that's because the current web stack is a horrible mess and Rails does the brave attempt of managing all, from providing images to delivering JS packages to friggin' websockets.This isn't contrasting Ruby to PHP, this is contrasting the web that was with the web that is.And actually, even when Rails was founded the PHP stack was inadequate for this -- which is why current practice includes all the parts that antirez is complaining about? Gems? PHP has composer, barely any serious project doesn't use it. Rack? Granted, once the PHP server is setup you don't have to account for an abstraction layer. Rakefiles? I don't think there's a standard task runner for PHP, but e.g. Laravel has envoy and I would assume tha	mhd	12.761811	-6.7420855	comment	3.0	15.0	1580725305	10.465445
22224936	This is a common straw man; PHP 5 an	This is a common straw man; PHP 5 and 7 made large strides, but that's because there was so much to fix, and there still is and will continue to be, like lack of first class functions, actual modules, etc. PHP is also unsuitable for persistent processes like serving WebSocket.	slikts	12.706563	-6.5692105	comment	3.0	10.0	1580743627	10.207632
22240986	"""Would it have been better if they w"	"""Would it have been better if they went with Elixir?""No. It would have been unshippably bad. BEAM is generally fairly slow. It was fast at multitasking for a while, but that advantage has been claimed by several other runtimes in 2020.  As a language, it is much slower than Rust. Plus, if you tried to implement a gigantic shared cache map in Erlang/Elixir, you'd have two major problems: One is that you'd need huge chunks of the map in single (BEAM) processes, and you'd get hit by the fact BEAM is not set up to GC well in that case. It wants lots of little processes, not a small number of processes holding tons of data. Second is that you'd be trading what in Rust is ""accept some bytes, do some hashing, look some stuff up in memory"" with generally efficient, low-copy operations, with ""copy "	jerf	12.512059	-7.4724016	comment	3.0	14.0	1580850501	12.892309
22243761	If you're using Ruby on Rails, you s	"If you're using Ruby on Rails, you should be using a static code analyzer to look for vulnerabilities. Please take a look at Railroader, an OSS tool I maintain that does this (and contributors are wanted!):
https://railroader.org/I recommend that you also use a web application scanner like OWASP ZAP and something to scan your dependencies for known vulnerabilities (e.g., bundle audit or GitHub's scanner).That is in addition to normal software  development tools like a style checker (like Rubocop) and a test suite with good coverage (e.g., minitest).If you develop software, it's going to get attacked. There are some pretty straightforward ways to help resist attacks, but you have to use them."	dwheeler	12.478136	-6.766531	comment	3.0	14.0	1580873438	12.338434
22245924	I tried introducing Elm at my workpl	I tried introducing Elm at my workplace and failed because:1. Development of compiler and core libraries strictly BDFL driven (at least used to be)2. Fixing some important compiler/library bugs takes years3. No way to host private package repositoriesI still use Elm personally, although these are very valid concerns.	Karupan	13.005073	-7.6880355	comment	3.0	13.0	1580902896	-12.756299
22247070	The Elixir HTTP client https://githu	"The Elixir HTTP client https://github.com/elixir-mint/mintWhat is so great about the word ""Mint""?"	dudul	12.686564	-7.4342003	comment	3.0	10.0	1580914186	12.945112
22267731	I'm glad to see other languages fina	I'm glad to see other languages finally catching up to PHP. I'm joking (kind of) but after a lot of years of doing this, I've begun de-prioritizing pure abstractions and favoring the way that humans tend to do things on their own.Technically this is along the lines of the worse-is-better philosophy. The single biggest cost in software development is friction. Performance, size, etc are all less important, because they become less important with each passing year as computers grow more powerful. And along those lines, I think that silly concepts like assigning letter names to drives in Windows, or having a paltry few registers in x86, made those architectures more accessible to the masses than the more generalized Unix and Mac platforms. Not that I completely agree with that, just, it's all	zackmorris	12.756405	-6.6644473	comment	3.0	11.0	1581093640	10.340798
38914990	Hope they learn from PHP. Their grad	Hope they learn from PHP. Their gradual typing is very pragmatic.	ilrwbwrkhv	12.626822	-6.683252	comment	3.0	13.0	1704733759	10.3550825
38915807	Unfortunately this doesn't feel good	Unfortunately this doesn't feel good enough to even justify playing a full game.- The puzzles it's serving don't look very interesting or well-constructed. Are they randomly generated or from some existing puzzle DB?- I'd really like to navigate the grid with arrow keys, not just by pointing and clicking.- The app doesn't allow changing an already entered number, only undoing it.- There's no support for pencilmarks that I can see. That's an absolute requirement for a digital Sudoku implementation.- The app doesn't allow selecting multiple squares (for modifying all of them at once, or just for visualization).Sorry if this sounds harsh, but the problem is that by making a Sudoku app you're setting up a comparison to all the existing ones. Apps like SudokuPad have amazing ergonomics, a ton o	jsnell	13.451235	-7.409593	comment	3.0	13.0	1704737482	15.081338
38920484	Used pandas for years and it always 	Used pandas for years and it always felt like rolling a ball uphill - just look at doing something as simple as a join (don't forget to reset the index).Polars feels better than pandas in every way (faster + multi-core, less memory, more intuitive API). The library is still relatively young which has its downsides but in my opinion, at minimum, it deserves to be considered on any new project.Easily being able to leverage the Rust ecosystem is also awesome - I sped up some geospatial code 100X by writing my own plugin to parallelize a function.	serjester	12.333055	-6.544449	comment	3.0	17.0	1704759163	10.120663
38922045	I try to use polars each time I have	"I try to use polars each time I have to do some analysis where dataframes helps. So basically any time I'd reach for pandas, which isn't too often. So each time it's fairly ""new"". This makes me have a hard time believing everyone that is saying ""Pandas but faster"" has used Polars, because I can often write Pandas from memory.There's enough subtle and breaking changes that it is a bit frustrating. I really think Polars would be much more popular if the learning curve wasn't so high. It wouldn't be so high if there were just good docs. I'm also confused why there's a split between ""User Guide"" and ""Docs"".To all devs:Your docs are incredibly important! They are not an afterthought. And dear god, don't treat them as an afterthought and then tell people opening issues to RTFM. It's totally okay"	godelski	12.346629	-6.558953	comment	3.0	13.0	1704771887	10.175377
38922070	> it's quite alienating to newbies w	> it's quite alienating to newbies who might otherwise become your most enthusiastic customers.Newbies are your best target audience too! They aren't already ingrained in a system and have to learn a new framework. They are starting from yours. If a newbie can't get through your docs, you need to improve your docs. But it's strange to me how mature Polars is and that the docs are still this bad. It makes it feel like it isn't in active/continued development. Polars is certainly a great piece of software, but that doesn't mean much if you can't get people to use it. And the better your docs, the quicker you turn noobs into wizards. The quicker you do that, the quicker you offload support onto your newfound wizards.	godelski	12.346319	-6.5004735	comment	3.0	23.0	1704772177	2.021888
38922350	I got annoyed at the verbosity as we	"I got annoyed at the verbosity as well. Pandas is fairly verbose compared to eg data.table, but Polars really feels more like using ""an API"" than ""a data manipulation tool"".I probably wouldn't use it for EDA or research, but I have started to use it in certain production scripts for the better performance.R dplyr + data.table is still my favorite data manipulation experience. I just wish we had something like Matplotlib in R: ggplot is too high level, base graphics are too low level. Also Scikit-Learn is much more modular than Caret, which I don't really miss using."	nerdponx	12.337256	-6.544166	comment	3.0	11.0	1704774802	10.164326
38926087	More likely, it's efforts to migrate	More likely, it's efforts to migrate away from the previously solid Rails stack to MS's preferred stack.They've had a long history of this kind of stability issue when migrating or trying to migrate acquisitions from their previous stack to an MS one. This happened with Hotmail (Unix server -> Windows server), LinkedIn (custom cloud -> MS cloud) and others since.	AlchemistCamp	12.725263	-6.9792857	comment	3.0	11.0	1704808038	12.305366
38948473	I don't think it's actually fair to 	I don't think it's actually fair to say Elixir has a type system. There are expressions that are specially handled at the compiler level, but are mostly ignored unless you invoke another separate system. It's effectively comments that have syntax.	krainboltgreene	12.551684	-7.4558873	comment	3.0	14.0	1704953964	12.918694
38966898	While Prolog is niche it's still ali	While Prolog is niche it's still alive and kicking IMO. The go-to example for a 'modern' project is TerminusDB. I'm currently using Prolog for a greenfield expert system project at $work. There's been a bit of a Datalog resurgence as well, you can see it in the Biscuit authz system for example. As a fundamental pillar of logic programming, I don't think it will ever die (akin to Lisp and functional programming). Pure speculation here but I think we might see more interest towards symbolic AI in the coming years coupled with LLMs to ground answers against well-defined knowledge bases, as a sort of anti-hallucination measure.	grose	13.139725	-7.2918177	comment	3.0	12.0	1705059368	-12.467621
39035681	The Phoenix Project is ok. It's just	The Phoenix Project is ok. It's just a simple parable to teach people about the benefits of ITSM and CAB.However, I really wished someone would write something like the phoenix project but there's no happy ending. Instead, things just get worse and worse for all the characters, both professionally and personally.	gonzo41	12.783945	-7.173817	comment	3.0	10.0	1705537500	12.728081
39058465	My Django Roadmap Ideas	My Django Roadmap Ideas	pauloxnet	12.831552	-6.497503	story	3.0	1.0	1705686238	10.081593
39067794	It’s been ongoing since at least 201	It’s been ongoing since at least 2016, and I don’t think it will ever reach Elixir’s level of use. I’m glad it exists and people have more options, but don’t use it.It doesn’t have macros, which are one of Elixir’s most important features. Even if you rarely write macros yourself in application code, the most popular libraries in the ecosystem (Ecto, Phoenix, Absinthe, etc) make heavy use of them. The popular DSLs they provide wouldn’t otherwise be possible.	AlchemistCamp	12.672525	-7.4511075	comment	3.0	14.0	1705760597	12.927846
32513663	His Wikipedia entry reminds me of th	"His Wikipedia entry reminds me of this quote from him:""programming is rather thankless. u see your works become replaced by superior ones in a year. unable to run at all in a few more""... and I can't help but think that this experience is disproportionately part of the Ruby community he was embroiled in. I did some Ruby-on-Rails development back in the day, and yeah... It's all completely un-runnable now. But that mostly seems to be a Rails-specific issue, where the ecosystem was downright hostile to calcification of APIs, workflows, and core tools. A person could publish a whole book and have 50% of its recommendations obsoleted within two years. That has to be demoralizing for an educator and communicator. Contrast that massively with Windows binaries that still run that were built again"	shadowgovt	12.670997	-7.01868	comment	3.0	47.0	1660849860	12.372712
32530743	Ther weirdest thing about Elixir pro	Ther weirdest thing about Elixir projects like Phoenix is that they don’t rewrite them changing things needlessly every generation, instead something about the language and decisions made causes things to be very stable. You might see this as a lack of activity but they really have worked on great new features with every release.Phoenix is really lovely, I’ve been using Absinthe the GraphQL add on and it’s been awesome and for the first time I’m starting to play with channels and web sockets which are really so well done and so scalable. The only thing I’d really like is types and better introspection support in my editor but pattern matching often can be used to simulate runtime duck typing to a certain extent protecting you even if your program will still compile.Maybe worth trying it ou	andy_ppp	12.676917	-7.3897705	comment	3.0	10.0	1660988730	12.881027
32532104	I remember Ventura Publisher! I used	I remember Ventura Publisher! I used it to typeset school newsletters. The alternative was Aldus PageMaker but that ran on either Mac or Windows 3.1 and I only had a PC XT then, so I ran Ventura on DOS.It definitely looked like a GEM app. I don't know if it could actually run under GEM or if it used a GEM runtime underneath (it came as a standadalone). But it was my gateway DTP app -- it was quite powerful and full-fledged for a DOS GUI app. I later moved to PageMaker and then QuarkXPress (all of these predated InDesign).	wenc	12.667157	-6.8694015	comment	3.0	10.0	1661003965	12.41274
32539062	If your asking this question the ans	If your asking this question the answer is Django. There’s nothing else left that’s really being actively developed in the open source space and nobody wants to admit it.	DawnQFunk2	12.816706	-6.5157647	comment	3.0	10.0	1661080571	10.09888
32564768	Back in college I had an assignment 	"Back in college I had an assignment to build some kind of CRM-like system, and the professor made a point that we used Java applets, because that was the future (https://en.wikipedia.org/wiki/Write_once,_run_anywhere was all the rage).I proposed instead learning PHP and using it for that purpose, but was laughed out of the room. Developing this was a PITA and I feel vindicated that applets faded away soon after, and PHP became part of the web-app ""standard"" (the LAMP acronym was started to be used around then). But I never learned PHP."	ihaveajob	12.730618	-6.6320763	comment	3.0	10.0	1661262015	10.314403
32567787	I've been programming for about 15 y	I've been programming for about 15 years - started with PHP and I'm ever since mainly using PHP.I tried C#, Python, Dart and some others. I will still use them from time to time if a job or library that has no eqivalent counterpart requires it. And I like it.However I feel most comfortable with PHP - it has some quirks but the team behind increased the DX a lot over the past few years.And I believe I got a better programmer by learning a framework - Symfony in my case.	tomschwiha	12.762776	-6.627082	comment	3.0	13.0	1661274026	10.341014
32570560	Here's a perfect example. I maintain	Here's a perfect example. I maintain a simple Node library designed to connect to Apple's App Store Connect API. https://github.com/dfabulich/node-app-store-connect-apiIt accepts, as a parameter, a URL for Apple's REST API. My library handles authentication, and returns the parsed JSON result, with a handful of tweaks to make the API more usable in JavaScript.Depending on which URL you request, you'll get different result object back. You could get a single object in response, or an array of objects, and the type of returned objects is different for each URL type.How would you add TypeScript types to this API? Well, Apple provides an OpenAPI documentation of all of their URLs, which I could use to autogenerate types, but then, how would I handle all of those types in response to the user's	dfabulich	12.4037	-6.6576858	comment	3.0	14.0	1661284510	-10.5662985
32571191	Typescript is bad for library develo	"Typescript is bad for library developers who have produced bad[0] APIs and don't want[1] to refactor them.Overloads exist in Typescript because as a language it needs to support what javascript supports - regardless of whether the pattern is ""good"". Overloads are heavily used in DefinitelyTyped because contributors there haven't had the luxury of designing the APIs they're typing. If you're designing your own API, you shouldn't be heavily using overloads because typed languages don't encourage the ridiculous trend of movable arguments that jQuery pioneered in the JS world.Similarly, if you're writing all of your own code you shouldn't need type manipulation because you shouldn't be leaning heavily on variable mutation. Dogmatic stances on immutability are reasonably a matter of debate, but"	lucideer	12.382488	-6.800831	comment	3.0	22.0	1661287307	-10.443502
32571643	> In other words, I call bullshit on	"> In other words, I call bullshit on this entire blog post. Ignore it. Typescript is the correct solution. What is the alternative? Just using JS and letting things break without knowing it?It seems like you and I read a different article. The post I read did not advocate for going back to JS; rather it advocated for better tooling and documentation (with examples, ideally) for library developers    Conclusion
    I love typescript and think the team working on it are incredible. Typescript has completely changed the FE landscape and wouldn't want to dismiss its contributions.
    But as a library developer, we need:
    - better documentation,
    - better tooling, and
    - to spend less time making tsc happy.
    I shouldn't have to read the typescript compiler source code in order to f"	hmsimha	12.387706	-6.766323	comment	3.0	49.0	1661289464	-10.404957
32572395	Yes, and a great way to do that is t	"Yes, and a great way to do that is to read documentation, of which Typescript is frequently lacking. For example, I got a suggestion in the discord recently to use ""generic parameter defaults"" for a problem I was having, which were documented... in the release notes for Typescript 2.3... and no where else: https://www.typescriptlang.org/docs/handbook/release-notes/t..."	hmsimha	12.352781	-6.845919	comment	3.0	31.0	1661293454	-10.462001
32603192	The associated book by the same name	The associated book by the same name and author is very, very good. It's an excellent introduction to both the content specified by the title and Prolog. It shows the power of declarative programming in Prolog, where you basically right down the constraints of the problem you're trying to solve, and then it solves it for you.	bmitc	13.150458	-7.295654	comment	3.0	12.0	1661486367	-12.491472
32618180	I’ve found it interesting to see sev	I’ve found it interesting to see several different concurrency frameworks for Ruby over the years with mixed success (e.g. EventMachine), along with the multiple built-in primitive (fibers, threads, forks). The patterns I’ve seen most used in the real world essentially involve distributing the work elsewhere, rather than getting concurrency right locally, for example:* Run a bunch of background workers (Sidekiq/Resque), and queue up a job for each item you want processed in parallel.* Provide relatively granular HTTP APIs, and have your JS frontend call them in parallel with AJAX, instead of having the server handle concurrency.I think this is just the nature of Ruby being widely used for web apps where performance isn’t a big concern. That said, I’d love to see Ractor catch on, since it’s	jbotdev	12.611808	-6.988941	comment	3.0	11.0	1661603028	12.3336935
39364135	I’ve been moving over to use polars 	I’ve been moving over to use polars more often for my data work.  It’s much faster than pandas at things like imputing millions of lines.  It’s also a little more intuitive and you don’t waste time pissing around with indexes everytime you transform a dataframe.Polars biggest downfall is that pandas/matplotlib are so ubiquitous in data science and polars just plays so differently than pandas including using hvplot as its default plotting package, etc.  It really is trying to do much of its ecosystem exactly how it wants to maximize productivity, speed, etc.  This may slow down the adoption of it, but hopefully it will push others in the better direction.	Vaslo	12.342261	-6.549973	comment	3.0	10.0	1707865789	10.15954
39367694	Or you could read the source code. I	Or you could read the source code. It's only 178 lines of PHP.	gexla	12.752998	-6.6308165	comment	3.0	11.0	1707898829	10.317939
39365885	How difficult is it to port pandas c	How difficult is it to port pandas code to use polars instead?  I use pandas a bunch, but sometimes it can be quite slow, especially with file I/O.  Anybody have benchmarks?	oofbey	12.333299	-6.54935	comment	3.0	10.0	1707879735	10.138454
39368036	After 15 years of PHP this is the fi	After 15 years of PHP this is the first and only time I’ve ever seen someone actually use the “global” keyword. And to hijack $data, of all the variables you could choose…> This library prioritizes development speed and simplicity over everything else, including best practices and standards.Oh. At least we were warned!	jw1224	12.581705	-6.6665173	comment	3.0	13.0	1707901971	10.246798
39422198	Last commit was 5 years ago. I feel 	Last commit was 5 years ago. I feel like this is 80% of the rails ecosystem nowadays.	jupp0r	12.754318	-6.929665	comment	3.0	32.0	1708284315	12.316802
39423819	I'm moving from Phoenix back to Rail	I'm moving from Phoenix back to Rails for a new project. Is it true Rails is dead? I thought it's community was at least 10x the size of Elixir's.	sergiotapia	12.760397	-7.0469804	comment	3.0	24.0	1708293207	12.478369
39424263	Rails is practically unusable for an	Rails is practically unusable for anything that requires concurrency inside of serving one request. If you have all your data in the database that your rails app connects to everything is great. If you need to call out over the network to 12 different services to serve your request or want to do computationally intensive things, etc, another language with support for concurrency is a better choice imho.	jupp0r	12.712577	-6.9244943	comment	3.0	16.0	1708296213	12.35393
39425460	I don't want to hijack this thread, 	"I don't want to hijack this thread, but what does Django do?I ask, cause I have a service that is a Rust backend (kind of specialized in what it does) + a SolidJS frontend... But I've seen a potential area for growth, I didn't imagine at first, and that would be stuff like user profiles, authentication, and managing stuff.  And I really don't want to cut all this more ""CRUD"" like stuff in Rust and an SPA.  I don't know Ruby, but have done some rather large Python projects in the past, just never ventured into Django land."	monkey26	12.8186865	-6.535297	comment	3.0	15.0	1708307585	10.057828
39428905	I see the advancements in php and I 	"I see the advancements in php and I think I could go back by now but I know that 90% of comapnies recruit you to fix some wordpress 4/php 5 bugy and custom plugin infested site that should just be made from scratch but because there is no money and ""just quickly fix it in 1 workday"" gives me php ptsd once again."	fHr	12.776962	-6.6253457	comment	3.0	14.0	1708344621	10.335168
39428932	PHP is probably like Excel, in that 	PHP is probably like Excel, in that is is really helpful from a raw productivity standpoint to be good at it, but you really don't want other people to know that you're good at it.	hiAndrewQuinn	12.768979	-6.6385403	comment	3.0	10.0	1708344965	10.324175
39429084	"Why is it a ""bad idea""? I'm genuinel"	"Why is it a ""bad idea""? I'm genuinely curious.It works great, it's fast and you don't have to learn a new templating language or dialect every 2-3 years. Or try to figure out how to do trivial things like loops in loops.I don't quite get the use of templating engines in PHP because PHP is a templating engine itself."	FriedrichN	12.688788	-6.5617056	comment	3.0	24.0	1708346178	10.263315
39429320	PHP can be super hacky and super str	PHP can be super hacky and super structured, within the same file, and it's your choice. You can have tests, static analysis, etc etc, or not. Or you can start without and then adding it as the project mature, without having to necessarily switch to another language.I'm working on my own startup that started as a side project and it was super hacky at the beginning, but by sticking to PHP (and thanks to PHP continuous improvements) I was able to refactor little by little and make the codebase way more structured and easier to maintain.	thinkindie	12.756199	-6.6283755	comment	3.0	11.0	1708347895	10.304336
39432085	OTP at a High Level (2019)	OTP at a High Level (2019)	todsacerdoti	12.593296	-7.4341273	story	3.0	198.0	1708362418	12.880985
39433746	I find Erlang is a bit simpler. Some	I find Erlang is a bit simpler. Some of the macros and so many ways of doing things in Elixir is a tad too much for me. I may be in the minority here, but I also prefer immutable variables.Other factors: Erlang/OTP base libraries are written in Erlang, so it feels like there is less friction when using them. With a lot of recent language improvements in Erlang like maps, better command line completion, sigils, etc., I feel like I am not missing too much from Elixir's ergonomics.One caveat might be if I had do a web app, then Phoenix just has a lot of goodies that are nice to have, and maybe then only then I might consider Elixir.And not make it sound like I am berating Elixir, and to balance things out, I'd like to say the Elixir community is amazing and the collaboration and improvement t	rdtsc	12.646997	-7.461784	comment	3.0	21.0	1708371413	12.909055
39435627	I've been writing PHP for a quarter 	"I've been writing PHP for a quarter century, but I've never become a ""whiz"" at it.But I regularly write fast, robust, secure backends, in a day or less (less, if possible. I don't actually like working in PHP).Despite the torrents of hate from this community, it is still pretty much the backend king.Here's the ""Fishtank Graph.""[0] It kind of puts things in perspective.[0] https://w3techs.com/technologies/history_overview/programmin..."	ChrisMarshallNY	12.752216	-6.603591	comment	3.0	20.0	1708381873	10.29221
39447020	Erlang devs wish it was as popular a	Erlang devs wish it was as popular as Javascript when it used XMLHttpRequest. It's less popular than Lua today, which has no package manager. That means something is very wrong.> The main objection is familiarity: “It doesn’t look like Java!” I think the point is somewhat moot.It doesn't matter what the zealots think. It's not moot, because there are people born every day that will think it. This will be a response to the language, every day, until we're both long-dead. It matters enough that it drove people to dedicate time to develop entirely new syntax (eg elixir), as mentioned. Given the myriad of languages that use a functional style, Erlang is just not special, excepting the unique syntax which makes it unfamiliar and elixir that just makes a bit more user friendly. Maybe, just maybe	Supermancho	12.589449	-7.5105004	comment	3.0	14.0	1708463778	12.950637
39455552	Anyone know of other languages using	Anyone know of other languages using pattern matching as a foundation?I’ve come across Refal[1], who’s creator Valentin Turchin seems like someone who hasn’t gotten the recognition he maybe deserves. As an aside, his son Peter Turchin does some interesting work in a different direction that’s def topical these days.I know SNOBOL gets labeled as one.Would Prolog count? I haven’t actually written any myself. They def make a strong appearance in Erlang, though it isn’t the first thing that comes to mind if describing. There’s XSLT of course.Any others?I think if one were only able to pick one metaphor for a language, I think a strong case could be made for:pattern => behavior[1]https://en.wikipedia.org/wiki/Refal	runlaszlorun	12.766098	-7.3836904	comment	3.0	11.0	1708531655	5.2067857
39463944	What is the idea?How are these diffe	What is the idea?How are these different from e.g. erlang, elo or shrapnel - all featured on the page?	thih9	12.599131	-7.508963	comment	3.0	15.0	1708584199	12.913461
39464102	"""Unexpectedly named after people"".  "	"""Unexpectedly named after people"".  Erlang seems to be short for for Ericsson Language, Elo is often misspelled ELO as if it stands for something.  Shrapnel is less unexpected."	mkl	12.571838	-7.5124564	comment	3.0	12.0	1708585720	-4.9126515
39464157	I'd love it if you could elaborate!I	I'd love it if you could elaborate!I just randomly started learning Ruby for shits and giggles over this last week, so I'd love to hear more of why not to go down this path (not that I necessarily would hit the brakes)I've also been dabbling in Go over the last year or so and really enjoyed playing around with it, but I do find it a bit verbose. On the other hand, its performance is really impressive.	elevaet	12.623446	-7.0508027	comment	3.0	11.0	1708586186	12.374615
39480340	Why my code isn't in TypeScript	Why my code isn't in TypeScript	todsacerdoti	12.3607435	-6.862356	story	3.0	5.0	1708695143	-10.46703
39490254	I used Shoes two (edit: three accord	"I used Shoes two (edit: three according to git) years ago to build a small software[1]. At the time there was a version 4  ongoing heavy development based on top of JRuby but I think it’s in the same state. 
The version 3.3 listed here has been officially abandoned by the sole developer. At the time they wrote a blog article about stopping the project but the blog is not available anymore (it’s the link in the description of the project [2]).Already two years ago shoes 3.3 was crashing a lot unexpectedly so I wouldn’t recommend using it for anything serious. 
But if you want to access the documentation online I made a small website for that [3]. The official documentation is only available in the executable which isn’t great to browse.- [1] https://gitlab.com/png-glitch/legacy-glitched-fac"	Broussebar	12.5274515	-6.9244404	comment	3.0	14.0	1708765840	-1.0491284
39549011	I tried Elm in ~2018 and it was deli	I tried Elm in ~2018 and it was delightful. Ended up checking it out bc it was mentioned as 'prior art' in Redux's website. Didn't end up adopting bc everyone around me thought I was crazy to use something so niche.It's the kind of thing that even if you don't end up using, you come out with lessons that make you a better programmer. Some that I remember:- The compiler was fast, it made me aware that you could have an iterative workflow like most dynamic languages but driven by types- The language/framework constructs  (views, updates, etc) made it clear what kind of functionality had to live where so it makes me aware to define roles/arch in React apps that are 'just components'- Error messages are just awesome, it was the clearest I had seen at that point and made me realize other langua	jrvarela56	12.976507	-7.5664334	comment	3.0	12.0	1709213284	-12.74726
39561737	Man, if only they'd debuted with thi	Man, if only they'd debuted with this, but, hindsight and all. My only thing is that TypeScript has no spec, standard, or competing implementations so it seems a bit risky to treat it as a first-class citizen as far as publishing packages goes.	imbnwa	12.38896	-6.7279634	comment	3.0	20.0	1709301077	-10.492605
39562798	I'm still surprised by so many proje	I'm still surprised by so many projects betting on TS.ES will introduce types at some point and all this effort around TS will again divide the JS community.	pier25	12.372779	-6.690551	comment	3.0	14.0	1709307815	0.82934046
39570362	I have used python in production for	I have used python in production for years, multiple servers, multiple racks, and deployment has always been as simple as./deploy.sh pull sync migrate seed restartpull calls git pull, sync runs pipenv sync, migrate runs django migrate, seed runs django management command seed, restart calls systemctl --user restart	nurettin	12.564282	-6.468234	comment	3.0	19.0	1709360931	9.903964
39571642	Drupal. Interesting choice in 2024	Drupal. Interesting choice in 2024	piker	12.766405	-6.5737596	comment	3.0	22.0	1709376571	-7.1322308
39574278	I'm currently writing an app with Dj	I'm currently writing an app with Django. It's such a breeze. Everything just works and I only have to think about the problem I want to solve. The documentation is as fantastic as it was 10-15 years ago.I'm not even really fan of Python and I really miss static typing (renaming things is painful) but oh well, I'm so productive with it that I can live with this.Honestly, I think it's the only framework that I've ever used (never tried RoR though) which allows total flexibility  while never bothering you with technical thoughts.It's still as shitty to deploy as it was a decade ago but now we have containers so who cares.I'm writing this app during a pause in my career (mainly frontend) after a burnout and it's reigniting my love for writing web apps.	pjerem	12.75837	-6.5028524	comment	3.0	14.0	1709402043	10.056431
39599566	Convention over Configuration.That a	Convention over Configuration.That and types. The only framework that's useful to JS is a better static type check system (and none of this lets-make-the-whole-damn-runtime-slow to support X feature, looking at you TypeScript).	smaudet	12.341511	-6.8451767	comment	3.0	23.0	1709614193	-10.455384
39603119	"Meanwhile, this is the kind of ""atta"	"Meanwhile, this is the kind of ""attack"" they're letting go through on a Pro property with all defaults WAF activated:>HOST: example.com/2Y8son3bwiuSuYUdBW3EAIojZc8{{41839*41587}}Django catches this and I get notified.EDIT: it's being passed as HTTP HOST header, not path. Obviously, `example.com/randomgibberish{{}}` is not a VALID zone/host set up on my CF account, so I'd think that they should not pass that to my backend."	slig	12.842535	-6.4488645	comment	3.0	20.0	1709645450	10.166467
39610407	>> The answers, of course, are yes. 	>> The answers, of course, are yes. We already have a declarative programming language where expressing graph algorithms is extremely natural—Datalog, whose semantics are based on the relational algebra, which was developed in the 1970s.If that's true - Datalog is based on relational algebra - then I'd be very interested to see the author's reference because the way I know it Datalog is a subset of Prolog, without functions so that termination can be guaranteed, and without negation-as-failure so that it's monotonic, depending on the variant, and in any case, incomplete (because termination).For example, see:What you always wanted to know about Datalog (and never dared to ask)https://ieeexplore.ieee.org/document/43410Which begins with:Datalog, a database query language based on the logic p	YeGoblynQueenne	13.1736965	-7.125488	comment	3.0	15.0	1709681216	-12.450122
39610909	Why? Just use TypeScript at that poi	Why? Just use TypeScript at that point. The whole point of those languages is the notation as a tool for better thought.	haolez	12.329758	-6.8442664	comment	3.0	14.0	1709685838	-10.421619
39621818	So what does this mean? That I can f	So what does this mean? That I can finally ship portable Ruby executable without requiring the end user to install Ruby?	Alifatisk	12.559856	-6.998431	comment	3.0	13.0	1709760779	-9.245686
39629966	> I am definitely going to recommend	> I am definitely going to recommend they write TS instead of JSWhy is that? If you want them to learn JS, teach/recommend them to learn JS?Compile-to-JavaScript languages come and go, but JavaScript has remained. First learning vanilla JavaScript makes sense, and then add TS on top if you really have to. At the very least they'll be prepared for when TypeScript goes out of favor.	diggan	12.365286	-6.721233	comment	3.0	28.0	1709823974	-10.549478
39651831	Crystal: Fast as C, Slick as Ruby wi	Crystal: Fast as C, Slick as Ruby with Tom Richards	fuzztester	12.63052	-7.2370434	story	3.0	33.0	1709995079	-3.8141203
39650907	Unfortunately the documentation for 	Unfortunately the documentation for Erlang doesn’t really describe any pros/cons for anything and I’m not an expert in it so I don’t know what the limitations are for the Erlang approach but they certainly must be (e.g. if you have long running sessions and do several upgrades, are you running N versions of the code & eating up RAM because the old sessions aren’t complete?).As I understand it, Erlang/OTP captures the entire state of the program and it’s a feature of the language and VM to accomplish this. It’s not something you can retrofit into any arbitrary language. For example, your JS app or your Python app or your Rust app won’t be able to do the same easily which means it won’t be robust and it will be error prone. Thus I stand by that there’s no “generic” solution you can bolt onto	vlovich123	12.512488	-7.530198	comment	3.0	11.0	1709982177	12.898985
32666827	Personal opinion: Even as someone wh	"Personal opinion: Even as someone who used and loved PHP for a decade, Drupal is just awful. It's overengineered and bloated and the documentation is pretty sparse, not to mention it's hard to scale up. Its admin and editor UX is decades being modern headless CMSes. It is extremely powerful, but seemingly built to handle the most extreme edge cases rather than the most common use cases, and a lot of the power is just confusing and unnecessary for your typical website. In like 10% of the time it takes to get a Drupal system up and running well, you can do the same thing with Wordpress and Advanced Custom Forms and end up with an infinitely better UX, DX, and EX.Drupal suffers tremendously from ""by engineers, for engineers"" and it's just an incredibly poor experience if you don't fit that mo"	solardev	12.755531	-6.5539436	comment	3.0	13.0	1661972527	10.3280115
32680978	LiveView Native	LiveView Native	bradgessler	12.895698	-6.8076577	story	3.0	28.0	1662057475	12.7131815
32685635	Nim and Crystal feel like they are i	Nim and Crystal feel like they are in exactly the same space? GC, fast, single executable compilation without runtime (I would also throw Go into this list).	db65edfc7996	12.499606	-7.302976	comment	3.0	17.0	1662082825	-10.971706
32704397	As someone who's the exact target au	"As someone who's the exact target audience of this post (deploying Elixir apps in production), I have no idea what this PR piece is trying to say.> Unlike BEAM it compiles applications ahead of time, allowing Lumen to perform optimizations BEAM can’t.What does this mean? Erlang/Elixir are AOT-compiled languages. They're compiled into bytecode. (Also, ""BEAM"" is not a compiler, but a bytecode VM which executes the bytecode emitted by the compiler.)Do they mean that they further compile the BEAM bytecode to native host-ISA object code? Or did they write alternative Erlang and Elixir compilers, to compile these HLLs directly to host-ISA object code, skipping both the language runtime and BEAM bytecode entirely? Do they mean ""compiles applications"" literally, in the sense of Whole-Program Optim"	derefr	12.594172	-7.4624352	comment	3.0	30.0	1662228087	12.906189
32704643	It makes no sense to me to use Elixi	It makes no sense to me to use Elixir without running on the BEAM. Absolutely zero.  You lose OTP, for one thing, which means that the entire programming paradigm goes out the window.	jononomo	12.611683	-7.4577036	comment	3.0	16.0	1662229536	12.916051
32704840	Indeed all the DockYard pieces annou	Indeed all the DockYard pieces announced are nice, but the posts are puff pieces at best.From what I understood, Elixir/OTP are there, but instead of compiling to BEAM bytecode, they compile for WASI (targeting whatever can run WebAssembly). It is not HiPE, nor JIT, there will not be any bytecode. Only AOT compiled native code, except targeting WASI.Generally BEAM is understood to be slower of the big runtimes (compared against Java, CLR, Go and often V8/Javascript). FireFly claims to be faster, and smaller in compiled form than current interation compiled against BEAM.How that plays with actor model and preemptively switched lightweight processes is a mystery to me too.I'd really appreciate something with more technical sauce but human explanation. Currently all we have is PR puffs like t	e3bc54b2	12.591779	-7.445277	comment	3.0	20.0	1662230877	-8.82013
32705306	I saw a comment that stuck with me o	"I saw a comment that stuck with me once: ""Ruby people don't get root"", referring to an unwillingness to trust Ruby tools or the ruby community as it got closer to his system.This rule works surprisingly well."	theonemind	12.624294	-7.0422487	comment	3.0	11.0	1662233788	12.384895
32705122	OTP is a programming library/paradig	OTP is a programming library/paradigm that doesn't work without the ability to create extremely lightweight threads, which is what the BEAM provides.	jononomo	12.531035	-7.40998	comment	3.0	11.0	1662232693	12.870526
32727922	You can install multiple versions of	"You can install multiple versions of PHP and Node alongside each other just fine using Homebrew:    brew install php@7.2 php@7.3 php@7.4 php@8.0 php@8.1 # and soon php@8.2

    brew install node@18 node@16 node@14 node@12 node@10"	duskwuff	12.460646	-6.5486016	comment	3.0	14.0	1662404417	10.28672
32746880	tl;dr: It's changing from the Apache	tl;dr: It's changing from the Apache License, which is FOSS, to the Business Source License, which is neither free nor open source.Hopefully someone starts a copyleft fork of the last FOSS version of Akka and drives Lightbend out of business with it.	josephcsible	12.34185	-7.3841133	comment	3.0	12.0	1662530166	12.6695
32752856	To everyone who thinks that $2k/vCPU	To everyone who thinks that $2k/vCPU is a lot of money, it's not.First, if you're running it on an 8-core server, that's $16k per year, which is about what many companies are paying for an enterprise support contract. It's not much when you consider that it gives you access to Akka engineers at the cost of 1/10 of an FTE.Second, the $2k number is a list price. All large enterprise deals are negotiated, and nearly all are discounted from the list price. Akka probably won't discount small deals, but they'll be forced to discount larger ones if the buyer has an alternative. Plus, the buyer will demand SLAs, dedicated support, and will often demand changes to the license and custom work on the software itself (tweaks to make it work with X, etc.)Akka and their larger customers will make it wor	ccleve	12.356021	-7.353893	comment	3.0	12.0	1662568472	12.635339
32772335	Those who've had to maintain someone	Those who've had to maintain someone else's perl tend to find that the hate is, if not strictly necessary, very much warranted.	lmm	12.327677	-7.0270348	comment	3.0	11.0	1662672580	13.181193
32807979	Algorithms in PHP: Deques	Algorithms in PHP: Deques	withinboredom	12.6922865	-6.638954	story	3.0	85.0	1662977507	7.5745087
32806395	Seppuku? Otherwise what is the alter	Seppuku? Otherwise what is the alternate meaning of sudoku?	2muchcoffeeman	13.452257	-7.4104943	comment	3.0	25.0	1662960347	15.072798
32808447	seeing this code, I’m happy that I n	seeing this code, I’m happy that I no longer do PHP	shp0ngle	12.761715	-6.640229	comment	3.0	19.0	1662981449	10.325593
32820215	This might be tied in to the languag	This might be tied in to the language ecosystem of tooling but after many jobs, I’m yet to see bad tests in ruby. Perhaps there are some CPU cycles wasted on the CI for not so useful tests, but it’s easily paid back by the mountains of useful tests.	Gigachad	12.613638	-7.0240517	comment	3.0	13.0	1663037825	12.364746
32822721	Php's array_shift() does seem unusua	"Php's array_shift() does seem unusually slow.  $ time php -r '$a=array_fill(0,100000,""test"");while(array_shift($a)){}' 
  real    0m10.238s
  user    0m10.238s
  sys     0m0.000s

  $ time perl -e 'my @a=(""test"") x 100000;while(shift(@a)){}'
  real    0m0.027s
  user    0m0.027s
  sys     0m0.000s

  $ time node -e 'a=Array(100000).fill(""test"");while(a.shift()){}'
  real    0m1.350s
  user    0m1.343s
  sys     0m0.011s"	tyingq	12.503101	-6.7475405	comment	3.0	11.0	1663066918	10.251792
32825573	I would never fault someone for not 	I would never fault someone for not being able to pick up a language and use it competently in 3 days.  I understand why you use this as an example, with having samey syntax, but there is still nuance.  I think the bigger indicator is you've been in the industry for 10 years and call yourself a PHP/Java dev.  At this point you should have dabbled in probably 10-100 ways of solving problems depending on what your 9-5 looks like.	trey-jones	12.747421	-6.6440835	comment	3.0	27.0	1663082917	10.318999
32840598	I'm getting a 255 return code when I	I'm getting a 255 return code when I try to run it. php v.7.4.3. Permissions are all ok. Anybody else have this problem?	birriel	12.7619915	-6.630165	comment	3.0	10.0	1663177362	10.306463
32874756	I recently had to deal with Elixir f	I recently had to deal with Elixir for my very first time. All I wanted was to dump a db from the ErlangVMs built-in mnesia, and it was so awful if you only know SQL, Firebase and friends. Took me and a friend over two hours to find out that you can only read and restore a mnesia dump if the user@node is 1:1 the same as the original.I most likely won’t touch it again except if I get a job at some telecommunication provider. The experience was too awful.	mccorrinall	12.65074	-7.4769535	comment	3.0	13.0	1663388855	12.936658
32875040	"The writing style of ""Joy of Elixir"""	"The writing style of ""Joy of Elixir"" is (I think) inspired by ""Learn you some Erlang for great good"" [1] and ""Learn you a Haskell for great good"" [2]. Personally, I like the cutesy style for getting started with a new tool/technology/language, just to know the basics.The main selling point of Elixir is concurrency. Dave Thomas gives this great example in the second page of his book [3]:    defmodule Parallel do
      def pmap(collection, func) do
        collection
        |> Enum.map(&(Task.async(fn -> func.(&1) end)))
        |> Enum.map(&Task.await/1)
      end
    end

    result = Parallel.pmap(1..1000, &(&1 \* &1))

Elixir developers can see the beauty of that snippet. However, for beginners, it can be overwhelming or intimidating. If you want to understand what is going on, you firs"	auraham	12.60391	-7.4781947	comment	3.0	26.0	1663392731	12.92159
32875058	Last year, I needed to build an MQTT	Last year, I needed to build an MQTT-HTTP bridge. Lots of concurrent long lived stateful connections.Elixir’s “we ain’t never seen a thread count that scared us” attitude was intriguing. So I took a chance.If you want a paradigm shift for a change, Elixir is fun. It will probably be a bumpier uphill climb than your run-of-the-mill-syntax-populism-mainstream languages that vie for your engagement now days. I had never realized before how much of my code in the Algol-wearing-the-ObjectOriented-vestry[1] languages is just there to navigate to code that does something. Half of the code is just to determine where the code goes next. Go around? Leave now? This way or that? How bout a three way! Goto! Jump!Elixir doesn’t solve these problems in the traditional way, and it kind of messes with your	travisgriggs	12.638354	-7.46009	comment	3.0	11.0	1663393027	12.922136
32885713	First of all: PHP is fine. It really	First of all: PHP is fine. It really is.Second: Doing a full rewrite with a junior team is not going to end well. They’ll just make other mistakes in the rewritten app, and then you’ll be back where your started.You need to gradually introduce better engineering practices, while at the same time keeping the project up and running (i.e. meeting business needs). I’d start with introducing revision control (git), then some static testing (phpstan, eslint), then some CI to run the test automatically, then unit/integration tests (phpunit), etc. These things should be introduced one at a time and over a timespan of months probably.I’d also have a sort of long term technical vision to strive against, like “we are going to move away from our home-written framework towards Laravel”, or “we are movi	larsnystrom	12.802099	-6.5851364	comment	3.0	11.0	1663491102	-10.409235
32897165	I think most senior or experienced P	I think most senior or experienced Python developers tend to steer clear of Django.It's just that you don't hear about it because it's mostly junior / less experienced developers writing about Django online.edit: having said that, I wish we would be more skeptical of magic frameworks like Django in the Python community at least. Things like 'get_object_or_404'[1] should be burned to the ground.[1] https://docs.djangoproject.com/en/4.1/topics/http/shortcuts/...	tcbasche	12.810986	-6.5427465	comment	3.0	11.0	1663588936	10.086634
32910267	Oh you went for number of programmer	Oh you went for number of programmers, that isn't what I meant (obviously). Think influence. Think dropbox, uber, amazon. And think stripe trying to add type annotations to ruby. This is what I meant.	nurettin	12.563041	-7.113398	comment	3.0	12.0	1663672861	12.391646
32916057	I don't agree with you.I have been d	I don't agree with you.I have been doing Rails development for past 10 years now and I never faced a dilemma where the framework took a direction which isn't aligned with its core vision.I have been just trying to find a similar tool for frontend where I don't have to keep rewriting the entire codebase.	BilalBudhani	12.758129	-6.8805556	comment	3.0	12.0	1663699261	12.321024
32924459	Any historical background for the re	Any historical background for the reference of Perl by Torvalds?	WiSaGaN	12.327571	-7.03605	comment	3.0	44.0	1663765099	13.181668
32941828	There have been some interesting ML 	There have been some interesting ML gems rolled in the past few years:https://ankane.org/new-ml-gemsAny thoughts on what the Ruby community would need to build in order for it to become an attractive tool for AI work?	cdiamand	12.683287	-7.0928993	comment	3.0	11.0	1663866886	12.387091
32941799	Don't use this. Marshal has too many	Don't use this. Marshal has too many issues. If you really need persistence and can't use something like Postgres, use the Ox gem instead. It's more reliable between versions of Ruby and easier to parse from other languages if you ever have to.	3pt14159	12.478832	-6.9988484	comment	3.0	22.0	1663866765	12.350707
32961538	The developer experience is bad, eve	The developer experience is bad, even compared to other PHP-based frameworks like laravel. It may not be bad 15 years ago, but when the rest of the word has moved forward. When other frameworks compete with each other to give the best developer experience, wordpress developer experience hasn't improved (or even regressed depending on who you ask). I've been creating and maintaining several plugins and themes in the past 10 years, and these days whenever I work on them I feel dread. In contrast, I feel joy when working on django projects, dabling with phoenix/elixir, or various react-based framework.To be honest, I don't know if wordpress can improve their developer experience without killing the golden goose.	neurostimulant	12.786656	-6.634306	comment	3.0	10.0	1664018969	10.331016
32970356	I wonder if a feature has been accep	I wonder if a feature has been accepted that turned out to not be tractably implementable!I work on Ruby compilers and people often suggest features that they don’t realise would be catastrophic for performance if implemented, or are sometimes literally impossible to implement.	chrisseaton	12.566069	-7.053482	comment	3.0	12.0	1664104467	12.393924
33005959	In such situations I tend to ask tha	"In such situations I tend to ask that question directly:""It was my understanding that you looking for someone who will help you with Django tooling. I can do that. Although number theory sounds interesting, I never felt the need of diving into it in order to solve any Django-related issue. I would be happy to learn more about how you think number theory relates to Django tooling should I start working here.""When people try to be important like that, it is paramount to take them at face value. In a lot of geek environments this happens all the time. People trying to push that one niche topic they really know about, because this is their comfort zone. The problem is: that one niche topic will rarely be a natural fit for any given conversation. More often than not just asking how they think t"	atoav	12.830309	-6.526493	comment	3.0	13.0	1664356223	10.061806
16445910	Is there anyway to use turbolinks wi	Is there anyway to use turbolinks with a java backend? Or is it only specific to rails?	victor106	12.77192	-6.5189614	comment	3.0	10.0	1519388998	7.6380377
16494882	Hah! I make this joke all the time w	Hah! I make this joke all the time with friends. I have literally been on three different failed projects named ‘Phoenix’	projectileboy	12.77671	-7.1823316	comment	3.0	12.0	1519930168	12.747758
16496911	Your tech stack looks like a complet	Your tech stack looks like a complete mess. Why are you using both Typescript and Flow?As a developer there are many red flags here — it looks like you're just listing off whatever buzzwords you can think of.	Etheryte	12.445804	-6.743523	comment	3.0	10.0	1519942712	-10.45866
16510894	Like others have mentioned, it seems	Like others have mentioned, it seems that elm has done a great job of promoting itself, but lacks the structure to make big changes.It screams of needing some sort of governance and RFC process ( edit: seems that there is an RFC process [1]) so that all parties could make their case.The Angular 1 -> 2 transition should be a lesson to most that if you leave your users hanging, they'll go find another ecosystem.[1] - https://groups.google.com/forum/#!forum/elm-dev	olingern	12.998441	-7.6831264	comment	3.0	14.0	1520103734	-12.756626
16511968	I've been using Elm on and off for p	I've been using Elm on and off for projects for the last couple of years.  I find that most of the complaints are just discomfort at how Elm isn't developed the way that many other projects are.  It gets in people's heads that they have to trust in Evan's judgment when they don't see a new release popping out every quarter.I actually like the pace of releases and lack of frequent breaking changes.  I'll put some projects aside for 6 months here and there, then come back to them when I have time.  Most rapidly-evolving frameworks require you to update all your libraries and fix a ton of breaking changes when you don't touch them for a few months (I'm looking at you, Swift).  After I spend all that maintenance time, I often wonder at the value of those changes in the first place.  Were they 	crusso	12.993022	-7.675823	comment	3.0	10.0	1520115324	-12.760439
16518671	You may have been lucky. One of the 	You may have been lucky. One of the worst messes I had to make work was nonsense a senior dev was working on up until he quit. It was a mess of object oriented wankery that soured me to even the term 'object' for years. He needed to implement 6 funtions with a couple of sql statements to do session handling in php, and instead there were factories and visitors and repositories and facades and I couldn't tell you what else this guy was thinking. He was supposed to be done, and it just needed deployment, but it ended up taking me 3 months, and a half dozen late night deployments and rollbacks before I managed to get it working. If I'd been more experienced at the time I would have ripped it all out and just implemented the 6 functions we needed, but I really assumed he'd had a good reason fo	milesvp	12.759484	-6.6180854	comment	3.0	13.0	1520223210	-9.490636
16550234	Does it work with Typescript? If not	Does it work with Typescript? If not, is there a TS equivalent?	polskibus	12.363558	-6.7709575	comment	3.0	10.0	1520579555	-10.453292
16553042	> but whatever the volume individual	"> but whatever the volume individually, collectively it adds up to a lot of negativityNope. Plenty more people love rails and contribute improvements to it than loath it and bash it.> the building blocks of a Rails application scale really, really badly as a codebase growsuh - i slide a slider in heroku. Others add machines behind a load balancer. Shopify does 18000/reqs/sec on rails. The ""rails doesn't scale"" argument died years ago.> You find yourself longing for POROs, hating the complexities of ActiveRecord callbacks when dealing with subclasses of models, cursing the way instance variables you set on a base controller somewhere end up being referenced inside view templatesNo, I don't. these are all things I like about rails.> the bitter taste in the mouth that prolonged Rails exposure"	meesterdude	12.760607	-6.9271064	comment	3.0	21.0	1520614647	12.350983
16555682	Why is a NodeJS dependency necessary	Why is a NodeJS dependency necessary? PHP can handle and route requests just fine. Modern PHP even comes with its own server.	krapp	12.634443	-6.494934	comment	3.0	12.0	1520635323	10.244736
16568681	The Erlang VM (BEAM) is unusual in t	The Erlang VM (BEAM) is unusual in that it, like the languages it hosts, is very opinionated.It is designed for robustness, scalability, concurrency, distributed environments. And immutable data. So far as I know, you literally cannot implement a language with mutability on the VM.So, raw performance will never be its thing.In general, I think the actor model could achieve high performance, but perhaps only if messaging is syntactic instead of truly distributed with mailboxes, network transparency, etc.	macintux	12.406993	-7.510096	comment	3.0	20.0	1520867872	12.825231
16569160	The _only_ downside I find of Elixir	The _only_ downside I find of Elixir is that it looks too Ruby-ish to my taste. I'm still waiting for the day a C-like language that runs on BEAM becomes mainstream enough.	strkek	12.652905	-7.4337215	comment	3.0	18.0	1520871573	12.890044
16587904	Ask HN: WIX.com equivalent for desig	Ask HN: WIX.com equivalent for designing front-ends	nicksalt	12.707878	-6.7420874	story	3.0	7.0	1521058436	12.318775
16619939	"""Rails"" is in the title, but there i"	"""Rails"" is in the title, but there isn't really anything in the article about what the advantages of using Rails for a Slack bot are. What have been people's experience using Rails for this kind of app?"	nxrabl	12.760559	-6.9218383	comment	3.0	10.0	1521478138	12.281767
16622945	I cried in pain when I got to securi	I cried in pain when I got to securing my app (uberauth, guardian etc). There's too much to grasp and I ended-up just copy pasting code in frustration.Elixir & phoenix are fun though. I really like how much easier it is to test an elixir app (functional language).	chimen	12.756209	-7.2604427	comment	3.0	12.0	1521492138	12.819326
16630812	A Parallel prolog machine is a great	A Parallel prolog machine is a great idea.  Just because it failed to take off doesn't mean the idea shouldn't be explored again.  The difference in CPU design in 88 and today is amazing.   Prolog is one of those languages that just automatically lends itself well to AND/OR conditions without having to change any code.I personally still see a future there, Von Neumaan has only taken us so far.   We need alternate CPU designs.	segmondy	13.1392565	-7.2895393	comment	3.0	10.0	1521567947	-12.480693
16639706	It's because we don't like or approv	It's because we don't like or approve of rails. It doesn't make business sense to us (us being a completely anecdotal group of young developers I'm friends with). There are other solutions that provide sufficiently more developer speed and safety, while also providing much better performance than any rails application.Edit: I guess I just hang out with like minded people, but our biases shouldn't negate the fact that this is a very common feeling where I am.	oregontechninja	12.744559	-6.929243	comment	3.0	16.0	1521649912	12.343088
16642015	While I much prefer writing Ruby to 	While I much prefer writing Ruby to Python, Python is just dead simple to get real work done with.  It's not elegant, but it's still so much less nasty than C++ or Java.Ruby's #1 problem, for me at least, is that your small project someday runs into a performance wall.  I don't know the latest benchmarks, but last I recall Python was about 8x faster than Ruby when both are being interpreted.  Yes, there's JRuby, but that's not something you can drop into a new system and do useful things with immediately (without more setup).And with Clojure, you get all the elegance and lovely collection manipulation tools you can possibly want, much faster performance, and a huge stable pile of Java libraries (compared to Ruby).So with Python and Clojure as one's main tools, life is quite nice.	blunte	12.529195	-7.1371136	comment	3.0	11.0	1521663848	12.339348
16678428	In Ruby these are idiomatic enough t	"In Ruby these are idiomatic enough to have a name and are built into the linter, so it'll yell at you if it sees that you're not using guard clauses.As a further refinement, I will often take tricky conditional logic and put them into a method that consists of nothing but guard clauses and a return true or false at the bottom of the method. In Ruby you can use ? and ! at the end of method names, so I'll give the method an intention-revealing question-mark name. ""Order.used_credit_card?""I use this in Javascript whenever I can too, though of course it's not as semantically nice as Ruby."	vinceguidry	12.389306	-7.069493	comment	3.0	12.0	1522068612	12.376372
16690224	Announcing TypeScript 2.8	Announcing TypeScript 2.8	DanRosenwasser	12.412001	-6.8408365	story	3.0	57.0	1522168750	-10.561398
16706707	This is completely wrong. The Beam V	This is completely wrong. The Beam VM is not pre-emptive. It is cooperative. The trick is that it is not possible to write blocking code in Erlang. There are no for loops. The only way to implement iteration is via recursion. The scheduler will only switch to the next actor only after processing a message in it's entirety. It will not interrupt an actor that is currently processing a message.Preemption is good because it prevents bad processes from starving the rest of the system but it's far from efficient.	imtringued	12.43318	-7.501632	comment	3.0	10.0	1522329356	12.877271
16714746	The problem is when--like in my case	The problem is when--like in my case--people develop a project for a client and then go on with their lives, until the client notices a bug, or wants to implement a new feature months after.I tried to explain the client that I needed to upgrade the code before even being able to  understand what the problem was, and I lost the client.As much as they suck, PHP apps from 10 years ago are still working great, and so are jQuery-based apps from 5 years ago.Would never go back to either one, though.	nkkollaw	12.689935	-6.477717	comment	3.0	12.0	1522400859	10.273976
16719131	PHP isn't criticized because it has 	PHP isn't criticized because it has a big and clumsy library. The criticisms for PHP are very clear: https://eev.ee/blog/2012/04/09/php-a-fractal-of-bad-design/It is badly designed.	slowmovintarget	12.79728	-6.67369	comment	3.0	10.0	1522438503	10.422166
16726100	I'll go against the flow and say hel	I'll go against the flow and say hell no!...I've been part of teams that pride themselves on using propel + klein to build an app in a non-framework.If you want a light framework just go with lumen, flask, sinatra. Ymmv.All new devs wasted a lot of hours learning propel and klein and it didn't always do what they wanted/needed, and the code wasn't the prettiest, where as most knew laravel, and longed for the comfort/sanity of coding in laravel.Sure, for a hobby project/side project this is a good practice to become a better dev, and understand how a mvc framework is built, but for a large code/team it's best to go with something established so new devs hit the ground running without having to learn a ton of stuff.It's easier to find a 'laravel dev', than it is to find a 'custom built mvc  	gremlinsinc	12.787962	-6.6138053	comment	3.0	21.0	1522544712	10.340664
16726242	I've worked in countless languages a	I've worked in countless languages and used plenty of frameworks (and done a ton of PHP development) but I really don't understand Laravel.You have to do a big dance of putting files in all right places and implementing all the right interfaces -- as you would with any framework -- but Laravel doesn't seem to give you anything for your trouble.  Take, as one example, validation -- you still have to write virtually everything yourself!  There are some very basic hooks and some wire but that's all.  For all the trouble, I expect more actual features from my framework.	wvenable	12.799963	-6.62799	comment	3.0	18.0	1522547052	10.3501425
16726761	Every day you spend learning about P	"Every day you spend learning about PHP is a day that you are not learning about the languages that are really moving the industry forward to interesting new places.I continue to be baffled by this sort of ""novelty-chasing"" --- do I really care about ""interesting new places"" or ""interesting new ideas""? No; and in fact I'd rather not, because it takes time and energy away from actually solving useful practical problems, besides the ones you create yourself in chasing after the latest cruft.PHP is slow on an absolute scale, but chances are that a minimal, straightforward application written with it can perform better than something with a bloated framework on top in a different language. That takes true skill and experience, not something you can get if you're continuously jumping around tryi"	userbinator	12.74459	-6.652019	comment	3.0	18.0	1522557837	10.3406
16726943	> I continue to be baffled by this s	"> I continue to be baffled by this sort of ""novelty-chasing"" --- do I really care about ""interesting new places"" or ""interesting new ideas""?Is this a troll? No you don't need to care. Feel free to go live off roots and tubers in the forest. Or write some COBOL. Anything is justified if you're putting ""interesting new ideas"" in quotes.I worked with PHP full-time for several years and energetically rationalized away the time I invested into building that expertise. I liked it, I was getting things done, it would help me get jobs in the future. Utter nonsense. What a waste of my life.Eventually I snapped out of it. Turns out you can just move to places Silicon Valley, there are jobs at awesome companies working with the cool modern technologies. You don't need anybody's permission, just do it"	bluesnowmonkey	12.76384	-6.634949	comment	3.0	11.0	1522561623	10.3316555
16732490	I used rails professionally since ve	I used rails professionally since version 0.14. 4 years ago I joined a new company and started developing Java server-side with a few years experience with java from University.After 3 years of building and maintaining a mission-critical Java backend, I would never do it again... We were using a similar framework, called dropwizard, great product, super lean and reliable.If you think Rails is magic, then you haven't seen the Java world, all the magic with annotations, dependency injection, glueing libraries together by placing some files in a folder.If you think Rails 2.3 to 3.0 upgrade was dramatic, then what we went through with a minor update from dropwizard (i think 0.7 to 0.8) was a nightmareish 1-2 months of rewriting half of the code and dependency injection handling.Java is still s	postcynical	12.707719	-6.9311028	comment	3.0	13.0	1522645982	12.366258
16733137	I agree with the article but not wit	I agree with the article but not with the editorialization in the title.In the last 2 years I've mostly used Elixir and JavaScript. In Elixir, generally all functions are synchronous. In JavaScript, there's the typical two-color functions that the author describes: synchronous and asynchronous.Elixir is nicer by far for a lot of parallel programming. Our backend can handle large loads on a single VM simply because of this.However, the world is asynchronous. It's very nice that Elixir abstracts it away, but sometimes that's not what you want and then Elixir makes things significantly harder than JavaScript.For example, imagine that my backend gets many parallel requests for mildly different resources. Each resource needs to query some other system (some 3rd party API, a DB, whatever), but i	skrebbel	12.647068	-7.4494057	comment	3.0	18.0	1522657883	12.9081545
16765214	Thank you Friendica team! We need mo	Thank you Friendica team! We need more work in this space!> Friendica runs on PHP with MySQL as a database. If you can run WordPress, you can run Friendica.This is a problem. I picture the future decentralized systems being a self-contained system that runs on your device (desktop or mobile) as well as servers for more technical people.To this end the only scripting language that can pull this off is Javascript. Ruby and PHP are not needed or useful in this space.To anyone that reads this, please take a couple weeks to learn Node (+electron or react-native), Go, or (hardest) Rust.	Xeoncross	12.608233	-6.5295897	comment	3.0	11.0	1522938705	10.094804
16788616	I spent quite a bit of time writing 	I spent quite a bit of time writing my configuration for Phoenix, if you're thinking about writing your own I think you might find starting from mine useful.It's easy to customize, there are gifs in the readme, and it comes packed with features, I hope you'll like it:https://github.com/fabiospampinato/phoenix	fabiospampinato	12.825547	-7.076974	comment	3.0	11.0	1523223774	12.742448
16797757	Yeah, we've had a great time writing	Yeah, we've had a great time writing Elm for a fairly complex single-page Ethereum dApp. It's conceptually a lot simpler than Haskell, which made it easy for the team to pick up. I only wish it had a better system (Tasks) for JavaScript interop instead of ports.	ghayes	12.964256	-7.67189	comment	3.0	17.0	1523315109	-12.758365
16798279	One of the biggest complaints of Elm	One of the biggest complaints of Elm is the lack of typeclass. I'm not aware of a similar abstraction in OCaml. Does Reason have similar limitations, or are there ways to get around it?	byw	12.929038	-7.6889553	comment	3.0	13.0	1523322985	-12.759284
16809699	I don't know if HN can find any coun	"I don't know if HN can find any counter-examples, of a language that thrived through an incompatible, code-breaking upgrade.Of course. Swift 3 is one example. Ruby 1.9, as others have pointed out, is another.PHP is yet another, and perhaps more relevant because it is close to contemperaneous. It had its ""Python 3 moment"" with the migration to PHP 5. Lots of BC breakages.[0] That transition took about 3-4 years for most.[1] Most users are now on the current major version, 7, and the remainder on 5 are mostly using its latest release (EOL is EOY). No one uses 4.[0] https://secure.php.net/manual/en/migration5.php[1] https://web.archive.org/web/20110720002753/http://www.gophp5..."	mratzloff	12.652954	-6.66885	comment	3.0	13.0	1523443030	10.339557
19312422	We used Ubuntu 18.04 with the 4.15.0	We used Ubuntu 18.04 with the 4.15.0-1031-aws kernel, with sysctld overrides seen in our /etc/sysctl.d/10-dummy.conf. We used Erlang 21.2.6-1 on a 36-core c5.9xlarge instance.To run this test, we used Stressgrid with twenty c5.xlarge generators.	zambal	12.532774	-7.536032	comment	3.0	33.0	1551808047	-4.1787815
19315120	I'd love to see data on the average 	I'd love to see data on the average on-call incidents for an application written in language X (say Go) vs those written in Elixir.Concretely, its it the case, for an application where Elixir/Erlang/Beam are a great choice, but also, another language would be fine, that the equivalent Elixir application results in less downtime/pages than the alternative. Anything from the perfect app to something with a ton of races/leaks.Is this a fair question (maybe I'm presuming too much of BEAM/supervisor pattern, I zero experience with it)?	rargulati	12.635801	-7.4792566	comment	3.0	12.0	1551827706	12.905403
19353331	So for someone who is familiar with 	So for someone who is familiar with it, why hasn't Datalog supplanted SQL for relational querying? What's its limitation?	BoiledCabbage	13.196774	-7.013487	comment	3.0	12.0	1552241901	-12.42181
19361431	I agree with what is being said, but	"I agree with what is being said, but I don't really see any new thoughts here. This is such a tired conversation. I used to have opinions about this, but I've grown to have a position of, ""ship over anything else"". Do whatever you can to ship faster. If that is nextjs, great. If that just a bunch of PHP files on an apache server? great. None of it is one-sized fits-all. /shrug"	duncan-donuts	12.650358	-6.44934	comment	3.0	33.0	1552328825	10.288255
19366721	Question about Erlang: is it possibl	Question about Erlang: is it possible to send large blobs of binary data (e.g. video frames) from one process to another with the guarantee that the data is not serialized and the transfer is close to instantaneous?	amelius	12.469273	-7.477623	comment	3.0	12.0	1552385858	12.876165
19380443	Erlang OTP 21.3	Erlang OTP 21.3	lelf	12.587641	-7.516013	story	3.0	144.0	1552495150	12.971294
19383216	Recent encounter: 70+ microservices 	Recent encounter: 70+ microservices for a minor ecommerce application. Total madness and while I'm all for approaching things in a modular way if you really want to mimic Erlang/BEAM/OTP just switch platforms rather than to re-invent the wheel. In Erlang it would make perfect sense to have a small component be a service all by itself with a supervision tree to ensure that all components are up and running.	jacquesm	12.458503	-7.4563155	comment	3.0	16.0	1552507861	-13.837563
19428445	I replaced `rails` with `Django` in 	I replaced `rails` with `Django` in your statement (and maybe could do the same with Node.js), and it reads the same. Guess it's just about being familiar with a mature ecosystem you already know, and then you can achieve results.	yedpodtrzitko	12.775195	-6.807328	comment	3.0	14.0	1552975387	12.257035
19428487	Aren't some large at-scale apps stil	Aren't some large at-scale apps still on RoR? AFAIK Coinbase, Shopify, Twitch, etc...	dawhizkid	12.686604	-6.8741965	comment	3.0	13.0	1552976088	-6.178219
19429202	I think for what it is - for its par	"I think for what it is - for its paradigm if you will - ruby on rails is an extremely well-designed platform. But I think things have moved on and what was back then seen as the right way (or just fresh new way) is now seen differently.For example - is it really ""better"" to say 7.even? rather than isEven(7)? (Strict OO vs multi-paradigm/functional programming).Or is the article's example of a data model migration really better than a series of alter table sql statements? (Putting OO on top of a relation database using an ORM.)And why not go for a pure SPA rather than an AJAX-sprinkled compromise between a traditional server-side rendered html app and a SPA?"	chvid	12.775662	-6.6677713	comment	3.0	15.0	1552986689	12.317153
19429912	A summary of my experience would be:	"A summary of my experience would be: libraries are good, frameworks are bad. (Indeed possibly the best ""framework"" I ever used was TurboGears which is very deliberately just a collection of dedicated libraries, all of which you can replace piecemeal as and when you need to).Rails raised the bar for how little custom configuration should be necessary to do a simple, straightforward thing. But it turns out being a framework is not integral to that; modern libraries have been able to adopt the ""opinionated"" (which seems to be just a fancy term for having sensible defaults) approach of rails without having to grow into all-encompassing frameworks."	lmm	12.743201	-6.804845	comment	3.0	15.0	1552996023	12.338421
19451905	I don't know if it's shameful but it	I don't know if it's shameful but it's expected.Of those PHP websites, most of them are probably wordpress. How many of those haven't been updated in ages?That's way more dangerous than running PHP 5, taking into account all distros will backport security fixes for years to come.	jwat0v	12.7802305	-6.639952	comment	3.0	13.0	1553174155	10.312188
19457527	This was fixed in 6.0.0.beta3, 5.2.2	This was fixed in 6.0.0.beta3, 5.2.2.1, 5.1.6.2, 5.0.7.2, 4.2.11.1 one week ago.https://weblog.rubyonrails.org/2019/3/13/Rails-4-2-5-1-5-1-6...The two HN posts didn't get many upvotes though: https://hn.algolia.com/?query=https:%2F%2Fweblog.rubyonrails...Admittedly there is probably a lot of applications out there running outdated versions.edit: Kind of surprising this gets upvoted while we rarely see things from exploit-db / fulldisclosure	aboutruby	12.752169	-6.946118	comment	3.0	21.0	1553203688	12.336522
19458027	This is a really bad bug. Arbitrary 	This is a really bad bug. Arbitrary file read on Rails applications can be pretty close to RCE. Worse still, it's present in all the mainstream versions of Rails, so it'll be lurking in commercial Rails applications for years to come. It's pretty amazing that the bug lasted as long as it did.	tptacek	12.720488	-6.9607916	comment	3.0	14.0	1553207665	-8.756582
19458278	Does the code fixing this feel a lit	"Does the code fixing this feel a little too innocuous to other people? Reading the code it seems really unlikely I'd see this and realize that deleting it would create a severe security vulnerability:    v = v.select do |format|
      format.symbol || format.ref == ""*/*""
    end

https://github.com/rails/rails/blob/efb706daad0e2e1039c6abb4..."	MaxGabriel	12.521187	-6.9829206	comment	3.0	13.0	1553209786	12.362643
19461933	Well, the question is why so many ad	Well, the question is why so many admins stick with PHP 5. My guess is that due to the breaking changes that came with PHP 7: https://en.wikipedia.org/wiki/PHP#PHP_7	arendtio	12.77483	-6.637829	comment	3.0	12.0	1553258282	10.343979
19463668	The PHP experience was one of the wo	The PHP experience was one of the worst experiences I have ever experienced.	ficiek	12.770968	-6.628138	comment	3.0	13.0	1553269568	10.355847
19464208	Rust seems like the right answer for	Rust seems like the right answer for a lot of things except writing servers. For that, Elixir with its Erlang VM seems like a better answer.	youeseh	12.438925	-7.5327287	comment	3.0	22.0	1553272520	12.885021
19466580	Phoenix.LiveView — you can't ignore 	Phoenix.LiveView — you can't ignore it, the coolest thing happening right now about server-side rendering.Demo: https://youtu.be/Z2DU0qLfPIY?t=2628Links: https://leveljournal.com/why-phoenix-liveview-is-a-big-deal https://elixirforum.com/t/phoenix-liveview-info/16569PS please stop calling it isomorphic — this is disgrace for the mathematics.	lelf	12.900006	-6.8798184	comment	3.0	13.0	1553286553	12.7217045
19517714	What’s the harm in using rails purel	What’s the harm in using rails purely as an API? You’ll still get a lot of functionality out of the box and maybe have to write just a little bit more glue code for the JS-backed front end than what rails provides out of the box.	inapis	12.76764	-6.757461	comment	3.0	19.0	1553816014	12.321708
19517789	They're fantastic and I hope the fut	They're fantastic and I hope the future is bright for them but I've had to pick Rails for a few projects over the last few months because the library support is so much more established. The more I get to use Phoenix, the more I am convinced it is the most well designed web framework there is, so I hope to use it a lot going forward.	0xADEADBEE	12.738197	-6.795928	comment	3.0	10.0	1553816833	12.348875
19517895	I personally don't missed Rails most	I personally don't missed Rails mostly because boilerplate doesn't really bother me. I'm more afraid of using the wrong abstraction.Rails (v4 was my last experience) was hard for me and I think my reasoning is as follow:- I like to dig deep into the framework I work with but Rails have so much meta programming (a.k.a magic) that I struggle real hard figuring out stuff. You often have to go into runtime, hit method and see where it lead you to and after a while, I realise that I'm not going to see the bottom.- If you are someone who like to dig deep, the documentation wasn't helpful for me at all.- ActiveRecord for a while discourage using foreign key. When I move away from Rails, I tried SQLAlchemy and love that its unopinionated. Then I move to node and agree its ORM are less powerful but	lxcid	13.079667	-6.5156116	comment	3.0	12.0	1553817729	12.244007
19518187	> What makes it order of magnitudes 	"> What makes it order of magnitudes more performant than RubySource for the ""orders of magnitude"" anywhere in the last year or so? Ruby with EventMachine outperformed Node significantly when I tested websocket chat servers."	ericb	12.636549	-7.0210567	comment	3.0	16.0	1553820847	-3.629198
19518328	I think what the OP meant by 'modern	I think what the OP meant by 'modern,' was an equivalent of Rails that uses the technologies demanded by the tech industry today. On the one hand, the industry went to Python because a ton of data science libraries were written in that. On the other hand, React ended up real dominant on the front-end because of all the sh*t code people put between HTML JavaScript tags. Another route, is any promising asynchronous and scalability like Node or Elixir. So these divergent vectors make something like a Rails that can serve the needs of big data, snappy UI and scaling while at the same time using the team we've got super difficult. The needs of the industry have created an oblivion of the solution that was always already there, Rails.	barce	12.811691	-6.711183	comment	3.0	13.0	1553822395	12.289481
19518364	>demanded by the tech industry today	>demanded by the tech industry today.That attitude needs to get out of everyone's head. You are the tech industry. If you want to build something in Rails, a mature and capable framework that has tons of support and won't go away, just do it. Who's going to stop you? Applies to any other technology that's stable as well.	Barrin92	12.770775	-6.9429736	comment	3.0	10.0	1553822804	12.358482
19518600	Honestly, I just wish Rails had some	Honestly, I just wish Rails had some degree of static typing (a la TypeScript.) As a Rails code base grows and patterns are required beyond the basics, it becomes a nightmare to tell what comes from where. You'd probably gain some mileage from that in your React codebase.	fny	12.544961	-6.96951	comment	3.0	31.0	1553826086	12.381552
19518607	This is actually the bane of JS comm	This is actually the bane of JS community's existence. JS developed so fast and so wildly that there was never a breather to form and write down best practices or opinions. This is jarring to someone coming from the Rails world where a lot of magic is happening, there are strict opinions (heck, it's in the subtitle of the copy) and strict conventions to adhere too. JS is wild west compared to that.This is not to say that JS is shit but both JS and Rails have their place. If you want flexibility, you need JS. If you want iteration speed and dev productivity you need Rails.	inapis	12.719865	-6.7475195	comment	3.0	18.0	1553826192	12.317636
19519124	I'm referring to things like dynamic	I'm referring to things like dynamic find_by_* messages since more people might be familiar with that.But I don't know why you'd say that. ActiveRecord models are one of the main places you'll see a bunch of `use SomeGem::Thing` that introduce a bunch of magic methods on model instances.And my point is that we aren't talking about method composition here that you can statically analyze with a bolted-on type system. Ruby's metaprogramming runs so deep that it's a substantially bigger challenge than other dynamically-typed languages.One clue is that humans even have a hard time with it. The first shock that people have with Ruby is when you see a method or identifier and grep shows up with zero results.Aside, I can kinda tell that Ruby is entering Perl territory when there are no beginners a	hombre_fatal	12.558431	-7.069243	comment	3.0	10.0	1553833050	12.361317
19521102	I've been trying to learn some Rails	I've been trying to learn some Rails and it's not that simple. People tend to say just read Hartl which is 804 pages according to Amazon. It may seem simple once you are familiar with a few dozen gems, action this, active that but there are a lot of bits to learn about.	tim333	12.745999	-6.943065	comment	3.0	11.0	1553863452	12.381794
19526549	That’s an interesting discrepancy, I	That’s an interesting discrepancy, I might have had the same gut reaction. But you’re using that assumption to cast slippery-slope doubt on the whole project without knowing anything specific. It’s possible you’re right, but maybe find out which algorithms are being used first? Perhaps there is a reason that TypeScript actually is an order of magnitude slower than JavaScript. The Benchmark Game project was specifically set up to allow people to scrutinize the algorithms used and make fair comparisons, so it might be unwise to start with the assumption that the most basic aspect of the project failed spectacularly and that something really obviously stupid and easy to fix is happening. I am at least giving benefit of the doubt and wondering what might be wrong with TypeScript. It’s not impl	dahart	12.34543	-6.759085	comment	3.0	42.0	1553903022	-10.448601
19526571	Not sure what to make of this resear	"Not sure what to make of this research. It's not like I can switch out JS in favor of these other languages (many of which are compiled binaries) in my web apps. The performance of for example web servers written in the different languages entirely would seem more interesting to compare.The JS/TS comparison was directly fishy. I found no mention in the paper of how they managed to ""run"" the tasks in Typescript, which AFAIK is not possible, or at least not how one would do it in a real life."	stareatgoats	12.367324	-6.6765623	comment	3.0	11.0	1553903318	-10.461267
19526670	"How does ""TypeScript"" come out to an"	"How does ""TypeScript"" come out to an energy score of 21.50 when ""JavaScript"" has a score of 4.45 - that makes 0 sense."	hn_throwaway_99	12.352936	-6.7879977	comment	3.0	13.0	1553904616	-10.444508
19536162	PHP also didn't make the mistake Per	PHP also didn't make the mistake Perl did. A shame because Perl tried very hard to make the right thing easy with security.	wbl	12.452696	-6.8827877	comment	3.0	18.0	1554047231	13.121707
19536204	I think PHP endures because it does 	I think PHP endures because it does one thing and does it exceptionally well. There is no other tool that makes the creation of simple dynamic server side web sites as easy and accessible. Simple FTP/SCP deployment to the server is such a killer feature.It is also one of the few choices available on cheap shared hosting sites.	the_trapper	12.771032	-6.5553885	comment	3.0	21.0	1554047489	10.302843
19536341	Things may have changed since v7 but	Things may have changed since v7 but historically I’ve not found PHPs documentation any better than any other language.In fact I remember a few occasions where I’ve ended up going by the advice of the comments rather than the documentation itself because the documentation was either out dated or just plain wrong.	pushpop	12.770519	-6.643144	comment	3.0	17.0	1554048983	-4.408276
19536509	"""it almost had a ""first mover"" advan"	"""it almost had a ""first mover"" advantage in that it happened to be installed alongside CGI-BIN on shared webhosts way back in the way""That's a good observation.  Because the mod_php and mod_perl Apache modules were much faster and lighter weight than CGI-BIN, and pre-installed on shared hosting, both PHP and Perl dominated the early web days."	tyingq	12.639998	-6.559468	comment	3.0	14.0	1554050441	9.813342
19536571	I haven't found PHP documentation to	I haven't found PHP documentation to be better or worse than the documentation of other languages I've used.What I dislike about it is the comments that every page includes. Most of them are very poorly written snippets of code from 15 years ago.If you dislike those comments too, consider adding this to your ad blocker:    php.net###usernotes	igi3ql	12.772457	-6.643562	comment	3.0	15.0	1554050964	-4.313771
19539396	Here's a second writeup, which also 	Here's a second writeup, which also contains a response from pipdig: https://www.wordfence.com/blog/2019/03/peculiar-php-present-...	nickodell	12.739364	-6.643223	comment	3.0	14.0	1554078108	10.296989
19543609	Django is a great framework and it's	Django is a great framework and it's probably very silly of me but I still cannot let go of the master/slave fiasco a couple of years ago.https://github.com/django/django/pull/2692A framework that have deciding collaborators that is that sensitive / politically correct is not something I'm willing to invest my time on any more.	ecmascript	12.830426	-6.520655	comment	3.0	50.0	1554129157	10.061505
19544873	> Does any one have a good overview 	> Does any one have a good overview on how the community actually separates functionality into “apps”?For the most part there isn't any need to, with the exception of things explicitly meant to be shared. So if you are a large company and want a bunch of custom auth logic or something to be shared among many different teams running their own Django service, then you might want to build that as an app. Or else if you were building something as an open source project you might want to do the same.In terms of separating apps by functionality, I think the main reason many people do it is because they are under the mistaken impression that putting things into different apps will make them magically re-usable. That's not to say you shouldn't do it, only that I think most people do it for the wro	Alex3917	12.832446	-6.5105186	comment	3.0	10.0	1554135237	10.048306
19544054	I have used both Ruby on Rails and D	"I have used both Ruby on Rails and Django in large production web applications over 2+ years. Speaking strictly about the web framework, RoR is the slightly better framework IMHO. This includes but is not limited to:- cleaner internal APIs, models, methods- a lot more stuff that ""just works"" out of the box where you would need a third-party package in Django (e.g. RoR gives you different settings for development/staging/production out of the box)- better static file handling- third-party packages tend to be a bit more mature and stable in the RoR worldHowever, using Django gives you easy access to the rest of the Python ecosystem, including all the data science and ML tooling. And that trade is worth it. So if you are starting from scratch today, i'd go with Django."	sparkling	12.7439575	-6.690427	comment	3.0	12.0	1554131312	10.294636
19545265	> - A huge ecosystem of libraries fo	> - A huge ecosystem of libraries for everything from data science to email processing, that are (mostly) easy to read and modify and free from systemic security issues. And pretty much every major company with an API has an official Python library for that API.I disagree about this, there's not even a basic user signup flow plugin with page templates that would allow SSO and U2F, it was so when I was looking at it three months ago. With Flask I can use Flask-Security, Flask-Dance and I have user signup, pw resets, SSO. With CSRF protection out-of-box and bunch of other security features are easy to turn on compared to Django. What I did like about Django was the idea and maybe I would've liked Django-Admin if I didn't have to reinvent three wheels out of four.	dcbadacd	12.832519	-6.5076766	comment	3.0	11.0	1554137153	10.050059
19560727	"I was sad to see => aka ""hashrocket"""	"I was sad to see => aka ""hashrocket"" syntax go, and it still slips in sometimes... but it is nice being able to use the same hash syntax in Ruby and JS.What I'm intrigued by is the author's suggestion that there's more to the change than a relatively minor syntax change. Is there more to the story? I always assumed that both syntaxes are functionally identical."	peteforde	12.454073	-7.057105	comment	3.0	10.0	1554265542	12.375575
19560532	This is a good reminder as to why Ru	"This is a good reminder as to why Ruby is often called ""the bad parts of Perl."" I really appreciate other programming language ecosystems (almost any modern ones besides Ruby) that have abandoned things like this as bad practice, while Ruby continues to double down on it."	stevebmark	12.404677	-7.0403767	comment	3.0	16.0	1554262568	12.952242
19562428	Completing a sudoku on software whic	"Completing a sudoku on software which gives instant correct/incorrect feedback on digits isn't as fun as puzzling it out together. Part of the fun of sudoku is going through the mechanics, fairly.I've heard the Souls/Bourne games described as ""tough but fair"".
For some games, the idea is that the fun comes from beating challenges from the design of the game mechanics.Similarly, there's fun to be had from Role Playing Games by not having magical foreknowledge about consequences. Saving, and loading to see how each choice plays out means the dynamic is ""how can I get the best?"" rather than ""what would this person do?""."	rgoulter	13.44902	-7.409219	comment	3.0	13.0	1554290251	15.073645
19562527	I agree and disagree.The more featur	I agree and disagree.The more features the language has, the harder it is to read.And using @ for positional arguments when it’s already used for instance variables is a questionable choice. But on the other hand, the syntax for these blocks has always been clunky.But Ruby is all about options. You can do things the way you want, when you want. That’s the happiness you achieve. But it does become more difficult to read for newcomers and devs not up on the latest updates, which is a major sacrifice.Some of these new features are blessings though. The safe navigation operator saves lots of checks and I wish I had it in JavaScript and other languages (rather than checking for a property first).	ashelmire	12.407915	-7.0689564	comment	3.0	17.0	1554291671	12.378144
19561827	This is the lesson to learn from Eli	"This is the lesson to learn from Elixir/Phoenix and every web framewrok that does not come with a strong security concept: if you do not build solid authentication and authorization into the framework from the ground up, there will pop up bazillions of half-baked libraries and even more blog posts about how to do auth ""the right way"" and still there will never be the right way as long as the framework does not implement this.Many eyes on security relevant code is one of the most important reasons for using open source frameworks for web development - so it is very unfortunate if exactly this part is missing, it will always look incomplete.Of course this leaves room for professional services, I understand that, but I believe the damage done is greater than the opportunities generated. The c"	softwarelimits	12.84327	-6.9598613	comment	3.0	11.0	1554281415	12.6901245
19576535	93% of random OCR outputs are valid 	93% of random OCR outputs are valid Perl programs. The paint splatters are a distraction.	pwason	12.373614	-6.990361	comment	3.0	10.0	1554408382	13.164932
19577207	No deployment setup will ever match 	No deployment setup will ever match the pure joy of dragging a .php file into WinFTP, watching the little blue progress bar, and refreshing your browser.	paulgb	12.762624	-6.5349703	comment	3.0	10.0	1554412600	10.288749
19590092	The Crystal Goblet (1955)	The Crystal Goblet (1955)	Tomte	12.630064	-7.2656913	story	3.0	28.0	1554545499	-11.156304
19595609	Matthew Butterick disagrees strongly	Matthew Butterick disagrees strongly with the Crystal Goblet[1]. His argument that it's impossible not to communicate with typographical choices convinced me to doubt the contents of the text “The Crystal Goblet”.[1] https://practicaltypography.com/drowning-the-crystal-goblet....	beefhash	12.596727	-7.276902	comment	3.0	18.0	1554626512	10.298252
19598409	Isn't anyone worried that TypeScript	Isn't anyone worried that TypeScript will go the way of CoffeeScript?	fourseventy	12.407125	-6.650573	comment	3.0	15.0	1554658468	-10.52536
19598631	I am not. CoffeeScript was never as 	I am not. CoffeeScript was never as popular as Typescript already is. TypeScript is a tool which solves a problem, CoffeScript is a language (IMHO) no one needed.	oaiey	12.443908	-6.6431413	comment	3.0	12.0	1554660255	-10.511669
19633658	If you think along these lines but a	If you think along these lines but also want some nice realtime interactivity check out the recently released Phoenix Live View which is a very clever system that allows you to push changes automatically to your client based on server rendered template diffing: https://github.com/phoenixframework/phoenix_live_view	andy_ppp	12.880387	-6.7062287	comment	3.0	12.0	1554985493	12.653802
19639991	The extent of their usage of Elixir 	The extent of their usage of Elixir is highly questionable. One of their employees was at elixirforum.com for recruiting but could not, or would not answer how much they use it for. There's also some partially substantiated rumors that the Elixir was a single employee's experiment, and those services were either in the process, or had already been re-written in Scala.	zinclozenge	12.699762	-7.4546533	comment	3.0	20.0	1555022274	12.93246
19650652	I was going to make a joke that no o	I was going to make a joke that no one here could be impacted, because no self-respecting HN reader uses Rails today, or Bootstrap, for that matter. However, the lack of voting and comments seem to indicate that this isn't much of a joke. Nevermind me; I'll go back to writing a bunch of new Rails sites now.	TheRealDunkirk	12.76118	-6.94791	comment	3.0	14.0	1555121542	12.394879
19650748	Glad to see the ruby community handl	Glad to see the ruby community handled this quickly and professionally. Proud rubyist here.Far cry from the way a recent npm vuln was handled.	igolden	12.63142	-6.9885926	comment	3.0	12.0	1555122818	12.385092
19650862	I honestly tried to come back to PHP	I honestly tried to come back to PHP after most of a decade in ruby. I couldn’t find a decent ORM! And after trying to write one, I think I see why.We ended up rewriting the entire product in Python.	jes5199	12.74973	-6.6986423	comment	3.0	10.0	1555124962	10.409342
19658047	I'm sure this is awesome, but there'	I'm sure this is awesome, but there's no code examples until I download a read a PDF tutorial. I think a couple of examples in the README or on the homepage could go a long way. What differiates this from Prolog or Datalog?	alexchamberlain	13.1565075	-7.250035	comment	3.0	12.0	1555226879	-12.464808
19660535	Support of Ruby 2.3 has ended	Support of Ruby 2.3 has ended	proboscis	12.628936	-7.0345984	story	3.0	44.0	1555262519	12.374335
19668570	Ask HN: Are you using Perl 6?	Ask HN: Are you using Perl 6?	pictur	12.34034	-7.0358915	story	3.0	5.0	1555359749	13.192192
19677914	Why not just use Django or Flask? Py	Why not just use Django or Flask? Python web dev is great because you do have access to so many of these incredible scientific libraries like Pandas, etc.	aldoushuxley001	12.450266	-6.5018415	comment	3.0	11.0	1555454080	9.918461
19680038	Recently, a book was published about	Recently, a book was published about implementing Git in Ruby as a way of learning Git internals.  There was a long thread here about that, and about others porting the code to their language of choiceIt occurred to me that a book about building a database system in an easy to read language would be a great way to get hands on with the various algorithms used by modern database technologies - and may be more broadly useful too	craz8	12.539817	-6.8857737	comment	3.0	10.0	1555479804	-11.861269
19694373	Odd, I've really enjoyed seeing Crys	Odd, I've really enjoyed seeing Crystal develop but this latest release adds so many features that it feels like the language might fall off my radar again - too much complexity!	dingdingdang	12.629897	-7.268917	comment	3.0	19.0	1555618430	-11.220656
19697488	Very cool! I didn't think this would	Very cool! I didn't think this would happen, as Matz has expressed disinterest in adding type annotations. However, keeping an open mind and reconsidering one's positions are the hallmarks of a great leader :DI worked on a summer project to add type annotations to Ruby. Didn't get very far since I ran into some challenges with the internals of the parser and the parser library, Ripper. I'm extremely interested in seeing how the Ruby team designs the type system. It'll be gradual, of course, but also it'll be interesting what adaptations they'll have to make to accommodate existing code. JavaScript relied on a lot of stringly typed code, so TypeScript added string literal types. Perhaps Ruby's dynamic, block oriented style could lead to some interesting decisions in the type system.Not to m	_hardwaregeek	12.447277	-7.071421	comment	3.0	42.0	1555655299	12.387716
19697893	As a user of Homebrew, I just wonder	As a user of Homebrew, I just wonder if Ruby's ever going to have performance.	aasasd	12.613635	-7.024943	comment	3.0	20.0	1555661905	12.40246
19698156	I don't use Ruby day-to-day other th	I don't use Ruby day-to-day other than a few small tools, but why not focus efforts on evolving Crystal [1] to make it more suited for rapid web development? It already has a powerful type system and incredible performance, and should be an easy transition for rubyists.[1] https://crystal-lang.org/	ricardobeat	12.627873	-7.1973357	comment	3.0	10.0	1555666583	-11.240924
19715338	It's 100% the syntax. It appeals to 	It's 100% the syntax. It appeals to ruby devs and also I think it's a lot easier to grok in general. But you can write Erlang code directly in an Elixir file, you can use Erlang libraries directly in Elixir, and Elixir compiles to the same BEAM instructions that Erlang does, so there's functionally no difference in terms of capabilities or what happens when they run.	schneidmaster	12.63231	-7.474797	comment	3.0	12.0	1555891292	12.925139
19716017	This is a crazy argument IMO. JavaSc	"This is a crazy argument IMO. JavaScript tooling is stupid simple if you know what you're doing. Learning something new is always hard so if you're new to JavaScript (and have a JVM background) of course it'll seem hard at first.I love node 'cause it ""just works"" (but really it does). The app I work on is node TypeScript Nest.js backend and TypeScript Angular frontend. The set up process for a new dev is install node (takes like 10 seconds), clone the repo, npm install, npm start. Ready to start developing.TypeScript is as simple as installing typescript, and running tsc from the command line. With ts-node you can simply make your npm start script ""ts-node ./index.ts"" and you're off and running."	itslennysfault	12.37334	-6.496889	comment	3.0	19.0	1555901211	-10.443345
19716352	The trouble with Typescript is that 	The trouble with Typescript is that the corporates have gotten their hands all over it as a means of turning JS into Java. TS turns lean, functional JS into an over-engineered smorgasbord of classes, interfaces and general OOP nonsense. JS was designed primarily as a functional language.	cutler	12.378199	-6.7410436	comment	3.0	10.0	1555904618	-10.458863
19716737	> I realize that I'm picking on Java	> I realize that I'm picking on Java, but Java is the biggest target when it comes with OOP as the industry understands it. I personally cannot stand having to create fifty files do to something like a database wrapper, and in Java that's effectively the only way to program.I had this experience once in a Rails shop.A simple database table mapped to a CRUD API endpoint would take from five to ten files. That amounted to about 500 lines, plus a lot of tests for each class.I never really understood why programming became so verbose. In an ideal world I'd have a declarative API that mapped the table to the API for me automatically. In a realistic timeline I'd just use the traditional Rails approach and be happy. But the people working there preferred to use complicated patterns and a lot of b	revvx	12.738656	-6.897769	comment	3.0	11.0	1555910663	12.365947
19716296	Except that Ember is one of the heav	Except that Ember is one of the heaviest front-end frameworks in terms of file size. Heavy file-size = more work for your mobile phone's CPU to deal with.	cutler	13.108459	-6.4399524	comment	3.0	10.0	1555903991	-15.514869
19718590	As a very mediocre ruby programmer, 	As a very mediocre ruby programmer, is there an equivalent in ruby to this? If you have a little pattern that is more clever than 'puts' everywhere, please share, it would be well received by at least one person out there.  Thanks!	digitalsushi	12.549306	-7.0832505	comment	3.0	10.0	1555938494	12.386059
19720082	I'm wondering how good Typescript su	I'm wondering how good Typescript support is. Can I use Typescript in the component script?	wontoncc	12.422321	-6.7387543	comment	3.0	11.0	1555949431	-10.465378
19728252	I had heard of him but because no on	I had heard of him but because no one uses Erlang where I live it was kind of easy to ignore. I wish I hadn’t though.Watching some of the talks he’s given on the problems of software in the wake of his death has been a real eye opener. The physics approach to building a language which tries to break the laws of physics as little as possible is truly brilliant.I don’t know how much time and effort we could have saved ourselves from wasting if we’d gone with Erlang’s take on concurrency and messaging, but it’s a lot. Just today I scheduled a meeting where we need to talk about how to handle messages not making it all the way through a few REST-based sevices.I doubt we’ll start using Erlang though, it’s just too risky when you can’t hire anyone, but you do feel a little stupid fighting proble	jaabe	12.550286	-7.5210667	comment	3.0	11.0	1556025380	12.91469
19729752	I think the application of the langu	I think the application of the language is quirkier than the language. There is a fairly high barrier to doing something ideal. In languages like python or c you can pretty much just write a few lines and you got something representative of what you can do. In this thread for example people are arguing whether you should make command line programs even in elixir: https://elixirforum.com/t/elixir-static-app-binaries/15335/4...	njepa	12.58917	-7.387205	comment	3.0	15.0	1556034523	12.931548
19733218	I think if PHP is the only language 	I think if PHP is the only language you know this pattern probably feels extremely elegant. The JS guys also like to do stuff like this.	maxxxxx	12.626535	-6.5721946	comment	3.0	14.0	1556055775	10.259317
19735461	Replacing php entirely would be a ma	Replacing php entirely would be a massive improvement. I only had sorrows with it, the kind of language that is painful to write all the way through.	gchamonlive	12.762226	-6.6399236	comment	3.0	16.0	1556078572	10.321775
19739037	Yes ? Point me to a popular open sou	"Yes ? Point me to a popular open source project that is written in Ruby that is not web based ? Even today where we just passed peak ruby.And I mean ""yum"" popular. Blender popular. QGIS popular. Not ""that script that sort my ssh connection is in Ruby"" popular."	sametmax	12.679227	-6.9940968	comment	3.0	10.0	1556118189	12.368448
19758108	Another lightweight contender, not W	Another lightweight contender, not WASM though, is Phoenix Live View[1][1] https://github.com/phoenixframework/phoenix_live_view	lostjohnny	12.863389	-6.8829026	comment	3.0	10.0	1556290251	12.725056
19759924	"Imagine creating this beast of a ""fr"	"Imagine creating this beast of a ""framework"" and not even using TypeScript or Flow. What are you thinking?Edit: It does use Flow."	d357r0y3r	12.429152	-6.6889606	comment	3.0	25.0	1556300065	-10.452778
19774342	Elixir, which runs on the Beam VM, h	"Elixir, which runs on the Beam VM, had piqued my interest for a while, so finally set out to learn about it this weekend. On searching for ""flaws"" of the language and the platform, I (accidentally) ran into: 
https://www.youtube.com/watch?v=42k70Y-yTYY . (year 2017)Video description:  ...What many developers don’t understand is that Erlang is 
  built on an architecture and within ecosystem 
  that contains many subtle security flaws. 
  One such set of flaws allows anyone with the ability to 
  interact with a remote Erlang node to compromise 
  that node by abusing the underlying BEAM Virtual Machine 
  and the services required to run Erlang...

My notes:* Looks like a deep issue in VM architecture* It's not detectable at all* Ericsson was informed 1 year prior to the talk, and their re"	dhab	12.574345	-7.4900794	comment	3.0	11.0	1556492487	-9.185573
19779615	You can purchase a BASIC interpreter	You can purchase a BASIC interpreter on the 3DS eShop. It's called SmileBASIC, and it's pretty full featured. http://smilebasic.com/en/It doesn't make intuitive sense to me why a BASIC interpreter would be allowed, but not a Ruby interpreter. The difference is likely that Nintendo was never informed about the Ruby interpreter.While I wish everything was user-modifiable, I'm generally okay with game consoles being locked down, because they don't bill themselves as general-purpose computing devices. I can't run my own software on my BluRay player either.	Wowfunhappy	12.575356	-7.0396204	comment	3.0	21.0	1556553995	12.382442
19788933	Surprised they use Flask.I'm working	Surprised they use Flask.I'm working on my first larger, industrial-strength REST API in Python and I've found the Django Rest Framework to be more suited once you get to that level of complexity.	randomsearch	12.782678	-6.530305	comment	3.0	11.0	1556638924	10.032167
19804601	I still see Rails as perhaps one of 	I still see Rails as perhaps one of the best frameworks to start a new generic web project in. The out-of-the-box functionality is just so perfectly tuned, and the fact that they're focusing on features that appeal to larger applications just shows how Rails has helped companies grow.	stevenpetryk	12.756226	-6.9147277	comment	3.0	35.0	1556769939	12.329138
19805087	Ten years ago, you'd find plenty of 	Ten years ago, you'd find plenty of people using Rails at hackathons—back when it was the new hotness. Maybe hackathons tend attract people who are interested in building stuff with 'cool' technologies as opposed to building cool stuff.	aaronbrethorst	12.733312	-6.949393	comment	3.0	16.0	1556776088	12.366439
19831300	I wonder if name is coincidence or i	I wonder if name is coincidence or it's on purpose to get some traffic from searching on Erlang BEAM.https://en.m.wikipedia.org/wiki/BEAM_(Erlang_virtual_machine...	zenlot	12.543891	-7.4935246	comment	3.0	12.0	1557033342	12.895309
19847227	which is better for web development 	which is better for web development php/python?	HaywoodParks	12.681954	-6.6651287	story	3.0	2.0	1557212858	10.270269
19848195	Probably better to use modern Prolog	Probably better to use modern Prolog instead?	xvilka	13.145562	-7.296932	comment	3.0	11.0	1557226109	-12.488592
19882552	Hey; that sounds intersting; can you	Hey; that sounds intersting; can you give an example of how you use Prolog in a SQL like context? How do you setup your 'DB'? How large does it scale?	archgoon	13.151001	-7.2751813	comment	3.0	10.0	1557524828	-12.484609
19882730	> ...by far the biggest cognitive pr	"> ...by far the biggest cognitive problem that they have with this language is understanding what the interpreter is doing at any point in time. Prolog’s attempt at being declarative ... is the problem: how to get a computer to do something without telling it what to do?I mean, people use SQL just fine without understanding how the DB is going to accomplish their queries.Maybe Prolog just doesn't have the same level of tooling as SQL for deducing ""what's going to happen"", e.g. an equivalent to SQL's `EXPLAIN ANALYZE`?> The traversal of a search space in which choice-points are introduced whenever multiple clauses match the current computational goal and a process of (possibly partial) variable instantiation ... and worse of all, the order in which you wrote your clauses in the program make"	derefr	13.133103	-7.2769804	comment	3.0	13.0	1557526182	-12.473938
19887789	Clean and Consistent Express.js Cont	Clean and Consistent Express.js Controllers	stemmlerjs	12.636572	-6.5899343	story	3.0	14.0	1557601099	-9.732296
19909058	Numerical computation is not and nev	Numerical computation is not and never was a priority for the BEAM. Reliability, network connectivity and efficiency for multiple processes were.If you want to leverage highly performant numerical code, I suggest to link against a native C library from BEAM using NIFs via http://erlang.org/doc/tutorial/nif.html or connect a C program to the Erlang network via http://erlang.org/doc/tutorial/cnode.html	phoe-krk	12.505757	-7.4763703	comment	3.0	20.0	1557839145	-8.8936405
19908969	Wow, congrats to the OTP contributor	Wow, congrats to the OTP contributors, this looks like a lot of work!I’ve heard that the BEAM VM byte code is not well documented (maybe in comparison to JVM bytecode), which is one reason that Elixir transpired to Erlang first; is this true?	yingw787	12.582909	-7.4818697	comment	3.0	11.0	1557838368	12.907552
19914551	Story of development of Erlang from 	"Story of development of Erlang from 1992.
I don't know why Erlang does not include backtracking. It seems a required part of Prolog. Can anyone explain the advantage?
I read this PDF to see if they answer the question but found no mention of it, as if Prolog doesn't support backtracking at all.  Does this make sense to anyone?"	whitten	12.901015	-7.3642025	comment	3.0	17.0	1557873913	12.895822
19916488	1. f-string and extended-iterable-un	1. f-string and extended-iterable-unpacking reminds ruby. i was really missing them.2. pathlib is cool. will come pretty handy.3. Data classes sounds good but there should be only one way to do things, even you end up writing few more lines.4. type-hints are ok for very very big projects.5. No comment on implicit-namespace-packages yet as still trying to understand solid use-case.	croh	12.443154	-7.047682	comment	3.0	15.0	1557895466	11.589454
19918338	> You have some syntax to opt into a	> You have some syntax to opt into a later release (e.g. doing `<?php(version=8)` at the start of a script.imagine the exponential complexity as old behaviours need to be kept around for various levels of opting in.	pilif	12.751462	-6.6377106	comment	3.0	13.0	1557919835	1.7554766
19918383	> Is performance that much of a big 	> Is performance that much of a big deal for most people?For most people outside VC-funded startups, yes it is. It is also an environmental concern, imagine if 80% of the web was running on ruby.	return1	12.687854	-6.9601097	comment	3.0	25.0	1557920300	12.359826
19918393	I've been coding in PHP for almost 2	I've been coding in PHP for almost 20 years now. I think I can count on one hand the number of times where I have had an issue regarding inconsistent function signatures. It becomes second nature, and if I forget, the documentation is available online or in worst case built into my IDE.I can understand why people make this into such a pain point, but quite frankly it isn't for anyone who works day in day out with PHP.	deanclatworthy	12.7242	-6.660219	comment	3.0	12.0	1557920393	10.377801
19918676	Well if 80% of the web was running o	Well if 80% of the web was running on ruby there wouldn't be any difference.Most people don't understand that 99% of performance issues are not caused by language performance but by bad architecture and bad developers.Always choose the best tool for the job, you rarely get to that scale and quality of software design that only the raw language performance is left to be optimized :)	cntainer	12.657439	-6.9947987	comment	3.0	13.0	1557923039	12.363212
19918703	Django abstracts away a bit too much	Django abstracts away a bit too much, if you ask me. For a simple REST API it's complete overkill. I prefer Flask or Falcon[0], in which you don't just get better performance[1] but also a lower level of control.[0] https://falconframework.org/[1] https://klen.github.io/py-frameworks-bench/ or https://github.com/the-benchmarker/web-frameworks	zius	12.776702	-6.529814	comment	3.0	10.0	1557923348	10.083381
19918749	> (PHP devs memorize the common func	> (PHP devs memorize the common functions..Nope (c) Me, after 5 years on trying to but still falling back to googling every 20 minutes despite years and years of using the language.... And just writing code without looking into docs much after a week with ruby	out_of_protocol	12.640498	-6.7877283	comment	3.0	13.0	1557923688	10.353799
19918856	I was pretty anti-PHP before I worke	I was pretty anti-PHP before I worked for a multi-billion dollar company that was built on top of it.  It's not a beautiful language, but it offers a lot of side benefits in terms of dev-ops, and tooling, and frameworks.  As a company, the language was not something that held us back.  The company moved really fast, and PHP was a large part a big part of why.  In my career over the past 14 years I've done web work using ruby, python, C#, javascript, and Java.  but that ugly PHP site was the one that impressed me the most.  People moved fast in it, our tooling never held us back, everything just worked.  It was the most utilitarian environment i've worked in.  The first time I touched PHP, it was a spaghetti disaster... but today, next to python It's my go to language.  It gets the job done	swalsh	12.74692	-6.6425343	comment	3.0	13.0	1557924634	10.327512
19918758	If laravel is the best we have were 	If laravel is the best we have were fucked.Laravel is fine for prototyping but it breaks backwards compat constantly, probably due to the massive amounts of over abstraction, not to mention layer upon layer of IOC hell.	lugg	12.800402	-6.63467	comment	3.0	12.0	1557923754	10.33451
19918163	Agreed, Laravel provides the best de	Agreed, Laravel provides the best dev experience in the PHP world.The funny thing is that Laravel basically took the Ruby on Rails philosophy and applied it to PHP. Just looking at their site it's clear they have a very similar vision: simple, fast and fun. One can always find differences but the basic principles are the same.IMO this is great kudos to the Laravel guys, whatever language I use I always look for the tooling that follows the KISS principle. In PHP you have Laravel, in Java/SCala you have PLay, etc.I need to add that, because of the job, I did a lot of PHP, Ruby, Java, Javascript with many different frameworks and I can say that Rails is still the best for me when it comes to dev experience if you need to move fast. Laravel has come a long way but it's still not at the same l	cntainer	12.772843	-6.6602173	comment	3.0	35.0	1557917971	10.354712
19920403	The thing that I like about PHP is t	The thing that I like about PHP is that I can mix HTML, code, and database queries into a single file.This is incredibly useful when learning basic web development, even though it doesn't scale for more complicated applications.It's also incredibly useful when trying to bang out a simple experiment.	gwbas1c	12.768124	-6.5858436	comment	3.0	13.0	1557934288	10.282783
19920511	PHP frameworks crack me up. They so 	"PHP frameworks crack me up. They so often claim they're ""powerful."" What does that mean exactly, who is that language aimed at?Then there is Laravel, why ""artisans?"" The word generally means pre-industrial. In my mind, that evokes devs doing edits on live code. Also, ""Laravel"" sounds like something to do with larvae.Then there's Drupal, which for the longest time was ""community plumbing,"" which did match the experience of having to call someone in for mysterious specialist emergencies."	davidy123	12.785572	-6.63129	comment	3.0	10.0	1557934983	10.283479
19921850	I don't like their code and architec	"I don't like their code and architecture though. The code is ugly because it is built around static methods instead of proper OOP, and uses magic methods a lot. It is not easy to read.Also, they love to invent their own names for existing things. For example, they named a folder with interfaces as ""Contracts"", although there are only interfaces.You are using ""Ruby on Rails"" as some sign of quality, but if it uses magic and static methods like Laravel, I would consider it ugly too. Also, I remember reading somewhere that they were hotpatching imported modules. Luckily in PHP you cannot do it."	codedokode	12.810963	-6.732809	comment	3.0	13.0	1557942114	10.839391
19922261	I think the bubble has to do with pu	I think the bubble has to do with purists vs pragmatists.I once joined a Java team as a front-end dev (I'm full-stack). They would do the back-end. They had done everything by the book perfectly. Following all the best practices. But the back-end wasn't doing what it needed to do by a long shot. They were stuck. Meaning I couldn't make progress. So I cooked up a simple (temporary) PHP back-end so I could easily build the needed queries. All nicely secured with LDAP. I was literally running circles around their solution. But it was blasphemy.Eventually they ported my code into Java. Some portions literally one-to-one. Nobody will ever know the critical role PHP played in this Java success story.	bartimus	12.719956	-6.647927	comment	3.0	10.0	1557944715	-1.7549877
19949576	Note that similar issues were raised	Note that similar issues were raised with Ruby stdlib, which is being addressed in part with “Gemification” of stdlib, so that all of stdlib (targeted for 3.0, though it's been going on since 2.4)[0] is being moved out to externally-updatable packages that are included by default (default and bundled gems), so that it is still “batteries included” but the batteries are at least replaceable.Amber's suggestion seems to be in the same direction (though perhaps not as extreme.)[0] https://www.slideshare.net/mobile/hsbt/gemification-for-ruby...	dragonwriter	12.680607	-6.984405	comment	3.0	71.0	1558211559	12.37648
19950490	I've found that a pretty simple tech	"I've found that a pretty simple technique along the lines of what's shared in the article makes complex Rails apps much more maintainable. Most of this applies to any MVC style app/framework.I follow these rules of thumb:1. Controllers should only handle converting HTTP to ruby calls. That includes logic that is specific to the request flow, like parsing params or authenticating cookies, but nothing else.2. Models should only handle read/write on their own table. You can use associations, but no referencing another class name inside of a model. No after_* callbacks (and try not to use callbacks at all).3. What Rails calls ""views"" should be though of as simple html templates with loops and simple if/else, but no complex logic.4. Don't use Rails Helper Methods. Just don't.All by itself this "	burlesona	12.77301	-6.840381	comment	3.0	12.0	1558224620	12.313602
33049591	The number one problem with typescri	The number one problem with typescript is how slow it is. Compiling a 14k line project takes 5s. This is absurdly slow.	david2ndaccount	12.350349	-6.7678537	comment	3.0	15.0	1664654873	-10.488675
33050729	Typescript as a language isn't too b	Typescript as a language isn't too bad but the ecosystem is an absolute dumpster fire. NPM is terribly fragmented, costs a fortune in effort to maintain dependencies, security updates etc... Every Typescript/JS project I work on is full of a dangerous amount of third party dependencies - it can be hundreds if not thousands in a single repo - many of them fragile in their own special way. Language packages management is hard - but it seems especially hard with TS/JS.	smcleod	12.354343	-6.673203	comment	3.0	14.0	1664663216	-10.343567
24761155	Could you elaborate on why you disli	Could you elaborate on why you dislike Django? Would be great to hear from someone with extensive Python experience.	darkteflon	12.804182	-6.5397663	comment	3.0	12.0	1602549536	10.085225
24853562	Python and Elixir could not be furth	Python and Elixir could not be further from each other. Just for starters, Python is OOP and Elixir is FP, which is a far bigger difference than you seem to imply. Elixir is compiled while Python is interpreted. Python has absolutely incredible community package support while Elixir is much more niche. It's hardly miniscule. It's a completely different way of programming.	freehunter	12.66795	-7.447917	comment	3.0	11.0	1603324010	12.91889
24854343	what's the recommended IDE for erlan	what's the recommended IDE for erlang dev? I've tried getting emacs setup but boy it's a struggle. I tried following this beast of a guide with questionable results,https://www.lambdacat.com/post-modern-emacs-setup-for-erlang...	waynesonfire	12.561621	-7.477643	comment	3.0	10.0	1603333695	12.918989
24863996	Elm vs. PureScript	Elm vs. PureScript	ducaale	12.948095	-7.6643763	story	3.0	20.0	1603406015	-12.742722
24866650	When can we expect Wordpress to upgr	When can we expect Wordpress to upgrade to PHP 8?	Santosh83	12.783824	-6.6359587	comment	3.0	14.0	1603435630	10.349427
24864686	"""I'm convinced one of them (or somet"	"""I'm convinced one of them (or something similar) will be the future""I don't think so.Elm is too much in its own world.Purescript is too Haskell for mainstream.I had the impression that Reason/ReScript was on a good way, but the I think the renaming and split of ReScript from Reason confused people, and now nobody knows what's happening anymore. (Im still confused myself, haha)Maybe Rust has a chance in the frontend world if it gets just a bit more ergonomic?"	k__	12.97139	-7.6731343	comment	3.0	13.0	1603411227	-12.739095
24867185	Roughly in the order you should do i	"Roughly in the order you should do it. Hopefully it's at least PHP 5.3 code:1. Definitely get a PHP IDE:
https://www.jetbrains.com/phpstorm/2. Get a step debugger and hook it in:
https://xdebug.org/3. Fix the code style:
https://github.com/FriendsOfPHP/PHP-CS-Fixer4. Run the code through some static analysis tools
https://phpstan.org/
https://psalm.dev/5. Upgrade the code with an AST fixer (might help you update to newer PHP version):
https://github.com/rectorphp/rector6. Add tests to it:
https://phpunit.de/7. Run mutation tests"	dkarlovi	12.698613	-6.644134	comment	3.0	16.0	1603441661	10.315107
24867361	Are you productive in any of the fol	"Are you productive in any of the following?
C#, Ruby, Rust, Elixir, Typescript (or even Haskell)If not, you're just proving my original point. It's hard to see the problems of a language if you are only productive in that language. I can start pointing out flaws in PHP, and you can claim that those flaws don't matter. Until you increase the number of languages in your repertoire, our discussion about the flaws of PHP won't be constructive."	awestroke	12.705548	-6.687338	comment	3.0	11.0	1603443809	10.310186
24866766	Possibly not what the author meant. 	Possibly not what the author meant. Support for PHP 8 in WordPress will come soon after PHP 8 is released. But to upgrade WordPress to PHP 8, that is to rewrite its codebase to make use of PHP 8 features, probably will not happen anytime soon. WordPress still has a minimum PHP version requirement of 5.6, so...	dragosmocrii	12.777378	-6.649894	comment	3.0	10.0	1603436808	10.324552
24867880	I don't understand as of 2020 the us	"I don't understand as of 2020 the use case for PHP. It's verbose as Java without its speed.
Seriously, can anybody help here?It made sense to use PHP EXACLTLY in the good bad old days because it was just leaner to bang out applications in PHP than with other languages.Nowadays, I feel that PHP cake has been largely eaten by Python and Ruby.Why using PHP with such a level of verbosity?"	ai_ja_nai	12.753358	-6.6428123	comment	3.0	13.0	1603448481	10.310346
24875833	Both Ruby and Python are too slow fo	Both Ruby and Python are too slow for me, and neither is Lispy enough.	pmoriarty	12.4472275	-6.98639	comment	3.0	11.0	1603499148	12.340071
24898030	I don't like how the author of the a	I don't like how the author of the article said that PHP is an interpreted language and thus does not execute anything like Java is executed.I'm not saying PHP executes just like Java, but PHP is more like Java than he realizes. PHP does not execute line by line like an interpreted language. But takes the source and compiles it down to an intermediate representation (IR), just like Java. Java calls it bytecode, PHP calls it OPCodes. Also like Java, PHP then takes that IR and executes it on a VM. Java's is stack based and PHP is register based, if I remember correctly. Many PHP accelerators / caching solutions save the IR and thus, the next time the code is needed, no compilation of source code is done.	cwt137	12.729962	-6.665921	comment	3.0	14.0	1603730149	10.293283
24908458	Deno 1.5	Deno 1.5	lucacasonato	12.523137	-6.45203	story	3.0	81.0	1603813175	-10.984046
24924454	>Even a language like Ruby, which te	>Even a language like Ruby, which tends to hang near the bottom of any performance-oriented benchmark, is thousands of times faster than BASICs that people were learning to program 8-bit home computers with in the 1980s. That's not an exaggeration, I do mean thousands.I don't buy it. Unless we're comparing the computers BASIC ran on to computers today.	muststopmyths	12.537656	-7.010992	comment	3.0	11.0	1603921393	12.302723
24925278	I've had great success with the Turb	I've had great success with the Turbolinks + Stimulus approach. There are a couple of common patterns that you'll reach for, namely, lazy loading content (basically a <div> with a URL attribute that you have Stimulus load via AJAX) and really leaning into Rails remote-link / server javascript responses for modals and little page updates.It's so great to still be super productive and be able to crank out several pages of an app in a few hours vs most of the React / SPA codebases where you might send the whole day on one little component.	swanson	12.783111	-6.4749794	comment	3.0	10.0	1603927044	12.364098
24925966	Regarding auth and db, the ones I've	Regarding auth and db, the ones I've spoken with that prefer JS way of doing things like to combine a bunch of existing offerings into one, eg Auth0 for Auth, Prisma for DB and so on. The more potential points of failure, the more attractive it seems to them.When saying that Laravel/RoR gives you all that by running one simple command, I get blank stares. Hard to believe, I know.	bgdkbtv	12.822023	-6.5540147	comment	3.0	17.0	1603933341	10.108339
24926243	For all the speed bumps PHP 7 delive	For all the speed bumps PHP 7 delivered Laravel typically scores lower than Django and Rails on Techempower benchmarks. This and the reality that PHP roles typically pay 20% less than Ruby, Python or Node has led me to ignore Laravel.	cutler	12.762841	-6.653109	comment	3.0	13.0	1603936453	10.261074
24937364	Would you say Rspec is better than t	Would you say Rspec is better than the Python equivalents like behave or pytest-BDD? Curious as I've never worked with Ruby/Rails but I'm aware there are some things that are way ahead of other toolchains (and others that are way behind as you've noted).	theptip	12.605214	-6.963156	comment	3.0	10.0	1604014335	12.271171
24941186	> there is basically nothing that ma	> there is basically nothing that matches the productiveness of Rails/Django when it comes to building webappsThat's a strong statement. Anyone care to back it up? I've never used Rails/Django.	dmos62	12.772909	-6.6859665	comment	3.0	11.0	1604057907	10.28106
24941117	Yeah it's a little disingenuous I th	Yeah it's a little disingenuous I think, there is basically nothing that matches the productiveness of Rails/Django when it comes to building webapps and without a clear reason why or strong community around it I'm not sure what the point would be. If you're building a CRUD app I don't think language performance is going to be the bottleneck. I think Rust looks awesome but as someone who uses multiple programming languages daily I feel like we're too often looking for one language that can do everything rather than just picking up the one that fits the problem area.	jamil7	12.742636	-6.683845	comment	3.0	14.0	1604057027	10.316842
24952666	> what's the argument for using it i	> what's the argument for using it instead of another mature dynamic language like Ruby or Python?A massive body of existing code that you can leverage.I keep putting off picking up PHP, but when you look at the number of off-the-shelf easily-extensible solutions for CMSs, CRMs, and e-commerce platforms, there's no contest. PHP wins.If anyone can point me at a Python e-commerce solution that will let you deliver an MVP in an afternoon, and your first original feature within a week, that would make my month.	wtracy	12.7057295	-6.6837974	comment	3.0	14.0	1604161021	10.367556
24953244	PHP allows folks without a strong ba	PHP allows folks without a strong background to solve some simple business problems which, in general, is a good thing. But once the project exceeds a certain complexity threshold (which I admit many business problems never do), this approach hits a wall: things break and fixing it breaks more things and it is an uphill battle to move in the right direction. Adding a significant new capability -- forget it.To make things worse, this cannot easily be fixed because the implementation is a hodge-podge of ideas and functions. You cannot find good architecture people who want to work in PHP to clean it. It cannot easily be re-architected because it captures a lot of business wisdom. And business people (rightly) suspect pitches for a new built-from-scratch solution: sure, it will be fast and ma	ptero	12.77749	-6.6193027	comment	3.0	19.0	1604164670	10.34659
24953881	This back and forth appears in every	"This back and forth appears in every single thread about PHP on HN:- PHP doesn't deserve its bad reputation!- Well, it used to be pretty terrible...- Ok, so first let's talk about the relativity about the definition of ""terrible"". The Oxford English dictionary defines [...]And from there it goes nowhere.It is true that PHP improved drastically over the past decade or so, it is also true that it used to be a garbage fire of a programing language and ecosystem.For the PHP proponents in the comments: I think you'd save you a lot of trouble if you didn't try to dismiss the history of PHP and pretend that it was just unfair criticism from haters. It was warranted. You can't win this one.But who cares? If PHP really is good now you're way better off arguing about that, because while you'll never"	simias	12.770138	-6.6463933	comment	3.0	25.0	1604168492	10.355413
24954152	I’m not a PHP programmer but I used 	I’m not a PHP programmer but I used to be. It’s hard to overstate the simplicity of the deployment model. Your competitors will spend tens of thousands of person-hours chasing their tails around Docker, Kubernetes, AWS, Ansible/Puppet/Chef, etc. while you spend 15 seconds FTPing your source code around. LAMP stack achieved the “serverless” dream before many of today’s engineers were even born.	closeparen	12.763273	-6.599313	comment	3.0	11.0	1604170216	10.29901
24958567	PHP is not going away anytime soon. 	PHP is not going away anytime soon. The only downside, it has no use beyond web. If you're new to programming, no. Better focus on Python, Node, Go, Java, or even JavaScript. There's still a strong and in certain niches growing demand for PHP, but definitely not suitable for a beginner, as lots of that work involves maintaining and / or upgrading legacy code.	wprapido	12.769335	-6.637109	comment	3.0	11.0	1604227199	10.346587
25004822	Looks like a very nice tool.Question	Looks like a very nice tool.Question about the GitHub repo, out of curiosity. Did you only start using git in preparation of the open source release?I don't know PHP. Since your code base looked clean, was hoping to learn some PHP by following along with your git logs, but the beginning of the Ibis universe was only 2 days ago with a very mature code base.	zomglings	12.7387085	-6.5870385	comment	3.0	10.0	1604635976	10.310582
25006213	> So, what’s the catch?No windows su	> So, what’s the catch?No windows support. (Seems to be progressing, though)https://github.com/crystal-lang/crystal/issues/5430	nurettin	12.6352415	-7.271693	comment	3.0	14.0	1604653785	10.334632
25007975	I really want to like Erlang because	I really want to like Erlang because the priorities and USP's of the language are super compelling for a lot of use-cases.  I tried to kick the tires on it a couple years ago, and what I found is that the error messages were just so vexing, and it took a minute to understand what they meant, even in toy examples.  Maybe it gets better with time, or there is tooling to help with this, but it seemed a bit behind the times with the standard which has been set by more modern programming languages.	skohan	12.554158	-7.517507	comment	3.0	25.0	1604674491	12.92084
25008355	I'm currently actively working on a 	I'm currently actively working on a typechecking system for elixir (three packages: https://github.com/ityonemo/selectrix for compile-time interface, ../mavis for type logic, and ../mavis_inference for performing type inference on compiled code).The chief difficulties I am running into are:1) How to do intersections on functions and maps (this is in the article):f(integer) -> integer is not usable as f(any) -> integer2) not all of the erlang bytecode instructions are well documented3) I still haven't figured out how to deal with circular dependencies at the module level.Erlang makes this easy in these ways:1) compiled module structure is simple and the way branching works makes the mechanics of type inference trivial.2) erlangs concurrency makes dealing with, for example in-module dependen	dnautics	12.506547	-7.484425	comment	3.0	13.0	1604677110	12.875449
25008447	I'm watching Gleam[1] for my 'I want	I'm watching Gleam[1] for my 'I want to learn Erlang but dont want to deal with having to do runtime type checks so I wish there was a Statically-Typed Erlang' dreams.[1] https://gleam.run/news/gleam-v0.12-and-gleam-otp-v0.1-releas...	Snitch-Thursday	12.521387	-7.4675674	comment	3.0	12.0	1604677752	-12.331603
25013050	I just picked up pharo and gtoolkit 	I just picked up pharo and gtoolkit recently... wishing this was the direction we were going in these days	moocowtruck	12.338051	-7.2602577	comment	3.0	22.0	1604720025	7.119117
25038641	because of my own work history and e	"because of my own work history and experience, when I see this I hear ""build a Rails app"". but I am curious, what do other people that agree with this feel like is their go-to for something like that?"	ryankshaw	12.774893	-6.900497	comment	3.0	12.0	1604949706	12.351966
25048543	That is literally how php does. Let'	"That is literally how php does. Let's fire a thread for every request and block on db reading or any action that require io.
And it seems it works (at least for php)"	mmis1000	12.702977	-6.556042	comment	3.0	13.0	1605029663	10.026764
25049209	For all the hate it gets, I think th	For all the hate it gets, I think the way PHP does their documentation is ideal.  Easy to search for what you need, it recommends other, similar classes/functions, gives a good description of the inputs and what something is expected to return.  Then, in addition to that, there's the user-supplied examples and commentary to help further clarify things.  I really like the model they went with.	pak9rabid	12.744569	-6.6448026	comment	3.0	13.0	1605032585	10.35666
25062791	What is the proportion of JS librari	What is the proportion of JS libraries in the wild which provide TS type declaration files, either via DefinitelyTyped or provided by the lib itself? Is it normal to have to write your own declarations, or do most libs provide them these days?	lemming	12.38365	-6.737002	comment	3.0	18.0	1605127671	-10.46068
25063071	That's an excellent suggestion!It's 	That's an excellent suggestion!It's true you could just have every package publish the raw TypeScript source-code.  So that when an app imports a library, it type-checks against the original source code of the library.  No need for DTS files from your dependencies!I have never seen this done in practice for a large system.  It's not as scalable as using bare-minimum type declarations that you find in DTS files.  It requires more parsing, and potentially more time to accumulate the types.  Whereas DTS emit in TypeScript can flatten the resulting type into the DTS file.But if performance didn't matter, I think this would probably work.  And it would eliminate the class of bugs where the generated DTS files are not 100% semantically identical to the original source code.  That's another edge-	robpalmer	12.349	-6.8180666	comment	3.0	12.0	1605129330	-10.480879
25063454	As an outsider I'm puzzled how any T	As an outsider I'm puzzled how any TS library repo keeps up with the pace of change in TS. With JS you can more or less write it once.	cutler	12.36803	-6.6080008	comment	3.0	12.0	1605131429	-10.43782
25064666	A book which stops you learning Ruby	A book which stops you learning Ruby is in fact an excellent book.	twic	12.638187	-7.0177684	comment	3.0	10.0	1605140226	12.375088
25064943	Yes. In a perfect world Ruby would h	Yes. In a perfect world Ruby would have left Python in the dust and enterprise software would be written in Clojure.	cutler	12.534056	-7.217634	comment	3.0	22.0	1605142093	12.399064
25065013	It really is a pretentiousness held 	It really is a pretentiousness held in a group of language zealots.You don’t hear the same about Nim, for example(yet?), In my experience.I don’t deny Ruby’s impact on the industry I just have a hard time with the attitudes prevalent in the devs I’ve worked with... it is strikingly stereotypical.	leetrout	12.607433	-7.0621777	comment	3.0	23.0	1605142506	12.394483
25065245	"Complains about the ""pretentiousness"	"Complains about the ""pretentiousness"" of Ruby developers (Out all the languages!). Proceeds to mention Nim. Rub his mustache, drink his kombucha a put  another vinyl."	cambalache	12.615938	-7.0550175	comment	3.0	13.0	1605144063	12.399059
25065356	> It really is a pretentiousness hel	> It really is a pretentiousness held in a group of language zealots.Can’t tell if this is ironic or not, but Rubyists are pretty well known as the friendliest out of all language communities, and have been for over a decade now	uncomputation	12.621665	-7.0602665	comment	3.0	13.0	1605144744	12.403601
25068303	"I'm intrigued - what makes it a ""red"	"I'm intrigued - what makes it a ""red-pill experience"" compared to a typical typescript setup for example?"	chimen	12.387298	-6.7865977	comment	3.0	22.0	1605175555	-10.450258
25068202	Although I am fascinated by _why's p	Although I am fascinated by _why's personality and his art, I think this book is partly to blame that Ruby is not as popular as it could (and should) have been. It somehow embodies that proto-hipster vibe the Ruby community used to have at the beginning, which alienated a lot of potential users. Luckily I managed to overcome that initial hurdle (the Pickaxe book helped a lot), but a lot of (good) developers I know haven't, and lots of them stayed with ASP (and its later offspring) and PHP.	jablan	12.625063	-7.0504007	comment	3.0	10.0	1605174516	12.368972
25068597	Yes, it definitely can be. LiveView 	Yes, it definitely can be. LiveView will create real problems when the user is many hops from the server. I say this as someone who has gone all in, but currently we're UK based and only serving the UK market. Multi-region scaling for liveview will certainly be 'interesting'.	te_chris	12.909866	-6.81295	comment	3.0	11.0	1605178935	12.726898
25096872	Prezi was the first major adopter of	Prezi was the first major adopter of Elm in industry. They hired the language author to work on it full-time.A few years later, they laid him off and deprecated their Elm codebase.	hitekker	13.002647	-7.689927	comment	3.0	10.0	1605399079	-12.764351
25102417	Rails handled Black Friday and Cyber	Rails handled Black Friday and Cyber Monday traffic for an ecommerce company I used to work for just fine.  If you are making money, it's worth the cost of 50 lowend VPSes autoscaled (we could have done with a lot less, too).If we were using Java it would have taken us three times the people and four times as long to build the site, and we all would have been laid off.	nitrogen	12.752213	-6.917178	comment	3.0	10.0	1605458120	12.344081
25108935	Ask HN: How correct are geohot's opi	Ask HN: How correct are geohot's opinions on CRUD developers?	tr1ll10nb1ll	12.763481	-6.538457	story	3.0	2.0	1605510010	10.148613
25142054	Not sure how I feel about my medical	Not sure how I feel about my medical information being handled by PHP...	Kocrachon	12.772808	-6.6213603	comment	3.0	10.0	1605731393	10.359697
25149968	> I don't use Ruby but I faced simil	"> I don't use Ruby but I faced similar issues with Rust's clippy and rustfmt. But I still think it's better than the alternative.I also use Go, and haven't had issues with the autoformatter there, but I believe that's mostly because there is little to no room for ambiguity around intent. You tell the compiler you want to return a Bool, and if you don't it's a compile time error. There's no ""I dunno, maybe nil was an intended return value"".> Every time I'm tempted to override one of these links/formats because I feel like my way is better I like to remind myself that it's going to set a precedent for the other devs on the projectI think this misses the point somewhat. This isn't about changing the defaults of Rubocop, it's about not having some of those defaults in the first place for the p"	wlll	12.419957	-7.1706033	comment	3.0	10.0	1605796904	12.4062395
25156162	It's an unfortunate situation, becau	"It's an unfortunate situation, because so long as people are writing popular frameworks/libraries that horribly abuse the dynamic nature of JavaScript, the TypeScript team sort of has no choice but to try and wrestle the language into supporting it. But I agree that this is getting out of hand. I still like TypeScript but with each new release it's getting harder to claim with a straight face that it's ""easier"" than vanilla JS when you have to grok this increasingly convoluted type system."	Analemma_	12.36393	-6.7632513	comment	3.0	12.0	1605832716	-10.450412
25156425	I don't understand this type of cyni	"I don't understand this type of cynical criticism. You don't have to use features you believe are ""so complicated"". Just don't use them. You said you love typescript, and everything you love about typescript remains intact to your satisfaction. It's not as if these features emerge spontaneously from a vacuum, the typescript team is working with the community to address specific needs. You didn't even offer any specific criticisms, just a vague dismissal. Just don't use it."	root_axis	12.34905	-6.820926	comment	3.0	18.0	1605835257	-10.467092
25159758	I started using TypeScript about 7 m	"I started using TypeScript about 7 months ago. And heavily in the last 3 months.I'm up to speed now, but I still feel I'm missing an opinion.e.g. I have naturally been drawn to ""maximally infer"" types, whilst I see other developers would rather re-create/co-locate a type with its function/component.Does anyone have a repo where they think the TS is near-perfect? Or even better, a deeply opinionated Style Guide?"	KuhlMensch	12.355462	-6.8316317	comment	3.0	10.0	1605874995	-10.43808
25160336	There's a correlation between lines 	There's a correlation between lines of code in a file and bug count. Does the typing outweigh this?If all the time spent writing all those types was spent debugging, would TS win in actual development time?If you're writing good unit tests already, why are you running into so many type issues?If you already have to spend time writing tests, why spend more writing types?TS types aren't really documentation. For other devs to use your stuff, you need JS Docs to actually explain things. Why write all those types too?If I'm writing a quick and dirty project, it feels like TS types help a little, but if I'm following best practices on an important project, TS seems like pointless ceremony that slows things even more.	hajile	12.348787	-6.83814	comment	3.0	18.0	1605879720	-10.416019
25175686	I used Rails for a lot of projects s	"I used Rails for a lot of projects starting ~10 years ago, but slowly gravitated towards a stack based on Sinatra (for a lean REST API), Middleman (static site generator), and webpack/react/etc - for mostly the reasons you describe.In hindsight, I can't blame Rails for the direction it took; JavaScript's path (the language itself, as well as the tools) has been extremely volatile in that time. Rails is opinionated, which is part of what makes it great, but to be more opinionated on JS in the past probably would have been detrimental to the Rails community. I've felt the pain in my own work: every 2 weeks, it feels like my webpack/react/babel/etc toolchain and codebase need to be refactored because what was recently best-practice is now considered ""legacy"" and unsupported. When you embrace "	dperfect	12.746347	-6.7985907	comment	3.0	15.0	1606030067	12.318047
25175964	I’m actually quite bullish about Rai	I’m actually quite bullish about Rails for the fitst time in a while due to StimulusRelex[1].It’s a similar approach to Elixir’s Liveview and provides reactive, diff’d partial updates streamed over a websocket.This seems a very “now” approach to building webapps.1.  https://docs.stimulusreflex.com/	Lio	12.82402	-6.6581316	comment	3.0	13.0	1606034551	12.503765
25181095	I think that's just how business wor	"I think that's just how business works. The technical impressiveness of his ""PHP website"" is irrelevant—he was in the right place, at the right time, with a strong initial user base.Edit: I'm not trying to downplay his business acumen, either. Facebook clearly made lots of good decisions down the line that helped them reach the scale they reached. But the reason that the product took off at first had a lot more to do with how it got in front of users in the early days than its technological superiority."	snazz	12.795953	-6.594198	comment	3.0	10.0	1606079081	2.9647286
25188334	OOC what framework do you use?More b	OOC what framework do you use?More broadly, can you help me with an opinion on my present struggle? Here goes:I have a lot of ideas, a couple of which solve problems for me and I think are even _good_ ideas. However, none have shipped because I'm spending an inordinate amount of time building out what is essentially my own SaaS template. Is it worth investing the time in doing that, or are some of the commercial SaaS templates out there (sjabloon, bullettrain, etc)I prefer Python/Flask, but I'm trying to learn Rails now, since a lot of the small saas ecosystem seems to exist there.	SmellTheGlove	12.774153	-6.440876	comment	3.0	10.0	1606148350	7.202529
25199239	"Well, of course not. You can't ""run"""	"Well, of course not. You can't ""run"" TypeScript."	tantalor	12.37971	-6.7734165	comment	3.0	23.0	1606231356	-10.47447
25202568	I guess it assumes we already know h	I guess it assumes we already know how to use the Ruby language, therefore it's a good option to choose for new projects?I personally know near nothing about Ruby, other than read a couple of documentation pages.Since I don't know how to use it the right way, I cannot take any side so I can agree or not with this suggestion.	stephen82	12.59389	-7.0302625	comment	3.0	11.0	1606249114	12.38157
25203753	When I understand something in Rails	"When I understand something in Rails, it's wonderful, but the sheer quantity of ""magic"" in Rails makes it very difficult to deal with when you only touch Rails projects periodically.I never had this issue with Java frameworks. I could drop into a large Java codebase almost anywhere and quickly get a lay of the land."	arpyzo	12.703279	-6.928451	comment	3.0	10.0	1606256958	12.358385
25209464	Build It with Nitrogen: The Fast-Off	Build It with Nitrogen: The Fast-Off-the-Block Erlang Web Framework	andrenth	12.537075	-7.493539	story	3.0	31.0	1606314099	-9.47745
25221091	Reading the list of things that worr	"Reading the list of things that worry them makes it clear that it's not so much php is breaking bc than it is wordpress lack of cleaning and linting for so long catching up to them.I mean seriously the first thing they list as a worry is that arithmetic operators will now throw an error when one (and only one) of their operand is an array or resource (eg array + array support remains, it's really int + array or string + file_descriptor, things like that). This is literally a case that makes no sense in the code ever, not one of the ""php used to do something magical for us"" but ""php used to keep silent about this buffonery"", so if your code does that you have bigger worries ...Almost every single one of those things are easy to fix, in that it requires mostly time not much if any redesign, "	nolok	12.714334	-6.6521673	comment	3.0	17.0	1606406415	10.329034
25222496	I can't believe nobody has pointed o	I can't believe nobody has pointed out (yet) that PHP is the quintessential lambda :)That said, it's been many (many, many!) years since I moved away from it, but I'm intrigued by the state of the JIT and the current coding style (last time I checked, around 6.x, it was growing to be verbose and full of backslash-adorned-namespacing).	rcarmo	12.720139	-6.636109	comment	3.0	12.0	1606415865	10.348642
25223273	> - but I'm only half-joking when I 	> - but I'm only half-joking when I quip that PHP has evolved from its roots as a cargo cult version of Perl into a cargo cult version of Java.It's a joke in so far as it is funny - but it's absolutely correct. When you only look at the language... When looking at the VM, Java has an absolutely world class VM, with great engineering and decades worth of research poured into it.PHP has... no such thing.	adimitrov	12.728236	-6.6587973	comment	3.0	12.0	1606422359	10.274782
25266381	No, this isn't inlining. They're man	No, this isn't inlining. They're managing their own call stack and relying on undefined behavior. See the quote from the article:> BEAM/C generated a single C function for each Erlang module. Local calls within the module were made by explicitly pushing the return address to the Erlang stack followed by a goto to the label of the called function. (Strictly speaking, the calling function stores the return address to BEAM register and the called function pushes that register to the stack.)> Calls to other modules were done similarly by using the GCC extension that makes it possible to take the address of a label and later jumping to it. Thus an external call was made by pushing the return address to the stack followed by a goto to the address of a label in another C function.> Isn’t that und	azhenley	12.4590025	-7.493633	comment	3.0	14.0	1606838879	-8.752084
25270698	Ok I see. Follow up question, isn't 	Ok I see. Follow up question, isn't that the same as Python then? Or at least compiled to .pyc Python code?And, would implementing the Beam bytecode using Graal polyglot layer be a good idea then? Allowing it to leverage JVM JIT ?	didibus	12.399379	-7.3564496	comment	3.0	13.0	1606860664	-8.908132
25272214	Day 2: Perl is dead. Long live Perl 	Day 2: Perl is dead. Long live Perl and Raku	notagoodidea	12.330835	-7.0556984	story	3.0	7.0	1606871838	13.172125
25283028	I espoused this sort of rhetoric unt	"I espoused this sort of rhetoric until I worked at a PHP shop. Every other discussion was about problems posed by the shortcomings of the language, crossed with mistakes made by past staff. It's so easy to make assumptions about ""good actors"" and ""reasonable developers"" that just fly out the window with a team that picks PHP and/or doesn't know much else."	spacemanmatt	12.773385	-6.641605	comment	3.0	12.0	1606950623	10.347839
25305882	Stimulus has a very small surface ar	Stimulus has a very small surface area, but I find it really enjoyable to use when combined with Turbolinks.My only complaint/comment is that some of the HTML that I need to generate ends up being littered with so many data attributes, especially when combining multiple Stimulus controllers/behaviors.Has anybody found a clean way around that in Rails templates?	mike1o1	12.7459755	-6.5374084	comment	3.0	11.0	1607106516	12.270229
25314188	It’s not a question of age, and I th	It’s not a question of age, and I think you’re comparing apples to oranges a bit.Cobol is simply kept running. Everything it does, newer languages do better. Nobody writes new systems in it.C++ on the other hand allows you to do things that other languages simply don’t, so of course it’s still alive. New C++ projects are started every day.A lot of actively developed languages have their niche. Python looks very elegant to mathematicians and engineers, and has fast math libraries. Java has an unmatched ecosystem. And so on.I think PHP's niche is low barrier to entry. Maybe I'm wrong, what do you think PHP does better than other languages?(Edit: Sorry for editing the post while you replied. I tried to word the question in a more friendly way.)	codeflo	12.753772	-6.648113	comment	3.0	12.0	1607172963	10.363393
25336461	I understand the power of types - I 	I understand the power of types - I just wonder why the heck you are writing so much JS/TS code?Are you doing server stuff with it?You could argue here there are much better languages and platforms for that.	DrScientist	12.37227	-6.749994	comment	3.0	15.0	1607370942	-10.457506
25364750	>Error ObjectsActive Model’s errors 	>Error ObjectsActive Model’s errors are now objects with an interface that allows your application to more easily handle and interact with errors thrown by models. The feature was implemented by lulalala and includes a query interface, enables more precise testing, and access to error details.This has been in the work since Rails 5.x and I believe Lulalala extracted it from his work on Gitlab. And it was lot of hard work.Since both Github and Shopify now runs on Master, I dont think there are any other open source web framework that is more battle tested than Rails.Still waiting for New Magic though.	ksec	12.65703	-7.022804	comment	3.0	15.0	1607547188	12.363779
25364942	I did a bunch of work in rails prior	I did a bunch of work in rails prior to the 3.0 days ( probably around 2013 or so), but then switched domains to work more in data engineering.When I came back to it to scratch an itch for some pet projects, I barely recognized it. I felt completely lost.Life moved pretty fast, I guess. Are there any good resources out there for someone from the 2.x days to get back to speed?	kadabra9	12.761325	-6.9105825	comment	3.0	13.0	1607547811	12.362491
25365480	LiveView is awesome - I'd be pleasan	LiveView is awesome - I'd be pleasantly surprised if Rails were able to pull off something that good with Ruby's more limited capacity for concurrency.	aczerepinski	12.815863	-6.9217725	comment	3.0	10.0	1607549724	12.657591
25366754	Just throwing it out there for visib	Just throwing it out there for visibility, ncc will compile a TS entrypoint down to a single file as well, without having to use Deno https://www.npmjs.com/package/@vercel/nccEdit: I completely missed that this Deno release packaged the runtime as well, disregard this as an alternative! Guess I’ll eat the downvotes I deserve :P	corytheboyd	12.477441	-6.4515443	comment	3.0	13.0	1607555551	-10.903128
25495200	"> I wish all the ""big data"" tooling "	"> I wish all the ""big data"" tooling was written in Ruby.On a practical note, Ruby's heavy use of reflection, inheritance and method_missing style dispatch currently makes performance for big data tasks less than ideal.  Python is less expressive but its ""one true way"" makes things like vectorization and type specialization easier for data tasks.Sometimes you really just need a better Fortran."	abernard1	12.420043	-7.0333624	comment	3.0	28.0	1608560861	12.34089
25495274	Does some of it feel kind of redunda	Does some of it feel kind of redundant? I suppose that people have different reasons for learning languages but as someone who knows Python, Ruby is one of the languages on my not-to-learn list since it would neither allow me to work on anything that I can't work on now or introduce some new and interesting language paradigm.	st1x7	12.52918	-7.0319595	comment	3.0	10.0	1608561371	12.377485
25495468	I believe you’re confusing Ruby with	I believe you’re confusing Ruby with Rails.While these can eventually come in handy sometimes, they are by and large seldom used, but Rails heavily leverages such patterns for flashy yet ultimately questionable magic.As a long time Rubyist, I believe Rails, for all its innovation, has been warping the view of what Ruby is, and when and how to use its features responsibly.	lloeki	12.697092	-6.963568	comment	3.0	25.0	1608562808	12.35994
25508468	I get the rush to provide technical 	I get the rush to provide technical comparisons to something that was just revealed five minutes ago, but none of what you just said is actually how Hotwire or Turbo works. There's no client DOM in memory on the server, there's no html buttons that call native code.There are forms being submitted, there are normal requests happening, there are templates being rendered on a per-request basis (just like a full page load).This is like a normal web application that renders HTML, from the perspective of how the server works. Just as scalable as every other Rails application that renders HTML. Be that GitHub or Shopify or Zendesk or Basecamp or HEY or any of the many, many other apps that have long ago definitively proven that Rails Scales.Although I do find the commentary that the current #1 co	dhh	12.760457	-6.749022	comment	3.0	11.0	1608656761	12.377235
25509074	Livewire, of course, having been hea	Livewire, of course, having been heavily inspired by Phoenix LiveView https://hexdocs.pm/phoenix_live_view/Phoenix.LiveView.html	sodapopcan	12.886895	-6.8231864	comment	3.0	27.0	1608659624	-7.361078
25509151	The downside of this is very high co	The downside of this is very high coupling between the frontend and the backend. However, many companies have been successful with strong coupling to Rails so maybe it's not a problem.	antoineMoPa	12.786843	-6.7410316	comment	3.0	14.0	1608660062	12.310631
25520969	Ask HN: Experienced Back end Develop	Ask HN: Experienced Back end Developer that wants to make a website	LimitedInfo	12.581817	-6.4952955	story	3.0	1.0	1608750817	9.9303055
25528098	Can i do Ruby in rails without havin	Can i do Ruby in rails without having to learn Ruby? I like Python, I think.	ant6n	12.567275	-6.9870343	comment	3.0	11.0	1608822709	12.348297
25529030	Ironically this is exactly what I do	"Ironically this is exactly what I don't like so much about Rails.  It's such a ""batteries included"" framework that if you want to do what Rails is good for, it's going to be super easy, but if you want to do something a little bit different a lot of times it feels like you have to almost break Rails to make it work.To some degree I think it's a matter of taste, but I would much rather start from a blank slate, with a set of sensible tools to build my solution up from scratch, rather than having an almost finished product I have to carve my solution out of."	skohan	12.773688	-6.9013476	comment	3.0	11.0	1608828279	12.342596
25528761	As a Perl programmer I didn’t get th	As a Perl programmer I didn’t get the hype of Ruby. Then I wrote my dissertation on it. I still didn’t get it. Python is fine and I see it’s strengths and weaknesses but Ruby is just hipster Perl and doesn’t have Moose. Don’t, as they say on Twitter, “at” me.	peteretep	12.368191	-7.025393	comment	3.0	11.0	1608826627	12.967834
25535222	Rails is alright. It's just a great 	"Rails is alright. It's just a great scapegoat for bad teams working under impossible deadlines: ""Our code is unmaintainable because Rails! We need 1 year to rewrite it in Go/Elixir/Java"". I mean, because Rails has a flat structure you couldn't ever take the time to reactor that piece of crap code you wrote for 2 years? really? You didn't notice a model stopped making sense or growing in complexity? 
I see the same criticism with PHP. It's perfectly fine, stop blaming the tool."	joelbluminator	12.749697	-6.937823	comment	3.0	19.0	1608886527	12.356113
25535682	Rails doesn't help you form a proper	"Rails doesn't help you form a proper domain model. Or force you to put side-effects in the proper place; it doesn't help with evolving a proper data model, or avoid tight coupling in unwanted places, it has hardly any tooling in place to employ design patterns.On contrary: often it encourages bad practices through ""defacto"" standard gems, or by making ""the wrong choice"" easier than ""the proper design pattern"". A ""concern"" is a simple way to turn a 800-lines controller into four 300 lines modules that amount to the same ball-of-mud, for example. (Concerns have great use-cases, but most often it is not the solution to your problem). Rails offers things like `try(:foo)` to quickly solve that equivalent of the ""null-pointer""- exception, without forcing the developers to dive and in and solve t"	berkes	12.713342	-6.9669476	comment	3.0	14.0	1608893281	12.344561
25536420	I remember when Rails first was rele	I remember when Rails first was released. I kept the source code for Ruby and for Rails handy, and it was sort-of possible to wrap my head around both. One of the most fun non-AI conferences that I ever went to was Merb Camp in San Diego where the Merb team announced merging with Rails.I have such good memories of the four or five years when Ruby was my main driver. Great job by Matz and core team with the 3.0 release.I have gone back to my 1980s roots and now once gain use Common Lisp as my main driver, except for deep learning where I need to use Python (tried Julia and Swift).I think Matz has it exactly right. As programmers it is important to be happy using a language. Life should be fun most of the time, and there is nothing wrong with trying to optimize life for maximum joy we bring 	mark_l_watson	12.649616	-7.0115156	comment	3.0	13.0	1608903767	12.363541
25541547	Wow types in a different file... Thi	Wow types in a different file... This is like C++ but worse...Is this because Ruby is extremely difficult to parse, to the point that nobody wanted to mess with the parser?I remember reading a comment a while back from the creator of a Ruby parsing library and he said the language design is arbitrary and extremely difficult to parse correctly	throwaway189262	12.509993	-7.0828075	comment	3.0	13.0	1608959304	12.389307
25545567	...that contain “Django” in the pack	"...that contain “Django” in the package name.  AND file.project like '%django%'

How reliable is that?  Are there any well-known packages that don’t contain literal “Django” in their package names?"	WalterGR	12.800733	-6.5614057	comment	3.0	12.0	1609009599	10.087971
25565503	Each point doesn't really bear the s	"Each point doesn't really bear the same level of ""unsoundness"". Most are actually not problems at all the way I see it.1. I can live with NaN. When the source of something becomes difficult to track, use a debugger.2. Map vs map? Just another homograph, like there are hundreds in all spoken languages, yet most people manage to communicate.3. The overhead of negative indices might be acceptable in JavaScript, but most languages probably don't benefit from having them. I think negative indices are actually hurtful, they tend to hide bugs which would otherwise be caught very early at runtime.4. This is actually a serious issue. I don't get why so many people are in awe with TypeScript type system. Anything based on duck typing is a red flag to me. But still, better than no typing at all..."	ajfjrbfbf	12.331977	-6.829606	comment	3.0	18.0	1609204751	-10.436062
25575831	Ruby 3.0 Changes	Ruby 3.0 Changes	mooreds	12.626874	-7.0392165	story	3.0	36.0	1609280855	12.388395
25655004	Prolog implementations are too heavi	Prolog implementations are too heavily reliant on the stated order of predicate rules in order to make execution progress. Many predicates are non-terminating or extremely inefficient when faced with goal inversion, but are often 'fixed' by simply reversing the order of some of its rules (but making it useless in the original direction in the process). This is disappointing when trying to maximize prolog's biggest potential: building true total relations that can project in any direction with a single definition.There are technical reasons why the pursuit of term reordering is problematic, namely 'cut', which is a kind of out-of-bounds alteration of the program's execution. Previous attempts to get rid of 'cut' apparently ran into other problems. IMO the root of the issue is that prolog ha	infogulch	13.1438055	-7.2921224	comment	3.0	11.0	1609912717	-12.488016
25663753	Rails, React, Microservices and Micr	Rails, React, Microservices and Micro-FrontEnds	polysaturate	12.757085	-6.757997	story	3.0	24.0	1609973292	12.290471
25672728	Zuck the PHP dev thinks he's Emperor	Zuck the PHP dev thinks he's Emperor.	richardARPANET	12.727137	-6.5125318	comment	3.0	11.0	1610035995	10.2987175
25696736	Ruby can’t be compiled easily due to	Ruby can’t be compiled easily due to the very dynamic semantics of the language.  If you wanted to compile it, it would probably start behaving a lot more like Crystal, which looks similar but behaves completely differently.	chubot	12.588646	-7.1681976	comment	3.0	15.0	1610165049	-11.200836
25705756	Is Deno intended to be used with JS?	Is Deno intended to be used with JS? I was under the impression it was a TS runtime.	desert_boi	12.479416	-6.447068	comment	3.0	10.0	1610232100	-10.919798
25726745	> Goldman Sachs does a lot of work i	> Goldman Sachs does a lot of work in erlang but mostly to limit turnover on the dev side - try getting a job if all you have on your resume is years of working with a language nobody else uses, you can do it but it’s going to take a lot more effort on your part.My take on that is slightly different. Choosing a fairly esoteric language as a company reduces the amount of effort it takes to review applicants. Right now, if you post a job for python, you'll get thousands of applicants. You'll then need to filter them and a vast majority won't be able to code the most basic things.Post a job advert for erlang, you'll get significantly less applicants because there are fewer erlang programmers. Also, no one learns erlang to “get a job in tech”, they learn erlang because they like it as language	doix	12.57872	-7.52241	comment	3.0	11.0	1610358403	12.926339
25751176	I've been developing web apps in Nod	"I've been developing web apps in Node for a couple years and I'm done with it - I'm all in on Django + DRF now.I only made the switch a couple months ago and it's amazing how cozy I am with it: everything feels mature, stable and reliable. I reach out for 3rd party packages as needed but it doesn't feel like I'm gluing a Frankenstein together, or that I'm rolling out a bunch of code I don't want to own, or that I'm overthinking for the umpteenth time how I should structure my app. I think after a couple months with Django I'm nearly as productive as I ever was Node.js. Granted that many web dev concepts just carry over, but the feeling is uncanny regardless.Also, the ""language context switch penalty"" is a complete myth. I picked up Django by reading two books in 2-3 days, and didn't need t"	arcturus17	12.731861	-6.440253	comment	3.0	15.0	1610476043	10.0513735
35537925	This makes me so glad I don't use PH	This makes me so glad I don't use PHP.	sebzim4500	12.758661	-6.6298304	comment	3.0	21.0	1681298709	10.325164
35570903	Can you make a pitch to a Python/R u	Can you make a pitch to a Python/R user to give this a try?What you’ve built looks very nice and heard nothing but good things about elixir elsewhere, but would take a lot to leave those much more robust ecosystems. Do you hope to grow into that over time? Is there enough in terms of viz, statistical models, and ml to survive?	cjf4	12.679169	-7.4440293	comment	3.0	10.0	1681487425	12.924478
35624411	Just because of performance issues. 	Just because of performance issues. No other explanation needed really. same reason why it took some time for pure functional programming to take off too. The time for Prolog will come.	valenterry	13.018659	-7.29784	comment	3.0	28.0	1681880414	-12.473907
35624590	Good point. Most programming languag	Good point. Most programming languages have RegExp support. But very few (?) have Prolog support. That might be useful in some or many cases, like ...	galaxyLogic	13.027784	-7.2227516	comment	3.0	12.0	1681882230	-12.433634
35624927	Prolog has many issues; for instance	Prolog has many issues; for instance the lack of types and mode declarations, and backtracking almost never being what you want. This was addressed in Mercury [1] but much of the baby was thrown out with the bathwater. (IMHO Mercury ultimately landed closer to the MLs than to Prolog.) The academic literature suggests classic Prolog got fast enough in the late 1980s / early 1990s on stock hardware [2]; see also Peter Van Roy's intriguing book [3] for what happened next.IMHO it's worth learning about Prolog as a way of looking at the world -- for instance Isabelle and Lambda Prolog are essentially logic programming engines, albeit with more sophisticated terms and unification algorithms.[1] https://mercurylang.org/[2] https://www.hpl.hp.com/techreports/Compaq-DEC/PRL-RR-36.pdf[3] https://www	discarded1023	13.134292	-7.292301	comment	3.0	13.0	1681885867	-12.485848
35624951	> as that is a part of the core sema	> as that is a part of the core semantics for BEAM languages.It's a part of the semantics of the runtime:- an actor is all but guaranteed to not bring down the runtime- an actor is all but guaranteed to never affect other actors- runtime knows how put processes to sleep until the message they listen to arrives. This means all functions are re-entrant. Well, any process is put to sleep after a cretain number of reductions so that no process takes away time from other processes.- runtime all but guarantees that process errors are a) isolated and b) propagated. That is when a process dies all other processes that monitor it are guaranteed to receive a notification. That's why supervision hierarchies in Erlang are possible	illiarian	12.4000635	-7.5146675	comment	3.0	12.0	1681886077	12.8545885
35625051	Prolog being tied to this very speci	Prolog being tied to this very specific execution model of SLD resolution is somewhat root to the problems you have described. The promise of declerative programming in general, and logic and constraint programming specifically is, that programs are easier to reason about because the execution model is abstracted away and there's a relatively simple and mathematically pure definition of the model(s) of a program.But again and again one uses extralogical constructs in Prolog programming.Case in point: basically all your mentioned alternatives (Datalog, SMT, I'd add ASP) have implementations that use the Prolog syntax or something close to it with very similar semantics. But not being tied to that specific execution model can give you (better) answers or more complete answers, termination gu	maweki	13.131884	-7.283342	comment	3.0	18.0	1681886868	-12.485155
35625179	Also the BEAM bytecode compiler and 	Also the BEAM bytecode compiler and runtime are incredibly slow and unoptimized. It doesn't matter much for process handling and IO dominant workloads, but you would not want to run it with normal tasks.An AOT compiler with better optimizations will run circles around BEAM on benchmarks.	rurban	12.364908	-7.3632226	comment	3.0	18.0	1681887834	-8.75254
35625480	> This is true of most (all?) langua	> This is true of most (all?) languages.Well no, I’d go as far as to say that your average JS/Python dev will know very little about how their code is executed — and doesn’t need to know necessarily. SQL on the other hand is a different story . Noobs don’t know , but pros know and consider the execution graph of a query.You don’t really have a choice in Prolog —- gotta know what the interpreter is doing from the beginning otherwise you can’t debug.	usgroup	13.1530285	-7.2258606	comment	3.0	11.0	1681890391	-12.468569
35635248	Did this just make numerical computa	Did this just make numerical computations, something Erlang is known to be very slow at, 4x faster?	alberth	12.539067	-7.5018682	comment	3.0	20.0	1681953504	12.918627
35660096	While you may pick, most developers 	While you may pick, most developers do not. You are not the most developers, as you are special and probably much more talented.They pick JS because they know the language best and are more productive in it than in Laravel. There is nothing Laravel can do about it - being best is not going to change the direction, because the limiting factor is the knowledge of programming languages of most of developers.	miohtama	12.763936	-6.594712	comment	3.0	20.0	1682110944	10.327793
35660127	If you're not trying to make your pr	"If you're not trying to make your programs as close to logic as possible (that is, support as many modes as possible and make it so you can model your program as a logical expression) then what's even the point of using Prolog? Settling for having to reimplement the same logic in multiple directions completely defeats the purpose, you're just writing imperative code at that point.I think ""pragmatic therefore non-logical"" versus ""ivory tower therefore useless"" is a false dichotomy. In my experience it's nearly impossible to make green cuts, and once you know a few tricks and rules of thumb, you can get pretty far writing logical code."	superdisk	13.144394	-7.2933164	comment	3.0	15.0	1682111114	3.3968875
35671422	they have the best sudoku games I co	they have the best sudoku games I could find	gverrilla	13.448326	-7.407701	comment	3.0	11.0	1682201870	15.072431
35684984	Author here, thanks for sharing!This	Author here, thanks for sharing!This is a strategy I’ve used across many projects in several languages, from big Rails apps to the Go monolith we deploy at incident.io today.It’s just one way you can make a monolith much more robust without moving into separate services, which helps you keep the benefits of a monolithic application for longer.Hope people find it interesting.	lawrjone	12.669199	-6.934856	comment	3.0	14.0	1682324735	-13.797669
35685250	This is standard practice on monolit	This is standard practice on monolithic apps. It is effectively an N-tier architecture. On Rails it is very expected that you would deploy the same codebase to two tiers (web and worker) and simply run rails s in one and sidekiq in the other.	rezonant	12.769029	-6.8866453	comment	3.0	18.0	1682327203	-13.551464
35700687	ReasonML and ReScript are a (more or	ReasonML and ReScript are a (more or less the same) new syntax on top of OCaml. ReScript only targets JS, while ReasonML targets both JS and the native archs OCaml supports. Facebook and Bloomberg are using ReScript internally, afaik. Messenger.com is written in it. Facebook also maintains React bindings to ReScript.https://rescript-lang.org/https://reasonml.github.io/	cies	12.342774	-7.599172	comment	3.0	12.0	1682431630	10.345052
35710422	Interesting, it caught quite some bu	Interesting, it caught quite some bugs: https://github.com/WhatsApp/erlfuzz#some-of-the-bugs-found-s...I wonder what triggered this work at WhatsApp. Are bugs in the ErlangVM frequent enough to motivate the effort? Was it a side-project that was then allowed/founded by the company afterwards? Do WhatsApp have a dedicated team focused on improving the Erlang ecosystem?	gjadi	12.6769495	-7.386491	comment	3.0	10.0	1682493064	-5.933658
35730665	Question to people having used Datom	"Question to people having used Datomic:Based on experience with Prolog, I always thought using Datalog in a database like Datomic would mean being able to model your data model using stored queries as a very expressive way of creating ""classes"". And that by modeling your data model using nested such queries, you alleviate the need for an ORM, and all the boilerplate and duplication of defining classes both in SQL and as objects in OO code ... since you already modelled your data model in the database.Does Datomic live up to that vision?"	samuell	13.175645	-7.039996	comment	3.0	44.0	1682613319	9.686128
35752069	Something that still stop me from us	"Something that still stop me from using Deno is the incompatibility between Deno and other tooling regarding the import of TypeScript files.
Namely, it is not possible to import a `.ts` file via a `.js` import [0].[0] https://github.com/denoland/deno/discussions/18293"	conaclos	12.468284	-6.4897757	comment	3.0	13.0	1682769123	-10.8554125
35754983	I run FPGAjobs.com as a fun side pro	"I run FPGAjobs.com as a fun side project, and this describes my relationship with my product to a T.I love the ""Fuck around and find out"" aspect of it. I can goof off and do fun things that occasionally add value to the business. Case and point: my all time most viewed page is a page that shows you a random FPGA meme. I threw it together with a bunch of FPGA memes that had made me laugh that I saved locally in a folder on my desktop. Net result: tons of backlinks, high engagement, and regular conversions of email list sign-ups. (https://www.fpgajobs.com/dank)Funnily enough, ChatGPT has helped immensely with my ability to both putter about. ChatGPT can bang out Django features that'd take me a week in 10 mins. Most of that time is me copy/pasting and fixing the odd variable name that didn't"	cushychicken	12.791434	-6.480937	comment	3.0	14.0	1682789043	10.069392
35816245	I think this taxonomy is interesting	"I think this taxonomy is interesting, but I have some quibbles on the characterization of the languages I use the most.If I were to put Ruby into one of these categories, I would place it first under Self (the object-oriented languages). Ruby is the most object-oriented language that I've ever used in that everything is an object that you send signals to. Even classes in Ruby are objects (they are instances of the `Class` class). Ruby was explicitly inspired by Smalltalk, one of the two exemplars cited by the post.After the ""Self"" category, Ruby would fit better under the ""Lisp"" family than the ""ALGOL"" family because of Ruby's deep metaprogrammability.I'm guessing the author was fooled by the availability of C-style `for` loops in Ruby, but that's generally not how Ruby programmers write a"	neallindsay	12.493777	-7.120026	comment	3.0	12.0	1683211807	12.363225
35822539	I played with it and subsequently tu	I played with it and subsequently turned my back on it in favor of alpine.js and some vanilla JavaScript to handle client state with Flask on the back end.The reason I gave up on Pynecone is that these things transpile to other already high abstraction frameworks like React. This is all good and well until something goes wrong and you now have more layers to troubleshoot. Another huge downside to this approach is that now I have to deal with two sets of build and deployment tools: python and node. And given that I have few fond memories of the node tool set from previous project, I refuse to incur this complexity unless it's absolutely unavoidable.If someone actually built something like Pynecone that targeted html/dom/js directly instead of wrapping node/react/next I would be the first to	abraxas	12.371467	-6.463345	comment	3.0	14.0	1683236770	9.646985
35827029	Go is not a good comparison.Crystal 	"Go is not a good comparison.Crystal is expressive, 500 lines of Go commonly translate to 50 lines of Crystal.
The DX in Crystal is really closer to Ruby than to Go. It's essentially a very fast and type-safe version of Ruby."	moe	12.560438	-7.300862	comment	3.0	22.0	1683279341	-11.2250185
35828252	This reads a bit like a tautology...	"This reads a bit like a tautology...""Crystal has not taken off because Crystal has not taken off""."	rco8786	12.634675	-7.267079	comment	3.0	13.0	1683288908	-0.43722707
35831772	Django comes with a lot: auth, cachi	Django comes with a lot: auth, caching, csrf protection, an orm, the admin, form workflow, templating, migrations, i18n,  and yet doesn't come with thousands of deps.	BiteCode_dev	12.839758	-6.524294	comment	3.0	11.0	1683304858	10.11647
35834254	I'm genuinely curious, why do you mi	I'm genuinely curious, why do you miss Ruby, or why would you prefer it overall over TS ?When I was playing around with ruby for any significant sized projects, I found it became unmaintainable. Granted I was most definitely using it wrong, but apart from that, I didn't see the appeal.	bilekas	12.625884	-7.03574	comment	3.0	19.0	1683316016	12.379379
35836700	Now that PHP has lost its massive de	Now that PHP has lost its massive deployment advantage, step up to Rails or Python.	pbreit	12.720421	-6.6816835	comment	3.0	11.0	1683332343	10.403227
35839523	Don't get your hopes up, Crystal is 	"Don't get your hopes up, Crystal is doomed to never become mainstream.We can divide programmers into two camps, those that enjoy programming itself and those who use it as a means to an end. The latter greatly outnumber the former, let's say 9:1. That massive disparity in numbers is why only the languages that enable the latter group thrive.Ruby is the perfect example, the language got a massive exposure boost due to Rails, but once the hype died down, everyone left. That's because beyond Rails, Ruby has nothing to offer to programmers who want to get stuff done. Nothing besides pain, of course.To those who enjoy playing with languages, ""did you know there are 10 different ways you can filter an array in Ruby?"" ([1]) is joyful to hear. But when you're woken up at 3am to find a bug in produ"	Mawr	12.595896	-7.155783	comment	3.0	11.0	1683363522	12.360911
35845376	At my current place of work, we have	At my current place of work, we have this strategy and I think it's a mistake. app/lib is just another way of writing app/service. It becomes, over time, a chaotic place where everything goes. If it doesn't fit for _any_ reason, app/lib becomes the place where those files live.The benefit of lib/ is clearer in my opinion. Files that live there are only explicitly loaded. Some might be loaded in development, some in production, some in test. The conversation about the structure becomes more important because you need to think about what is going to consume your class.But I think we could take this a step further and instead replace lib/ with engines/. This way, you can create multiple Rails engines that will have their own paradigm and environments' handling.Every Rails application I got to	p-o	12.749495	-6.9068294	comment	3.0	11.0	1683407311	12.35609
35846269	I do wish we were in the timeline wh	I do wish we were in the timeline where we got a super powered jsdoc, instead of TS.Something like that would be my guess for what’s next, once this current trend has run its course.	danpeddle	12.365197	-6.7344794	comment	3.0	11.0	1683415206	-10.4613495
35855482	> there is a good reason people shy 	> there is a good reason people shy away from PHPPlease share it. And don't rely on articles that are more than a decade and 3 or 4 versions of PHP old.	iLoveOncall	12.772017	-6.6324606	comment	3.0	32.0	1683492564	10.354865
35856075	FWIW, there's the entire field of In	FWIW, there's the entire field of Inductive Logic Programming focussed on learning/training (propositional or predicate logic) theories in Prolog syntax from examples presented as Prolog facts, with established packages such as Aleph and ProGolem also implemented in Prolog. See eg [1] for an ISO Prolog port and recent optimization/parallelization of Aleph.[1]: https://quantumprolog.sgml.io/bioinformatics-demo/part1.html	tannhaeuser	13.14044	-7.292944	comment	3.0	10.0	1683497254	-12.467434
28692296	Interesting; Stripe claims 22-170% s	Interesting; Stripe claims 22-170% speedups with its Sorbet-based compiler for Ruby: https://twitter.com/patrickc/status/1410269843585069056?s=19That may be based on wildly different benchmarks, but still sounds much more compelling than 7-40%.I wonder what drives the difference...	rattray	12.620753	-7.040763	comment	3.0	13.0	1632914423	12.37021
28692353	Calling into GEM from GFA Basic was 	Calling into GEM from GFA Basic was dubious because GEM AES made heavy use of void pointers, casting, and other C-isms. GFA was of course a garbage collected interpreted language. So GFA had its own wrappers for a bunch of stuff, but not everything.It was an excellent basic though. With a top-notch IDE-like editor with auto-complete, auto-indentation, folding, etc. I tried for years to find a similar experience with other languages on Linux, etc.	cmrdporcupine	12.590483	-7.0499673	comment	3.0	16.0	1632914923	12.375338
28694837	No one says that Ruby is dead, beyon	"No one says that Ruby is dead, beyond in the rhetorical ""as the cool new thing"" angle. But sure, there are companies that were started with Ruby back when it was the cool thing (2008 - 2011ish), and inertia, along with a heavy dose of cargo culting, has them doubling down. If those companies started in 2019 they'd be all in on Go. Today...I don't know...Rust?I posted a couple of weeks back that it is remarkable that almost all Ruby advocacy/development comes from Shopify, and here is yet another example. Similarly, recent claims about Ruby's growth among the ""top N websites"" was more than 100% accounted for purely by a quirk in the way Shopify implements their storefront (as a subdomain which allowed Shopify's choice of technology to trojan horse in the metrics onto hundreds of thousands o"	defaultname	12.66405	-7.02637	comment	3.0	18.0	1632928577	12.361446
28696520	I have another way to look at the sa	I have another way to look at the same thing. Ruby/Rails as a development language/framework is great and no doubts about it. I used it for many years. Would I recommend it for any new project / startup now (other than a simple CRUD with a handful of users) - No.Shopify or Stripe are huge companies with massive codebases in Ruby, perhaps so complex that they are better off making investments in Ruby performance rather than re-writing their stack.In fact, the very fact that these companies have to spend so much time trying to make Ruby work well tells me that something is not right.For a startup which has limited resources why should I wait for 10% improvements in Ruby performance every 6 months, when I can already get on the rocket-ship of performance that is - Node.js or JVM or even Elixi	rockyj	12.729831	-6.9448195	comment	3.0	14.0	1632934835	12.351472
28698868	I don't think the speed of Rails wil	I don't think the speed of Rails will lead to a renaissance. Rails was very popular at one point because it allowed you to ship a MVP way faster than with the alternatives. It was also at the peak of Heroku, so the ops part was easy. These days it's not true. Pretty much every major language has a viable Rails alternative (except JS for some reason). You could argue that we've grown backwards, as it seems that deployments are harder than before, and same with building things. I think it's a symptom of the industry being dominated again by a few big players, so the ecosystems are optimized for them.What we might see is less people moving from Ruby/Rails to X because of speed, but that's about it.	Zababa	12.732609	-6.9466763	comment	3.0	16.0	1632944571	12.339692
28705818	True, it's still a LAMP stack, migra	True, it's still a LAMP stack, migrating it to new PHP and MySQL (now MariaDB) versions every now & then, fixing a bug here and there, adding LetsEncrypt, switching from CVS to Mercurial to Git, etc. The last big feature I added was math formulas (2 years ago or so).This project really told me how important it is to leave comments for your future self - especially, if your future self hasn't touched some parts of the code for 15 years :o)Anyway, I'm approaching 50 now, so I assume that Sensei's will be here for at least another 25 years.	arnoxmp	12.781485	-6.620441	comment	3.0	10.0	1633007109	10.326376
28743709	Because of having to know what WSGI 	Because of having to know what WSGI and ASGI are and picking the right one. Then pick which implementation of the above you want to use. Then configuring it correctly for your app. And finally make it play nicely with nginx/apache/whatever.If on the other hand you're trying to deploy a desktop app, that is an entirely different kettle of 'fun'.	dagw	12.4180355	-6.5636606	comment	3.0	10.0	1633329121	9.802183
28744634	I have not found this to be the case	I have not found this to be the case in Typescript code I've worked on. The main issue I've found with TS is stuff coming in from outside the system as JSON that doesn't conform to expected formats.	cageface	12.371387	-6.7735147	comment	3.0	10.0	1633338442	-10.443156
28744499	Misunderstanding professionalism and	Misunderstanding professionalism and the new Ruby code of [mis]conduct	tripu	12.571718	-7.059548	story	3.0	37.0	1633337104	12.405188
28769843	Use tools that make it harder. Immut	Use tools that make it harder. Immutable datastructures, side effects constrained to a few places, good static typing etc.Where I worked before we had 100k LoC Elm projects with virtually no bugs.Now I'm working in a python/django codebase with probably thousands of small hidden bugs.	matsemann	12.595676	-7.3104606	comment	3.0	14.0	1633501458	-12.7557955
28780991	My understanding from talking to {cu	My understanding from talking to {current,former} {Amazon,Twitch} employees is that Twitch has retained a decent amount of engineering independence. For better or worse, it's unlikely that some rando at Amazon ended up with this particular PHP file on their desk.	woodruffw	12.770912	-6.633132	comment	3.0	10.0	1633572568	10.386992
28795263	LiveWire Review (1998)	LiveWire Review (1998)	AntiRush	12.862112	-6.755772	story	3.0	10.0	1633662052	-7.432121
28797746	Lucid – software architecture for sc	Lucid – software architecture for scalable Laravel projects	mulkave	12.807713	-6.631196	story	3.0	17.0	1633689925	10.362439
28800617	I don't know, I think the syntax is 	I don't know, I think the syntax is ok but it definitely has significant downsides, like making lambda functions stupidly hard.Python's competition isn't PHP; it's Typescript.	IshKebab	12.546569	-6.7552977	comment	3.0	33.0	1633708410	10.253286
28803392	"    Estimated Response Times
    100"	"    Estimated Response Times
    100-300ms Django with warm cache
    500ms-2s Django with cold cache

That sounds very slow to me.How do these numbers compare with other popular frameworks like Laravel, Symfony, Flask, nextjs ... ?I for one use my own PHP framework (own routing, templating engine, db abstraction) and see response times of about 40ms."	TekMol	12.757593	-6.4487743	comment	3.0	11.0	1633722607	9.9716625
28821517	Very well written. Fun little tidbit	Very well written. Fun little tidbit, Django abuses the fact that bools are ints in it's partition util:https://github.com/django/django/blob/01bf679e59850bb7b3e639...	DangitBobby	12.827104	-6.5351934	comment	3.0	13.0	1633896167	10.082333
28841290	Not OP but I do tend to avoid TS. I 	Not OP but I do tend to avoid TS. I don't like the additional friction of working with the language (transpiling, unable to copy/paste directly into an interpreter). I also feel like the community at large writes awful baroque code that makes me want to die. Why use a function when 18 classes subclassing eachother across 4 files will do? If you're familiar with the tiktoker @khaby.lame, TS feels like exactly the over-complicated life hacks he mocks.	errantspark	12.342525	-6.8207498	comment	3.0	21.0	1634054157	-10.494012
28850345	Like I said, It becomes harder and h	Like I said, It becomes harder and harder to avoid it and that worries me. I used Laravel because anyone could just hop in and be productive.. I've asked myself why I'm not using just Symfony already, because I think Laravel is something that it's not anymore, or wasn't ever. Laravel is basically Taylor's view on how people should write code.	dncornholio	12.80189	-6.6461086	comment	3.0	11.0	1634120037	10.327651
28860907	ESbuild is getting fantastic tractio	ESbuild is getting fantastic traction. It’s the default in Phoenix from 1.6 and comes as a default option in the current alpha of Rails 7, which you can get with a simplerails new your_app -j esbuildThe only sort of issue I’ve had with it so far is you can’t use it with Inertiajs[1] as it does not support dynamic imports out of the box. Although I’m hesitant to call it an issue if its not in the scope of the project. Perhaps there are plugins I can use.[1] - https://inertiajs.com	louissm_it	12.752288	-6.8774714	comment	3.0	10.0	1634190721	12.350353
28861079	What do you think of the importmap a	What do you think of the importmap approach propagated by dhh on rails 7?	hit8run	12.733013	-6.88211	comment	3.0	10.0	1634192345	-10.449064
28875475	This is the same guy from the failed	"This is the same guy from the failed sudoku solver... http://ravimohan.blogspot.com/2007/04/learning-from-sudoku-s...Maybe he had also tried TDD ""wrong""? Or maybe he's just another snake oil salesman, like ""uncle"" Bob?"	tincholio	13.452349	-7.4109797	comment	3.0	24.0	1634284899	15.078512
28877407	Rails.Switched from Django two years	Rails.Switched from Django two years ago and never looked back. Having worked with both, Rails is more polished and pleasant to work with.Side note: if you're building a business and already know Python/Django, stick with them!	jmstfv	12.782141	-6.7158437	comment	3.0	12.0	1634304151	10.316456
28877596	Number 1 isn’t a show stopper in any	Number 1 isn’t a show stopper in any way but is it pretty annoying. The primary django docs are very textual and place more emphasis on developing intuition and understanding context, than something that can be quickly referenced. Also a lot of the method parameters are either not documented or not explained. I think Django would benefit from a more technical and complete but less dense secondary reference.	dc-programmer	12.837267	-6.525973	comment	3.0	17.0	1634305401	10.117623
28877720	> in my opinion I have yet to see an	"> in my opinion I have yet to see any project have better documentation than DjangoI'm partial to Symfony. Good ""getting started"", per component documentation and links to cookbook-style articles for things people tend to want to do."	arkh	12.825542	-6.521131	comment	3.0	10.0	1634306184	10.08761
28878760	Django has one of the best source co	Django has one of the best source code base I ever saw, in 20+ years of doing software. If anyone has issues reading the Django source code, they probably should stay away from software development.	pbalau	12.817411	-6.524939	comment	3.0	12.0	1634311553	10.087145
28885025	Maybe someone here knows: is there a	Maybe someone here knows: is there a standard transformation from sequential logic to combinational logic? I'm thinking something like that immediately gives me the 3sat representation of an algorithm that has an iteration step.	tubby12345	12.906287	-7.2361417	comment	3.0	15.0	1634350475	-12.478309
28919389	> the reason python beat out ruby wa	> the reason python beat out ruby was almost entirely due to ruby being really really slowRelative to Python, that language which notoriously makes C look like a sloth on training wheels...	samhw	12.491936	-7.031116	comment	3.0	10.0	1634658218	-2.2382784
28920255	> Python is such a joy to write and 	"> Python is such a joy to write and such a nightmare to set up, package and distribute.Here's my simple-minded metric on when this problem can be called ""solved"":Get a VPS from GoDaddy.Deploy your Django app as easily as you can deploy a PHP app, say, Wordpress.I have written about this before.  I love Django.  And yet I think that they have done a huge disservice with the development server and DB configuration out of the box.  Even for a simple application, going from developing on your desktop to deploying the same application on, as an example, GoDaddy, is in a range between nightmare and impossible.  I have personally given up multiple times and just said ""Fuck it! Just use WP"" even when I really, truly wanted to stay in the Python/Django ecosystem.Try it.  Develop a simple photo albu"	robomartin	12.63405	-6.524286	comment	3.0	13.0	1634662036	9.967905
28921406	This is a really bad analogy though.	This is a really bad analogy though.A spice rack has to do two things1) hold spices2) Not fall apart3) optional : try not to look terribleIf I went through and tried to document every different concern my rails app handles, I 'd probably just give up after a few days of research and a list of thousands upon thousands of concerns.Spice racks don't need to change and evolve over time, a third party can't remotely ruin your life if your spice rack has a design flaw, your spice rack can't make you millions of dollars.So I get that this guy wants to go write tcp/ip stacks from scratch to build his neopets page or whatever but it's the wrong design decision for a vast, overwhelming porportion of projects.	anm89	12.762295	-6.868096	comment	3.0	13.0	1634667066	12.343085
28932432	The only reason I know Perl is becau	"The only reason I know Perl is because I'm old enough to have started in the 90s when it was the new hotness. Starting today I'd obviously have learned JS or Go or Java or Rust or Python instead. Perl in 2021 probably seems like some curious antique like AWK, if they've even heard of it.That is the real problem I think. There is just no good reason to use it, and thus learn it. It doesn't do anything better than the alternatives. It's not ""dead"" but there is very little new blood entering the scene. It's a retirement home."	pram	12.327037	-7.0090256	comment	3.0	19.0	1634746171	13.2059555
28932603	While the authors accusation audit i	While the authors accusation audit is impressive, I can assure you, as a CPAN contributor and someone who has launched some very successful Perl web apps, that Perl is in fact, completely and utterly dead. It died well over a decade ago when all focus moved to Perl 6 which didn’t emerge until recently. Everyone moved on except a hardcore group of advocates. They aren’t coming back. If a new language and community emerges that happens to have the same name, I’ll certainly take a look. That hasn’t happened yet. And it’s a damn shame because the mod_perl list and community had some killer talent in it that was creating the most innovative and heigh performance web applications out there. I created WorkZoo in Perl which was a very high performance job meta search engine and was one of Time Mag	mmaunder	12.328866	-7.0146255	comment	3.0	42.0	1634747058	13.172676
28935385	I have a tattoo of a Perl camel, and	"I have a tattoo of a Perl camel, and of a Ruby ruby. I loved Perl, but to me anyway, Ruby was 95% of the good stuff of Perl, with 5% of the downsides. Some of that last 5% of good stuff was things that you could even argue isn't actually good stuff, but I like it anyway. ($_ is my go-to example for this.)""Why not {Ruby,Python,PHP,JavaScript}?"" is imho the question that Perl has to answer, and hasn't found one that enough folks find compelling, it seems.This thread is making me so nostalgic... it's hard to overstate how influential Perl was on me."	steveklabnik	12.369858	-7.0309687	comment	3.0	11.0	1634759430	12.994151
28942989	PHP 7.4 isn’t even available in Ubun	PHP 7.4 isn’t even available in Ubuntu 18.04 LTS without a third party repo.I wish PHP.net could get some support to provide official repos of their own. It would make upgrading easier.	mattl	12.780523	-6.6441054	comment	3.0	10.0	1634816113	10.330125
28943258	Everything you say is also true for 	Everything you say is also true for Java or Kotlin, which are better languages and have even better backwards compatibility story. You also left out all the downsides of PHP so it looks more flattering than it should.So while PHP is ok, why choose PHP when you can choose Java/Kotlin?The only benefit of PHP over Java/JVM-langs is probably memory usage, which is generally not that important of a factor in today's environment where memory is cheap and devs are expensive.I think unless you are already super familiar with PHP it's probably not the ideal choice. You could do worse, but you can also do better with Java/Kotlin/C# all of which have the good parts of PHP but none of it's bad parts, higher quality ecosystem, higher quality devs, better tools, faster runtime, etc.	jpgvm	12.732524	-6.642457	comment	3.0	35.0	1634818243	10.341366
28943310	> Everything you say is also true fo	> Everything you say is also true for Java or KotlinUhh no.  Getting a local dev environment set up for PHP is much much easier.Writing your first line of code and seeing things run in a browser is much much easier.Uploading a single standalone PHP file you wrote to your 5$ webhost via SFTP, with _no other work required_ and just seeing your code run on your website?  Show me how to do that exact thing in almost any other web programming language.  You can't.No one said PHP was perfect, and I'm not here to defend all the problems, but to compare PHP's almost universal accessibility and ease of use (which is why it is so popular) to something like Java or C# is ridiculous.	sbarre	12.747698	-6.6265807	comment	3.0	15.0	1634818555	10.273079
28943433	PHP is one of the easiest language t	PHP is one of the easiest language to install on Apache and later web servers.  It is also a no brainer to install software written in PHP on those servers.  It is a wonder why other language implementors haven't looked at doing the same thing.	protomyth	12.751052	-6.6140795	comment	3.0	10.0	1634819342	10.320111
28946803	There is some creative engineering g	There is some creative engineering going here :) have a look:https://github.com/timescale/tsbs/blob/master/scripts/load/l...vshttps://github.com/timescale/tsbs/blob/master/scripts/load/l...	rkwasny	12.34144	-6.553175	comment	3.0	18.0	1634833356	-10.426734
28954525	Ruby Together and Ruby Central, comi	Ruby Together and Ruby Central, coming together	thunderbong	12.631933	-7.0401735	story	3.0	78.0	1634887756	-12.600514
28966315	As a contributor to Scryer Prolog (I	As a contributor to Scryer Prolog (I designed the logo!), I find this project to be one of the most exciting current developments in the logic programming community, and one of the most promising new Prolog systems in many years.Notably, Scryer Prolog is currently the only free Prolog system that aims for full conformance to the Prolog ISO standard, supports constraints such as dif/2, CLP(B) and CLP(ℤ), includes the most recent declarative features such as if_/3 and and the ..._si/1 family of predicates, provides support for sound unification and an alternative execution strategy called SLG resolution, and also implements a very efficient internal representation of lists of characters and partial strings, thus making it the first Prolog system in decades with the potential to efficiently s	triska	13.137577	-7.298765	comment	3.0	17.0	1634972119	-12.501953
28967560	Could someone knowledgable in the to	Could someone knowledgable in the topic explain in simple terms what can be done in Prolog and not in other mainstream languages? Thanks.	leandot	13.140359	-7.2929087	comment	3.0	18.0	1634989883	-12.462073
28967624	The Erlang world is obviously full o	The Erlang world is obviously full of bright people with cool ideas, but difficult string handling is a deal breaker for me if I intend to use a language in production grade projects. Is Elixir better at it?	mkl95	12.649183	-7.482573	comment	3.0	10.0	1634990674	12.925586
28979028	Ask HN: What do you think about Elix	Ask HN: What do you think about Elixir and Phoenix for web/mobile app?	mrsmee89	12.82568	-7.1438503	story	3.0	7.0	1635090503	12.791093
34125742	Wish one day Ruby will have strong M	Wish one day Ruby will have strong ML library support. Then i could just use Ruby for all the things.	revskill	12.600802	-7.0266113	comment	3.0	14.0	1671961656	12.365986
34125943	to be blunt. I dont care. I dislike 	to be blunt. I dont care. I dislike python, and i like ruby. I'm sure benchmarks will appear to tell us why ruby is slow, sucks, dead, etc. hell ycombinator is a hate club against ruby.as per speed, ruby 3.2 is 10% faster than 3.1 on shopify infra.	claudiug	12.508201	-7.0152607	comment	3.0	11.0	1671964129	12.347785
34126018	We'd already deployed a prerelease v	We'd already deployed a prerelease version and started serving all Shopify storefront requests with Ruby 3.2 earlier this week. Here is a Twitter thread from me about all the work that into this release from Shopify with respect to performance and stability: https://twitter.com/paracycle/status/1605706226007941122If you have any questions, I am more than happy to answer them here. Merry Christmas everyone!	ufuk	12.75328	-6.942067	comment	3.0	23.0	1671964866	12.368094
34126446	Thanks for the detailed write-up. Gr	Thanks for the detailed write-up. Great to see Ruby getting so much love. Already looking forward to 3.3Is it a dumb question to ask what additional tooling you use to hop from one version of Ruby to another? There are so many: RVM, Rbenv, …	igravious	12.62737	-7.0465617	comment	3.0	14.0	1671969365	12.370953
34134380	>  The sluggishness of tsc remains a	">  The sluggishness of tsc remains a pain point for many developerstsc isn't just slow, it's SLOW.    % : >file.ts
    % time tsc file.ts
    tsc file.ts  3.26s user 0.15s system 145% cpu 2.347 total

3.2 seconds is just embarrassing. Nothing is even close to this; every other compiler or interpreter is in the dozens or maybe low-hundreds of ms. clang++ -O2 and rustc are both ~150-200ms, and these are not compilers known for their excellent performance. The startup time of tsc is an order of a magnitude slower than anything else. I didn't measure lines of code/second performance, but with such a slow startup time it's not that important because no matter how small your project: typescript will be ridiculously slow.I don't want to run any ""watchers"" or special dev servers for the frontend o"	Beltalowda	12.341183	-6.7621183	comment	3.0	28.0	1672026760	-10.465472
34134652	Is it really much of an issue? I wor	Is it really much of an issue? I work on a large TS project on a 2020 m1 MacBook and I’ve never been aware of the ts compilation. It seems snappy enough.	Gigachad	12.339434	-6.7095346	comment	3.0	25.0	1672029614	-10.474548
34136081	It's been really interesting to see 	It's been really interesting to see a Ruby article on the HN frontpage almost every week. I wonder what's causing that?	faraaz98	12.722336	-6.9590163	comment	3.0	11.0	1672046637	12.390093
34136210	And Ruby code deployment story got a	And Ruby code deployment story got another nightmare to tell! Not only now you require GCC and a bunch of -dev pages just to install the gems, now entirely different language toolset	ilyt	12.631204	-7.0358143	comment	3.0	10.0	1672048270	12.376902
34144296	It's nice to see this on the front p	It's nice to see this on the front page. AFAIK, many years ago the development team split and BeamNG.drive was born. Rigs of Rods stagnated with new features and development, while BeamNG continued improving and adding new content. Today BeamNG is far superior in every aspect: physics, graphics, content.	saturn5k	12.4227495	-7.3574457	comment	3.0	18.0	1672107749	6.6890426
34146241	In my web apps, I make dates text bo	In my web apps, I make dates text boxes that can handle inputs like “next Thursday”, “Monday at 5p”, etc by running the inputs through https://github.com/mojombo/chronicI like the idea of inputs being able to make sense of as wide of a variety or formats as possible.For number inputs I’d like to build into Rails something that can handle basic math expressions. For example, a person can enter “120 / 2” in an input and get 60. This is useful for expense apps where you need to expense half of something.If folks are interested, I can open source these bits. I’d like to expand them as much as possible to handle an even wider variety of inputs.	bradgessler	12.656478	-6.787545	comment	3.0	12.0	1672126785	-5.952
34190284	Control Pandas, Polars, or SQL from 	Control Pandas, Polars, or SQL from One DSL	jmount	12.355068	-6.50567	story	3.0	34.0	1672435493	10.073127
34189421	I'm building a startup in my free ho	I'm building a startup in my free hours using Phoenix Liveview. I can ship features in hours vs days thanks to the simplicity liveview gives me. ZERO react/JS nonsense.I back to writing server side rendered templates with for-free reactivity. Give it a try it's very productive	sergiotapia	12.898644	-6.831449	comment	3.0	26.0	1672430908	12.711579
34189803	As someone who probably has more exp	As someone who probably has more experience with Ruby than you do, and probably less with Python, I'd characterize the relationship as inverted -- Ruby is more consistent than Python.In Ruby, parens are optional for all methods, and only required if you need to force non-default precedence.Returning the value of the last expression seems reasonable to me (just like a UNIX shell).In Python, I'm bothered by the little inconsistencies. Why is str.len (or length, or size, or count, etc) not a method? Why len(str) instead?And Python has plenty of oddball syntax: significant whitespace, triple quotes?? You get used to it of course.Ruby and Python are about equally efficient -- if you're optimizing for code efficiency, both are bad choices. In many domains, that's not a critical metric, so we tal	quesera	12.380784	-7.02983	comment	3.0	10.0	1672432678	12.378149
34190216	Has anyone figured out how to do sta	Has anyone figured out how to do static typing in Erlang yet?FB a few years ago announced they were going to work on it for WhatsApp but then it was indefinitely delayed. There’s also been a few other attempt, but I don’t believe anyone has succeeded.I know Gleam exists but haven’t dug into it.Anyone more in the know care to share?	tiffanyh	12.513472	-7.4790382	comment	3.0	16.0	1672435056	-12.263134
34190267	What’s been your experience with Liv	"What’s been your experience with Live View?I ask because I’m under the impression that using it comes with some sizable scaling problems, which somewhat defeats the point of using Erlang in the first place.I could be wrong though. Would
like to learn more."	tiffanyh	12.88452	-6.897383	comment	3.0	27.0	1672435344	12.730338
34189349	Elixir/Phoenix has hit full-stride.I	Elixir/Phoenix has hit full-stride.I feel like the next big unlock in user adoption is continued improvements to BeamAsm. Hopefully something on the order of 100-200% raw performance speed up. Note: I’m talking about raw perf, not concurrency.A few other additions to Phoenix 1.7 include:- verified routes- tailwind built in- additional web server support (bandit)https://www.phoenixframework.org/blog/phoenix-1.7-released	tiffanyh	12.754059	-7.2176366	comment	3.0	59.0	1672430621	12.770058
34194903	it takes like 6 lines of code to hav	it takes like 6 lines of code to have a working flask endpoint to deploy a quick and dirty API. About a billion files for phoenix. I hate that too.	fud101	12.717812	-6.5710063	comment	3.0	11.0	1672478606	9.959202
34196250	Hm, I wouldn't say that conformance 	"Hm, I wouldn't say that conformance to ISO makes a Prolog more ""interesting"". More useful in certain kinds of applications like the ones you point out, sure.In my experience, there are two Prolog worlds, and that has been true right from the beginning of Prolog with Kowalski coming from the world of pure mathematical formalisms, and Colmerauer coming from the world of pragmatic, practical programmers. The power of Prolog (no pun intended :) comes from the tension between these two worlds.If Kowalski had his way, Prolog would probably be a perfect jewel encased in golden amber, completely unusable but a wonder to behold. If Colmerauer had his way, Prolog would be a quick and dirty programming language fit to replace javascript or C. But they worked together, hand-in-hand, and made something"	YeGoblynQueenne	13.150826	-7.2970276	comment	3.0	18.0	1672493278	-12.486068
34203907	>I'm perplexed by your comment. Prol	>I'm perplexed by your comment. Prolog is not a functional language. It's a logic programming language.It's my impression from its use of recursion for execution flow alongside its assign-once variables, which feel a lot like haskell's lazy evaluation.	knome	13.135634	-7.293989	comment	3.0	10.0	1672551165	-12.483373
34243808	> [3] What does the DEC10 Prolog man	> [3] What does the DEC10 Prolog manual say about the occurs check?See I.2.1. Occur Check of https://userweb.fct.unl.pt/~lmp/publications/online-papers/D...A recent related discussion: https://stackoverflow.com/questions/65600226/what-occurs-che...In general, we do agree on the observation that Prolog profits from both the theoretical and the practical side. But still even today I have the impression that the highly theoretically leaning side does not appreciate the fundamental contribution errors have on ensuring correctness properties. At least this was my impression of November 10th in Paris.Just one personal recollection (from memory) which probably also influences my view on the Kowalski-Colmerauer relation. At a META 90 tutorial/talk about meta interpreters, Sterling attributed the o	falsissime	13.150775	-7.3056154	comment	3.0	12.0	1672825675	-12.48505
34243643	I’d love for a language / framework 	I’d love for a language / framework that allows for an application to be composed of “modules” that can either be run in a single process, or deployed as multiple independently scalable processes, with a mostly transparent RPC system requiring minimal boilerplate.My IDE should be able to easily traverse the call graph. My development environment should be simple to setup.I’ve worked on microservices that required an insane amount of boilerplate to do simple things. Like 7 layers of controllers, clients, services, data services, etc, just to fetch a simple piece of data. And the developer experience of running dozens of services in a Kubernetes cluster running on my dev machine was awful.Does anything like this exist?I only dabbled many years ago but Erlang/OTP comes to mind.And tRPC for Ty	rlt	12.460648	-7.40308	comment	3.0	10.0	1672824065	12.834914
34244070	> It's slower than Ruby.Any referenc	> It's slower than Ruby.Any reference/numbers to back this up ? Just genuinely curious about this.	yla92	12.599661	-7.0237913	comment	3.0	10.0	1672828418	12.381502
34244125	did you benchmark Jruby or TruffleRu	"did you benchmark Jruby or TruffleRuby? Did you compile c-ruby with jemalloc? Normally the ""ruby is slow"" argument, is based on not being involved with ruby and solving real problems with it. Some people will just LOL this argument even harder if you add development time and code maintenance costs  on that equation."	pelasaco	12.638939	-7.0085115	comment	3.0	13.0	1672829070	12.365548
34244729	> I think the Ruby solution is more 	> I think the Ruby solution is more readable.I disagree and I’ve used both professionally for about the same amount of code.	empthought	12.538768	-7.047516	comment	3.0	12.0	1672835088	12.38608
34255621	I remember trying to learn Ruby on R	I remember trying to learn Ruby on Rails. I read all the books and started playing around with scaffolding. It was giving me problems and I was talking to a senior developer from the community about it and he said: “Everyone knows you don’t use scaffolding, no one does that.”It was super confusing because ALL of the documentation EVERYWHERE said to do it that way, but in the community of pro developers, they all knew it was just a stunt feature to make it easy to onboard.I think perhaps it is rooted in the nature of how Ruby was created, more of a an amorphous mob of hobbyist hipster pot smoking ultra laid back creative engineers who dropped out of high school versus “.NET” or Java which are backed by major enterprises.	anonreeeeplor	12.739627	-6.9405265	comment	3.0	10.0	1672890063	12.326294
34268798	I say this as a huge proponent of Ty	I say this as a huge proponent of TypeScript and static types in general: I'm fairly bearish on this proposal1) TypeScript supports a huge set of syntax for describing types, and I would be surprised if the standard ever supports all or even most of that, which would mean you can't skip the build step for most real-world TS projects2) Most front-end projects will continue to have a build step anyway because of things like JSX, minification, and bundling. And if you've got a build step already, stripping out types is one of the easier things to do as a part of it (and you would want to do it even with this proposal, as a part of minification)3) On the back-end Deno and Bun run TypeScript natively without a build step. Node doesn't, and it won't be displaced overnight, and it may end up the 	brundolf	12.409921	-6.5992928	comment	3.0	16.0	1672962857	-10.466663
34282060	It's a lot simpler for sure these da	It's a lot simpler for sure these days. I've built my indie startup with Phoenix Liveview. It's all server side rendered, with liveview sprinkling in interactivity.Can you tell it's server side rendered? https://www.gamedrop.gg/lists/slymilano/exciting-game-releas...https://www.gamedrop.gg/game/hogwarts-legacyI think there are similar tools in other platforms like Rail's and Laravel.	sergiotapia	12.892988	-6.8791037	comment	3.0	13.0	1673043404	12.718746
34286864	Recently I built a CGI script using 	Recently I built a CGI script using Perl for my own pleasure. It was quite easy indeed, just a case of importing Template Toolkit, GD and CGI.pm then printing the result to stdout. Since I'm only using CGI.pm to send the HTTP header it isn't really necessary.The result is here: https://www.thran.uk/cgi-win/fleg.plIt is a flag generator affectionately titled flegger.	HeckFeck	12.414587	-6.719891	comment	3.0	12.0	1673087243	13.135496
34287169	> a persistent process makes everyth	> a persistent process makes everything much simpler ...I started with PHP and never trusted persistent processes for anything.What if your persistent process hangs or crashes for whatever reason?Is your whole site down then, not just the part with the bug?The only site I ever made in persistent process paradigm was in ASP.NET and it didn't cause too many problems but it was more of an app, not website, with limited number of logged in users and pretty much no anonymous/guest part.	scotty79	12.70414	-6.5308504	comment	3.0	15.0	1673091416	10.214088
34287505	I feel this. The other day I decided	I feel this. The other day I decided to just use Rails for one of these personal projects that I’ve been over-engineering for a while and it’s making progress.Completely forgot how fast Rails makes everything. Based on the experience I’m probably going to force myself to just use Rails for any personal stuff now and figure if any of them actually take off I’ll rebuild if I need to.	brightball	12.776952	-6.9197044	comment	3.0	11.0	1673095026	12.349083
34287550	100%. I finish projects with Rails..	"100%. I finish projects with Rails... Can't say this about things I start in Go with Clean Architecture and a distributed frontend written in SvelteKit etc. pp.I need to print this out:""JUST USE RAILS FOR NOW."""	hit8run	12.763914	-6.922102	comment	3.0	11.0	1673095510	12.354825
34295541	When I was teaching Prolog are the u	When I was teaching Prolog are the university, I always introduced it as a niche language. “Prolog makes you unbelievably fast at very specific tasks, but don't try to implement a web server in it.”I was so wrong! :-D	radomir_cernoch	13.146244	-7.27818	comment	3.0	15.0	1673146459	-12.45928
34295730	https://github.com/guregu/php/blob/m	https://github.com/guregu/php/blob/master/www/lib/php.plDear god	eddsh1994	12.764602	-6.6155314	comment	3.0	11.0	1673148580	10.321833
34302201	I wonder if you can tree-shake unnec	I wonder if you can tree-shake unnecessary modules in the release.  There's a lot of stuff in the otp beam release you probably don't need in any given CLI app and it should be easy to parse bytecode and figure out dependencies.	throwawaymaths	12.3575115	-7.228703	comment	3.0	14.0	1673205993	-9.243424
34322727	> I can hardly remember an example o	> I can hardly remember an example of FOSS from Japan except for CrystalDiskInfo.The programming language Ruby has to be the most famous Japanese open source software of them all	skissane	12.609177	-7.0498652	comment	3.0	14.0	1673345957	12.418468
34322788	On a slightly different tangent, is 	On a slightly different tangent, is anyone using Prolog in production?	hmcamp	13.1496315	-7.297457	comment	3.0	10.0	1673346547	-12.461489
34335360	You can't build a modal with Rails.	You can't build a modal with Rails.	robertoandred	12.75165	-6.8579206	comment	3.0	24.0	1673415259	12.314266
34335425	So you're adding Bootstrap and jQuer	So you're adding Bootstrap and jQuery and Popper onto Rails, just to get a modal. What happens when that modal performs an action? If it mutates data, does it require a full page refresh to do so, causing the user to lose their context? Or does it do so without a refresh, but does that mean you've now got multiple frontend and backend ways of saving and loading data in the app? How do you maintain data consistency on the rest of the page after the mutation?	robertoandred	12.803657	-6.4909654	comment	3.0	18.0	1673416073	12.242081
34338739	Running costs or development costs? 	Running costs or development costs? If you have a low-request / high complexity persistent application you may want to optimize for maintainability. Having all the code in one place _can_ make things easier to figure out in the long term.	speed_spread	12.730425	-6.846061	comment	3.0	10.0	1673446802	12.292771
34354484	We have a lot of internal APIs writt	We have a lot of internal APIs written using Sinatra.I first started writing my APIs using Sinatra about 10 years ago. I had started with Rails when it first came out around 2005, liked it, but then ran up against a lot of issues. Sinatra and the Sequel gem were amazing so I switched to that, since I didn’t need most of what Rails had.Now I just use those two out of habit. Rails is a LOT better now, but i still just reach for Sinatra and Sequel usually.	cortesoft	12.724283	-6.956541	comment	3.0	11.0	1673535784	12.330786
34354684	">  What do you mean by ""heavyweight"""	">  What do you mean by ""heavyweight""?Rails latest release (7.0.4) have 386,970 lines of code in total, 310,779 of it being Ruby code. 3000 files in total. Just the `lib` directory of `activerecord` has 33,036 lines of code, across 369 files.By most metrics, RoR is pretty heavyweight, as their literal taglines are ""Ruby on Rails scales from HELLO WORLD to IPO"" and ""A web-app framework that includes everything needed to create database-backed web applications according to the Model-View-Controller (MVC) pattern"", so it needs to be pretty big to support those use cases.Full `cloc` report in case someone is curious:        4268 text files.
        3839 unique files.
         511 files ignored.
    
    github.com/AlDanial/cloc v 1.96  T=1.25 s (3079.1 files/s, 434339.6 lines/s)
    -----------"	capableweb	12.756394	-6.9387636	comment	3.0	20.0	1673536485	12.34373
34355018	> By most metrics, RoR is pretty hea	"> By most metrics, RoR is pretty heavyweight, as their literal taglines are ""Ruby on Rails scales from HELLO WORLD to IPO"" and ""A web-app framework that includes everything needed to create database-backed web applications according to the Model-View-Controller (MVC) pattern"", so it needs to be pretty big to support those use cases.Not sure what do you mean by ""most metrics"". Framework supporting features is not same as they being used all at once in every app.PostgreSQL has more than 1.3M lines of code and it gets used by projects of all sizes, would you call it ""heavyweight"" too?"	BilalBudhani	12.728192	-6.928626	comment	3.0	10.0	1673537594	12.330799
34360242	My read on this is they just wanted 	"My read on this is they just wanted to cut out Ruby and do everything in Node.  That's fine as a decision, but rest of the article feels like just trying to justify it after the fact.  Like someone at the top decided, now lets pretend it's a good decision.As you mentioned, if they're not OK with CLI, they could refactor in Ruby. The whole ""embracing functional programming"" and MVC architecture (i think Rails when i hear MVC) as reasons to go to Node, and not Ruby, is nuts.If they were worried about dependencies, they'd use Rust or Go as they mentioned."	DwnVoteHoneyPot	12.673786	-6.921669	comment	3.0	16.0	1673557542	12.348743
34362565	I think Typescript isn't worth using	I think Typescript isn't worth using, and I find this unfortunate. The Typescript team clearly has put years of work into this, and clearly has tried to shore up the deficiencies in Javascript.Are you writing a brand-new codebase that needs to work on multiple platforms, and not exclusively in a browser? Don't use Typescript, use a language with native WASM support. This includes avoiding solutions that involve Electron, Deno, and CEF, as they are browsers, too.Are you writing a brand-new codebase that only works in the browser? Learn how to use HTML and CSS correctly, avoid as much Javascript and Typescript as possible: Less is more.Are you maintaining an existing codebase with extensive Javascript, and you are not willing to rewrite entirely Typescript? Try using Typescript, but you're b	DiabloD3	12.370455	-6.7680306	comment	3.0	16.0	1673571359	-10.450597
34364497	Are tests useful? Because this is wh	Are tests useful? Because this is what TypeScript gives you: it helps you avoid regressions.If I change a signature, tests fail. If I pass junk data, tests fail. It's like invisible live tests and people forget this.As in the other recent discussion, yeah, you can live without tests and you can live in JS-land. Whether it's worth it it depends on you. TS and traditional testing lets me ship updates without even opening node or the browser.	pontilanda	12.35094	-6.8249516	comment	3.0	10.0	1673590294	-10.426087
34363824	> ”Go and Rust allow distributing a 	> ”Go and Rust allow distributing a static binary, but at the cost of fewer people at Shopify being inclined to contribute due to the lack of familiarity with the language.”If learning a language as simple as Golang is a real barrier for Shopify engineers, then I’d say they need to reevaluate their hiring processes. Especially given that they’re talking about CLI apps as opposed to something like distributed systems.I’ve hired multiple engineers who had zero experience with Elixir at all and it’s generally just taken a couple of days to get up to speed. I’ve had the same experience on client projects, too. I don’t think Elixir is as difficult to learn as JS or Rust, but Golang might even be simpler given how small the language is.	AlchemistCamp	12.515242	-7.554295	comment	3.0	14.0	1673582771	12.904402
34364801	This is what gives a Django develope	"This is what gives a Django developer super powders. There are comments here suggesting that you should wait for the time needed to develop your admin tools to be less than the time it takes to perform the action manually. With Django that's literally 5 min! To add a ""basic"" first pass of an admin to a model is literally a 5 min job. And when I say ""basic"" it's not really that basic, you can achieve a lot very quickly with the admin framework.If you are using Django and not building out admin tools as you go you are doing it wrong.The other thing touched on in this post is audit trails. I now tend to create a ""{model}Log"" model for the ""key"" models in an application, fairly basic with a JSON column. So for a shop, the products, basket, orders, etc. Then aggressively log to it all and any a"	samwillis	12.85348	-6.4923997	comment	3.0	23.0	1673593714	10.055042
34365550	This is pretty amazing, but is there	This is pretty amazing, but is there a non-Ruby alternative?	rcarmo	12.594955	-7.038367	comment	3.0	15.0	1673601283	12.395075
34376668	I can tell it's Friday because it to	I can tell it's Friday because it took until the section ID until I realized this was going to be about user comments on a website not <!-- HTML comments --> LOL.If you've got Ruby listening for updates with a postgres database all tied into a content generator it's probably time to admit you don't have a static website anymore and just look for best practice ways to go about this (with a bit more security!).	zamadatix	12.721714	-6.9120693	comment	3.0	25.0	1673662366	12.359478
34386835	Python attracted certain types of fo	Python attracted certain types of folks who wanted to say quickly understand the latest output of the large hadron collider, about the size of life peoples let’s say. Ruby attracted live action role playing larger than life sage type of people. Seems people just about the size of life is what is needed to make languages flourish.	bluishgreen	12.418924	-7.031453	comment	3.0	10.0	1673758601	-9.00104
34397466	That's interesting. I use Knex a lot	That's interesting. I use Knex a lot and I agree that it's very easy to end up just writing what is basically an ORM on the spot. I haven't quite decided if I think it's a real problem though.I created and use Kanel (https://github.com/kristiandupont/kanel) to generate Typescript types from my Postgres database which helps a lot. Knex itself has some attempt at type safety but it gets confused quite quickly, so that's where it's tempting to override things.	kristiandupont	12.399877	-6.808662	comment	3.0	16.0	1673849936	-10.446997
34401431	This. There was recently a trendy th	This. There was recently a trendy thread on HN about how great CGI was. WSGI is basically  one of the spiritual successors to CGI: it's a simple way for a web server and a Python application to interact.It addresses one of the major shortcomings of CGI by not requiring to launch a new process for every request. 20 years later it is still going strong and is still by far the main way Python web apps are served.	nicolaslem	12.341328	-6.4775715	comment	3.0	23.0	1673882035	9.621176
34403815	Serious question: why would I want t	Serious question: why would I want to use this? Is the answer as simple as “because I want to develop in Python”?.Because if you’re going to do it in Rust, why not just go all the way with something like Axum?That being said, first time I hear about WSGI/ASGI, so I did some reading. From an educational perspective I’m intrigued and even will check the codebases at some point to see how it works.But from a production POV I do not get why I would want to use it. What’s so great about it - besides letting you develop a reasonably fast server in Python, surely it is more then that?	gdcbe	12.351564	-6.585259	comment	3.0	10.0	1673893634	9.824225
34411652	> I used to work way back in the day	> I used to work way back in the day on PHP too,This is your issue - PHP < 5.3 is very different to PHP 7+. Not just at the language level - but the community, frameworks and best practices too. No more random scattering of SQL statements in HTML files!Modern PHP (with a framework like Laravel or Symfony) is probably one of the most productive ways to build web applications.> It's not beautifully well thought-out the way Python is.This is definitely an interesting take... Python hasn't even solved package management yet. And the 2.7 => 3 migration is probably the most famous example of making a mess of an ecosystem with backwards incompatible changes. In contrast PHP has Composer and 5.3 code is pretty much compatible with 8.0 (although ideally all code from the 5.3 era should be burned at	GeneralTspoon	12.734494	-6.6406927	comment	3.0	23.0	1673958366	10.314924
34411665	we should show this comment to faceb	"we should show this comment to facebook that uses hack (php originated lang) in millions of files to run their little website and infrastructure.php isn't bad. just got a bad rep.
many langs got quirks. some more than others. but php has more web production success story and usage than most."	shashashasha___	12.783588	-6.62462	comment	3.0	11.0	1673958467	3.004899
34411337	How has PHP lost its way?It grew up 	How has PHP lost its way?It grew up from a poorly thought out hacky scripting language to a major programming language. All the nasty code you could write in PHP 4 or 5 is still possible, but everyone will look at your code and laugh.	esskay	12.772776	-6.642839	comment	3.0	11.0	1673955130	10.35159
34411970	> [Laravel]'s the greatest web frame	> [Laravel]'s the greatest web framework to ever existsBack when I worked with PHP, we used Symfony and several coworkers very much looked down on Laravel. Symfony was modular and you could easily switch whichever component for your own by just implementing the interface and overriding the dependency injection thing. Word was that Laravel hardcoded many things and was less customisable.What is your take on this? In what way is Laravel superior to Symfony?	tasuki	12.808605	-6.625618	comment	3.0	10.0	1673961147	10.346004
34411985	Looking at the Laravel site, I’m con	Looking at the Laravel site, I’m concerned about Laravel’s reliance on an ORM. Not only because ORMs are widely derided, but because I have a legacy MySQL DB and PHP 5 project I want to resurrect. I’m down to rewrite the server, but how do I restore a database full of user data with Laravel?	BuckyBeaver	12.851564	-6.622018	comment	3.0	16.0	1673961204	10.335507
34412478	"I hope you realize that ""fixing"" the"	"I hope you realize that ""fixing"" these types of early mistakes is almost impossible for PHP, a language which tries hard not to break things, especially something that's going to be used everywhere. But if this is such a deal-breaker and your IDE is dumb as a stump and can't remind you nothing prevents you from wrapping the stdlib or using something like psl to do it for you."	lordgroff	12.711671	-6.6554303	comment	3.0	10.0	1673964390	-11.058411
34412527	Laravel is great if you just want to	"Laravel is great if you just want to get something simple done as fast as possible with the simplest, most elegant (at a glance) code possible and don't care at all about understanding how it works, what's going on under the hood, performance, doing anything the devs didn't expect, etc.Everything in Laravel is as obscured, ""magical"" and opinionated as possible for the sake of making the code ""beautiful"" (again, at a glance) to the detriment of basically everything else. I really have no idea how any experienced programmer can look at it and think it's usable for anything beyond the most simple project.The mere fact that models are PHP classes but none of their properties that exist in the database are actually declared as properties in the class because the ORM just ""magically"" puts them t"	bakugo	12.830076	-6.6307025	comment	3.0	18.0	1673964650	10.359458
34413738	> I'm pretty sure (there isn't a lot	> I'm pretty sure (there isn't a lot of info on how to enable it in production workloadsThe YJIT is not on by default in ruby 3.2, you have to specifically enable it. If you aren't sure if you have enabled it... what makes you pretty sure you have enabled it? It seems possible you have not enabled it, if you aren't confident you know how to do so?I am not using it yet myself, and don't want to put any possibly incorrect info here about how to enable it. I agree that it's not clear to me where to find this documented. I am pretty sure it is not on by default.	jrochkind1	12.648921	-7.0300694	comment	3.0	19.0	1673969860	12.376198
34413879	If you believe the language benchmar	If you believe the language benchmark game, Ruby is faster than Python on many of the microbenchmarks: https://benchmarksgame-team.pages.debian.net/benchmarksgame/...And the benchmark game is using Ruby 3.1, whereas 3.2 is significantly faster. YMMV though, it is going to depend on your use case, but we are always working on making Ruby faster, and if you run into a use case where Python is a lot faster, you can ping me on twitter @Love2Code and tell me about it. We'll take a look.	maxime_cb	12.537487	-6.954553	comment	3.0	11.0	1673970417	12.39475
34414458	Ruby definitely optimizes for the wr	Ruby definitely optimizes for the writer but it fails for the reader (a saying I say quite frequently at work).	setheron	12.601154	-7.0456057	comment	3.0	11.0	1673972633	12.383867
34415668	What are you using that's strongly t	What are you using that's strongly typed and as quick to get stuff done with as Ruby?	davidw	12.59052	-7.072616	comment	3.0	10.0	1673977209	12.394179
34415855	> Multiple large clusters of servers	"> Multiple large clusters of servers distributed across the world, capable of serving over 75 million requests per minuteThat doesn't say anything at all sadly.Ruby people seem to be sensitive when someone asks them about performance, my last question about that was downvoted heavily here.I don't know any Ruby, I know how much Go can handle with the stdlib, a single non-parameterized route, returning ""hello world"". On my machine xeon e3-1275v5 with 8 threads 1000 concurrent wrk about 220k/ rps. Errors start appearing (aka non-200 results) between 5000 and 6000 concurrent. 
Don't forget to ulimit -n 10000 or more before you start wrking.Alternatively can you provide a simple single route hello world in Ruby so I can bench it myself with this Ruby 3.2 YJIT? Maybe also how to build and run?Ye"	lakomen	12.69665	-6.967818	comment	3.0	10.0	1673977956	12.340354
34414214	Glad to see Ruby still going strong 	Glad to see Ruby still going strong it will forever be the 1st programming language I actually loved working with, and the combination of it with Rails was amazing. Had to move to the other side (Typescript, Django) but I think unless ChatGPT will write all the code 10 years from now - Rails and Ruby will still be there, providing teams with a lot of power and a lot of fun.	weatherlite	12.643019	-7.0053773	comment	3.0	11.0	1673971655	12.357965
34417960	I don't quite understand the YJIT ex	I don't quite understand the YJIT excitement.  A few benchmarks show that TruffleRuby generally beats YJIT, sometimes by a 10x margin.[0]: https://eregon.me/blog/2022/01/06/benchmarking-cruby-mjit-yj... says	the-alchemist	12.559903	-6.9997997	comment	3.0	28.0	1673985657	12.334747
34416238	I used to have that attitude. Then I	I used to have that attitude. Then I wrote my first Ruby project as an experiment. That was 17 years ago, and the majority of the code I've written since has been Ruby. What clinched it was that the first Ruby project I wrote involved trying to reimplement a piece of C code we had. It ended up 10% the size with more functionality, and it took me a tiny fraction of the time to write.If you write code the way you write statically typed code, then sure, you're in for a world of hurt. I could imagine using a statically typed language again if it made me as productive as Ruby, but most statically types languages have near useless type systems that I wouldn't wish on my worst enemy.	vidarh	12.477091	-7.09928	comment	3.0	31.0	1673979249	12.391678
34428419	Nicely done.  Prolog is killer for d	"Nicely done.  Prolog is killer for database programming/querying and parsing/formatting.  Since these are not exactly ""niche"" tasks, its kinda sad that prolog isn't more popular."	rhelz	13.143633	-7.2625194	comment	3.0	21.0	1674057870	-12.485021
34428596	Wouldn’t Datalog be a better alterna	Wouldn’t Datalog be a better alternative?	optimalsolver	13.176984	-6.97433	comment	3.0	18.0	1674058477	-12.370493
34428655	On one hand, Prolog is more powerful	On one hand, Prolog is more powerful than Datalog. But on the other hand, Prolog is more powerful than Datalog.	gamache	13.157976	-7.247226	comment	3.0	10.0	1674058670	-12.464227
34428741	Datalog is great for database progra	Datalog is great for database programming, and since it is a restricted subset of prolog, a datalog comes in every box of prolog :-)	rhelz	13.162638	-7.1427937	comment	3.0	11.0	1674058973	-12.451776
34473640	Given these examples, I don't really	Given these examples, I don't really see why anyone would replace Pandas with Polars for existing workloads. Memory's not an issue because they already bought the DIMMs (which have gotten insanely cheap). Personally I don't find the speed of Pandas to be that bad if you use it smartly (e.g., not parsing data more often than you have to).	ericpauley	12.334613	-6.5437365	comment	3.0	10.0	1674355253	10.15525
34473792	I have tried polars for a couple of 	"I have tried polars for a couple of week and I am one of those  weird guys who likes pandas syntax more than sql. Honestly, this is one of those ""I will just wait until it (Pandas) gets better"" thing. Anyone who uses Pandas and SQL extensively knows that whatever question you might have with them someone already has an answer for you. One the other hand Polars is new and I feel like the Polars community is pushing the better syntax to wrangle data just doesn't feel right. I am not smart enough to put three different wrangling/query syntax in my brain.I am hopeful about duckdb mostly because how friendly the people behind the project is. But honestly they really need to improve their csv reader operation. The data type recognition for auto read csv needs work. And duckdb people knows about "	anyfactor	12.407414	-6.516443	comment	3.0	16.0	1674356628	10.130107
34474987	Ruby syntax with a focus on fine gra	Ruby syntax with a focus on fine grained transforming functions. Isn’t that essentially exactly what Elixir/Phoenix tries to provide, but without the Amazon lock-in or price tag?	travisgriggs	12.608722	-7.3409348	comment	3.0	10.0	1674369445	12.707809
34491407	Thanks for this. Our goal is to keep	"Thanks for this. Our goal is to keep people on the ""rails"" of the quick start, with the Concepts as a way to fill out knowledge people are curious about. I wonder if we should downplay the concept docs in service of that? Or put more CTA's to go take the quickstart?"	grhmc	12.7846155	-6.922168	comment	3.0	11.0	1674492779	12.323969
34495023	The gem is just for declaring struct	"The gem is just for declaring struct keywords (slightly more featureful than vanilla structs). Validation is left up to ActiveModel::Model. I would do a setup like this:    class ApplicationForm
      extend Portrayal
      include ActiveModel::Model

      class << self
        def from_params(params)
          new(**filter_params(params))
        end

        def filter_params(params)
          params
            .require(model_name.param_key)
            .permit(*portrayal.keywords)
            .to_hash
            .transform_keys(&:to_sym)
        end
      end
    end

    class MyForm < ApplicationForm
      keyword :first_name
      keyword :last_name

      validates :first_name, :last_name, presence: true
    end

Can use it in a controller action like    form = MyForm.from_params"	hakunin	12.80492	-6.6285653	comment	3.0	12.0	1674507941	12.299082
34496355	Doesn't Ruby have 2 production-ready	Doesn't Ruby have 2 production-ready typecheckers now?  I think Ruby officially has something called RBS, and Stripe open-sourced Sorbet.	favorited	12.541974	-7.0848207	comment	3.0	11.0	1674514993	12.382283
34509422	Doesn't seem to work with pleroma ye	Doesn't seem to work with pleroma yet (elixir implementation)	xxdiamondxx	12.697668	-7.450766	comment	3.0	12.0	1674590603	12.928051
34532455	IMHO, part of this is that people ha	IMHO, part of this is that people have accepted the poor experience of non-realtime applications.  But there's a huge UX improvement if the application responds faster than users can input actions.  Doesn't matter for all applications but if your users are going to spend significant time inputting data it makes a huge difference.Also IMHO, a flexible type system like Typescript makes development faster than without it.  You can refactor faster, it catches silly mistakes, and you don't have to write as many tests.Rails does a lot of great things for you, but IMHO ultimately it's stuff you don't really need.  If there's any chance that the application will grow beyond a few developers I think it hurts more than it helps.	treis	12.735754	-6.918561	comment	3.0	13.0	1674745358	12.331845
34532944	I built Call Stacking ( https://call	I built Call Stacking ( https://callstacking.com/ ), a modern Ruby on Rails debugger, with Jumpstart Pro and 1.5 hours a night over the course of 4 months.We have four kids, host an exchange student, a new puppy.  Our schedules are full.Nothing compares to the productivity of Ruby on Rails.  Especially when coupled with a high-end template like Jumpstart Pro ( https://jumpstartrails.com/ ).	aantix	12.735172	-6.926174	comment	3.0	11.0	1674747187	12.351535
34534966	one thing I'd like to see in Django 	one thing I'd like to see in Django is something similar to InertiaJS [1], just being able to use VueJS for the view layer is amazing and passing data from the backend to the frontend without having to build complex api systems is a godsend. Maybe I haven't done enough research but is there something similar in Django world ?[1] https://inertiajs.com/	iwebdevfromhome	12.814204	-6.4467244	comment	3.0	10.0	1674753919	9.870575
34535050	I honestly cannot believe that Rails	"I honestly cannot believe that Rails doesn't have this built in. This was something that was in Django for as long as I can remember; I was looking at it in I think 2006 and it existed at that point in a very similar state to what I've seen lately.Not a dig on Rails, like ""Oh, Rails is so bad they don't even have...""; rather, Rails is extremely capable, and so are Rails devs, so I legitimately don't understand why this isn't there already, 15+ years after Django."	danudey	12.795653	-6.7513776	comment	3.0	11.0	1674754133	12.148293
34535620	I'm glad I came across your comment,	I'm glad I came across your comment, I'm planning a 2-week project for learning purposes and I thought rails backend with react/ svelte would be the fastest way to prototype.My ruby/ rails experience is very limited compared to my JS experience; I really just started experimenting with rails. I'm blown away by the magic, JS frameworks feel like toys in comparison. I also like that Rails is omakase.Based on your experience, would you suggest trying rails or going the full JS stack route?	foxandmouse	12.756494	-6.6818066	comment	3.0	16.0	1674755756	12.301358
34535747	I do miss the pre-docker days of usi	I do miss the pre-docker days of using capistrano to deploy rails projects. Most deploys would take less than two minutes in the CI server and most of that was tests. The deploys were hot and requests that happened during the deploy weren't interrupted. Now with Docker I'm seeing most deploys take around ten minutes.The downside of capistrano was that you'd be responsible for patching dependencies outside of the Gemfile and there would be occasional inconsistencies between environments.	wefarrell	12.651019	-6.9071245	comment	3.0	11.0	1674756089	-13.231521
34537036	> developer community broadly seems 	> developer community broadly seems to be migrating more towards Node?How did you came to this conclusion? I work with PHP teams daily and they don't think about moving, but even if they did I wouldn't expect them to seriously consider node. Overall I would say that in the last few years there was increase in number of competent PHP developers.	dzikimarian	12.754403	-6.6283636	comment	3.0	10.0	1674760104	10.31415
34539137	Awesome experience write up.Question	Awesome experience write up.Question for you and OP, do you find that using languages like Elixir makes it so you have to look for a certain kind of dev given that Elixir is a pretty niche community or are folks with no experience able to adapt with relative ease?	kodah	12.670894	-7.443515	comment	3.0	17.0	1674768767	12.937762
34543045	I've had the opposite experience. Ou	"I've had the opposite experience. Our competition used a ""boring"" Ruby on Rails architecture, so they were burning investment capital on cloud hosting every month, meaning they were forced to rush for milestones and cut corners so that they could grasp the next piece of funding before their runway ran out. Meanwhile our ""esoteric"" codebase meant we could run everything on a couple of servers we owned and spend our time building stuff there was an actual business need for. So we were the ones who got a big acquisition while they crashed and burned. I mean, if you're looking at Facebook then you should look at WhatsApp too."	lmm	12.749558	-6.889288	comment	3.0	10.0	1674799045	12.341632
34545883	As someone who worked with Erlang fo	"As someone who worked with Erlang for a few of years I still wonder if using parallel processing in program top level is worth it or not. Because there are many ways to process data efficiently using queues, pipelines, etc and being clear on when it happens rather than a ""wild west"" of Erlang where you need to manage processes, links, restarts, and it's harder to focus on the business logic."	mapcars	12.473744	-7.506501	comment	3.0	24.0	1674827074	12.887655
34547299	Right, I was mainly describing argum	Right, I was mainly describing arguments for parallel processing which Erlang is also famous for.In terms of being fault-tolerant I think the modern approach with (micro)services is quite similar, one can have multiple services running and communicating using something like protobuf, having restart strategies, fallbacks and so on. From my experience Erlang doesn't offer any killer features in this case, does it?	mapcars	12.488176	-7.499994	comment	3.0	18.0	1674834308	12.890611
34547791	Bootstrapping a project generator to	Bootstrapping a project generator tool for Django and Node: https://apibakery.comI expect (well, hope for) it to be making some money at some point in the future but don't worry since it's a side project and something I'm passionate about building even if it's just for fun.	senko	12.7964525	-6.4938974	comment	3.0	12.0	1674836659	10.106748
34550206	> Creating a language with the feel 	> Creating a language with the feel of a lisp, the environment of Smalltalk, and the concurrency of Erlang has been my dream for a long time.Hey! Now there’s two of us! It would be interesting to compare notes. :)After 20 years of really dedicated Smalltalk evangelism, I jumped out of that balloon a little over 10 years ago. Then I wandered in many strange lands embracing the polyglots “right tool for the right  job” mantra. What I found was more like “here’s a lot of really mediocre tools; rarely is it crystal clear which if many is right for the job.”A year or so ago, I built out an API server in Elixir (no Phoenix) and I’ve really loved it. Great community. I love that it’s built on basic fundamental principals, and not a bunch of edge cases. I’ve always wondered what some sort of mashu	travisgriggs	12.557916	-7.3967566	comment	3.0	11.0	1674846120	12.906948
34551151	> This collection of battle-tested c	> This collection of battle-tested concurrency patterns that has been in use for a long time, in a variety of settings, is called OTP.OTP seems like a pretty overloaded acronym—what does it mean here?	mcphage	12.572742	-7.413537	comment	3.0	12.0	1674850219	12.869124
34554669	When Django, nextjs and Laravel fail	When Django, nextjs and Laravel failed me	BirnadinE	12.81729	-6.5165663	story	3.0	2.0	1674874789	10.106791
34559314	There was another recent Erlang post	There was another recent Erlang post which posited the suggestion that the power of erlang was not in lightweight processes and message parsing, but in generic components erlang calls behaviours. These generic patterns are what allows for building reliable distributed systems, and Joe Armstrong wrote a PhD thesis about it.I gave an anecdote of having built a c++ framework that unwittingly followed the same principles for “big corp” long ago (convergent design), and posited that the same concepts could probably be built in any language. Here it is for go. So is it a good thing?Previously I suggested it would be good to capture these core concepts in standardized libraries for a range of languages, but now I am not so sure. The problem I have is that as you start looking at these higher leve	lll-o-lll	12.553131	-7.489943	comment	3.0	32.0	1674925859	12.9015255
23411701	Author of the artcile (me) or Author	Author of the artcile (me) or Author of Deno?	harrylucas	12.526918	-6.453696	comment	3.0	11.0	1591238058	-11.010663
23433847	Neat seeing crystal on here.I built 	Neat seeing crystal on here.I built my startup using crystal and now I write crystal full time.I’m still only using a single dedicated server with a SQLite database.	devmunchies	12.629246	-7.268948	comment	3.0	13.0	1591390481	-11.184191
23437479	> - The syntax is lovely. No, really	> - The syntax is lovely. No, really.Matter of taste; I find it horrible, just as I find Ruby syntax horrible. And I do not care about syntax too much generally (among my production langs are k and clojure) but I find this an eye sore; don’t know why but it is what it is.Edit: aaah downvotes for an opinion :) Anyway, background; I maintained a huge Rails codebase for years; it was pretty much the worst thing I ever did (in 30 years of production coding) and that was pretty much down because how much I don't like the syntax. That doesn't happen often.	tluyben2	12.480054	-7.04293	comment	3.0	12.0	1591429210	12.3896265
23445703	This is pretty much spot on. People 	This is pretty much spot on. People usually missing the point of 'boring' because they would think of unpleasant and ancient stuff.The key value is indeed to avoid surprises.When I read WhatsApp used Erlang back in the day, I was pretty impressed. Not only the obvious things like Erlang was the forgotten secret weapon for massive concurrent apps, but also details like they used FreeBSD back in the day when there was no preemptive scheduling but Erlang has preemptive scheduling so it was okay. Those details reflect they were very confident and they know perfectly what they were doing.	namelosw	12.657343	-7.408452	comment	3.0	14.0	1591517854	-5.815055
23446395	"It's funny to call Django the ""early"	"It's funny to call Django the ""early web"" when it first came out in 2005. That is really not early at all. Especially when you consider Rails, etc. predates that.I was an early Python adopter (1995/1996) and could not for the life of me find anybody who would consider letting me use it in 'mainstream' commercial software projects. Then all the sudden about 10 years ago it exploded in popularity big time.But I'd moved on to working on other things by then, I no longer enjoy writing in Python.Wow, this sounds like the classic ""I was into that band before they popular"" indie snob, hah!"	cmrdporcupine	12.752561	-6.6671386	comment	3.0	11.0	1591526979	10.19546
23455986	Ask HN: How do you deploy a Django a	Ask HN: How do you deploy a Django app in 2020?	eptakilo	12.807844	-6.5049596	story	3.0	3.0	1591620153	10.023801
23464338	The problem with this argument is yo	The problem with this argument is you're already compiling your JavaScript to JavaScript anyway. You already can't paste ES6 into the JS console. And don't even start if you're using JSX. I think the opposite: nobody should write JavaScript. You should write in any other language than JavaScript, there are hundreds to choose from. https://github.com/jashkenas/coffeescript/wiki/List-of-langu...	nickbauman	12.3383465	-6.4581113	comment	3.0	11.0	1591685317	-10.420848
23466188	I've been interested in learning Erl	I've been interested in learning Erlang, but haven't seen more than one or two jobs that hired for it. I'm probably looking in the wrong fields (back end) or locations.Could someone point me? Is there a certain industry that has more predominant Erlang jobs?	lowmemcpu	12.576944	-7.5220213	comment	3.0	14.0	1591707194	12.924631
23471204	An actual debugger. I started as a P	"An actual debugger. I started as a PHP/WP dev and spent many hours running results through echo or var_dump. IMO the debugger is the absolute first thing you need to learn about the platform you're writing for. Without it, you're taking shots in the dark and you truly don't know how your code is executing.It seriously pains me to see people not using one. I have a friend who is taking an online PHP backend class. There was one lecture on debugging, and all it consisted of was ""here's what using var_dump looks like"". I showed my friend how to actually set breakpoints in their JS code, set watches, etc and they felt cheated by their class. They should."	pathartl	12.513606	-6.5603256	comment	3.0	11.0	1591738800	10.31377
23476541	"    some of the function names make
"	"    some of the function names make
    me want to stab people

What would be an example?    My only real gripe with PHP is
    the annotation syntax

What do you mean? Afaik there is no ""annotation syntax"" in PHP. Could it be that you confuse what certain frameworks and IDEs do with PHP, the language?"	doiwin	12.691811	-6.665394	comment	3.0	18.0	1591794027	10.34089
23477136	>  It has a very rich standard libra	>  It has a very rich standard libraryYet I still have to define startsWith() and endsWith() any time I touch PHP code...(More importantly, PHP is the one language I can never write from memory without referencing the manual for each and every function call because of how inconsistent it is. Eg Sometimes $haystack is the first parameter and sometimes it is $needle.)	ComputerGuru	12.656015	-6.6913457	comment	3.0	10.0	1591798119	10.342167
23477990	> Why are you building arrays with m	"> Why are you building arrays with mixed key types?It happens on accident. All keys are converted to ints if they can be. So if you read a file that is called ""123"", it'll suddenly become an int key whereas all the rest will be strings. That's absolutely insane.> Why do you want type hints?The same reason anybody does. It is a contract and it makes your code more well-documented, more robust, and more correct. There's a reason that PHP has typehints and the consensus in all major, current, PHP projects is that they are good.> Php has pthreads. They just arent needed that often.Pthreads is garbage. Always has been. Never worked on servers. Is deprecated, finally: https://github.com/krakjoe/pthreads/issues/929
https://www.php.net/manual/en/intro.pthreads.php> Async is being worked on You did"	ragnese	12.602808	-6.728917	comment	3.0	11.0	1591802197	10.309694
23476165	Recently I have been thinking about 	Recently I have been thinking about moving my personal blog from Wordpress to a static site generator, because I don't allow comments or use Wordpress plugins. (Those who want comments can still use a combination of a static site generator and Disqus.)It occurred to me that once I did that, I could completely disable PHP on my Apache installation. It made me wonder how much usage of PHP out there is essentially a historical accident, and that if modern static site generators had taken off before Movable Type, the language might have been much less widely adopted.	Mediterraneo10	12.765051	-6.626454	comment	3.0	15.0	1591790855	10.33987
23476443	> But neither the choice of language	> But neither the choice of language nor the lack of framework are to blame.This is partly true. It is possible to make something great with substandard tools. I suspect a master craftsman with a set of dull saws and blunt chisels using his shoe for a hammer will still have the skill to create something pretty good.But it will be frustrating, and most people aren't master craftsmen so what they will produce will be adversely affected by the quality of the tools. If you give most people better tools they will have more chance to create something good.PHP is the rusty saw of the programming world (and yes, I have spend a fair amount of time programming it).You absolutely can create something great in PHP, but the sheer amount of gotchas and edge cases mean that for a lot of people it's hard 	wlll	12.769363	-6.6433134	comment	3.0	29.0	1591793187	10.340165
23479210	You're moving the goalposts. PHP was	"You're moving the goalposts. PHP was a great option in 1995. It is not today (except as a basic scripting language, where you and I agree completely. I would use PHP as soon as my bash script gets to about 100 lines).Your post here is arguing about 1995 or whatever. The post I replied to was full of present-tense about ""just use the good parts"" and ""all languages have issues"", etc."	ragnese	12.764581	-6.6432056	comment	3.0	11.0	1591807688	10.31114
23492426	Added to my Erlang resources gist. A	Added to my Erlang resources gist. Amazing how many languages are now available for the BEAM.https://gist.github.com/macintux/6349828#alternative-languag...	macintux	12.541962	-7.4726176	comment	3.0	11.0	1591903367	-9.046187
23536692	This likely doesn't mean what you th	This likely doesn't mean what you think.His full thread contradicts the headline[1]. They heavily use several JS libraries, including Turbolinks.As far as I can tell, they actually mean that pages are fully server-rendered, rather than having presentation and data served separately and assembled in the browser (i.e. what people now call Jamstack).1. https://mobile.twitter.com/sstephenson/status/12726081176043...	smt88	12.791879	-6.498608	comment	3.0	15.0	1592291876	7.573203
23543875	They could simply solve this with a 	They could simply solve this with a PWA, no?They already have a web client which is all server rendered with Rails and uses Turbolinks. If I'm not mistaken they also use this approach for the Basecamp iOS app [1].[1] https://www.youtube.com/watch?v=SWEts0rlezA	pier25	12.807619	-6.63808	comment	3.0	19.0	1592340368	7.6291285
23551404	Who's a good sudoku streamer?	Who's a good sudoku streamer?	netcan	13.448495	-7.408955	comment	3.0	12.0	1592402195	15.077151
23560076	You can always sandbox the process i	You can always sandbox the process if you don't trust the input. Ruby has taint checking built-in and most operating systems have lightweight sandboxing solutions. Docker is another way to go. You can just execute the script in a container and then grab standard output as the configuration.	memexy	12.552842	-7.0212107	comment	3.0	11.0	1592458494	12.367676
23563956	Hey, so I'm the very part time volun	Hey, so I'm the very part time volunteer sysadmin for LibriVox, can I use this opportunity to ask for help?I have a day job and two kids, the amount of time and energy I give to LibriVox is sufficient to keep the lights on, but not much else.We don't have money, in fact we don't even have a legal entity, any donations we get are handled by Internet Archive, who also kindly provide us our two servers (yes, only two).If you want to help and know PHP and CodeIgniter, we'd be very happy to have you on board! While I am a developper, it's currently Python, and not at all web related. LibriVox's tech sack has fallen woefully out of date (PH 5.6, CodeIgniter 2), and I can't bring it up to date all by my self.I'll be honest, it's not glamorous work. There's no automated testing, anything we change	louniks	12.77874	-6.650738	comment	3.0	14.0	1592493941	10.3488035
23567559	OTOH, if you use Flow or Typescript,	OTOH, if you use Flow or Typescript, it is amazing to be able to share type-safe interfaces across the stack (not code). I suppose you could get this from any compiled-to-JS language too.	mattwad	12.325998	-6.8366756	comment	3.0	11.0	1592511769	-10.417824
23569967	"""PHP is fine, it's just poor develop"	"""PHP is fine, it's just poor developers making bad sites"".And then people stopped using PHP."	freehunter	12.77259	-6.622853	comment	3.0	13.0	1592528775	10.337224
23592732	Due respect, these are issues with h	Due respect, these are issues with how the Deno team uses Typescript, not with the language itself.> TypeScript compile time when changing files takes several minutes, making continuous compiling an excruciatingly slow processUmm, you can compile single files, and serve them individually. It's no different from bundling (e.g. with webpack) Javascript.> The Typescript structure that they’re using in the source files that create the actual Deno executable and the user-facing APIs is creating runtime performance problemsThen use a better structure?? TypeScript isn’t proving itself helpful to organize Deno code. On the contrary, the Deno team is experiencing the opposite effect. One of the issues mentioned is that they ended up with duplicate independent Body classes in two locations https://g	underdeserver	12.4777	-6.4762554	comment	3.0	17.0	1592755083	12.639785
23593044	I used Typescript for 2 years, and I	I used Typescript for 2 years, and I'm happy to report I'm dropping it and encouraging my team to do the same. Types are for compilers, not people, and personally I think there's more disadvantages than advantages re: time.	IBCNU	12.34454	-6.8223586	comment	3.0	12.0	1592757262	-10.438265
23599529	This smells of legacy PHP where any 	This smells of legacy PHP where any PHP file uploaded to a web-accessible folder can be executed.	Nextgrid	12.747297	-6.579597	comment	3.0	11.0	1592829849	10.23072
23611648	Thanks for your feedback! :)We have 	Thanks for your feedback! :)We have been tinkering a bit with building something close to Phoenix LiveView with HSX. Hope we can show something in that direction later this year.	_query	12.887344	-6.914794	comment	3.0	11.0	1592904598	12.726536
23611802	Which other languages are you fluent	"Which other languages are you fluent with? I find many that love PHP have a bit of a ""when all you've got is a hammer"" bias in favor of it.I had the same! Then I invested in learning some Haskell/ Elm/ Reason/ Rust/ Kotlin: it changed my preferences for ever. I now look for proper sum types and (pattern) matchers, strong typing discipline and null safety."	cies	12.548735	-6.7667885	comment	3.0	11.0	1592905856	10.286712
23615992	Here Is a Gist where I compare Cryst	"Here Is a Gist where I compare Crystal, Go, OCaml including compile time.
https://gist.github.com/s0kil/155b78580d1b68768a6c601a66f8e2..."	danielsokil	12.346982	-7.4814014	comment	3.0	11.0	1592929065	-11.116743
23621256	Ask HN: Why would one learn Ruby on 	Ask HN: Why would one learn Ruby on Rails in 2020?	aloukissas	12.697347	-6.80796	story	3.0	2.0	1592951858	10.524397
23627214	Very interesting. This PEP is still 	"Very interesting. This PEP is still in draft state, but I am interested to see how the community will react. For me, I have a few thoughts:1) This is really close to Erlang/Elixir pattern matching and will make fail-early code much easier to write and easier to reason about.2) match/case means double indentation, which I see they reasoned about later in the ""Rejected ideas"". Might have a negative impact on readability.3) Match is an already used word (as acknowledged by the authors), but I think this could have been a good case for actually using hard syntax. For me, perhaps because I'm used to it, Elixir's ""{a, b, c} = {:hello, ""world"", 42}"" just makes sense.4) I hope there won't be a big flame-war debacle like with :=5) And then finally there is the question of: ""It's cool, but do we rea"	justusw	12.523768	-7.4702573	comment	3.0	26.0	1593002716	12.918249
23631224	Developers in their forties wrote Pe	"Developers in their forties wrote Perl.
Developers in their thirties replaced Perl.
Developers in their twenties say “What’s Perl?”"	OakNinja	12.334717	-7.013894	comment	3.0	12.0	1593020470	13.203139
23631435	As far as i know Java and PHP became	As far as i know Java and PHP became popular later in the 90s / early 2000s. Javascript was browser only until 2010, Ruby only became popular after Rails came out mid-2000s. There is a decade gap there.	ricardobeat	12.509472	-6.4879913	comment	3.0	11.0	1593021333	10.263961
23631445	Are they still renaming Perl 6? I th	Are they still renaming Perl 6? I think it is a tad confusing to have 5 and 7 being so similar, and the 6 in between so radically different. I can't be the only one.	ksaj	12.346722	-7.0565314	comment	3.0	13.0	1593021388	13.214647
23631498	To be honest Perl 5 isn't really lik	"To be honest Perl 5 isn't really like Perl 4.  They are quite different languages - Perl 4 didn't have objects, and Perl 5 places heavy emphasis on them.Up to you to decide when you think it started, but I'd say the current language we think of as ""Perl"" started with the release of Perl 5."	jlokier	12.345914	-7.0614023	comment	3.0	10.0	1593021569	13.157611
23633555	If what you're saying is true, then 	"If what you're saying is true, then why aren't similar criticisms raised against Ruby? Most of the same obscure variables are also present in Ruby.""If hard-to-read-and-remember syntax exists, people WILL use it""This statement doesn't appear to hold up under scrutiny."	throwaway373438	12.460071	-7.09832	comment	3.0	10.0	1593031065	12.385268
23635294	I wrote a lot of popular web apps in	I wrote a lot of popular web apps in Perl, some that appeared in NY Times and Time mag. I quit around 2010 and went over to php which is easier. Wrote a great app and built a successful software biz around it. I think 2010 may have been when Perl 6 felt hopeless and there was no clear leadership or direction in the community.Mod_perl was the sh*t back in the late 90s for super high performance web apps on Apache. Then Perl stalled and everything else didn’t.Perl could have been where Python is today if they didn’t take 20 years to waffle about a release that was supposed to do everything and ended up doing nothing because everyone left.	mmaunder	12.410464	-6.980102	comment	3.0	11.0	1593043297	13.130544
23638435	Why would anyone write purescript wh	Why would anyone write purescript when we have typescript?	edem	12.351796	-6.8057	comment	3.0	14.0	1593075622	-10.438604
23643368	Interesting note, on Twitter DHH men	"Interesting note, on Twitter DHH mentioned that they have some additional ""magic"" that they're using to do frontend work. It sounds like HTML over websockets, not unlike Phoenix LiveView or (tooting my own horn here) our recently released Motion library (https://github.com/unabridged/motion) which both allow you to use the server as your single source of truth while providing reactive UI components on the frontend. He indicated they'll be releasing more later this year."	latortuga	12.90057	-6.685454	comment	3.0	13.0	1593107104	12.681405
23642744	"isn't ""Vanilla Ruby on Rails"" akin t"	"isn't ""Vanilla Ruby on Rails"" akin to ""Vanilla Deluxe Chocolate Fudge Sundae""?"	gyanamo	12.730688	-6.96233	comment	3.0	16.0	1593104181	12.362727
23644252	ASGI from scratch – Let's build an A	ASGI from scratch – Let's build an ASGI web framework	lukastyrychtr	12.357741	-6.5738773	story	3.0	77.0	1593111892	9.771132
23644232	As bad as Ruby is, it’s still better	As bad as Ruby is, it’s still better than Bash and you can do all the same effortless execution of random commands in your script like you would in bash. If one can’t be bothered to write it in a real language like Rust or even Python, you could at least do Ruby.	ironmagma	12.481625	-6.9561505	comment	3.0	16.0	1593111741	-9.788539
23651164	This guy may have gotten Perl out of	This guy may have gotten Perl out of his part of the JP Morgan world, but JP Morgan still actively uses Perl. It’s not as big as it once was, but there are teams still developing and deploying Perl.	mjs33	12.326712	-7.030975	comment	3.0	10.0	1593174219	13.182633
23651390	PHP as a language really is that bad	PHP as a language really is that bad. It's probably the worst popular language right now as far as how difficult it is to write correct code. Especially because a lot of times your code will seem to run fine until it doesn't. It's also got a tacked on type system that is not robust or expressive at all, so your typing is worse than pre-generics Java. Only JavaScript rivals it. It has no async/multi-threading either, so probably JavaScript is less-bad.I don't know that I'd call it insecure, necessarily. I'd call C an insecure language. I'm not an expert on all the various standard library functions that you aren't supposed to use anymore. Just make sure if you do SQL that you go through some interface that prepares your statements for you and never just shove user input into a SQL string yo	ragnese	12.768608	-6.617874	comment	3.0	31.0	1593175844	10.317244
23652421	This is just FUD. You didn't give us	"This is just FUD. You didn't give us any real use cases to agree with or refute, only your opinions. Lots of people and companies do very productive, very real, very ""typed"" and very effective applications and code in PHP. I am stunned that you are writing ""because a lot of times your code will seem to run fine until it doesn't"" as it wouldn't be such a widely used programming language if that was the case. Your entire comments reeks of trolling."	fimbulvetr	12.783947	-6.642803	comment	3.0	20.0	1593182170	10.382062
23655385	Thanks for sharing. I have some open	Thanks for sharing. I have some open source PHP projects (with Yii2), that I maintain on my free time, and I was wondering if there were any static analysis tools for PHP, and this just popped at the right time.Will give it a try.	XzAeRosho	12.670265	-6.640184	comment	3.0	12.0	1593196705	10.304637
23656338	Have you got any links, or can you e	Have you got any links, or can you explain the optimisations that are possible in RxJava?I've done some vert.x and creating new Futures all the time is a bit cumbersome, but I understand it.  With RxJava it's another layer on top, and you are even more removed.The whole non-blocking experience in java feels like there is a lot of plumbing.  I know it's fast for IO reasons, but it really feels like the JVM/CPU has to jump through a lot of glue code to make it work.	diroussel	12.33848	-6.5645494	comment	3.0	13.0	1593201856	8.571918
23658208	> src/Grouchy/MessageStream.php:17: 	> src/Grouchy/MessageStream.php:17: Class has too many methods: 12. Can be up to 10 methods.> src/Grouchy/MessageStream.php:66: Your function is too long. Currently using 40 lines. Can be up to 20 lines.sigh.One of the annoyances of modern PHP practices is the tendency to write one class, per file, which extends or implements one other class, and adds one or two functions to it. Every single logical abstraction in a PHP project can have somewhere between one to thirty different classes associated  with it, and larger PHP projects end up with a thousand or more files. All of this is enabled by composer's PSR-4 autoloading support, so as long as you give your classes the right kind of names and put the files in the right places, you don't have to think about what it means to hit the disk tha	thaumaturgy	12.760495	-6.638989	comment	3.0	10.0	1593214630	10.280014
23659416	I look forward to the April 1st vers	I look forward to the April 1st version of this tool.PHP is truly a defining technology of our age.  For all the tongue-in-cheekiness of my comment, it’s a matter of fact that several giant web properties were built with PHP and have had irrefutable global impact.	gorgoiler	12.755101	-6.6389656	comment	3.0	19.0	1593230289	10.337454
23688961	Navigating to the tutorials section,	"Navigating to the tutorials section, I discovered to my joy that _why was clearly involved in this in some way. The online book[1] is written by them in their inimitable style.See also _why's other classic Ruby-related book, the Poignant Guide to Ruby[2].[1]: http://evc-cit.info/cit020/nks.pdf
[2]: https://poignant.guide/"	gerjomarty	12.605308	-7.056761	comment	3.0	12.0	1593516348	12.385197
23689442	I might be missing some Ruby context	I might be missing some Ruby context here, but why does the tutorial show the {} syntax and later the do...end syntax like do...end is somehow better? (And then in the shoes4 repo it also shows do...end syntax as an example there).Maybe I'm just used to {} but is do...end superior to most ruby devs?	rhacker	12.450005	-7.0751605	comment	3.0	10.0	1593521161	12.391831
23706094	Rails 6 by default includes webpack 	Rails 6 by default includes webpack to bundle assets for production. Aside from webpack, several of the top 10 on your list are libraries that ensure a great user & developer experience across browsers:- babel transpiles ES6/7+ JavaScript syntax to the least-common-denominator of the browsers you designate as supported by your application- core-js provides implementations of features that are not supported in older browsers -- things like array methods that cannot simply be transpiled- caniuse-lite is a database of supported browser features to determine what needs to be transpiled and whenThis toolchain allows developers to write code with the latest language features (which usually results in simpler, more elegant code) while seamlessly supporting legacy browsers as needed. If you decide	schneidmaster	12.740446	-6.7776694	comment	3.0	17.0	1593634867	12.337184
23707099	Regardless of whether you think all 	"Regardless of whether you think all those components are necessary, there is still the question of whether the amount of space they require is justified; JavaScript is a high-level language, and in fact one of the higher-level ones in comparison to things like C/C++. 1KB of JS should be able to do far more than 1KB of C or even binary.Thus, 100MB of JS is astoundingly huge. It's roughly the same size as all the binaries in a full install of Windows 95, with all its features and drivers.In the spirit of https://prog21.dadgum.com/116.html perhaps we need a list of ""Things an empty Rails app is smaller than"".It takes a ton of cycles out of development googling ""can I use feature X in browser Y""....or you could just avoid the trendchasing and use a minimal subset that you are sure will work ev"	userbinator	12.712974	-6.721575	comment	3.0	10.0	1593639839	12.331186
23712881	"How often does ""hit the wall from a "	"How often does ""hit the wall from a performance and maintainability POV"" happen with Python / Ruby / NodeJS ? I mean seriously, how many more huge projects do we need to build until we can show it's a sane alternative? 120 Billion worth Shopify isn't enough, maybe Instagram then? Github ?"	joelbluminator	12.49353	-6.847671	comment	3.0	51.0	1593696686	12.407398
23712992	When you see the effort some of thos	When you see the effort some of those compagnies go to get some decent performance, chose the right language from the start would have been easier on that side, look at Facebook with Hack, Youtube ( Python ) that re-implemented a VM in Go, Shopify is also doing a lot of things to improve performance because of Ruby limitation, when you pick up a language with by default good performance you don't have to go that route.	Thaxll	12.377823	-7.269976	comment	3.0	21.0	1593697508	12.144585
19978714	Visual Basic was basically(!) killed	Visual Basic was basically(!) killed by Microsoft albeit large protest, so no, putting your trust in one company does not always work.PHP has been developed very well the past few years as community project, there is an open RFC process with a codified voting process in place. Sure there have been some drama within the community, but that has not affected either the language nor the implementation.What makes PHP a great fit for a community driven project is that PHP is a pragmatic language in its core. If the general goal of a project is to design a perfect & consistent language  then a community driven process is maybe not the best approach.	fetbaffe	12.766473	-6.642171	comment	3.0	18.0	1558510058	10.329832
19993414	Wait, Google doesn't support Perl?	Wait, Google doesn't support Perl?	ForHackernews	12.344807	-7.021416	comment	3.0	17.0	1558630225	13.178466
20016687	Machine Learning and Deep Learning u	Machine Learning and Deep Learning using the PHP Language (Examples & Tutorials)	andrewdalpino	12.766262	-6.6251297	story	3.0	1.0	1558896806	-3.8398266
20023331	I've been planning on giving Erlang/	I've been planning on giving Erlang/Elixir a try, but we are very reliant on serverless and managed cloud services (like SQS) and I get the impression that managing a cluster of worker nodes for Erlang/Elixir would be too much work for us, since we would have to manage the servers, security patches, plan its scaling, etc.Maybe I'm wrong and it's not so much work in the end. Hoping for some feedback.	haolez	12.6349	-7.4831524	comment	3.0	10.0	1558974906	12.901571
20039777	> Great for CPU-intensive tasks.Ruby	> Great for CPU-intensive tasks.Ruby is among the slowest languages out there.  Which is fine for most webapps, but calling it great for CPU intensive tasks... I don't understand what logic is being used to come to this conclusion.	sbov	12.607704	-7.0192084	comment	3.0	51.0	1559135970	12.35169
20040307	"Rails is slow. 
Ruby isn’t slow.Ruby"	"Rails is slow. 
Ruby isn’t slow.Ruby has the same thing that every other language has, call outs to C code under the hood for most of the real work.What makes Rails slow is the process around so much object creation and destruction, but this is exclusive to Rails itself.You put a Sidekiq worker up against a Go worker for some background processing and the performance is comparable."	brightball	12.709828	-6.956217	comment	3.0	15.0	1559138750	12.35244
20040314	Storing state in Erlang with process	Storing state in Erlang with processes (2014)	brudgers	12.528582	-7.50222	story	3.0	88.0	1559138787	-10.060776
20039756	The beauty of rails is how simple an	The beauty of rails is how simple and quick it is to get a robust (if bare) application up and running.Even if you use sinatra or padrino instead, the wealth of the web community built around ruby still makes it rather easy.If I were a tech lead and had to make a choice now, in 2019, I would still (probably) choose rails-api for a backend with some separate frontend.I've been slowly working on a backend for a web app in Rust, and it's really made me realize the sheer amount of things rails provides for you. It has its problems, of course, but so does everything else.	munmaek	12.757233	-6.8462048	comment	3.0	27.0	1559135856	12.320379
20040481	Ruby/Rails backend with a React FE s	Ruby/Rails backend with a React FE seems to be pretty popular these days, and is where I spend most of my time, but honestly I'd rather go back to Rails views with Stimulus for some of the components that need it.3 years ago we were breaking monoliths into microservices, now it seems that we overshot that, and I'm much more likely to see people sticking with one main monolith, and maybe one or two other services. Similarly, I'm much more likely to see people choosing NOT to use JS frameworks these days than use them.	llamataboot	12.783783	-6.6983957	comment	3.0	24.0	1559139629	12.282331
20044357	Typescript 3.5: fixing the problems 	Typescript 3.5: fixing the problems we introduced and providing workarounds for new features in a broken type system.	alttab	12.342969	-6.8760815	comment	3.0	17.0	1559158237	-10.448179
20108012	Is the example program in Actix-web 	"Is the example program in Actix-web considered good programming style for that framework?
The reason I ask is that the equivalent in Python/Flask might look like:    @app.route(""/<name>/<id>/index.html"")
    def index(name, id):
        return form(""Hello {}! id:{}"", name, id)

This has the advantages that:1. the endpoint ""/<name>/<id>/index.html"" goes in the code right above the function that implements it.2. the variables are called `name` and `id` and not `info.0` and `info.1` which  is a less informative naming convention."	cabalamat	12.354668	-6.486041	comment	3.0	11.0	1559761529	7.666516
20113128	I was someone who installed the firs	"I was someone who installed the first beta of Windows that included this, just to try it out for Rails. It had LOTS of problems. I filed bugs. I kept trying over the next couple of versions, and finally gave up. I tried it again a few months ago, and, again, ran into a show-stopping problem of some sort, and gave up again. Are you saying that you use it ""in anger"" for serious development, and have no issues?People complain about doing Rails on Windows, and, while there's definitely extra friction, and I hate Windows in general, I have really good luck with RubyInstaller. I used to have a hard time with ExecJS, but now I just install Node (on either Mac or Windows), and I'm usually off and running."	TheRealDunkirk	12.667359	-6.948938	comment	3.0	10.0	1559816687	-9.240383
20152594	Hey, this is good practice!First we 	"Hey, this is good practice!First we can load the csv library, then read the rows of the csv file, and assert those rows as facts using the `car` identifier. (Doesn't mean `car` like in lisp, obviously, but automobile.)    ?- [library(csv)],
         csv_read_file('cars.csv',Rows, [functor(car)]),
         maplist(assert, Rows).

If we want to find a Ford, then we can enter this query:    ?- car('Ford', Model, Year, Colour).

Any capitalised word that's not in quotes is a variable in Prolog, so they can take any value. This will give us the result:    Model = 'F150',
    Year = 1999,
    Colour = 'Black' ;

Press space, and we get another:    Model = 'Mustang',
    Year = 1969,
    Colour = 'Blue'.

And there are no more, so it returns to the REPL.(I should really have discarded the first l"	hjek	13.1382675	-7.2876377	comment	3.0	12.0	1560219705	-12.476642
20184312	I made a comment on this thread[1] i	I made a comment on this thread[1] in 2014, and it was closed two days ago. I wondered why... guess this is why!1: https://github.com/rubocop-hq/ruby-style-guide/issues/273	steveklabnik	12.587775	-7.049341	comment	3.0	13.0	1560530071	-10.871948
20200437	this comment is so 2005 and it is su	this comment is so 2005 and it is suggesting you haven't worked with the latest versions of PHP and the ecosystem around it. From a language perspective, PHP is not any worse than Ruby, Python or Javascript. Composer, Symfony and other libraries have improved PHP projects by a lot.	thinkindie	12.758093	-6.664804	comment	3.0	21.0	1560753387	10.328994
20200579	Same question: Who would take Ruby o	Same question: Who would take Ruby or Django for a new project when the language is not even existing in public discussion?But honestly, the main reason is that you can find PHP developers everywhere and they are cheap. Given that you want to build a project that grows and advances, that is maintainable, for which you require a vast ecosystem to kick-start your ideas and a lot of very good tooling and free sources of knowledge, you won't find a better platform than PHP.Ok, Perl might be an alternatively hugely developed language but it is really complicated to find new developers for it. In contrast, you will find a lot of developers, testers, sysops that have the knowledge for working and administering the PHP tech stack. Yes, you could use the coolest language but how would you be able t	xDest	12.749241	-6.648743	comment	3.0	12.0	1560755124	10.331334
20207669	The only thing more annoying is when	The only thing more annoying is when people ape Why's (Poignant) Guide to Ruby and you have to follow the adventures of some tedious otter as it meets the rabbit people who ultimately explain pointers in a way which takes a thousand too many words.	thom	12.582278	-7.0667076	comment	3.0	45.0	1560807698	12.382038
20213022	Yeah this is an interesting phenomen	Yeah this is an interesting phenomenon. It's counter intuitive but it does make sense, if you think about it. I remember listening to a podcast (changelog I think) with the creator of Elm and he was asked about this - is it a concern if you build your frontend on Elm that you just won't be able to find anyone to hire?His response was that on the contrary, people who use Elm tend to be enthusiasts by nature and job postings in Elm are rare enough that if you post one, they will seek it out and come to you, because they really, really want to be using Elm in their day job.The alternative, using an extremely popular language/framework, means that even though the number of enthusiasts out there is absolutely greater, your job post is just one in a sea of similar ones - so it's much less likely	davnicwil	13.0080805	-7.6897144	comment	3.0	11.0	1560866390	-12.771188
20220914	Interesting. I'd really like to see 	Interesting. I'd really like to see Pytherl. Use the easy-to-learn Python syntax, as best as possible, but on the BEAM. I think that would be even better than Elixir for getting people on board.	starman100	12.5984955	-7.4350934	comment	3.0	10.0	1560920487	12.92024
20221389	BEAM is a wonderful VM, but calling 	"BEAM is a wonderful VM, but calling it ""optimized"" for anything is problematic. It has focused on certain use cases,  but it's seen less than 1% of the investment in the JDK, so I guess it's better to call it ""specialized"". While it works well enough for many things, its performance is like the JVM limping on both legs after a terrible car accident and a bad case of pneumonia while trying to walk on an icy road. You are correct, though, that it probably performs better than a general-purpose platform with a similar level of investment."	pron	12.341337	-7.3464417	comment	3.0	34.0	1560928134	-8.856614
20222516	It's true that BEAM has excellent co	It's true that BEAM has excellent concurrency, parallelism, supervision, message passing... but I don't know understand why that has to come at the expense of being terrible at everything else. Why doesn't it have even a baseline reasonable quality JIT? Why doesn't its GC use a design more recent than half a century ago? It's got big corporate backers and PhDs working on it.	chrisseaton	12.409573	-7.3875976	comment	3.0	18.0	1560945894	-8.854337
20222102	I would be. BEAM is just a very slow	I would be. BEAM is just a very slow platform, not just compared to Java, but also compared to JavaScript and Go. Again, that's not to say it's not very useful for some things (although many Erlang apps are really mixed Erlang/C apps because of BEAM's performance). Hey, CPython is really slow, too and yet very useful.Green threads is another matter as it's not a feature that currently exists on the Java platform (there are somewhat similar features in Java platform languages like Kotlin's coroutines), but there is currently a project (that I'm leading) to add fibers (AKA user-mode threads, AKA lightweight threads, AKA green threads) to the JVM: https://wiki.openjdk.java.net/display/loom/	pron	12.363006	-7.363025	comment	3.0	23.0	1560939007	12.73805
20235658	The problem with JavaScript is that 	The problem with JavaScript is that it's a terrible example of a dynamically typed language.> The benefits are a vastly improved safety net at a very minimal cost, smarter toolsThat's entirely subjective. As far as tooling, I get the impression from my coworkers and what I've seen online that people that love TypeScript love big bloated IDEs. They love having their IDE tell them what to do. And, personally, I find their usage of IDEs to be a crutch that prevents them from transitioning from a plateau of mediocrity to being a great developer. They don't understand the code. They merely throw things together that match the types that their IDE tells them, like LEGOs. Then they spend hours trying to figure out why their code doesn't work.As far as the cost goes, my experience has been vastly 	deckard1	12.326228	-6.805332	comment	3.0	10.0	1561054712	-10.414633
20239468	Python and Ruby are extremely mallea	Python and Ruby are extremely malleable, like Smalltalk and lisp before them. You can inspect anything, you can override / replace / proxy anything. You can use a few built-in collection types for nearly anything.This is by design. This is great for prototyping.These languages are to programming what breadboards and wires are for electronics.Of course, as your system grows, you start to want static checks, or having your schematics on a PCB. But at the very start, tweaking a piece of Python code, or a breadboard, is easiest. Then, of course, you may not want to afford a a rewrite to rust, or would put your breadboard in a box and ship it :)	nine_k	12.514182	-7.0663652	comment	3.0	10.0	1561085467	12.3750105
20266203	This is great news! The deployment s	This is great news! The deployment story has progressively improved since I started using Elixir in 2016, but the best way is to just have _one_ community blessed system.Distillery has helped a lot for sure, so it's nice that it's basically been rolled into the base elixir distro.	atonse	12.6934595	-7.4426894	comment	3.0	38.0	1561398077	12.925676
20266268	Fantastic. Congratulations to the El	Fantastic. Congratulations to the Elixir team!Something striking from the release announcement:> As mentioned earlier, releases was the last planned feature for Elixir. We don’t have any major user-facing feature in the works nor planned.Part of me is a little alarmed—no one wants a language to stagnate. José makes it clear that this doesn't mean it's the last version:> Of course, it does not mean that v1.9 is the last Elixir version. We will continue releasing shipping new releases every 6 months with enhancements, bug fixes and improvements.Elixir is remarkably extensible. When I was first getting acquainted with the language finding macros with all the expressive ability of a LISP blew my mind. Making powerful macros a core part of the language meant that the language could grow. That i	ashton314	12.685251	-7.4677563	comment	3.0	22.0	1561398426	12.946035
20268284	I gave it a try, but for me after ye	I gave it a try, but for me after years of programming in C like languages the syntax is really hard.I know it is very similar to Ruby.I wish there was a ElixirC syntax that would also compile to Earlang.	mars4rp	12.615558	-7.3616986	comment	3.0	10.0	1561409150	12.86002
20270855	I sometimes joke that microservices 	I sometimes joke that microservices are half of Erlang, badly implemented (I guess Greenspun’s Curse is broken?).Elixir has been second or third on my todo list for a long time. With the scary news from Vue, it might have just jumped the queue.	hinkley	12.617324	-7.4923267	comment	3.0	12.0	1561432282	-10.876843
20271204	"""- Crystal: ?; fast?; have not used"""	"""- Crystal: ?; fast?; have not used""Ruby is an extremely powerful language, with the only drawback of being truly slow. Crystal solves this problem with flying colors by offering almost full Ruby compatibility along with very efficient native code generation. 
Unfortunately it's still young and lacks user base as well as ports to other architectures."	squarefoot	12.631795	-7.237103	comment	3.0	11.0	1561437175	-11.23856
20270021	Erlang’s Dialyzer (and the related E	Erlang’s Dialyzer (and the related Elixir project Dialyxer) provide compile-time type safety analysis. It’s optional and only at compile time, but immensely helpful in verifying correctness.	ashton314	12.383918	-7.4275694	comment	3.0	11.0	1561422506	12.940457
20320701	Thanks for replying.> But programmer	"Thanks for replying.> But programmers proficient with pure functional programming languages are harder to come by.I used to get a similar argument when pushing Python over Java, and my counterargument is the same:  I wouldn't hire a JS programmer who was afraid or unwilling or unable to learn Elm.  I would bet that any normal person smart enough to solve Sudoku problems could learn Elm, I wouldn't make that bet with JS/CSS/HTML.> It might lose steam and go into support mode, or drop support, or maybe they introduce breaking changes in a future version. JS is a much safer bet.But who is using just JS these days?  Frameworks and transpiling are the order of the day, no?  Same argument applies to them.  And JS is a moving target too.  As for ""breaking changes"", well, it is just version 0.19 s"	carapace	12.974306	-7.65471	comment	3.0	25.0	1561930817	-12.765105
13612037	Great to see Mozilla supporting Djan	Great to see Mozilla supporting Django. But isn't the official Django tutorial cover all of this, Why not just link to it?	molly0	12.82274	-6.566572	comment	3.0	22.0	1486683012	10.129337
13614350	you reference the model in the view 	"you reference the model in the view and then tell the view to save it directly to the model using the ""model = form field"" type syntax to assign value and then .save() method to save.In the form field you are saving from, you write the form field value and then an empty space where the input value goes sort of like ""form.cleaned_data.get(""field name"", "" "").  The second blank """"is the empty space where the field value goes.  The claned_data is django's internal form validator.  That sounds confusing so I'll give an exampleThis is what your views would look like    from django.shortcuts import render

    from sample.models import Test

    from sample.forms import TestForm

    def Example(request):

       if request.method == 'POST':

           form = TestForm(request.POST)

           i"	vivekd	12.864072	-6.4785843	comment	3.0	13.0	1486720425	10.061552
13616993	> PHP is otherwise a mess, insecure,	"> PHP is otherwise a mess, insecure, and should be pretty much avoidedThat doesn't ring true to me.  Personally, I think a lot of the perception is just that PHP appeals to a broad audience, so there's a lot of unskilled people producing code.There are some language inconsistencies so ""messy"" might be justified.  I don't see it, though, as inherently less secure than other popular languages.If you mean, for example, SQL injection, php does provide the correct path, and it's in their documentation.  Sure, it's possible to use aribtrary strings in SQL, but it's also possible in Python, Ruby, Perl, and so forth.  Similar for traps like eval()."	tyingq	12.834635	-6.4395876	comment	3.0	25.0	1486746905	10.212017
13650941	>I think it is way ahead of the JS/T	>I think it is way ahead of the JS/TS stack in many regards.In what ways do you consider it ahead of Typescript? Personally as someone who's particularly fond of static type systems (Haskell and the like), Typescript's type system seems way more advanced and powerful than Dart's (union and intersection types, in particular, and non-nullable types). Map types (introduced in Typescript 2.1) also seem pretty interesting.	logicchains	12.333161	-6.887105	comment	3.0	11.0	1487153901	-10.452987
13657010	So, there's three stages:0. This sta	So, there's three stages:0. This stage is the pre-built compiler1. This stage is a compiler built with the compiler from stage 02. This stage is a compiler built from stage 1.If the process worked, then stage 1 and stage 2's output should be identical. You can skip stage 2 if you want to skip that verification, and that sounds like what Crystal does.	steveklabnik	12.60196	-7.2669806	comment	3.0	13.0	1487206221	-11.236415
13673552	I was honestly surprised how well PH	I was honestly surprised how well PHP7 fared against HHVM.  No JIT, and likely a much smaller team and budget.  Most of the comparisons I've seen show them as roughly the same performance.	tyingq	12.719182	-6.6323977	comment	3.0	10.0	1487390767	10.300509
13674760	Has anyone tried building a PHP runt	Has anyone tried building a PHP runtime based on Truffle?It might not be as fast as a dedicated JIT with a big team behind it, but it seems Facebook's HHVM effort is relatively small as these things go.Is there anything about PHP that would make Truffle a bad fit? I ask this as someone who knows next to nothing about either PHP or Truffle!	twic	12.777628	-6.6220927	comment	3.0	10.0	1487425302	3.0470986
13692837	Release notes with the new features 	Release notes with the new features in 1.11: https://docs.djangoproject.com/en/dev/releases/1.11/Highlights:- better support for creating indexes on your Models with class-based indexes- widget rendering in forms now uses the templating system instead of python- Explicit subquery expression support via Subquery and Exists expressions.	jitl	12.849111	-6.4811	comment	3.0	12.0	1487645073	10.068314
13708006	Why would flow + es6 be better?	Why would flow + es6 be better?	Nemcue	12.395061	-6.5305295	comment	3.0	44.0	1487789164	-10.370516
13708317	But that'd still be transpiled code,	But that'd still be transpiled code, right? After getting rid of flow it will be exactly same minus the type annotations. Same cannot be said about typescript considering various language features and syntactic sugar TS offers. Will it run? Yes. Will it feel that it was written by me? That depends.	MehdiHK	12.420414	-6.767979	comment	3.0	10.0	1487791005	-10.470349
13713327	It's high time to change that defaul	It's high time to change that default. I'm glad django will not support Python2 after 2020, making clear it's legacy.	mkesper	12.735852	-6.6013565	comment	3.0	10.0	1487852627	10.105481
13717903	I had heard that Capyabara-based tes	I had heard that Capyabara-based tests were going to be incorporated in Rails. As the multi-threaded concurrent nature of these always makes things a pain, hard to get right, leading to much pain for devs with non-trivial test suites -- I was curious to see how they'd handle it, if there'd be an 'official' Rails solution, ideally backed by some deep Rails knowledge.I was surprised that they've chosen to use the 'shared database connection accross two threads' approach. While this was for a while popular approach amongst people trying to figure out the best way to use Capybara-based tests with Rails -- mostly because you get to keep transaction-based database cleanup -- it was largely determined through experience to be too flaky. ActiveRecord's architecture just wasn't designed for a Conne	jrochkind1	12.737822	-6.894542	comment	3.0	11.0	1487884959	12.342568
13732318	Cool release! Thank you for this. It	Cool release! Thank you for this. It's always great to see production code get released as opposed to pet projects.What's interesting to me is that even though it's a flask app, it seems to be re-implementing large chunks of Django:- Similar directory hierarchy including folder-per-app, templates, config- A big settings object that gets passed around to things like Celery- SQLAlchemy for the ORM/database glue, some other components for migration management- Re-implemented authentication that has a very similar feature set to django.contrib.authThis convergence reinforces that I should keep using Django or Rails for new web/mobile products. I find myself doing all of the above when using Go or Haskell for the same task.	wyc	12.783315	-6.540093	comment	3.0	12.0	1488041126	10.092075
13754898	PHP is about to face Embrace, extend	PHP is about to face Embrace, extend and extinguish?	pmlnr	12.766454	-6.6211867	comment	3.0	10.0	1488299173	10.312942
13754738	The benchmarks http://www.peachpie.i	The benchmarks http://www.peachpie.io/benchmarks show peachpie outperforming PHP7 easily by 100x.	FraaJad	12.757823	-6.6542325	comment	3.0	17.0	1488298095	10.296161
13753785	I remember from the PHP on Java that	I remember from the PHP on Java that there were huge performance benefits. So large PHP hosts should see benefits.	amalag	12.713032	-6.6462812	comment	3.0	21.0	1488290565	10.313023
13795239	I am beginning to think there must b	I am beginning to think there must be something about Ruby that poisons the mind in this way.There is nothing (major) wrong with Forth, Lisp, or Python syntax, and if you think there is, it's just a prejudice that is slowing you down. Stop being so delicate and get over it.	inimino	12.519483	-7.073077	comment	3.0	26.0	1488706700	12.397664
13811632	Yes, CoffeeScript, in 2009.Despite b	"Yes, CoffeeScript, in 2009.Despite being a modest, fun experiment in stripping JavaScript down to a minimal skin, and without any corporate backing, it wound up catching on a little bit.Thanks to the hard work of Geoffrey Booth and Simon Lydell, among others, there's a new ""V2"" version that includes many ES6 and 7 features that's almost ready to go: http://coffeescript.org/v2/CoffeeScript was designed extremely conservatively. The goal was to stick close to JavaScript semantics, to avoid having a runtime, and to avoid features that would require gymnastics and overcomplications in the output, or would run noticeably slower than the raw JS equivalent.These days, I'm most interested in trying something from the other end of the ""political"" spectrum: What would happen if you tried to make a w"	jashkenas	12.405526	-6.530129	comment	3.0	17.0	1488903855	-10.523238
13829752	Django REST framework 3.6 released	Django REST framework 3.6 released	tomchristie	12.877397	-6.518237	story	3.0	90.0	1489072350	10.146717
13836768	This is from a couple of weeks ago, 	This is from a couple of weeks ago, there's a few things broken still, but what languages do have full support out of the box?http://blog.honeybadger.io/ruby-s-unicode-support/	lucaspiller	12.350925	-6.9591846	comment	3.0	10.0	1489126800	12.326719
13843933	I've used Python for about about eig	"I've used Python for about about eight years, and Ruby for right at six months. It took me about a week to feel competent in Ruby, and about a month before I was really comfortable with all of the metaprogramming functionality. Add another month to that before I really grokked ActiveRecord.I much prefer Python. I thought for a long time that this was because I learned most of the fundamentals of computer science and professional development in the language, but I'm at the point now where I'm sure that's not the case. The Zen of Python really shows the differences between the two of them - ""explicit is better than implicit"", versus Ruby's ""convention over configuration"". I don't mind writing some boilerplate in Python, because the boilerplate is itself fairly terse and fully informs you of "	LyndsySimon	12.485906	-7.029589	comment	3.0	10.0	1489201023	12.377617
13848488	>Scala/Akka would be another choice 	>Scala/Akka would be another choice but it has totally different semantics from Erlang, and you can never forget you are working in an async modelThe actor model is asynchronous by definition. Did you maybe intend to say something else? What makes Erlang different is that the BEAM VM is made for the actor model, so it has per-actor GC and other things that are basically impossible in other languages that don't use BEAM.	tormeh	12.355731	-7.518883	comment	3.0	11.0	1489284427	12.856064
13848760	What's a good use for distributed Er	What's a good use for distributed Erlang?  I'm writing some Elixir apps, and I can't think of a great reason to use distributed between a client and a daemon running on the same box.	amorphid	12.583138	-7.484205	comment	3.0	11.0	1489289261	12.925656
13847870	We’ve gone full circle.Truly look at	"We’ve gone full circle.Truly look at the PHP code in this article, the JS dependency hell here and in the recent JS article.Look at the code. At the environment. At the libraries.Who isn’t reminded of what Java looked like years ago?We’ve come full circle.    ------------------------

Now, if one asks why this is, the answer is pretty simple – enterprise products.To build software of a certain scale, certain technology, patterns, etc are required. These are what we see here again  – ORMs, complex dependency systems, complicated frameworks, etc.One might wonder why people even write PHP and JS nowadays, if Java is still faster, JS and PHP are now equally complicated, and Java ported all of the advantages of the others.And, in fact, the Play Framework (which supports Java and Scala) is growi"	kuschku	12.70746	-6.6176133	comment	3.0	10.0	1489274739	10.32142
13900898	Some on this thread have recommended	Some on this thread have recommended Norvig's PAIP, but that's kind of an old school AI book in that it focuses on heuristic search and logic (implementing prolog in lisp at one point, very impressive stuff actually); but is lacking any coverage of statistical machine learning, which is the approach that underlies most of the cool stuff these days. It's still a great book, but I'd instead recommend a path that focuses on machine learning:- The Master Algorithm: made for a general audience, gives you a lay of the land- Python Machine Learning by Sebastian Raschka: gives you practical skills using python, scikit-learn, numpy, jupyter notebooks, pandas etc. From zero to kaggle in 4 chapters, goes deeper after that. Also goes into enough theory you aren't flying completely blind.After that, I'	krosaen	13.12951	-7.2893376	comment	3.0	13.0	1489838504	-0.16710779
13906144	I cannot speak for Elixir, but comin	I cannot speak for Elixir, but coming from the Erlang world, I'm sure it's a fine language that has sane defaults, much like Clojure.However I switched from Python to Scala and besides the performance issues and the poor handling of async I/O that I had with Python, by far the biggest problem with Python was all the insecurity while developing with it. It drove me insane, because we had a production system that always had problems due to how poorly Python's ecosystem treats errors.Just to give an example, at that time we were using BeautifulSoup to do HTML parsing, a library resembling JQuery, except that BeautifulSoup can return nulls all over the place and no matter how defensive I got in my coding, null pointer exceptions still happened. And what was the solution for async I/O in Python	bad_user	12.612908	-7.467198	comment	3.0	23.0	1489916460	12.916709
13907274	Despite its checkered past, isn't ph	Despite its checkered past, isn't php these days a more powerful language than ruby?	woah	12.718743	-6.7873893	comment	3.0	10.0	1489933897	10.407222
13911106	While I have not attempted to use Em	"While I have not attempted to use Ember in well over 1.5 years, the key phrase being ""attempted"". These days with Vue.js and React, why would Ember still be a solid choice? For me, Ember was too complex to groc, and seemed over engineered with no clear focus on making development easier and faster."	nodesocket	13.113004	-6.444074	comment	3.0	13.0	1489974539	-15.514151
13935059	Ruby 2.4.1 Released	Ruby 2.4.1 Released	kyledrake	12.643433	-7.029083	story	3.0	41.0	1490217424	12.386783
13948751	That's why I'd personally prefer Flo	That's why I'd personally prefer Flow for that. It has a more elaborate type system anyway. [1]Moreover, Flow is pure annotation, which can be removed by Babel. And Flow is also backed by a large company (Facebook instead of Microsoft).However, if you do want to generate JS, use a language that elminiates runtime errors almost completely, such as Elm or OCaml (through bucklescript or js-of-ocaml).[1] The following presentation contains some scary examples of incorrect code not rejected by Typescript. I'd rather prefer Flow which errs on beeing too strict: https://djcordhose.github.io/flow-vs-typescript/elm-flow-typ...	vog	12.427496	-6.7383037	comment	3.0	10.0	1490362142	-10.448536
13950091	Crystal could be a really powerful t	Crystal could be a really powerful tool for enhancing existing Ruby code.Imagine a world where you write your code in Ruby, but farm out the expensive operations to a Ruby-like Crystal extension (similar to what is commonly done with C or Rust). I think this is possible already (just after a quick Google search[1]), just not friendly for the average Ruby dev to implement.[1] https://www.slideshare.net/AnnaKazakova/how-to-write-ruby-ex...	deedubaya	12.606199	-7.1792927	comment	3.0	11.0	1490373138	-11.251088
13950312	70x faster?  If Crystal gets its own	70x faster?  If Crystal gets its own port of Ruby on Rails, oh boy.	ajamesm	12.6351595	-7.2363515	comment	3.0	13.0	1490374534	-11.248903
13952249	Flow is JavaScript (with type annota	Flow is JavaScript (with type annotations) while Typescript is an entirely different language that needs to compile to JavaScript. You do not need any source maps for Flow as it just replace the type annotations with spaces. So you get to eat the cookie and keep it, while with Typescript you eat the cookie and lock yourself in.	z3t4	12.452638	-6.743905	comment	3.0	15.0	1490389896	-10.472841
13952524	It seems like Ruby is a bit of a sma	"It seems like Ruby is a bit of a small community to target with this type of thing. Wouldn't Ruby developers be better served by moving on to one of the several other idealistic languages in widespread usage right now? TypeScript is getting good reviews and Python is great.I know it seems harsh, but when I hear people talk about the ""beauty"" or ""elegance"" of Ruby, I just think of someone who started coding in the 2005-2009 era and started out with RoR, which was frequently presented as ""the Mac of programming languages"" around that time (and this description alone should give serious people pause).These people got into the scene too late to remember trying to hack Perl, Ruby's own spiritual predecessor, and the pseudo-joke that it was a ""write-only language"". The two relics that remain fro"	cookiecaper	12.60139	-7.0433364	comment	3.0	16.0	1490392231	12.395646
13953638	> everything that uses that type is 	"> everything that uses that type is statically checked to be ""behind"" that gatewayIn a distributed system, the largest the ""gateway"" can reliable be is a single node, because you don't get guarantees about the code that other nodes in the system are running.  Even the single node case poses difficulties, because I believe in OTP the upgrade path means you have to transfer state during upgrades. What if the types of the state during the upgrade don't exactly match?  Can multiple types of a thing exist simultaneously?  How is these types versioned? etc...  it gets complicated.> Therefore, when receiving a message, you really only ever get a Maybe Message or Either Message Error or whatever you want to model it as.Sure, you can receive messages as ""Object"" and then cast/parse them inside the "	platz	12.49138	-7.5068207	comment	3.0	16.0	1490406642	12.921136
13954137	Django Unchained was meant to make t	Django Unchained was meant to make the viewer enjoy violence against certain people. To do this, they needed to make those people as awful and unsympathetic as possible.	yummyfajitas	12.884741	-6.486949	comment	3.0	17.0	1490416920	-8.942908
13979682	I think Ember is really good at mark	I think Ember is really good at marketing the stuff they work on, but it is usually overhyped.Fastboot, for example, was announced what, 3 years ago? The readme says it's still not ready to use:> The bottom line is that you should not (yet) expect to install this add-on in your production app and have FastBoot work.https://github.com/ember-fastboot/ember-cli-fastbootI find this is often true of Ember projects (like Glimmer 1), a lot of hype for something that has a lot of rough edges.	Touche	13.116762	-6.4463024	comment	3.0	11.0	1490728333	-15.512601
13980429	Maybe you should read about it a bit	Maybe you should read about it a bit before you dismiss it with useless snark.This is not a new JS framework. This is the view layer extracted from Ember as a standalone library.	a-priori	13.107758	-6.4408994	comment	3.0	12.0	1490733400	-15.5121155
30734382	PHPFor all the hate PHP gets, a mass	PHPFor all the hate PHP gets, a massive positive of it is entire classes of development friction that just doesn’t exist for it.COMPILE: Slow compile times, nope - it’s interrupted & you can run the code instantly.DEVELOPMENT: Confusing and complex development tooling or middleware, nope - just SFTP a single file to your webroot.So the language / environment you pick to develop in can has massive impact on productivity.	tiffanyh	12.762313	-6.642248	comment	3.0	20.0	1647702684	10.324254
30749956	Here's a fun way to annoy a Rails de	"Here's a fun way to annoy a Rails developer.    (Time.now + 1.month).to_i == Time.now.to_i + 1.month.to_i
    #=> false"	inopinatus	12.75017	-6.933252	comment	3.0	15.0	1647834096	12.386329
30774351	Tell HN: Confessions of a Prideful J	Tell HN: Confessions of a Prideful Junior Programmer	kbrannigan	12.7737255	-6.620113	story	3.0	6.0	1648004229	10.344895
30782135	I love the product, not only does it	I love the product, not only does it have an easy to use web/offline app, I am also able to checkin the diagram source into git for version control, see: https://github.com/roapi/docs/blob/main/src/images/roapi.dra.... Then I can use automations to generate images based off that source file: https://github.com/roapi/docs/blob/main/src/images/roapi.svg.	houqp	12.506571	-6.5732384	comment	3.0	12.0	1648062813	5.0674706
30813566	Readability, 100%. I have programmed	Readability, 100%. I have programmed in large projects in both Python and Ruby.Ruby is very productive to write, because everything and the kitchen sink is at your fingertips at all times.But because of Ruby's many ways to skin a cat, everyone's code is very different. Add to that the penchant for domain-specific sub-languages in Ruby: new syntaxes that you might have to learn half a dozen of to integrate a large project, all of which end up being more limiting than if you could just, you know, write Ruby.Contrast with Python, which goes so far at normalizing as to have a language-wide coding standard in PEP8. Python has its problems, package management and distribution is still ugly for example. But I can read any project I find and understand it without loads of context.	largbae	12.5293865	-7.018766	comment	3.0	11.0	1648315185	12.378387
30815796	> Python is still the easiest to rea	"> Python is still the easiest to read when you come back to some old codeLucky you.  You must not have seen the ""pythonic"" monstrosities I've seen.Python has such a low barrier for entry that one can ""get stuff done"" with absolutely atrocious and often very overly complicated OOP-ish code.Ruby is not my favorite language, but I would bet real money that without dependence on libraries, nobody could show me Python code which I could not show more logical, consistent, and readable Ruby code which solves the same problem.  I say Ruby because it's of the same ""type"" and follows similar methodologies.Python suffers from far too many years under the leadership of one odd person.  It has a cult-like following, whereby anyone who disagrees is an outcast.  Where else could you hear comments like, """	blunte	12.443721	-7.0166054	comment	3.0	16.0	1648332435	12.319313
30821563	> There are efforts being made to ru	> There are efforts being made to run PHP on Serverless infrastructureThis is very interesting, I didn't know this. This is a perfect fit for PHP, as it was always designed with this model in mind, and the programmers that use PHP are already used to this way of developing, as that's exactly how php-fpm and mod_php already work and always have.	chockchocschoir	12.755124	-6.5578446	comment	3.0	16.0	1648398744	10.222641
30821871	Everyone has standardized on Compose	Everyone has standardized on Composer. It's a better package manager than NPM, doesn't have many of the security problems that plague NPM.The PHP internals maintainers don't have the time to maintain a tool like Composer alongside the rest of the language. And if it was bundled with PHP, it would be stuck in lock-step with PHP version releases, which means improvement can only be made once a year, basically. That's not acceptable. Composer wouldn't be what it is if it had to release so slowly.	francislavoie	12.616999	-6.558142	comment	3.0	15.0	1648400770	10.252837
30822138	How widely is modern PHP deployed on	How widely is modern PHP deployed on the super-cheap shared hosts? Being able to write robust web applications that can be deployed on any cheap shared host in the world seems like a superpower.	mwcampbell	12.776498	-6.584075	comment	3.0	10.0	1648402412	10.307432
30822566	Used PHP for many years for high vol	"Used PHP for many years for high volume web applications. My biggest gripe is you (at least had to) run php behind another server (nginx, Apache) which meant your ""scope"" is always restricted to serving the current request.If you want to do something like share some heavily read data across processes you need to then introduce memcahe/redis in to your stack, whereas in something like Go this can be done in your application code. This also means PHP is a nightmare for connection management to others resources like your database - if you autoscale your API you are in a very vulnerable place for maxing out connections on your database as every client request needs to create it's own. You can solve this with something like Envoy I think, but again it's adding more complexity to your stack, mor"	lastangryman	12.736561	-6.607335	comment	3.0	13.0	1648404951	10.261465
30823351	I've probably written some version o	"I've probably written some version of this comment over dozen times throughout the years when discussion about PHP rears its head (note that I'm fond of PHP):PHP as a language is... okay. It's been modernized to include many of the faculties a developer would expect of a language in 2022. But honestly, I'm ready for the ""improvements"" to the language to stop. The closer you get to C# or Java the more obvious it is that PHP will never catch up! It's not that it has to catch up, rather, that few people actually choose PHP because the language is so great. If you were choosing a your stack based on ""which language offers us the most features or highest ability to express our problem"" you wouldn't be choosing PHP!Here's the secret: PHP is probably the best language for server side webdev becau"	kingdomcome50	12.749345	-6.6337748	comment	3.0	13.0	1648409982	10.341144
30833105	Sudoku is that for me.  Feels exactl	Sudoku is that for me.  Feels exactly like work, but perfectly balanced where is hard enough to be interesting and easy enough to be fun.	ghostbrainalpha	13.446629	-7.4068546	comment	3.0	12.0	1648488606	15.071
30844127	I think that is exactly the problem 	I think that is exactly the problem with Flask. Look how simple it is! Except, as you say, you almost always need at least some of that stuff, and wiring it together yourself is/becomes an unholy mess (IME). And getting set up with Django is just as simple, so I don’t buy that argument anyway.	saila	12.756338	-6.552983	comment	3.0	20.0	1648568918	10.033141
30844335	The problem with Django is that it's	The problem with Django is that it's so opinionated.  If you don't really use the admin interface and you want to do things your own way you will spend way more time wrestling with Django than you saved using a few plugins.  Also, the ORM is hot garbage that you have to carry with you to some degree if you do actually use the admin  at all.	CuriouslyC	12.887089	-6.4854236	comment	3.0	12.0	1648569906	10.035226
30844410	trying to figure out how this compar	trying to figure out how this compares to Phoenix's frameworks LiveView, does HTMx use websockets to communicate state change? Seems like I could just end up using HTMx in lieu of learning Elixir and Phoenix	tomatowurst	12.899309	-6.8269916	comment	3.0	13.0	1648570180	12.717846
30848406	I've worked with Ruby + Sorbet, and 	I've worked with Ruby + Sorbet, and also with Java. I would rather write Ruby + Sorbet than Java right now. Ruby is a really nice language.Though Java still has some great strengths, especially the 8+ functional programming features and the concurrency library is great. If I could use Rails with Java it might be a different story though, since I hate Spring.	ecshafer	12.511128	-7.014754	comment	3.0	10.0	1648588198	12.308811
30851012	"So... Erlang / OTP? 
Sweet."	"So... Erlang / OTP? 
Sweet."	strofcon	12.575212	-7.5137496	comment	3.0	10.0	1648608334	12.905279
30860857	This seems like a really, really goo	This seems like a really, really good justification for the Rails Way of having a sane and predictable app file structure and layout where developers who have never seen your code before can jump in on day one and figure things out very quickly.Would love to see more web frameworks adopt this opinionated methodology to save us all some time.	sam0x17	12.758685	-6.8913703	comment	3.0	10.0	1648674932	12.341448
30871187	PHP had a positive trajectory too. R	PHP had a positive trajectory too. Rust is riding a wave of interest but most are going to revolt against its complexity.	kevin_thibedeau	12.731911	-6.6717925	comment	3.0	15.0	1648754175	10.333698
30899423	I once inherited a mission-critical 	I once inherited a mission-critical PHP project which had no version control, no tests, and no development environment (all edits were made directly on the server). It used a custom framework of the original author’s own devising which made extensive use of global variables and iframes and mostly lived in several enormous PHP files. I was able to clean it up somewhat, but there was one particularly important file that was so dependent on global variables and runtime state that I never dared touch it.When I was finally able to retire the project several years later, I first replaced the home page with this picture: http://2.bp.blogspot.com/-6OWKZqvvPh8/UjBJ6xPxwjI/AAAAAAAAOv...	thedanbob	12.677457	-6.50893	comment	3.0	10.0	1649010947	10.294484
30901085	An Intro to Python Flask	An Intro to Python Flask	qoding	12.729216	-6.5602455	story	3.0	26.0	1649022767	10.005789
30908312	> In fact, I would say that flow typ	"> In fact, I would say that flow typing is almost like a workaround for missing pattern matching.If flow typing is 'type narrowing' (the article kinda dragged on pulling in unrelated concepts so it lost me), then if anything, it is at least as good as pattern-matching/switch-blocks. At least in Typescript. That is because it works in switch statements and non-switch statements and provides the same guarantees. I don't get this argument.Consider something like:    data: {pages: number} | null = f()
    if (!data){
       return 0
    }
    return data.pages + 5


Sure you can switch on the 'data' as well (exhaustive type-switches are a thing in Typescript too), but thats a syntactic preference. It surely is nice to get the same guarantees without _needing_ a switch statement."	parhamn	12.40744	-6.792687	comment	3.0	10.0	1649088648	-10.448956
30908767	So I've been working on a personal p	So I've been working on a personal project which is in a mix of C++ and TypeScript -- partially because of practicality and partially to learn TypeScript, and I'm really liking the language.One question I have is whether there's any possibility that TypeScript could, in the long run, gain performance advantages over pure JS? That the compiler could leave behind some type information artifacts so that V8 (or similar) could use that information at runtime to optimize method dispatch and other operations?Likewise with the flow pieces mentioned here, I gotta think that the VM could optimize out certain runtime checks on dispatch or conditional branching if it knows that the compiler has already checked for these?	cmrdporcupine	12.350706	-6.7734623	comment	3.0	13.0	1649090638	-10.465829
30917448	This is a list of quite rare feature	"This is a list of quite rare features that make Pharo interesting:
https://pharo.org/features"	xkriva11	12.343837	-7.2603297	comment	3.0	11.0	1649156306	7.0912285
30919144	"What do you mean by Ruby ""hackery""?I"	"What do you mean by Ruby ""hackery""?I'll agree that how to do things properly with Ruby isn't obvious when you're new to the language - just as it isn't obvious how to do things in Java (or other JVM languages) when you're coming from Ruby or another language.[0]But Bundler doesn't work all that differently from Maven, in the end. Instead of running your commands through `./mwnw`, you run them through `bundle exec`[1]. Dependency management is straightforward and mostly hassle-free (the problems arise ""only"" when you use C extensions which, to be fair, is not that rare, but I don't really see a way around this in a language where you need C for certain fast things). In particular, Bundler by default[2] also stores dependencies centrally like maven to avoid duplication and then selects the a"	Tainnor	12.505027	-6.9328523	comment	3.0	13.0	1649167657	12.369366
30922542	I always struggle with the idea that	"I always struggle with the idea that ""frameworks are bad, combine libraries instead,"" it makes sense and makes orthogonal libraries not step on each other or make things more complicated. The thing lost is having an easy time getting up and running quickly. I was always a big Liminus champion fir this reason, they tried really hard to group a good set of libraries and document it all well. Bur this work is also fantastic. Sometimes, you really just want to get something done, and the batteries included solution might be the thing that gets your project done. I came from Ruby on Rails and will always miss that ability to get a DB connected, Javascript enabled, dynamic website onto something like Heroku from 0 to production in like... 20 minutes. So thanks for Coast, looks like it will help "	gleenn	12.736676	-6.659143	comment	3.0	18.0	1649181615	12.25854
30922707	Agree. There is a lot of value in th	"Agree. There is a lot of value in the ""easy, batteries included"" solution which is why Rails gets so much love from the start-up community. The problem always seems to be that the same things that makes Rails easy to get started with (cough ActiveRecord cough) also make it easy to create foot-guns in the future (provided your start-up lasts long enough to get to that point).Combining a Rails like framework that makes things easy with a language who's idioms prioritize simplicity seems like a great combination."	adamkl	12.755765	-6.9061155	comment	3.0	15.0	1649182355	12.358549
30928495	I've been using Pharo professionally	"I've been using Pharo professionally for about 1.5 months now, and I'm beginning to getting the hang of the language, and the culture surrounding it.I'll share a couple of thoughts.__General Development/Hacking__0. From Pharo 9 and onwards, it runs smooth on an M1 Mac.1. If you're interested in developing in Pharo professionally, we're hiring [1]!1b. Other ways to learn about Pharo is to come to Smalltalk/Pharo conferences. I've been to the Pharo Days in Lille recently and I've learned a lot in those 3 days! Other than the Pharo Days there is ESUG.1c. Check out the Discord channel. People have been really helpful [0].2. A big part of the documentation can be found inside the image. For example, press SHIFT + enter and type ""tutorial"" or ""exercise"" and a few will come up. Moreover, when you"	melvinroest	12.337989	-7.2677884	comment	3.0	11.0	1649219324	7.116991
30936206	Oh. So you've reinvented PHP. Nice.	Oh. So you've reinvented PHP. Nice.	donohoe	12.762148	-6.632011	comment	3.0	10.0	1649271927	10.34363
30950424	I've been very attracted to learn Ru	I've been very attracted to learn Ruby a couple of times, being exhausted of the JS ecosystem. Everybody who's used it seems to fall in love with it, but I can't get over just how slow it is... It takes a fresh installation of Discourse over 10 minutes to start-up again on a small underpowered VM and uses 10x as much RAM as an alternative platform such as Flarum.	marcus_cemes	12.646671	-7.007151	comment	3.0	11.0	1649366121	12.343981
30995377	It was mostly a learning project for	"It was mostly a learning project for me, but I'm planning to do a write-up soon as a guide for Python developers moving to Elixir.Re: ETS, I was just imagining something like Realtime but without Postgres, just using ETS. Most of the use cases I can think of for this type of thing don't require relational data, so I was thinking of just using ETS as a KV/document store to hold user and application state and then reacting to changes in to that the way you are here. I think you'd lose the benefits of relational queries and persistence but gain some function in overhead and decentralization. I'm moving to Elixir after spending a lot of time doing ""serverless"" and event-driven architectures, so now I'm spending a lot of time thinking about how to get the benefits of both worlds."	Mizza	12.709104	-7.3881025	comment	3.0	14.0	1649712743	12.926728
31002669	> But on the Ruby side, stuff gets d	> But on the Ruby side, stuff gets deprecated/broken all the time, so we need much more manpower to maintain it.Maybe you should consider Perl? I'm only half joking. I have a few Perl projects running unchanged for 15 years and hopefully for the next 15 years as well.	nwellnhof	12.593244	-7.0280223	comment	3.0	10.0	1649771221	12.405515
31012192	PHP and C inspired don't sound like 	PHP and C inspired don't sound like selling points to me. Quite the opposite factually	dtx1	12.762873	-6.6375504	comment	3.0	15.0	1649836607	10.293821
31027370	I'd say that Ruby has symbols becaus	I'd say that Ruby has symbols because Ruby has mutable strings.If your strings are immutable and interned, they are as good as symbols; this is why Python does not have symbols.ECMASript introduced symbols because JavaScript strings, while immutable, are not necessarily interned. Symbols are much cheaper to compare for equality: you only need to compare the pointers / ids, not actual string bytes.Lisp has symbols for the same reason: Lisp strings are vectors, which are also mutable.	nine_k	12.448188	-7.056116	comment	3.0	10.0	1649945907	12.368307
31027662	When I started ruby, I thought symbo	"When I started ruby, I thought symbols were weird and dumb.After a while, it was one of the things I liked the most. Maybe my favorite part is I didn't have to read and write so many damned "" characters!""Converting"" ""text"" ""like"" ""this"" :to :this :format, really helps me read it.I might be the weird guy on this. Wouldn't be the first time."	BurningFrog	12.532193	-7.0646334	comment	3.0	14.0	1649947418	12.382259
31030305	I was on the same page, but now movi	"I was on the same page, but now moving away from that.I more and more dislike how Ruby (arbitrarily) allows omitting brackets. but not always. Often making the code harder to read. What is the call-chain in this rspec magic: `expect(something).to be >= 1` (quick: where and how do you add a custom failure message).And while `attr_accessor :time, :date, :state` are really neat, I more and more dislike constructs like `validates :name, :login, :email, presence: true`. And prefer to write them explicit and unambiguous: `validates_presence_of(:name) etc`. Which is only a very slightly improvement over  `validates_presence_of('name')`.And don't get me started on ""saving time"" by typing less characters or shorter lines of code: if this is what makes you Go To Market faster, there's something very"	berkes	12.484101	-7.02613	comment	3.0	11.0	1649957704	12.378817
31036858	I'm super interested - I'm always on	I'm super interested - I'm always on the lookout for a replacement for Ruby as my primary scripting lang. LISPs seem super cool for scripting because of the exploratory nature of the REPL - writing a script, at least for me, is a process where I have to run it dozens of times, tweaking it every time, and then finally running it regularly without monitoring, and the REPL would save so much time in the first part of this process.But while I'm interested, I can't find any docs for what's included. For scripting, I think I would at least need the following in the standard library, no package management required:1. A good API for filesystem ops, such as reading and writing files. Ex: reading the lines of a file into a list, writing a list to a file as lines etc.2. Making network requests easily	d3nj4l	12.502338	-6.9669013	comment	3.0	14.0	1650000641	12.41998
31038059	I think Elixir probably lost momentu	I think Elixir probably lost momentum because dynamic languages are on their way out in our industry (with the exception of Python, due to popularity in ML and data science).Many people are upgrading JS to TS, and most of the popular languages (Java, C#, C++) are static, compiled languages.	smt88	12.647135	-7.458456	comment	3.0	11.0	1650014137	12.929874
34594915	"    request.setURL(""serverurl"").send"	"    request.setURL(""serverurl"").send()

This style of sentence structure was one of the strangest things to get comfortable with. You have to think a bit differently.The function chaining makes sense here and I wonder if the language had influence on Ruby's development.Anyone interested in the language should definitely check out the Genki series. It's written well enough you could fully teach yourself.https://genki3.japantimes.co.jp/en/intro/ or amazon."	vvilliamperez	12.502082	-7.090604	comment	3.0	11.0	1675172752	12.346972
34615484	I can't trade TSX for any text templ	I can't trade TSX for any text templates. Being able to write tags and having them syntax-checked with types support is indispensable. I wish that those frameworks embrace TSX rather than trying to drag users to the dark past.	vbezhenar	12.40761	-6.7450047	comment	3.0	11.0	1675277202	-10.459387
34624367	The reason Erlang (and Elixir) are i	The reason Erlang (and Elixir) are interesting are not the languages themselves (although Elixir is a very nice language in my opinion), but the runtime behind them, BEAM.The BEAM is the brainchild of the excellent engineers at Ericsson, the product of decades of R&D into building performant, scalable and reliable software for their telephony products.It scales like a dream, runs your application on all available cores with no trouble at all, handles massive amounts of concurrent requests without breaking a sweat. The programming techniques it enables with projects like Phoenix LiveView are unique and powerful.	mikl	12.612617	-7.4870777	comment	3.0	18.0	1675331214	12.909717
34626790	Erlang isn't dying but not many peop	Erlang isn't dying but not many people care for it in capital market. Looks at the traits of Erlang, it's designed for telecom environment which is almost opposite of capital market.1. Fault tolerance is almost all hardware driven. Capital market participants spent billions of dollar building reliable private networks.2. Distributed in trading doesn't mean what FAANG are doing. Trading systems for example usually run 2 hot-warm systems with real-time replication commits, that's about it. They don't run horizontally scaled systems because network time would kill their performance.In my experience, I haven't heard anyone asking for hot swap code and high availability (outside of trading hours).Are there shops out there that run Erlang? Sure, but most companies don't care about Erlang simply 	aynyc	12.558119	-7.5081406	comment	3.0	20.0	1675347537	12.913952
34655089	Hey,folks who are working with Prolo	Hey,folks who are working with Prolog - what sort of work are you doing?	joeatwork	13.152217	-7.3005095	comment	3.0	13.0	1675523974	-12.497161
34672774	every figgin web dev topic, populari	"every figgin web dev topic, popularity does not evidence merits. It's just a shitty language that existed at the right time when web technologies were booming.When more options become available, people stop choosing PHP.And please don't reply with js, like ""but PHP is  better than shit"", that's a real high bar."	nsonha	12.747279	-6.6101203	comment	3.0	19.0	1675652623	10.282163
34674047	Eh, it doesn't matter that I know PH	"Eh, it doesn't matter that I know PHP. I don't want to use it and have barely touched it in the last few years, despite understanding many of its quirks. I'm still using WordPress at the moment but if I have to write PHP I might just quit using it.Such a simple question as whether something is passed by reference or by value shouldn't result in ""This is a super interesting piece of information! Looks like it's true; but I couldn' find any official documentation supporting this fact. We also need to know which versions of PHP support this lazy copy concept. Anyone has more info?"" https://stackoverflow.com/a/9740541/3461"	benatkin	12.744895	-6.6427655	comment	3.0	10.0	1675664773	10.346775
34685515	Here is an easy example.You have a p	Here is an easy example.You have a project that has both typescript and javascript. Someone makes a change in a JS file. They try to access a property of an object but there is a typo.You could fix the typo and be done.Or you could fix the typo, and convert the file to TS and make sure its typed.	nonethewiser	12.351714	-6.8454723	comment	3.0	10.0	1675723113	-10.484427
34693938	A lot of robotics projects like this	"A lot of robotics projects like this are done by people who only have a background in mechanical engineering. This team seems to have dedicated software people so they can use ROS (Python/C++). However it's common in robotics to just draw something in Simulink/Stateflow that is pushed to the microcontroller or FPGA. No low-level C expert required.I'm sure most software people will be horrified how much ""safety critical software"" in modern cars and aircrafs is autogenerated based on something drawn up in Simulink/Stateflow."	0xDEF	12.523864	-6.837827	comment	3.0	16.0	1675783310	12.19207
34703352	why does astrophysics still use ergs	why does astrophysics still use ergs	andbberger	12.562558	-7.5114503	comment	3.0	10.0	1675823665	-8.973989
34707719	https://elm-lang.orghttps://elmlang.	https://elm-lang.orghttps://elmlang.slack.comStatic FP lang targeting the web as a runtime environment. Wonderful people. The nicest compiler in the game. Tight dev loop. Good tooling.No JavaScript knowledge required. Join us.	eckza	12.942123	-7.6405334	comment	3.0	10.0	1675863065	-12.761316
34721238	It’s 2023 and I still think nothing 	It’s 2023 and I still think nothing beats Rails (even with all its flaws).	alxmng	12.762072	-6.943806	comment	3.0	19.0	1675931845	12.357307
34746492	Typescript didn't win anything and i	Typescript didn't win anything and its type system doesn't deliver nowhere close to elm s value.Elm was simply to risky given how quickly the maintainers fenced off native access.	jokethrowaway	12.914072	-7.6107554	comment	3.0	22.0	1676066210	-12.685283
34746748	> Reason and Elm died offI'm still q	> Reason and Elm died offI'm still quite sad that Reason died. The syntax was much more comfortable and familiar than OCaml's while still delivering a ton of power. Have an optimizing compiler run on your JS was actually quite helpful. As a bonus you could have your backend running either Node or OCaml depending on your needs (ecosystem vs perf).Was really unfortunate when the drama around Reason the language vs the Bucklescript compiler blew up and resulted in ReScript (a language that appealed to approximately no one in the existing user base).	Hermitian909	12.369433	-7.614637	comment	3.0	11.0	1676067463	10.405357
34746782	Elm is and always has been (AFAIK) a	Elm is and always has been (AFAIK) a one-man project. It's not suitable for anything that you depend your livelihood on. Look at Svelte, Vue, React, Angular.	GiorgioG	13.001473	-7.6837535	comment	3.0	14.0	1676067631	-12.7600355
34746884	My opinion: I wouldn’t use Elm as a 	My opinion: I wouldn’t use Elm as a solo founder, as you want to put your energy into shipping and Elm, while very good will probably slow you down when you hit the thing it cannot do, and then you need to fork it and change the core code.React on the other hand, has a vastly larger ecosystem already and is designed to work well with 3rd party code.Middle ground is using an Elm-like architecture within another framework. The keyword here is “TEA architecture” where TEA means The Elm Architecture, or also MVU (Model View Update)Elm is excellent and has done a lot of good for the front end world through knock on effects. It is good fun to use. I have a few projects based on it open source. So I am not against Elm I just think it will be annoying if the goal os to ship fast.	quickthrower2	12.991918	-7.6313453	comment	3.0	10.0	1676068204	-12.758374
34746941	I really don't like such comments th	I really don't like such comments that like any nuance.I know multiple companies that use Elm and many people depend on them for their livelihood.I would not recommend it due because it has never been a really open source project and only the core maintainers were allowed to write libraries that interfaced with JS apis without the need of ports.Still, it baffles me how many people would chime in and feel compelled to comment regardless of the fact that hundreds of projects out there make money with Elm.	epolanski	12.999056	-7.68447	comment	3.0	10.0	1676068555	-12.753336
34746978	When you look at Elm with similar pr	When you look at Elm with similar projects, like Melange or Rescript, they’re all “dead” in the sense that they aren’t the moving targets that most people expect of the Javascript ecosystem.That said, they are still under active development with their own small communities achieving what they set out to do, and no more. No expansive rewrites or fancy new features.Compare with Typescript, which always is “improving” because it’s trying to provide type inference around a loose Javascript model, so there’s always more complexity to be added.	chris_armstrong	12.967622	-7.665958	comment	3.0	11.0	1676068730	-12.728059
34747407	Typescript won because is doesn’t as	Typescript won because is doesn’t ask developers to write better code, only that they write more code. As you pointed out, its syntax is familiar enough to be non-threatening to existing devs and its type system is completely optional in so far that I’ve worked with clients whose devs proudly proclaim their project is typescript yet they have _no_ types defined. Not that the type system is good anyway and I’m not even talking about `any`. That’s why it is so frustrating to me. Yes, we need a strong typed language but typescript’s type system is just disappointing, so of course it’s popular.Typescript does make the devs _feel_ like it’s secure and that’s more important. Marketing works.	tacotacotaco	12.352517	-6.8230066	comment	3.0	17.0	1676071346	-10.452243
34748269	> This basically crippled the langua	> This basically crippled the language beyond usability for everyone else.This is not true. You can argue that it was perhaps the downfall in terms of contributions and popularity. But you don't need native code for writing apps in Elm.	the_gipsy	13.003329	-7.68835	comment	3.0	13.0	1676076751	-12.761806
34749106	"Yep. And the core team has that ""hap"	"Yep. And the core team has that ""happy cult"" vibe where they think that if they're (passive-aggressively) polite enough, they don't have to worry about anyone's opinion outside their insular little group. I tried to use it for a little project about a year ago, ran into some problems, and, searching around, found my problems were 1. not unique to me, and 2. were definitely not going to be solved by the language designers, despite a lot of people having the same suggestions. Their attitude is ""either you design your app how we'd prefer you to or you don't use Elm at all."" This doesn't work in any other technical project, but they think it's going to work for them for some reason."	ambrozk	13.000793	-7.687825	comment	3.0	15.0	1676083887	-12.768753
34768122	One issue that's been bothering me a	One issue that's been bothering me about Deno is this one:https://github.com/denoland/deno/issues/14244You have to use a third-party Docker container if you want to use Docker locally and develop on an M1 Mac (I use Docker to separate my different dev environments). And the issue was just ignored and became stale.	katsura	12.507341	-6.4388413	comment	3.0	14.0	1676243094	-11.01648
34769411	TypeScript’s type system is very com	TypeScript’s type system is very complex and yet fails to achieve type safety to the degree that really strict languages do.I’m not that into class-based languages and prefer a language to have macros (more for DSLs they enable them for application code). However, even if those preferences were off the table, I’d still rather have something like Kotlin on the server than TS. It’s simpler and isn’t weighed down by 30 years of cruft.	AlchemistCamp	12.337612	-6.849698	comment	3.0	20.0	1676254472	-10.447789
34773574	I never understood why people feel t	I never understood why people feel that typescript has a learning curve. I never formally learned typescript; I just started using it intuitively. I already knew javascript, and I already understood how types work from using other languages, so there wasn't anything to learn.When people say typescript is hard to learn, do they know javascript, or are they starting from scratch?	spencerchubb	12.352551	-6.8108797	comment	3.0	10.0	1676297514	-10.484312
34788393	So, like Erlang?What’s an example of	So, like Erlang?What’s an example of a language that does this by default?	adenozine	12.513337	-7.503791	comment	3.0	10.0	1676377798	12.8947935
34815721	The no VM thing I think is a downsid	The no VM thing I think is a downside. Sure raw performance is nice but not having a process eat all system cou resources is the true beauty of Erlang and Elixir to allow you to self heal. Are you handling that with this library?	jtwebman	12.576259	-7.4881287	comment	3.0	10.0	1676528696	12.9367485
34827495	I've used `tsc --watch` as an almost	I've used `tsc --watch` as an almost-no-build-step way to write plain TypeScript with better structure (separate files, etc) for projects where dependencies aren't necessary, which works reasonably well with a few quirks, but I wish there were something more purpose-built for the task. TypeScript running natively in the browser would be amazing but I doubt that'll ever happen.	kitsunesoba	12.353285	-6.798036	comment	3.0	14.0	1676586889	-10.445517
34858916	There’s way too many options on this	There’s way too many options on this site. It’s intimidating! How should I know which DB to use? I just wanna build stuff.For local-first to succeed as a concept, it would gain a lot from having a Rails equivalent that people can get started on. If that exists, promote just that and hide all the other options.	ghiculescu	12.931167	-6.6313896	comment	3.0	10.0	1676823847	12.283696
34873891	Why not PHP on a shared or dedicated	Why not PHP on a shared or dedicated hosted server?	rexreed	12.772348	-6.5506268	comment	3.0	25.0	1676932767	10.264754
34904252	Am I not getting something or why is	Am I not getting something or why is this interesting? Some random 7 year old PHP library, cool?	agolio	12.767146	-6.623469	comment	3.0	11.0	1677106631	10.304394
34935209	What is the productivity advantage o	What is the productivity advantage of Elixir/Phoenix over other frameworks when using it for implementing more mundane SaaS (some dashboards, some CRUD,...) rather than the game lobby feature mentioned in the post?I am a developer with significant non-web development experience (Although I know pure JS and Erlang quite well), who is interested in learning some full-stack development to implement a SaaS on the side and would like to zone in on the most productive framework possible.	ak_111	12.737875	-7.3294783	comment	3.0	10.0	1677316888	12.853684
34935952	> Django does not generate anything 	> Django does not generate anything through scaffolding like PhoenixI was one of the co-authors of Devise, which is an integrated authentication solution for Rails (similar in spirit to Django), and you will easily find people who swear that the code generation solutions are miles better. That’s because eventually they’d want to customize how the framework or library work and then, instead of simply being able to change the code, you need to find the exact hook or configuration to get the behavior you want. Eventually, you end up with hodgepodge of changes that you can only understand when looking at the framework and your code side-by-side.Perhaps this is one of the topics where there is no “superior” answer, besides personal preferences and past experiences. I totally understand why some	josevalim	12.813446	-6.801723	comment	3.0	18.0	1677326063	10.494778
34938593	The Phoenix docs don't look like the	"The Phoenix docs don't look like they even hold a candle to Django. I spent 5mins in it and still don't know how to define a model. I eventually figured out a doc section called ""Ecto"" - so i had to know what ecto was to find it. Then, in those docs I still don't know how to define models. Do they expect me to manage my database and schemas separately and generate the models from that?That's completely opposite what Django does, and that's partly why Django is so productive.I don't think Pheonix and Django are competitors. They are too different."	winrid	12.855009	-6.9092355	comment	3.0	17.0	1677347114	12.672826
34945319	Why do you give non-devs the ability	"Why do you give non-devs the ability to upgrade PHP plugins and edit theme syntax, shouldn't that be the site admin handling?
Why are you not using staging to test?
These don't seem like WP problems :/"	noeltock	12.769195	-6.5936055	comment	3.0	13.0	1677417762	10.274555
34963028	I'm not sure if getting some extra s	I'm not sure if getting some extra syntactic sugar is worth adopting a whole other language into a codebase: at least, that seemed to be one of the lessons from CoffeeScript.	vore	12.341468	-6.5962634	comment	3.0	14.0	1677537672	-10.534622
34963220	If I were going to do this, I’d prob	If I were going to do this, I’d probably go all the way to using ReScript, but it’s a nice idea.I’m quite surprised it’s not called ToffeeScript though.	0x62c1b43e	12.35227	-6.6314197	comment	3.0	15.0	1677538818	-10.407273
34963450	I didn't mind the coffeescript exper	I didn't mind the coffeescript experience, but it's deeply hurtful to productivity to dev in a platform that doesn't end up winning.	technion	12.421919	-6.579809	comment	3.0	15.0	1677540039	-10.52607
34969283	The Arrow revolution is particularly	The Arrow revolution is particularly important for pandas users.pandas DataFrames are persisted in memory.  The rule of thumb was for RAM capacity / dataset size in memory to be 5-10x as of 2017.  Let's assume that pandas has made improvements and it's more like 2x now.That means you can process datasets that take up 8GB of RAM in memory on a 16GB machine.  But 8GB of RAM in memory is a lot different than what you'd expect with pandas.pandas historically persisted string columns as objects, which was wildly inefficient.  The new string[pyarrow] column type is around 3.5 times more efficient from what I've seen.Let's say a pandas user can only process a string dataset that has 2GB of data on disk (8GB in memory) on their 16GB machine for a particular analysis.  If their dataset grows to 3GB	MrPowers	12.335554	-6.4771595	comment	3.0	18.0	1677592483	9.955738
34969415	Once you reach scale, Ruby can be a 	Once you reach scale, Ruby can be a limiting factor depending on how much latency impacts your revenue. And it's not so easy to remove that dependency as I've seen.	likeabbas	12.697889	-6.9768867	comment	3.0	12.0	1677593204	12.365612
34984296	I had some personal projects a while	I had some personal projects a while ago that I used to run on Linode, I later moved them to LightSail and I never noticed any performance difference in these projects running there.These were Ruby on Rails projects.	nerdjon	12.757849	-6.91928	comment	3.0	10.0	1677688497	12.349984
34991276	Deconstructing Datalog [pdf]	Deconstructing Datalog [pdf]	luu	13.177588	-7.023424	story	3.0	93.0	1677725050	-12.308576
34997421	yeah, exactly. So I wonder if ultima	yeah, exactly. So I wonder if ultimately they want to have the browser handle transpiling things like typescript? And I definitely think there are other concerns (such as linting) that you want to happen as part of your development pipeline.	kldavis4	12.402728	-6.683829	comment	3.0	14.0	1677773109	-10.406357
34998005	Sounds to me like we've round-trippe	Sounds to me like we've round-tripped back to PHP, circa 2009.  Bout time!	jesse__	12.76181	-6.679379	comment	3.0	10.0	1677775060	10.348451
35007830	This is a good thing for serious, lo	This is a good thing for serious, long lasting projects. However, it could be an overkill for something fast and dirty.One thing I love about typescript that I've never seen in other languages is that you can adjust the type checker exactly for the level of rigidness that project at hand needs. Any is okay for 200 LOC quick prototypes.	golergka	12.355468	-6.836431	comment	3.0	15.0	1677838882	-10.471274
35009851	I really can’t stand the appeal.  It	I really can’t stand the appeal.  It’s so much more verbose and clunky than Typescript.  I want to understand why people choose it but I can’t justify using a worse, more verbose, less readable, and less powerful version of Typescript when I can just change a j to a t and have the real deal.	FractalHQ	12.368602	-6.772817	comment	3.0	19.0	1677852708	-10.45449
35010389	> Knowing that what is shipped is wh	> Knowing that what is shipped is what you wrote, not what some transpiler spat out, might have some value.There aren't that many TS features that actually require transpiling unless you want to write bleeding edge JS, and that's still a factor without typescript.> No build step is an appealing feature for some.ts-node existsMy question is how do you reuse and test the JS doc signatures? Can I export comments? Will my tests fail if the types mismatch?	schwartzworld	12.36983	-6.7720737	comment	3.0	12.0	1677855418	-10.450535
35034920	From my perspective, there's loads o	"From my perspective, there's loads of this legacy/boring crap (lots of PHP&Rails). As a ""old"" coder, I love those legacy apps that folk can't/don't give to their internal team - it becomes consulting work for me :)"	djbusby	12.749163	-6.8491526	comment	3.0	10.0	1678055832	12.356397
35037122	Looking forward to trying this relea	Looking forward to trying this release out soon. I'm not sure I quite grok streams yet (I understand the use case, but not the implementation). Verified routes aren't a game changer but certainly having more things use the compiler to verify themselves is welcome!I've been a Rails/Ruby developer for close to 10 years now I think and while I haven't used Phoenix/Elixir professionally, it's been my go to for a ton of side projects (The backend for my esports annotation tool, https://vodon.gg/ and its companion app for schlepping large video files to coaches, https://www.fileyeet.io/).The best way to sum it up would be slightly less magic then Rails, 3rd party libs might take a bit more work / copy and pasting code to integrate them into your existing codebase. You'll likely write a few more 	Rodeoclash	12.771715	-7.1025295	comment	3.0	12.0	1678072403	12.629548
35038631	I've been trying to get into Elixir 	I've been trying to get into Elixir and I figured Phoenix was the way to do it, but I have to agree about the resources for Phoenix, learning it has been a nuisance, and sucked all the fun out that I might have been unfairly expecting.Elixir itself has been enjoyable, but I have a project to build now, so it's either back to Rails or revisit PHP after 17 years.	vr46	12.758422	-7.254436	comment	3.0	14.0	1678090509	12.790989
35038823	This is another problem of Phoenix. 	This is another problem of Phoenix. There are some big projects running on it, like cars.com but the code is not public and also they have a team of people who are good programmers and can bug-fix or pay people who can help bug-fix things for them. Watch the presentation of their switch to Phoenix and the gotchas they have encountered - for example how at first they didn't take into account the impact on Phoenix when users of sites like cars.com have opened 10 or 20 tabs (that have to be updated via websockets) instead of just 1 or 2 when they are comparing their dream car and how they thought that switching to Phoenix was a bad idea. Of course, they are smart ()or have money to pay smart programmers) and they solved this problem and now are happy with Phoenix ;). But as I said in previous	Liberonostrud	12.763896	-7.2255726	comment	3.0	11.0	1678092108	12.808705
35039485	I find this a pretty unconvincing co	I find this a pretty unconvincing comment, bordering on bad faith. A lot of vaguely defined negatives with no details.> Deploying Phoenix is a nightmare when compared to Laravel.It ships with a Dockerfile which is simple to deploy if you know docker at all. How is this a nightmare exactly?> In Phx you have to reinvent a lot of things and often, of course, choosing the wrong path.Like what? Give examples. I find the ecosystem pretty well developed, actually.> Also, Phoenix is bad in environments with bad wi-fi.Do you mean the (optional) liveview, which your preferred framework Laravel is in the process of also implementing with blade/livewire?Programmed in a reasonably defensive way, Liveview will perform and behave mostly like any SPA application - often better, because there's less front 	sho	12.89101	-6.826205	comment	3.0	23.0	1678099360	12.700473
35044741	Not sure why ESBuild is included sin	"Not sure why ESBuild is included since it's in Go and there's no working link to learn more about a hypothetical speedup over ESBuild.Having used both swc-node and Rome after having used ts-node and prettier/eslint. SWC is a lot more finicky than ts-node (which itself is quite finicky) with a lot less documentation when something goes wrong (& often just looking at your setup sideways can cause it to stop working in surprising ways). Certainly I enjoy using ESBuild and I doubt swc could fill that niche right now (too immature I think). Rome is ""special"" in that it has none of the depth of eslint's TypeScript linting support and has very strange opinionated defaults that make no sense with limited configuration because the whole philosophy of that project is ""just follow our rules without a"	vlovich123	12.3964615	-6.4481893	comment	3.0	16.0	1678125477	-10.377488
35059770	Globally Distributed Elixir over Tai	Globally Distributed Elixir over Tailscale	moomerman	12.644539	-7.4695363	story	3.0	121.0	1678216369	12.922259
35070196	Quite interesting. My takeaway is th	Quite interesting. My takeaway is that it can be on par with YJIT or even outperform it despite being in early development.Btw one project I work on switched to YJIT in production and there are no problems so far (but no noticeable perf gains either)	pawelduda	12.62112	-7.0191555	comment	3.0	11.0	1678289412	12.355993
35073426	Is there any alternative to RubyMine	Is there any alternative to RubyMine as an IDE for Ruby newbies?	barrenko	12.634217	-7.0056806	comment	3.0	10.0	1678302839	12.350044
35077697	In fact, Rails is one of the slowest	"In fact, Rails is one of the slowest of the major frameworks. Based on TechEmpower's composite benchmarks:   1. drogon (C++)        92.3
   2. actix (Rust)        90.7
   3. asp.net core (C#)   83.7
       ~~ mind the gap ~~      
   4. gin (Go)            23.0
   5. spring (Java)       21.8
   6. phoenix (Elixir)     8.1
   7. express (Nodejs)     7.3
   8. laraval (PHP)        4.4
   9. rails (Ruby)         4.3
  10. django (Python)      3.2

https://www.techempower.com/benchmarks/#section=data-r21&tes..."	culi	12.643695	-6.9101453	comment	3.0	27.0	1678329097	12.318805
35078907	I've only just dipped my toes into E	I've only just dipped my toes into Elixir and Phoenix but so far really loving it. I feel like I've noticed it popping up on here way more often lately or is that just the ol' frequency bias kicking in?	omniscient_oce	12.711803	-7.427342	comment	3.0	10.0	1678345305	12.908445
35079972	I took the time to explain all the l	I took the time to explain all the latest (and some older) JavaScript and TypeScript changes, including code examples.	Killusions	12.338808	-6.7255487	comment	3.0	11.0	1678358159	-10.438007
35081074	Physical Knobs and Elixir	Physical Knobs and Elixir	lawik	12.692002	-7.4546676	story	3.0	132.0	1678369544	12.939667
36900240	Ruby's metaprogramming allows you to	Ruby's metaprogramming allows you to create really nice, ergonomic abstractions.  I can write `has_one :posts` in a User model class in Rails and a ton of useful functionality pops into existence.On the other hand, that deep magic metaprogramming can be really hard to follow if you need to understand how it works.  Tracing back through (or even debugging) a metaprogramming-heavy codebase is a nightmare.I'd argue that deep magic metaprogramming is great for when you have abstractions you almost never need to dig into.  Rails is great because it's relatively rare that I need to go spelunking in the rails codebase itself (and thus understand the deep magic).  Instead, I can rely on a huge pile of documentation, stack overflow answers, conference talks, etc to figure out how to use rails' abst	fishtoaster	12.63017	-7.0241947	comment	3.0	18.0	1690492364	12.3759985
36901350	Other than a 60ms startup differenti	Other than a 60ms startup differential Ruby doesn't sacrifice ANY speed compared with Python. Those days are over.	cutler	12.548684	-7.008397	comment	3.0	12.0	1690499816	12.358236
36901373	No! Don't do it!I'm sure there are r	No! Don't do it!I'm sure there are rare cases where these techniques are useful. Like creating developer tools or making your own object persistence layer or winning a code golf contest. But if you're an app developer for goodness sake just write a few extra lines of code. Do whatever it is you're doing the verbose and clear way, not the slightly shorter and super obtuse way.Stuffing method definitions into classes at runtime, monkey patching, dynamically generating method calls with .send. These will all be very puzzling for any future developer that works on your code, senior or junior. And come with bunches of technical pitfalls. Writing clear and maintainable code is a higher calling for us than reducing LOC and showcasing neat tricks. Even if you call yourself a Rubyist. Speaking from	cattown	12.497332	-7.0778837	comment	3.0	11.0	1690499982	-10.868435
36903603	> overall I like how magical Rails f	"> overall I like how magical Rails feels because it lets me go so fastYou going ""fast"" now means that others (including the future you) will go ""slow"" later."	sidkshatriya	12.756561	-6.938921	comment	3.0	10.0	1690525436	12.327022
36920477	A Differential Datalog Interpreter	A Differential Datalog Interpreter	MLIR	13.148704	-7.0404444	story	3.0	2.0	1690639766	5.7653
36925597	That's exactly why every other langu	That's exactly why every other language took the wiser decision of actually having runtime errors.To force you to pay attention to them before your application state went into an unknown configuration, thus making it nearly impossible to troubleshoot or even pretend to be deterministic.I still have no idea how any programmer thinks this is OK. Nondeterminism and unknown/un-considered application state are literally the source of all bugs. I much prefer (and honestly believe it makes a ton more sense) to do what Erlang/Elixir does, which is to fail, log, and immediately restart the process (which only takes a few cycles due to the immutability-all-the-way-down design).If you hit my Phoenix application with a million requests in 2 seconds and each throws a 500 error, my webserver will keep c	pmarreck	12.473996	-7.497002	comment	3.0	11.0	1690670842	12.892903
36933721	You're talking about two entirely di	"You're talking about two entirely different things.OP is saying don't write a ""magic thingcombobulator factory"" that ""simplifies X endpoints with Y and Z similar behavior"". This might be an earnest attempt to try to speed development, but it all collapses under its own weight at scale. The maintainers after you will be left holding the bag and have immense difficulty refactoring, adding a new set of requirements, migrating to a new data model, or moving to an entirely new service.Clever abstraction kills.I've dealt with undoing insane balls of twine left by unthoughtful devs, mostly in magic method dispatch, included behavioral overrides, and monkey patching (some of these behaviors are a hallmark in Ruby land).One person once exposed the entire database as a ""safe"" SQL-like query paramete"	echelon	12.708682	-6.9075794	comment	3.0	12.0	1690738486	12.281815
36934520	Logging in Ruby: (Almost) Everything	Logging in Ruby: (Almost) Everything You Need to Know	thunderbong	12.59035	-7.0336223	story	3.0	55.0	1690742472	12.370649
36948383	Honestly, I've just finished 5 years	Honestly, I've just finished 5 years as CTO with an e-com company with our CMS built on Elixir and I can't tell you how wrong you are. Jamstack, headless CMS and SPA frontends etc are just a massive waste of time. There's no joy in having separate code for your API and frontend.Our pages rendered in 20ms.	te_chris	12.701374	-7.3709083	comment	3.0	12.0	1690835642	12.899895
36968179	This is going to be a thing across t	This is going to be a thing across tech in the near future. You can see across games, web apps, whatever, there's a trend of more libraries, more frameworks, more guard rails, less fundamentals, less innovation.The fad these days is to skip learning how to program and instead just learn how to subsist in an ecosystem 'real' programmers have built for you.You don't need to know how to write a game engine, you just have to download the right assets from the Unity Store.What does 'state' mean? That's that thing in React right?Tree? Graph? Never heard of them, do you mean a component?Difference between a class and a struct? Well I've never heard of a struct but classes are the best thing since sliced bread because you can use them to do a ObservableFactoryControllerFactory and I read in a Medi	BigJono	12.589018	-6.500527	comment	3.0	13.0	1690962721	8.412675
36973634	Since never.People use either Java, 	Since never.People use either Java, PHP or NodeJs.	wheelerof4te	12.629892	-6.552601	comment	3.0	16.0	1690995870	10.29385
36974375	I haven't worked with Python in many	I haven't worked with Python in many years now. Do people not use Django or Flask anymore? What's the recommended web stack, and where does this one fit in?	paxys	12.661206	-6.533518	comment	3.0	10.0	1690998760	9.973534
36975431	Adopting any system of coding design	Adopting any system of coding design whether it be Bootstarp, Tailwind, Rails, Express, etc. is overall meant to reduce the cognitive complexity of the group working on your solution.If most people have exposure/understanding to the Boostrap way of doing things, or the Rails way of doing things, then we as a system/company/team/organization benefit when new people join the team. There's already a well established way of getting stuff done.If we forgo the use of a system, we will end up building one anyways. But this time, it will be known ONLY to your existing team members. It could/will buck convention and established best practices, it will grow to develop the bloat and technical debt for which the existing systems were rejected.Software engineering is about trade-offs. This is just anot	hnrodey	12.753915	-6.929273	comment	3.0	21.0	1691002806	12.35316
36987845	Yep this is definitely a problem, bu	"Yep this is definitely a problem, but fortunately the culture/community around Elixir generally tends to frown on unnecessary macros.  I heard the saying, ""if it can be a normal function, it should be"" many times, which pleases me.Overall though this isn't something I've generally run into too much with Elixir."	freedomben	12.651805	-7.4677124	comment	3.0	33.0	1691079122	12.934475
36988409	> - custom DSL syntax without data r	> - custom DSL syntax without data representationThis is an interesting comment in a post about Elixir because the Elixir ecosystem is actually full of things that should just be data but are instead macros being used in modules. Phoenix in particular is an especially egregious example of a library that is badly made in almost every regard> - cosmetic wrappers that are just thin layers without substanceThis one is also funny because Elixir itself is little more than a fairly small set of convenience libraries, a syntax and a very good tool for project management (`mix`) on top of Erlang. You can skip the syntax and the convenience libraries for the most part and actually just use Erlang in a `mix` project and get the best of both worlds. The convenience libraries usually are bad makeup on 	59nadir	12.642816	-7.478333	comment	3.0	13.0	1691081650	12.897899
36989315	Is the size of the erlang vm one suc	Is the size of the erlang vm one such point? I think I remember reading it's about 500mb, and you won't find it installed by default in many systems.	monsieurbanana	12.560647	-7.5112047	comment	3.0	12.0	1691085285	12.889593
36991339	Re Elixir for scripting, what's the 	Re Elixir for scripting, what's the point? Procedural Ruby, Perl, Python or bash have been around for decades and are exactly what you need for short sysadmin scripts. Elixir/Erlang's niche is massive lightweight conucurrency and is the wrong tool for this domain.	cutler	12.651348	-7.4425015	comment	3.0	11.0	1691094490	12.926287
36991656	Elixir is cool, I used to use it for	Elixir is cool, I used to use it for web app backends before adopting TypeScript and Rust. The reason I adopted them was the same reason I stopped using Elixir after a while: type safety. It was getting increasingly hard to be productive in Elixir in a large application due to runtime type errors that are caught in statically typed languages.	satvikpendem	12.511792	-7.4450355	comment	3.0	13.0	1691095797	12.879785
36991685	> I think the idea was that Elixir w	> I think the idea was that Elixir was going to be a boon to Erlang and other languages in there over time but I think it's demonstrably pretty useless as a BEAM citizen except for some of the patches they've submittedNot sure whose idea it was but I would say this is a very inaccurate take. Of course, we have taken much more from Erlang than given (that's expected from hosted languages), but I personally sit on more than 100 PRs to Erlang/OTP. I made binary matching several times faster by using SIMD. I improved the compiler performance (including Erlang programs) by (conservatively) 10-20%. I contributed compiler optimizations to reduce memory allocation. There is a now faster sets implementation which I contributed. Erlang/OTP 26 ships with faster map lookups for atom keys based on a pu	josevalim	12.638131	-7.4744873	comment	3.0	11.0	1691095901	12.917832
36992200	> 99.9% of the time you really shoul	> 99.9% of the time you really shouldn't be writing genservers in elixirWoah! Why is that?I've written at least one GenServer in nearly all the Elixir projects I've worked on. They seem like one of the base building-blocks to me. Also, if you squint a bit, you'll see that many libraries you're working with are essentially exposing a GenServer interface, with a few extra features.	AlchemistCamp	12.64091	-7.447296	comment	3.0	20.0	1691098001	12.923836
36992707	Problem with writing scripts in Erla	Problem with writing scripts in Erlang VM is the slow startup time...it isn't suited for that. Although I love it for pretty much everything else besides scripts and executables.	malkosta	12.536194	-7.5107713	comment	3.0	10.0	1691100501	12.933847
36993305	I've never written a genserver in an	I've never written a genserver in any professional project I've worked on.... Well, except maybe for a trivial 5 line wrapper enables a global ets.> Also, if you squint a bit, you'll see that many libraries you're working with are essentially exposing a GenServer interface, with a few extra features.I never said you shouldn't be using GenServers.  I said you shouldn't write GenServers.	throwawaymaths	12.530537	-7.3960257	comment	3.0	17.0	1691103962	12.9623575
36993872	I use other people's GenServers.  Ne	I use other people's GenServers.  Never agents.  Tasks for concurrency (but almost never those either, just Oban).  Ets for stateful datastore.Pedantically I guess gen_statem isn't a  genServer, but I'm generally referring to the pattern, which gen_statem is.Mostly webdev, so, that stuff is all taken care of for me.MBTA is modeling reactive systems that exist in the real world, so yeah, that's a place where i would be surprised if you didn't use genservers, though I suppose you could just use a database-backed state machine.  Surprised you use GenServers instead of gen_statem (though you might have been, as I was, less than pedantic)	throwawaymaths	12.39689	-7.3181014	comment	3.0	11.0	1691108445	12.891145
36995340	See also:Laravel Livewire (https://l	See also:Laravel Livewire (https://livewire.laravel.com)HTMX (https://htmx.org)Hotwire (https://hotwired.dev/)Phoenix LiveView (https://github.com/phoenixframework/phoenix_live_view)	jer0me	12.862815	-6.720874	comment	3.0	10.0	1691121576	10.576592
36995853	I've done extensive development with	"I've done extensive development with Flask, Bottle, Django, Falcon, Django Rest Framework, Starlette, Sanic and FastAPI over about 13 years or so.These days I prefer to build my back end applications with nodejs, TypeScript and plain SQL (no ORM) talking to Postgres.I like Django but it pissed me off no end that it's called ""batteries included"", except that the very first thing you need to do with any Django project is going and find some batteries for the user signup auth flow.  That's not batteries included, and its not something you should need to figure out for yourself in a batteries included framework.  It's time consuming, complex and error prone and should be built in.Anyhow as I say, I've prefer nodejs though I still do use Python for lots of stuff."	andrewstuart	12.747388	-6.4513445	comment	3.0	17.0	1691127328	10.000044
36997382	Lisp is a family of languages, not a	Lisp is a family of languages, not any single one. There's (thankfully, lisps needs innovation like everything else) room for different types.In the C family for example, you have both C and Javascript.> It would also be nice to port programs from one dialect to another without major editingIf the languages are the same, they wouldn't be different dialects, they would be the same language, so porting them doesn't make much sense. I think the closest thing to what you're describing is Clojure, where you can swap the targeted environment (JVM if you're working on a server, babashka if you're making a script, javascript if it's a web app, dart/flutter if you're making mobile apps, etc...)	monsieurbanana	12.607846	-7.627875	comment	3.0	18.0	1691140073	-10.803694
37042201	Apparently by replacing them with ne	Apparently by replacing them with new horrifying surprises, if this article is any indication.Good grief, I don't miss working in Perl.	throwanem	12.326363	-7.0223336	comment	3.0	30.0	1691449838	-11.459471
37088206	Does anyone know if I have a TypeScr	Does anyone know if I have a TypeScript project, is there an automated process to turn it into this format this article describes? Eject for TS, I guess.	jchanimal	12.367456	-6.792266	comment	3.0	12.0	1691758853	-10.383392
37088551	I've found a happy medium to be anno	I've found a happy medium to be annotating functions etc with JSDoc style comments but keeping interfaces etc. in a .d.ts file. The Typescript compiler is able to import it from a .js file just fine.	afavour	12.366841	-6.779345	comment	3.0	10.0	1691761054	-10.463985
37100254	Use TypeScript instead? (semi-joking	"Use TypeScript instead? (semi-joking)The way I've been approaching this lately is TypeScript on the frontend, then a thing TypeScript layer on the backend (via Deno), with those two pieces connected with tRPC. The real backend guts are in Rust (or whatever), and the backend tRPC layer talks to the Rust stuff with gRPC.So something like this:    [(TS web client) <--tRPC--> (TS thin backend)] <--gRPC--> (Rust service)

This is a bit awkward, but honestly worth it for what you get with tRPC. One thing that took some getting used to is with tRPC the line between ""client"" and ""server"" gets blurry, which makes me uncomfortable for all sorts of reasons but in practice works well enough to make it not worth worrying about for now."	zukzuk	12.418564	-6.5466876	comment	3.0	11.0	1691848848	9.438549
37117071	Exactly.Since mix phx.gen.auth handl	Exactly.Since mix phx.gen.auth handles the authN side, it’s really just authZ that will be idiosyncratic to your application logic.In every authorization system I’ve written in a Phoenix app (which 8 now), I’ve taken this approach above.Make a pipeline of rules that take a conn or socket and authorize or not based on what’s in the assigns. Better yet, at the very top of the pipleline, wrap the conn or socket with an auth struct that holds metadata like authorization status and any redirection to be done. Unwrap that struct into the conn or the socket at the end of the pipeline, where the status is resolved.This way, every request can be default unauthorized and you can apply complex, composable rules for granting permission to take various actions on resources.	AlchemistCamp	12.828542	-6.964034	comment	3.0	15.0	1691982811	12.693896
37123711	Why not? I can't think of anything o	Why not? I can't think of anything off the top of my head that I think is fundamentally broken about TypeScript, or even that I strongly dislike about it.	sbjs	12.354084	-6.8100266	comment	3.0	11.0	1692033579	-10.460012
37125818	    Elixir still runs on the Erlang 	"    Elixir still runs on the Erlang VM, which is
    dynamically typed, so we should not expect any
    meaningful performance gain from typing Elixir code.

This doesn't follow at all. Lots of code runs on the x64 machine which is mostly untyped and still gets performance gains from type information in the source language.The whole point of a compiler is to have different behaviour between source and target language. If the source language has a static type system that the compiler uses to control code transforms, you get performance/errors regardless of whether the target has a type system."	JonChesterfield	12.587237	-7.4456687	comment	3.0	17.0	1692042065	12.910395
37133812	Forgive a bit of snark, but…So PHP?M	Forgive a bit of snark, but…So PHP?Mixing html and code is a pretty old paradigm.	falcolas	12.7042	-6.5790453	comment	3.0	17.0	1692106434	10.291707
37134390	It might be hard to swallow but: the	It might be hard to swallow but: there can never be real progress on the frontend without having a programming language that is powerful enough to properly support the developer.Programming languages are always laughed upon and most of the time I hear frontend developers telling me that frameworks are what's important, not the language. But I think typescript shows how impactful a better programming language can be.Unfortunately, even typescript - despite of how great of a language it is - isn't capable yet to support even basic cases.For instance, using the features of the language to describe a nested structure of components, each of which has different dependencies that are a subset of its parents dependencies. Such a thing cannot be expressed with typescript, so frameworks/libraries al	valenterry	12.369434	-6.803378	comment	3.0	13.0	1692109534	-10.459713
37145566	I agree with the code generation of 	I agree with the code generation of libraries in Phoenix being a drawback.I think it maybe a reaction to there being too much magic in Rails dependencies, but it makes upgrades much harder.	sethherr	12.724897	-6.940705	comment	3.0	11.0	1692186146	12.376202
37155240	top three reasons to not use ruby fo	"top three reasons to not use ruby for me are:1. it's not compiled and evaluated at runtime, which make it harder to test. Pesky undefined variables in edge case code..
2. deployment is tough when it's a ton of small files. Most things compile to a single executable binary
3. it's not concurrent or parallel easily. You're not going to easily use all your cores and also develop sane software."	sigmonsays	12.6662035	-6.987939	comment	3.0	12.0	1692228494	12.374707
37175764	The author writes “I've also since l	The author writes “I've also since learned that the way Japanese developers write Ruby is very different from the Ruby you'll typically see in Rails, or many other popular Ruby gems.”What would be some examples of “Japanese-style Ruby”? I can find some articles comparing Ruby to Japanese but I’d be interested in full code repositories that would fit this description to go and take a look. I can’t think of good search terms for that.	schube	12.533426	-7.1201262	comment	3.0	12.0	1692367462	12.367496
37178208	All this to get a feature that was a	All this to get a feature that was already prevalent 15 years ago in oldschool PHP applications.	bigmanwalter	12.774426	-6.639917	comment	3.0	47.0	1692376713	10.334193
37203955	Since Ruby 3, the automatic coercion	"Since Ruby 3, the automatic coercion of keywords to a hash—the second example underneath ""Passing Hash to Functions"" in this post—is considered a legacy style and is generally frowned upon in new code. That is to say, code like the second call to `foo` here:    def foo(kwargs = {})
      kwargs
    end
    
    foo({k: 1})  # ok: passing hash argument
    foo(k: 1)    # ok: keywords coerced to hash

One of the strongest arguments for avoiding this sugar is that it makes the code more brittle in the face of future changes. In particular, in the example above, if we add a new keyword argument to `foo`, then any call which omitted the curly braces will break, while calls which used them will keep working fine:    # added a new keyword arg here
    def foo(kwargs = {}, frob: false)
      kwarg"	andolanra	12.365913	-7.100504	comment	3.0	12.0	1692574358	12.377957
37204784	My favorite little-known fact about 	My favorite little-known fact about Ruby hashes is that they respond to `to_proc` and can be used as procs. For example, you can do this:a = { 1 => 'a', 2 => 'b' }[1, 2, 3].map(&a)#=> ['a', 'b', nil]	faitswulff	12.369825	-7.0540285	comment	3.0	25.0	1692584021	12.343241
37207990	Hash is so powerful in Ruby that peo	Hash is so powerful in Ruby that people often overuse them.One of the most common issues I found on Ruby code-bases is to not create classes to represent their domain and simply use hashes everywhere.The downside is that a hash has no shape. It can (and will) be anything you want it to be, often causing havoc once the system grows.Checks for keys everywhere. Almost all statements use the safe navigation because you never know what shape you're dealing with. Multiple places performing the same map/reduce/filter/etc. All because people stick to hashes a bit too long.	Draiken	12.525505	-6.951655	comment	3.0	10.0	1692616833	12.436631
37208945	from that man page, there is a name 	"from that man page, there is a name clash with ""ts"" from moreutils"	gjvc	12.410487	-6.671221	comment	3.0	12.0	1692622741	-10.491231
37211900	Bun v1.0 launching 9/1	Bun v1.0 launching 9/1	dead_alchemy	12.485584	-6.4445605	story	3.0	14.0	1692635585	-10.787086
37220684	I'd love to get an explanation behin	I'd love to get an explanation behind the last one. It can be very hard for a non player to understand how connecting power rails like this does anything positive, and why it works better closer to the active element in question.	ggm	12.797728	-6.919529	comment	3.0	11.0	1692699242	12.362728
37246031	Show HN: TypeScript Guide	Show HN: TypeScript Guide	marko424	12.359038	-6.8223653	story	3.0	1.0	1692861962	-10.438172
37251919	TypeScript 5.2	TypeScript 5.2	styfle	12.354562	-6.8499484	story	3.0	47.0	1692898197	-10.4635725
37259618	I liked this approachable talk  I wa	I liked this approachable talk  I watched few years ago. I wish developing in Elixir was as easy as python.https://youtu.be/xoNRtWl4fZU	passion__desire	12.662809	-7.432465	comment	3.0	19.0	1692954539	12.920939
37262211	    Any sufficiently complicated dis	    Any sufficiently complicated distributed program contains an ad hoc, informally-specified, bug-ridden, slow implementation of half of Erlang	hinkley	12.524685	-7.5136995	comment	3.0	16.0	1692974217	12.9029875
37262718	>those other ecosystems still need K	>those other ecosystems still need Kubernetes, Kafka, Redis and GRPC, to get byAnd what makes Elixir not need Kafka, Redis or GRPC?Instead of Redis, you could use ETS for caching. But once you have 2+ instances of your app, you will need to have a centralized caching mechanism, otherwise, each instance will have its own ETS with its own memory, not sharing anything. Unless you decide to use Distributed Erlang and connect all the nodes of your application, which comes with a lot of trouble. Much easier to just use Redis.And lets say you have multiple teams, each team has its own service(built with Elixir), and you need to have some async communication between those services. What native Elixir solution would you use instead of Kafka?Same for GRPC. What's the alternative? Connecting all the 	fndex	12.634716	-7.449081	comment	3.0	13.0	1692976880	12.905764
37272024	>the only exception being poorly wri	>the only exception being poorly written 3rd party pluginsUnfortunately you need several of these to make any web site plus a theme, so yes, it happens.If you have so many clients you know it well that you can't upgrade from php 7 to 8 without the site crashing. Well, unless you are really lucky.	veavo	12.777641	-6.642128	comment	3.0	11.0	1693051379	10.310294
37274923	> However, this means that the most 	> However, this means that the most commonly used crate is shipping an arbitrary binary for production builds without any way to opt-out.The nokogiri rubygem has been shipping a prebuilt windows dll for probably more than a decade.  The sun has not imploded into a black hole at any point in the meantime.> If we're going to be trusting some random guy's binaries, I think we are in the right to demand that it is byte-for-byte reproducible on commodity hardware without having to reverse-engineer the build process and figure out which nightly version of the compiler is being used to compile this binary blob that will be run everywhere.I have some really, really fucking bad news about the O/S distros most of you all use...	lamontcg	12.574324	-7.0370274	comment	3.0	32.0	1693071150	12.38591
37293500	What do you think it's playing catch	What do you think it's playing catch up to?To only competitor I see is Rails. No other framework has such a rich and powerful ecosystem for web development.	codersfocus	12.75958	-6.896508	comment	3.0	11.0	1693228765	12.338223
37293696	"""Modern PHP"" basically boils down to"	"""Modern PHP"" basically boils down to ""backporting features from the languages/ecosystems that have since replaced PHP"".Which is a great and smart way to improve PHP for the people who still have to work in PHP. But none of it is original to PHP, or provides a compelling reason to use PHP instead of the options where all these things originally were copied from."	Legion	12.773778	-6.6491537	comment	3.0	11.0	1693229625	10.33955
37304986	Does anyone has any followup informa	Does anyone has any followup information about the companies and people mentioned? Sadly last blog from Cory O'Daniel is from 2019 and Bleacher Report engineering blog post shows 2019 as the last post. Pinterest has 81 public repos on GitHub but only 3 with Elixir code base.	m1keil	12.686767	-7.453168	comment	3.0	11.0	1693299182	12.925481
37305532	>Elixir is slower than plain PHP acc	">Elixir is slower than plain PHP according to the techempower benchmarks. I'm not even sure how that's possible but it is.You're ""Not even sure how that's possible"" as if implying PHP is slow?Even old pre-7 PHP was much faster than Ruby, Python, and others. And most PHP libs are just wrappers over C code."	coldtea	12.668367	-7.216751	comment	3.0	14.0	1693304427	12.860392
37305964	It’s not even remotely similar. Node	It’s not even remotely similar. Node’s cluster is just bog-standard OS subprocesses running their own event loop.To spread work over multiple cores with the cluster (or even worker-threads) modules you have to do so explicitely and manually. It’s essentially the same model you get with pthreads, or java, or python.BEAM is a completely different model, the “processes” are internal tasks, which the runtime will schedule appropriately over available cores (the scheduler has been multithreaded for 15 years or so), spawning processes is as common as spawning tasks in JS, except each of these is scheduled on an SMP runtime.beam will literally send processes between machines erlang) more easily than node will balance load over cores.	masklinn	12.377495	-7.3708425	comment	3.0	11.0	1693307379	12.790235
37306940	I can see how you would think that, 	I can see how you would think that, yes. In practice I haven't noticed it except in super rare cases where processes (actors) hold on to huge binaries / strings -- which is one of the weak points of BEAM's GC.	pdimitar	12.331005	-7.4013667	comment	3.0	30.0	1693313148	12.775069
37308383	You can do that easily in modern Jav	You can do that easily in modern Java--even for older JVMs, tools like Netty and later Vertx have been around forever. Or in Node, even more easily.Elixir/BEAM do have some benefits that are worth considering for many projects. But they absolutely are not special in this regard, and that's the junior-developer trap about which the person to whom you replied was referring.	eropple	12.449186	-7.3817663	comment	3.0	14.0	1693318951	12.833423
37310028	> My impression is that in the ‘00s,	> My impression is that in the ‘00s, Python and Ruby were both relatively newThey were, but Python is close to 5 years older than Ruby (February 1991 vs December 1995), so in the ‘00s, Python was significantly older than Ruby.Ruby also was more or less a Japanese-only thing until around 2000. https://en.wikipedia.org/wiki/Ruby_(programming_language)#Ea...:“In 1999, the first English language mailing list ruby-talk began”“In September 2000, the first English language book Programming Ruby was printed, which was later freely released to the public“In contrast, Python was posted on alt.sources from the get-go (https://en.wikipedia.org/wiki/History_of_Python#Early_histor...).So, effectively, Python had about 9 years head start on Ruby in the English speaking world.> when, in my opinion, Ruby i	Someone	12.526295	-7.0244646	comment	3.0	12.0	1693325462	12.378526
37313315	>  Rails is far, far more popular th	>  Rails is far, far more popular than Django.Maybe it used to, but seems a lot more people at least searches for Django pretty much everywhere except US, Canda and Japan.https://trends.google.com/trends/explore?date=all&q=%2Fm%2F0...	capableweb	12.786463	-6.7070203	comment	3.0	11.0	1693340141	10.393493
37313537	> Python is very simple making it ea	> Python is very simple making it easy to learn.I would argue that there's little difference between them in ease of learning. I personally found Ruby easier because everything being an object with methods and no free floating functions felt more natural and easier to look up. i.e.string.lengthover Pythonlen(string)	jemmyw	12.395928	-6.994741	comment	3.0	12.0	1693340970	12.374095
37315869	I can't imagine Python's welcoming c	I can't imagine Python's welcoming community has anything to do with it. If anything it was Ruby that had a reputation for being the most welcoming community with its MINASWAN (cringe) philosophy.	cutler	12.485458	-7.030119	comment	3.0	13.0	1693353793	12.367463
37316162	The only ruby person i've met was in	The only ruby person i've met was insistent that ruby was the one true way and he trued to force it into everything.  That attitude turned me off.Of course I already knew Python, and so did the rest of my team so we had been doing tools in Python (the guy wasn't on my team), but until he pushed ruby into places where python would have been better (import a Python library rather than shell to out to a program) I was willing to accept it was probably fine '	bluGill	12.559234	-7.0317783	comment	3.0	12.0	1693356063	12.384036
37317650	Ruby Outperforms C: Breaking the Cat	Ruby Outperforms C: Breaking the Catch-22	thunderbong	12.575871	-7.0562425	story	3.0	11.0	1693369580	12.353487
37376963	An important thing to remember about	An important thing to remember about fancy type systems is that they can only make guarantees in a closed world. If your data comes from the network or a file, you will likely need a reader or parser that does runtime checks somewhere, but a good type system can provide assurance that you did each check exactly once.On a complicated single-process system (a monolith), that can be a big improvement. For distributed systems (microservices), there will still be plenty of runtime checks. That's what allows each service to have its own lifecycle.I'm wondering what Elixir will do, given that Erlang servers divide up work into lots of independent, distributed components?	skybrian	12.604896	-7.4891605	comment	3.0	19.0	1693799497	12.9197645
37409891	I've been writing Javascript for 20 	I've been writing Javascript for 20 years.Typescript has done nothing for me.Just a religious battle at this point.(I'm okay with it on the server, but client side is just something something)	thomasfromcdnjs	12.377317	-6.7081504	comment	3.0	12.0	1694028181	-10.402939
37413924	So I have been musing on TS this for	So I have been musing on TS this for a while. I put my self in the rare “open minded about types” camp.My biggest beef with TS is you need to compile it, and JS development has enough complexity with module systems and stuff as it is. Compile to JS languages IMO should take the entire burden away like Elm does, otherwise they add a lot of troubleshooting work.I wonder if type annotations on plain JS could be the way to go. Lint, but don’t compile. This should work seamlessly with NPM modules etc.Even with such a system I am sure DHH might still want to forego and that is fair enough. But a little sprinkling of simple types such as “this is a string” goes a long way towards documenting the code.	quickthrower2	12.350519	-6.81955	comment	3.0	12.0	1694052996	-10.41523
37416450	I would be interested if you could e	I would be interested if you could elaborate on the advantages and disadvantages of Erlang/Elixir over Go. I have often heard Elixir processes likened to goroutines. Since the process model seems like the primary advantage of Erlang, why would one prefer Erlang/Elixir over Go?	nojs	12.574627	-7.4961395	comment	3.0	12.0	1694077741	12.887775
37430401	DHH removes TypeScript from Turbo fr	DHH removes TypeScript from Turbo framework	damethos	12.391496	-6.7937655	story	3.0	18.0	1694156376	-10.477334
37431588	Unpacking Elixir: Real-Time and Late	Unpacking Elixir: Real-Time and Latency	lawik	12.656736	-7.4588585	story	3.0	157.0	1694166449	12.916783
37434684	Elixir... don't see that every day. 	"Elixir... don't see that every day. I started reading through the code and was like ""what the heck is an ex file?!!""Never really seen Elixir before. Looks pretty nice."	itslennysfault	12.677779	-7.4501095	comment	3.0	11.0	1694186340	12.931481
37438832	Are there any downsides? Cause from 	Are there any downsides? Cause from this blog post it sounds like I should just ditch everything I was doing and move completely to Bun.	KaoruAoiShiho	12.505702	-6.4410496	comment	3.0	10.0	1694204175	10.942255
37442939	I love and use php but this article 	I love and use php but this article feels more like propaganda.	kyriakos	12.772466	-6.630815	comment	3.0	16.0	1694243237	10.356897
37443970	As an ex-PHP developer (almost 10 ye	As an ex-PHP developer (almost 10 years now), I do not miss it. As a language, it is a scripting language with an okay interpreter. But as an eco-system, it is a hot mess. It has both the worst software developers (and I was one of them) as well as the worst clients (and the cheapest, regardless of geography).It is not a surprise that PHP is running the web. That's because WordPress made sites/e-commerce accessible to the average Joe. Despite the massive security issues with these setups, it has enabled a large number of people to run businesses.But if you are a software developer, I'd strongly advice you not to do PHP.	csomar	12.7719	-6.6222205	comment	3.0	29.0	1694256859	10.32479
37443986	Modern PHP may as well be a new lang	Modern PHP may as well be a new language.  But then node came along.  It's almost like PHP users couldn't stand a clean ecosystem.	bbarnett	12.73692	-6.6321106	comment	3.0	12.0	1694257000	10.324869
37443509	PHP is also pretty easy to support f	PHP is also pretty easy to support for shared hosting, as what they essentially need is just an Apache module (+ nginx probably), some clever filesystem permissions and they're done. For node, Python, etc, you actually need to keep the application servers running, which has to stay running even when they're completely idle. So I think PHP is a natural choice for shared hosting for those reasons too.	nasretdinov	12.772582	-6.4697824	comment	3.0	10.0	1694250708	10.191644
37443042	I learned how to code when I was a k	I learned how to code when I was a kid with a mixture of C++ my dad showed me on our Dell running Windows 95 and PHP that I taught myself in the years after. All through my teenage years into my early 20s, anything I wanted to make I made in PHP. I still have some PHP projects online, but recently when I want to make anything, I set up an API in Python and build the front with a JS framework.Is part of this just getting in on the latest trend? Definitely. I like scrolling through trending on Github, ya know?But I was also just tired of writing PHP. Python is cleaner, so if I can do the more complex backend stuff in that, coding is more fun. I would say PHP and JS are about equally “unclean” but if it’s just frontend all those brackets and parentheses don’t become an issue as much.Just one 	zebomon	12.7043495	-6.599115	comment	3.0	13.0	1694244343	10.300852
37444316	PHP was the Visual Basic 6 for web. 	PHP was the Visual Basic 6 for web. People without proper training and theoretical knowledge just went and did stuff.	jpalomaki	12.755786	-6.621622	comment	3.0	17.0	1694260385	10.342164
37459014	> How often do you need to add php s	> How often do you need to add php support on the fly?Restarting the binary means you'll lose requests while it's restarting, so adding php (or whatever) support on the fly is what you need when running a system where losing those requests is material. Which it won't be for most people, but for, eg, Google (who don't use Nginx), losing those requests is a problem.	fragmede	12.727581	-6.6289916	comment	3.0	12.0	1694373396	10.293862
37475455	I wasn't expecting a deep and thorou	"I wasn't expecting a deep and thorough comparison just from the headline... but the feature list and comparison text here is worse than I thought it would be, bordering on useless.""Built in"" means nothing because the value prop of node compared to the other two is the ecosystem and maturity. Do you care if your linting tool is built in if it's buggy and regularly releases breaking changes? ""Secure by default"" in particular means nothing by itself here either.Bun specifically promises better compatibility with existing npm modules then Deno so the comparison here is much different than the chart would lead you to believe."	report-to-trees	12.501723	-6.4434795	comment	3.0	16.0	1694478179	-10.929284
37478309	Racket has Racklog:> Racklog is an e	Racket has Racklog:> Racklog is an embedding of Prolog-style logic programming in Racket. “Embedding” means you don’t lose Racket: You can use Prolog-style and conventional Racket code fragments alongside each other. Racklog contains the full repertoire of Prolog features, including meta-logical and second-order (“set”) predicates, leaving out only those features that could more easily and more efficiently be done with Racket subexpressions.https://docs.racket-lang.org/racklog/index.htmlRacket also has GUI, and basically everything else you may need.	anon____	13.2396755	-7.1480846	comment	3.0	13.0	1694508257	13.676235
37478951	"Not sure what ""push at Google"" means"	"Not sure what ""push at Google"" means. For full context: the idea to use Prolog came from the project founder. In retrospect, it was a terrible idea, because almost nobody knows or likes Prolog, and that includes the SWEs at Google both on my team, and the ones configuring Gerrit.(I run the team that works on Gerrit at Google.)"	hanwenn	13.146343	-7.2924595	comment	3.0	16.0	1694513932	-12.493671
37479532	I can basically +1 the sentiment her	"I can basically +1 the sentiment here. Used Prolog during my three university AI classes (basically ""AI A Modern Approach"" front to back + Prolog programming) and it was a mind bending experience. I always have to warm up before my brain can think Prolog again. I also wrote horrible prology spaghetti code in my other language during the Prolog semesters :DBiggest downside ""back in the day"" was interop with other things was tricky. Either you embedded a Prolog in a JVM or something like that (usually with less features) or you relied on some sort of C binding. My takeaway was it's great so solve certain tasks (especially CSP) but not for solving tasks with a user interface in the mix (or file system access or any miriad of other things).""Back then"" SWI was also lagging behind and we used so"	kriro	13.148463	-7.296935	comment	3.0	16.0	1694518750	-12.480793
37484675	While this is a good example of all 	"While this is a good example of all the good stuff raw django brings to the table, if you build a blog with django, you should go for wagtail in 2023:https://wagtail.org- It's incredibly more productive.- Seamlessly integrates with any django website, or hold your hand to create one from scratch.- Play nice with the whole django ecosystem.- Is easy to pick up because under the hood ""it's just django"". It uses django models, routing, auth, etc. It's uses standards, best practices, and is a good citizen.- The blog admin and the provided block editor are good out of the box.- It still gives you all the flexibility you want: it doesn't force any template on you, any page structure, workflow, nothing. You get to decide how simple or complex you blog is.- The team behind it is super nice."	BiteCode_dev	12.816376	-6.4903703	comment	3.0	11.0	1694540154	10.090797
37484400	With regard to JSON API aspects of D	With regard to JSON API aspects of Django, have you used https://www.django-rest-framework.org/  on top of Django?   I find it to be very satisfactory.	eYrKEC2	12.842602	-6.4667106	comment	3.0	15.0	1694538752	10.014622
37487921	Just a question, is it possible to h	Just a question, is it possible to have a website built with Django and still work like the speed of a static site.I've seen all these JAMStack websites marketed as 'fast' when the only reason they are fast is that these web frameworks (11ty, Astro, Hugo, Gatsby, etc) are essentially static generators to HTML which is pretty much the same as creating a plain html file if you want to.I'm mainly interested in the SEO and speed side of things but does using a web framework like Django or an SSG make a difference?	colesantiago	12.761727	-6.4961376	comment	3.0	10.0	1694551223	10.027409
37490439	How do people feel about Django vs f	How do people feel about Django vs flask in 2023? Just trying to farm for other's experiences because I find flask easier to start off with but I suspect I am biased.	nine_zeros	12.766515	-6.553259	comment	3.0	12.0	1694563737	10.058239
37526964	Why Go for web and not Typescript wi	Why Go for web and not Typescript with nodejs/deno. The ecosystem is also huge and widely used. The type system is miles ahead of Go and is closer to rust. The async await is single threaded too.	tejinderss	12.369485	-6.6327205	comment	3.0	12.0	1694801237	-10.644183
37532363	SBCs, Python Flask, and Two NUCs for	SBCs, Python Flask, and Two NUCs for MrBeast	GavinAnderegg	12.708614	-6.572695	story	3.0	50.0	1694843675	9.989383
37555663	I built my billing system on top of 	I built my billing system on top of Django and it's used in 2 online services for a few thousand users and hundreds of invoices a month.You have to be mindful of some edge cases, but if the scope is kept narrow, it's doable. The added benefit is the flexibility to fit it to your use case. And with Python, you get many high-level libraries, e.g. for decimal calculations and PDF generation.	m3nu	12.834895	-6.4661617	comment	3.0	14.0	1695042929	10.053655
37571203	Ask HN: Do you know any good web fra	Ask HN: Do you know any good web framework performance comparisons?	goatking	12.675364	-6.445401	story	3.0	4.0	1695136860	9.897321
35098324	My memory is a little fuzzy, but bac	My memory is a little fuzzy, but back in 2012 or so, this programming whiz applied for a job at Square on the security team (I think?).  He was impressive, and had written an SSL implementation (EDIT: it was actually a certificate authority) entirely in Ruby.  Breezed through the coding challenges.  Just our luck that one of the interviewers was the actual author of that implementation!Seriously, it was really just luck.  It makes me wonder how many people successfully bluff their way through their careers.	pianoben	12.655638	-7.015368	comment	3.0	15.0	1678471407	12.384398
35118594	Okay. I'll explain it to you. It bas	"Okay. I'll explain it to you. It basically comes down to a server-client architecture. The server (db, server side code) is the backend, that the user never gets to see. The client (basically the browser - js, html and css) is what the user get's to see, not just through the interface, but by selecting ""view source"".So PHP and Rails are back-end languages. You never get to see the code and logic that generated the page because it is ""at the back"". Golang, which the poster mentioned, is also a back-end language. So if the core of your apps logic is at the back-end (server), what you are practicing is back-end dev. If the core is in the front (e.g. SPAs) then it's front-end dev. Sometimes the complexity can be split 50-50 between the back and front. But if your web-application just uses html"	orange8	12.674427	-6.717562	comment	3.0	15.0	1678617952	10.275974
35122711	"I'd say it's ""inspired"" rather than "	"I'd say it's ""inspired"" rather than ""translated"".The part about using the typescript language server to compute the solution, and the protagonist claiming the code is ""concise"" because only 4 lines of javascript were generated, was absolutely brilliant. Cracked me up at least.Glancing at the actual code, I admit I'm with Criss in my ability to follow the logic, but it doesn't look like a direct translation from Haskel types to Typescript types either.At any rate, very well done."	hnfong	12.365734	-6.773725	comment	3.0	13.0	1678640524	-10.4512415
35124552	this is why i love ts when not worki	this is why i love ts when not working for a megacorp. when the ts gets too cray i just nope out. throw an any or as in there and get on with my day. wouldn't pass a code review but i don't care	8n4vidtmkvmk	12.405804	-6.7425394	comment	3.0	17.0	1678647417	-10.463563
35137273	Why should I choose this over Django	Why should I choose this over Django or Flask?By using Python in the frontend you mean the Python is transpiled into JS? The frontend uses templating or generates a SPA app?	margorczynski	12.713932	-6.4891095	comment	3.0	11.0	1678722088	-6.5104685
35137449	The relational model (and generally 	The relational model (and generally working at the level of sets/collections, instead of the level of individual values/objects) actually makes it easier to have this kind of incremental computation in a consistent way, I think.There's a bunch of work being done on making relational systems work this way. Some interesting reading:- https://www.scattered-thoughts.net/writing/an-opinionated-ma...- https://materialize.com/ which is built on https://timelydataflow.github.io/differential-dataflow/, which has a lot of research behind it- Which also can be a compilation target for Datalog: https://github.com/vmware/differential-datalog- Some prototype work on building UI systems in exactly 	evnc	13.136861	-6.999067	comment	3.0	10.0	1678722838	-12.380416
35142069	So ruby has a JS transpiler - opal -	So ruby has a JS transpiler - opal - https://opalrb.com/I tried using it a little bit but the reality is if you need JS to make your app more interactable it's really worth it to just learn some JS. As soon as you need something complex the extra layer of abstraction just gets in the way and becomes more of a headache, and if you don't need anything complex then you don't need a fancy JS solution in the first place.JS only becomes complex when you are trying to create an enterprise version of your app along with a build platform. You can always just sprinkle in <script> tags in your HTML for simple one liners without getting into the weeds.	ativzzz	12.690704	-6.8382716	comment	3.0	17.0	1678739436	12.337519
35143171	Dalai 0.1.0 Released	Dalai 0.1.0 Released	cocktailpeanut	12.515541	-6.45185	story	3.0	8.0	1678743458	-12.527517
28996772	This is likely the organization of t	This is likely the organization of the project. What do your service objects look like? Domains? Repositories? DTO's? How do you organize them?How about adapters?There's some great pieces of literature out there about advanced ruby / rails - well worth the read!	megraf	12.753027	-6.9295077	comment	3.0	11.0	1635226665	12.345823
28996720	Rails gives you so much out of the b	Rails gives you so much out of the box that it's very tempting if your app lies in Rails' sweet spot.However I've found that as apps grow bigger and accumulate more complex business logic and data flows Rails codebases become increasingly difficult to manage.	cageface	12.7725725	-6.8834324	comment	3.0	24.0	1635226142	12.335317
29001725	Agreed. I feel like a big part of th	"Agreed. I feel like a big part of the disconnect between Ruby/Rails enthusiasts and Ruby/Rails detractors comes down to what kinds of projects are being worked on. (This is a frequent theme in HN discussions of various technologies, not just Ruby/Rails.) For scrappy MVP's, where the most important thing is to quickly find product fit, Rails is often a great choice.The problem comes when that codebase starts to mature: you look up one day and realize that it's no longer just you working in the codebase. The lack of language-level documentation makes it difficult to onboard new members to the team. A new developer is inspecting a method they're tasked with refactoring. It accepts an argument named ""input"". What the hell is an input? Is it a hash? Is it a class instance? Both? Something else "	notpachet	12.726088	-6.9522247	comment	3.0	16.0	1635262682	12.350295
29015563	The answer to your first question is	"The answer to your first question is yes.Your second question is based on an incorrect premise.
Hack is internally built, but it is also open source:https://github.com/facebook/hhvmI joined Facebook in 2019 and left this year.
Prior to FB, I worked mostly with python, javascript, and C++.
Even at FB, I worked mainly in python (instagram backend), but spent a lot of time in the Hack codebase.My experience was that FB's Hack + HHVM stack is much easier to work with and felt more productive than any other backend stack I've used. It's important to consider that a huge portion of Facebook's backend is one giant HHVM monorepo (called www). The consistency and uniformity has allowed FB to build lots of tooling and developer productivity on top of this one stack. For example, when you add feature"	mgraczyk	12.773292	-6.5976167	comment	3.0	12.0	1635352426	2.9811027
29016084	Do you know if Facebook uses Compose	Do you know if Facebook uses Composer to manage PHP dependencies?	TekMol	12.777368	-6.606239	comment	3.0	12.0	1635354676	2.9492779
29016173	Are there any large Hack codebases I	"Are there any large Hack codebases I can explore?I am interested to see how different from straight PHP it is.Does anyone know if FB tracks changes to PHP so Hack is 
""up to date""?"	ThinkBeat	12.783032	-6.6079197	comment	3.0	10.0	1635355153	3.0288632
29016197	This is the second such PHP thread I	This is the second such PHP thread I've seen in the last 24 hours (the other one was on a different web property); gotta love people shitting on PHP like it's 1998	arenaninja	12.770636	-6.6313057	comment	3.0	23.0	1635355251	10.349661
29018845	(Elixir / Erlang) Bandit's HTTP/1.x 	(Elixir / Erlang) Bandit's HTTP/1.x engine is up to 5x faster	weatherlight	12.637708	-7.4574814	story	3.0	47.0	1635367402	12.903525
29036959	what I mean is, how do they know tha	what I mean is, how do they know that's what helped the reaction? The other two flasks were of a different material, but the same as each other. How do they know that material A aided the reaction as opposed to concluding that material B impeded it?	noduerme	12.737461	-6.568864	comment	3.0	13.0	1635502187	10.007966
29052956	Doesn’t this just highlight that php	Doesn’t this just highlight that php development ecosystem doesn’t value quality much? What even is a “file” in context of a web request? What about dependencies or logic defined in other files?This is just bizarre, I can’t see a sane codebase where this would be preferable to going on GitHub and pressing “.”	keymone	12.683905	-6.548289	comment	3.0	20.0	1635634838	10.277336
29081169	I think the main problem for Ruby is	I think the main problem for Ruby isn't Node.js, go, Rust, etc. None of those ecosystems have anything comparable to Rails. The problem is Laravel (PHP) and Django (Python) which both offer a comparable (if not better in many ways) experience to Rails with access to much bigger ecosystems.	nicoburns	12.711481	-6.9406238	comment	3.0	10.0	1635861020	12.355453
29081771	if nobody uses ruby then why are the	if nobody uses ruby then why are the devs super expensive? you would think that there is no demand?	b20000	12.6906	-6.992679	comment	3.0	16.0	1635863261	12.374668
29083752	> Basetool is written in TypeScript 	> Basetool is written in TypeScript and (in our opinion) with most modern pieces of tech out there; React, Redux toolkit, Next.js, Prisma, and tailwindcss. We want this to be a project that lives on in the future.This always struck me as weird thinking. If you aim for sustainability and longevity, shouldn't you use technologies that have stood the test of time rather than the latest and shiniest pieces of tech?	capableweb	12.483846	-6.5810018	comment	3.0	12.0	1635871483	-10.463822
29100503	I was a Flow holdout for the longest	I was a Flow holdout for the longest time. TypeScript's support for discriminated unions is one of the things which finally won me over. Super glad to see it being improved upon here.	bluepnume	12.347715	-6.8206573	comment	3.0	27.0	1635974878	-10.430735
29104212	One thing I'm wondering: with all th	One thing I'm wondering: with all the bells and whistles and insanely complex things TS now supports, why does it still fail to catch seemingly simple mistakes?For instance, it's sooo easy to write a React component taking in another component as a prop and some props for that other component, to rendering it. But somehow lose the type safety of the props being passed in. Like, you write some generics and the compiler stops complaining inside your component. But if you go back out and then try to pass some weird props instead, it doesn't care. I feel it's too easy to write code that looks tyoe safe but subtly isn't.	matsemann	12.346877	-6.8775434	comment	3.0	23.0	1636009274	-10.4475355
29118891	PHP has a similarly low barrier to e	PHP has a similarly low barrier to entry, but doesn't seem to suffer as much as JS.Perhaps because dependencies are more curated in PHP due to clusters of dominant frameworks, rather than a proliferation of smaller libraries.	heurisko	12.640992	-6.486415	comment	3.0	11.0	1636118907	10.271911
29144498	Im not into ruby and wasn’t familiar	Im not into ruby and wasn’t familiar with _why until this post. From others’ comments, it sounds like he’s largely credited with the birth of the “fun” programming language tutorial. How horrible. Even as an absolute beginner, I always found those style of tutorials to be massive time wasters and tone-deaf. Your audience’s primary goal is to learn the language. Sure they might be more engaged if it has lighthearted quips here and there, but they quickly become way too dominant in most tutorials of this style and are only good for people that have a lot of free time to spend reading bad puns or hyper-contrived examples.[1]I also skimmed his pdfs, which legitimately seem like a great piece of postmodern literature. In my hasty estimation, _why should have been focusing on literary pursuits f	voidhorse	12.617999	-7.039693	comment	3.0	12.0	1636326679	12.375948
29161810	Disclaimer: I'm on the YJIT team.In 	"Disclaimer: I'm on the YJIT team.In general it's not a big change. You should only turn on YJIT for long-running jobs -- the prod Rails server, plus probably background workers if you have them. YJIT does nothing unless you turn it on with the --yjit flag.YJIT's going to affect memory usage, so it'll change your optimal number of processes and threads for your Rails server - play with it for your app specifically, because the percent speedup and mem expansion vary a lot from app to app. YJIT works fine with Puma and Webrick. I don't think anybody's tried it seriously with less-common servers like Falcon or Thin, but I'd expect it to work -- file a bug if it doesn't, because it should.YJIT does speed up Rails - we're seeing about a 20%-25% speedup on little ""hello, world"" Rails apps (see: h"	angelbob	12.662373	-7.008125	comment	3.0	16.0	1636466467	12.372579
29186166	BooKing.com is one of the biggest Pe	BooKing.com is one of the biggest Perl shops in the world.They're desperate to hire lots of willing Perl programmers, so they have to set the bar low.And inexperienced programmers cause lots of security problems.Edit: My point is about the moral flexibility of BooKing.com, which is well established and widely known, not good Perl programmers, who are rare, hard to hire, and extremely expensive (especially by Netherlands programmer salary rates).And to jacquesm's point about plants: All any intelligence service has to do to place a plant at BooKing.com is fake them up a good looking resume full of Perl experience, and Bob's your U.N.C.L.E.!Edit2: yes xxs, downvoting's probably from royalists offended at the thought of one of the Netherland's biggest tech companies has been mocking their Kin	DonHopkins	12.344187	-6.9871063	comment	3.0	25.0	1636623071	-10.971358
29201888	In Elixir / Erlang, you can put a so	In Elixir / Erlang, you can put a socket in either active or passive mode. In passive mode, you need to explicitly call recv/2 or recv/3 to get data, very similar to a traditional socket API. This is what this code appears to be doing.But if you want better performance, you use active mode. In active mode, the runtime is receiving data on your behalf, as fast as possible, and sending it to the socket's owning process (think a goroutine) just as fast. Data is often waiting there for you, not just already in user space, but in your Elixir process's mailbox. (Also, this doesn't block your process the way recv/2 does, so you could handle other messages to this process.)You could imagine doing something similar with 2 goroutines and a channel. Where 1 goroutine is constantly recv from the socke	latch	12.6051035	-7.4782906	comment	3.0	15.0	1636737593	12.910695
29201918	If you ever wonder where something c	"If you ever wonder where something comes from and you can't get your editor/IDE to tell you, you can always try asking the runtime.Drop a debugger statement in above the code in question, then at the prompt turn the method into a Method object using something like:  bar_method = foo.method(:bar)

and then  bar_method.source_location


Once you have a Method object you can pass it around as a stand alone function, rebind it or call too.#source_location only works for methods defined in ruby itself i.e. not C or Java but it's still a handy tool on big ruby projects.Most of the time I just use ctags to navigate new codebases but we also have things like Solargraph via LSP too."	Lio	12.5253315	-7.0575423	comment	3.0	11.0	1636737725	12.361513
29203718	Ask HN: How to prepare for first ful	Ask HN: How to prepare for first full-time software engineering job?	is-is-odd	12.409209	-6.6695457	story	3.0	10.0	1636746375	7.515961
29208510	Guess I'll just go back to erlang...	Guess I'll just go back to erlang.....	ungamedplayer	12.586401	-7.532005	comment	3.0	13.0	1636794677	12.917819
29240180	Embracing open data with Elixir	Embracing open data with Elixir	thibaut_barrere	12.673322	-7.4509068	story	3.0	82.0	1637068731	12.929845
29247037	We've converted most JS projects I w	We've converted most JS projects I work on to TypeScript now, and it is game-changing.  Interesting to read how a much larger company did the transition.Main takeaways from this article that I have also found are:- Convert your most imported & core code first - it's much easier to convert files which only have TS imports - so start with those, and work out.- Generating types for API response data has removed so many runtime errors.  We generate types from GraphQL schemas.While learning TypeScript takes time (but not much really), now I am familiar with it, I would code faster in TS than in JS.	Humphrey	12.376963	-6.746451	comment	3.0	17.0	1637101276	-10.458063
29248376	You can also use jsdoc to ask tools 	You can also use jsdoc to ask tools like vs code to run js as typescript and complement your variables with typing information.I used this recently for a project that couldn't use typescript.	maushu	12.345725	-6.718806	comment	3.0	13.0	1637112077	-10.434797
29248416	Does TS happen reduce any of the JS 	Does TS happen reduce any of the JS (non-type) craziness as well or is it a superset?  I'd like a language with one good way to do things that transpiles into JS.  Not sure if that is TS or perhaps Dart?	mixmastamyk	12.363626	-6.698919	comment	3.0	14.0	1637112471	-10.455866
29255830	Probably important to mention that a	Probably important to mention that at the moment, TypeScript as a configuration format means anyone who writes a configuration blob for you has arbitrary code execution. This is rarely an issue in practice, though.	fay59	12.344917	-6.82122	comment	3.0	18.0	1637169443	-10.422801
29255852	TypeScript has at least 2 implementa	TypeScript has at least 2 implementations: tsc and Deno, but I take your point and agree. That said, most languages probably have a JS runtime, so a basic implementation would be ts->js->interpreter. The ts->js is presumably pretty easy.	throwaway894345	12.338441	-6.7853384	comment	3.0	12.0	1637169543	-10.460375
29261761	I have used PHP for years. I like it	"I have used PHP for years. I like it too. Its tight integration with http is nice.The PHP language can be used as a templating language itself:  <?php

  $user = 'root';

  ?>

  <p>
     Hello <?= $user ?>
  </p>"	thirdplace_	12.773887	-6.6153183	comment	3.0	10.0	1637206959	10.28622
29261926	I haven’t used PHP in over a decade.	I haven’t used PHP in over a decade. I can never forgot how much PHP got wrong in terms of how application development on the internet would happen. The ergonomics of using it were just… bad compared to other frameworks that came on the market. I remember when rails came out and it was so mind blowing compared to PHP. The language was certainly useful for a time, and I’m sure the language has progressed since, but switching to PHP still feels like it would be a huge step backwards.	rp1	12.770365	-6.6575313	comment	3.0	25.0	1637209000	10.33481
29261981	If you like PHP, great.Do you plan o	If you like PHP, great.Do you plan on creating a start-up that you intend to scale to a babillion customers? That you intend to hire teams of developers for? Probably not a good idea.Are you a new programmer trying to figure out which language to learn first? Absolutely not. Python, Java, JavaScript, C# are much more flexible if nothing else. Anybody who tries to convince new programmers to learn PHP is doing them a great disservice.	skinnyarms	12.740588	-6.628067	comment	3.0	18.0	1637209678	10.337473
29262140	For people of a certain age and job 	"For people of a certain age and job history, the worst code they've ever inherited was written in PHP.I think JS can be worse. There are things that are possible with dynamic languages that are literally impossible with static ones.So think of PHP less as a ""bad language"" and more of a code smell."	smt88	12.580223	-6.481387	comment	3.0	15.0	1637211929	10.285292
29262288	Why are y'all arguing about this whe	Why are y'all arguing about this when you already learned like 20% of php by reading the OP. Learning enough of a high level scripting language like php to be able to be useful and productive in it is not some huge time sink, it's a few dozen hours of reading docs and tinkering	wly_cdgr	12.738497	-6.631925	comment	3.0	14.0	1637213734	10.348691
29262560	It depends on what you want to do. T	It depends on what you want to do. The problem is that PHP is hyper-optimised for serving up HTTP. That was great in the 2000s when the web was eating the world and the other options were Java, Python, and Perl, but is less useful in the current climate where there's so many more platforms and web development requires javascript.By learning PHP, you are effectively locking yourself into the narrow niche of backend web development (ask me how I know!), whereas other languages have much broader target platform appeal.As an example, the obvious competitor to PHP of Javascript already beats PHP by also providing backend web services, but also has support from AWS lambda, GCP Cloud functions, and even the somewhat esoteric embedded javascript for micro-controllers options.> Do you shoot for wha	solraph	12.701393	-6.6294265	comment	3.0	11.0	1637216774	10.308709
29263019	I like PHP and still use it today. B	I like PHP and still use it today. But never in my life heard PHP is cool. Am I missing something?	unobatbayar	12.781797	-6.6415796	comment	3.0	18.0	1637220947	10.340638
29263473	I went on a rant, but didn't mean to	I went on a rant, but didn't mean to. I don't have anything against PHP, it's got a valuable and relevant place on the the web. It's important to many people, and like you said you find it fun, which I think is important for our productivity as devs.However, I think this recurring misconceptions how easy PHP is to develop in needs to stop. PHP comes with a lot of complexities. Worst kind of complexity to learn: hidden complexity.	spoiler	12.788242	-6.6340103	comment	3.0	12.0	1637225495	10.383181
29264094	That ship has sailed a long time ago	"That ship has sailed a long time ago (or you're just playing around and most languages will have a REPL nowadays)Modern PHP wears a business suit and wants to buddy the ""big boys"" (Java/C#) of the world. You'll have deployment pipelines, strong push towards classic OOP, strict type checking etc.I personally think ruby for instance is leaner in its dev process in most real world projects."	makeitdouble	12.764484	-6.6411853	comment	3.0	15.0	1637232681	10.352403
29264144	OP is correct, you still can develop	OP is correct, you still can develop like this with PHP, and no the ship has not sailed for many.You can have deployment pipelines etc, but if you like, you can still develop the ancient way - it still works.	chinathrow	12.757984	-6.5994086	comment	3.0	11.0	1637233410	10.330966
29264207	| php is fast.https://benchmarksgame	| php is fast.https://benchmarksgame-team.pages.debian.net/benchmarksgame/...it's faster than python, but my grandma is too and she died in 1993. However, function calls are extremely slow. If you would bench something like a naieve fibonacci implementation (or ackermann's function) you would be surprised.	toolslive	12.617848	-6.684407	comment	3.0	19.0	1637234062	-5.0571814
29264613	I see this as the opposite and find 	I see this as the opposite and find it adds quite a load of complexity and prevent to do some form of optimization in an app that has its own server.It adds its load of complexity on how to run the apps itself, you need an external server, apps often requiring some customization of the server that will run it (either mod-php or php-fpm). It means that parts of our app settings lives outside of the app, it also make updating php itself quite annoying.	boudin	12.7500105	-6.5861135	comment	3.0	16.0	1637238136	10.295993
29265403	I really don't understand all the PH	I really don't understand all the PHP dismissal on HN. As a language it has continued to evolve in meaningful ways, especially with the latest releases. Companies like Facebook are built on PHP (yes, they extended with Hack, but most of the benefits are available in PHP 8 now without the downsides).Coming from a C background, I found PHP easy to step into as many of of the underlying libraries and common functions are wrapped and available in PHP (with similar names).	redm	12.777902	-6.640281	comment	3.0	15.0	1637243894	-1.4657283
29273112	The RBS files seem like a weird comp	"The RBS files seem like a weird compromise to me. I I'm not sure I see the practical benefit, but maybe someone who has used .d.ts files can explain it. Is it just helpful if your IDE has tooling to use it? Seems like it could be helpful, but also sounds like it will become an annoying ""code quality"" hoop those of us that don't use VSCode will have to jump through for little benefit. When you read code outside of your IDE, like a code review, will you have to scan both files at once in order to benefit from static type information? Does it enforce types at runtime? I'm curious but it's a tough sell to me. I've used optional types in both PHP and Python and found them to be an annoyance compared to strong typing in Rust, where they basically guide you at every step.The IO/performance improv"	eloisius	12.476963	-7.121559	comment	3.0	14.0	1637288848	12.377405
29273218	Ruby isn't forcing you to use static	Ruby isn't forcing you to use static types. That being said, I actually think something like Sorbet makes even solo/small teams more productive because it trades some additional time writing boilerplate for dramatically reducing the number of bugs you write.	whakim	12.53272	-7.101653	comment	3.0	31.0	1637290003	12.375964
29273345	Honestly typeorm and nestjs are pret	Honestly typeorm and nestjs are pretty bad.	Scarbutt	12.399688	-6.4976172	comment	3.0	10.0	1637291219	-4.754663
29273824	Don't get me wrong.  I'm happy to se	"Don't get me wrong.  I'm happy to see type declaration support in Ruby and have sorely missed it working on long-lived Rails codebases.  But it is pretty funny that after years of rah-rah about how static typing was a pointless barrier to productivity, all the ""duck-typing"" languages have eventually added it after all."	emodendroket	12.461924	-7.134836	comment	3.0	15.0	1637296023	12.385247
29274508	For that, there's    object.method(:	"For that, there's    object.method(:name).source
    object.method(:name).source_location

but frankly this is still thinking in a rigid mindset that suits other languages better.  Ruby isn't just ""dynamic dispatch""; a typical metaprogramming technique handles all incoming calls without named methods, or by dynamically writing the code.To put it bluntly, assuming there's a method on the other side of your message, is practically the antithesis of Ruby.It's similar to the category error that leads folks to conflating type with class, and writing type checkers that look for class signatures."	inopinatus	12.48627	-7.094407	comment	3.0	14.0	1637304789	12.398719
29274975	Are you happy with the way things ar	Are you happy with the way things are going for Elixir? It seemed to me like the Elixir community was hoping for it to become the next Ruby and I don't see that happening anymore. It will have to settle for being a well respected but obscure piece of tech, kinda like what Erlang is.	joelbluminator	12.682137	-7.406122	comment	3.0	29.0	1637310085	12.891273
29275585	Pepsico, Toyota ...come on now that'	"Pepsico, Toyota ...come on now that's weak. They're not even IT companies let alone Tech. Whatsapp is running on a fork of Erlang afaik , not Elixir.
Look I'm not saying no one is using Elixir, I'm just saying there's little jobs that's all. Cherry picking some famous names isn't gonna change that."	joelbluminator	12.695723	-7.4630523	comment	3.0	15.0	1637316562	12.92903
29287840	Or...you are working on way smaller 	Or...you are working on way smaller Elixir projects. Lets see how fun it is to inherit a million line old Elixir project 7 years from now. Or a million line codebase split into 50 services. I am sure you'll be productive as hell cos Elixir!	joelbluminator	12.674477	-7.4537807	comment	3.0	11.0	1637414573	12.92351
29294867	@bernn4444> You'd probably be blown 	@bernn4444> You'd probably be blown away how quickly someone can get a full stack website set up complete with user authentication/accounts management (including reset flows, magic links etc), database integration, front end system, CMS, component design system, and any other goodies.> Not to mention being able to do everything in a single language.I’m interested in learning more about this, especially user authentication and and account management. Also, the single language appealing is appealing.I’m from the PHP world of things and need to get experience with what the modern stuff you’re describing. Are there platforms or projects that provide the foundation of what you’re describing?	iJohnDoe	12.742921	-6.5074368	comment	3.0	10.0	1637481764	10.205102
29300346	TypeScript's types are structural, a	TypeScript's types are structural, and I don't consider this to be a good thing. It's useful for JavaScript interop, yes, but just because two values have the same representation and method names does not mean they're interchangeable. Case in point: time units.So while there may be some use of structural subtyping, I don't think it's codebase-wide.	yeputons	12.345526	-6.8679433	comment	3.0	14.0	1637533276	-10.425104
29304458	agreed, I'm more convinced now that 	agreed, I'm more convinced now that django is really enough and get shit done even if there a poor support of async, more convinced after reading this blog post that async python is not faster (was on hn) : https://calpaterson.com/async-python-is-not-faster.html	privacyonsec	12.449493	-6.7066903	comment	3.0	16.0	1637572796	9.964425
29306611	Well, apparently Flask or other web 	Well, apparently Flask or other web dev environments fail to start if their default port is already in use...	tsimionescu	12.770212	-6.5391116	comment	3.0	16.0	1637591250	10.0541
29306940	I wonder why Django seems to have a 	I wonder why Django seems to have a easier time in hiring, considering it should be a smaller market than Rails. Even on HN monthly hiring list Rails and Django open positions is roughly 3:1. And yet I rarely hear Django people ever complain about the lack of talent pool.	ksec	12.765838	-6.656911	comment	3.0	13.0	1637593155	10.2027445
29309130	The New Life of PHP – The PHP Founda	The New Life of PHP – The PHP Foundation	xPaw	12.759672	-6.6386514	story	3.0	96.0	1637602484	10.300816
29309788	Right, and Ruby has had Matz, Python	Right, and Ruby has had Matz, Python had Guido and to a certain degree PHP had Rasmus.  As soon as you have more than one captain in the ship, politics and drama seems unavoidable.	xtracto	12.510531	-7.0411115	comment	3.0	14.0	1637605206	12.391303
29313635	Ask HN: Is there a high level langua	Ask HN: Is there a high level language option for PLC programming	xupybd	13.043229	-7.1995463	story	3.0	2.0	1637630921	-2.8767586
29320234	The Temporal TypeScript SDK	The Temporal TypeScript SDK	swyx	12.340122	-6.6871367	story	3.0	31.0	1637687144	-10.208893
29340726	I really want to use PHP for one-off	I really want to use PHP for one-off CGI scripts, (rsync files and done, deployed), but I really wish it had methods on primitive types. It hinders discoverability. It's annoying having to look up which function I need to use, and to find that there are many alternatives, most of which are deprecated.PHP stdlib needs an overhaul, IMO.	abdusco	12.6410055	-6.6370635	comment	3.0	10.0	1637843009	10.314399
29341739	I agree.Developer speed does not get	I agree.Developer speed does not get enough coverage when comparing languages.When I work with a Node project it's such a slow dragging build process.Using PHP is like a fun superpower that lets me turn out things on timescales that are borderline miraculous to clients and management.	TrispusAttucks	12.697133	-6.595178	comment	3.0	14.0	1637851494	10.321475
29341272	It's so nice to see a comment giving	"It's so nice to see a comment giving PHP the praise it deserves. Honestly, PHP is a good, if not great, language to use for building solid web apps fast.People seem to love to hate it because it's the ""cool"" thing to do. Yet PHP developers continue to ship things faster, while JS devs are probably still fiddling with their Node environment setup..."	osrec	12.668088	-6.5125637	comment	3.0	28.0	1637847701	10.291293
29344771	I've used PHP recently to work on Ph	"I've used PHP recently to work on Phabricator, and the whole ""yes it sucked but now it's good"" narrative did not match my experience at all. Sure it might have added modern features but the core is still rotten.The alternative would have to be TCL levels of bad to make me choose PHP."	IshKebab	12.763461	-6.6339498	comment	3.0	23.0	1637872667	10.30359
29345133	Wordpress has taken great strides to	Wordpress has taken great strides to comply with the latest PHP standards so I'd say that's not quite fair to include it here.	jdjdjrj	12.749486	-6.6129456	comment	3.0	11.0	1637875519	10.312414
29346928	This example seems to be a great dem	This example seems to be a great demo of why people do not like working with PHP. PHP makes the shit method the massively simpler way and the good method much harder. Now you open yourself up to risks like what happens if we accidentally let some user input change the file opened as well as the content written.While with rails, to do basically anything, you already have a full db ready and incrementing a counter using the ORM is even easier than opening a text file. So people avoid PHP because it most likely involves dealing with absolute crap code written with no understanding.	Gigachad	12.770435	-6.678282	comment	3.0	13.0	1637892798	10.400773
29366332	Show HN: Cards Against Humanity Buil	Show HN: Cards Against Humanity Built with Elixir and Phoenix LV	fmterrorf	12.722604	-7.3660226	story	3.0	13.0	1638076096	12.886581
29378520	Not really, tbh. IntelliJ Ultimate +	Not really, tbh. IntelliJ Ultimate + the Ruby extension is RubyMine with a different name. Likewise with Go and JS, and I'm sure it's the same for php etc. but I can't speak for those. I've used this setup when I was testing out a bunch of languages for fun.	square_usual	12.495379	-6.863725	comment	3.0	10.0	1638184698	11.407909
29406790	José Valim (creator of Elixir) will 	José Valim (creator of Elixir) will be streaming his solutions on Twitch. Thought that might be interesting for you.	pablodavila	12.683769	-7.387235	comment	3.0	10.0	1638380931	12.892635
29449150	Does everything need to devolve into	Does everything need to devolve into sudoku-solving coins that the makers can try to profit off of?If we’re building all this tech for coins or digital stamps, it seems like the existing system could work fine by rolling per-contact email addresses to give out. Traceability without having to kill any polar bears. Apple is already offering this through their Apple Sign-In	rtpg	13.4495735	-7.4087706	comment	3.0	20.0	1638711300	15.079678
29451255	These problems and solutions are qui	These problems and solutions are quite well put together, and I haven’t seen another resource like it. There’s a ton out there about writing Typescript, but not nearly as much about writing types, especially higher order types.	sandinmyjoints	12.342744	-6.8306084	comment	3.0	10.0	1638727543	-10.431037
29472303	Genuinely curious how you happened t	Genuinely curious how you happened to choose FastAPI over something more in the middle, like Flask?I tried a few tools in FastAPI, and it's fantastic for those, but I think I'd still stick with Flask for something more well rounded (not just as an API server).	windexh8er	12.531665	-6.587494	comment	3.0	21.0	1638884391	10.00855
29472596	As someone who's used both - Rails p	"As someone who's used both - Rails packaging and environment maintenance has been so much less of a headache. Gems and Gemfiles and Gemfile.lock vs having to choose a Python package maintainer (Pipenv vs Poetry?) and deal with that has been worth it to me.In terms of how they ""feel"" to develop with? About the same. Similar ideals - skinny models, service layers, REST-first but you can make it RPC-style if you want..."	z3ugma	12.736655	-6.9062514	comment	3.0	21.0	1638886198	12.341747
29473411	> function based viewsClass-based vi	> function based viewsClass-based views, in their most basic form, are a lot easier to read. E.g. look at the DRF CBVs I have here:https://github.com/Alex3917/django_for_startups/blob/main/dj...If you can avoid Generic CBVs (things like ListView) and inheritance, then the only difference between FBVs and CBVs is that CBVs make it easier to see what's a GET / PUT / POST / DELETE by adding some syntax highlighting that makes it easier to visually differentiate which code goes to which method. You don't need to know anything about classes in Python in order to use them.It's not at all difficult to switch from FBVs to CBVs later, and most people (myself included) use FBVs when getting started. But I'd also say that if you're willing to push through the initial discomfort and spend the extra ha	Alex3917	12.814034	-6.5313716	comment	3.0	13.0	1638890781	10.039432
29511473	This might not be what you had in mi	This might not be what you had in mind, but the web framework Django. It's been around for ages and doesn't change in dramatic ways. It's not perfect by any means, but it just works and is reasonably easy to understand and extend if you spend the time to read through its code.The documentation is good, but I find that it's a little overrated. There are lots of gaps, so spending the time reading through Django's code will pay dividends, especially when it comes to customizing it for your needs.After years of churning through all sorts of Javascript frameworks, I know that I can build something in Django and only need to spend real maintenance time once every 2 years or so during an LTS release.	hkhanna	12.794012	-6.4919286	comment	3.0	10.0	1639152357	10.066757
29521681	Code blocks. You don’t use a for loo	"Code blocks. You don’t use a for loop, you call Array#each. On top of that, Ruby’s Enumerable module allows any object with an each method to access a whole bunch of convenience methods.Note, the # means instance method when discussing ruby code. It’s not valid syntax.Ruby allows you to be extremely concise, while maintaining readability for anyone moderately familiar with the language. In a way Perl is most definitely not.Short example:    arr = [<blog posts objects>]
    
    # Author may be nil
    number_of_authors = arr.map(&:author).compact.uniq.count

You can imagine how easy it is to throw data around with very little code. Loops are abstracted, so you never think about them as loops. Instead you just see data moving around.Edit: A few languages (like JavaScript) implement this beh"	kayodelycaon	12.441467	-7.092914	comment	3.0	14.0	1639237826	0.3859851
29539453	Fixing a performance problem in Elm 	Fixing a performance problem in Elm using Html.Lazy	ingve	13.003186	-7.668668	story	3.0	68.0	1639402658	-12.779707
29539384	> The NT network stack is cleanly la	"> The NT network stack is cleanly layered, supported multiple adaptor types and protocols and clients all in one, and was so complicated that up to NT 4, when you finished making changes to the networking configuration and clicked ""OK"", a tiny embedded Prolog interpreter fired up and ran a single embedded Prolog program, the only one in all of the DOS, OS/2 and Windows codebase that I'm aware of -- possibly the only one in any commercial OS anywhere. This Prolog code parsed your desired config, worked out how to interconnect all the layers of the NT network stack, and wrote the configuration file(s) and registry settings in order to give you what you wanted.Aargh. I don't think even the more advanced Linux distros have reached that level of complexity yet. Although I suppose Prolog is a na"	pjc50	13.151121	-7.26741	comment	3.0	16.0	1639402156	-12.482966
29539892	It's a bit pain to update nested typ	It's a bit pain to update nested types in elm, that's why I've often ended up having data that can change as flat as possible. But that also means that a too big a model is passed around between functions I guess, because it's annoying having to extract and pass the 3-4 values it needs.What would happen if the view functions in elm by default were lazy? Since everything in elm is immutable, and the functions can't have side effects, it shouldn't be able to break anything. I guess the problem is that this kind of memoization can be memory heavy? But it doesn't really have to memorize everything. Just the last inputs, and then do nothing with the DOM if the inputs are the same. And the inputs are all derived from the main model, which is only ever updated one place in the runtime. So just ke	matsemann	12.98333	-7.657768	comment	3.0	13.0	1639405932	-12.757439
29542018	If TypeScript becomes the next versi	If TypeScript becomes the next version of ECMAScript, then browsers will have to support it. The day that TypeScript is supported directly on end-user machines instead of going through a developer-controlled compiler pipeline is the day that almost all evolution of TypeScript stops.There's not really much positive value out of having browsers run TypeScript natively. The main feature is static checking, but static checking doesn't benefit end users. When I go to my bank's website, if their front-end code has a type error, it's not like I can fix it right then and there.The type system is mostly a developer-time feature, so it makes sense to leave it out of the core runtime environment.In other words, think of JavaScript/ECMAScript more like the architecture that browsers support. That need	munificent	12.36829	-6.7908015	comment	3.0	20.0	1639417345	-10.435321
29565866	Ruby had a huge hype, then its growt	Ruby had a huge hype, then its growth slowed down and  now it's falling behind quickly. Yeah it's big, but other frameworks that chose a different path w.r.t. metaprogramming seem to be the more popular (and growing) choice today.	emteycz	12.590308	-7.0312204	comment	3.0	17.0	1639576189	12.371355
29575150	> Are there any popular non-Rails us	> Are there any popular non-Rails uses for Ruby?No. I'm going to get downvoted for this, but Ruby isn't popular itself (with or without Rails). It's barely more popular than Fortran, according to TIOBE[1]. It cracks the top 10 according to Redmonk, but has been generally declining since 2012[2].Somewhat shockingly, it's even less widely used than Rust according to Stack Overflow[3].They also found Ruby has a 53% loved vs. 47% dreaded score, compared to Python's 68% and 32%. It's especially surprising that Stack Overflow's respondents like Ruby less than JavaScript and SQL, the two most frustrating languages I have ever been forced to work with myself.> Python and Ruby occupy the same space and use casesThis is absolutely untrue. I personally loathe Python, but it is perhaps the most useful	smt88	12.62977	-6.995029	comment	3.0	27.0	1639631354	12.380218
29578196	This seems like this is mostly based	This seems like this is mostly based on their choice of technology> Building the web app in Rails took me 2 days – the same thing in Node would have taken 2 weeksThis is ridiculous, you are comparing a language framework with a runtime. Anyway, my problem with rails and other template based server side rendered frameworks is that the output looks decidedly un-modern and extending it to add the interactivity you can get from modern JS frameworks is hard. I have worked with code bases that were django or rails that bolted on react and other javascript frameworks and the result was not pretty.For my personal projects today what I do is the following, I use nextjs to build the frontend and I use nestjs with prisma for the api (a lot of the plumbing you were talking about is autogenerated here)	friedman23	12.791989	-6.5631127	comment	3.0	28.0	1639663518	12.319665
29578203	Yeah it's funny... Now 10 years+ in 	Yeah it's funny... Now 10 years+ in the web dev business. I occasionally  got drawn by the hype, dug myself considerably deep into express based frameworks, sails.js, koa.js, nest.js... But in the end i had to conclude, my first go-to framework django always came out superior in terms of developer productivity. It even eventually covered the bases where i still thought node was superior like async/websocket communication. Imho Django and similar batteries-included frameworks are as state-of-the-art as they've ever been.	l0rn	12.741542	-6.4619946	comment	3.0	13.0	1639663542	10.023002
29578391	Last time I used Rails was like 8 ye	Last time I used Rails was like 8 years ago so I'm not up to date on the changes to their ORM but when it comes to django the ORM is pretty top notch, especially when it comes to Postgres support.I've never used rspec but it sounds like pytest and hypothesis would do the job. In ruby there's no hope for pytorch / tensorflow / ray / numba.	m_ke	12.802916	-6.699175	comment	3.0	12.0	1639664674	10.301049
29578438	I switched from Ruby on Rails on my 	"I switched from Ruby on Rails on my side project to PHP. 
Building the web app in PHP took me 2 hours – the same thing in Rails would have taken 2 days.
Now i have time to read HN."	progx	12.746906	-6.859195	comment	3.0	11.0	1639664911	12.22437
29580913	I'll give you surface syntax in comm	I'll give you surface syntax in common, other than that not much. I think a Rails dev would have a much easier time picking up Django or Laravel than Phoenix. How hard is the switch from Rails to Django? Probably trivial. But Ruby to Elixir is a mind shift.	montblanc	12.796342	-7.118628	comment	3.0	17.0	1639675779	12.703942
29581215	Right, but a big project in Rails ha	Right, but a big project in Rails has all the problems you can think of:- slow to compile and run- easy target for spaghetti code- test suites get sluggish- hard to upgrade- won't scale well- with no static typing, large scale collaboration can easily break things- metaprogramming hell	princevegeta89	12.731137	-6.9474525	comment	3.0	18.0	1639676821	12.349717
29581426	Ruby to Elixir is a mind shift. Rail	Ruby to Elixir is a mind shift. Rails to Phoenix...I don't think so.But most Rails programmers write Rails, not Ruby, and it's important to differentiate them. Ruby is a big playground. Rails is...not, by design. (This is why I do not like Rails, personally--if I am choosing to write code in Ruby, it's because I expect to need to get weird with it.)Rails->Phoenix omits a lot of the stuff that makes Elixir cool, both in itself and in OTP, but that's not a bad thing and I do think the transfer isn't too onerous for somebody coming purely from Rails.	eropple	12.7526	-7.2563972	comment	3.0	14.0	1639677650	12.681239
29581794	I've been using Rails for 12 years, 	I've been using Rails for 12 years, over at least a couple dozen apps. I use RVM to manage my environments, and use Capistrano to deploy. I've hosted on full servers, on shared servers, and on Heroku. With the exception of the classic bugaboo of getting the older execjs compiled in different environments, I have never had the sort of problems you say you're having trying to keep gems sorted. In fact, I would have said that was one of the stacks' greatest strengths, to keep that sorted out for you. I guess my takeaway is that RVM > rbenv, but I REALLY don't intend to start a flamewar about it.And please don't try to tell us that a real-world Java web application is simpler than, well, anything. ;-)	TheRealDunkirk	12.647242	-6.9911046	comment	3.0	15.0	1639679148	12.354724
29585916	> I never really understood the crit	"> I never really understood the criticism about ""magic"" in Rails.I'll state my case as clearly as possible:  The magic in Rails REQUIRES memorization... freaking everywhere.  And it provides virtually no hints to jog your memory.There's just too much tooling, hidden away out of sight, and applied through shenanigans with Ruby that other languages/frameworks make MUCH more obvious.Simple trivial example?  Rails fucks with imports left and right.  Rails allows you to not even write a require statement half the time - it's just going to load things from places.  Hope you have that list memorized.Does it save you some time? Yes.Does it make the code look ""Cleaner""? Sure.Does it make my life a fucking chore every time I have to run a damn console to find the source location of an object at runt"	horsawlarway	12.689618	-6.9883065	comment	3.0	13.0	1639700120	12.354776
29605863	I think it’s much simpler than that.	I think it’s much simpler than that. Ruby didn’t have good documentation in English until the mid-2000’s. Python was in use by the English-speaking world before the turn of the century. Documentation + you can generally understand it at a glance == total Python dominance.Looking at recent Python code, it also seems like the simplicity is being lost in the rush to add features.	setpatchaddress	12.437107	-7.047093	comment	3.0	11.0	1639845582	-9.896439
29623222	Is that not something you can learn 	"Is that not something you can learn by picking up any number of good books in the area in much less time?I am just getting into TypeScript programming, and I am really having fun. I learnt about the details of how Javascript works, and it is quite cool to have a static layer over a dynamic one. For learning JavaScript, I like ""The Good Parts"" and the ""You don't know JS"" series. It took me a while to learn how to create a datatype that can defend its invariants not only statically, but also at runtime, but that seems quite feasible as well, especially with decorators. It is interesting though that nobody seems to be particularly interested in doing that, there is not much direct information about this available."	auggierose	12.352954	-6.779513	comment	3.0	19.0	1639996493	-10.460709
29630176	I have found it a bit difficult to u	I have found it a bit difficult to understand how TypeScript is involved here. Are they using the actual `tsc` library, or have they rolled their own? It is not very clear from the docs, overall I feel TypeScript support seems a bit of an afterthought reading thru the docs - they are very JS heavy in all examples	nawgz	12.3631115	-6.7739863	comment	3.0	37.0	1640033730	-10.484514
29643449	I 100% guarantee it's someone who ha	"I 100% guarantee it's someone who has recently read ""The Phoenix Project"" and made it up based on that."	isbvhodnvemrwvn	12.778693	-7.1698713	comment	3.0	16.0	1640129618	12.743422
29647343	Ask HN: Are micro web frameworks a g	Ask HN: Are micro web frameworks a good fit in 2022?	kgraves	12.68222	-6.66596	story	3.0	1.0	1640166682	12.237918
29652239	come to phoenix/elixir land. Channel	come to phoenix/elixir land. Channels are amazing and the new views system allows you to seamlessly sync state to a frontend using websockets with almost no javascript	cultofmetatron	12.873345	-6.7119675	comment	3.0	20.0	1640193505	12.695345
35872667	"The last section ""I understand all t"	"The last section ""I understand all this, but I still want to do it"" is quite funny.TS is very pragmatic in the way it allows you to convince it you know what you're doing and, really, this will be fine in reality even if the types don't really agree. It's a DX tradeoff I believe is usually worth making.But it is comical on a certain level how you'll choose to use a tool to point out the potential of problems with your code but then sometimes ignore it / tell it it is wrong when it does :-)"	davnicwil	12.354086	-6.8267694	comment	3.0	18.0	1683631510	-10.441411
35891627	ts-node [1]: am i a joke to you?[1] 	ts-node [1]: am i a joke to you?[1] https://www.npmjs.com/package/ts-node	yid	12.366826	-6.559727	comment	3.0	13.0	1683744305	-10.382546
35890259	You might be interested in Flix whic	You might be interested in Flix which has first-class Datalog program values:https://flix.dev/https://doc.flix.dev/fixpoints.html(I am one of the developers of Flix)	jorkadeen	13.163695	-7.036183	comment	3.0	11.0	1683738575	-12.446507
35893118	> It's also a really contrarian view	"> It's also a really contrarian viewpoint about typescript which is really popular.I really, really don't get the controversy here. JSDoc _is_ TypeScript, just with a syntax that's valid JavaScript (on account of it living in comments). This means it doesn't have to be built to run, but still gets all of the typing goodies regular TypeScript does. The end-user code authoring experience is the same or better.> To completely switch over to js and then set types that way seems regressive.""It's regressive to use a fully-JS TypeScript syntax instead of using dozens of tools on top of regular TypeScript to achieve the same outcome"" is quite a spicy take."	_gruntled	12.361012	-6.745289	comment	3.0	13.0	1683750924	-10.450402
35897369	For a framework that is radically di	For a framework that is radically different but also PHP-native (since PHP 5), would you like to spend an hour playing with https://github.com/Qbix/Platform ?If you do, please share your experience in a comment. I’d love to hear it. I architected this framework over the last decade :)	EGreg	12.750867	-6.61443	comment	3.0	23.0	1683778453	10.336294
35897932	Why would you go with PHP+whateverfr	Why would you go with PHP+whateverframework instead of Ruby on Rails or Django?I haven't touched PHP since 5th version and I'm kind of sceptical it can offer anything RoR can't.	konart	12.753831	-6.669568	comment	3.0	17.0	1683782698	10.3997755
35898067	>why don’t I hear about this more of	>why don’t I hear about this more often?Honestly, I think it’s just because the language is a solution in search of a problem. It doesn’t do anything significantly better than any other language and so there’s no reason for it to get traction.I agree it’s pretty decent though, it could have been what Typescript has become but it failed for some reason.	Dig1t	12.352021	-6.762398	comment	3.0	18.0	1683783657	-10.465095
35898125	The documentation for Laravel is sti	The documentation for Laravel is still unreadable.Guess that is why selling Laravel tutorials seems to be a fruitful business.	naiv	12.803019	-6.662096	comment	3.0	11.0	1683784039	10.365705
35898136	You're doing something terribly wron	You're doing something terribly wrong. Sounds like caching isn't setup and your http -> php handler is cold booting the interpreter for every single request.Check these Go vs. PHP benchmarks. PHP is quite fast and stands up nicely to the performance you get out of Go.https://www.techempower.com/benchmarks/#section=data-r21&l=z...	berkle4455	12.717183	-6.574926	comment	3.0	10.0	1683784129	10.257498
35898474	The Frontend / server less / JS ecos	The Frontend / server less / JS ecosystem craziness and high rate of change has left a lot of devs disenchanted.High profile posts over bundlers, tailwind,  and microservices set the scene.A few popular people on Twitter have been talking about Laravel which has influenced other devs.Wind is in Laravel's sails, not php's	diordiderot	12.745685	-6.4847007	comment	3.0	10.0	1683786680	10.282696
35900755	I've been using PHP for about 19 yea	"I've been using PHP for about 19 years and what I can tell is that both the language and its community have evolved the right way. Writing modern PHP is a joy, IDE support is great and we have tools for everything.Modern PHP is about community standards, not about any particular framework and exposing Laravel as the best way to get started with PHP is questionable. I wouldn't recommend it to anyone wanting to learn (real) PHP.The article praises PHP but it is sad that doesn't link to any other resource or project which ditches the value of PHP community.Laravel is great for RAD which is attractive for small projects. The kind of stuff ""business with 500K orders runs on a $6 VPS"" thing. For clients wanting a robust software system you can use a better tool."	CR007	12.785052	-6.6320605	comment	3.0	10.0	1683805271	10.366577
35900972	I agree with you. But, and this is a	"I agree with you. But, and this is a big but, it's a tradeoff. You also get benefits.This is why I said ""buy-in"". If you are comfortable with doing things in their way, you get a ton of leverage: easily consistent code, a fast and productive ""get off the ground"" experience. The downside is what you described.Personally I'm just not a fan anymore of these things. You quickly produce code that _looks_ clean and consistent. But it's also bloated and brittle, especially if you need to break out of the happy path. A framework like that is great if you don't do software design, but more of a hindrance if you do. There's no framework that can help you do a holistic solution. For that you need good tooling, a robust foundation (AKA not PHP and probably not JS) and a simple design.Again: Trade off."	dgb23	12.705597	-6.5159836	comment	3.0	10.0	1683806816	10.255742
35900496	> PHP has matured and has been a nic	"> PHP has matured and has been a nice language for a decade now.And how did it manage that? Python forced people to deal with encodings properly and the result was a lot of pain. You're claiming PHP somehow invisibly fixed the numerous problems of the language without anybody noticing? That ""fractal of bad design"" blog post, everything described in it has been fixed?If so I want to learn how they did it. That's some heavy duty language evolution work."	matheusmoreira	12.675739	-6.696822	comment	3.0	11.0	1683803148	10.3488245
35903367	https://cronhub.io (makes about $120	https://cronhub.io (makes about $1200/Month revenue. About $200/Month in costs which I can optimize further but I don't have the time)I took this over from someone else over a year ago and work on it very rarely due to support volume being low and I have another business that keeps me busy full time. Tech in Laravel/PHP. If anyone is interested in helping, let me know.	codegeek	12.794271	-6.5761395	comment	3.0	13.0	1683818058	10.195714
35904137	> how do you expect to learn anythin	> how do you expect to learn anything if you won't read or watch a tutorial?I wanted to follow a tutorial (or another guide) to learn about Pharo, but couldn't find any, at least in the official docs. That's the point I'm making!	jventura	12.350521	-7.24111	comment	3.0	10.0	1683820922	7.152957
35904436	> As a maintainer of several large J	"> As a maintainer of several large JS packages, and being so dreadfully burnt out on JS, there are other words I'd use to describe the whole thing than ""delightful"".My first project that used JS was in 1996, so I've been along the ride every step of the way.  Up until today where I am working with all of this on an Angular 15 enterprise project.I actually would  describe it as delightful, compared to what it was like only a short 10 years ago.  1996-ES6 was painful.I understand your pain as maintainer and am also burnt out on ... um ... 27 years of JavaScript.  Yikes.But now it can just be written in TypeScript and I'll let the transpilers and other tools handle the details.It is so much better."	EMM_386	12.405869	-6.482684	comment	3.0	14.0	1683822161	-10.463572
35904252	The Pharo Launcher has an in IDE tut	The Pharo Launcher has an in IDE tutorial window that opens when you first open the image . Apart from links to documents it also contains an interactive in-development environment teaching you the basics.One of the images is the Pharo MOOC. The website has links to several documents to get you started.No offense but you kind of have to look around it to not find the ways in which the Pharo team attemps to get you underway.	AllegedAlec	12.351976	-7.286688	comment	3.0	14.0	1683821417	-13.04
35905664	That just described how I feel about	That just described how I feel about Typescript - created by Java programmers so that they can feel comfortable and not have to learn how to program in Javascript. I was a Java dev for a decade. It's so much more tedious and less fun than programming in Javascript. I get Java recruiting emails and I shudder.I accept that in gigantic apps worked on by multiple teams, and libraries shared with 3rd parties, Typescript makes sense. But 90% of the time I see it used it's with a smallish node app or SPA worked on by a few people, and all Typescript does is slow things down.I feel like I can count on one hand the number of times I've gotten burnt by a run-time JS bug that a compiler would have caught. I just don't see that as a strong use case for the overhead and development drag of TS. I only s	suzzer99	12.361294	-6.7613873	comment	3.0	17.0	1683827338	-10.458743
35920881	It seems to work. I found Pharo 10 o	"It seems to work. I found Pharo 10 on disk, running it like this:    -▶ ~/portless/pharolauncher/pharo-vm/pharo --headless Pharo10-SNAPSHOT-64bit-0618067.image a.st

with a.st:    Object subclass: #BenchmarksGame
       instanceVariableNames: ''
       classVariableNames: ''
       poolDictionaries: ''
       category: ''!

    Transcript show: BenchmarksGame!


First signals an error:    primitive #primLoadSymbol:module: in TFFIBackend failed

this seems to be related to libgit, as the stacktrace ends with:    LGitLibrary(FFILibrary)>>ffiCall:
    LGitLibrary>>libgit2_init

but it continues running and displays:    BenchmarksGame

and then hangs. I suspect I should tell it to quit, but since I don't have the GUI, I can't easily check what method I should call to do that. Ctrl+C works thou"	klibertp	12.3555155	-7.2738605	comment	3.0	17.0	1683918912	7.2283096
35923046	Without support from Rails, all of t	Without support from Rails, all of these libraries unfortunately can't be used by 99% of Ruby code out there and using Ruby in any sort of fan out architecture remains a pain (ie almost impossible in practice).	jupp0r	12.647376	-7.0034328	comment	3.0	12.0	1683928888	12.407405
35927929	This is... good news, but I still ca	This is... good news, but I still cannot fathom using the default Typescript compiler for regular development.  Seriously, leave the type-checking to your IDE and CICD chain, and switch to using tsx (https://www.npmjs.com/package/tsx) or swc (https://swc.rs/) and you will _immediately_ notice the difference in speed and productivity.	DanHulton	12.365597	-6.7848353	comment	3.0	18.0	1683982591	-10.492133
35927944	Thats a good point and nice to see t	Thats a good point and nice to see that the rails community is starting to work to consider new engineers more. The whole JS and also PHP/Laravel ecosystem is doing this already since quite some time. Rails is still the best option imo when you want to be productive as a small team - but the learning resource don’t keep up with other frameworks/languages.	Bergrebell	12.744551	-6.9098296	comment	3.0	13.0	1683982733	12.343167
35928502	I think one of the things that sort 	I think one of the things that sort of stopped rails from becoming mainstream was that when WebApps really took off everything switched to SPA apps. Now that's shifting back a bit (a good thing imo) as many people are starting to recognize the downsides of frontend apps. Next.js is basically one giant workaround for the shortcomings of spa apps.	trilbyglens	12.767129	-6.774587	comment	3.0	21.0	1683986678	12.313954
35928712	I've been doing fulltime Rails dev f	I've been doing fulltime Rails dev for some 15+ years.Rails (and Ruby) make tradeoffs, or just inherently have downsides that many newer frameworks, libraries and languages solve, or solve differently.For me, the most prominent are Rubys' dynamic typing and Rails' black magic. But my biggest gripe is how Rails lacks a space for business logic. Sure, you can bolt something on yourself. Or just throw it all throughout the http, storage and rendering layer willi-nilli.This has caused so many of the codebases i worked on, to be unmaintainable, untestable and therefore legacy that I can certainly blame it on the framework.I've worked on many go, rust, typescript, php and ruby-no-rails systems to be ever more certain about this. Many frameworks lack this area, and almost all quickly degrade into	berkes	12.7436905	-6.9271984	comment	3.0	12.0	1683987725	12.351861
35928554	This is great. I think it's crucial 	"This is great. I think it's crucial to keep convincing the overall tech community about the good sides of Elixir.And yeah, resilient design de-risks itself and that alone is a huge gain because it also reduces other forms of complexity.Still, I think we have to keep pushing to debunk other myths from ""it's impossible to find talent"" and the fear of ""no one uses"" that are common myths about any technology that is not the #1 most used."	jeanlucas	12.696575	-7.454594	comment	3.0	42.0	1683986969	12.902424
35928766	There’s a lot of value in having dec	There’s a lot of value in having decisions made for you ahead of time. Nonetheless, decision fatigue is one of the things that annoyed me most about Rails after working in it for the first few years of my career; the flexibility and “expressiveness” of Ruby syntax makes it so writing code is a series of pointless decisions. Do I use parentheses in my function call? Do I use do/end or braces? Array indices or helper methods like .third? I’ve grown to question the value of this sort of thing. Rubyists used to say that various Ruby frameworks were DSL’s (DHH here restrains himself to saying it “looks like” a DSL) but frankly, leaving the parens off of method invocations isn’t a very convincing magic trick once you know how it works, and it’s not worth having to second guess whether to use par	philwelch	12.494766	-7.079616	comment	3.0	22.0	1683988191	12.377601
35928796	That ecosystem is crumbling too, unf	That ecosystem is crumbling too, unfortunately.Where, for example, in 2015 any SaaS or API would provide a gem (lib) to interact with it, today it's no longer the case. Modern PSPs, storage, search engines, etc almost all lack an official gem. Often lack even a third party one.And where back in 2015 there were popular systems in Ruby outside of rails, all those are crumbling and/or gone. Jekyll is no longer the go-to static site manager, Chef and Puppet no longer the obvious devops tools. And Ruby is completely absent from emerging technology (AI, blockchain, WASM, data science, etc).I'm afraid Ruby is becoming a legacy language and Rails' will be a legacy framework soon. Where the bulk of the Ruby jobs are to keep old stuff running and maintained. Afraid, because I'm still primarily Ruby 	berkes	12.700308	-6.9893336	comment	3.0	12.0	1683988411	12.373976
35929632	The thing I don't like with Elixir/P	"The thing I don't like with Elixir/Phoenix is the code generators.I hate code generators with a passion. They obfuscate the inner workings of the library. Have you tried to find a tutorial which do not use the Mix task ""phx.new""? (an up-to-date one).For example, if I need an API, I will pass `--no-assets --no-html --no-live --no-mailer --no-dashboard` and the generator still creates a static files folder and static files related code.If I want the strict minimum, I have to take some time to remove the un-necessary code.Don't misinterpret me, I think Phoenix is a great framework, just like Python/Django, and Ruby on Rails are.But sometimes, I just want Flask/FastAPI. You can say ""just use plug_cowboy"", but IMHO, ""plug_cowboy"" is more like ""express.js"", not really a FastAPI-like framework.Al"	linkdd	12.742783	-7.2522564	comment	3.0	14.0	1683993511	12.780351
35930100	I doubt the reservation is with the 	I doubt the reservation is with the language/runtime itself, especially with elixir and the BEAM. More likely, it’s with the maturity of the community. Especially at a small startup, building on elixir even today might still mean having to build things in house you may not in Django/Rails/JS.	alexgrover	12.674204	-7.4195247	comment	3.0	11.0	1683996234	12.848758
35930578	Oh boy does this comment resonate wi	Oh boy does this comment resonate with my experience. Several times now I’ve had incoming Rails enthusiasts insist that RoR is the absolute best solution to all problems. Inevitably, once the project has more than 3 engineers, it becomes a disjoint, indecipherable mess that eventually gets re-written entirely.I’ve said it once and I’ll say it again: Rails is the least-scalable framework ever when it comes to # of engineers. Someone is surely going to respond “you can just add more instances!” Not what I’m talking about, though it’s bad in that department too.	seattle_spring	12.72472	-6.9578414	comment	3.0	13.0	1683998952	12.350177
35930723	> Ruby on Rails is scalable for 99.9	> Ruby on Rails is scalable for 99.999% of all startups created with it.You are right of course, but not for your stated reasons. Essentially RoR doesn't scale. RoR scalability is a meme, anything else scales much better. From node to PHP, they all can do much more on much less hardware. To achieve hyperscale with RoR you have to throw absurd hardware with layers upon layers of load balancers in front of it.But I'd argue that it doesn't matter at all for a startup. Like you said most won't ever reach the point where they need such a thing. But they all benefit quite dearly from the excellent developer velocity provided by RoR.	tredre3	12.716848	-6.931904	comment	3.0	13.0	1683999737	12.298304
35929848	Did you use live view for those proj	Did you use live view for those projects? If so, what sort of scale are they? I've been seriously considering learning Elixir+Phoenix, but don't whether live view is suitable for serious projects (where serious blog project ∉ serious projects).	zamalek	12.812516	-7.165677	comment	3.0	11.0	1683994804	12.820319
35959423	Man, how much fun was it when it was	Man, how much fun was it when it was just html, perl, or php and a db or txt file. It’s all a nightmare now… all the abstractions are lovely and all, but, have they really really improved anything that much? I’d take late 90s internet over todays version anytime!	medion	12.653965	-6.472784	comment	3.0	19.0	1684229077	10.30137
35963111	I am pretty strong with Elixir, and 	I am pretty strong with Elixir, and I've done a little bit of Erlang.  Anyone who understand the basics of Erlang features that get used in Elixir should be able to program in Erlang with a bit of a ramp up period.Not too long ago I interviewed with a company that only uses Erlang, not Elixir, and they rejected me because I am not an Erlang expert.  There wasn't anything I could say that would change their minds.  I even volunteered to do a coding challenge of some type & they still wouldn't consider me further.Sometimes a talent shortage is a state of mind.	devoutsalsa	12.6341305	-7.4853277	comment	3.0	12.0	1684250676	12.928395
35963657	I'm struggling recently to build con	I'm struggling recently to build consensus with my team that Elixir is the right technology choice for a core element of our infrastructure. I've figured I just need to do it myself to demonstrate the value and then snowball from there.	whalesalad	12.686365	-7.4486504	comment	3.0	14.0	1684252692	12.921559
35967360	This is a great talk that answers ma	This is a great talk that answers many of your questions, https://youtu.be/JvBT4XBdoUEI am so far merely an enthused observer, so I can't give any insights into the experience of delivering business software with it. Here's my observations though- Engineers that work with this stack love it. The two most common issues I've seen are lack of static typing and difficulty in hiring- Great for IO bound tasks due to collaborative scheduling. For CPU bound tasks performance is better offloaded to e.g Rust (see rustler)- Exception handling is done by processes having supervisors. My mental model for this is similar to pods & deployments à la K8s, but at any abstraction level you want inside your component.- Elixir pleases many crowds: ruby, FP, performance, resilience- Phoenix (an elixir library) 	notemaker	12.657736	-7.3038545	comment	3.0	10.0	1684269094	12.768333
35967909	Hello, Elixir creator here.Indeed! A	"Hello, Elixir creator here.Indeed! Almost everything that Erlang/Elixir (I'll mention only Erlang from now on) offers can be achieved elsewhere - but Erlang offers it all in a unified and cohesive package.In Erlang, all of your code runs inside cheap lightweight threads of execution called ""processes"". They are all isolated from each other and run at the same, which brings us concurrency. When they need to coordinate, they do so by exchanging messages with each other. Message passing is location transparent too: you can transparently communicate between processes in the same or in different machines.Can you build distributed software in other languages? Yes, but it often requires bringing in additional frameworks and libraries. In Erlang, I do `spawn_node(othernode@localhost, fun() -> ... "	josevalim	12.599361	-7.4743824	comment	3.0	10.0	1684272034	12.913438
35993437	"    irb(main):001:0> ""bar"".foo
    T"	"    irb(main):001:0> ""bar"".foo
    Traceback (most recent call last):
            4: from /usr/bin/irb:23:in `<main>'
            3: from /usr/bin/irb:23:in `load'
            2: from /Library/Ruby/Gems/2.6.0/gems/irb-1.0.0/exe/irb:11:in `<top (required)>'
            1: from (irb):1
    NoMethodError (undefined method `foo' for ""bar"":String)
    Did you mean?  for
    irb(main):002:0> class String
    irb(main):003:1> def foo
    irb(main):004:2> ""foobar!""
    irb(main):005:2> end
    irb(main):006:1> end
    => :foo
    irb(main):007:0> ""bar"".foo
    => ""foobar!""
    irb(main):008:0> 

Yes! Let's modify the core library String class on the fly to add new functions to it.There are things about ruby that truly scare me if my goal was to write secure and reasonable code."	shagie	12.373475	-7.110715	comment	3.0	12.0	1684440695	12.361187
35996038	Eventually I wonder if the TypeScrip	Eventually I wonder if the TypeScript team will revert their stance on not allowing compiler plugins. It seems like such a waste not to have a standard package interface. All this is doing is exposing the already provided compiler tools, its not using Babel or anything, its just a nicer API over the raw TS compiler API.Arguably, the TypeScript team should be supplying that nicer API. Its the only thing missing to me from TypeScript that it really needs.	no_wizard	12.384703	-6.733535	comment	3.0	19.0	1684454403	-10.435394
35999346	What's the difference between reacti	What's the difference between reactive and functional programming? Both seem to focus on expressing relationships between objects and having compiler/runtime infer the computation, instead of explicitly specifying the computation.	bheadmaster	12.523893	-6.4840994	comment	3.0	12.0	1684485606	8.460468
36002286	Has the DX of Workers improved?I thi	Has the DX of Workers improved?I think Deno is lightyears ahead.	pier25	12.520704	-6.451487	comment	3.0	19.0	1684505855	1.3699367
36043584	"I think you're just reading it as ""E"	"I think you're just reading it as ""Elm/Go good, $yourFavLang bad"".Maybe this makes more sense:Coming from more expressive languages, one of the good things I could say about Go's developer UX is that you are so helpless to circlejerk over abstractions that there is simply nothing else to do than to write concrete code to solve the problem.Elm is similar versus the huge type expressive power of Haskell. Elm's type system is so minimal compared to similar languages that you can't spend hours perfecting your higher kinded advanced type abstraction that perfectly annotates and cordons off the problem domain because there isn't enough typing power to do that. You have to go ""welp, good enough"" and move on."	hombre_fatal	12.964673	-7.682007	comment	3.0	22.0	1684846688	-12.755911
36043808	We also use Elm in 2023, just got th	We also use Elm in 2023, just got the first project to production a few months ago and we absolutely love it. Finally a way to tame the complexity of browser-run-code.We only use it when there is complexity: when there is just a little progressive enhancement needed on a SSR HTML page we happily use vanilla JS or jQuery (we're looking for a good TS-based jQuery-like solution the fits that bill).What we like about Elm:* makes us think about tech design issues early on (you cannot just ignore them)* its a transformative experience: devs become better at writing any language after having solid Elm experience* its fast to compile compared to TS+React+Redux+Babel+WebPack+...* no unhandled runtime errors! (yes it is true, no more errors with Elm)Just like I find Ruby a very nice language that wa	cies	12.986488	-7.661748	comment	3.0	13.0	1684847760	-12.747901
36044257	It's not rock-solid nor complete.The	It's not rock-solid nor complete.The authors refused to fix a parser error related to negative literals: https://github.com/elm/compiler/issues/1773	vmchale	12.976185	-7.680687	comment	3.0	13.0	1684849766	-3.9685643
36044790	Have there been any efforts to fork 	Have there been any efforts to fork it?0.19 also prohibited interaction with non-Elm code which I recall a controversy about. But can't seem to find out if anyone forked 0.18 because of that.	nequo	13.003992	-7.684715	comment	3.0	19.0	1684851863	-12.748323
36044984	I don't think it's a fork, but promi	I don't think it's a fork, but prominent Elm developer/author Richard Feldman has been working with and hyping up Roc: https://www.roc-lang.org	Nezteb	13.007212	-7.6815667	comment	3.0	12.0	1684852788	-12.605117
36073142	> Competition seems to always lead c	"> Competition seems to always lead companies to drop what makes them special in pursuit of the other guy's customers.Can you explain in your own words why supporting the world's leading package manager system makes Deno ""drop what makes it special""? Does it make any sense to argue against gaining access to all conceivable dependencies?"	roqi	12.460616	-6.4550824	comment	3.0	14.0	1685033870	-10.876579
36094640	Knowing that Ruby libraries used blo	"Knowing that Ruby libraries used block (lambda) pattern for the past 25-ish years, it was very painful to read through the first 90% of the article explaining all the issues with abusing destructors.Maybe because first-class support for lambdas was added too late in C++ and Java, or maybe because it was always PITA to type.Ruby syntax is the lightest there could be (and it supports both {braces} and do/end keywords)transaction do   foo()

   bar()

end"	oleganza	12.430352	-7.0942054	comment	3.0	11.0	1685193968	12.372945
36113939	The article claims NASA use Drupal, 	The article claims NASA use Drupal, which was quick to verify as true, but NASA also uses Django, or at least the Django project still claims they do.Why on earth are they using both?	PrimeMcFly	12.826816	-6.534683	comment	3.0	10.0	1685368173	10.069232
36154238	What you really want for logic puzzl	What you really want for logic puzzles is a SAT or SMT solver as it gets the same results as exhaustive search except it usually can eliminate large amounts of the search space.  A language like Prolog superficially looks like it can solve logic puzzles natively but the search strategy is usually too limited.	PaulHoule	13.137498	-7.2762547	comment	3.0	16.0	1685639650	8.672915
36226739	So Daft is a distributed Polars ?If 	"So Daft is a distributed Polars ?If we set apart the distributed part, what's the ""killer feature"" of Daft for trying to compete with Polars (and Pandas) ? Are they API-compatible ? How's the memory consumption benchmark ? (TBH, this is the only interesting metric. Timing and Latency are not really important when your most important competitor is Spark)"	Fiahil	12.352488	-6.526335	comment	3.0	14.0	1686145644	10.073387
36233345	‘Elixir’ Review: Perfume and Science	‘Elixir’ Review: Perfume and Science in Paris	Caiero	12.692923	-7.457063	story	3.0	14.0	1686170975	12.848054
36237866	> The story that solidified is: Use 	"> The story that solidified is: Use Boring Technology. Use [...] Ruby [...]> I think this narrative, while conventional, is bollocks. [...] Ruby's weird semantics are credited for how one person as able to use it to make a world-changing framework; to call Ruby a ""boring"" choice now is a testament to how successful the right weird tech can be!Sorry, but this whole section is bollocks. I've never heard anyone call Ruby boring, and I've had one too many methods monkey-patched in from halfway across the universe to ever call Ruby ""boring"". Basically no-one seems to use Ruby for new Serious™ Programming™ Projects™ anymore."	dtech	12.6705885	-7.0239944	comment	3.0	10.0	1686204411	12.379817
36273902	How much memory is needed to run 1M 	How much memory is needed to run 1M Erlang processes?	todsacerdoti	12.517689	-7.493133	story	3.0	29.0	1686424142	12.879133
36274010	Elm is pretty much finished (meaning	Elm is pretty much finished (meaning feature-complete) IMO. Not much needs to be changed. I love Elm. I can always go back to a project and get back on it in 2 minutes. The compiler is superb. The problem is one must roll on their own almost everything.I dislike the constant churn of React and other libraries, that often add change for change's sake, and break backwards compatibility or depend on too many libraries. At the same time Elm is maybe too much in the other direction.	mejutoco	12.98968	-7.643961	comment	3.0	18.0	1686424651	-12.765943
36274921	I mean the last commit for Elm core 	I mean the last commit for Elm core was in 2021. Changes require sign off that doesn’t seem likely from who is currently maintaining it.  Why not fork it if you are interested in evolving ELM?	aurelius83	13.008756	-7.6897163	comment	3.0	20.0	1686429996	-12.758249
36274965	For one, it's been over 2 years with	For one, it's been over 2 years without an Elm release. And there are many open bugs untracked in GitHub. https://github.com/elm/compiler/issuesUnrelated to your question but for those curious, here's a comparison between Gren and Elm :https://gren-lang.org/book/faq.html#what-are-the-differences...	hu3	13.003499	-7.687244	comment	3.0	22.0	1686430179	-12.758625
36275155	A fork is a fork. If Elm development	A fork is a fork. If Elm development was open to the community and the author could’ve just added Node support to Elm do you think Gren would exist?	jgilias	13.002161	-7.687233	comment	3.0	11.0	1686431570	-12.76151
36276862	There's more to the story in that El	There's more to the story in that Elm is a stable, high-quality frontend language that works as well as its creator wants it to for now. There are a lot of happy Elm users over on the Elm Slack, and it's being used in production at various companies.There's also [Elm on the Backend](https://gotoaarhus.com/2023/sessions/2529/elm-on-the-backend), a recent talk given by the creator of Elm, about his experiments in using Elm as a full-stack language. There are some notes and a few photos, but no video as far as I'm aware.I'm not involved in the Elm community nor do I write it for a living though, so I'm only kind of aware of what's going on over in the Elm world.	m8s	13.004961	-7.6882443	comment	3.0	13.0	1686444116	-12.766587
36277180	I think BEAM languages are kind of o	"I think BEAM languages are kind of one of the few exceptions to this argument. Its tradeoffs and runtime semantics really are just very different from other mainstream languages. Other languages & communities are adapting to modern trends towards high concurrency, distributed systems, horizontal scaling, tight fault detection & recovery with varying degrees of struggle and success. Meanwhile in erlang these have been priority concerns for decades and they have highly sophisticated refined solutions to them built directly into the system.Not that this article makes a good argument for the benefit of any of those things for ML. But at least generally while I am a pretty strong believer of ""eh language doesn't really matter"" erlang-based languages I do entertain a possible exception for."	giraffe_lady	12.5279455	-7.499841	comment	3.0	16.0	1686448446	-8.995645
36278226	Lead developer here.I think it’s a l	Lead developer here.I think it’s a little misleading that the title of this post is «Gren - an Elm fork».While technically correct, I think there are many who will be dissapointed to find that Gren and Elm are incompatible languages.In addition to some syntax changes and improvements, Gren adds the support of a NodeJS target. It’s still early, so we don’t support all of the builtin APIs yet, but we’ll slowly get there.AMA	Skinney	13.004116	-7.687396	comment	3.0	15.0	1686459372	-12.757918
36276916	> people who have decided it’s not f	> people who have decided it’s not for themRather the opposite, actually. Elm had a lot of promise, and a lot of people really liked what they saw. I consider myself among them: language-wise Elm is pretty much my dream language, and I would love to use it in all my products.But then I tried actually using it, and it turned out one of the core Javascript API wrappers was broken, and rather than accepting one of a dozen pull requests to fix it, they just nuked it instead and made it impossible to write the same wrapper yourself.People keep talking about it not because they dislike it, but because they are grieving what could have been. Those tradeoffs and warnings weren't there when we first fell in love with the language.	crote	12.9994	-7.6845064	comment	3.0	10.0	1686444928	-12.761402
36290966	Typescript is very nice, just need t	Typescript is very nice, just need to get rid of the javascript underneath.	baq	12.353959	-6.6974425	comment	3.0	10.0	1686564205	-10.401454
36291210	Actually a lot of Ruby's features we	Actually a lot of Ruby's features were like: Perl, but with REPL and objects and easy metaprogramming.I believe Matz intended Ruby to please admins, not only programmers, from the very beginning. Following this, me and few buddies used it mainly for admin tasks for over a decade, doing things somewhat orthogonal to the then-emerging RoR crowd.Although ofc the author is right about Perl's unbeatable ubiquity..	kunley	12.589145	-7.0245285	comment	3.0	11.0	1686565685	12.387633
36295776	> quirky projects of the Web 1.0 era	> quirky projects of the Web 1.0 era still trusting phpDisagree with the dig at PHP. PhpStorm+Psalm doesn't give you perfection, but a perfectly respectable development environment. Using PHP isn't anachronistic, these shallow dismissals are. If anyone out there hasn't seen PHP 8 and Psalm yet, it's worth a look. All languages and ecosystems have trade offs, PHP is no exception, it is a good fit for many scenarios.	user3939382	12.759895	-6.632961	comment	3.0	11.0	1686585993	10.325293
36300786	I haven't used Elixir for scripting 	I haven't used Elixir for scripting yet, but I really like the idea of including deps at the top of the file. It's always been a pain to manage this in other scripting environments. I did scripts with Ruby in past and it didn't end up being easy to use because of external deps.	sb8244	12.671896	-7.442705	comment	3.0	19.0	1686602617	12.917372
36310512	I love how pragmatic the approach is	I love how pragmatic the approach is here. We still don't have parser generators which generate human understandable/readable recursive descent parser with good error recovery baked in.  But i am guessing the ruby syntax is too complicated/irregular anyway.On a macro side, i am always surprised with the length and effort company will go to keep working with solution design and selected at their young age,  and try to scale them well beyond the braking point. And i feel like most of this effort to keep ruby alive could have been used to slowly transition part of the infra to something JVM/.Net/Rust based for much more bang for engineering buck.	soulbadguy	12.558315	-7.0359993	comment	3.0	28.0	1686665670	12.379919
36321139	Rich Kilmer on the Power of Ruby (20	Rich Kilmer on the Power of Ruby (2007)	thunderbong	12.624095	-7.056466	story	3.0	45.0	1686713999	12.391217
36320287	>Some of the serialized data was sto	>Some of the serialized data was stored as XML (over 1M lines!), which was slow to parse and load. Rich modified the program to serialize the data as Ruby code, which loaded much fasterSo he took a data format designed for human readability and converted it to a data format that's designed purely to be read by Ruby and people are surprised that it's faster?	RhodesianHunter	12.568674	-6.9520564	comment	3.0	14.0	1686706974	12.362745
36336884	> We started on Heroku, because in 2	> We started on Heroku, because in 2012 if you did any Ruby on Rails tutorial that included deploying your app, you ended up with a Heroku account.Couldn't be more accurate. Heroku and Rails is almost as much of a throwback as Node and Express. You just had to be there. And it was great. Web dev was always a hobby for me as a teen, but then I turned to the rails book as a means of learning a professionally designed system, when I wanted to get serious as a dev. It definitely served me well. Heroku, at the time, offered a very streamlined and accessible way to integrate rails. It was a great time to learn.	awayto	12.729695	-6.9076567	comment	3.0	19.0	1686808244	12.373392
36356566	Is there any widely used and public 	Is there any widely used and public web or mobile app with its entire UI built with LiveView?	osener	12.893845	-6.7720013	comment	3.0	10.0	1686923414	12.696367
36359903	"The real ""aha!"" moment for me with L"	"The real ""aha!"" moment for me with LiveView came when I was using LaTeX to render a PDF in response to some user actions. The first time I did something like this, I did some janky polling on the client side. Other (bad) solutions involved blocking the client process or just praying that the PDF would render in time before the HTTP request timed out.With LiveView, it works like this:- user pushes a button to render the PDF- the LV process calls `Task.async(fn -> do_work({data, self.pid()}))` so the worker process has the PID of the LiveView process itself-  when the job completes on a different thread, the worker sends an Elixir message using the standard and highly-flexible built-in mechanism with `send()` to the PID of the LV- the LV gets the message and updates the UI and/or initiates a"	ashton314	12.915648	-6.7359734	comment	3.0	13.0	1686934503	12.66881
36360209	Porting this is cool but why would p	Porting this is cool but why would people adopt Elixir if they can have LiveViews in their preferred language?	jolux	12.675245	-7.451488	comment	3.0	22.0	1686935594	-11.6477165
36362281	I'll have zero trust running async D	I'll have zero trust running async Django until all sync_to_async and async_to_sync calls are removed from the code base.	pdhborges	12.46721	-6.706368	comment	3.0	13.0	1686943004	9.990058
36368590	And Ruby in 1995, but it wasn't befo	And Ruby in 1995, but it wasn't before 2005 (and Rails) that it reached traction. In 2007, albeit 16 years old, Python was still far from mainstream, especially out of its scripting niche.	littlestymaar	12.387834	-6.946081	comment	3.0	13.0	1686993287	12.400334
36377920	Show HN: Dots and Boxes in Elm	Show HN: Dots and Boxes in Elm	mcapodici	13.005337	-7.683887	story	3.0	31.0	1687070794	-12.738374
36382623	I spent a decade at Amazon (SOA all 	I spent a decade at Amazon (SOA all the things!) and then a year and a half at Shopify (single Rails monolith for all the things!).I think both strategies have pros and cons. But critically, you need a company culture that supports whichever choice you've made.If you have a company where each team gets to totally decide how they want to implement their stuff, sharing a monolith between teams can create a mess. Ownership issues to be resolved, code quality/style issues, operational issues. Monoliths require alignment.	mabbo	12.7515135	-6.9011173	comment	3.0	16.0	1687111251	12.35364
36382798	They succeeded because of php. It wa	They succeeded because of php. It was easy to use for them. So it enabled them to materialize their ideas. It was the right tool for them. Anything else would have been fine either way, if it was the language they were the most comfortable with. In their case, it happened to be php.	rafark	12.687082	-6.6549582	comment	3.0	12.0	1687112314	10.311285
36390750	I know what's TypeScript - just not 	I know what's TypeScript - just not getting why would you want to use it	Lapsa	12.357019	-6.799895	comment	3.0	14.0	1687180720	-10.443102
36394453	I learned about Elligator quite rece	I learned about Elligator quite recently and was shocked by how rarely it's actually been deployed (or even implemented), very happy to see it being used here.> Release date: 4/20/2018> Revision date: 10/8/2018Would be nice to get a (2018) in the title.	Retr0id	12.6819105	-7.43457	comment	3.0	10.0	1687197743	12.943953
36407076	I know I am going to get fairly pola	I know I am going to get fairly polarized responses on this one...Too bad it is written in Ruby.	jensenbox	12.565798	-7.0541377	comment	3.0	10.0	1687280616	12.375612
36414842	"    Requirements
    ...
    Ruby 2."	"    Requirements
    ...
    Ruby 2.7 and later

Damn.  This looked interesting right up until the Ruby requirement. :("	justinclift	12.616912	-7.043562	comment	3.0	11.0	1687326439	12.37474
36417190	Is it possible to get on Phoenix nes	Is it possible to get on Phoenix nested controllers? Like in remix.run, where for each route segment we get one controller/view. It’s really generalised version of layouts.When I was looking into Phoenix all routes, no matter how nested, had to resolve to single controller. That meant that controller for path `/user/settings/privacy` was also responsible for getting data to display users sidebar.	dhucerbin	12.828554	-7.049654	comment	3.0	10.0	1687347430	12.706853
36426368	This guide is interesting but extrem	This guide is interesting but extremely out of date.  I recommend Ruby Under a Microscope[1] though it is also out of date as well (but less out of date than the Ruby Hacking Guide)1. https://nostarch.com/rum	tenderlove	12.64226	-7.0118117	comment	3.0	17.0	1687391336	12.377307
36427373	Ruby is awesome AF.Rails has been go	Ruby is awesome AF.Rails has been going through a midlife crisis.I know there's other frameworks but Rails is awesome other than how they bowed down to different JS frameworks for asset pipelines in 5 and 6.  This is spose to be better in 7, but I still get weird edges cases and and work tough them in code, and my therapist.Sometimes I long for PHP, I left right as it was getting proper, Composer, Yii (I know most Laravel fans, but w/e), being able to just hot editing 1 line of code without full deploys.Yeah, Many people will tell you how surprised they are that I advocated Ruby and Rails, and im fine with that.	w-ll	12.731354	-6.9223275	comment	3.0	14.0	1687401223	12.349835
36437065	Wait, you're saying it's possible to	Wait, you're saying it's possible to write web code without typescript, react, and node?	Firmwarrior	12.448239	-6.604383	comment	3.0	29.0	1687460385	-10.401416
36438602	"If JavaScript is ""a giant pile of ex"	"If JavaScript is ""a giant pile of excrement,"" I think that makes TypeScript a polished turd. It's just a superset of JavaScript."	vlunkr	12.353151	-6.703919	comment	3.0	19.0	1687466266	-10.43634
36440266	This is what I'm saying though. Type	This is what I'm saying though. Typescript is just a hack on top of Javascript. The same engine is going to run your code in the browser.For the record, I think Javascript is fine (with some nasty warts), and Typescript is a great addition. The idea that TS is great but JS sucks is silly.	vlunkr	12.361084	-6.7644744	comment	3.0	12.0	1687474158	-10.432724
36441108	What's a full-stack TypeScript-based	What's a full-stack TypeScript-based alternative that's good enough for most of us? I constantly bump into the complexity of NextJS myself, but so far I've powered through the pain.	8f2ab37a-ed6c	12.504832	-6.4940915	comment	3.0	11.0	1687479818	-10.440228
36459960	I recently created a new NextJS proj	"I recently created a new NextJS project.For my little site I needed an input element with type=file.So I was getting started, with TypeScript and all, like the swaggest of web developers.Came the moment for the actual file input:TypeScript REFUSED to accept the input element's type as ""HTMLInputElement"" when that is literally its type.After TypeScript eating up about 1 hour or so of my time, I decided to get rid of that piece of sh*t for squiggly underlining all my code in Red simply because it's too retarded to understand it.Any of the TypeScript lovers care to explain?Needless to say, I ultimately went about doing what I wanted in 5 minutes in VanillaJS and was happy ever after.Call me again when TypeScript does its job correctly."	jdthedisciple	12.344944	-6.8387046	comment	3.0	18.0	1687623425	-10.437745
36467600	The entire website is written in PHP	The entire website is written in PHP. I have nothing against the language, but it's a major red flag when you would expect it to be using Java instead like most bank and government websites do.	friendlypeg	12.68244	-6.5965304	comment	3.0	11.0	1687696825	10.305317
36480470	A simple guide to pessimistic lockin	A simple guide to pessimistic locking in Rails	thunderbong	12.709089	-6.8430095	story	3.0	65.0	1687791655	-9.407192
36486918	Learn Stimulus in Ruby on Rails by B	Learn Stimulus in Ruby on Rails by Building a Toggle)	hbroadbent	12.768931	-6.6875825	story	3.0	27.0	1687819856	12.3651
36520436	> The list places JavaScript at a sc	> The list places JavaScript at a score of 4.45 and TypeScript worse at 21.5. For reference, C, the most energy efficient it 1.0The point is that TypeScript is JavaScript with typing syntax added on top.  There is a transpile step into JS.  That's how TypeScript works.  The runtimes are exactly the same.  Unless we're also measuring the build step?  Which seems silly.The difference should be near zero.  And it's not.  They clearly do not understand exactly what they are measuring.	BackBlast	12.35011	-6.7666316	comment	3.0	11.0	1688047032	-10.448153
36520511	I didn't read the original paper[0] 	I didn't read the original paper[0] but it is based on the Debian Benchmark Game[1] as it was in 2017 and the game relies on user submitted code for each language separately, so most likely when the researchers checked the results, the TypeScript tests didn't have as optimized tests as the JavaScript tests - which makes sense as the latter is way more popular than the former, so there are less people to bother with it (and in fact the benchmarks nowadays do not include TypeScript at all).You can confirm it via archive.org too: the TypeScript[2] page shows both less implementations and the implementations that are shown are often slower than those in the JavaScript[3] page.As for if that makes sense, well, IMO using the benchmark game for judging how good a language is at optimizations is f	badsectoracula	12.351189	-6.7758336	comment	3.0	14.0	1688047562	-10.458619
25767801	Personal thoughts:In Elixir you have	Personal thoughts:In Elixir you have consistent utf-8 binary string usage everywhere, consistently named modules/functions, consistently ordered arguments/return values, and, thanks to the pipe operator, in 3rd party code as well.And none of that in erlang ;)	out_of_protocol	12.610369	-7.4911485	comment	3.0	10.0	1610571085	12.926633
25769759	Do you have actual criticisms of Liv	Do you have actual criticisms of LiveView as a technology or are you just upset about macros?	jolux	12.875657	-6.8269086	comment	3.0	17.0	1610582303	12.716395
25768415	> I onboarded a python dev onto elix	> I onboarded a python dev onto elixir and he complained that elixir docs don't look like python docs, so it must be to some degree a matter of taste.As someone who also came from Python I can't say I'm a fan of Elixir's docs either.I often find myself having to externally search for Elixir / Phoenix resources and when you compare Python vs Elixir in that regard it's no contest. Almost every web dev problem you could think of is solved in Python with tons of examples, practical applications, blog posts, YouTube videos and the raw docs themselves. You'll almost certainly find high quality code you can at least work off of.Where as with Elixir I find myself hitting dead ends in a lot of places and the docs often don't have enough details or context to understand something unless you're alrea	nickjj	12.662789	-7.399604	comment	3.0	14.0	1610574689	12.917314
25787719	>Why can't I write code inside my br	>Why can't I write code inside my browser?um... because you didn't press ctrl-shift-I?But frankly, if you can't manage to install ruby and think $PATH is somehow complicated or scary, I don't want you writing code. So maybe it's for the best that you haven't discovered the developer tools built into every browser.	antisol	12.584735	-6.90241	comment	3.0	19.0	1610692507	6.1649837
25791639	Even with tooling getting better, yo	Even with tooling getting better, you're still faced with creating an API to the backend that has a high chance of your frontend being the only ever consumer of it.  You're also faced with duplicating logic on both front and backends in many scenarios (though of course this can be mitigated with a node backend?  I don't know... I've never used node).As for latency, this is over websockets.  It becomes a problem if you are connecting to a server across the ocean but otherwise, it's incredibly fast and feels just as snappy as JS.  I actually also haven't used Stimulus Reflex, just Phoenix LiveView so I'm not sure if they are exactly the same, but the TL;DR is that they are sending VERY tiny payloads over websockets.  This video explains it well (though it's also a demo of LiveView): https://	sodapopcan	12.900388	-6.7849603	comment	3.0	13.0	1610722614	12.680785
25798399	">All the front end devs are like, ""Y"	">All the front end devs are like, ""You have to wait how many minutes for compile times?"" for instance.This is funny because waiting for typescript to build is probably double or even triple waiting for my .NET project to compile at this point. I swear it gets slower every update."	worble	12.34313	-6.7835717	comment	3.0	14.0	1610755740	-10.446325
25846522	The biggest practical benefits of pl	The biggest practical benefits of plain JS over TS are that:* code is terser* the JS standard is more stable/standardised* code can be distributed uncompiled* code has broader tooling support* code can be reasoned about and debugged directly and natively in web browsers without the need for sourcemaps/plugins/etc.* file sizes are generally smaller* there are fewer config files* there are fewer moving parts and therefore fewer sources of error* there are fewer levels of abstraction and therefore fewer sources of error* etc.(TS diehards will argue that typing ameliorates higher error rates)	fergie	12.370194	-6.609046	comment	3.0	13.0	1611151345	-10.4643
25848605	The sweet spot is using some well kn	The sweet spot is using some well known library. A classic in the Rails world is Devise. There is usually one for any language or framework.	pmontra	12.741699	-6.9336586	comment	3.0	12.0	1611161218	12.352174
25857400	Show HN: A dead code killer for Erla	Show HN: A dead code killer for Erlang	elbrujohalcon	12.543	-7.5181193	story	3.0	103.0	1611224486	12.8796015
25877902	Wow. This really looks interesting!D	Wow. This really looks interesting!Ditching PHP for Golang and a full rewrite? Kudos!	denysvitali	12.658923	-6.7128882	comment	3.0	10.0	1611359500	10.295818
25933443	I disagree.Rails was already faster 	I disagree.Rails was already faster for CRUD apps back in the mid-2000s. Batteries included, maybe a gem or two for an admin panel or for auth. Not that it matters, but rails new is probably faster than 60 seconds too. Django is pretty good too.ASP.NET Webforms was made for CRUD, and it even provided a WYSIWG designer back in the early 2000s. And it was just a matter of launching Visual Studio and creating a new project. Again, doesn't matter, but it was/is way less than 60 seconds, and a lot less fiddling. Webforms got an MVC version a few years later if you prefer that. And they haven't stopped: Blazor is new-ish and very productive, and runs both in the backend and in the frontend (using WASM).Both Rails and Microsoft tech also give you a backend, which you're not putting into your equa	ratww	12.76993	-6.767153	comment	3.0	11.0	1611779055	12.23673
25958803	There still isn't anything there tha	There still isn't anything there that Erlang doesn't already have, excepting the theoretically-strong reference capabilities...which is what got me watching pony for a couple years.Pony needs to have something that shows how it's references are more/differently useful in a multi-actor program. I suspect that's a tall order.	Supermancho	12.5116005	-7.5543165	comment	3.0	12.0	1611936780	-6.0391564
25961934	I am not a developer, but I use PHP 	I am not a developer, but I use PHP a lot for scripting and personal automation including small web apps with SQL backend. I found PHP 7 to be a great improvement over 5.x, but with 8 I skipped every single new thing they brought. I can use PHP 8.1 in PHP 7.4 compatibility mode, but I find the features in 8.1 making the language less readable and less logic; for example, 3 dots become part of the language syntax? What is next, emojis as operators? Secret gang hand shakes as functions?	AdrianB1	12.759519	-6.6538515	comment	3.0	10.0	1611951800	0.16759071
25962651	This is really making what used to b	This is really making what used to be an easy to read, easy to learn language a lot less of that. Some of us still don’t use IDEs and are okay with more thoroughly defined code that is readable.If people are so gung ho on adding in syntax hacks, shortcuts, etc, they seem to be bringing ideas from other languages and why not simply continue to use that other language? PHP seems to be looking more and more like Go or JS to me now. Anyone want to start a fork called “PHP Classic”? :)	mike503	12.740354	-6.62948	comment	3.0	12.0	1611955006	10.3525095
25992582	I recently used Starlette, which Fas	I recently used Starlette, which FastAPI also uses, for a project and absolutely loved it. I went with Starlette over FastAPI because I didn't need a lot of what FastAPI provided for that particular project.I want to start nudging my coworkers into using FastAPI over Flask because some of the async APIs they've started using.  FastAPI seems to come with all the things they want out of the box instead of adding a bunch of individual Flask packages.Just for my own understanding, where would FastAPI be appropriate vs. Starlette and vice versa.Thanks!	hangonhn	12.503936	-6.611874	comment	3.0	11.0	1612207795	-9.189397
25992645	This is a Python framework claiming 	"This is a Python framework claiming Node/Go-comparable perf.Here's what it looks like:from typing import Optionalfrom fastapi import FastAPI
from pydantic import BaseModelapp = FastAPI()class Item(BaseModel):
    name: str
    price: float
    is_offer: Optional[bool] = None@app.get(""/"")
def read_root():
    return {""Hello"": ""World""}@app.get(""/items/{item_id}"")
def read_item(item_id: int, q: Optional[str] = None):
    return {""item_id"": item_id, ""q"": q}@app.put(""/items/{item_id}"")
def update_item(item_id: int, item: Item):
    return {""item_name"": item.name, ""item_id"": item_id}That can get you an autogenerated openapi spec and docs, which IMO is pretty awesome.Can anyone comment on how it compares to Django Rest Framework? (Other than presumably being faster)"	rattray	12.701647	-6.571417	comment	3.0	14.0	1612208071	10.011963
26019257	asdf makes my life so much easier se	"asdf makes my life so much easier seriously, it's amazing. Try it!I have a .tool-versions file in code repo that lists what I need for a project.    elixir 1.2.3
    erlang 1.2.3
    nodejs 1.2.3

Whenever I `cd` into the folder, asdf automatically uses the right versions for me. I don't have to worry about anything. Razer sharp scalpel of a tool."	sergiotapia	12.522052	-7.343628	comment	3.0	12.0	1612387257	-3.408451
26019821	Would really love to see first class	Would really love to see first class support for Javascript/Typescript for data visualization purposes. The columnar format would naturally lend itself to an Entity-Component style architecture with TypedArrays.	liminal	12.400367	-6.6767387	comment	3.0	13.0	1612390216	-10.443405
26079270	I like Erlang and Elixir quite a bit	I like Erlang and Elixir quite a bit. However, I do think a bit of caution is warranted. With languages like Java, Ruby or Python, you can probably do an ok job at any particular task. Maybe not a great job, but good enough to get something up and running. I think BEAM has some sweet spots where it really is the best, but they're not huge spaces, and it's good to be wary of people jumping into BEAM without solid reasons why.In terms of what it's good at, we very successfully employed Erlang as the command and control language for some semi-embedded system medical devices. The runtime is predictable in terms of performance and memory, and fast enough for a lot of things. Where it wasn't, it's easy enough to talk to C. All the fault-tolerant bits are nice for a system like that where you wan	davidw	12.601892	-7.480522	comment	3.0	33.0	1612887515	12.896364
26079497	I've worked in Elixir every day for 	I've worked in Elixir every day for the past 5 years.Things I like using it for:- long running services- doing anything w/ concurrency- setting up cron-like processes that run every so often- actor model anything- stateful services- web development using Phoenix & Ecto- parsing- encoding/decodingThings I don't like are primarily related to it being a small enough community.  That means libraries for third party services aren't always the best, and using it in the enterprise means that the smaller talent pool is less attractive when the company's priority is to use proven/boring tech for which you can hire tons of developers.  I also don't think Elixir has a clear value proposition when you're writing small, single purpose functions for a serverless architecture (even though I really like w	devoutsalsa	12.695082	-7.4288654	comment	3.0	15.0	1612888731	12.912753
26087797	The only thing missing for me now is	The only thing missing for me now is that TypeScript supports it as output type. Right now you cannot use Typescript and compile it to ESM modules.	danez	12.329226	-6.6298323	comment	3.0	10.0	1612955699	-10.390377
26098201	I think you have missed where he sai	"I think you have missed where he said it had 20 people using it.Not 200,000. A single process wasn't able to handle 20.You'll be hard pressed intentionally writing code that performs that slowly in a framework in another language.Ruby by default has an incredibly long list of ""you can but you shouldn't"" and things you need to be aware of, especially around concurrency.Other languages are mostly fast by default. When you follow some nodejs/express/whatever introduction tutorial and implement your first application in the most naive way possible, you'll end up with something that will easily scale to hundreds if not thousands of users out of the box.Do the same with ruby (or even with some python frameworks, to be fair), and stuff can break at less than a hundred users.And that's why yes, yo"	chmod775	12.677741	-6.9828134	comment	3.0	14.0	1613017007	12.348747
26098583	"We were ""IO-bound"" using a setup tha"	"We were ""IO-bound"" using a setup that executed a maximum of two requests at a time, completely blocked processing new requests until earlier ones fully completed, and took a long time to execute requests because of unexpected latency in a dependency, while 20 frustrated users sat in a room hammering the refresh button and dumping more tasks onto the queue.You're absolutely right when you say there was something seriously wrong with the setup! The problem is that it was more or less what you'd get if you set up a default Rails app behind Passenger, and Passenger did this because some of the major Ruby gems weren't threadsafe (e.g. Rails, until 2008), which comes back to concurrency problems with the ecosystem."	strken	12.712924	-6.978462	comment	3.0	19.0	1613021727	12.324296
26099754	He said there was high db latency. T	He said there was high db latency. This matters a ton when your language is single threaded and not using async io. 20 queries would tie up the whole server for a second at 50ms db latency.You can get around it by using async instead of blocking, using fibers which don't block, or using a thread pool so other threads can keep serving.I'm not experienced with Ruby but it sounds like Ruby doesn't do any of those	throwaway189262	12.659928	-6.9532514	comment	3.0	10.0	1613035961	12.322719
26114869	> I'm curious what the HN thinks abo	> I'm curious what the HN thinks about that?People don't need those white-label commodity cPanel or Plesk shared-hosting or VPS services to run SaaS applications anymore - it's far better for everyone[1] when they switch to a major cloud provider, namely AWS, Azure, GCP, etc.I argue that most web/saas devs today grew up with - and tinkered-with - said white-label services: which means they got their experience with MySQL because it was part of the stock default configuration for all those web-host accounts: with PHP, maybe Perl, and many preinstalled web-applications like phpBB, Wordpress, Coppermine, phpNuke, and so on... and that's probably a solid 15+ years of commonplace web-hosting market saturation (thinking 2001 through 2016, with 2014 being the tipping-point for AWS/Az/GC being the	DaiPlusPlus	12.810435	-6.453949	comment	3.0	11.0	1613144618	10.269785
26138461	Nothing below is meant as criticism 	"Nothing below is meant as criticism just an acknowledgment of the complexity of the space. I wish you all the luck!> Most bundlers allows you to select an output format of the code, such as: ""CommonJS"", ""AMD"", ""System"", ""UMD"", ""ES6"", ""ES2015"" or ""ESNext"" FJB does not implement this concept.
Instead, FJB adapts the code automatically through static analysis. FJB aims to generate code that works everywhere (when possible). A bundler should be smart enough so that the developer can focus on other things. :brain:That sounds nice. In practice other tools that make similar promises end up being a big ball of incompatibility and config and plugins. I hope this won’t happen here!> TypeScript support (currently unstable and under development)IMO this is make or break for any tool I’d consider and I"	eyelidlessness	12.414762	-6.4851565	comment	3.0	17.0	1613356779	7.5799975
26151966	Phoenix and Elixir, if you understan	Phoenix and Elixir, if you understand the choices made, is also a wonderful choice. The whole contexts thing allows you to design your system as micro services before you even add in network partitions, and Ecto, not being an ORM (it’s a DSL for writing SQL in elixir) is incredible, better than it’s possible to be in active record. Then there’s channels, presence, performance etc.	andy_ppp	12.709767	-7.3243876	comment	3.0	26.0	1613463636	12.874754
26152807	Just wondering: is rails transaction	Just wondering: is rails transactional? What I mean how are race conditions avoided if e. g. two requests are processed at the same time.	andi999	12.730071	-6.8281837	comment	3.0	15.0	1613473110	12.209421
26153082	So the functionality is equivalent, 	"So the functionality is equivalent, but ruby's syntax is slightly longer. Is there something other than ruby's slightly longer syntax that you find lacking?Ruby's Method class matches the design ""everything is an object"" (strings, numbers, modules & classes themselves...). Are regular expressions first class in ruby? There is top-level syntactic sugar for REs (/.../) but REs are just instances of `Regexp`. It's just syntax. I don't think you can argue Python REs are first class: I have to drag in `re` and then `re.compile()` a string (and my editor won't know to syntax highlight metachars or interpolation). I use REs more often than method references in either language...But I'm not trying to ""whataboutwhataboutwhatabout"" here. I'm trying to say there's a difference of philosophy. Ruby Met"	zwp	12.488829	-7.0717945	comment	3.0	16.0	1613476368	12.412192
26153189	> In that context, what does it mean	"> In that context, what does it mean to be ""first class""It's easy. First, what does it mean to be ""first class""?> a first-class citizen (also type, object, entity, or value) in a given programming language is an entity which supports all the operations generally available to other entities. These operations typically include being passed as an argument, returned from a function, modified, and assigned to a variableSecondly, how does that apply to functions?> [First class functions] means the language supports passing functions as arguments to other functions, returning them as the values from other functions, and assigning them to variables or storing them in data structuresIn what way doesn't Ruby have first class functions? This article explains it better: https://codequizzes.wordpress.c"	capableweb	12.346907	-7.125468	comment	3.0	10.0	1613477801	12.372964
26153107	I wouldn't really go that far though	I wouldn't really go that far though, as you'll end up with a codebase that the linter likes (and appears clean) but is still an utter nightmare to read because of all the forced indirection. I'm talking about things like: restricting method length to 10 lines, restricting class length to 100 lines, and similar ones that prevent you writing code in a certain way because the preferred approach to writing code is 'out of sight, out of mind'.Default Rubocop is why you have codebases where code is still complicated, it's just hidden away inside single use modules (concerns) or inside single-use private methods. As far as I'm concerned you just can't defer the architecture of your codebase to a tool like that and I'm sure it teaches more bad habits than good ones.Instead, decide these things fo	ljm	12.440413	-7.0700073	comment	3.0	14.0	1613476754	-10.909901
26185178	>  Beware and use Django until you’r	">  Beware and use Django until you’re sure you AND your team know what you’re doing.That's one of my pet peeve in the Python world: people thinks Flask is for beginners and Django for advanced users. The Flask API is simple, the hello world is 5 lines. By the time you render your first Django ViewModel, you have read and tried out the full Flask doc.So it's easy to say, ""I'll start with Flask, and check out this Django thing later"".But in reality, it's exactly the opposite. Flask requires you to know a lot of things and make a lot of decisions, not to mention select/write additional libraries for features Django packs.So if you use Flask for anything non trivial, you should show your trade or you are going to mess up, big time.If you are a beginner, you should always start with Django. Yes"	BiteCode_dev	12.790191	-6.513186	comment	3.0	15.0	1613680723	10.042514
26185950	it's cool that gleam emits typespecs	it's cool that gleam emits typespecs.  After tooling around implementing type analysis in Elixir, I do have a personal take that dialyzer typespecs are broken, maybe we should convene a group in the erlef to coordinate towards improving the typesystem.	dnautics	12.528295	-7.453878	comment	3.0	37.0	1613684050	-12.344952
26186855	My list of alternative languages for	My list of alternative languages for the Erlang VM:https://gist.github.com/macintux/6349828#alternative-languag...	macintux	12.5456085	-7.506225	comment	3.0	14.0	1613688226	12.937823
26191074	I keep saying this every time this t	I keep saying this every time this topic comes up, have a look at elixir/erlang. The OTP library gives some great reusable patterns (and elixir project is adding new ones[1]) out of the box. You're basically developing a single codebase microservice project which feels like a monolith. You can spread out on multiple machines easily if you need to, the introspection tooling is better than anything you can buy right now, it's amazing.Things can get tricky if you need to spread out to hundreds of machines, but 99%+ of projects wont get to that scale.[1] https://elixir-lang.org/blog/2016/07/14/announcing-genstage/	mstipetic	12.555183	-7.4793677	comment	3.0	12.0	1613725666	12.920845
26213052	Ironically, Elixir is a great exampl	Ironically, Elixir is a great example of a success largely due to being based on “boring” technology	darkr	12.692508	-7.4607344	comment	3.0	11.0	1613911227	12.935974
26242463	The history of Erlang is also intima	The history of Erlang is also intimately related to Prolog, as explained by Joe Armstrong in this article:https://www.cse.chalmers.se/edu/year/2009/course/TDA381_Conc...It's quite amazing how one can implement Erlang or basically any other language prototype as a Prolog metainterpreter.	nextos	13.0830965	-7.312954	comment	3.0	10.0	1614112109	-12.451414
26242581	As Kowalski has acknowledged and rep	"As Kowalski has acknowledged and reported by others, Prolog was invented as a subset of Planner that only implemented backward chaining.See the following for further information:""Middle History of Logic Programming: Resolution, Planner, Prolog and the Japanese Fifth Generation Project"" ArXiv 2009.https://dev.arxiv.org/abs/0904.3036"	ProfHewitt	13.149308	-7.2955594	comment	3.0	20.0	1614112810	-12.492872
26260335	I've been playing with Elixir in my 	I've been playing with Elixir in my background time; I'm liking it so far. What, if any, effect does a new release of Erlang/OTP have on Elixir? Is there usually a new follow on release of Elixir that chases the new features of the new Erlang release?	travisgriggs	12.677612	-7.462937	comment	3.0	13.0	1614234911	12.93507
26262412	Warning - rant ahead:I've been in th	Warning - rant ahead:I've been in this field for 15 years now. At some point the puns are a bit overbearing. We have enough cognitive overhead anyway, it's inherent in our field.They could have named it Carnegie Mellon Common Lisp, but hey, someone wanted to feel clever.Though this is super minor compared to Ruby (gems & co.) and especially to Chef (where you work with cookbooks, recipes, etc.) And of course, the granddaddy of them all, Unix. Because of course, less is more (all of my non-techie friends roll their eyes when I tell them about that one).	oblio	12.537144	-6.946487	comment	3.0	11.0	1614259211	12.365561
26269721	> I think ultimately Phoenix and by 	> I think ultimately Phoenix and by extension LV just don't have the manpower.For comparison's sake:- [LivewWire] Caleb (creator of LiveWire) made 1,000+ commits and added 200k lines of code from Jan 2019 to Feb 2021- [LiveView] Chris (creator of LV) made 700+ commits and added 80k lines of code from Oct 2018 to Feb 2021- [LiveView] Jose (creator of Elixir) made 450+ commits and added 25k lines of code from Oct 2018 to Feb 2021There's even more contributors to LV (207) overall than LiveWire (145) which is interesting because LiveWire is 3x more popular based on GitHub stars.From that you could say that LiveView has more manpower than LiveWire since Caleb wrote all of that code himself in a shorter amount of time while 2 people are main contributors to LV.Plus at the same time Caleb wrote a	nickjj	12.878813	-6.874889	comment	3.0	12.0	1614295783	12.722105
26302096	> Similar case with Erlang...Have yo	> Similar case with Erlang...Have you tried Elixir?I had been doing Ruby for a long time (also Java and Scala before and after that, now Python).Gave Elixir and Phoenix framework a shot a month ago and it's a breath of fresh air: great language, outstanding tooling.I've also done a bit of Haskell, OCaml and PureScript within my personal projects. I do miss having a state of the art typing in Elixir, but there is enough in Elixir to keep me happy:* immutability everywhere* ridiculously low latencies (not by HFT standards I guess)* LiveView* ...many other goodies that come with BEAM* Toolingedit: formatting	forkerenok	12.616227	-7.382408	comment	3.0	13.0	1614601538	12.81383
26302445	So what actually happened? Neither O	So what actually happened? Neither OP nor linked press articles seem to really explain it.(There's a joke somewhere in here about how readable Perl is.)	blfr	12.349424	-7.0371885	comment	3.0	10.0	1614604609	13.178225
26311761	Ask HN: What is a good replacement f	Ask HN: What is a good replacement for CGI.pm?	oblib	12.443923	-6.6755733	story	3.0	5.0	1614657559	13.131265
26315219	I am a TypeScript fan but I do ackno	I am a TypeScript fan but I do acknowledge the existence of the tax. TS is another cog in the machine that does useful work but can sometimes confusingly interact with other cogs (e.g. miles long unreadable TS errors coming out of React). Using or not using TS is not a trivial decision to me and should be made with consideration to the complexity of your stack.	uh_uh	12.367294	-6.820792	comment	3.0	10.0	1614692721	-10.440227
26315891	I'm a senior developer and I've neve	I'm a senior developer and I've never touched TypeScript and don't have any desire to unless I have no choice.I haven't worked on any projects that were large enough to warrant type checking or where I felt it would make a huge difference. Also I find it a bit verbose and ugly and I'm just not a fan of pseduo Javascript languages that need to be compiled down into JavaScript.	mouzogu	12.352722	-6.8060613	comment	3.0	13.0	1614696758	-10.463253
26315928	We only use TypeScript on frameworks	We only use TypeScript on frameworks that make it a requirement, the language is starting to look like Haskell.As much as I like Anders work, it is impossible to understand modern TypeScript without looking into tsconfig.json before looking into source code.	pjmlp	12.363511	-6.7564483	comment	3.0	11.0	1614696951	-10.44411
26315074	I think a large part of the support 	"I think a large part of the support for Typescript comes from being able to create good tools for the language.But, I still have an aversion to front-end development itself, because it just feels too _involved_. You have to set up so much, and it has become a lot more difficult since you need to install webpack, postcss, and many other plugins just to do a hello world app.It's still bearable if you have to do all of that, and you _understand_ what is going on, but most of the time, especially when it comes to front-end, I do things ""because that's how it's done"".This makes me feel very insecure about my code."	gamesbrainiac	12.42286	-6.711643	comment	3.0	17.0	1614691865	-10.450888
26317178	I think the skepticism of new shiny 	I think the skepticism of new shiny things is healthy. Of the set of things that exist, most things are worse than the things one already uses/prefers. Most new things solve a specific problem that may not overlap with the problems one is trying to solve. With software development, a huge part of the puzzle is tooling (as the article points out), so even if typescript is obviously superior as a language, the tooling needs to catch up before it's a reasonable/useful alternative. In this case, the tooling quality, enabled by the static typing, shot typescript way past the thing it was replacing.	cosmotic	12.340122	-6.8239894	comment	3.0	26.0	1614703330	-10.421695
26317225	I was hesitantly open to TS when the	"I was hesitantly open to TS when the hype was first ramping up. The team I was on (and I've seen this in lots of code elsewhere too) was doing stuff like this:  declare let myColor: Color | undefined;

Suddenly everything turned into Java with signatures cascading endlessly. I'm not blaming TS, it's more of a.. lack of faith to make the full jump? Or limitation of the underlying Javascript? This problem should be solved with having multiple function signatures, in the example above one with and one without the Color param.I've been toying with Erlang for years, once I grokked how they flow control can be done via different method signatures, the Other Way started looking really inadequate."	btbuildem	12.341694	-6.7648773	comment	3.0	17.0	1614703581	-10.453174
26317337	I have a theory that TypeScript was 	I have a theory that TypeScript was not actually invented for frontend developers, it was created for non-frontend developers who were forced to deal with the frontend, and hated JavaScript.That's also why I think it's very funny that JavaScript developers are starting to use TypeScript on be backend, i.e. Deno.You are using the patch to JavaScript that backend devs needed to make JavaScript more like backend languages in the very place that the languages it is trying to be like already exist.  It's ludicrous.	DrFell	12.399525	-6.713795	comment	3.0	10.0	1614704087	-10.473382
26324443	There's nothing in that code that sa	There's nothing in that code that says that any of those parameters have to be ints. They're certainly expecting ints, but there's no casts in that code that would enforce that. Presumably somewhere upstream they're just passing directly from the POST/querystring into these API functions.Remember: Ruby is a dynamically typed language.	kemayo	12.4102545	-7.0754147	comment	3.0	17.0	1614742791	12.369366
26339547	I used to be such a huge Django fan,	I used to be such a huge Django fan, and in many ways I still am.I've built more than one business around it.For the past six or seven years though, I've found Nodejs to just be superior in every aspect other than the automatic admin.Strapi has some interesting options there though.	claytongulick	12.808719	-6.4911256	comment	3.0	12.0	1614841766	10.049723
26371927	I absolutely hate this kind of nitpi	I absolutely hate this kind of nitpicking, and am loathe to see it enforced, especially if the org has the bright idea to try to wire this up as a precommit hook.Single quotes, double quotes, who cares? Oh no, you might have to change some extra characters. Such big cognitive overload, very hard...All this 'standardization' is stripping the individuality and artistry from writing code. Sometimes I feel like the only person in the world who likes being able to look at code and know who wrote it by the style that they use.In Ruby, especially, where expressiveness and being a little weird feature so prominently in our cultural heritage. If I wanted to be a conformist I'd write Javascript for a living!	tomc1985	12.479314	-7.009023	comment	3.0	15.0	1615077138	12.383055
26383709	There are strategies other than micr	There are strategies other than microservices to break a problem up into small pieces, manage resources and isolate failures.I've consistently heard good things about Erlang/OTP.	josephg	12.451053	-7.491985	comment	3.0	11.0	1615195565	12.8976
26408484	I think we should try to encode type	I think we should try to encode types in a common notation and create a gobal package manager for them. Then get people to actually use the types and you'll get much closer to automating API connectivity. I think Tree Notation and a yet to be developed package manager based on distributed principles would be a good start.	lambda_obrien	12.442616	-6.4574385	comment	3.0	10.0	1615358339	9.428434
26412756	TypeScript makes JavaScript a boring	"TypeScript makes JavaScript a boring, ""enterprisey"" language. That's a really successful strategy, as seen in Java and C#."	haolez	12.36427	-6.719252	comment	3.0	17.0	1615392808	-10.4409485
26413241	Typescript is getting more and more 	Typescript is getting more and more popular. I wonder if there is leeway to have this introduced into browsers to be run directly. I can see Microsoft doing it with edge, and possibly provide an upstream patch to chromium.This might be unpopular opinion, but personally I'd love for JavaScript to be completely replaced with TS or something like it.	dastx	12.376875	-6.732559	comment	3.0	11.0	1615394985	-10.4421835
26448161	Erlang/Elixir are two of the least O	Erlang/Elixir are two of the least OO languages I can think of. Point still taken though. Elixir is an absolute joy, and the more new languages take examples from it, the better.	pkulak	12.530978	-7.487515	comment	3.0	45.0	1615656872	12.919925
26447894	I'm fine with implementing another s	I'm fine with implementing another static Object-Oriented language, but please learn from some of the best non-static Object Oriented languages out there like Ruby and to a lesser extent Erlang/Elixir.	fouc	12.340505	-7.2354155	comment	3.0	59.0	1615655026	12.561477
26464550	Text processing, without a single me	Text processing, without a single mention of Perl. How times have changed.	oefrha	12.332135	-7.023112	comment	3.0	31.0	1615807050	13.17962
26465898	I remember the day I joined HN in Ma	I remember the day I joined HN in March 2009. The entire front page was full of Erlang articles. Like, almost every single one. I didn’t know it at the time, but apparently that was part of an intentional effort to scare away newcomers who weren’t “hackery” enough.I thought to myself, if these people are really this crazy about Erlang, maybe there’s something to this website after all and created an account. I have to say, I was somewhat disappointed when it turned out that it was all a ruse!	DrJokepu	12.571271	-7.522739	comment	3.0	18.0	1615815294	12.905432
31089231	Call me old fashioned, but PHP still	Call me old fashioned, but PHP still gets the job done better than just about anything else.	donatj	12.754277	-6.608186	comment	3.0	39.0	1650402655	10.327008
31090885	"The idea of using a ""framework"" in a"	"The idea of using a ""framework"" in a language that gets completely reloaded on every new request doesn't make sense - at least I thought a framework was something that wrapped your own code and presented an event loop, etc. You'd want a ""library"" if you just wanted to improve on the original low quality PHP database connectors and such.But PHP developers always did seem to have inappropriate jealousy over unrelated languages like Java where there is persistence over requests."	astrange	12.653412	-6.5265174	comment	3.0	19.0	1650412033	10.336974
31089765	I have colleagues using Laravel, and	I have colleagues using Laravel, and there's nothing muddy-ball about their apps at all.  Their code is tidy, modern, readable, and clearly maintainable.In terms of practical effect, frameworks influence developers more than languages do.	gmfawcett	12.784242	-6.6136374	comment	3.0	26.0	1650405098	10.319642
31097021	Because Ruby is already memory safe 	Because Ruby is already memory safe and JIT miscompilation is a logic bug.	infamouscow	12.540175	-7.0199428	comment	3.0	14.0	1650463061	12.370696
31148728	The state of fq_codel and cake in 20	The state of fq_codel and cake in 2022	dave_taht	12.693037	-6.588848	story	3.0	30.0	1650837608	10.443615
31154280	The site doesn't make it clear, but 	The site doesn't make it clear, but this isn't a full list, since PHP 8.2 will be accepting RFCs until mid-July (see https://wiki.php.net/todo/php82 for the release timeline).Even though it's incomplete, this page helps to generate excitement about PHP generally, which is a good thing — the PHP community sometimes struggles with its reputation as a dying language.	muglug	12.760547	-6.6402497	comment	3.0	21.0	1650893264	10.323375
31155790	PHP has really become quite great to	"PHP has really become quite great to work with.I wish there was a fork of PHP that cleaned up all the things that would break backward compatibly (e.g. have consistently method naming, clean up type casting for methods that do that which can today lead to weird bugs, etc). Essentially, haven't an entire ""clean"" language to work with."	alberth	12.739776	-6.6340704	comment	3.0	13.0	1650898742	10.329057
31160711	Just because you disagree with it do	Just because you disagree with it doesn't mean it's worthless advice.I always have a fond flutter whenever I see Ruby (which I used to write, and really enjoyed) but absolutely wouldn't start a new project with it, for practical reasons. It's slow, it can turn into a big ball of mud as applications scale (there's no named imports for crying out loud, everything is just in a global namespace with side-effects everwyhere), etc.Certainly there are still people/projects where, upon consideration, Ruby is still the best choice (eg; small Rails shop has a standard CRUD app to build quickly that will not likely ever scale to be huge). But you should still _consider_ not using Ruby.	rattray	12.72036	-6.9563394	comment	3.0	24.0	1650921306	12.362208
31162150	My argument is - if you swapped out 	My argument is - if you swapped out the syntax of Crystal to not look like Ruby, would anyone think 'this is like Ruby'. I don't think so. Super fundamental parts of the language semantics, like method dispatch rules, are completely different between Ruby and Crystal.> Your criticism does not seem rigorously considered.I'm a major contributor to the Ruby specifcation, and I've got a decade of full-time experience in writing about and implementing Ruby and its semantics, so I'm not just doing a drive-by comment.	chrisseaton	12.60701	-7.245218	comment	3.0	11.0	1650929024	-11.232391
31163586	In my experience all those cons are 	In my experience all those cons are mostly just your company/team not knowing how to program in Ruby.	lbrito	12.611663	-7.026333	comment	3.0	12.0	1650942750	12.364151
31164497	We inherited an Elixir project.  Aft	"We inherited an Elixir project.  After a year of irritations, we re-wrote it in Go and never looked back.The combinatorics of having to deal with two different string types, two different throws (catch vs rescue), two different versions of each function (exception throwing vs error returning) in most of the base libs, weak typing, weak documentation, and the constant churn of dependencies because the language developers like to change things ""just because"" (i.e. regular re-naming of built-in functions for ""consistency""--several builds broken because they just had to add/remove an underscore in one identifier or another).And when things go wrong, we'd often have to dig-down into Erlang errors and libs the same way we would with Java errors in Clojure, so now we have two languages we've got "	georgia_peach	12.503175	-7.5056863	comment	3.0	27.0	1650953353	-12.473319
31169375	> the newly added Ruby jit that you 	> the newly added Ruby jit that you can optionally turn on is faster than GraalNo TruffleRuby is still very much faster than any other Ruby JIT. YJIT does startup faster yes that's the goal.https://eregon.me/blog/2022/01/06/benchmarking-cruby-mjit-yj...	chrisseaton	12.58757	-7.0322547	comment	3.0	14.0	1650989967	12.339028
31171530	I think it depends on the region. I 	I think it depends on the region. I started a project in Rails, and when I tried to hire people to help I found out there are very few people in my city who know anything about Rails. It's all Python and Java here.So I'd recommend to look for job ads on local platforms and check if companies are looking for rails devs.	newaccount74	12.739849	-6.9450164	comment	3.0	13.0	1650999071	12.3607855
31171815	Ruby has been on the downswing for a	Ruby has been on the downswing for a while, getting squeezed from all sides from the meteoric rise of Python on one side, JS/Typescript on the other, to higher performing static languages on another:https://octoverse.github.com/#top-languages-over-the-yearsIt also has a funky syntax, while not a big deal, doesn't do it any favors in a C --> Javascript world.  Django, golang, etc. are free.   I don't recommend starting new projects in ruby, but as always YMMV.	digisign	12.540918	-7.011209	comment	3.0	17.0	1651000326	12.357857
31171988	This is the right answer. Yes people	This is the right answer. Yes people still write on rails but in my experience it’s because they haven’t used other tools.I had a couple die hard rails members at my last company who claimed nothing was better. We made them write Go for a year and now they are die hard Go fans.If I were writing a web app I would start with Go. It’s a great language that’s easy to learn and fast to write, with all the security of static compilation. It scales exceptionally well with large teams	mountainriver	12.6969795	-6.982062	comment	3.0	10.0	1651001120	12.357147
31173507	Adding to that, wouldn’t adding Erla	Adding to that, wouldn’t adding Erlang’s unique features to the JVM be easier than the other way around? Especially with GraalVM’s unique approach that manages to elevate Ruby’s performance far higher than any other runtime?	kaba0	12.457143	-7.481417	comment	3.0	21.0	1651009123	12.878967
31173501	PHP is the language which would impl	PHP is the language which would implement a loop by pushing a byte offset to a stack and seek in the file at the end of the loop. Massive improvement if you had a disk cache.It's all relative to where you come from. The byte code interpreter of BEAM is very close to a poor man's JIT. It has some op-fusion, and uses threaded code. So gaining efficiency will require lot of work.	jlouis	12.437647	-7.2765613	comment	3.0	11.0	1651009093	7.1341877
31178167	How does datalog the pure prolog sub	How does datalog the pure prolog subset store its data?	turminal	13.155863	-7.2353935	comment	3.0	10.0	1651053943	-12.439143
31178366	I've been at a company that did this	"I've been at a company that did this, they started migrating everything to Go because it was the new cool thing to do and everyone was in love with it.One year later it was a mess of network calls, no ORMs and nearly-raw queries because who needs an ORM, migrations run by SQL statements on bash scripts because who needs migrations. Validations were custom wrappers on some validation libraries and validation errors were of course not consistent across all of the microservices, not because of lack of agreement, but because new ideas and ways to  ""do it better"" showed up all the time.Some of these ""services"" needed translations (for emails, hooks, and some html responses) so a custom ""very simple"" translation system was invented.It became an infinite mesh of proxy services on top of proxy ser"	likortera	12.528229	-7.10449	comment	3.0	16.0	1651056154	10.573537
31194848	Just to be a bit pedantic (but impor	"Just to be a bit pedantic (but important), Erlang is not an actor system.  It's a system designed for fault tolerance and definable failure domains.  Concurrency fell out of those requirements and it just happens to vaguely look like an actor system if you squint hard enough.  I don't believe theories of actor systems played into the design of Erlang.Perhaps some of the blame belongs on the creators of Erlang for kind of jumping on the ""actor"" (and later, ""OOP"") bandwagons as marketing? to try to make Erlang less scary."	throwawaymaths	12.330701	-7.5140147	comment	3.0	13.0	1651164513	12.86004
31203326	I think Yanis Smaragdakis Onward! 20	"I think Yanis Smaragdakis Onward! 2019 paper fits here ""Next-paradigm programming languages: what will they look like and what changes will they bring?"" https://yanniss.github.io/next-paradigm-onward19.pdfHe has done a lot of work using datalog and argues, convincingly in my opinion, that it is reasonable that some of the elements of datalog-like programming will be part of the future. For example, that there is a very simple way to express a relational-join and the underlying machinery figures out the most efficient way to do it, just like a DB query optimizer does."	dagipflihax0r	13.176536	-7.0202913	comment	3.0	10.0	1651226477	-12.401859
31204412	The original generations referred to	The original generations referred to hardware: (1) thermionic valves, (2) transistors, (3) integrated circuits, (4) VLSI.   Japan's MITI initiated and funded a project to develop a fifth generation of computers, which were to be highly parallel, but MIMD (Multiple Instruction Multiple Data), specifically dataflow computers, rather than SIMD.  The system language for this was to be a Prolog variant, and many of the applications running on fifth generation computers were to be Symbolic AI - expert systems, machine translation, etc.These generations were later mapped onto software.   The first two generations were machine code and assembly language.   Prolog and other similarly high-level languages would be fifth generation.The Japanese Fifth Generation Computer Project was largely unsuccessf	DonaldFisk	13.087339	-7.2694287	comment	3.0	12.0	1651236480	-12.507175
31210839	Not exactly a big codebase, but it w	"Not exactly a big codebase, but it was a revelation for me how natural typecheckers can feel in Prolog: I basically rewrote typing rules with some tweaks: [1]Also, tests were surprisingly enjoyable in Prolog: [2].[1] https://github.com/EarlGray/language-incubator/blob/29755c32...
[2] https://github.com/EarlGray/language-incubator/blob/29755c32..."	dmytrish	13.137963	-7.2897468	comment	3.0	12.0	1651268268	-12.488748
31215755	To be more precise, most Prologs bef	"To be more precise, most Prologs before the last 5 years have built-in predicates that break _atoms_ up into either character codes, or characters. ""String"" as a datatype is the novelty of the new generation of Prologs.For instance, here's Sicstus  | ?- atom_codes('abcd', Cs).
  Cs = [97,98,99,100] ? ;
  no
  | ?- atom_chars('abcd', Cs).
  Cs = [a,b,c,d] ? ;
  no
  | ?- 

Personally, I'm kind of ambivalent about this new direction. ""String"" is a programming language concept, but not a FOL concept. ""Atom"" is a FOL concept- but Prolog mangles the clean and tidy FOL (and Logic Programming) nomenclature and calls ""atom"" everything that should really be called a _constant_, and calls what should really be called an ""atom"", a ""term"". Then it's all downhill from there.The ideal for me would be to"	YeGoblynQueenne	13.145324	-7.298558	comment	3.0	17.0	1651323850	-12.466565
31215816	I remember reading and re-reading th	I remember reading and re-reading that article back when it first appeared on the 'net, right after I graduated from CompSci with a big crush on Prolog, paired to gigantic gaps in my understanding of it (and of Logic Programming in general).The article looked... not enough. I got a general idea of how Prolog was used in Watson, but not clear enough that I could easily reproduce it myself. Or so I thought back then.Reading it again now, it's clear to me that they used Prolog to implement the rule-based part of their system, whose function was, essentially, to map from an initial parse of a Jeopardy qustion to a semantic representation of the question, then find an answer for it.Similar to what Triska points out in another comment in this thread, this is Prolog's bread and butter and the kin	YeGoblynQueenne	13.142325	-7.284858	comment	3.0	15.0	1651324309	-12.479921
31217464	WARaft: An Erlang implementation of 	WARaft: An Erlang implementation of RAFT	blopeur	12.53382	-7.517346	story	3.0	49.0	1651338610	12.907912
31216630	Your friends haven't tried R and Jul	Your friends haven't tried R and Julia?I don't see how elixir can replace python any time soon because it's DS ecosystem is lacking rn sadly	umren	12.640469	-7.450021	comment	3.0	10.0	1651331455	12.811624
31219728	My go-to these days is Polars. You g	My go-to these days is Polars. You get good performance since it uses arrow in the back. Coupled that with built-in lazy evaluation and it's API design it's pretty good for me. There are some caveats you need to be aware though. It doesn't always work as a drop in replacement for pandas	rdedev	12.332991	-6.5552135	comment	3.0	14.0	1651355441	10.168756
31224198	Unfortunately it's not always the ca	Unfortunately it's not always the case - at least not with Ruby (which I consider somewhat nichy). My experience is the Ruby job interview is just like any other algo/Leetcode type interview - in 90% of interviews they don't bother testing my Ruby knowledge (very likely the interviewer doesn't really know Ruby that well). Maybe 2 companies out of 15 had actual Ruby questions.So maybe Ruby is not niche enough or the hiring company thinks it's no problem teaching someone Ruby, idk. But I'm surprised again and again how little companies care about my actual experience. It's all algo questions or something about deployments/Kubernetes.	weatherlite	12.694978	-7.018927	comment	3.0	12.0	1651405332	12.41675
31228297	PHP is still the only language on th	PHP is still the only language on the web you can deploy to a $5/mo host with a zipfile without needing wade through Docker, Git, the command line, token management, etc. My dad can install this for the middle school he teaches at. You couldn't say the same thing for a Node app.	jitl	12.711903	-6.583691	comment	3.0	15.0	1651436427	10.266736
31233546	I’ve made tons of things in Django. 	I’ve made tons of things in Django. My first experience w Python was making something in django (for actual users). I don’t feel like clogging up the internet w some post about how I made something in django, but if that’s what it takes then maybe? It just seems as much like garbage-self promotion as posting a pic on Instagram or something. Anyway, with me I don’t think experience is the problem. As silly as it seems, I think I just come off as dumb due to my voice, face, etc.	_vpbe	12.814437	-6.5364523	comment	3.0	14.0	1651489063	10.098396
31245286	That is such a well articulated obse	That is such a well articulated observation, it resonates strongly with my own experience.I grew up on PHP, it was the first thing beyond BASIC I ever wrote, and I wrote a lot and enjoyed it so much. It really was this magic thing, that you just modified whatever file you needed to modify, throw it on the server, and hit f5 to see your changes reflected.. No processes to restart, no state to be lost, you jammed, and it was a very gentle way to learn.	dusted	12.750741	-6.6142697	comment	3.0	14.0	1651558776	10.308987
31245463	Author here. I have very, very simil	"Author here. I have very, very similar childhood memories of PHP. It really was a magic thing to mess around with - I think a lot of people had this experience. I suspect back then a lot of people learnt webdev this way. Sadly I suspect it's less common now.Back then the ""LAMP"" stack was common enough that there were turnkey packages for Windows that setup ""LAMP"" for you. Was one called Wampp, or something? I forget. At first I liked using a particular proprietary web server for Windows called  'Sambar Server' which made learning easy due to its PHP support and web GUI config editor. Later setting up Apache, PHP and MySQL on a new Windows install became a common habit for me, once I learnt how to do it. I would make PHP websites and host them locally, then show them to people by giving the"	hlandau	12.738977	-6.5960784	comment	3.0	10.0	1651560801	10.305057
31246830	Yes, if you have to set up and confi	Yes, if you have to set up and configure a webserver from scratch, and compile things, deployment in any language is difficult. But for the most common use cases, PHP is still easier.	krapp	12.775558	-6.616051	comment	3.0	32.0	1651575355	10.313834
31260576	Serious question - if it was so much	Serious question - if it was so much better then, why are approximately zero new companies building a Laravel/Rails/whatever app and using jQuery for the front end? If it's that much of an advantage I would expect at least someone who is trying that (because surely some are) to succeed with their lean, mean tech stack. Why wouldn't you have just written the project in that standard MVC stack instead of a modern one?You won't get any objection from me on the debugging point, it's much harder, especially when you're crossing environment - e.g. running the front end locally but maybe hitting a remote dev or QA backend. I will point out though that there are logging tools that support the pretty standard practice of having correlation/transaction/trace IDs on your requests, such that you put i	pc86	12.703303	-6.4575787	comment	3.0	12.0	1651673062	10.315686
31275569	So true, excellent point! I just do 	So true, excellent point! I just do not understand startups choosing Python/Ruby in 2022 when you can get most of the features, type safety, concurrency, async and 5 times more speed in other languages.	rockyj	12.406334	-7.01809	comment	3.0	10.0	1651768864	12.344905
31282644	> This RFC proposes to deprecate opt	> This RFC proposes to deprecate options 3 and 4 in PHP 8.2 and remove them in PHP 9.0.Why remove it? Why break everyone when you can just deprecate it indefinitely or at least for a very long time?Deprecated it, write clear warning messages with links to official docs, suggesting alternatives. Update official docs to reflect the idioms. Done.PHP as a language and ecosystem seems to be evolving backwards from a reliable, productive and accessible tool to something that is breaking callers, introduces versioning and upgrade issues.And it's already harder to debug than competing languages, because errors are spread across the server, the language runtime and even within that there's different types of error systems with error reporting, exceptions, error values and so on.I'm impressed by som	dgb23	12.731014	-6.6617002	comment	3.0	12.0	1651824623	10.284558
31282751	These two lines of code are now depr	"These two lines of code are now deprecated, and will be removed in PHP 9.0. My question is: what will they do in PHP 9.0? Will they throw a syntax error? Or will they print something else?  echo(""${foo}""); // Will this print '${foo}' in PHP 9.0, or will it raise a syntax error?
  echo(""${(foo)}""); // Will this print '${(foo)}' in PHP 9.0, or will it raise a syntax error?

Personally, I would prefer it to raise a syntax error. Otherwise, code that runs one way in PHP < 9.0 will run a different way in PHP 9.0, failing silently. I would prefer it to fail loudly."	Flimm	12.736079	-6.643103	comment	3.0	13.0	1651825476	10.347825
31282845	Even worse, it will reveal the varia	Even worse, it will reveal the variables used by your page to the user, which in some cases can be a security risk.I assume it will raise a syntax error, as the PHP team is good about these things.	sam_goody	12.68498	-6.583599	comment	3.0	10.0	1651826283	10.288439
31287121	I wrote the initial proof of concept	I wrote the initial proof of concept for tRPC a little over a year ago (though I'm no longer involved in the project). Seems like there's some confusion about how this works. A more complete description is available here[0] below but I'll put a brief explanation below as well.- It's designed specifically for a full-stack TypeScript app. Your API is implemented as strongly typed server-side functions.- The input type is specified using a schema library like Zod or io-ts.- TypeScript infers the return type of these functions.- You can then import the type signatures of your functions into your client. Just types, no runtime code! This is safe in typescript with the `import type` syntax. tRPC uses those type signatures to provide a typesafe client API, basically an SDK for your API. There's n	colinmcd	12.430274	-6.6181626	comment	3.0	10.0	1651854842	9.419846
31314969	Yes, it absolutely is. The few times	Yes, it absolutely is. The few times I did work with Elixir I came across a few instances where I had to use libraries that had not been ported over to Elixir yet so I had to deal with Erlang. It wasn't fun.That being said, I think it's only one of the issues affecting Elixir adoption. Elixir, while undoubtedly a great language, is not very easy to use. The docs have a huge focus on the language and its syntax, but don't really hold the hand of developers of imperative languages who want to understand the paradigm of functional programming.It took me an obscenely long amount of time for me to understand how a GenServer works, and how the entrypoints for an application work. This is a big pain point with learning Elixir and every time I come back to it I have to do this big mental overhead 	dimgl	12.646322	-7.4720063	comment	3.0	13.0	1652108558	12.930612
31315635	Devil's advocate:What would it take 	"Devil's advocate:What would it take to programmatically port/transpile the core of Erlang's ecosystem to Elixir?Pick the killer app to serve as the root node (Phoenix?) and walk back to the leaves (OTP, popular libraries, etc). Do a 1-time cutover of literally everything. Fork/port ERTS (incl BEAM) to make Elixir-native and rebrand it. Etc.While I generally agree that ""rewriting as bad"" there is something to be said about the importance of _ease_ when bootstrapping and scaling an ecosystem. You're either stealing mindshare from an established ecosystem, or you're capturing new minds as they come in.IMO Elixir/OTP is too radically different from other very-large ecosystems to benefit from transfer learning for junior/mid-level people (great similarity w/other smaller fringe ones, like Ruby,"	mgdev	12.652902	-7.4797916	comment	3.0	10.0	1652111236	12.9313
31315664	> However, from what I've seen, ther	> However, from what I've seen, there is still no Rails / Django equivalent in JS world. Sails JS has a low satisfaction rate. Nest JS looks more like a wrapper around existing tools than a real framework. Blitz JS looks promising but has not enough traction. That may just not be the philosophy.I think there is AdonisJS : https://adonisjs.com/ which could be the Rails / Django equivalent you're looking for.	nassimsoftware	12.744086	-6.687673	comment	3.0	10.0	1652111367	12.337839
31324380	If Only Ruby was actually popular ou	If Only Ruby was actually popular outside of our own circle, I might have an easier time at hiring ruby devs :(	ab-dm	12.683174	-7.0096135	comment	3.0	12.0	1652166543	12.377838
31330436	It is disappointing to see this mess	"It is disappointing to see this message as the basics of what the software is on their site (https://deno.land/):    Deno is a simple, modern and secure runtime for JavaScript, TypeScript, and WebAssembly that uses V8 and is built in Rust.

Only to have that immediately followed by really poor practice of suggesting this as the installation method:       curl -fsSL https://deno.land/install.sh | sh

This is not strictly related to Deno -- lots of software does this -- but if you're going to suggest your thing is more secure than the other guys' thing (which is implied by calling your thing secure), you shouldn't then be immediately throwing that credibility away.Yes, the page offers a link to the ""Releases"" page at their github repository. However, anyone familiar with any kind of UX will "	BeefWellington	12.498345	-6.464055	comment	3.0	19.0	1652206440	-10.920459
31330925	> ‘Deno’ (like ‘Node’ but backwards)	"> ‘Deno’ (like ‘Node’ but backwards)Yeah, no.I wonder if more people just assume that to be true, heh. I kind of was expecting it, weirdly enough.Hint: ""node"" is ""edon"" backwards. Not sure if that name is taken for something Javascripty ... * goes to check * yeah, I found [1] which seems to be 4 years old, tagline ""Run browser JS in the terminal"".[1] https://github.com/dbkaplun/edon"	unwind	12.474709	-6.4405727	comment	3.0	27.0	1652208389	-10.948356
31343793	Concepts of the Text Editor Lara (19	Concepts of the Text Editor Lara (1985)	todsacerdoti	12.752026	-6.588419	story	3.0	30.0	1652293092	10.38011
31347598	> they could have probably build a v	> they could have probably build a very Ruby on Rails like framework on a language more suited to the size and scale of these platforms.I have a hunch they would rather have tens of thousands of other folks using a framework that has massive community support and folks other than them directly maintaining it.Also being able to Google almost any problem in Rails and find multiple really good answers is worth needing 5 or 10 times more compute costs on just your application servers because dev time is expensive at any scale.If you're paying 2,000 developers 150k+ a year that's 300 million dollars without accounting for anything that scales off base salary (bonuses, 401k matching, etc.). If you can save each developer 5 hours a week because of the Rails community existing that's 10,000 dev ho	nickjj	12.737473	-6.945035	comment	3.0	11.0	1652313777	12.3514
31401152	Those might be complementary but the	Those might be complementary but they are still other languages. They have completely different semantics, performance characteristics, deployment stories, etc that will need to be learned, developed and supported internally.It seems like they like ruby and appreciate what it allows them to do. There's no particular reason to think that the strengths they value in ruby will be present in those or any other languages either. They mentioned metaprogramming for example and it truly does feel easy and powerful in ruby in a way that I've only felt in certain lisps otherwise. Presumably they're heavily invested in certain techniques and powers, have earned and maintain internal expertise in them and find them valuable.Moving the critical functionality into a language where they'd be giving up th	giraffe_lady	12.565712	-7.051662	comment	3.0	13.0	1652724046	12.380949
31403369	A better question to ask is, why are	"A better question to ask is, why are these ""slow"" languages winning? If performance is as important as we think it is, why don't we see startups using Rust or whatever just running circles around startups using Ruby?The answer to this will lead to what actually matters in a language, in terms of building a product. Raw performance isn't it."	yen223	12.500038	-7.070518	comment	3.0	11.0	1652736621	12.389267
31402610	why does shopify not just use Crysta	why does shopify not just use Crystal https://crystal-lang.org, it is faster than go, with Ruby like sytnax. Invidious the youtube proxy is written in it.	lowwave	12.730684	-7.0024524	comment	3.0	10.0	1652731793	-11.251856
31423027	OTP 25 has been released	OTP 25 has been released	lelf	12.588497	-7.4740677	story	3.0	163.0	1652883168	12.886713
31423670	It is very much that. The Erlang tea	It is very much that. The Erlang team have not been too proud to steal good ideas from Elixir. Elixir has been a good source of fresh thinking for the BEAM ecosystem which has helped both the Erlang and Elixir side.	rkangel	12.620342	-7.479603	comment	3.0	16.0	1652886183	12.927704
31424484	I've seen more than once recently an	"I've seen more than once recently an engineer saying that software solutions outside of the Serverless ecosystem (FaaS, DB, etc) is ""the new legacy"". And that cloud providers have solved all the pains that Erlang was supposed to address.
What's your feeling on this? Elixir sounds very compelling to me, but I worry that I might be going in a direction that's not where the industry is going."	haolez	12.628149	-7.4937205	comment	3.0	14.0	1652890185	12.931643
31424619	Java is unfashionable since when Rub	Java is unfashionable since when Ruby on Rails came out. Early 2000.	habibur	12.44217	-7.007289	comment	3.0	11.0	1652890828	12.285751
31426195	This is great. I hope this finds its	This is great. I hope this finds its way to Elixir land.	barkerja	12.6938095	-7.4560227	comment	3.0	10.0	1652899339	12.928072
31449546	I’ve been playing around in Pharo [0	I’ve been playing around in Pharo [0] and it’s such an immersive experience! My first reaction was to compare to eMacs in that the editor/environment is the program and it can be edited, customized, extended… but Pharo/Smalltalk takes it to the next level of ease of use, discoverable and fun![0] <https://pharo.org/>	_benj	12.327416	-7.2970405	comment	3.0	16.0	1653063833	7.0779557
31455421	I absolutely love typescript!But rec	"I absolutely love typescript!But recently, I found out about ReasonML, an ML-family language transpiled to JS that, from a distance, looks like something I'd like over TS in every aspect except one (third party typings): much more terse algebraic sum types(tagged unions), more terse code in general, incredible compile times, and named arguments[0].To top all of that, ""reason-react""[1] claims that ""Reason syntax and language features are a better match for React programming patterns"", and I am very inclined to agree already.I'd love to hear folks' experience with ReasonML, or pointers to blog posts such as these where companies write up their experience.[0] https://blog.dubenko.dev/typescript-vs-reason/[1] https://reasonml.github.io/reason-react/docs/en/what-and-why"	davidatbu	12.432367	-7.188561	comment	3.0	11.0	1653110092	-10.462006
31460406	only because the companies that use 	only because the companies that use rails are stuck on it :P	kache_	12.779893	-6.9161596	comment	3.0	10.0	1653157210	12.361169
31466285	First time I saw the find by example	"First time I saw the find by example feature I thought ""maybe it tries all applicable methods"" but then immediately dismissed the idea because it could execute methods with side-effects. Does Pharo somehow knows about safe/unsafe methods ?"	draven	12.334644	-7.2496276	comment	3.0	10.0	1653210952	-6.4530954
31466446	Pharo recruitment plug: yesplan.be (	Pharo recruitment plug: yesplan.be (Belgium) is hiring European Pharo software engineers. If you have little Pharo knowledge that’s fine too, in my (personal) experience, as I am now working with it for 3 months.More on topic: there are many ways in which Pharo can find things that is not possible (or applicable) in other languages.For example, there are 4 mouse clicks you can make in your image:- left click- right click: it shows a context menuAnd then there are two clicks that I would need my laptop for to (re)figure out. One shows a “halo” around a window. The “halo” gives all kinds of options. The other one shows a context menu that allows you to figure out what objects are running with regards to the pixel you clicked on!Because of the last click, it’s easy-ish to extend your IDE.The 	melvinroest	12.340614	-7.2653913	comment	3.0	13.0	1653212808	7.097421
31470791	Aren't linguistic names a form of mo	Aren't linguistic names a form of mold?I find Rails' conventions are very good around this, for example datetime fields end with _at and dates end with _on. This way you end up with variable names like published_at or published_on depending on if you care about the time or not. It sounds so natural.The idea of using ? to end a variable name for booleans is great too.It's the opposite of cognitive load because you can glance at a name and know what it is without knowing more about it. If the implementer of a linguistic named function does bad things to break the expected behavior then you shouldn't blame the method -- that's a user error.Personally I find consistent names more important for CLI tools, kubectl's CLI is good in this department for being consistent. You can predict how each co	nickjj	12.410708	-7.0801663	comment	3.0	12.0	1653241522	12.384498
31486526	Good god. Your mind would be absolut	Good god. Your mind would be absolutely blown by what you can do in Ruby.	KerrAvon	12.610203	-7.0592895	comment	3.0	15.0	1653351700	12.392354
31486699	Aha I think you mean Rails, there ca	Aha I think you mean Rails, there can't be anyone left using it for anything outside of that.	tempest_	12.770134	-6.925263	comment	3.0	10.0	1653353102	12.372946
31509884	Constraint programming. Everyone wil	Constraint programming. Everyone will tell you that C++ and Java solvers are so much faster. That's true, but prolog for example is incredibly easy to use in comparison, and in fact not that slow. So if you're prototyping or aiming for something exotic that doesn't easily fit into existing libs, LP will be miles ahead.Generally speaking, you'll see the same pattern for any problem involving searching a space of potential solutions. In a word, the strength of LP is flexibility when facing the unkown (future feature requirement).EDIT: you mention parsing. If you're planning anything context-sensitive, you have to check out eDCGs. You probably won't use them, but they'll give you an idea of what's possible.	rscho	13.071014	-7.2519755	comment	3.0	10.0	1653509494	-12.469231
31517398	I wouldn't worry much... the reports	"I wouldn't worry much... the reports of Perl's death have been greatly exaggerated!The blog post seems to indicate that the steering council simply wants to to avoid being bitten by Zawinski's ""CADT"" model.And who could blame them after seeing the kind of stunts pulled in other language communities?"	dinom	12.344825	-7.039181	comment	3.0	14.0	1653567622	13.181382
31518080	> Perl never had this kind of tracti	> Perl never had this kind of traction afaik - yes many scripts were written on Perl but not many .com companies were based on it.Were you around for the first (pre-2000) dotcom boom? From where I was sitting (freelancing in London) it sometimes seemed that all of the first wave of dotcom companies were writing their apps in Perl.In fact, I've often thought that a lot of Perl's current bad reputation stems from this generation's CTOs and dev managers being people who suffered writing those Perl web apps at a time when no-one knew how any of this stuff was supposed to work and careful design went out the window in the rush to get things to market before the bubble burst.	davorg	12.343011	-7.019276	comment	3.0	12.0	1653571657	13.14467
31519179	> Web frameworks are inferior to tho	> Web frameworks are inferior to those in most other languages.That's quite a statement. Go on, for most of the other languages, show me a web framework that's better than Django.Python absolutely has deployment challenges, but the performance is Good Enough™ and the speed of modelling and maintaining and accessing databases in Django's ORM is so much better than anything else I've found. Its Admin interface too is superb for same-day turnarounds on little CRUD projects. Nothing comes close.And I've written quite complex systems around Django. Ones that are multi-headed websites, APIs to physical hardware IO, ANPR, card readers, ID printers. Python hasn't let us down.	oliwarner	12.747927	-6.5379214	comment	3.0	11.0	1653577272	10.017491
31523659	DjangoCon US 2022: Call for Proposal	DjangoCon US 2022: Call for Proposals	rbanffy	12.821323	-6.564752	story	3.0	24.0	1653601071	10.108749
31527346	But Deno is incompatible with npm, n	But Deno is incompatible with npm, no? Deal breaker.	cutler	12.513747	-6.453375	comment	3.0	11.0	1653640537	-10.9579525
31527570	We just need all this tooling to go 	"We just need all this tooling to go in the browser.. which is where it always belonged. That was the purpose of JS. To ""just run"" in the browser. It's getting there but very slowly.As for my own rant, simply the fact that Microsoft, of all places are the ones who run TypeScript and now the proposal to add TS to native JS.. is part of the issue. MS has zero imagination.JS needs native typing and it shouldn't be done by MS, and it should be a limited subset of TS with no particular intent to be compatible with MS's TS. Then and only then JS becomes its own thing again."	AltruisticGapHN	12.375393	-6.687713	comment	3.0	10.0	1653643202	-10.442924
31552281	Personally, I have a negative reacti	Personally, I have a negative reaction because we have an app that is used regularly by only a couple hundred users, developed by three programmers. The move to even a partial SPA with modals took forever, and we already had a completely unnecessary microservices architecture for potential future scaling that we still have never needed after 10 years (decisions I rallied against, but I was out-voted).Now we have an app that we depend heavily on, where more than 90% of the processing is just 10 different Rails apps chatting with each other on the same machine (all talking to the same database server, of course), 90% of bug fixes are related to the bespoke SPA architecture or microservices (where operating without caching is impossible for performance reasons, but caching is constantly causi	Taywee	12.732317	-6.8916683	comment	3.0	10.0	1653853858	12.326561
31557455	I find it to be quite the opposite a	I find it to be quite the opposite actually.While you get up and running faster with Django, in the long run you spend more time fighting it, whereas with Flask you only spend time on stuff that you actually need.	ibz	12.777626	-6.5701656	comment	3.0	18.0	1653906472	10.0299225
31569068	One of the things that keeps being r	"One of the things that keeps being repeated in ruby land is that domain objects are usually married to storage/serialisation method. At some point of application maturity you'll need some other method of serialisation, some other type casting or conversion logic for your form or something else, but by that time a lot of surrounding code would depend on implicit logic of the original base library.
ActiveRecord does this, and your library does it too. Object mappers which can initialize or serialize instances of other classes, including PORO, are much more versatile and future-proof. And API for doing that could look almost the same as yours."	codesnik	12.848662	-6.7869864	comment	3.0	15.0	1654002651	12.326609
31598485	Javascript and Typescript to an even	Javascript and Typescript to an even worse degree are awful monorepo citizens. Beyond requiring an absolutely ludicrous amount of configuration they also don't fit into existing build tooling well, i.e Bazel, Gradle, etc. The tools created to work around this (lerna - now defunct, nx - awful) are entirely specific to the JS/TS problem and aren't sufficiently general to handle polyglot repos. On top of all that the Typescript compiler (well type-checker really, it doesn't compile anything) is horrendously slow and has poor incremental support.If you are writing a sufficiently large application you are just better off switching to a mature tech stack than dealing with how awful the TS ecosystem is.Ideally something with a good build system, good incremental compilation, proper test framework	jpgvm	12.362481	-6.796613	comment	3.0	14.0	1654193442	-10.40309
31608006	PHP: CakePHPThis was the very first 	PHP: CakePHPThis was the very first framework I learned when I first learned PHP, and it has always just been so incredibly _easy_ to accomplish most common MVC tasks that I've stuck with it. I've become quite the expert in the framework over the years, even managing to make it bend quirky ways that it was not meant to in service of business goals. That has made me an extremely valuable resource for companies using the framework, and so I keep using it. Plus, I enjoy it immensely.	jamisonbryant	12.785567	-6.611505	comment	3.0	15.0	1654263133	10.3098345
31643043	Prolog is the only language that I'v	Prolog is the only language that I've ever learned that feels like magic. Of course, it's not, but it feels like that. I'm still learning it, but I feel it and the logic paradigm are underused. I wonder if it's fair to consider it constraint-based programming rather than just logic programming. I used the book Thinking as Computation to learn it (and still am), and that's what it felt like we were doing in the book: just setting up constraints for the program to run through and find matches for the constraints.	bmitc	13.136374	-7.2953053	comment	3.0	38.0	1654535443	-12.484059
31643792	On the other hand, with dozens of li	On the other hand, with dozens of lines of Prolog you can solve some problems that would take many thousands of lines in other languages (and a lot of calm study before you can map them into a real logic or imperative algorithm).I still avoid it, because yeah, once you solve that problem and avoid those thousands of lines, you are stuck. If you try make the rest of your system in Prolog, it will become a non-viable mess before you even finish it.That said, I think the main thing that Prolog is missing is easy integration with other languages. If I could define some environment in Haskell, pack it with some Prolog predicate and get a list back, I would use it all the time.	marcosdumay	13.142573	-7.295188	comment	3.0	21.0	1654539211	-12.4893465
31643806	Prolog always seemed to me like a da	Prolog always seemed to me like a database query language that can be tricked into computation.	warning26	13.138002	-7.2639813	comment	3.0	12.0	1654539293	-12.480533
31647076	So You are saying that there is real	So You are saying that there is really not much difference between prolog and lets say constraint solver written in Java (DSL on top of another language)? Because if this really true than now I understand why this language never caught on.	v-erne	13.14322	-7.2964563	comment	3.0	14.0	1654553714	-12.48171
31664590	I've never programmed a CGI-BIN in P	I've never programmed a CGI-BIN in Perl before but I must say... that code is _elegant_.Perl and early HTML were a match made in heaven. But notice how HTML and the Web has become so complicated it still looks the same platform, but it ain't. My theory is that Perl died a slow death because the Web grew on a different axis than Perl's ideal niche, which is text manipulation.At the time, HTML was just marked up text.	sph	12.423879	-6.7594485	comment	3.0	10.0	1654675559	13.105422
31665380	Having TypeScript types in runtime f	"Having TypeScript types in runtime feels definitely like magic at the beginning.
A TypeScript transformer makes them available in runtime so that libraries like the ORM, validator, or serialiser can use them to do whatever they do. You can read more about that in the introduction post: https://deepkit.io/blog/introducing-deepkit-framework"	marcjschmidt	12.341547	-6.851015	comment	3.0	10.0	1654684168	-10.437116
31667916	One thing I think TypeScript is miss	One thing I think TypeScript is missing (on the server at least) is a Laravel-like (in that it covers everything, not it's exact style) framework. I'll be interested to keep an eye on this.I wish it had serverless support but I know that's a whole other beast, I have really enjoyed the majority of my typescript on serverless work and would love a formal framework instead of what I've cobbled together.	joshstrange	12.39498	-6.7190905	comment	3.0	11.0	1654698716	-10.483806
31673443	Just merge with Typescript already a	Just merge with Typescript already and reduce the complexity of the ecosystem. If someone does not want types they can just ‘any’ everything.	polskibus	12.368942	-6.821275	comment	3.0	11.0	1654719665	-10.465207
31673669	I'm not sure this will help solve an	I'm not sure this will help solve any of our problems.Theoretically, there would be no more need for compilation tools after this change is implemented.In practice, lambdas need to be bundled, frontends still need to be bundled and running typescript in node efficiently nowadays should be as easy as `node -r @swc-node/register path/to/file.ts`So this will actually not ease the JavaScript tooling nightmare.	spion	12.391211	-6.642423	comment	3.0	15.0	1654720572	-10.436062
31675071	I don't see what the issue is.For ba	I don't see what the issue is.For backend node, you simply edit a couple of lines in the package.json to use ts-node during dev, and run tsc for shipping builds (a bit more performant than ts-node).For frontend usually you literally don't configure anything, Next.JS, CRA, or whatever already comes with typescript preconfigured if you select it. And if you do everything manually, considering you still need to setup babel, webpack etc, it makes almost no difference.It seems quite extreme modifying javascript for this considering you still would want to remove types in order to reduce bundle size, and you would still need the actual compiler because you have things such as enums, annotations and more that JS doesn't support either.	redox99	12.408687	-6.508629	comment	3.0	25.0	1654726499	-10.418716
31678340	I'm sorry, but i failed to install p	I'm sorry, but i failed to install php or composer many times before in Windows.Installing PHP in Windows is harder than building a production-level enterprise application in Typescript, sadly but it happened to me.Good job, PHP.	revskill	12.737074	-6.592634	comment	3.0	11.0	1654758339	10.289834
31701508	The results of concurrency bugs with	The results of concurrency bugs with message passing tend to be less bad than the results of concurrency bugs with semaphore/locking code; although this is often because message passing tends to not be shared memory semaphore/locking tends to be shared memory.Blocking bugs are a service issue, but incorrect locking can lead to deadlock or unprotected writes that corrupt data.Depending on what they mean by 'detect', I've found it's actually quite easy to detect blocking issues in a message passing environment (Erlang, specifically), if a process has a blocking issue, it will end up stuck waiting for a message that will never arrive; however its mailbox will be growing as new requests are added. Scanning for large mailboxes, as well as growing mailboxes is easily automated and detects the is	toast0	12.38919	-7.4732704	comment	3.0	10.0	1654915532	12.88019
31721247	Well deno is about five years old. T	Well deno is about five years old. That is to be expected, isn't it ?The timing feel similar to rust to me. It needed almost a decade to have real production ready project. Mozilla was an exception as they built it.	waatels	12.504642	-6.4396086	comment	3.0	15.0	1655095456	6.725963
31727500	Well since the only choices that exi	Well since the only choices that exist are Java, PHP or Ruby, you made the right choice!	zzzeek	12.604113	-6.6134663	comment	3.0	17.0	1655136704	10.288506
31728580	> Ruby isn't the fastest language, b	> Ruby isn't the fastest language, but it's now competitive enough that the same critics might as well throw Python under the bus while they're at it.You say that like it's a point in support of Ruby, but, yes, absolutely, Python should be thrown under that same bus. Both languages are dramatically slower than other languages that are available. My little hobby programming language with a bytecode VM I wrote myself in a single C file is faster than Ruby and Python. It would be hard to design a language that isn't easy to make faster than Ruby and Python.They both pay an incredible runtime performance cost for their deep support for dynamic runtime metaprogramming and mutability. If you don't want those features, I don't think it makes sense to use those languages.	munificent	12.449369	-7.0327225	comment	3.0	15.0	1655141035	12.358016
31746689	"Very interesting writeup.
Distribute"	"Very interesting writeup.
Distributed systems problem solving is always a very interesting process. It very frequently uncovers areas ripe for instrumentation improvement.The Erlang Ecosystem seemed very mature and iterated. It almost seemed like the ""rails of distributed system"" with things like Mnesia.The one downside to that seemed to be that while I was working on grokking the system, the limits and observability of some of these built-in solutions was not so clear. What happens when a mailbox exceeds it's limit? Does the data get dropped? Or, how to recover from a network segmentation? These proved somewhat challenging to reproduce and troubleshoot (as distributed problems can be).There are answers for all of these interesting scenarios, but in some cases it almost would have been sim"	banashark	12.571775	-7.402952	comment	3.0	14.0	1655244782	1.5169498
31749238	I can't help but wonder how much of 	I can't help but wonder how much of your productivity boost was due to leaving Java vs. due to using Typescript. Java is just about the most unjustifiably verbose language I can think of off the top of my head.	dataflow	12.338306	-6.790633	comment	3.0	21.0	1655268593	-10.412497
31765479	JIT/GPU accelerated deep learning fo	JIT/GPU accelerated deep learning for Elixir with Axon v0.1	ahamez	12.6869545	-7.4562693	story	3.0	94.0	1655383965	12.951175
14035202	If I'm consuming from an API instead	"If I'm consuming from an API instead of interacting with Postgres, does it make sense to use Django instead of something without ""models"" ?"	swah	12.874516	-6.4597287	comment	3.0	20.0	1491327101	10.0010805
14034924	Rails uses an asset pipeline package	Rails uses an asset pipeline package called sprockets. You throw everything in a special directory and it wraps it all up and packages it nicely for you. This also gives you SASS and coffee compilation by default.Sprockets handles minification and cache invalidation for you.If you don't mind the opinionated approach to your javascript and stylesheets, it works fine. If you just need to sprinkle in some javascript on top of your site, it's fantastic. If you intend for your app to be javascript heavy, a lot of people rip out sprockets altogether and fallback to webpack to handle asset compilation (and I believe the newer Rails version is integrating webpack to play nicer with the rest of the framework)I can speak from personal experience that Sprockets is a PITA if you want to use npm.	debaserab2	12.760061	-6.7877064	comment	3.0	10.0	1491325549	12.334714
14036599	You know, when I look at their state	"You know, when I look at their statement about this being an LTS, it seems (to my understanding) that they have a slightly different definition of what support means in this context.""This version has been designated as a long-term support (LTS) release, which means that security and data loss fixes will be applied for at least the next three years. It will also receive fixes for crashing bugs, major functionality bugs in newly-introduced features, and regressions from older versions of Django for the next eight months until December 2017""I expect that something like a ""crashing bug"" would be something that would be supported in an LTS, but here they're specifically excluding such bugs from the full three year duration.  If stability were a priority, I'm not sure I would look at this any di"	sbuttgereit	12.797193	-6.55587	comment	3.0	12.0	1491335951	10.06904
14036859	Does Django have an equivalent for L	Does Django have an equivalent for Laravel's Homestead?	wenbert	12.834682	-6.553889	comment	3.0	16.0	1491337683	-10.383954
14037460	Ask HW: What is the state (for you) 	Ask HW: What is the state (for you) of CoffeeScript?	usernamebias	12.417652	-6.5843196	story	3.0	4.0	1491341944	-10.580621
14042663	From ROS prototype to production on 	From ROS prototype to production on Ubuntu Core	kyrofa	12.686101	-6.847179	story	3.0	63.0	1491405139	12.218765
14047334	what about this?https://github.com/Z	what about this?https://github.com/Z3Prover/z3Is it comparable with prolog or just a subset of prolog?	est	13.135585	-7.3028903	comment	3.0	12.0	1491443962	-12.486555
14047937	Can anyone give examples of the kind	"Can anyone give examples of the kinds of problems prolog is ideally suited to? I took a course on it at university. It looked interesting but I didn't really ""get it"". It might be worth another look now I have a bit more experience under my belt. I've got a lingering feeling it would solve a certain kind of problem very easily."	lacampbell	13.155521	-7.2960825	comment	3.0	15.0	1491453074	-12.49503
14063758	Erlang's Internal Data Representatio	Erlang's Internal Data Representation (2016)	weatherlight	12.5688715	-7.5091157	story	3.0	130.0	1491601710	12.924875
14064181	Flow’s interesting, unfortunately it	Flow’s interesting, unfortunately it requires more invasive changes to your code than just prop types. For example, if I remember correctly, you need a declaration for a class component’s state.	lfischer	12.509935	-6.6506224	comment	3.0	10.0	1491606982	-10.465396
14065030	Happy to see propTypes getting shelv	Happy to see propTypes getting shelved.  Too many people stubbornly use propTypes even in Typescript projects.  Hopefully this change will usher in the final stamping out of that.	xamuel	12.367746	-6.813961	comment	3.0	10.0	1491620170	-10.437793
14070264	He makes the valid point that perfor	He makes the valid point that performance for each individual user, like page load time, does matter.  Just that building for an audience size you don't yet have is mostly wasted time.Seems reasonable.  I wonder, though, if PHP feels like an anchor to the average Facebook developer.  I realize they architected around it, but it must have some effect on recruiting, retention, etc.  I use PHP myself, and don't hate it, but the stigma is there.	tyingq	12.778939	-6.5836034	comment	3.0	20.0	1491708467	2.841209
14070358	>Everything has flawsFalse equivalen	>Everything has flawsFalse equivalence. PHP has many, many more flaws to a much deeper and more serious level than any other mainstream programming language. It's insecure, buggy, full of broken behaviour for legacy systems, slow and easy to misuse. Its standard library is inconsistent, hard to learn, easy to misuse, full of legacy behaviour and slow.>but PHP is a reasonable choice for many problems.PHP is an unreasonable choice for every problem unless you have already solved your problem with PHP. I'm not saying that Facebook should rewrite in something else, obviously, but nobody should be starting new work in PHP. Nobody.>Python pip is crap compared to composer for example.There's nothing at all wrong with it.>While my favorite language is Elixir I mostly do Node and Python at work can	milesrout	12.742231	-6.642518	comment	3.0	11.0	1491710377	10.303647
14071187	I built a service (~10mm users at pe	I built a service (~10mm users at peak) which was designed from the ground up to scale, around 2002. When the numbers did grow we just sat back and watched it pretty much.Even given this, I completely agree with you. That's why I now develop in ruby. I'll take developer productivity over performance any day.It's the old saying - 'nice problem to have'.	qume	12.709887	-6.956138	comment	3.0	32.0	1491727388	12.361516
14071388	WhiteStorm TypeScript Boilerplate – 	WhiteStorm TypeScript Boilerplate – A starter kit for crafting 3D applications	alex2401	12.354379	-6.783404	story	3.0	49.0	1491731205	-10.445999
14080967	Worked on PHP on-and-off for more th	Worked on PHP on-and-off for more than 15 years. Jobs in PHP can sometimes pay well, but the PHP labor market is fairly saturated, so you're more likely getting underpaid than well-paid.Here are some of the reasons I don't use PHP anymore:1. Code bases often written by near-amateurs, so almost always a headache to work on2. Terrible type system (and unpredictable type coercion) mean that the code has to be written with great discipline or it's going to be buggy3. Inconsistent signatures of built-in classes/methods/functions means that it's almost impossible to remember anything, so you need to consult documentation (or inline completion) constantly4. Very generally, a community that likes magic (see: Laravel) -- ease/speed is prioritized over correctness/explicitness, which means maintaini	smt88	12.78595	-6.630822	comment	3.0	13.0	1491847127	10.350462
14081225	I personally prefer whatever languag	I personally prefer whatever language/framework gets value out the door quickest on the side of handling HTTP requests (e.g. rails or laravel for the front-facing items) and something like Golang for plumbing or work that requires speed/CPU optimization - queue workers, file manipulation, data streaming, whatever.Golang (and NodeJS) both feel really kludgy to me when getting into things like handling form submissions (validating input, redirecting with error/success messages, and all those tedious things that the popular frameworks abstract away the best they can).	fideloper	12.470676	-6.5062504	comment	3.0	17.0	1491848921	10.120681
14084265	fpm is being dropped now that php 7 	fpm is being dropped now that php 7 contains many of the improvements that made fpm popular.  php_mod+apache with .htaccess turned off is the faster stack.  Put a nginx server to server static content in front and that's the fastest stack going forward	wolco	12.729728	-6.609731	comment	3.0	11.0	1491875724	10.311406
14090545	A recommended read voicing opinions 	"A recommended read voicing opinions of renowned practitioners and theoreticians in logic programming.According to one speaker/panelist, ""Prolog is almost unknown in the U.S., outside of academic circles"". Is this really the case?Also of practical interest (to me at least):> ""Warren asks, “In a multi-language, multi-software ecosystem, what are the roles of logic programming languages?""I will admit I'm not a fan of using Prolog for general-purpose programming. But Jan Wielemaker (of SWI Prolog fame) argues otherwise, and I think it shows in SWI Prolog's somewhat procedural library collection. For example, SWI Prolog has primitives for explicit multi-threading."	tannhaeuser	13.150314	-7.2975945	comment	3.0	14.0	1491932727	-12.497021
14092405	Typescript's single biggest win for 	Typescript's single biggest win for me is the ability to provide type definitions for my models. This is where the vast majority of my JS bugs come from -- somebody trying to access a nonexistent property of some object (or, if it does exist, incorrectly assuming the type) which was serialized from JSON. Better yet, if you write your back-end in Node you can use the same models in your rest endpoint. It's a huge boost to both maintainability and developer productivity.However, my biggest frustration with Typescript is the general unreliability of @types. The odds that a given set of typings are complete, correct, and up-to-date are basically nil -- even for some relatively popular projects. Sad to say I've become an expert in Typescript's crazy module augmentation nonsense. Hopefully more 	ng12	12.346919	-6.8444176	comment	3.0	14.0	1491944506	-10.447997
14093338	I do not particularly like TypeScrip	"I do not particularly like TypeScript because:- It adds complexity and unnecessary dependencies to the project and this makes it more brittle and more difficult to set up and get running (I often run into issues with it).
- Slows down your debug cycle (it typically takes at least 15 seconds to compile for a small project) so you can't test your assumptions quickly as you would with plain JS - You have to wait all the time and try not to get distracted.
- For an experienced JS developer like me, the vast majority of errors raised by the compiler are pedantic and not related to any real logical flaws - I spend a lot of time catering to the fussiness of the compiler instead of thinking purely about logic.
- Working with legacy JS libraries is a pain.I will admit though that being able to look"	jondubois	12.371282	-6.8042183	comment	3.0	10.0	1491952291	-10.43868
14093544	For me, I like how it's designed to 	For me, I like how it's designed to complement the language, not to replace it with a (very closely related) cousin.The conversion from JS-with-flow-types to plain JS is just a matter of stripping out that type information, which I feel is conceptually simpler than TypeScript's approach.	muglug	12.431464	-6.730653	comment	3.0	47.0	1491954702	-10.500804
14093581	I 've used both. Flow wins hands dow	"I 've used both. Flow wins hands down:(1) It is less intrusive. Flow's type system is built on annotations which are simply stripped away at runtime (as opposed to writing in another - albeit similar - language that gets transpiled to JS. Sure the transformations are always ""file-local"" as TS folks say but still it is another, totally unecessary level of abstraction and transpilation.(2) Flow's type system is at least equally and quite possibly much more expressive and nuanced than TS.(3) Flow annotations can be applied in a much more piece-meal way than TS.(4) zero issues integrating with 3rd party libraries (because of 1) - and that includes the ability to type-check said 3rd party libraries (which is a breeze with flow-typed)(5) To take advantage of TS you have to write JS code in the """	MarcusBrutus	12.440754	-6.696543	comment	3.0	21.0	1491954999	-10.445183
14093722	But Flow is actually a superset of J	But Flow is actually a superset of JS -- without the types your code is perfectly valid JS, which is what actually happens via a simple Babel transform. Typescript is both a transpiler and a language, it's much further from pure JS. The actual advantage of this is you can drop Flow in any Babel project. With Typescript you need additional tooling.	ng12	12.435797	-6.736202	comment	3.0	29.0	1491956450	-10.4647
14093963	"""without the types your code is perf"	"""without the types your code is perfectly valid JS, which is what actually happens via a simple Babel transform""This is literally exactly the same amount of true for TypeScript as it is for Flow"	RyanCavanaugh	12.406526	-6.7318816	comment	3.0	10.0	1491959057	-10.473117
14094022	I have not used Flow, but there's a 	I have not used Flow, but there's a few misconceptions about TypeScript in the above comment.- There's an implication that Flow is vastly different than TypeScript because its annotations are stripped away - that's how TypeScript works too.- There's an implication that TypeScript has some sort of unusual syntax - Modern JavaScript (ES6+) and TypeScript code is identical (except for the addition of type annotations where desired).- Flow may have a nuanced and expressive type system - I don't know - but TypeScript attempts to accurately model the type system of JavaScript.- TypeScript can be used in a very loose mode where it type-checks plain .js files with no annotations at all, all the way up to a very strict mode where it must know the type of everything (which you can set to `any` on a 	nycdotnet	12.435645	-6.746083	comment	3.0	18.0	1491959849	-10.456512
14093398	Please tell what you like better.  I	Please tell what you like better.  I was surprised when even the flow lead at FB said it doesn't really provide any advantage over TS.	WhitneyLand	12.426431	-6.6982384	comment	3.0	50.0	1491952927	-10.480537
14095826	Typescript is a truly great project,	Typescript is a truly great project, I'm not sure many people understand the amount of work that has gone into this compiler.They have the crazy constraint of being 100% compatible with Javascript, which is a bit broken by design and yet they managed to make it so much better to work with TS than with JS.After trying Flow numerous times, I came to the conclusion it simply can't compete with the power of the team Microsoft put together. Even their alpha versions are stable enough to be used in production.Some advices:- Always enable --noImplicitAny and --strictNullChecks. Without these flags, the type system is barely better than using JS.- Use a noAny tslint rule. disable it on a case by case basis, only in util code. Most of the time, any is not necessary, often you can use {} or Object i	boubiyeah	12.348098	-6.8398113	comment	3.0	16.0	1491985821	-10.470355
14096547	"Here are some examples:
TS: https://"	"Here are some examples:
TS: https://www.typescriptlang.org/play/#src=type%20TA%20%3D%20%...
Flow: https://flow.org/try/#0PQKgBAAgZgNg9gdzCYAoVAXAngBwKZgCSAgmA...With Ty"	vanwalj	12.413254	-6.738632	comment	3.0	13.0	1491995507	-10.441925
14106479	Have you tried Elm? Id love to know 	Have you tried Elm? Id love to know your experiences.	pryelluw	13.002996	-7.6873403	comment	3.0	13.0	1492088956	-12.76606
14106955	Types are pretend in TypeScript and 	Types are pretend in TypeScript and Flow the same way that types are pretend in any other typed language. Types are used at compile-time and not runtime in both cases.	rubiquity	12.415184	-6.777794	comment	3.0	13.0	1492092176	-10.47312
14108002	I have a project that uses Flow. I'v	I have a project that uses Flow. I've had no complaints with it so far, but I've been craving the IDE support of TypeScript. What's the difference between the type system of TypeScript and Flow? Would it be worthwhile to switch?Part of me wants to wait out the Flow team come up with better IntelliSense support. The `flow ide` command in the release 0.42 is a big step in the right direction. But it seems like TypeScript already has this, and if the delta between the two type systems is small, I might just go ahead and switch.	picardo	12.462102	-6.701988	comment	3.0	10.0	1492098482	-10.489778
14108623	Because eventually in a couple of ye	Because eventually in a couple of years you can take your ES7 code and remove the transpiration and it will all work seamlessly. Not so much with Typescript.	Achshar	12.374161	-6.744989	comment	3.0	10.0	1492101855	-10.469729
14128378	Does anyone still use CoffeeScript? 	Does anyone still use CoffeeScript? I guess legacy projects, but new projects can use es6 + Babel or Typescript and get most (if not all?) of CoffeeScript's functionality.	kevinmannix	12.409643	-6.5636864	comment	3.0	11.0	1492387843	-10.526356
14130408	The Cowboy webserver is fairly easy 	"The Cowboy webserver is fairly easy to get started with and I really recommend checking it out, since a web server feels like a ""very Erlang problem"" to me.To answer your question though, I got started by playing with TCP and building a basic chat server. I spawned a new Erlang process for each user, used Erlang's internal messaging to share messages between processes, and then passed those messages along to TCP to the user.A basic rule of thumb on whether or not it's a good Erlang problem is seeing if you can visualize the problem in terms of a bunch of tiny, self contained things (like cells), and you don't want one of those cells failing to have any risk of breaking anything else."	tombert	12.620793	-7.460412	comment	3.0	15.0	1492431462	12.927617
14130881	Do you have any pointers to the reco	Do you have any pointers to the recommended Right Way to do modern PHP? I'd be interested to explore it; I have a number of places where I want to add tiny bits of interactivity to otherwise static web pages, and this totally seems to be what PHP does best.	david-given	12.765046	-6.6254735	comment	3.0	10.0	1492437523	10.331023
14131059	I think that's unfair, the reason PH	"I think that's unfair, the reason PHP has a bad reputation is not because of silly hipsters. It's because for a long time it was a terribly designed language. It was a laughing stock for a good reason. The whole ""hobby-grade templating language turned general purpose with complete disregard to how programing languages are designed"" thing.Now I'm willing to believe that it's improved a lot since then, but it's got a very bad reputation to overcome, and it's deserved. The languages seems headed in the right direction at least, maybe in a few years we'll forget what PHP used to be."	simias	12.770739	-6.6860666	comment	3.0	12.0	1492439116	10.332799
14146684	FB employs one of the world's best C	FB employs one of the world's best C++ developers (Andrei Alexandrescu) to write custom string implementations and maintain/extend their homegrown PHP VM. Their development practices would be completely unsustainable for any company that has anything resembling economic accountability.	_pmf_	12.776167	-6.63076	comment	3.0	10.0	1492596740	3.088899
14148893	These days Ruby on Rails is fairly o	These days Ruby on Rails is fairly orderly as well.	horsecaptin	12.771519	-6.9104576	comment	3.0	18.0	1492618596	12.338218
14177685	"So basically another elixir?
I'm cur"	"So basically another elixir?
I'm curious why Ruby? and why with Go?"	hamidr	12.673728	-7.349223	comment	3.0	16.0	1492946690	12.85162
14177867	Quite right.  And there's nothing wr	Quite right.  And there's nothing wrong with that!But it's good to know if the author's main issue with Crystal is that it <lacks important feature X> or if it's that it's not written in Go, which is a barrier for him to contribute.  Both are very valid reasons to start a new project, but it's good info to have.  :)	Lazare	12.625495	-7.266363	comment	3.0	10.0	1492949968	10.369685
14178954	The solution is called React Native.	The solution is called React Native.- Single file app: Check- Super fast rebuild: Check- Dynamic language (high reusability and one-liners): Check (Use ClojureScript to take this even further)	vikeri	12.718912	-7.672531	comment	3.0	24.0	1492966438	-11.175608
14189863	> Erlang lives mostly in text termin	> Erlang lives mostly in text terminals.People (outside of Ericsson) just haven't bothered to take much advantage of Erlang's strengths. Erlang speaks network wire protocols very efficiently, so if you want graphical Erlang sessions, you just need to write Erlang applications that act as e.g. X11 clients. Which is what things like Erlang's own Observer application does, complete with the ability to use the graphics toolkit Tk. (Or, if you like, you could expose an HTTP server serving a web-app with live updates over a websocket, like https://github.com/shinyscorpion/wobserver. Or an VNC/RDP server. It's really all equivalent in the end.)Unlike Smalltalk where the graphical capabilities are part of the local console framebuffer, Erlang's approach allows you to interact with a running Erlang	derefr	12.5406685	-7.499464	comment	3.0	10.0	1493081256	12.905785
14192748	waits patiently for elixir jobs	waits patiently for elixir jobs	tmat	12.699522	-7.4592896	comment	3.0	24.0	1493122818	12.947543
14204533	I guess that's one of the advantages	I guess that's one of the advantages of interpreted languages over compiled languages.I spend no time waiting for compilation to happen (ruby). I used to spend a lot in my previous job (C#), where the time was utilised (wasted) in going through blogs/articles.	shubh2336	12.4438	-7.021798	comment	3.0	13.0	1493224443	12.344829
14221092	This is a very similar idea to Gary 	This is a very similar idea to Gary Bernhardt's: Functional Core, Functional Core, Imperative Shell: https://www.destroyallsoftware.com/screencasts/catalog/funct....I prefer Gary's explanation of it because he jumps right into the meat of the problem and shows code that models this architecture. The video doesn't require you to know Ruby to understand what he is saying, just as long as you know some basic testing phrases; Mocking, Stubbing, Etc, you should be able to follow along.	RubenSandwich	12.481855	-7.116035	comment	3.0	10.0	1493398857	12.37429
14231691	While I haven't used Erlang, I have 	While I haven't used Erlang, I have used other systems with nice messaging systems (PX4 autopilot and ROS) so I will try:1) Data is passed between threads/processes using a message bus (essentially, a queue). This means, no need to synchronize data access, as every subscriber gets it's own message copy.2) Suddenly, you need access to certain data from another module. If the program was architected as regular class hierarchy, you would somehow need to pass the reference to that required class instance or use a global function call. If there is a message bus where the required class is already publishing messages, you can simply subscribe to data from the required module and it is delivered via message bus.3) You can replace modules easily. The only interface to other modules is via message 	fest	12.523064	-7.487108	comment	3.0	10.0	1493563075	12.90188
14237865	PHP dev as a president? No way!	PHP dev as a president? No way!	lostmsu	12.770761	-6.6275735	comment	3.0	12.0	1493650041	10.336337
14244066	I think you are just using a differe	"I think you are just using a different definition of brute force than the post is using.  It doesn't try all permutations of the digits, but it does do a search over the tree to find the solutions.Now, to your point, this is really the only way you can solve sudoku.  There is an odd belief that you can make an algorithm that ""never guesses.""  And folks think that that would be the definition of a non-brute force algorithm.  In reality, you either have a solver that is ready to backtrack, or you have one that can't solve all puzzles."	taeric	13.452083	-7.409543	comment	3.0	28.0	1493701276	15.081684
14260655	Sourcegraph CEO here. We don't suppo	Sourcegraph CEO here. We don't support Ruby yet, unfortunately. It officially works for Go and Java, and we have alpha/beta support for a couple more languages enabled too (TypeScript and JavaScript).As you can imagine, Ruby code intelligence (type inference, etc.) is super tough, and there are maybe 5-10 people in the world who could build it right now. We'd love to find and sponsor a Ruby expert to add Ruby support to Sourcegraph. If you know of anybody, please send them my way (sqs@sourcegraph.com).	sqs	12.605551	-7.057916	comment	3.0	13.0	1493849334	12.380605
14273645	On a tangent, my favorite example of	On a tangent, my favorite example of how php is a giant  bag of rando functions is easter_date(). This ships with the language core.	encoderer	12.740552	-6.6585135	comment	3.0	14.0	1493994279	10.312672
14276300	#1 reason the article doesn't mentio	#1 reason the article doesn't mention: It's incredibly cheap to host PHP. Hosting companies push WordPress and other PHP-based hosting heavily and make it super easy for anyone to get a live site going with PHP.Last time I launched a node app, it took me a full day of messing about in AWS. Last time I launched a PHP app, it took me less than a half hour at Siteground.	claudiulodro	12.788732	-6.5513906	comment	3.0	26.0	1494013770	10.257685
14276690	PHP uses an imperative programming m	PHP uses an imperative programming model and has a very clear URL->source file mapping. This means you can look at the URL, find the source file, start at the top and trace your way to the problem.Node (and Rails, and Java and lots of others) use a declarative router. The app boots. Shit happens. Routes exist. Middleware is involved. There's no way to know what code is implicated in a given URL.If you're a pro and you can afford to spend a year or so learning framework internals while not getting much done, you develop a sixth sense for where in the codebase an error is likely to be, but you need to spend many weeks and months scratching your head to get there.PHP is much more beginner friendly in this way.	erikpukinskis	12.744509	-6.600909	comment	3.0	22.0	1494016941	10.280239
14276984	When's the last time PHP has been us	"When's the last time PHP has been used in this way?
Don't people use frameworks these days such as symfony, silex and laravel etc? And then point the web server to the entry point like with any other language?"	jayflux	12.750293	-6.606121	comment	3.0	19.0	1494019952	10.336621
14289035	When Ruby on Rails first hit the gro	When Ruby on Rails first hit the ground, I thought that I would try and learn it and get to grips with it.  But even with 20+ years of programming background to my name at the time, I really couldn't feel comfortable using it, as much as I wanted to learn Ruby and a corresponding framework.Then I tried playing with Sinatra, and completely fell in love with it.  Made perfect sense to me, and seemed to fit my thinking and my concept of a web project a lot better.  Now I exclusively build my web apps using it.  Well, actually I use Pardrino [0], which is the framework built upon Sinatra.  I wonder how soon they will have the Sinatra 2.0 core working with Padrino?!?[1] - http://www.padrinorb.com	cyberferret	12.736328	-6.9501624	comment	3.0	10.0	1494213984	12.341906
14291107	Similar experiences.  Worked on a pr	"Similar experiences.  Worked on a project, and a 'lead' guy left with .. a few weeks of a node/koa codebase in place that only he really knew.  Between the rest of us we had loads of C#, PHP and Java experience (multiples years each over 3 people).""Let's rebuild something based on what the bulk of us already know,"" I suggested.  (Keep in mind what we had was a few weeks of prototype code that was not in production.)""No, I really want to learn more node,"" was the only other input, and that 'won' the decision.  18 months later... ""yeah, koa isn't really a goof fit for our use cases""."	mgkimsal	12.421862	-6.5086594	comment	3.0	12.0	1494248553	7.132343
14294633	I want to like and use Elm. However,	"I want to like and use Elm. However, unless things have changed recently, it seems the author hasn't learned to delegate. They also like to really get things right, which takes forever.So it's really good at what it does, but for everything else, it's just incomplete. For instance, Elm seems like a natural fit for an offline-first ServiceWorker design. But I don't think it really covers much of the just-outside-of-core-Javascript browser APIs. You're likely to run into ""I have some really interesting ideas about how to cover that a super elegant way, but I'm concentrating on rewriting the $WHATEVER right now"" newsgroup posts, but that's it… :-("	zellyn	12.986033	-7.6735144	comment	3.0	14.0	1494270773	-12.754365
14295328	Yeah.My top 3 complaints:1) The craz	Yeah.My top 3 complaints:1) The crazy boilerplate, the Elm architecture forces you to store all your app state in a single atom. In my experience, this doesn't scale well and is bloody annoying (see, even the redux author say you should never store everything in the single atom/store); Also, when should state be cleaned up? When the component is shown again, but then you have stale state in the meantime; or when the component is removed? before or after it's being transitioned out? (you don't want to see a flash of empty data)2) The snail pace at which Elm evolves. I will have delivered 3 or 4 apps for my clients by the time the single Elm maintainer added 5% of the WEB API as native Elm modules. By the time he's done, new WEB APIs will have to be covered. It's never going to end. That mea	boubiyeah	12.979497	-7.62771	comment	3.0	12.0	1494275545	-12.738387
14297503	IMO ruby is the worst because its so	IMO ruby is the worst because its so easy, and often times encouraged, to write layers of useless tests that ultimately give only a false sense of security. I recently re-did the Michael Hartl tutorial to catch up with Rails5 and it gives examples where you test proper template rendering. I love that book but I'd rather shoot myself in the foot then spend dev time writing tests to check if the right html title attribute was rendered for the page...	ben_jones	12.652962	-6.9739394	comment	3.0	17.0	1494300103	12.373183
14300763	Lasp: a little further down the Erla	Lasp: a little further down the Erlang rabbithole	unbalancedparen	12.564022	-7.526191	story	3.0	152.0	1494343284	-7.222086
14318290	Should Flow and TypeScript combine f	Should Flow and TypeScript combine forces?	StokeMasterJack	12.3587	-6.786873	story	3.0	3.0	1494526968	-10.419546
14347560	How much of this is built into vario	How much of this is built into various frameworks such as Rails, Django, EmberJS (for frontend) etc?	horsecaptin	12.725971	-6.4982805	comment	3.0	11.0	1494912370	10.033865
14351245	Mass market support questions:PHP Su	"Mass market support questions:PHP Support?
Does it support views and triggers like MySQL/PostgreSQL?"	ethanpil	12.773731	-6.5856285	comment	3.0	14.0	1494954525	10.26462
14362035	"> Avoiding ""fat models"" is another p"	"> Avoiding ""fat models"" is another place where it feels more like opinion than anything to do with performance or good designSo in the Java world, the general pattern is that:Views:  - Accept and sanitize query parameters

  - Call call one or more service methods.

  - Catch errors and return an appropriate error response

  - Render a JSON response based on the results of the service methods if nothing goes wrong.

Service methods:  - Perform business logic

  - Manage persistence

  - Bubble up errors

The nice thing about this architecture is that each piece of the codebase tells a complete story about what it's doing. That is from looking at the view you can see what parameters it accepts, how they are sanitized, what service method it calls, each of the errors that can be returned, a"	Alex3917	12.436592	-6.571109	comment	3.0	14.0	1495049617	8.809347
14377980	In the implementation of Ruby that I	In the implementation of Ruby that I work on, TruffleRuby, we've been exploring lazy parsing, where the parser will find a method but not fully parse it until the method is called for the first time. I wonder if there's any other modifications you could make to the VM itself to improve startup time.	chrisseaton	12.6039915	-7.0552807	comment	3.0	18.0	1495216787	-8.441518
14378119	This is awesome, and I'd love to use	This is awesome, and I'd love to use it for the command-line dev tools that I write. Unfortunately this gem requires Ruby 2.3+, but macOS built-in Ruby, which is the Ruby we target, is only 2.0.0.Does anyone know of a good solution for prebuilt, relocatable Rubies on macOS that I could easily bundle with my tool? I'm reluctant to use Homebrew or another package manager like rbenv, where I'd have to implement a non-trivial bootstrap process. Phusion's travelling-ruby project would be perfect, but it's unmaintained.I just want my CLI to boot in 0.05s without needing to change languages. Love Ruby, but getting decent perf takes a bit of effort.	jitl	12.553647	-6.98373	comment	3.0	15.0	1495217788	12.368198
14387500	A rails veteran that still heavily r	A rails veteran that still heavily relies on ActiveRecord's callbacks sounds a bit weird to me...	apeacox	12.892737	-6.7299013	comment	3.0	12.0	1495377636	-4.2811003
14387592	Is it merely coincidence that every 	Is it merely coincidence that every time I hear about Phoenix it's from the Rails community? Is it popular with people who haven't come to it from Rails?	dcwca	12.802746	-7.0870066	comment	3.0	11.0	1495378764	12.678416
14387960	No it can't. It's technically imposs	No it can't. It's technically impossible for a Rails app to utilize all cpu cores because of the GIL. You're confusing two different things: the web server and the actual Ruby app. The rails app is still limited by the GIL and, therefore, runs within a single process.	rlander	12.650775	-6.9678154	comment	3.0	17.0	1495384226	12.425075
14391782	"I don't appreciate the ""Elixir is gr"	"I don't appreciate the ""Elixir is growing"" commentary in the title. That's not justified because a person wrote a program in it."	kbd	12.708451	-7.464495	comment	3.0	12.0	1495439908	-13.942537
14392170	A lot of Elixir Q&A actually happens	A lot of Elixir Q&A actually happens on https://elixirforum.com/ and the slack channel https://elixir-lang.slack.com/ . So stackoverflow trends may not be the best thing to judge this.	minhajuddin	12.692726	-7.450107	comment	3.0	12.0	1495445729	12.9364805
14392868	I prefer LFE (Lisp Flavored Erlang) 	I prefer LFE (Lisp Flavored Erlang) because I prefer Lisp syntax to the Ruby-like Elixir syntax. LFE compiles down to core Erlang, while Elixir compiles down to vanilla Erlang. True macros can be done in LFE, but as I understand it, macros are done after parsing in Elixir. LFE was created by one of Erlang's co-creators.	eggy	12.618776	-7.4853086	comment	3.0	10.0	1495454846	12.870941
14419945	Rails was definitely responsible for	Rails was definitely responsible for Ruby going mainstream, without it, it would slide below Python.More than that: I think that combination of TextMate and Rails brought a huge number of web devs from Windows to MacOS as well. I remember around maybe 2005/6 people were switching from Intel based Windows to, at that time, PowerPC based Macs (transition to Intel was about to happen) just to use TextMate and Rails - image how huge change it was for developers - and they did it and liked it. Good times.	mirekrusin	12.622746	-7.008033	comment	3.0	11.0	1495744433	12.374469
14441065	I think you're right.The promise of 	"I think you're right.The promise of Prolog was that you'd be able to just define the task requirements, then write the requirements in Prolog and magic would happen.  But even the most experienced Prolog coders I know don't really think in Prolog.  When faced with a coding task, they inevitably first (mentally) figure out the problem in an imperative form, perhaps with some recursion, and then they they ask themselves ""okay, how do I convert that to logic and pattern-matching?""If you're going to go through that process, then Prolog provides no value: it's just an extra step, and you might as well code in C (okay, Lisp).I fear that Haskell will turn out the same way.  After all monads are just monoids in the category of endofunctors, right?"	SeanLuke	13.143826	-7.2944746	comment	3.0	10.0	1496087613	-12.4868
14441204	> For me, the big problem with Prolo	> For me, the big problem with Prolog (and the whole concept of declarative languages) is that the intended benefit requires an unreasonably (or impossibly?) smart compiler.I'd say... sufficiently smart. We've been writing SQL for decades without such complaints and it works rather well in practice. Sometimes you have to introspect your queries and interact with the underlying interpreter to understand the performance constraints but it is much better than the alternative! Imagine having to write every query as a procedure... what a headache and the duplication!Although learning to write well-performing queries does, I think, take some understanding of the underlying theory driving relational databases and SQL... which can be true for Prolog as well.I'm not really sure why Prolog isn't mor	agentultra	13.146625	-7.2679048	comment	3.0	13.0	1496089227	-12.482741
14441793	While I understand the move to es6 o	While I understand the move to es6 or whatever we're calling it now, a part of me really misses coffeescript. I found it to be very elegant	vlunkr	12.434411	-6.549827	comment	3.0	13.0	1496096287	-10.486787
14459061	Perl always reminds me of this guy :	Perl always reminds me of this guy :) https://media.ccc.de/v/32c3-7130-the_perl_jam_2	ibn-alfatal	12.334277	-7.0216513	comment	3.0	15.0	1496311312	13.183882
14470496	Prolog-Based Reasoning Layer for Cou	Prolog-Based Reasoning Layer for Counter-Strike Agents (2012) [pdf]	nickpsecurity	13.138219	-7.299195	story	3.0	91.0	1496416603	-12.477724
14473346	Does Typescript still require you to	Does Typescript still require you to have definitions for every library in order to use the library? One thing I love about Flow is that it doesn't have that requirement. You can start using a new library, and later on if you find that type safety in that library's exports would be useful, then you can look for or write definitions then. You're not blocked from adopting the library. I find for many of my dependencies that I use in a few spots it's not really important for me to have definitions for.	AgentME	12.445924	-6.724027	comment	3.0	13.0	1496437996	-10.492049
14479808	Hey, the benchmark game got a new we	Hey, the benchmark game got a new website (at some point in the several years since I looked at it last)! Almost simplistic, but nice to read.As someone that works predominantly in a language long considered passé (Perl), I always kinda relish seeing that it is still faster than Python and Ruby for many problems. As Python and Ruby have gotten faster, I'd sort of assumed they were both notably and clearly faster than Perl, by now, but that's not the case though the difference is now quite small and probably debatable.	SwellJoe	12.429022	-6.974353	comment	3.0	21.0	1496548394	12.342206
14508942	To add to that point, in my experien	To add to that point, in my experience the laissez faire optimize-later attitude is often pursued under the notion that you'll just optimize that hot code path or that single function and everything will be glorious. The best of both worlds. In reality such implementations are often death by thousands of cuts, where endemic poor performance makes it impossible to fix without enormous re-engineering. Where users get delighted when a competitor's product is just a little bit faster.This applies at virtually every level. From your web page being just a little bit faster than a competitor, to the sense of fluidity of an app, to being able to host a profitable service on a reasonable set of hardware (we've watched countless Ruby services fold when a trivial system serving a small number of user	endorphone	12.695162	-6.9683237	comment	3.0	17.0	1496861814	12.358812
14513557	I've gotten burned by this in my emb	I've gotten burned by this in my ember projects a few times (admittedly some of it was my fault for not consistently updating all the packages in my package.json), so I just stick to LTS releases (which is still node 6) with all these platforms and frameworks now. Don't have time to keep up with all these changes so often, and I suspect others are in the same boat.	atonse	13.113956	-6.443548	comment	3.0	10.0	1496923982	-15.515107
14541257	Can someone compare Flow and TS? Las	Can someone compare Flow and TS? Last time I worked with Flow I had to constantly restart the server to get fresh typechecks. Is that still the case? Other pros and cons?	bauerd	12.445388	-6.6960263	comment	3.0	12.0	1497302668	-10.471573
14549639	Erlang the language provides single-	Erlang the language provides single-threaded processes that do not have shared memory.The BEAM VM hosts Erlang processes in a multi-threaded single process. This is an implementation detail/performance optimization.The Erlang processes don't care if they are hosted in a single OS process or multiple processes or even multiple host machines.  Erlang-the-platform simplifies application code by providing a single-threaded, share-nothing, async/non-blocking code model. (Edit: Yes, dfox, it's probably more accurate to say, Erlang provides a synchronous, blocking code model, since that's what the Erlang programmer sees)	kbutler	12.469597	-7.489748	comment	3.0	11.0	1497397439	12.87584
14553970	Ruby's 1.8 to 1.9 transition seemed 	Ruby's 1.8 to 1.9 transition seemed to go much smoother - I'm curious what the difference is. Just down to what is essentially better source comparability I guess.	matthewmacleod	12.610612	-7.0255084	comment	3.0	11.0	1497458945	12.341191
14563575	I'm Ragheed Al-midani, one of uMOOC'	I'm Ragheed Al-midani, one of uMOOC's two co-founders. I met my co-founder, Dwayne Kennemore, when we were both in CS50 at Harvard Extension School. uMOOC was his idea (he will probably share his inspiration here shortly), and I offered to help. The first prototype of uMOOC was built as our final project for CS50, but the scope of the project has grown tremendously since then.If you're wondering what our stack looks like, we're using (among other things) Python 3, Django, Django-Rest-Framework, Ember-CLI, Emblem, Sass (the original, indented version), Bootstrap, CoffeeScript, and EasyRTC.If you have any questions or concerns, technical or otherwise, please don't hesitate to ask!	ralmidani	12.773226	-6.489193	comment	3.0	16.0	1497554599	9.986159
14582781	It is worth noting that the original	It is worth noting that the original reason for Ruby is that 20 years ago there was no scripting language which could handle Japanese text.Hence a Lisp hacker decided to write a scripting language which could do so using the Smalltalk object model with a library carefully designed to would work a lot like Perl.  The result was Ruby.	btilly	12.527641	-7.0651855	comment	3.0	24.0	1497818223	12.730327
14582793	I picked up Ruby in Japan before the	I picked up Ruby in Japan before the era of Rails, back in 2004. There was a lot of enthusiasm around the language in Japan even at that time; it seemed like people were using it for everything. Personally, I knew a bunch of people who were using it for all their command-line tooling. These days, I bet most Western Ruby devs couldn't even tell you what gets does, but back then it was like magic.	verisimilidude	12.605266	-7.042703	comment	3.0	12.0	1497818309	12.417575
14583113	This is mostly orthogonal, but I'm y	This is mostly orthogonal, but I'm yet another dev who loves using Ruby, but absolutely hates Rails. Ruby is a joy to use, whereas Rails is soul sucking, anti fun and overrated.I haven't been paid to write a line of Ruby in over 4 years but I still use it for the occasional hobby project. Not only do I not use Rails for fun, I'd have to be close to starvation before I used it again for profit.Now I feel the urge to dust off my copy of 'Eloquent Ruby' and write some fun code.	doktrin	12.674816	-6.9948916	comment	3.0	30.0	1497822129	12.3554325
14583182	> I consider Ruby a far superior lan	> I consider Ruby a far superior languageHave you looked at the C source of Ruby? :) In terms of that, Python is far, far superior to ruby.EDIT: to clarify, CPython is much cleaner than MRI, and has a much-better-documented API for extensions. This is what I believe part of the reason that Python has a much better coverage for scientific packages.	yzmtf2008	12.505628	-7.039283	comment	3.0	11.0	1497823041	12.366492
14583673	"Python is arguably more ""obviously r"	"Python is arguably more ""obviously readable"", in a sense that when you see some construct, and you don't know what it is, but you have a guess, that guess is usually correct. It makes the grammar more verbose than Ruby in many ways, and idiomatic Python is almost always more verbose than idiomatic Ruby, but for many people, ease of reading and understanding is preferable."	int_19h	12.345425	-6.9931035	comment	3.0	31.0	1497830043	12.343255
14583931	Ruby embraces and favors magic. Pyth	Ruby embraces and favors magic. Python shuns magic and goes for one correct and explicit way.The languages are pretty similar. The community attitudes are different.	nine_k	12.471902	-7.0452976	comment	3.0	11.0	1497834323	12.406328
14583743	I used to have a preference for Ruby	I used to have a preference for Ruby but Python has a single killer feature missing for me from Ruby and that is explicitly imported module symbols.When looking at new unfamiliar code in Ruby there's just no way of instantly knowing which symbols come from which files/gems. There are conventions, sometimes these are followed well, sometimes not. Either way it adds a lot to the mental load of parsing new code or even old code you've written your self. Ruby's module import system is just too much like C's #include.	hetman	12.394861	-7.034645	comment	3.0	11.0	1497831085	12.379194
14584642	This is a cautionary tale for develo	This is a cautionary tale for developers that flock to the flavor-of-the-month tech (CoffeeScript used to be all the rage in 2013!), only to find that the mature tech not only caught up but completely eclipsed it in 2017.	Hydraulix989	12.418941	-6.5659003	comment	3.0	12.0	1497846630	-10.526203
14585343	So want typing support in CoffeeScri	So want typing support in CoffeeScript...	jononor	12.427498	-6.5905395	comment	3.0	12.0	1497860312	-10.535223
14585512	I completely agree with this. It's m	"I completely agree with this. It's maddening to hear everyone wax lyrical about the benefits of typescript when I see non at all, after you balance the benefits of type safety against all the flaws inherent to typescript itself.You used the word ""arrogance"", and that's exactly what it is. The fact that it's a transpiler (and a poor one at that) makes no sense to me. It's reach exceeds it's grasp and it burdens developers with the task of fixing it's own failings.Before anyone says ""you just don't like typed language"", stop right there. I do like Typed languages. Typescript is just very very poor when compared to other modern typed languages.It's such a horrible development experience that I'm looking for a way out of web dev. It's clear the community has gone nuts for it. And the Java back"	tomelders	12.369925	-6.7985787	comment	3.0	29.0	1497863169	-10.419141
14585418	I see ES6 or especially Typescript a	"I see ES6 or especially Typescript as essentially a recreation of ES4/Flash AS3, with some renaissance-era Javascript footguns attached. You've got classes, various class based OO features, optional typing major industry support, probably improved performance coming soon, etc...Coffeescript was a bit different. It meant fewer lines of code, not more. It had significant whitespace and some other Python-inspired idioms like array comprehensions and object comprehensions. Most importantly, Coffeescript was a new language and didn't have to re-implement deleterious Javascript features like the == vs === distinction, undeclared vars leaking to global scope, baroque keywords like ""with"", etc...That said as others have pointed out, ES6 did borrow many good features from CS and CS is slowly dying."	xiaoma	12.391813	-6.4980755	comment	3.0	17.0	1497861737	-10.508632
14588269	I don't know about perl but for php 	I don't know about perl but for php php-fpm is basically the way to go now rendering mod_php irrelevant.	catdog	12.45403	-6.8628573	comment	3.0	11.0	1497890468	13.13776
14589752	You can certainly find snippets that	"You can certainly find snippets that are simpler in Ruby than in Python; they're just not the majority. Consider a slightly more complicated case where you need to print out items in a range with some modification. Idiomatic Ruby:   (0 ... 5).each do |x|
     print (x + 1)
   end

Idiomatic Python:   for x in range(0, 5):
     print (x + 1)

To understand Ruby, you need to know what || does, and the overall sequencing of the words as you read that construct is somewhat unnatural for English. Python is comparatively easier to parse with no prior background.It is definitely possible to write Ruby in a way that's still highly readable. But from what I've seen of real world Ruby code, that's not the way it tends to be written - idiomatic Ruby values expressiveness and DRY, so you see blocks an"	int_19h	12.410031	-7.089355	comment	3.0	12.0	1497900952	12.381572
14596523	I used columns 7-72 for code for For	"I used columns 7-72 for code for Fortran IV and I liked it.I used 3 spaces for Pascal and PL/I and PLUS and I liked it.I used no indentation whatsoever for APL and I liked it.I used spaces for CDC and Cray-1 assembly, tabs for microprocessors, and had no productivity difference.I used tabs for C and I liked it.I aligned everything on the ':-' in Prolog and I liked it.I use 2 spaces for C++ and that's the only part of C++ that I like.I use no regular pattern for Haskell and it's perfect.It doesn't matter.  Let your team's format zealot win this argument.  Find another hill to die on, like naming conventions or ""using namespace std;""."	pklausler	13.104052	-7.298178	comment	3.0	14.0	1497979477	0.82871795
14605426	This is probably better page to look	This is probably better page to look, as I don't actively look at Erlang, but as Elixir developer I am very interested in it.http://www.erlang.org/news/114	desireco42	12.607863	-7.4961834	comment	3.0	11.0	1498063495	12.938471
14605504	Is there like a why's poignant guide	Is there like a why's poignant guide to ruby for erlang?http://poignant.guide/book/	brian_herman	12.616171	-7.065026	comment	3.0	11.0	1498063868	12.380888
14606316	"Thanks!  I came here to ask the ""How"	"Thanks!  I came here to ask the ""How do I Erlang?"" question. Erlang has been on my radar for a long time but I've never taken the time to dig in.   85% of my code output is obscure protocol stacks in Python+Twisted, the other 15% is real-time embedded C over an RTOS.  Even if I can't use Erlang in production, I'm sure I'd find food for thought in the concepts."	dbcurtis	12.515115	-7.546007	comment	3.0	16.0	1498068110	12.922481
14607277	If you use redux with a type checked	If you use redux with a type checked language like TypeScript or Flow it does.	wwwigham	12.438467	-6.7522917	comment	3.0	11.0	1498074661	-10.441209
14622552	It's a bit inaccurate of them to pre	It's a bit inaccurate of them to present the results of a 17-year old paper (published in 2000), as empirical evidence that development time in Scheme is shorter. These days there are plethora of language choices on the JVM, and if I were devloping a multi-platform app today, I would personally choose Kotlin along with the Intel Multi-OS Engine:https://software.intel.com/en-us/multi-os-enginePart of my motivation to prefer Kotlin over Clojure (the most popular LISP on the JVM langauge?) is that I am a huge proponent of static typing. Large programs written in statically typed languages are orders of magnitute more readable, more maintainable, easier to understand, and far less error-prone, than programs written in dynamically typed languages.The recent surge in popularity of dynamically ty	winter_blue	12.329048	-7.6555037	comment	3.0	23.0	1498250194	-11.184679
14639352	I attended a two day Elm workshop a 	I attended a two day Elm workshop a while back. There is a lot there to love, I just think it's Haskell inspired syntax is a major impediment to it's mainstream adoption. I however would love to be proven wrong as the webs reliability would be so remarkably improved.	donatj	12.972591	-7.674867	comment	3.0	22.0	1498503969	-12.762713
14668918	Crystal language 0.23.0 released	Crystal language 0.23.0 released	itaris	12.644481	-7.2616987	story	3.0	4.0	1498803920	10.449479
14676400	Sorry but what is the use case for B	Sorry but what is the use case for Babel + TS? I thought you use either Babel or TS but not both together.	octref	12.386966	-6.5941515	comment	3.0	10.0	1498904548	-10.48989
14683125	"Then you don't have ""Erlang-like act"	"Then you don't have ""Erlang-like actors"", which is an implementation of CSP
(unintended, designed separately, but still).Unless you mean that some data is shared, but cannot be modified, but this
would be semantically identical to not sharing anything."	dozzie	12.344073	-7.5220847	comment	3.0	10.0	1499012358	12.886157
14690750	>But if you're building something th	">But if you're building something that you hope you'll have to rapidly scale, Django is going to hurt you. It's way harder to scale due to both its heavy reliance on hidden magic its tight integration with its data store.Considering that Django has 1/5th as much ""magic"" as Rails, and that Rails powers some of the biggest websites on the world, I'd say ""citation needed""."	coldtea	12.825439	-6.5979958	comment	3.0	27.0	1499110309	10.229779
14690762	On my next side project will use pyr	On my next side project will use pyramid  next aiohttp or tornado. Python has a good ecosystem of libs. Pick one when you need it. Django is perhaps the less pythonic  option. After some time doing go and js.. I prefer the lib approach.. on the end you don't need so many things to quickly respond to http requests ;)	jordic	12.57814	-6.4866724	comment	3.0	12.0	1499110397	9.903029
14691196	> So having used both, this is what 	> So having used both, this is what I tend to say about them: some of Flask's commonly-used components are better than django's (SQLAlchemy notably), but altogether, django is a better framework.Most Flask dev however, are unable to leverage the full power of SQLalchemy. They do miss the nice integration of the Django ORM, espacially the form generation, admin and fantastic app ecosystem that assumes you have a User object.> Making a sane and maintainable project layout is not a particularly easy thing to do+1000 on this. I noticed this as a dev AND a trainer. In the end, flask is great if you are either very beginer and want to do simple things, or very experienced. For all the rest, you want Django.But the price to pay to enter the Django world is higher.> It shouldn't be a shock to you 	sametmax	12.793925	-6.548488	comment	3.0	15.0	1499114380	10.054062
20349755	It would be interesting to hear a co	It would be interesting to hear a comparison from someone using https://crystal-lang.org/ at scale. It's basically Ruby + types, which would make it the closest for isolating that one feature. It can't run Rails, but there are very similar web frameworks available.	viraptor	12.702753	-6.9680305	comment	3.0	10.0	1562194456	12.346407
20357805	I can't tell what your description o	I can't tell what your description of LiveView is suggesting, I will need to read about it, sounds interesting. Is it like a codebase that is implicitly split on a back-end and a browser, without the need to write JavaScript?	hellofunk	12.894441	-6.7855353	comment	3.0	11.0	1562274393	12.712931
20374961	>I LOVED Perl.5 exists and will alwa	>I LOVED Perl.5 exists and will always exist. :-)	kabwj	12.336589	-7.0276318	comment	3.0	29.0	1562505851	13.185047
20375105	"Myth: Perl 6 has no official ""framew"	"Myth: Perl 6 has no official ""framework""Reality: Yep.The biggest issue with Perl 6 IMO is that there are no ""official"" scaff holding framework(s) for anything. If I need to spin up a web app? Start from scratch. Need something like a CMS? Start from scratch. Need a static site generator? Start from scratch.Yes, I know there are probably some Github repos out there that may do what I want and I am nitpicking but it is IMHO that until a programming language adopts an official framework[1] to help with new entrants or even crusty old dev guys like me that don't wanna keep reinventing the wheel, that language will rarely ever get popular.[1] e.g. rails to ruby, laravel/wordpress to PHP, Django to python, nodejs to javascript, etc"	kinkora	12.330374	-7.0391245	comment	3.0	12.0	1562508065	13.176516
20378757	The author acknowledges that some ma	"The author acknowledges that some maintenance is necessary, especially for security updates. My reading of it was that his complaint is that in keeping up with the security upgrades, Django breaks other things.This is true of a number of frameworks I've worked with. If you want security, you have to constantly stay on top of the other changes that the framework makers implement, often ""fixing"" things that aren't broken, removing features, or changing the way things work.I don't know how practical it is, but it would be nice to see a framework where security updates and feature updates were separate things. One could keep one's site secure through updates without having to debug formerly working things every few months."	reaperducer	12.822634	-6.532376	comment	3.0	10.0	1562542793	10.073195
20379288	> Perl6 was a reaction to Perl5's lo	> Perl6 was a reaction to Perl5's loss of mindshareThat's not the way I remember it. The Perl 6 effort was announced in 2000, and (at least by the ever-fickle TIOBE index), Perl marketshare kept growing until 2003 and did not start declining until 2005:https://www.tiobe.com/tiobe-index/perl/	microtherion	12.344734	-7.0477967	comment	3.0	11.0	1562550002	13.183421
20382723	If you search HN history, it appears	If you search HN history, it appears Elixir seems to get much more buzz. Saw this from a few days ago:https://news.ycombinator.com/item?id=20357055Elixir is just a slightly changed Erlang syntax?	melling	12.629282	-7.4897194	comment	3.0	22.0	1562594211	12.930724
20383185	I work with Ruby and Elixir daily an	I work with Ruby and Elixir daily and Elixir is 10x faster. Phoenix recently added functionality to display response times in microseconds, partially as a showcase for its good performance. I dont doubt you can get more performance in C++ or something but its still lighting compared to Ruby.	Jedi72	12.722298	-7.2673407	comment	3.0	17.0	1562597318	12.74605
20384554	Phoenix is faster than Rails, howeve	Phoenix is faster than Rails, however Ruby is faster than Elixir when doing CPU intensive tasks. Like parsing text.	hartator	12.755404	-7.206994	comment	3.0	11.0	1562605932	12.754231
20384065	> And Phoenix LiveView (not released	> And Phoenix LiveView (not released yet), which I personally think pulls the strengths of Phoenix together in a way that can truly disrupt web development. It’s very difficult to do what LiveView is doing on other tech stacks.LiveView cannot avoid latency. When I've experimented it's great for something running on my local network; less good when it's in a datacentre in another country. It's laggy.And unless you replicate to many locations, or can deploy it to edge compute nodes (no idea) then this will always be a problem compared to 'true' client-side development.I want it to work but I don't see how it can beat the laws of physics.	porker	12.897709	-6.8694305	comment	3.0	12.0	1562603394	12.714025
20452401	Hey, at work we have been forced to 	Hey, at work we have been forced to use Denodo. How does this compare to Denodo? Seems a lot better and doesn’t try to do any “data virtualization”. I am a bit scared by the query optimizer because the Denodo one is super buggy. Overall I think the concept is great and this might be a great companion to etl tools.	kfk	12.499542	-6.4433784	comment	3.0	10.0	1563300251	-10.98348
20455990	try errors in elixir:   with {:ok, v	"try errors in elixir:   with {:ok, val1} <- happy_path1(val0),
        {:ok, val2} <- happy_path2(val0, val1),
        {:ok, val3} <- happy_path3(some_val) do
     function_might_crash_let_it_crash!(some_val)
     happy_result()
   else
     {:error, :enoent} -> handle_notfound_error()
     {:error, :eperm} -> report_permission_error()
     _ -> raise(""don't worry this process is supervised, let it crash!"")
   end

low cyclomatic complexity makes for a nice user experience, and you learn the philosophy of ""if it doesn't work, just turn it off and on again"".  Why be scared?  Just let it go.  The VM has your back."	dnautics	12.530355	-7.488622	comment	3.0	17.0	1563331889	12.893531
20476734	Somebody should fork PHP 5.6. There 	Somebody should fork PHP 5.6. There is a lot of Software still depending on it and it is unrealistic to expect companies to migrate millions of lines of third party code to PHP 7.	naranha	12.793817	-6.654547	comment	3.0	22.0	1563520194	10.331997
20476799	In theory, yes. However as the Germa	"In theory, yes. However as the Germans say ""the devil is in the details"". The .patch file for magento 1 for PHP7 compatibility is around 1.9 MB (iirc)! In the standard PHP5 project you have literally millions of lines of third party code, that one shold not touch with a stick. Are you really going through all of this code to check if something is maybe going to break at runtime? What if the legacy project has 0 tests?Another problem are the Docker images. The PHP project still provides Docker Images for 5.6, however to my knowledge they are not updated anymore (perhaps I'm wrong). So what about all the security vulnerabilities in the underlying linux image? (I just verified and the latest php 5.6 image is from January 2019)"	naranha	12.770117	-6.6437397	comment	3.0	16.0	1563521204	10.321516
20476935	The issue with PHP is devs like that	The issue with PHP is devs like that guy.	trilila	12.762819	-6.6117506	comment	3.0	11.0	1563523367	10.301222
20477184	I’ve just finish (yesterday night) t	I’ve just finish (yesterday night) to move old websites I host from a PHP 5.2 VM to 5.6Some of them are more than 10 years old !And as they represents a good share of my profits, I can’t dump them.I think I saw a Joomla 1.5.Those clients don’t want to pay someone to upgrade or redo their site.There are several intranets that will not support PHP 7 because they use the old mysql_ functions...So even I loose a lot of my semi-passive incomes, or I continue to tell them on a regular base that they should upgrade.(For the anecdote, there were around 40 websites before I alerted my clients in April. 5 of them have migrate to last versions of Wordpress or joomla. 35 more to go...)	JeanMarcS	12.78912	-6.590512	comment	3.0	10.0	1563527746	10.312863
20492592	Isn’t modern PHP much faster though?	Isn’t modern PHP much faster though?	spiderfarmer	12.717776	-6.648224	comment	3.0	14.0	1563731409	10.297291
20582083	Looks like peak Perl was about 2012-	Looks like peak Perl was about 2012-2014. :(	gpvos	12.350079	-7.041122	comment	3.0	24.0	1564648105	13.19238
20582372	Large Perl codebases are terrible - 	Large Perl codebases are terrible - let it die.	mattbillenstein	12.327571	-7.008056	comment	3.0	23.0	1564652109	13.174743
20582546	Now I feel old, I started with Perl 	Now I feel old, I started with Perl 4 around 1992-1993. There wasn't even a CGI query args parser library yet, you had to roll your own.	latchkey	12.377732	-6.889896	comment	3.0	11.0	1564654550	13.161352
20587517	As a beginner trying to learn to pro	As a beginner trying to learn to program a long time ago, rails was possibly the worst resource I attempted to use. You follow a complicated, tutorial to set everything up so you can actually start. Then you type a few words and then a bunch of complicated looking files are generated automatically in a way that it's hard for a beginner to even know what sections he's supposed to be able to understand.Maybe it clicks for some, but I had a better time starting with HTML/CSS and then learning JavaScript before moving on to Python.	phaus	12.691443	-6.9274006	comment	3.0	11.0	1564688508	12.371159
20604330	I totally thought the article was go	I totally thought the article was going to be about prolog. Datalog was formulated as a subset of prolog. Prolog generalizes datalog, and is functional, etc. So generalizing a language that was the subset of a larger one in the first place is something I find odd.	djhaskin987	13.17031	-7.160533	comment	3.0	10.0	1564890943	-12.452576
20604624	Has anyone had experience with Datal	Has anyone had experience with Datalog or Datafun? What was the programming experience like? What did you build with it? Did you find that you were more productive or less? What sorts of problems was it a good fit for, and what sorts of things was it a bad fit for?	iamwil	13.1914215	-7.0292144	comment	3.0	17.0	1564897462	5.7213936
20639066	Questions for PHP, and MySQL folks (	"Questions for PHP, and MySQL folks (not meant in a negative way):- PHP: A few years ago I heard about how PHP was needlessly complex. I wonder what the recent status of the programming language is. Specifically, do experienced PHP programmers stick to a subset of PHP, as in ""PHP: The good parts""? (similar to ""Javascript: The good parts""). (side note: As a diehard python person frustrated due to latest versions becoming bloated in features, I fully acknowledge that I'm in the ""Python: The good parts"" camp right now).- MySQL is owned by a company lately. I wonder if PostgresQL is clearly a better alternative?"	fizixer	12.763545	-6.640505	comment	3.0	13.0	1565211964	10.271858
20641136	Five years ago, I decided I was neve	Five years ago, I decided I was never going to touch PHP ever again.I have been much happier professionally since that day.	TylerE	12.775113	-6.63635	comment	3.0	11.0	1565229447	10.340004
20655216	Though notice that you picked litera	"Though notice that you picked literally the most trivial example in the entire codebase that anyone can understand without explanation.Elm is onto something with its obsession with simplicity and lack of features. I go back to old Haskell code and have to completely recredentialize in Haskell before I remember what's going on. I return to old Elm code and need very little ramp up.I'm not making an ""Elm > Haskell"" argument, I just think experimentation with simplicity does this family of languages a favor."	hombre_fatal	12.993769	-7.663377	comment	3.0	15.0	1565364437	-12.760083
20659786	I don't think the above comment is p	I don't think the above comment is put in the best way...But I do have a certain duality about my feelings on ElixirOn one hand, yes, it is cool to see more adoption of BEAM, I do wish Erlang could have done that by itself.I vastly prefer Erlang to Elixir and find it does slightly... taint the simplicity and cleanliness of the syntax Erlang made made me fall in love with, just to be Ruby-like.I don't feel it actually benefits the language at all past the meta reason of attracting Ruby-ists (which again, isn't necessarily a bad thing by itself)	BoorishBears	12.626824	-7.4663534	comment	3.0	18.0	1565404277	12.9146595
20672393	There ware a time when I wondered if	There ware a time when I wondered if I should learn Ruby or Python. These days, unless I'm going to be a Rails dev, hands-down Python.	dehrmann	12.483121	-6.9768763	comment	3.0	11.0	1565583658	12.377923
20674330	I spent quite a lot of time writing 	"I spent quite a lot of time writing Typescript using Fluture and a few other libraries a while ago. Coming from a functional background, combinators + futures actually feels quite natural to me, so I looked at the examples of the ""bad"" code here and thought I actually quite liked it. But I certainly don't mind the async syntax too much either. Will see how it works out some time!"	kolektiv	12.360954	-6.7994795	comment	3.0	11.0	1565608091	-10.476047
20675058	PHPStan is a great tool.  In additio	PHPStan is a great tool.  In addition to PHPStan, I also use phpnsc (name space checker) to check for missing use statements, php-cs-fixer (code style fixer) to ensure the code adheres to my code style, phpcpd (copy paste detector) to detect duplicate code, and phpmd (mess detector) to find potential problems in the code.  These are all set up in my CI pipeline so that my app will fail to build if any of these 5 tools detect a problem.  It has saved me from deploying buggy code several times.	phpdave11	12.663881	-6.6238303	comment	3.0	10.0	1565615543	10.306731
20677684	I really struggle to see what the ca	I really struggle to see what the case is for PHP anymore.I maxed out '04 to '14.After working in a dozen other languages, the only motivation left seems to be sunk-costs and job-market openings.It's so domain-specific that you're hamstringing yourself in the future.That you'd create a new language out of PHP just seems mad.Who's the audience?The pragmatic (market) motivations don't exist.	mjburgess	12.759804	-6.647666	comment	3.0	25.0	1565630871	10.360597
20677817	It's a little galling that the propo	It's a little galling that the proposal makes no mention of Hack (https://hacklang.org/), which is also an evolved PHP with static typing that is designed to coexist with PHP 5/7 code on top of a single runtime (HHVM).Edit: as noted below, since I made this comment, a new section has been added to the doc about this topic.	atdt	12.732559	-6.649771	comment	3.0	10.0	1565631516	10.309327
20677863	I agree with this. I'm struggling to	I agree with this. I'm struggling to get out of my current role/job right now, because I want to move away from PHP (I'm really growing to dislike it as a whole, and in my personal experience have some very negative connotations around the development practices of the PHP developers I deal with on a day in day out basis)I been looking at C#, what did you find was easy to translate to quickly?	no_wizard	12.547813	-6.60468	comment	3.0	16.0	1565631745	10.287902
20719146	Great news, and a hearty congrats an	Great news, and a hearty congrats and thank you to all the contributors!As a frontend designer, I'd been hoping for some mention of faster SASS/SCSS compiling, but it looks like it's the same asset pipeline for that. Can anyone recommend a current resource for decreasing compile times?I love designing in a Rails app, but my non-Rails projects all seem to inject CSS changes into the browser almost instantaneously,  whereas with Rails there's often a wait of up to 10 seconds. The lag is pretty disruptive to the design workflow. I'm pretty new to Rails so any tips on what I might be doing wrong would be appreciated :)	reneherse	12.70916	-6.9118733	comment	3.0	10.0	1565985791	12.326129
20719738	> Turning sync into async is harder 	"> Turning sync into async is harder in any language.Elixir's Task module (in the stdlib):    future = Task.async(fn ->
      do_something_here
    end)
    
    ...do_other_things...

    result = Task.await(future, timeout)

Mixing it with the Enum library makes concurrency dead-simple (got I a junior dev dispatching concurrent tasks in scripts with confidence), at the expense of an ugly nested double lambda.    some_list_of_values
    |> Enum.map(fn value -> 
      Task(fn -> do_something_with(value) end) 
    end)
    |> Enum.map(&Task.await(&1, timeout))"	dnautics	12.561697	-7.4759326	comment	3.0	13.0	1565989790	12.906897
20746296	It's worth noting that the hijacker 	It's worth noting that the hijacker pushed a malicious version of 1.6.xVersion 1.7.0 was released to rubygems on 8th July 2014, and 2.0.0 on 2nd July 2016, so anyone who has started using rest-client or run a `bundle update` recently is unlikely to be affected.The impact could have been significantly greater had the hijacker pushed a new versions of 1.8.x or 2.x as well, so it's very fortunate the breach was spotted now.	robotfelix	12.703324	-6.9434404	comment	3.0	10.0	1566305171	12.357156
20754136	Deja vu https://github.blog/2008-04-	Deja vu https://github.blog/2008-04-25-github-s-rubygem-server/And then removed 16 months later: https://github.blog/2009-10-08-gem-building-is-defunct/Hopefully this one lasts longer.	psadauskas	12.687216	-6.9827156	comment	3.0	12.0	1566354974	12.360952
20759950	It's stateless, which won't allow ma	It's stateless, which won't allow many user authentication/CRUD workflows, although recently they added integration with Cloud SQL which is interesting.Don't think you could use Django on Cloud Run without issues, though, particularly with how it handles Sessions.	minimaxir	12.859461	-6.472445	comment	3.0	11.0	1566411769	-4.874157
20766123	I've been writing Typescript with Re	"I've been writing Typescript with React for quite a while now and these are my feelings so far:- Typescript type system is pretty awesome, and allows the expression of some things really elegantly; in particular, string literal types are quite cool for component props that feel ""htmly"", union and intersection types are great for making reusable/generic components and Partial<T> is cool for making typesafe component states (https://www.typescriptlang.org/docs/handbook/advanced-types.... is a great resource)- on a related note, the Typescript docs are very comprehensive- ... but docs for anything React related to Typescript (types of components, etc) are harder to come by- for the actual UI code there is some time wasted getting type signatures perfectly correct, particularly for React and H"	h0h0h0h0111	12.408942	-6.7731833	comment	3.0	11.0	1566465357	-10.44637
20767443	> now throws ~30 errors on buildYep,	"> now throws ~30 errors on buildYep, it's a beautiful technology, total type safe heaven.Two basic basic rules if you want to work with TS: 
  1: apply the 'any' type
  2: tweak TSC config so it won't complain anymoreAll companies I worked for in the past few years that use TS did this to keep TS 'out of the way'. And with that you completely annihilate the main benefit of using TS! I think it's hilarious and sad at the same time.I'm curious btw how long TS will live, especially when you realize that within a few years we can write in virtually any language through WebAssembly. Good luck with it anyways."	siempreb	12.373687	-6.719927	comment	3.0	12.0	1566478323	-10.507046
20768034	I feel almost the exact opposite: Ty	I feel almost the exact opposite: TypeScript is delightfully terse while still achieving its main goal of looking and feeling like JavaScript. I've used languages where things start looking like line noise (hi, Scala) and I very strongly do not get that feeling out of TypeScript.You have discriminated unions and the compiler is clever about them, so you can implement ADTs if you want them with a little but not a nasty level of boilerplate. (They can also be implemented with an abstract class if that's more your bag.)It lacks pattern matching because it intentionally doesn't include a runtime component, which I think is also wise. Options exist if you want to use them. I've seen people use Purify to good effect.	eropple	12.335443	-6.858111	comment	3.0	13.0	1566481853	-10.429358
20770643	Yeah, this technology looks great. I	Yeah, this technology looks great. I'm working on https://devev.com which will allow users to import JavaScript/TypeScript libraries and use their exported functions in flow charts.I'm pretty early stage but I got a desktop app running last night. I've got some documentation work to do but I have a PoC of Devev as a webapp which I'd like to deploy soon. I haven't resolved all of the security issues yet so this article is a goldmine for me.	tyleo	12.358417	-6.456333	comment	3.0	11.0	1566496063	-10.417328
20773974	I enjoyed reading about how they got	I enjoyed reading about how they got started. I loved the fact they were supporting two mental health organizations with donations. Since  friend loves this kind of diary-keeping, after I was done reading, I checked out their website with the intention to buy.Prominently on the home page is an article about using crystals for healing. Ugh.I don't know if this is intentional, but it really turns me off their brand, and I'm not interested in buying one anymore.	shaggyfrog	12.639158	-7.250122	comment	3.0	23.0	1566525045	-11.129593
20786824	> Typescript solves the biggest issu	> Typescript solves the biggest issue I have with using JS which is a lack of a static type system.Hmm, the biggest problem with JS is types? Are you sure? I rarely had issues with types in JS. With JS I just used my trusty dynamic type checker at specific places in the codebase, and testing coverage of course even more importantly.But with TS, the codebases I see on a daily base are mostly a terrible mess of wrong ideas, wrong libraries, wrong constructs, wrong design principles, tooling hell, etc, etc.. Which is IMHO the real issue with JS/TS. For some reason TS proponents seem to live in a world where 'TS solves everything'.For me TS is just writing 20% more code and regularly needing to use the 'any' keyword to avoid spending hours on getting a basic line of code working. Everything I 	siempreb	12.33641	-6.818372	comment	3.0	13.0	1566650781	-10.440123
20798374	I'm the author of Mint, so it was th	I'm the author of Mint, so it was the obvious choice :)I choose Crystal because I had experience using Ruby and I absolutely loved the syntax, also Mint is built with Crystal. I really like it because it easy to read (even with type annotations) and compiles to a fast binary.Edit: If you have specific questions let me have it :D	gdotdesign	12.62879	-7.24298	comment	3.0	13.0	1566811007	-11.245326
20804829	Ask HN: What's your opinion on moder	Ask HN: What's your opinion on modern PHP?	non-entity	12.777104	-6.639434	story	3.0	5.0	1566862883	10.358071
20807122	I don’t have much experience with Ru	I don’t have much experience with Ruby but I’m amazed looking at the readme of how easy it is to get Jekyll going.	snypox	12.614417	-7.022376	comment	3.0	11.0	1566891648	12.375643
20829483	Maybe Perl 5 should be renamed to Pe	Maybe Perl 5 should be renamed to Perl 7...	pvaldes	12.344028	-7.0447545	comment	3.0	15.0	1567086887	13.175903
20830984	What did Perl do better than others 	What did Perl do better than others when it came out?	k__	12.332364	-7.034423	comment	3.0	14.0	1567096157	13.186813
20829524	There's no saving Perl 5; it's a leg	There's no saving Perl 5; it's a legacy language in legacy maintenance mode for good reason.Renaming Raku/Camelia could help that language quit being saddled with the perception that it's also legacy in the same way, though.	mkozlows	12.34264	-7.0713096	comment	3.0	41.0	1567087160	13.163801
20832341	> if you insist on a language that i	"> if you insist on a language that is Perl-like but also modernHere's your perennial reminder that the word ""modern"" is a thought smell.> it's a language with a small ecosystem that doesn't seem to provide any groundbreaking advantage compared to existing languagesI'd almost prefer this conception went uncorrected, because Perl6 is not just Ruby or Python in different clothes, and it's not just Perl5 with nicer aesthetics, and I don't mind enjoying niches or competitive advantages."	wwweston	12.348428	-7.0496516	comment	3.0	16.0	1567103812	13.173383
20832173	I think it was CPAN that killed Perl	"I think it was CPAN that killed Perl, at least that was a major nail in the coffin for me.  I have no idea what the CPAN of today is like, but back in the mid-late 90's it was horribly unreliable.  There were dozens, if not hundreds of modules that did the same thing, and a lot of them had major bugs.  But installing one was the big issue, as it would always choose the latest release of any module in the dependency chain, including the perl interpreter itself.  And this was done without any hint as to whether the module actually worked with the latest versions of those modules.  So, you'd end up upgrading a bunch of modules, very likely breaking things that worked.  And at the end, it'd ""upgrade"" the perl interpreter.  And by ""upgrade"" I mean install a new copy, replace all OS references t"	gmiller123456	12.326194	-7.029499	comment	3.0	13.0	1567102668	13.168166
20841240	Yeah it's probably not worth it to a	Yeah it's probably not worth it to add types to JS the language, but what if you could ship standard metadata files similar to source-maps that only included type information, which browsers could leverage to speed up compilation?	_bxg1	12.385446	-6.693407	comment	3.0	10.0	1567190056	-10.420457
20852872	I would love to know a deep comparis	I would love to know a deep comparison of Elixir(LiveView or other libraries)  Vs AngularJS or VueJS or ReactJS for building modern progressive SPA and how much productivity is achieved.	truth_seeker	12.748988	-7.2704377	comment	3.0	10.0	1567352880	12.857455
20877208	Yes please!  I would absolutely rath	Yes please!  I would absolutely rather use ReasonML than TypeScript or JavaScript; so I hope it gains a lot of traction.I'd still rather use ClojureScript, though.	blunte	12.444935	-7.4718285	comment	3.0	20.0	1567605245	-10.621681
20877729	ReasonML is also just Javascript in 	ReasonML is also just Javascript in the end, dealing with the same platform limitations.	gridlockd	12.385524	-7.541598	comment	3.0	18.0	1567608960	10.376769
20877880	Yet another day, yet another incompl	Yet another day, yet another incomplete and immature language comparison blog !I really wish to see some mature blog post which in depth covers the merits of languages in comparison by writing a large enough and workable piece of code solving the identical problem and utilizing all features of individual languages in their specific codebase.If the author would have been really unbiased about TypeScript he must have mentioned at least 2 (but not exhaustive) following things.1. Advance TypeScript Typeshttps://www.typescriptlang.org/docs/handbook/advanced-types....2. Number of existing JS libraries TypeScript already supportshttps://github.com/DefinitelyTyped/DefinitelyTyped/tree/mast...Most people are just stuck with ES5 and callbacks. I have conducted many (about 12 so far) meetups here in 	truth_seeker	12.370762	-6.72467	comment	3.0	13.0	1567609862	-10.448241
20880925	The key insight when writing a sudok	The key insight when writing a sudoku solver is that it is just depth first search. Once someone told me that it just sort of clicked. Just guess each possible number at each open square and if you ever get to an un-solvable state, just undo the last change you made and try the next one. I was extremely satisfied with myself after writing my first really clean solver with backtracking.I'm sure there are other, more efficient, ways to write sudoku solvers, but the simplicity and clarity the DFS solver offers is pretty cool IMO.	skizm	13.450792	-7.4102993	comment	3.0	12.0	1567627837	15.080775
20881637	I always thought one of the requirem	"I always thought one of the requirements for published Sudoku puzzles was that no trial and error should be required; it should be possible to deduce the single unique solution from the clues given. This would mean the ""search"" part of Norvig's algorithm would not be required; constraint propagation alone would be enough."	pdonis	13.451705	-7.4103403	comment	3.0	13.0	1567632682	15.077316
20891221	Looks like Ember for the most part. 	Looks like Ember for the most part. Look at the code, it's not minified, yet...	kevin2r	13.1129	-6.440899	comment	3.0	10.0	1567722564	-15.51179
20891251	Ember, jQuery, Moment, and RequireJS	Ember, jQuery, Moment, and RequireJS.https://imgur.com/DioXtwe	pier25	13.122915	-6.437421	comment	3.0	16.0	1567722844	-15.511154
20912446	Anyone who has had to work on a sing	Anyone who has had to work on a single system for many years may be interested (even entertained) by this talk.One thing I appreciated about the video was how one of the biggest complaints against PHP isn't quite accurate: Inconsistencies of needle/haystack parameter order in functions. (there is a consistency there, but I didn't know it)And the fact that PHP was developed over time and in dramatically different eras of the internet that heavily influenced it's features. He admits where mistakes were made, but also where people misunderstood the source/reasoning behind some of the decisions in PHP. (though he seems to sidestep some of them completely)Magic quotes, globals, register globals, etc... he has really good reasons for why and how these things came about. I found this talk fascina	Vanderson	12.771013	-6.6356926	comment	3.0	32.0	1567967942	10.329345
20921070	Rails 6 really is a well-rounded upd	"Rails 6 really is a well-rounded update. It seems the new trend goes towards ""bare-bones"" http servers, but I'm insanely productive in a Rails app, even if it's one I have not worked on before.I've seen quite a lot of ""Rails-hate"" over the last view years, and it can only be coming from people who never got to experience the world that was web development before Rails: Every project had it's own, usually quite creative, structure. There'd be configuration values in `config.inc.php`, but also in `configuration.php3` and `config.old.inc`, and `index.php` and so on. Just by establishing a standard folder structure, DHH probably made web devs everywhere twice as productive.I also think its reputation of being too restricting isn't entirely deserved.As but one example: I often opt to use SQL in"	IfOnlyYouKnew	12.777699	-6.89882	comment	3.0	17.0	1568055035	12.334189
20921129	How is Rails compared to Django?	How is Rails compared to Django?	bureaucrat	12.804887	-6.6742015	comment	3.0	16.0	1568055363	10.269324
20921249	fetishization of this sort of nonsen	fetishization of this sort of nonsense is why Perl should never go into production	moonbug	12.328784	-7.0371156	comment	3.0	10.0	1568056155	13.184952
20921704	I have some: memory usage, CPU usage	I have some: memory usage, CPU usage, raw performance, language safety, transparency. I think in the era of Elixir/Phoenix, Rust/Actix, Clojure/Luminus it is really hard to argue for Rails. Don't get me wrong, I have spent many years on it, but simply there are better alternatives, based what sort of requirements you got.	StreamBright	12.730573	-6.9304495	comment	3.0	34.0	1568058492	12.337931
20921841	The main issue I see with these fram	"The main issue I see with these frameworks is that they cannot match Rails' support ecosystem. The framework has around for a really long while and rails developers have made - and documented - every error, kink and detour it is possible to make when writing code. I have often been pleasantly surprised to google an esoteric problem I imagined could only arise from my own unique brand of kludginess, and find that the community had encountered and solved same in the past.
 This is of massive value especially to new developers."	Lordarminius	12.746766	-6.900141	comment	3.0	23.0	1568059285	12.366479
20921925	I can't argue about your preferences	I can't argue about your preferences here, but these seem to be subjective preferences or complaints about warts.In terms of feature and ecosystem surface, there is one area where I think Django is a clear winner: Django Admin. It is a very mature part of the framework and there is a large ecosystem around it. Compared to how useful that is for standing up an MVP SaaS (especially in anything remotely enterprisey), I would find it difficult to consider Rails if I ever envisioned needing admin.For what it's worth though, I think that Django and Rails are both exceptional choices and in terms of ergonomics, best in class. I wouldn't have complaints about the framework to coming into a project using either one.	yowlingcat	12.81271	-6.656245	comment	3.0	14.0	1568059855	10.268463
20921956	They should sponsor also the proper 	They should sponsor also the proper JIT in Ruby, will improve the speed drastically. Not the current generation of C code then compiling it with GCC, this is a joke.	xvilka	12.582962	-7.0421433	comment	3.0	12.0	1568060067	12.364278
20922121	Well, I don't believe rich text edit	"Well, I don't believe rich text editing and websockets are that common to be included in Rails by default. I can't find any excuse for not distributing those features as separate gems.
It's not that hard to add ""gem actiontext"" to the Gemfile and run ""bundle install"" if you're one of that 1-2% who needs WYSIWYG."	tsotpsstt	12.74688	-6.9247656	comment	3.0	15.0	1568061027	12.359233
20922249	I don't have any numbers to back it 	I don't have any numbers to back it up but I believe you're wildly underestimating the number of Rails projects that need WYSIWYG editing. The state of WYSIWYG editors in Rails is so unacceptably poor that I'm glad they're bundling it out of the box. It's kind of like Microsoft making their own laptops, because every other Windows laptop of the time was undeniably junk.	freehunter	12.752868	-6.9304943	comment	3.0	12.0	1568061664	12.353512
20922462	Because I've got burnt by Django in 	Because I've got burnt by Django in the past. If you do some search on the HN and elsewhere on the difference between two, the common answer that you'll find is that they are similar and it doesn't matter which one do you pick (given that you are not proficient with any of them). I don't agree with that premise and decided to make a case here.So if you are ever in a position to pick between Django and Rails for CRUD-y SaaS app, go with Rails. You can't go wrong with that.	sellingwebsite	12.80925	-6.6745753	comment	3.0	13.0	1568063005	10.272716
20921757	I tried using it with Angular, but i	"I tried using it with Angular, but it doesn't seem to help much. For example, if you have something like:    <button (click)=""login(email, pass)"" />

And then a TypeScript function like:    login(email: string, pass: string) {
    
    }

TypeScript can't help you at all here because all the typing is determined at runtime by Angular. Even if `email` is a number or a boolean, no problem, it will just happily pass it in.What benefit, then, does TypeScript provide? I understand it's compile-time guarantees, but how does that help if the types are coming in from HTML land which the TypeScript compiler doesn't examine at all?"	umvi	12.349233	-6.8457785	comment	3.0	10.0	1568058803	-10.434101
20922560	The main pain with Node, if you come	The main pain with Node, if you come from outside, is being able to know which modules are well supported, and will be for the years coming.As an example, I spent quite a long time investigating ORM libraries for relational DBs, and the projects that were half dead were the majority.Knex was suggested by everyone, but at that time the project leadership was changing so the future was uncertain. I settled on Sequelize, which had most of the functionality, but several points did not make sense:- the documentation is hard to search- I had to create a PR for sequelize-cli (separate module, that is not recommended for production!) to get the same functionality of `rails db:create`- the syntax was changed to use Op instead of strings for security, in a minor version- the way associations are def	aledalgrande	12.827715	-6.5971975	comment	3.0	17.0	1568063723	12.188306
20924432	You're comparing a runtime environme	You're comparing a runtime environment to a framework.Use Angular on the client and something server side in Node and you're set.Use Typescript and you'll be able to refactor easily too.Nobody uses just React+Express w/o TS for something serious.	winrid	12.467178	-6.500149	comment	3.0	16.0	1568080148	-10.494013
20937970	"""every PHP programmer is bad at prog"	"""every PHP programmer is bad at programming, the language is designed to accommodate them with convenient footguns (or faceguns) at every step, and the ecosystem is accordingly bad. No, PHP7 doesn’t fix this. Use a real programming language, jerk.""This guy seems like a real open minded person who did his research and shared his opinion after making strong points. /s"	koen_hendriks	12.761003	-6.6279135	comment	3.0	14.0	1568193338	10.342844
20945101	Isn't that the purpose of tools like	"Isn't that the purpose of tools like https://erlang.mk/guide/getting_started.html#_getting_starte... ?Edit: and for cross-system dev (e.g. debian to windows)
-> https://erlang.mk/guide/cross_compiling.html"	marci	12.561846	-7.516559	comment	3.0	12.0	1568238494	12.89563
20966246	Looks like FastAPI framework with ha	Looks like FastAPI framework with handler type anotations	hyzyla	12.382074	-6.626772	comment	3.0	16.0	1568407038	8.73433
20969688	> The removal of the flip-flop opera	> The removal of the flip-flop operatorWell that never happened. It was deprecated with the intention to remove it, but they backtracked: https://bugs.ruby-lang.org/issues/5400#note-25	byroot	12.594455	-7.05642	comment	3.0	10.0	1568451947	12.382571
20972816	This is maybe going to be an unpopul	This is maybe going to be an unpopular suggestion, but I think certain technologies are going to more commonly be associated with race-to-the-bottom markets, and I think PHP is one of those. It might make sense in investing in studying some more niche and higher-barrier-to-entry languages.	yakshaving_jgt	12.761273	-6.6483274	comment	3.0	16.0	1568486327	10.29121
20987747	> Then I learned that the Achilles' 	> Then I learned that the Achilles' heel of the BEAM VM is that if native code crashes it takes the whole thing with it,That's not really an 'Achilles heel' any more than most other languages that allow you to load C code that could segfault or - maybe even worse - get stuck in an infinite loop.Indeed, the fact that BEAM focuses on and acknowledges this is an advantage for people trying to create robust systems. They've had workarounds in place for years, like running stuff in a separate system process.	davidw	12.383761	-7.412036	comment	3.0	16.0	1568662479	12.830453
20992546	If you haven't got SV money behind y	If you haven't got SV money behind you that's even more reason to focus on delivering something that works.Your own project on your own time? Go for it. Clients should get the best fit, most reliable option, not the flavour of the moment.(That all said, RoR is not a great choice these days as it is a niche skill)	Nursie	12.693282	-6.839091	comment	3.0	12.0	1568705073	12.2442
23777972	Applying a schema doesn’t fix an arc	"Applying a schema doesn’t fix an architecture problem.Describing those fixed well defined contracts on top of the architurally absurd stack that is TCP/DNS/TLS/HTTP/Ajax/Dom/JS engine/Server side graphql/rpc/rest / database... doesnt by you anything but slower iteration speed and an unwieldy schema.These components don’t have the same impedance, the same flavour to their design. Necessarily their schema would be a mess.Also, what stops something like    function add(int a, int b) -> int {
        return a-b;
    }

Typing is overrated. It has productive use cases for sure, but only in specific scenarios. It is no panacea.What would be nice is typing like typescript - optional typing. Where i can provide a typings binding separate from the code (in the way that i can bring my own tests with"	CraigJPerry	12.401905	-6.791673	comment	3.0	11.0	1594281755	-10.434811
23778832	I say this a lot, but if you are thi	I say this a lot, but if you are this irritated by Rails, then you ought to see the 20+ year old legacy C/C++ some of us get to work with ;)	wwright	12.749308	-6.932905	comment	3.0	21.0	1594292213	12.363013
23809401	Ruby lib/irb/easter-egg.rb	Ruby lib/irb/easter-egg.rb	syspec	12.63759	-7.0460715	story	3.0	76.0	1594536540	12.399673
23809444	I stumbled onto this when looking at	I stumbled onto this when looking at the ruby source code, anyone know how to trigger it?	syspec	12.5733385	-7.0413175	comment	3.0	12.0	1594537036	12.378135
23820671	Maybe he's got a history of working 	Maybe he's got a history of working with PHP? $_ENV is an autoglobal array that gets filled with environment variables.https://www.php.net/manual/en/reserved.variables.environment...	cholmon	12.549992	-6.558213	comment	3.0	16.0	1594647993	-9.481805
23888656	Nice article and great idea, but as 	"Nice article and great idea, but as is traditional there are some slight
fudges of what Datalog is or what Horn clauses are etc, that I'd like to
unfudge, slightly. It's Sunday! What better than to start our day with a very
quick and almost not completely fudgy intro to logic programming? Le'ts go!To begin with, Datalog is not a ""cousin"" of Prolog as stated in the section
""Interlude: Brief Intro to Datalog"". Datalogs (there are many variants!) are
subsets of Prolog. For example, a typical datalog is the language of definite
clauses with no function symbols [¹] and with no negation as failure [²].
Another datalog may allow only the cons function in order to handle lists;
etc.Otherwise the syntax of datalog is identical to Prolog, but there is a further
difference, in that Prolog is evaluate"	YeGoblynQueenne	13.151629	-7.2248006	comment	3.0	18.0	1595158963	-12.442641
23890376	If you like Ruby on Rails so much, w	If you like Ruby on Rails so much, why don’t you find a job programming Ruby on Rails?  There are so many.	Nbox9	12.73689	-6.9606905	comment	3.0	13.0	1595175871	12.380692
23890619	I had the same issue with Rails as I	I had the same issue with Rails as I have with Node : the churn is detriment to long standing projects. Most projects I do run for years and even decades; you go run an update for security for Rails code that is 10 years old. It is a nightmare. I did not have issues like that with php, asp.net or spring.	tluyben2	12.730232	-6.930089	comment	3.0	23.0	1595177912	12.328545
23891896	What does Erlang offer that the JVM 	What does Erlang offer that the JVM or .NET don't?	apta	12.497387	-7.494147	comment	3.0	14.0	1595187807	12.921382
23895173	I think the next main challenges for	I think the next main challenges for Rails are improving the view layer (see upcoming ViewComponent for example) and better integrating with modern javascript (WebPacker feels half baked for gem writers). To me these issues (which both have to do more with the view layer) are where Rails is very much lacking.	joelbluminator	12.7165985	-6.903253	comment	3.0	12.0	1595226248	12.321431
23896633	The company I work for (mostly stand	The company I work for (mostly standard Web Dev) uses almost exclusively Elixir for any backend work. Only the fanboys of Elixir and functional everything are happy with it, just to be different to everyone else.The experience is terrible: Tooling (editor plugins, tests runners, IDEs (oh, there are no IDEs...), debugging) is like going back 20 years.There are no libraries for the most basic stuff you get almost by default on the Ruby, Python, Node or Java ecosystems. So we end up reinventing half assed solutions to anything we need to do.Some days I think we would be sooo much better by just using Rails or Django.Of course, concurrency and the Erlang VM are awesome and the perfect fit for the web... if your problem is performance, it will solve that problem for you of course... other than 	user34234	12.71035	-7.3592925	comment	3.0	11.0	1595243210	12.859848
23931127	I feel like Rails is really starting	I feel like Rails is really starting to see some new life that has felt a bit absent from it for a while now. It almost seems like there is a new generation of people extremely burned out from the constant churn of the “JS-all-the-things” movement that just took over most of web development for the past several years.There is a lot of exciting stuff landing in Rails and it’s surrounding ecosystems at the moment and I think it’s still probably the best choice for many new SAAS / web app based companies and startups.	mhoad	12.7600975	-6.9137597	comment	3.0	37.0	1595531714	12.331383
23931239	Rails was always great, JS just paid	Rails was always great, JS just paid a lot more...It felt great to get back into it having people pay to migrate their Rails apps to React and Node.	WrtCdEvrydy	12.759332	-6.8583403	comment	3.0	23.0	1595532228	12.326821
23931555	What are some of the other exciting 	What are some of the other exciting things happening in the Rails world these days?	techscruggs	12.767726	-6.931129	comment	3.0	17.0	1595534027	12.349409
23954784	It actually makes me really happy to	It actually makes me really happy to see more positive comments on a thread about PHP. It is an incredible workhorse, and doesn't get the credit it deserves.I'm often amused by developers that revile PHP, while going on to use another language, which suffers from a similar set of problems to PHP, oftentimes with poorer performance and more complex toolchains.PHP deserves a little more love, imo.	osrec	12.771994	-6.6380463	comment	3.0	13.0	1595743178	10.358727
23962921	I always wonder why PHP never seems 	I always wonder why PHP never seems to favour making breaking changes to keep things cleaner, if you aren't going to improve language constructs in a major version, when will they be cleaned up?	ThomWilhelm3	12.730609	-6.6436176	comment	3.0	15.0	1595834858	10.301496
23979782	I am actually very curious what adul	I am actually very curious what adult website uses Django? My understanding was that most of them are written in PHP and re-used across various domain names.	jilles	12.824468	-6.558967	comment	3.0	10.0	1595965060	10.059412
23990400	> I’m surprised they didn’t opt to d	> I’m surprised they didn’t opt to do this inline with the rest of the ruby code,As they mention in the post, they followed typescript's approach, here.  The benefit is it allows you to layer in typing into an existing codebase in a non-disruptive way.	CarelessExpert	12.482401	-7.079512	comment	3.0	20.0	1596049369	12.384527
23990675	Remember this is designed by compani	Remember this is designed by companies that already have existing, large, ruby codebases. For them, it makes a lot of sense to be able to incrementally add typing without having to make changes to the underlying code itself.	ativzzz	12.502871	-7.101714	comment	3.0	11.0	1596051051	12.383115
23990680	I'm not thrilled about the separate 	I'm not thrilled about the separate files with the type information but I completely understand why they did it, and if it were my choice I might make the same one.I don't like the comparison with TypeScript `.d.ts` files however, because TS still lets you do types inline in the code.  I haven't seen it mentioned anywhere that this won't be supported by Ruby 3.Does anybody know if Ruby 3 will also support inline type information or will the header RBS files be required?	freedomben	12.489064	-7.0771475	comment	3.0	17.0	1596051081	12.387616
23991079	"How is Crystal a ""half baked languag"	"How is Crystal a ""half baked language""?"	kgraves	12.6289215	-7.2782416	comment	3.0	11.0	1596053746	-11.226786
23991260	I don't use ruby, I am genuinely int	I don't use ruby, I am genuinely interested - why is it great? I'm assuming if it were ever allowed, it would be a use-at-will feature and wouldn't affect anyone who didn't use it. Typescript has probably doubled if not more my speed and accuracy since I've adopted it - yet I still do plenty of things in normal javascript. These days I'm usually unhappy when something does not have typings because it can make it terribly difficult to discover things.	fimbulvetr	12.489413	-7.0186615	comment	3.0	19.0	1596054737	12.363187
23991741	Haven't used ruby in years for the t	Haven't used ruby in years for the typical reasons people move away from it (performance, strong types, GVL, etc.) but syntax is #1 reason I like programming in Ruby. I did mostly ruby for about 5 years and really grew to love it! It may seem bonkers at first but quite enjoyable once you understand it. Now nearly 4 years later of mostly javascript, golang, python, haskell I still regularly stop and think to my self how much I miss ruby!	rudolph9	12.609766	-7.0164437	comment	3.0	19.0	1596057832	12.359281
23991856	I read parent’s “bonkers” in a posit	I read parent’s “bonkers” in a positive way.Then for instance most languages get away with inline optional typing by using “:” , for instance “ping_user(name: String)“. In ruby it’s of course already taken, in no small part because there are 3 or 4 different ways to declare hash parameters.I’d imagine most decent syntax candidates had similar issues, due to ruby’s syntax versatility.	hrktb	12.3764715	-7.08909	comment	3.0	12.0	1596058611	12.381062
23992513	It's great because Ruby is an Object	"It's great because Ruby is an Object-Oriented Programming language. Just saying that is an understatement; Ruby lives and breathes Object Oriented philosophies. It was made for them.The conflict here is that object oriented philosophies aren't actually about objects. They're about communication between objects. The messaging between objects. As per Alan Kay himself:> I'm sorry that I long ago coined the term ""objects"" for this topic because it gets many people to focus on the lesser idea. The big idea is ""messaging"".The goal of object oriented design is to focus on the communication between objects, not the objects themselves. Part of that is that the type of object receiving the message doesn't matter so long as it understands the message and knows how to respond. If the object looks like"	ysavir	12.437042	-7.1321983	comment	3.0	10.0	1596063721	12.386398
23992888	This is the first I have ever heard 	This is the first I have ever heard of ruby syntax as notoriously complex. If anything it’s usually the opposite. I would love to read why people say that about ruby.	digitaltrees	12.469804	-7.0721464	comment	3.0	14.0	1596067207	12.39377
23993524	I'm still trying to make sense of th	I'm still trying to make sense of this announcement. With a lack of type annotation in the Ruby core, I chose to build off YARD to make gradual type safety work. Now I don't know if there will be a standard that supports type safety or if I should continue down the path I'm already following. Help me, Ruby core developers. You're my only hope.(edit: I should have explained that I'm talking about the type checking features I'm developing in Solargraph: https://solargraph.org/guides/type-checking)	castwide	12.350178	-7.1729465	comment	3.0	10.0	1596073968	12.371537
24003711	I've admired Drew and the early Drop	I've admired Drew and the early Dropbox team for getting things done and shipped even when compiled python GUIs was edgy as the initial Rails version of Twitter was. But they shipped and validated the market. Now adding all those fancy and cool tech mentioned in the blog post will increase the complexity by a lot but it's not clear what are the real benefits. Does a decreased number of machines running really justify the migration and addition of complexity? Maybe they have some new products in the pipeline that built upon the new stack. Or they waste their time. We will see.	rmoriz	12.509023	-6.9020495	comment	3.0	15.0	1596149681	12.325962
24020224	> Breaking back compat without any n	"> Breaking back compat without any new features on the horizon to justify them is not only ridiculous, it's suicide.I disagree. EmberJS is a great example of this philosophy done right. Major releases of Ember typically have no new features, they just break backwards compatibility in favor of more efficient ways to do things. This ""sets the stage"" for features that get added in minor releases. So when Ember releases a new major, you typically don't have to upgrade to it if you don't want the new features. But it's released so you can measure the level of effort as well as the impact the upgrade would have on your codebase. Contrast this with the way Ruby on Rails releases new major versions, with one giant release every couple years that either breaks compatibility, causes performance/cogn"	tomphoolery	13.089383	-6.4433537	comment	3.0	15.0	1596287786	-15.512779
24038844	Perl was the #3 language on the Tiob	Perl was the #3 language on the Tiobe ranking in 2005. It had massive codebases in banks and other industries. In 2019 it was ranked #19 and the incompatible replacement, Perl6, is #93. Breaking backwards compatibility is hugely costly. It creates immense work as people have to validate that new versions of previously working code meet the implicit, accumulated requirements.Old code will always seem old fashioned. It will not address modern concerns. However, the option to keep using it is very valuable!	vii	12.331615	-7.0391784	comment	3.0	14.0	1596468196	13.168041
24048243	Well, if you have external API calls	Well, if you have external API calls in your Django app and you are running sync (which I would absolutely advice, with running async it is really easy to get an unpredictable performance which is sometimes hard to track down) having the ability to run some views async is really crucial.Otherwise your application might me humming along smoothly at some point and coming to a sudden complete standstill or performance plummets when a random external API endpoint starts to time out. Yes I have been bitten by this :-)To fix this while running sync I have dedicated separate application processes for the views that do external calls, but this makes the routing complex. Alternatively you can juggle timeouts on the external API calls but this is hard to get right and you need to constantly keep tra	whouweling	12.52608	-6.667397	comment	3.0	14.0	1596533670	9.977352
24052379	Something I wish that Django did was	Something I wish that Django did was user defined functions in the template. It has for loops, which is good but it forces you to write the html in top to bottom procedural manner.It would be far better to be able to define a function that you can call for bits of html code that might repeat in the same template.Since I stopped using Django at 1.6 does the new version let you define functions in the templates?	jungletime	12.797634	-6.472564	comment	3.0	12.0	1596562281	9.986239
24058818	I agree with the sentiment but I don	I agree with the sentiment but I don't agree with the language/runtime that is PHP.There are many, many more superior options when it comes to general purpose 'no-framework' styles.	ryan-allen	12.726082	-6.577222	comment	3.0	16.0	1596619778	10.322649
24058904	Is there another programming languag	Is there another programming language one can use for web development without a framework? Genuine question, I always thought that's PHP only advantage.	marinabsa	12.672861	-6.5429096	comment	3.0	12.0	1596620675	10.339259
24096008	Why start this from scratch ? Why no	Why start this from scratch ? Why not build on top of TypeScript ?I get the single pass rationale but isn't it possible to integrate a bundler into TypeScript compiler ?I'm just wondering because Microsoft has a decently sized team of paid engineers working on TS for years now - what are the odds an OSS project outperforms them at implementing their own language (which they also evolve with every release)	rubber_duck	12.367091	-6.6825686	comment	3.0	23.0	1596928762	-10.42477
24121187	From an outsider perspective it's st	"From an outsider perspective it's still make very little sense.I thought ReasonML is a language, an alternative to Elm, PureScript, or other FRP-focused compile-to-js languages. When I check projects on GitHub written using ReasonML it says ""Reason"" as a language name (why is it just Reason, and not ReasonML?). For example, Onivim: https://github.com/onivim/oni2What's BuckleScript then? How is it related to Reason? If it's related why did it have such a seemingly unrelated name in a first place?"	andrewl-hn	12.370695	-7.562499	comment	3.0	13.0	1597159061	10.351742
24137725	I wish that the notebooks supported 	I wish that the notebooks supported Typescript or C# or something I'm more familiar with, out of the box.For C# I have LinqPad, which I'm a huge fan of but never discovered something with similar functionality for typescript.I've seen some open source kernels[0] but I'm not sure about the quality, did anyone try them? Deno core in Jupyter would have been amazing.[0]: https://github.com/jupyter/jupyter/wiki/Jupyter-kernels	egeozcan	12.33484	-6.758348	comment	3.0	10.0	1597270884	-10.511789
24153453	I like the constructor property prom	I like the constructor property promotion, union types, improvements to exceptions and try/catch. Lots to like here.Attributes worry me. Annotations are generally an eye sore to me, but in some places could be justified. For the most part, outside of Symfony, they were not used much. I'm worried that some developer will go bonkers with them, create a nightmare, and that will be the next legacy code base I inherit 5 years down the line.Named arguments is okay I suppose, but IDEs solve knowing the order of arguments. I guess the IDEs will implement an auto complete for named arguments? I guess thats okay, but it will require more vertical code if you care about your lawn and keep your code in the PSR margins.All in all I think this is a solid major, not the quantum leap we got from 5 to 7, b	systematical	12.737994	-6.6715584	comment	3.0	10.0	1597379655	10.299235
24161561	I'm confused, so reasonml is now res	I'm confused, so reasonml is now rescript?	gdsdfe	12.3880005	-7.541741	comment	3.0	13.0	1597430075	10.347556
24174389	I love Erlang/Elixir and want to use	I love Erlang/Elixir and want to use it more, but I just don’t have any good use cases for it! I don’t often make big concurrent back ends - maybe REST APIs, but that didn’t seem easy last time I tried.	hazz99	12.601195	-7.4842725	comment	3.0	17.0	1597545221	12.900226
24173635	The BEAM is great, but the Elixir la	The BEAM is great, but the Elixir language itself is really what spoiled me. After having written ruby for years, I really enjoy what the Elixir language has to offer. Pattern matching[0] and the pipe operator[1] eliminate a ton of intermediate variables. Functional programming took a while to get used to, but I'm really starting to like thinking immutably. Now that I'm more advanced in the language, I'm starting to get into the Lisp style hygienic (and unhygienic macros)[2]. The Elixir standard library is really well done, everything is consistent and well documented. Elixir language level built in libraries like ExUnit[3] and Embedded Elixir (EEx)[4] are very high quality. For me the BEAM is just the cherry on top, I really like the Elixir language itself![0] https://elixir-lang.org/gett	grantjpowell	12.624426	-7.4427977	comment	3.0	35.0	1597537124	12.900478
24175549	> Some teams are happy to use Elixir	> Some teams are happy to use Elixir to write web applications, to fit it into their pre-existing microservice deployment model. I urge developers to reach for those bigger thoughts that fault tolerant lighweight processes enable. You can consider each process a logical microservice, but you don’t need the friction of deploying it separately, and serializing to/from json, and containers, and orchestration, and distributed logging, et.al. You can deploy an entire system of millions of interacting logical microservices in a single BEAM release.This resonates with me instinctually, but I’d love to learn more.  What disadvantages would there be in jettisoning real microservices in favor of Erlang’s “logical microservices”?	amgreg	12.60837	-7.4786963	comment	3.0	14.0	1597557000	-9.291391
24175638	How does BEAM handle system calls? I	How does BEAM handle system calls? If I have a million BEAM processes and each one calls stat(), what happens?	ridiculous_fish	12.411377	-7.4484158	comment	3.0	11.0	1597558208	12.799557
24175725	I use to make the same mistake of th	I use to make the same mistake of the author. It is not the BEAM, it is the architecture that the BEAM force upon you to spoils it (the author).There are deeper points in what the author says. Even if you let a process crash in the BEAM, but you don't leave the system in a consistent, recoverable state, the BEAM is not going to help you.Once you realize this, and have a way to apply back pressure, you can get a lot of the benefits of the BEAM in any language. (Not all, being a VM carefully tuned and design for this pattern still means something, but still.)When you realise that it is so much simpler to leave the system in a consistent state and program very very aggressively, following only the happy path without worrying about errors, you can apply the same pattern every where. Of course 	siscia	12.421622	-7.444127	comment	3.0	12.0	1597559324	12.830194
24176411	I've written a decent amount of Elix	I've written a decent amount of Elixir for a personal project, and have come to a few conclusions.For a start, it's very different. That will become self evident if you try to learn either Erlang or Elixir, when coming from a language like Python/C++/etc (and though Elixir looks a lot like Ruby, it's still more like Erlang, tbh). So that can be classed as a negative.Secondly, fault tolerance in Erlang/Elixir/OTP is not quite as simple as commonly billed. Isolated processes and supervision trees can give you a lot of mileage, but the model is not a silver bullet. I found I still needed to create an error boundary to make an application 'Do the right thing' in very specific error conditions (for example, not killing a running process, when making a single, accidental RPC with the wrong argum	dynamite-ready	12.611103	-7.468604	comment	3.0	12.0	1597569964	12.922102
24196785	> Although I must admit that I would	> Although I must admit that I wouldn't use TypeScript in the backend for the projects we work oneCan u elaborate on that? Why is TypeScript not suited for some projects?	tejinderss	12.391353	-6.753716	comment	3.0	10.0	1597743298	-10.492935
24229407	Some of the listed optimizations wer	Some of the listed optimizations were:> We carefully vet what we eager-load depending on the type of request and we optimize towards reducing instances of N+1 queries.> Reducing Memory Allocations> Implementing Efficient Caching LayersAll of those steps seem pretty standard ways of optimizing a Rails application. I wished the article made it clearer why they decided to pursue such a complex route (the whole custom Lua/nginx routing and two applications instead of a monolith).Shopify surely has tons of Rails experts and I assume they pondered a lot before going for this unusual rewrite, so of course they have their reasons, but I really didn't understand (from the article) what they accomplished here that they couldn't have done in the Rails monolith.You don't need to ditch Rails if you jus	pqdbr	12.770611	-6.8997674	comment	3.0	23.0	1597960030	12.337762
24229457	Obvious how?Are you going to restruc	Obvious how?Are you going to restructure literally thousands of employees and their teams, staffed with Rubyists and organized around your current setup?Will you re-hire and/or re-train everyone?That doesn't seem so obvious...  At the scale of a team like Shopify, refactoring to a different language is probably a non-starter.	sbarre	12.635542	-7.008409	comment	3.0	16.0	1597960352	12.38257
24229592	(contributor here)The project does s	(contributor here)The project does still use code from Rails. Some parts of ActiveSupport in particular are really not worth rewriting, it works fine and has a lot of investment already.The MVC part of Rails is not used for this project, because the storefront of Shopify works in a very different way than a CRUD app, and doesn’t benefit nearly as much. Custom code is a lot smaller and easier to understand and optimize. Outside of storefront, Shopify still benefits a lot from Rails MVC.I’ll also add that storefront serves a majority of requests made to Shopify but it’s a surprisingly tiny fraction of the actual code.	pushrax	12.765213	-6.9300756	comment	3.0	16.0	1597961283	12.34291
24229205	That’s also my question after readin	That’s also my question after reading this post. When trying to shave off milliseconds by going for a full rewrite, moving away from ruby seems like an obvious decision...at least intuitively..	bsaul	12.618908	-7.039403	comment	3.0	20.0	1597958835	-9.025106
24229774	That's about the start of the Ruby o	That's about the start of the Ruby on Rails hype.	pdw	12.748353	-6.9441814	comment	3.0	10.0	1597962554	12.336448
24230368	Funny I upgraded to ubuntu 20 from 1	"Funny I upgraded to ubuntu 20 from 18 last night.  Ruby sass wouldn't work anymore. Why? Well just read what the maintainer said...""When Natalie and Hampton first created Sass in 2006, Ruby was the language at the cutting edge of web development, the basis of their already-successful Haml templating language, and the language they used most in their day-to-day work.""The page continues...""Since then, Node.js has become ubiquitous for frontend tooling while Ruby has faded into the background.""https://sass-lang.com/ruby-sassSo I installed the nodejs version.  And in a few years I'll move over to the next fad...."	systematical	12.618576	-6.7114882	comment	3.0	14.0	1597967472	12.3199005
24237200	Ask HN: How did you escape tutorial 	Ask HN: How did you escape tutorial hell?	duke_core	12.792015	-6.5351872	story	3.0	2.0	1598032249	10.100921
24236106	Maybe I'm not in the right circles b	Maybe I'm not in the right circles but I see absolutely no renewed interest towards PHP. Is there any reason to believe that? Honest question - PHP was my first language (or second if you want to consider mIRC scripting) and I have not so bad memories but at least me and everybody I know moved away from it years ago and don't see people going back to it anytime soon.	outime	12.76984	-6.647045	comment	3.0	14.0	1598026326	10.357184
24236272	> after having to work with it at th	> after having to work with it at the time of PHP3 and 4PHP 5 was released 16 years ago and was a massive evolution of the language. The same is true for PHP 5.2, 5.3, and 7. It's safe to say that your conclusions about the language are no longer accurate.> Is there anything that PHP is developing or adopting that can not be had at other established languages?No. I can't think of any reason to start a new project with PHP today. All of its best features are things that have been available in other languages for years. It's also not particularly popular outside of WordPress.	smt88	12.759136	-6.6820664	comment	3.0	12.0	1598027169	10.329296
24256984	Writing an SSDP Directory in Elixir	Writing an SSDP Directory in Elixir	luu	12.677289	-7.4642887	story	3.0	91.0	1598234981	12.938692
24259424	I don't think it's at all surprising	"I don't think it's at all surprising that there is no relation between tech stack and business success. End-users don't care if you use a single PHP file or a Go binary, they never get to see that anyway. So I don't really see ""it was all a single PHP file"" as a gotcha. The whole thing could've been coded in Assembly, the difference is in the effort required for development, ease of maintenance/scaling up and how well-guarded you are against vulnerabilities."	gargron	12.756225	-6.635934	comment	3.0	27.0	1598266715	10.348198
24259631	Sometimes I think it's fascinating t	Sometimes I think it's fascinating the rabbit holes we'll go down, when ultimately, the user just doesn't care.TypeScript vs. plain JSLogic-less templates like Mustache vs. HandlebarsVue vs. ReactUsing async/await, and adding the relevant infrastructure to support that (transpiler)Clean code practices in generalUnit tests, end to end testsCSS BEM vs. tailwindYou can make indirect connections to imply the user does care, e.g. E2E tests catch a bug which meant the user didn't see it, but generally, these things are meaningless to them.For my first course, I put time into those things - time taken away from making content. The more I think about it for my new course, the more I wonder should I just sell on a platform which already handles all of that, like gumroad.Where's the line though? Whe	umaar	12.4586525	-6.5528755	comment	3.0	11.0	1598268702	-10.451648
24280396	Why does using Ruby or Python preclu	Why does using Ruby or Python preclude having a well-engineered solution?	donw	12.507266	-7.0307403	comment	3.0	11.0	1598430678	12.360277
24282388	He wrote that essay nearly 2 decades	He wrote that essay nearly 2 decades ago. It was a different world. At the time, the only language with a truly comprehensive open source ecosystem was perl, so, if you were going to work on anything else, there was a decent chance you'd end up writing almost everything yourself. That puts you in a spot where your secret weapon is the language itself.Nowadays, I'd argue that the secret weapon is never the language itself. Ruby's popularity was never about Ruby itself, it was about Rails. Python is, IMO, an ugly hack of a language, but it's still the one I'm always pushing for at work, because its unbelievably lush open source ecosystem means that choosing Python means you'll end up having to do a lot fewer things yourself. Java's was originally about cross-platform deployment, but, now tha	mumblemumble	12.349675	-6.996159	comment	3.0	12.0	1598449607	12.35059
24296094	Reminds me a bit of [Convos](https:/	Reminds me a bit of [Convos](https://convos.chat/), a nice Perl based client.	smonff	12.345226	-6.9990053	comment	3.0	10.0	1598549229	13.160374
24315610	Django is already vastly faster than	Django is already vastly faster than human perception. An entire roundtrip to my Django app takes 70 - 110ms. The entire roundtrip is already faster than human perception even in the worst case, and of that Django itself probably contributes something like 2 or 3ms.	Alex3917	12.78495	-6.5154533	comment	3.0	13.0	1598703776	10.019199
24320249	Tiny nitpick: the article describes 	Tiny nitpick: the article describes JavaScript as an interpreted language without JIT when most major JS engines do have JIT optimisation. It’s difficult to make this call about any language with more than one implementation.But anyway, kudos to the PHP folks for yet another improvement. It’s been a long time since I used it but I’m continually impressed by how far it’s come. And it’s a useful test to how flexible a developer is willing to be to ask them to code some PHP, there are fewer and fewer reasons against it these days other than personal style preference.	untog	12.598159	-6.482574	comment	3.0	22.0	1598745342	10.294415
24332118	Elm single handedly got me into func	Elm single handedly got me into functional programming. Everything from the syntax to the standard library. I haven’t used a language that was that elegant and delightful to use perhaps since I discovered Ruby.It makes me really sad that Elm turned to this niche language/framework that it is today. I had hoped for it to grow someday to have a mobile target in addition to web, to be able to use it on the server, hell even to be able to use it to build systems. So much wasted potential.	hashbig	12.966093	-7.673534	comment	3.0	17.0	1598886020	-12.759852
24333042	Sorbet looks really cool, too bad th	Sorbet looks really cool, too bad they developed their own typing system that keeps types in a totally separate file instead of adopting it.	oomkiller	12.520778	-7.1115804	comment	3.0	10.0	1598891409	12.370106
24333424	>The other reason is that many FP us	>The other reason is that many FP users are too enthusiastic about creating abstractions.Elm lacks typeclasses, yet I've found this lack is what keeps a lot of libraries at bay that would have otherwise turned out overly abstract (see any mainstream Haskell library, really). It's the same reasoning behind Go: With great power comes great responsibility. At large, programmers shoot their own feet with powerful languages. Therefore, take away their guns, ie make languages less powerful. I still wish there was something like Elm, but tailored for backend/network programming: https://news.ycombinator.com/item?id=21909087	bauerd	12.962177	-7.6793437	comment	3.0	14.0	1598893264	-12.778658
24334391	I’m excited about performance improv	I’m excited about performance improvements but thrilled at the idea of adding types. Has anyone here worked with Sorbet or a prerelease 3.0 in Rails and able to share some notes?	sickcodebruh	12.544501	-7.1076055	comment	3.0	13.0	1598898256	12.361416
24345150	The author admits to not using Types	The author admits to not using Typescript and not knowing how it works but is quick to point out that it’s polluting the JavaScript community?He does state that typescript is a subset of JavaScript and this compiles to JS so I largely don’t see the problem. TS is making complex projects in JS more tenable and I believe we should encourage TS.A separate repo for TS doesn’t make sense, Microsoft owns npm now by extension of github and is doing fantastic work supporting TS and by extension JS.My hope is the opposite, at some point TS is the gold standard for a package, it is self documenting and again the types can be stripped out (and usually are for distribution).	gvkhna	12.377351	-6.6961603	comment	3.0	13.0	1598985236	-10.464858
24345188	I think comparing typescript to coff	"I think comparing typescript to coffeescript is a very amateur call.Coffeescript specifically decided to throw out ECMA script.  Typescript embraces it.There was SO SO SO much waiting around the "".?"" operator in TS because they specifically did NOT want to do what coffeescript did (make their own, and then get hosed when the official spec came out and they were different from their own implimentation).The -only- difference between TS and JS is the type annotations.  It should be perfectly readable JS aside from that.Objective-C can actually compile C.  Objective-C is a -superset- of C.  So again, the argument is misguided.All the typescript webpack plugin does is strip out typescript stuff.  And that leaves you with the underlying JS.Typescript projects should be pushed up to NPM with thei"	virtue3	12.387285	-6.718784	comment	3.0	14.0	1598985445	-10.478716
24363744	What about this? https://github.com/	What about this? https://github.com/typeorm/typeorm/blob/master/docs/active-r... (Forgive me if this isn't what you are looking for, not super familiar with ActiveRecord myself, just recalled seeing that yesterday!	racedude	13.026709	-6.5257673	comment	3.0	10.0	1599139170	12.253926
24374778	Why use Django when Flask is so much	Why use Django when Flask is so much simpler and has less overhead?For just a REST ML model endpoint, Flask does everything you need, and no more. It's a perfect fit.	VHRanger	12.784361	-6.541545	comment	3.0	11.0	1599226477	10.061526
24396007	The biggest adjustment for me was th	The biggest adjustment for me was the fact that everything is immutable. Apart from that, everything has been simpler to reason about in elixir.Now objects feel very weird.	atonse	12.689575	-7.455878	comment	3.0	15.0	1599442808	12.928705
24396207	Last time I tried Elixir it had some	Last time I tried Elixir it had some rough edges where you had to use some other ugly-ass language (I think it was Erlang?) to do some things. I immediately stopped learning after that. It feels like before learning Elixir, you need to learn Erlang, and I was just too lazy. Kind of using Clojure. You don't NEED to, but knowing Java helps. A lot. You need to learn the ecosystem, standard library, etc. You don't just pull a banana, you pull the gorilla holding the banana.	gosukiwi	12.653394	-7.502777	comment	3.0	12.0	1599446353	12.928836
24397497	I haven't done a release with Elixir	I haven't done a release with Elixir or Phoenix yet and the documentation about it is quite confusing. There are many different ways but I have no idea which one to choose.Why should I deploy with release?	lawn	12.698485	-7.4149504	comment	3.0	12.0	1599465254	12.922793
24398005	> Elixir is layered, making it easy 	> Elixir is layered, making it easy to learn and master. You can get pretty far with Phoenix without ever understanding (or even knowing about) the more fundamental building blocks or the runtime. In large part, this is because of its ruby-inspired syntax. You'll have to adjust to immutability, but that's pretty much it.This is my main problem with elixir. Even for senior developers it's hard to know how the building blocks and runtime works and since all abstractions are leaky, you'll end up with mysterious issues that only make sense once you understand all the layers. And in case of elixir there are lots.	discordianfish	12.737582	-7.3550735	comment	3.0	19.0	1599470526	12.905725
24399904	If you're willing to be patient, I t	If you're willing to be patient, I think that in the next year Elixir is going to get an add-in aggressive static typing library (better than dialyzer) enabled by compiler hooks.  It's going to happen, and it's going to be very good.	dnautics	12.475302	-7.433676	comment	3.0	12.0	1599491185	12.884537
24400657	In ts/js passing an object is not ve	In ts/js passing an object is not very much effort and doesn't add much noise to reading the code.	reificator	12.333953	-6.7272673	comment	3.0	10.0	1599497195	-10.441789
24410294	Anyone else found themselves going d	Anyone else found themselves going down the rabbit hole when doing TypeScript types, and spending more time on the types than the actual code?They are insanely powerful but can be a little too addictive	llimos	12.356163	-6.813521	comment	3.0	11.0	1599584300	-10.426247
33095843	Show HN: Price Tracker for Rei.com	Show HN: Price Tracker for Rei.com	sharps_xp	12.823069	-6.87121	story	4.0	6.0	1664979286	12.351794
33118538	This article is a good example (to m	"This article is a good example (to me) of presenting a ""maths result"" as an incorrect fact.The ""5,472,730,538"" is the number of different (under symmetry) completed grids -- so are we saying we could make a (hypothetical) book with 5,472,730,538 completed grids and say ""Here is all your Sudoku""? Or, that we are only allowed to create exactly one Sudoku from each finished grid? Neither of those seem like reasonable claims.A more reasonable question would be, how many partially completed sudoku grids are there which have a unique solution. We don't know the answer to that.Even if we did do that, I've done some research on measuring difficulty of Sudoku -- many Sudoku grids are unsolvable by humans -- they are far too hard.A different, and interesting, question would be how many Sudoku are th"	CJefferson	13.452644	-7.411111	comment	4.0	53.0	1665129509	15.077417
33120419	"The tech also doesn't help.It's a ""t"	"The tech also doesn't help.It's a ""typical"" Rails application: large, convoluted, lot's of moving parts, and services, and generally slow as molasses (solved by throwing more hardware at it). As experienced Rails dev(ops), I managed to run and help run an instance, but it's not something done on a friday afternoon, let alone scale up.What we really need in this landscape is dead simple services. I'm thinking about the difference between setting up a gitlab or a gitea. The first is Rails, needs ruby, gems, bundler, workers, database server, redis, mailserver and whatnot. And thats for manually installing on a server - no pipeline or anything to manage future changes. The second a single binary (pre compiled from a go codebase) everything statically linked (even sqlite is built in, with opti"	berkes	12.664543	-6.933249	comment	4.0	67.0	1665146492	12.254781
33172493	Are you suggesting that Japanese fou	Are you suggesting that Japanese founders might be more likely to use Ruby?	okdood64	12.618942	-7.0465755	comment	4.0	17.0	1665545769	12.412055
33224982	Hating a language is not at all the 	Hating a language is not at all the same thing as hating its users.PHP is an awful mess, and the fact that it's a common tool for budding web devs makes that worse, not better. New coders should not have to learn to navigate that pile to get anything done. I feel for them because I've been them.	PhasmaFelis	12.760828	-6.6460023	comment	4.0	18.0	1665938437	10.308698
33227419	What is the killer feature of Crysta	What is the killer feature of Crystal?Say, for Go it's utter simplicity and easy concurrency.For Rust, it is the many safety guarantees on top of high performance.For Python, it is the ease of learning and interactive fiddling on top of a colossal ecosystem.Etc. What sets Crystal apart?	nine_k	12.618203	-7.2654257	comment	4.0	14.0	1665956548	-11.221167
33239990	TypeRunner – High-performance TypeSc	TypeRunner – High-performance TypeScript compiler	fabian2k	12.338084	-6.769972	story	4.0	64.0	1666043462	-10.446244
33241274	It's been a few years; has anyone ha	It's been a few years; has anyone had a contrary experience?  E.g., a system with parallelism/concurrency that was reliable and faster than one built in Erlang?	thyrsus	12.4810295	-7.497615	comment	4.0	12.0	1666051489	12.896019
33335805	Rails also has a whole model/databas	Rails also has a whole model/database thing going on.Next.js is just front end focused and has always left it up to the user to decide about data persistence.So to answer the original question, an equivalent would be Next+Database, and there is obvious stand-out answer for what Database should be. I often get stuck deciding what that Something should be when trying to go from 0 to 1.	cal85	12.771177	-6.4440355	comment	4.0	16.0	1666730201	8.077694
33336605	I think the name isn't a great choic	I think the name isn't a great choice, given the already established Turbo ecosystem for Rails/Hotwire. Perhaps Rails can create a gem that makes migrating from one version to the next easier, a Version Compatibility Enhancement Library, calling it VerCEL for short.	bdcravens	12.735524	-6.944798	comment	4.0	14.0	1666734519	12.360066
33359999	>PHP is getting good, sometimes I fe	>PHP is getting good, sometimes I feel better than Typescript even.PHP is good, and has been for years. The Zend VM is probably top 3 in the world next to JVM and V8. Incredibly more performant than Ruby or Python. The bad rap that PHP got in the early days is from all the pre-7.0 spaghetti code that was written. It’s a solid choice nowadays.	ramesh31	12.748891	-6.636494	comment	4.0	13.0	1666887998	10.29605
33396845	I Ditched Django for NextJS	I Ditched Django for NextJS	waprin	12.822723	-6.506574	story	4.0	12.0	1667152569	10.057365
33409597	Is Shopify shifting away from Rails?	Is Shopify shifting away from Rails?	dyeje	12.746236	-6.9400635	comment	4.0	15.0	1667238274	12.347915
33414576	"Quine Relay, ""a Ruby program that ge"	"Quine Relay, ""a Ruby program that generates Rust program that generates Scala program that generates ...(through 128 languages in total)... REXX program that generates the original Ruby code again.""https://github.com/mame/quine-relay(HN thread: https://news.ycombinator.com/item?id=6048761)"	tfehring	12.469482	-7.117868	comment	4.0	13.0	1667257400	12.361079
33430249	What kind of product would warrant t	What kind of product would warrant the cost/benefit of using erlang? Where did you use it? Just curious	cr4nberry	12.557597	-7.5203958	comment	4.0	14.0	1667351801	12.937458
33439284	I'm not sure about the technical det	I'm not sure about the technical details behind their outages since they're a little vague on that, but it's funny how every Rails developer champions Github as a Ruby on Rails shop as why Rails should continue living on when their availability is some of the worst in the tech scene. Lazy evaluation is great until it's not.	brink	12.746487	-6.993173	comment	4.0	17.0	1667408896	12.376139
33441281	> But Ruby by itself has a major cha	> But Ruby by itself has a major challenge in that it lacks any kind of built-in mechanism for expressing variable and method type signatures. Every one of us had managed large Ruby codebases in the past and wanted to avoid the quagmire of uncertainty around what the types of anything are supposed to beRuby has a lot of ways to express the type of information you're passing around. The problem is when you don't validate things coming from users, APIs, and the database, or if you muddy you state in some overburdened god-object. I think the problem is that its so easy to write Ruby code and it less you do almost anything you want, so it is very easy to make a mess. Types may or may not help.I've worked in some big Rails/Ruby code bases and usually any mess was the result of someone who didn'	ch4s3	12.547979	-7.090001	comment	4.0	21.0	1667415909	12.379026
33466197	Two of the links you listed have pre	"Two of the links you listed have pretty good reasons:The creator of uhtml believes there are transpilation bugs. I can't say whether this is true, but if it's an issue for them, I guess that's a valid reason.Jason Miller's tweet also includes a common reason: he isn't good at it and doesn't understand it, or in his words ""the amount of time I have to spend screwing up my already-working code to make TypeScript happy"". This is a big one. TypeScript is hard, and poorly written TypeScript increases complexity. My last job was a TS codebase written by people who didn't understand it and it was a major impediment to productivity.The Rich Harris tweet represents a common misunderstanding about TypeScript types. If your types can be represented by primitives like `string` or `number`, then his JS"	schwartzworld	12.346962	-6.827956	comment	4.0	19.0	1667568056	-10.436996
33497414	I really, really like Ruby-the-langu	"I really, really like Ruby-the-language, and prefer it over python.  I don't love that it's joined at the hip with Rails.compared to Python, Ruby has:  - first-class symbols (yes python has sys.intern but it would take a PEP giving them a pithy syntax to make them usable, plus python has 25 years of stdlib and libraries using ""strings"" or enums for constants instead of :symbols)
  - procs/blocks and better-than-python lambdas
  - ""open classes"" / monkey-patching of builtins (for better or for worse)
  - trivial metaprogramming with method_missing (for better or for worse)

some of these make fun one-off projects easier or faster, some of them would be less welcome in large, mature codebases."	philsnow	12.539523	-7.010978	comment	4.0	19.0	1667770121	12.353225
33498049	So I'm a Ruby fan and I largely agre	So I'm a Ruby fan and I largely agree with you.  I started dicking around with Stable Diffusion recently and was almost immediately reminded of so many things I dislike about Python.But just to be a bit contrary:- I don't see a huge value in symbols.  In Ruby they are literally just static strings which means they use memory you'll never get back – potentially important if you're e.g. parsing something large into a hash and symbolizing the keys.  If you have to put a non-alphanumeric character in a symbol you still need to use quotes.- Procs, blocks, and lambdas – yes.- Metaprogramming and monkey patching?  dfjasdjldfjkdfjlkfdjldfoh4houfhufl.  A double edged sword at best and 100% not something I'd want to see in a larger codebase.  Javascript folks largely learned this lesson with the shi	inferiorhuman	12.5035925	-7.029105	comment	4.0	15.0	1667773158	12.37188
33526018	> Keep all logic out of the database	> Keep all logic out of the database. It already is the slowest point. And hardest to scale up.That's... weird advice. I think a lot of what happens in Rails projects (based on my very limited experience) is that developers start to rely on this easy syntax that ActiveRecord provides and stop thinking about the queries that the ORM is creating. So you end up with these massive N+1 queries that kill performance.This is one of the reasons I like to stay away from ORMs at all costs. A majority of what an ORM provides can be solved by a view or a function.As to Ruby's performance... yeah... it's pretty terrible. We had to completely abandon Docker for Ruby on Rails because the performance was absolutely abysmal, even with VirtioFS enabled.	dimgl	13.104557	-6.461631	comment	4.0	14.0	1667952919	12.248182
33526501	rails, postgres, PORO, and htmx is a	rails, postgres, PORO, and htmx is a monstrously productive stack	arkis22	12.761453	-6.911148	comment	4.0	17.0	1667956734	12.362272
33527592	Ugh, tell me about it. I had an inte	Ugh, tell me about it. I had an interesting weekend dealing with traffic loads that grew by about 7x in a few days. I wrote about my misadventures at https://blog.freeradical.zone/post/surviving-thriving-throug... .The gist of it is that a RoR “Sidekiq” task queue gets CPU bound after about 25-30 worker threads doing things like making REST API calls to remote servers, querying a database, insert status updates, etc. I can’t help but to think that the equivalent written in Go, or even Ruby-without-Rails, could handle many times the traffic with fewer CPU and RAM resources.	kstrauser	12.698807	-6.9702888	comment	4.0	16.0	1667968987	12.344097
33528313	I'm gonna play devil's advocate here	I'm gonna play devil's advocate here: Ruby sucks in large codebases where conventions aren't well defined (unlike Rails, which has well understood concepts and abstractions).Having no ability to do any kind of static analysis means a large legacy codebase will contain giant rabbit holes for you to fall into any and everywhere you look -- unless, of course, the architect(s) responsible for the codebase thought very carefully about this and limited the number of abstractions. If they didn't, you're left stepping through all the metaprogramming and one-off abstraction implementations.Obviously, my experience is anecdotal, but I've decided my current job is the last Ruby job I'll take. I don't see any reason to pick Ruby over Typescript if you're not using a popular framework. Types save an in	boredtofears	12.595115	-7.0448666	comment	4.0	14.0	1667977382	12.352052
33573458	I’m not sure if going to the gym is 	I’m not sure if going to the gym is more cognitively challenging than sudoku. But something like playing football/socker probably is.	bjornsing	13.450163	-7.408583	comment	4.0	14.0	1668263956	15.080658
33622428	Forall X – An Introduction to Formal	Forall X – An Introduction to Formal Logic	anupj	12.989666	-7.2461524	story	4.0	58.0	1668604619	-12.382548
33689407	For TypeScript there's little differ	For TypeScript there's little difference since most of TypeScript support comes from the same language server running in the background (there's an option in the menus to restart it if it breaks, same as in vscode).Although autocomplete is better (especially for pure JS), it doesn't warrant paying for a license IMHO. Personally, I use IDEA for TS because I use it for other languages where it blows everything else out of the water (so muscle memory).Also, if you're doing server-side development, it has a very good built-in client for two dozen databases (which pretty much replicates the functionality of their DataGrip product), so you get decent data editing / import / export / DDL support, and excellent autocompletion for your SQL (interspersed among TS code, or not — doesn't matter).Edit:	5e92cb50239222b	12.364199	-6.777805	comment	4.0	20.0	1669010941	-10.427651
33706111	It looks clean because the developer	"It looks clean because the developers are also the people behind dry-rb. However, I made one production service in Hanami and never again. They put clean syntax above all else. This results in a TON of metaprogramming with very weird results. There were times when a variable name I was using in my code was conflicting with a method called in one of the many `instance_evals` to achieve such ""dryness"" I really do like the structure though with repositories for data.Overall I think the focus with clean syntax/DSLs in Ruby projects with pervasive metaprogramming is one of the reasons the code is so hard to maintain."	specialp	12.564638	-7.0505824	comment	4.0	12.0	1669127178	12.380622
33725336	Ruby on Rails contributors should be	"Ruby on Rails contributors should be called ""conductors""."	naikrovek	12.720219	-6.964673	comment	4.0	12.0	1669242538	12.338079
33725858	Running into concurrency woes of tha	Running into concurrency woes of that whole generation of languages (Ruby/Python/PHP/Java/JS) is how most Elixir developers happen I think ;)	mrdoops	12.613978	-7.4630966	comment	4.0	22.0	1669246067	12.917891
33726103	The BEAM is awesome, but both Elixir	The BEAM is awesome, but both Elixir and Erlang are not really great for concurrency. They lack support for pure functional programming, which is really one of the most useful things in this area.	valenterry	12.553988	-7.475927	comment	4.0	44.0	1669247901	12.882073
33728229	Php is notoriously insecure.It also 	Php is notoriously insecure.It also doesn’t scale well for the size of modern web communities.People also changed the way that they want to interact, from text based BB’s to more media rich, action based social networks.	John23832	12.782134	-6.6062574	comment	4.0	14.0	1669270160	10.30305
33741103	I think about this a lot, and I thin	I think about this a lot, and I think my core beef with stuff like this is:- Engineering team has a problem- Engineer/Lead/Architect reads a book- Whole team builds an in-house, bespoke framework around the book's ideas- They now have 2 problemsI'm very against in-house frameworks; I think they almost never deliver on value, and you should just use Rails/Django/etc (again, you almost certainly won't outdo them).But if you use a framework that implements DDD (or SOA, or whatever), I'm very OK with them. For instance, I think that Django is basically DDD/CQRS/SOA: views are the service layer, models are entities, querysets are repos, REST is defacto JSON-RPC, etc. And you do start to realize the benefits: engineers aren't bogged down with irrelevant stuff like request (de)serializing, they d	camgunz	12.815099	-6.5284595	comment	4.0	18.0	1669372900	10.060501
33785199	Crystal is a lovely language. The la	Crystal is a lovely language. The language community is small though, and learning resources are also small. The story for Crystal is the same story for many programming languages: grow the interest of users, and find generous funding.My impression is that not many Ruby programmers have switched to Crystal. The slow(ish) Crystal compilation will not please Ruby users. And Crystal for Windows is still in beta.Despite these factors, Crystal is a pleasure to use - fast, readable, and a well-featured standard libary.	open-source-ux	12.613861	-7.255363	comment	4.0	23.0	1669712052	-11.228582
33794079	> The thing about 'Did you mean? nam	> The thing about 'Did you mean? name' is just a guess to help you.And instead it throws anyone who hasn't extensive experience with Ruby's quirks into a spiral of misery.	ohbtvz	12.604975	-7.0472465	comment	4.0	15.0	1669759765	12.374101
33796976	Ruby is one of those things people l	"Ruby is one of those things people love to hate.I've worked with Ruby for nearly ten years and have been hearing some variation of ""Ruby is dying"" since forever."	lbrito	12.619526	-7.041285	comment	4.0	36.0	1669781858	12.385596
33798082	Show HN: I built my own minimal PHP 	Show HN: I built my own minimal PHP framework	aussieguy1234	12.743445	-6.5144596	story	4.0	9.0	1669794704	-6.573288
33799111	I associate Ruby with a particular e	I associate Ruby with a particular era of hipster web and app development, ~2007-2010. I don't know why but it's not quite attractive.That said the serious reason I don't try it out is because I fear it would be like Python, and I don't need two Pythons in my life. If Ruby had been dominant I'd likely be using Ruby and thinking the same of Python.	bigDinosaur	12.576561	-7.0019097	comment	4.0	12.0	1669805564	12.380732
33828532	> - Very poor typescript support.If 	> - Very poor typescript support.If you use class components and prop decorators, the TS support is actually pretty nice. Kinda boilerplate heavy, but nice.	Semaphor	12.3783045	-6.793478	comment	4.0	12.0	1669973845	-10.457998
33850859	I don't even use PHP regularly anymo	I don't even use PHP regularly anymore, and never did encounter that message even when I did --- probably because my use of PHP predated all the OOP stuff --- but I still remember that word after reading articles about this precisely because it's so memorable. It's sad to see that they removed it in an attempt to effectively dumb down the language even more to cater to those not willing to use their brains and learn a bit about its (IMHO interesting) history. The other example of memorable words that I associate with a programming language are car and cdr.	userbinator	12.765074	-6.6431966	comment	4.0	28.0	1670131244	10.342209
33884852	oh yea.using a software framework li	"oh yea.using a software framework like django for ""rapid application development"" gives me a feeling closer to writing configuration files rather than actually ""programming"" (where ""programming"" is writing hardcore algorithms).but don't get me wrong, I liked doing that, I got paid to do it. But let's call it for what it is: that python code (django app) was really django framework config.this is a simlar phenomenon but worse, at least I could look around all of the actual code of the program for which I was writing configuration as code.then, the thing about hardcore algorithms is that they need to be written once, and then everybody can use them. this is a giant problem. as I think about this, such hardcore algorithms are digital artifacts, so they are subject to the same problems all oth"	somrand0	12.7183075	-6.5218453	comment	4.0	18.0	1670351641	10.099788
33894365	My god this is awful. He was brillia	My god this is awful. He was brilliant, accomplished, and kind. A few days ago he announced his 'permanent rest' (https://twitter.com/ChrisGSeaton/status/1599108759183577088). I'd thought it meant from the Ruby community and that the replies asking if he needed help were reading too much into the wording.	kshahkshah	12.624696	-7.0494084	comment	4.0	43.0	1670421535	12.38482
33895359	Hi everyone! I want to align everyon	"Hi everyone! I want to align everyone expectations and say this is not related to the Elixir language itself but rather the Elixir ecosystem.The language has been stable for years and non-minor features always discussed upfront through several proposals. With that said, if you are interested on the work happening on types, I wrote recently about it here: https://elixir-lang.org/blog/2022/10/05/my-future-with-elixi...This announcement is about a new project, which we are very excited about and working on for months. We hope to officially release it tomorrow (Thu UTC). We are dotting the ""i""s and crossing the ""t""s right now.I was definitely not expecting this to make to the front page, I should perhaps be more careful the next time. :)"	josevalim	12.626685	-7.451433	comment	4.0	14.0	1670426543	12.944565
33907623	The fact that the language is weirdl	"The fact that the language is weirdly executed server side is a non starter imo. PHP is still the only language doing that no?Edit: I'm talking about the php code being compiled / run by an external process which makes the whole thing staless.It was a ""working"" design when people were dropping .php files in ftp folder on some hosting provider."	Thaxll	12.74872	-6.6304154	comment	4.0	16.0	1670505969	10.279692
33907954	PHP was the first open source langua	PHP was the first open source language in which just anybody could write server-side web applications without terrible management problems for the sysadmin.  First people wrote cgi-bin scripts in Perl, which were not efficient because they forked a process for each request.  There was mod-perl which was more efficient but prone to memory leaks.  A few people wrote cgi (or fast-cgi or Apache module) programs in C/C++ but that was insane since a return after a 𝚜𝚝𝚛𝚌𝚙𝚢 is Turing complete in C and there weren't any mitigations for this in the 1990s.PHP opened the door to cheap web dynamic web hosting and in turn you had self-hosted applications like Wordpress.  It was a few years later that languages like Java and C# became really attractive for back end work, you also had Ruby, Node, etc.I wro	PaulHoule	12.689292	-6.6142354	comment	4.0	22.0	1670508241	10.313465
33921825	Protip: in CRUD applications, most p	Protip: in CRUD applications, most performance issues from the data layer have nothing to do with the database.Typically, the performance issues are at the ActiveRecord level, when it's initialization 100s of instances of an object to render a table.  With Rails, the #1 optimization technique is to use `ActiveRecord::Base.connection.exec_query ` to return a hash instead of initialization objects.Side note: I still love Rails.	winslett	12.833241	-6.7905993	comment	4.0	15.0	1670597680	12.227705
33935460	It's interesting that they appear to	"It's interesting that they appear to plan to use with Rails as a back-end (they mention Rails bindings), as Rails 7 release corresponded with  a solution which appears somewhat similar to me, turbo/stimulus. (I want to provide a link to it, but I honestly don't know any great docs for it!)But I haven't used stimulus/turbo myself. I'd be interested in a compare/contrast between Rails' Stimulus/turbo and ""Unpoly"" covered here.There also seem to be a number of other non-Rails-related offerings in this space too. They seem to be really multiplying, which I think shows the exhaustion with JS front ends and desire for things in this space (I am not sure quite what to call it). But I wonder if we can converge on one or two instead of creating more and more. One of the benefits of a popular layer "	jrochkind1	12.786959	-6.5938334	comment	4.0	15.0	1670698036	12.29736
33970770	Ask HN: Is Anyone in Industry Using 	Ask HN: Is Anyone in Industry Using Logic Programming?	joeatwork	13.073055	-7.36208	story	4.0	5.0	1670947845	-12.443472
33984318	> But there's a problem. Rewriting a	"> But there's a problem. Rewriting a library like TypeScript is extremely challenging. First, ""absence of [a] specification"" for TypeScript's behaviour. Donny's had to infer TypeScript's behaviour mostly test cases alone.IIRC the TypeScirpt leadership is of the position that the implementation is the specification, which is unfortunate, because it means that the bugs in the implementation are necessarily part of the specification as well."	Tade0	12.35291	-6.860796	comment	4.0	48.0	1671030109	-10.469387
33987340	TypeScript is complicated because Ja	TypeScript is complicated because JavaScript is complicated. As long it's sticking to the core goal of giving JavaScript static types in a practical way, complexity is unavoidable. I think what you want is a new language.(I say this not as a dig against TypeScript or the way it's been designed; I just think the parent wants it to be something fundamentally different from what it is)	brundolf	12.341249	-6.8462257	comment	4.0	19.0	1671041519	-10.441929
33991241	I agree that Typescript improves wit	"I agree that Typescript improves with each release as I and the people I work closely with use it, because we use the KISS approach to typing so we rarely do use new features, but when we do need them they're useful.But then I find some third party code which seems to use the kitchen sink approach to typing, AKA the ""look at how smart we are"" approach, and it's a nightmare to understand. A type system is supposed to make code easier to work with, by the time you're spending more time understanding the types than the actual code there's something wrong.In these cases I wish Typescript was more limited and I would gladly give up a lot of the new stuff to enforce simple types across the ecosystem.That said, I don't really have an opinion on who is at fault here - coders for writing overly ela"	esperent	12.328067	-6.859254	comment	4.0	26.0	1671055335	-10.445335
33997400	Has anyone done one of these (or wan	Has anyone done one of these (or wants to) for PHP?	simonhamp	12.7505	-6.5961227	comment	4.0	16.0	1671098656	10.312365
34001487	i have been working professionally w	"i have been working professionally with ruby on rails for about 3 months now, coming mainly from a javascript ecosystem.im still struggling. there's a lot of magic happening. i'm not bad with the ruby language itself. but i""m so used to first principles. im open to suggestions on improvement here"	memonkey	12.706289	-6.9295077	comment	4.0	12.0	1671119924	12.356525
34041932	It's not dead, ok.Can we say it's mo	It's not dead, ok.Can we say it's mostly dead?For example, is it more or less dead than perl?	ithkuil	12.360284	-7.0139875	comment	4.0	20.0	1671392200	13.252012
34067339	It really didn't otherwise there wou	It really didn't otherwise there would be a lot more than just those two, everyone would follow their beat. We all ran rails 10 years ago and realized that unless you're a large corp with money to burn on 'ecosystem' then Rails doesn't make a lot of sense.I want to like rails and to see it do well, but it's not keeping pace with the rest of its peers. As competitive as web dev is these days, it's not sufficient to just be rails, you need a ruby alternative to rails as well. Look at javascript. Nobody uses javascript straight up, there's a multitude of rails-like frameworks for javascript. A new one is made each day, and they have staying power.Ruby has Rails, and some might argue that metaphorically speaking Rails has Ruby, by its polite little balls. Unfortunately Rails's star power is ou	aliqot	12.747903	-6.8906264	comment	4.0	13.0	1671550605	12.349453
34067997	> Later in the year, Rails retired W	> Later in the year, Rails retired WebpackerIs Rails anti Typescript? It’s weird to see most other JS environments move to Typescript by default, while Rails now now ignores the ability to use it without jumping through hoops.	stevebmark	12.605696	-6.8380747	comment	4.0	18.0	1671553096	-10.449182
34077786	As a newb, what editor to use for Ru	"As a newb, what editor to use for Ruby? It's one of those languages that VS Code does not cover properly and I can't really find good setup for nvim or emacs. RubyMine works wonders but I'm poor.Also, why is Ruby ""editor responsiveness"" (not sure what to call it) so much worse than e.g. Python?"	barrenko	12.54479	-7.0224857	comment	4.0	13.0	1671608502	12.41772
34090538	Django is lovely, but it uses so muc	Django is lovely, but it uses so much Python magic, so much metaclass chicanery, that if you try to use it moderately differently you'll hit roadblocks.	EdwardDiego	12.821586	-6.5367155	comment	4.0	18.0	1671691362	10.087047
34090776	Python needs a better and newer full	Python needs a better and newer full stack framework.Been using Django for long but I consider its ergonomics to be quiet ugly from class based mixin views to models and forms being two separate things among others.	wg0	12.798317	-6.511645	comment	4.0	12.0	1671694116	10.0839615
26546121	Crystal has a GC. I see it as more s	Crystal has a GC. I see it as more similar to the likes of Nim, Swift, Java or C#.It's a great language regardless.	the_duke	12.542838	-7.2884493	comment	4.0	39.0	1616443462	-11.000108
26546206	If curious, here are the significant	"If curious, here are the significant past threads I found. Others?An Introduction to Crystal - https://news.ycombinator.com/item?id=26217013 - Feb 2021 (39 comments)Switch from Ruby to Crystal - https://news.ycombinator.com/item?id=25005780 - Nov 2020 (35 comments)Go vs. Crystal Performance - https://news.ycombinator.com/item?id=23615303 - June 2020 (160 comments)Ruby vs. Crystal Performance - https://news.ycombinator.com/item?id=23431941 - June 2020 (148 comments)Crystal 0.34 - https://news.ycombinator.com/item?id=22800139 - April 2020 (31 comments)Towards Crystal 1.0 - <a href=""https://news.ycomb"	dang	12.615819	-7.2534103	comment	4.0	23.0	1616443830	-11.279557
26547704	All of those points are already met 	"All of those points are already met and in a better way by mature languages like e.g Kotlin. Really the only argument would be the ""Ruby elegance"" (or familiarity?) which I don't know. What make ruby/crystal more ""elegant"" (I would prefer the term readable) than the competition?"	The_rationalist	12.589657	-7.128859	comment	4.0	36.0	1616449752	-10.778607
26565297	I'm just getting in to Node, coming 	I'm just getting in to Node, coming from only having used PHP and then Laravel. Is it a bad time? Using Sails.js for rapid prototyping.	benlumen	12.751065	-6.5860662	comment	4.0	13.0	1616579998	10.3146
26580941	I feel like we don’t need a novel la	I feel like we don’t need a novel language for this. There’s already a pretty-well-known language that’s almost a DSL for “making complex finite-state machines easy to create”: Erlang.I know that sounds wacky, so let me pitch you on that idea :)In ‘primitive’ Erlang (i.e. Erlang without OTP), each FSM state is just a function, that can contain its own event loop (`receive` statement) to accept input, and then can transition to a new state based on that input by tail-calling another function.Such an Erlang module is a direct, 1:1 encoding of the FSM you’d draw on paper — and very readable as such — but is also plain-old executable Erlang code! In fact, this is basically the most idiomatic Erlang code you can write, syntactically. It’s when the language is at its best and most compact/expres	derefr	12.389809	-7.465883	comment	4.0	19.0	1616683630	-10.088826
26622643	Wasn't a TypeScript runtime the orig	Wasn't a TypeScript runtime the original Deno selling point? Didn't the project have to pivot away from that?	threatofrain	12.473825	-6.489299	comment	4.0	23.0	1617029767	-10.903941
26644458	This is how we learned Ruby at bootc	"This is how we learned Ruby at bootcamp. The problem was that once we got to the more complex Rails parts, the instructors didn't have the time to fully explain it so it was explained as ""Magic, don't worry about it too much"" which was extremely frustrating"	jack_riminton	12.756711	-6.943808	comment	4.0	28.0	1617176130	12.356676
26659929	>What I did love about perl though —	>What I did love about perl though — something I don't find in modern languages — is its carefree playfulness, which must have stemmed from the hacker culture associated with it. I still chuckle every time I use Carp for debugging. Carp::croak, Carp::confess, or Carp::cluck are genius!As someone who works with a legacy system written in Perl  (we're slowly moving to Go), I absolutely hate this. It's completely obscure for no reason, and that's just not fun. I'm glad no language does this anymore.Same goes for Perl critic levels: --brutal | --cruel | --harsh | --stern | --gentle, they're all compleyely useless at conveying any meaning! why is brutal > cruel??	throwaddzuzxd	12.335378	-7.023567	comment	4.0	17.0	1617282147	13.175119
26659115	This was the problem. It's now been 	This was the problem. It's now been fixed. Or do you think Perl 6 was the more meaningful name?	kqr	12.350192	-7.0548735	comment	4.0	16.0	1617276740	13.193956
26674475	Is there a possibility that Crystal 	Is there a possibility that Crystal could be used on MCUs? What would be its advantages over Micropython, C/C++/Rust or Zig?	ducktective	12.604193	-7.264836	comment	4.0	12.0	1617388871	-11.280382
26710906	Django has a few drawbacks:1. It’s t	Django has a few drawbacks:1. It’s tricky to use in non-web contexts.  If you ever need something to happen as a response to an event which is not a web request, Django makes this difficult and ugly.2. Django also more or less requires ownership of the database in order to function as intended.  If you want to have your Django objects in your own database and handle schema changes centrally (to, for example, alleviate problem 1 above), you must also abstain from some of Django’s power, i.e. migrations, etc.	teddyh	12.874448	-6.48337	comment	4.0	12.0	1617711710	10.058761
26713534	Django 3.2 – News on compressed fixt	Django 3.2 – News on compressed fixtures and fixtures compression	pauloxnet	12.838547	-6.509313	story	4.0	86.0	1617724960	10.0336075
26715234	I’m tempted to go FastAPI over Djang	I’m tempted to go FastAPI over Django on my next project, even though I’ve been a big Django user. A little more performance and a little less coupling, and maybe you can survive longer as a Python monolith. Then convert to Rust/Go/something in the unlikely event of wild success.	travisjungroth	12.626451	-6.579659	comment	4.0	23.0	1617732304	10.01551
26719756	Agree. I don't know if the Ruby inte	Agree. I don't know if the Ruby interpreter is what I'd look to for performance in a game.	tomlin	12.57617	-7.067756	comment	4.0	21.0	1617760942	12.381611
26761455	Native Elisp Compilation landing in 	Native Elisp Compilation landing in Master soon	Decabytes	12.689619	-7.34406	story	4.0	32.0	1618062342	-10.4758215
26779483	Perl 6 has been recognized as its ow	Perl 6 has been recognized as its own thing, now -- that's all over. The perl we all know and love is quite alright, and holding its own.	arbitrage	12.338342	-7.0490336	comment	4.0	14.0	1618235777	13.1862545
26792741	Livebook: a collaborative and intera	Livebook: a collaborative and interactive code notebook for Elixir	josevalim	12.679671	-7.4094048	story	4.0	65.0	1618324686	12.935285
26828391	What do they want async for? PHP's p	What do they want async for? PHP's purpose is to run once to generate one HTTP response - they'd already forgotten this by inventing frameworks, but adding async seems to especially have forgotten this.PHP already had curl_multi_perform which is very useful for running child tasks, but I'm not sure you need much more than that.	astrange	12.543722	-6.7565494	comment	4.0	12.0	1618537228	9.625971
26830836	> I would say that Laravel is an ext	> I would say that Laravel is an extremely high quality frameworkI strongly disagree. My experience with Laravel made me see it as a medium quality framework with many flaws. I'll point out to a few of them.The source code quality of the framework is not very high, and locally very poor. For instance, you can't autocomplete normally with an IDE unless you load extra declarations of the magic. Sometimes functions return values of varying types. And, last but not least, there are many cases where a call to a method on on object is intercepted by the magic `__call()` and redirected to another object created on the fly.As pointed above, the abuse of magic means browsing the Laravel API is a nightmare. You won't see methods that you may call. Overall, the official documentation is tutorial-orie	idoubtit	12.8111925	-6.651483	comment	4.0	15.0	1618559358	10.357348
26853867	Is it just me or is Elixir being tal	Is it just me or is Elixir being talked/written about more in the past couple of months?	Pandabob	12.698618	-7.4612737	comment	4.0	34.0	1618763407	12.949668
26869758	Are there any large open-source Elm 	Are there any large open-source Elm apps? I've had trouble finding anything other than toys, libraries, or dev tools.	bestcoder69	12.998689	-7.687575	comment	4.0	13.0	1618881809	-12.770769
26913859	A Hitchhiker's Guide to Reinventing 	A Hitchhiker's Guide to Reinventing a Prolog Machine (2018)	vg_head	13.137299	-7.2878275	story	4.0	82.0	1619179693	-12.48752
26930906	But the number of people who underst	But the number of people who understand verilog, but not typescript (or at least javascript), is probably close to zero.	tobyjsullivan	12.339085	-6.6646857	comment	4.0	12.0	1619334574	-10.455707
26950945	It’s because it makes no effort to p	It’s because it makes no effort to prevent people doing insanely insecure things. Rails has a lot of safeguards for insecure things like using user input to update a record.PHP won’t even fix bugs due to backwards compatibility. They worked out their sql string escape function didn’t escape properly but instead of fixing it and telling everyone to check their code, they duplicated the function and prefixed the name with “real_”.	PurpleFoxy	12.837491	-6.66163	comment	4.0	18.0	1619488621	12.281042
26984119	You could set argv[0] too:  $ perl -	"You could set argv[0] too:  $ perl -e '$0=""/usr/sbin/httpd"";fork or sleep 1000';ps"	tyingq	12.37798	-6.9484816	comment	4.0	16.0	1619718047	13.103564
27063750	The doc contains cheatsheets such as	"The doc contains cheatsheets such as ""Gleam for X users"" where X is currently Erlang, Elixir, Rust and Python. I think this is a fantastic idea and could be adopted by other language communities!Might I ask for some more guidelines on how to incrementally incorporate Gleam into existing projects in BEAM languages? A guide on interpolation with a phoenix codebase and toolchain would be wicked cool."	natrys	12.536814	-7.4485264	comment	4.0	17.0	1620311216	-12.345761
27107832	Show HN: Automatic Documentation for	Show HN: Automatic Documentation for TypeScript Packages	velut	12.464684	-6.462814	story	4.0	14.0	1620664222	3.9763234
27118516	on the contrary - tsc is so slow tha	on the contrary - tsc is so slow that most people use babel to strip out types in production.	swyx	12.376591	-6.649634	comment	4.0	12.0	1620743407	-10.456783
27128949	Uhm, so this submission was edited a	Uhm, so this submission was edited and renamed to Deno 1.1, but this is release version 1.10 as in version one dot ten.	caspervonb	12.522345	-6.455473	comment	4.0	14.0	1620817915	-11.054671
27141918	Yeah I'll pile on here. DDD is a pro	Yeah I'll pile on here. DDD is a process fix, not a tech fix, and broadly unless you're using Java, you can't implement it very well. Or, you'll find that you're actually using it without knowing it. Case in point, we used Django at my last gig and Django basically is DDD (apps are domains, models are entities, etc). We then started implementing DDD and essentially built weirdly named Django on Django, with way worse performance--and now any engineer we hired had to know two things (Django _and_ DDD).I wouldn't necessarily blame DDD here though? Mostly the problems were we didn't have reasonable performance metrics. Our CTO thought we had a problem, then he decided we should implement DDD, then we implemented it, and he thought we no longer had a problem. But there were no numbers to point	camgunz	12.826569	-6.498906	comment	4.0	31.0	1620913054	10.048351
27164178	I wish the Denite plugin would get m	I wish the Denite plugin would get more direct credit as prior art here.	nerdponx	12.507035	-6.4553123	comment	4.0	15.0	1621076803	-10.981671
27167146	So many people are bringing up TypeS	So many people are bringing up TypeScript here as an example of how JavaScript isn't so bad. I kinda feel like that's cheating. Like saying eggs are absolutely delicious when baked into a cake - you're praising something after it has been turned into an entirely different product.Maybe TypeScript is great, but I just don't like the idea of depending on transpilers to not suck when creating the final code, and also having to debug that transpiled code, and then the whole transpilation step in between the standard command-S-command-tab-command-R workflow (this is also why I never use SASS/LESS if I don't have to).Once JS itself has strict typing and real classes, and enough time has passed that I can be assured 95% of people using five-year-old browsers will be able to use it, then we can ta	Cyberdog	12.365066	-6.594869	comment	4.0	21.0	1621099780	-10.4336405
27167748	> Furthermore, TypeScript is a great	> Furthermore, TypeScript is a great language and I find myself being so much more productive in it than I was in Java, especially when it comes to refactoring.I don't really see how. TS doesn't seem to solve any annoying problems I previously had in Java. As a concrete example, it would be nice to have the concept of a DTO as a first-class language feature, but alas, I find myself constantly casting and re-casting, plucking, or writing endless wrappers to make sure properties trickle down (or up). Hell, sometimes I just give up and use `any`. I mean, this is a web-first language that has no concept of sending objects over the wire.. okay then.TypeScript's generics system is cute, but I think it's mostly academic. And did you look at the toolchain? To get TS working, you need babel or ts-n	dvt	12.332447	-6.8366885	comment	4.0	24.0	1621103940	-10.346946
27177170	As a real database language with ad-	As a real database language with ad-hoc-queries you're fine with SQL. Data-intensive graph analysis (the reason soufflé, souffle-lang.org, was developed) where you have a fixed set of deduction rules and change the database instance is an ideal playground for Datalog.And soufflé is incredibly fast and for the usual benchmarks, like the transitive closure in comparison to recursive CTEs in SQL, blows everything out of the water. (my paper on that http://ceur-ws.org/Vol-2368/paper3.pdf, Figure 3)I'm researching using Datalog as a general purpose programming language (specifically for use in microcontrollers, like Arduino) for my PhD and it can be very expressive.	maweki	13.216366	-6.9780273	comment	4.0	24.0	1621200566	-12.415731
27183630	I don't want to stretch metaphors to	I don't want to stretch metaphors too far here but there's some truth in what you're saying. TypeScript usage is a tiny minority of JavaScript usage but it's climbing and I'm sure it's much higher than CoffeeScript ever was.But I see TypeScript as a different beast altogether because of its aims. CoffeeScript and Kotlin were both created to make a complicated messy language more straightforward and powerful. TypeScript aims to make JavaScript safer by introducing types. If anything it slows development down, not makes it faster (and before someone jumps on me for saying that: yes, I think it's worth the price). IMO that makes comparisons difficult.	afavour	12.389258	-6.7238736	comment	4.0	19.0	1621260824	-10.468263
27197520	The core insight of Erlang is that h	"The core insight of Erlang is that having lots of little processes communicating over a message bus is a great way to design code. It also proves by demonstration a statement that many programmers, especially in the past decades, would have found hard to believe, that you can structure code as a whole bunch of relatively small self-contained services. Many programmers, perhaps even today, would not believe how far you can get with such a model, thinking that fairly massive monoliths are still really the only way to scale up.Rather than specific examples, let me provide terms to google, as these are now such rich spaces that even a list of examples would be impoverish. Google ""message bus""; there's half-a-dozen solid production options you can deploy yourself, and all the major clouds have "	jerf	12.551585	-7.496537	comment	4.0	15.0	1621356841	12.940837
27208150	> For the people who understand Elix	> For the people who understand Elixir/OTP's strengths it's excellent.Is there any place to read about this on a more or less basic level? I bet many people will just ask what benefits they may get from this instead of apps build using Go (for example) + rabbitmq	konart	12.675607	-7.454665	comment	4.0	13.0	1621430369	12.883366
27215633	Oh yes, @joelbluminator, the troll-i	"Oh yes, @joelbluminator, the troll-in-chief when it comes to Elixir posts. You really have an axe to grind against this language, do you?> For one I really do think Elixir is a horrible career choice and I wanna save young average developers who still have time to correct that mistake (https://news.ycombinator.com/item?id=27204755)Sadly, your trolling is too subtle to get shadow banned, so we are doomed to keep reading your inane comments in every Elixir thread, hiding under the cowardly guise of ""doing it for the young developers.""https://hn.algolia.com/?dateRange=all&page=0&prefix=false&qu...> Im not at all negative about Elixir. It could be a fantastic tool, I never used it. (https://news.ycombinator.com/item?id=26905869)"	1_player	12.699701	-7.4653745	comment	4.0	12.0	1621465945	12.950706
27216100	This is totally false, I dare you to	This is totally false, I dare you to write anything close to e.g. BERT with Prolog.	xkapastel	13.143419	-7.2983384	comment	4.0	15.0	1621470918	-12.475933
27227447	Yes web developing is so hard...sudo	"Yes web developing is so hard...sudo apt install apache2 php libapache2-mod-php;
vim /var/www/html/index.php"	Tommek	12.769988	-6.559249	comment	4.0	13.0	1621545642	10.289606
27235575	I'm very much in favour of seeing pe	I'm very much in favour of seeing performance as a key part of the development of any dynamic, interpreted language. (I single out dynamic languages because in most typed, compiled languages, fast execution speed comes for free.)However, David Heinemeier Hansson, co-founder of Basecamp and creator or Ruby-on-Rails, has this interesting take on the cost of running Ruby for their business. Make of it what you will:Only 15% of the Basecamp operations budget is spent on Ruby (2019)https://m.signalvnoise.com/only-15-of-the-basecamp-operation...	open-source-ux	12.654449	-6.976718	comment	4.0	13.0	1621612104	12.364252
27245032	Everyone here is talking about how g	Everyone here is talking about how great PHP is, but why don't we consider it for use nowadays?  I know some people still use it, but it's not really an option most people consider anymore.  Is that just because it's not cool or modern anymore, or are there some fundamental problems with it that make it a non-starter?	lifeformed	12.7694025	-6.645736	comment	4.0	12.0	1621676804	10.338144
27249883	KG are cool, but I haven't find a pr	KG are cool, but I haven't find a practical framework of combining simple logical predicates with temporal facts (things that are true at a certain moment in time) and information provenance (the truthiness of information given the origin). There might be ways to encode this information in a hyper graph but they are far from practical.	wrnr	13.1334095	-7.081154	comment	4.0	21.0	1621714232	-12.374448
27310924	Another big issue is the ability to 	Another big issue is the ability to seamless transition parts of your software between different programming models. We just don't have good solutions to this that I know of. The thing with SPAs is that you are probably worse off starting with a traditional server-rendered HTML web site and slowly introducing more and more interactivity, unless you know you won't eventually be better off with an SPA at the foundation (or unless you've planned and budgeted for that eventual rewrite).React is actually great at embedding individual interactive components on a static HTML page (like an interactive chart or table component, or even a fancy button). You can go a long way just having your Rails app render a navigation menu and application shell, and each page just loads a big React component in t	tshaddox	12.807089	-6.5513053	comment	4.0	14.0	1622167001	12.292506
27324291	On DataFrame datatype in Ruby (2016)	On DataFrame datatype in Ruby (2016)	Tomte	12.478121	-6.945561	story	4.0	32.0	1622284376	12.373633
27337310	I keep getting downvoted on Reddit f	"I keep getting downvoted on Reddit for stating that I personally hate TypeScript to the max. It ruined the beauty of JavaScript (once you know it, anyway, I understand there are difficulties for JS-novices) and I honest to goodness 100% do not EVER find myself thinking: ""Gosh, thanks TypeScript!"" - on the contrary, it's always: ""For fuck's sake you stupid POS TypeScript, you're wasting my time for no benefit at all.""Strong-typed languages (especially in the damn browser) make no sense to me. It's not like we need to manage memory or anything.20+ Years of experience here, and I hate TS with the passion of a thousand suns."	734129837261	12.343224	-6.759869	comment	4.0	12.0	1622412224	-10.447234
27380976	> Feel free to use and maintain Pyth	> Feel free to use and maintain Python 2 indefinitely or move to a different language. Most of the rest of us will move on since the conversions were not that hard and the improvements worth it and we were given 10+ years to do it.Maintaining Python 2 indefinitely is an option actively being taken away from people.  More importantly, fuck anyone who wants to direct my budget!  There's things written in Python 2 ages ago that don't justify additional developer time in my company.  Except the community is making us do it.If you think migrating some ancient Django app to modern Django is trivially easy, why don't you come do it for us?	busterarm	12.552122	-6.6662045	comment	4.0	31.0	1622726902	9.99266
37581553	I really love Elm's way of writing h	I really love Elm's way of writing html. It's like writing html without closing tags, just indentation.	the_gipsy	12.990632	-7.67605	comment	4.0	12.0	1695196175	-12.762644
37595663	Elixir: a relatively thin layer arou	Elixir: a relatively thin layer around Erlang that you eventually have to learn anyway.Elixir is sort of a gateway drug to Erlang, sooner or later you want the real thing.	jacquesm	12.625894	-7.4848714	comment	4.0	33.0	1695291942	12.927798
37597056	I read that Brex moved away from Eli	I read that Brex moved away from Elixir to Kotlin. If Elixir was really that great then why would a company put such a big effort to ditch it? That killed off my interest in learning it, but maybe their reasons were invalid? Genuinely curious.	daxfohl	12.677477	-7.4676175	comment	4.0	15.0	1695301560	12.942972
37637483	The one thing I dislike about Elixir	The one thing I dislike about Elixir is the confusion caused by how some libraries execute their functionality in-process and others spawn a supervision tree and message pass - putting your work in a possible queue that can get overloaded.Its a common pitfall for more inexperienced devs and I think its just a symptom of the language conventions.Everyone is taught genservers with a client-side API existing inside the same module as handle_ functions and it blurs the distiction some.I think if the convention was to create a separate module to implement the client-side convenience functions then the client-server split would be more obvious.	pests	12.643323	-7.4562483	comment	4.0	20.0	1695591766	12.9128475
12538036	Because a lot of notable ReactJS pro	Because a lot of notable ReactJS projects are irritatingly enamored with all the latest ES6/ES7/ESCloudCuckooLand features, not all of which are supported by TypeScript.I've noticed this a lot in the Redux realm. For every possible problem there seems to be a solution that harnesses one particular new/proposed bell & whistle.	mhd	12.423981	-6.692588	comment	4.0	31.0	1474361082	-10.444227
12539379	TypeScript works very well with Reac	TypeScript works very well with React, less so with Redux/ImmutableJS.We just moved our app from Redux and ImmutableJS to mobx and it's been a treat: we now get full typing and it's much less verbose. We don't need to repeat the payload definition at every point, we have a store where we call a method and that's it. Highly recommend checking out mobx if you use TS.	Keats	12.687467	-6.5961537	comment	4.0	14.0	1474378698	8.484511
12539905	I've been using React + Redux + Type	"I've been using React + Redux + Typescript stack and I've been quite happy with it (It's hard for me to image how you could do big refactoring without TS).The fact that components props are verified by compiler instantly when I type is a big win. I believe with PropTypes you can't specifically describe what is the shape of your data, for example object with property of such name and the value of this property is object with other concrete properties. Or array of objects with specific property. In pure react you only have ""React.PropTypes.object"" and ""React.PropTypes.array"" in TypeScript you can say ""{ foo: string, bar : { fieldNum : number}}"" or ""{foo: string}[]"".Some other observations:- I use Typescript 2.0 RC, because it has union types [0] and it works great with Redux reducers. It's s"	mpawelski	12.362245	-6.853253	comment	4.0	18.0	1474382808	-10.451859
12559782	It's interesting that TypeScript oft	"It's interesting that TypeScript often gets lumped into ""OOP"" when a few functional projects like RxJS and Cycle use it. Are their codebases also OOP?"	sotojuan	12.326414	-6.8279767	comment	4.0	13.0	1474574024	-10.438571
12570551	Imagine building a website for a cli	"Imagine building a website for a client, and having them hover around you all the time, 24/7, looking at your screen and going:- Oh, why did you put that button in here? What do you mean ""temporary""?- Why are you wasting time browsing that ""documentation"" site instead of writing code?- What is this ""class"" thing? We're egalitarian company!- Is this Ruby? Everyone knows websites are best done in PHP!Usually you'd like to have a chance to at least finish a basic prototype in peace, before gathering customer feedback."	TeMPOraL	12.70511	-6.6660595	comment	4.0	15.0	1474717704	10.419572
12593677	As someone who does a ton of Node/JS	"As someone who does a ton of Node/JS coding as well as some Python, I am personally offended! Ok, not really, but I think you're wrong :)I think VB is more similar to Python in the sense that both languages were designed with some sense of simplicity and straight-forwardness in mind.Both PHP and Javascript are much more complex from a language design standpoint, which makes them more difficult to learn ""well"" for beginners.  Yes, they are both hugely prolific because of the web, and lots of people copy/paste code around not having any clue how it works, so I won't deny your ""generations of garbage"" comment. But you're assessment is a little too simplistic.A good engineer can write high quality code in ""almost"" any programming language.  It's the coder, not the language, that determines eng"	bradscarleton	12.528486	-6.472488	comment	4.0	18.0	1475014514	10.272457
12610526	to save readers the time I've just w	"to save readers the time I've just wasted, here are the two sentences about typescript in this sales pitch for cycligent.js:""I am able to keep the freedom and expressiveness of JavaScript to which I have become so accustomed while getting enterprise-level type checking and refactoring capabilities. Declaration of objects and interfaces is a dream."""	tribby	12.348417	-6.8529925	comment	4.0	42.0	1475210005	-10.454918
12611435	Well you don't have much choice for 	Well you don't have much choice for frontend for one. Typescript offers much stronger typing than Ruby, Python, Clojure and PHP as well.	seanwilson	12.370397	-6.7355795	comment	4.0	19.0	1475228763	-10.40256
12611761	I love JS/ES2016 how it is, I serios	I love JS/ES2016 how it is, I seriosuly don't see the advantage of typescript except maybe for a gigantic application	caub	12.38802	-6.6758194	comment	4.0	19.0	1475234240	-10.508707
12621818	TypeScript – The Myth of the Superse	TypeScript – The Myth of the Superset	jbandi	12.373881	-6.8176055	story	4.0	9.0	1475406227	-10.613172
12646009	Hah! You thought you would get us wi	Hah! You thought you would get us with that one.:-) Here is the link to the Erlang OTP developed at Uppsala University for Epiphany.https://github.com/margnus1/otp	adapteva	12.5714	-7.510252	comment	4.0	14.0	1475689372	12.896061
12651064	Online PHP Debugger	Online PHP Debugger	sconxu	12.668249	-6.6099963	story	4.0	4.0	1475744372	10.315553
12651682	Actually both team are not split int	Actually both team are not split into technology stacks, but rather interdisciplinary teams like one for Marketing and the other one for Sales. Each of them building some different functionality in Ruby and .NET. In each team there is like 1 .NET developer and Ruby dev, and this causes an issue when someone wants to go on holiday, as the team practically stops development.Unifying technology eliminates or reduces that risk.	Donmario	12.665077	-6.925293	comment	4.0	12.0	1475754904	12.4203
12703983	The language is not beautiful, it is	The language is not beautiful, it is full of signature and func naming inconsistencies [1] it inherited from C. The devs are ultra-conservative and stubborn to cause BC even at major version bumps (like the forever-incorrect ternary associativity [2][3]). But PHP7 is both fast and productive with many modern first-class features. You can in fact write excellent code without much effort that will handily outperform Python, Ruby and even Node.The Wordpress codebase [plugin api included], though, is utter garbage.[1] http://www.phpsadness.com/[2] http://php.net/manual/en/language.expressions.php[3] https://www.mail-archive.com/internals@lists.php.net/msg7196... (yes, i asked for this in 2014)	leeoniya	12.74672	-6.6518173	comment	4.0	23.0	1476392456	10.338914
12705108	> It took less than a week to migrat	> It took less than a week to migrate our codebase (a 10 years old PHP monolith)...> And it took 4 hours to migrate our custom extensions.That seems like a very small amount of work; I'm impressed at how smooth a transition that must've been.I'm also quite surprised that> we can handle twice more traffic with same infrastructure.Wow, I didn't think that PHP application code would be such a bottleneck. Maybe it's not that, but if the entire codebase is written in PHP, and you replace it all in one shot, you just get such an improvement. But I thought DBs, etc. would play a bigger role.	nchelluri	12.767018	-6.6223097	comment	4.0	22.0	1476402007	10.302081
12705945	After I use both php and ruby for th	After I use both php and ruby for the same employer over more than a year. I would rather say Ruby is more like a garbage language -- 1) twist syntax to allow people write the same function into different ways is not a cool feature, it is disaster feature which causes more for a team to sync. 2) Duck typing is not interface, don't kidding yourself. they are totally two different thing. 3) ruby attract a lot of master level people try to make the community better, however, the whole community filled with mediocre developers who cannot even understand Rail != Ruby, and also they believe ActiveRecord is the only persistence layer they can use, and stop learning write native database query script.Finally, good luck with writing a unit test against an API not created by you because, you have to	cakeinblue	12.661858	-6.9655848	comment	4.0	16.0	1476415283	12.337521
12706020	>PHPs reputation seems to surround t	">PHPs reputation seems to surround the fact that it tends to be (or was) the first language amateur coders dabbled with.That's certainly part of it. JavaScript suffers the same hate today -- amateur and junior developers produce thousands of lines of crap per year, and people blame it on the language.But PHP itself is just a mess. I'm an experience developer (about 30 years at this point), and about 12 years ago I decided to do a volunteer project for a nonprofit in PHP. Finished the project and the nonprofit used it for at least 10 years -- they may still be using it for all I know.Never. Again. I can't stand PHP and I will avoid its language and ecosystem like the plague. Even if they've fixed some of the problems in the core language and added types, the ""standard"" libraries were a rand"	SomeCallMeTim	12.759468	-6.6177855	comment	4.0	28.0	1476417031	10.324739
12705423	 I used to run one of my site (25K u	 I used to run one of my site (25K unique visitors a day) on PHP 5.3, when HHVM came out with stable version I shifted to HHVM and I had similar experience. Now I am running it on PHP 7 and I have to say I am more than happy with results. As much as PHP is not cool for today's developers it has served on some really high traffic sites and stayed useful even with the test of time.P.S. Now I wish somebody just implements a good Async IO system and ability to run HTTP right off the PHP engine (I know there is php -S ...; I am talking about a better async system).	maxpert	12.687929	-6.658968	comment	4.0	14.0	1476406108	10.209913
12706737	"it's the ""good problem"". and the goo"	"it's the ""good problem"". and the good problem can always be solved, though lack of reliability can seriously hurt your growth. but that doesn't mean that it's as easy as people make it out to be.i wrote and ran a big php app (Zynga's Mafia Wars). this is just about the app server (apache + php side), single-master MySQL will give you far greater problems at that scale.everyone is tearing away adding features, and the code just keeps getting bigger. everything includes everything else. so you can't just start fresh with every request, it takes way too long. so you use APC or whatever. now you have global shared state (and people start using it), but as long as no one really fucks it up that's ok.php processes are always erring and dying in weird ways that no one can figure out, especially i"	nrser	12.758442	-6.592974	comment	4.0	20.0	1476432932	10.237186
12711634	Perhaps, but when it comes to PHP's 	"Perhaps, but when it comes to PHP's niche—websites—it's easier to _get started_ than basically any other language.Got a simple Hello World PHP site? Open your SFTP client, drag and drop, done.Got a Hello World Python app? You have to know about WSGI adapters, process monitors, usually some sort of reverse proxying, how you're going to handle your static files, and so on.Oh, and let's not forget that to even get to that point, you needed to use a framework of some kind, which meant wrestling with Pip and virtualenvs; you can't just 'echo ""Hello World""'.I'm picking on Python here because web dev in Python is my day job, but the story is similar for many other languages."	adambrenecki	12.705748	-6.625165	comment	4.0	12.0	1476484717	10.28754
12718600	We are doing a fairly large Elm app 	"We are doing a fairly large Elm app right now. And especially the refactoring reasons and static type system are appealing to us when you work in a team.Also being a functional language it is easy to crank out features in an afterthought, e.g. we added an Undo/Redo feature for operations the user does in this single-page client app. And being side-effect free this ""merely"" boils down in wrapping function calls in an ""undo/redo"" function.So Elm is really exciting stuff. But still the Api is not completely stable, yet. So you have to invest some time to adapt to these (small) Api changes.
Also interoperablility with so-called ""Native"" JavaScript browser functions, e.g. JavaScript typed arrays is possible but not finalized, yet."	weitzj	12.9868555	-7.66723	comment	4.0	20.0	1476626337	-12.752553
12719838	Even if you don't like JavaScript, i	Even if you don't like JavaScript, it's really surprising to me that a CTO picks something like Elm that nobody uses and only a few know or are interested in [1].I'm curious to know how the author will recruit developers, specially in France. My last company migrated all its backend in Node this year, ONLY because it was the easiest option to recruit full-stack developers. The market is completely saturated here (there are a lot more offers than developpers), you spend months to recruit a front-end developer or a full-stack developer with front-end knowledge, and I don't see how you can attract someone with Elm. Having 1 or 2 years of xp in Elm on a resume is not really usefull when all the companies use JavaScript. You don't even know if Elm will still be there in 2 years.[1] http://state	ggregoire	12.99347	-7.670941	comment	4.0	12.0	1476639886	-12.757443
12819365	There's still code here, the text is	There's still code here, the text is just for people, so I wonder if this is maybe a misunderstanding.The language presented is a variant of datalog and is as formal as any other language. If you're curious in the semantics, they boil down to Dedalus [1].As a simple example of that, here's a clock: http://play.witheve.com/#/examples/clock.eve[1]: https://www2.eecs.berkeley.edu/Pubs/TechRpts/2009/EECS-2009-...	ibdknox	13.174608	-7.040847	comment	4.0	13.0	1477680277	5.7318954
12844349	The YANG 1.1 Data Modeling Language	The YANG 1.1 Data Modeling Language	based2	12.632873	-6.480015	story	4.0	43.0	1477992685	6.3736873
12850265	I watched the whole thing. Quite ent	I watched the whole thing. Quite entertaining, but the last 6 minutes is what matters. The strengths he mentions are:- tools and culture that's optimized for programmer happiness and productivity.- Promoting obviousness via the path of least surprise.- Consistency through well-considered conventions.- Carefully-designed value-based test suites.- Building long-term maintainable appsI have to ask because I am being exposed to Ruby at work right now and I find it, to be quite honest, a terrible language. I'm not trying to start a flame war, I am writing this cause I want to be open minded and have some hard-core rubyists point me in the direction of where I can learn what is good about this language. Specifically:1) What tools / culture are optimized for programmer happiness & productivity in	ttt111222333	12.587082	-7.0421963	comment	4.0	16.0	1478036406	12.370447
12906401	  >I have complaints about Elm after	  >I have complaints about Elm after using it during a quick hack session.	sitkack	13.007571	-7.6900253	comment	4.0	21.0	1478669862	-12.765675
12907524	Yeah I read this a few weeks ago and	Yeah I read this a few weeks ago and was similarly put off.  I will give him one thing: it got me to start thinking about what I wanted in a functional language that compiles into JS, which ultimately steered me towards Purescript.I think fundamentally he's correct, but the point that he is missing is the intended audience of Elm.  He was not it.  Elm is much easier to grasp than Purescript, for instance.  There is less complicated syntax and there are less complicated features.  I would would be quite happy to use it in a team that isn't familiar with FP and who wanted to use it for front end code.  In fact, although I have yet to do a large project with it, I might even lean toward Elm over JS/CS and React.  It just seems a lot more straight forward, with less options available for hangi	mikekchar	12.9347515	-7.644594	comment	4.0	15.0	1478678779	-12.734844
12915600	> But than again, Elm is not too eas	> But than again, Elm is not too easy. This means that almost every developer I see that is already involved in Elm is a seasoned developer. Getting experienced developers on board means that they are immediately productive, which means we gain more per hour.Not really seeing this as a strong point. It feels like the same mindset that drove me away from Scala (and many others [0]!). Sure, it might be good for the company in short term, but what happens when you run out of experienced Elm developers? At least Elm fairs fairly better with having usable samples on their own (clean) site.[0] https://groups.google.com/forum/#!topic/scala-internals/r2Gn...	petetnt	12.978738	-7.68574	comment	4.0	13.0	1478731787	-12.770247
12926310	Aaron: 30%?Matz: 30% is huge.Aaron: 	Aaron: 30%?Matz: 30% is huge.Aaron: Yeah!Jonan: That seems like a pretty good improvement to me.Koichi: I do think so.Aaron: We just need a few more 30% improvements then Ruby 3x3 is done.Matz: Yeah, that means 30% of the time is spent in the compiler.EDIT: maybe they were joking once again?	dakull	12.628355	-7.0500317	comment	4.0	12.0	1478825158	12.397923
12928100	Half of the Ruby that I write is not	"Half of the Ruby that I write is not web applications - it's scripts that configure servers, import and export data, optimise a manual process, etc. Ruby is perfectly performant in those scenarios.It's become a horrible meme I can run a script that reformats a 30 line CSV file the way I want it in 0.05s and someone will almost certainly lean over and say ""Ruby is too slow, you really need to upgrade to <x>"". Or the intranet application I wrote in Sinatra last year for a total of four users, where all I got questions about how it could be usable without ""asynchronous"".That said, I don't understand Ruby's performance position. IBM released a preview of their JIT implementation over a year ago, with much fanfare. By many accounts, it held major practical improvements. Since then, I haven't he"	technion	12.64317	-6.98358	comment	4.0	13.0	1478841015	12.347896
12929938	Too little, too late.Disclaimer: I'm	Too little, too late.Disclaimer: I'm a Ruby developer.Making Ruby 3 times faster is not going to save it. It's just way, way behind the raw performance of other programming languages. Also, with the arrival of new, modern programming languages, there isn't that many productivity reasons anymore to justify the poor performance and lack of sane concurrency.I love Ruby, the programming language, but I kind of start seeing that others haven't been idle and there are some growing ecosystems that can soon leave Ruby behind. It kind of feels like Perl back in the day: it was still a good programming language when it started losing ground.We, Rubyists, have seen a lot of talented people leave both the Ruby and Rails core teams. You see them go to other, younger communities, making them bloom. In t	iagooar	12.682443	-6.9992394	comment	4.0	15.0	1478866511	12.375335
12941160	.pl is perl, use .pg for prolog	.pl is perl, use .pg for prolog	hossbeast	13.144985	-7.2957573	comment	4.0	14.0	1478998267	-12.492059
12972848	Note that you should not choose Embe	Note that you should not choose Ember if you are creating an app intended to be used on mobile, as it doesn't yet have code-splitting.  This talk explains about why this is a hard requirement: https://www.youtube.com/watch?v=4bZvq3nodf4	Touche	13.103453	-6.438671	comment	4.0	15.0	1479340697	-15.513084
12971183	Ember is a really good choice for ru	Ember is a really good choice for running a feature-rich web app where you want to focus on business and features instead of solving issues about tooling and deciding on which pieces to bring into the bundle to make everything work. This is especially crucial for small teams on a budget. Also, upgrading to newer versions is incredibly easy, deprecations paths are very verbose and clear. I've been working in Ember for three years, and a few times in between I jumped into React. I adore React's ideas, and grasping its concepts made me a better Ember developer. It's just React tooling that's horrible, but I hear there are great improvements in that area.	jurgenwerk	13.108266	-6.4438906	comment	4.0	27.0	1479328317	-15.51135
12981681	https://api.github.com/users/1  This	https://api.github.com/users/1  This isn't hard to do. All they did was iterate the user ids from 1-n. It is the Rails way to assign ids incrementally.	specialp	12.880758	-6.7538195	comment	4.0	13.0	1479417392	12.309514
13005873	Is ruby dead?  I would have expected	Is ruby dead?  I would have expected more comments...	greenail	12.641054	-7.03853	comment	4.0	12.0	1479740719	12.388616
13017339	It was about time somebody creates s	It was about time somebody creates something like this. I do have a complain, classes are named random. If you used a tool that generates human like names, it would still be random but looked much better.I will see to create a similar rails tool. I  intend to test just stress of people who will look at the code and try to understand what it does.	desireco42	12.69516	-6.9642205	comment	4.0	16.0	1479846301	12.354069
13026962	I really want to like Elm. When I'm 	"I really want to like Elm. When I'm writing JS/React code, I sometimes think ""this would be so much nicer in Elm!"" - especially for architectural issues. But the few times I’ve actually tried doing something in it, I find that the parts of what I want to do that fit cleanly within Elm’s walls are really nice, but the parts that don’t quite fit get hard quickly. Suppose I want to do something with the DOM that doesn’t quite fit into virtual-dom’s model -- I suddenly have to make a complicated JS interop and work around things to get at the raw DOM node... whereas with React I can just hack something together, try it with users, and learn that I should actually be doing something completely different anyway. Or maybe I don’t actually know yet what I want to have happen in every possible cond"	kcarnold	12.984535	-7.642755	comment	4.0	15.0	1479947380	-12.759416
13077959	The problem is that Erlang is only g	The problem is that Erlang is only good a network communication and parallel programming, which is of course to be expected, given the language design goals.The problem is when one tries to make a general purpose solution out of that design.For example, how would Erlang look like in GPGPU programming, video/audio codecs, graphics programming, GUI,...	pjmlp	12.547799	-7.514476	comment	4.0	25.0	1480579092	12.909939
13086731	I will never seriously consider usin	I will never seriously consider using php for any new project until they clean up their standard library API,  but that will probably never happen (python 3 being a good example of what happens when you drop backwards compat in a major way). Even then,  stdio==socket and bloated syntax might still weight it down too much.I started my career with PHP, it really is a bummer that it seems destined for the language graveyard	awestroke	12.7414665	-6.645654	comment	4.0	38.0	1480662347	10.329222
13087644	This is an improvement to standard M	This is an improvement to standard MRI Ruby, also called CRuby. This is an experimental JIT compiler which probably won't get adopted into mainline Ruby, but will definitely cross-pollinate with it. A JIT compiler has been a goal in MRI development for a long time. Nobody is likely to adopt this for anything, it would take more work to get this working with the current installed base of Ruby code than it would be to just rip ideas from it and put them into Ruby 3. It's just cool as a proof of concept.Other Ruby implementations suffer from not being compatible with the MRI ecosystem, you have to port them over. In theory because they're the same language, gems would be easily portable, but the sheer amount of combinatorial work involved means they slowly accrete into separate ecosystems. It	vinceguidry	12.578071	-7.0780134	comment	4.0	22.0	1480676287	12.388603
13100036	I have had four zero-days affecting 	"I have had four zero-days affecting 5.5 million devices sitting on a public code repository for two months now, for a project maintained by dozens of corporations employing high-end PHP programmers, who do write PHP for a living.The fixes are code reviewed, but not merged, because the developers don't seem to understand PHP-into-C null string terminator vulnerabilities, or type juggling, or strict comparison, or... I could go on.PHP is unsafe at any speed, because it almost invites arbitrary code execution through a number of vectors. It isn't inherently bad if used correctly, as most Facebook developers will tell you, but the language structure involves quite a number of insecure practices.After all, most programmers don't expect:<?php 0 == ""string""; ?> to be true."	s_q_b	12.7809515	-6.629184	comment	4.0	21.0	1480860794	2.9860003
13117299	Ask HN: What stack did you choose fo	Ask HN: What stack did you choose for your startup and why?	avitzurel	12.744827	-6.872823	story	4.0	2.0	1481051006	12.334777
13125156	Question:Is it possible to have a se	"Question:Is it possible to have a setup with TypeScript where it is guaranteed that no code changes occur other than removal of the type information?I started using Flow, found what it can and can't do and would like to try TypeScript. But only if I can have ""types-only"", I don't want my code ""translated"" in any way. I'm writing for the latest node.js version and not for x different browsers, I want to use exactly what that version supports and have no code-changing steps.With Flow I use flow-remove-types (https://github.com/leebyron/flow-remove-types) to remove the types. It leaves spaces where there was type-related code and doesn't touch the code itself."	Noseshine	12.407472	-6.808126	comment	4.0	20.0	1481137231	-10.513341
13127139	Is this where CoffeeScript left off?	Is this where CoffeeScript left off? How would you compare it to CoffeeScript?	atomical	12.421471	-6.5880284	comment	4.0	20.0	1481152946	-10.5371065
13127400	PHP Performance Evolution 2016 from 	PHP Performance Evolution 2016 from PHP 5, PHP 7.0, PHP 7.1 and PHP 8/Next	christian_vigh	12.758642	-6.653548	story	4.0	22.0	1481155727	10.31248
13160110	Communicate Between Ruby and Elixir 	Communicate Between Ruby and Elixir Using Erlang Ports and Erlectricity	fazibear	12.652062	-7.4617405	story	4.0	50.0	1481565364	12.908682
13162429	Anyone know of a equivalent librarie	Anyone know of a equivalent libraries like GenStage for other languages? (Java, NodeJS, etc)I'd definitely be able to put to use things like flow limiters and queuing and such, but none of my company's projects use Elixir :(	AgentK20	12.632754	-7.397146	comment	4.0	12.0	1481580547	12.903214
13171139	Django doesn't really seem like a fr	Django doesn't really seem like a framework that is suited to cluster computing, its almost always backed by a relational database and usually IO to the DB is the bottleneck, assuming you now how to use it. Can someone explain the advantages of running it like this to me?	collyw	12.841591	-6.509585	comment	4.0	14.0	1481663974	10.056191
13227870	How is Rails still doing in the worl	How is Rails still doing in the world of NodeJS, Microservices and React?	pandafoo	12.752495	-6.825304	comment	4.0	16.0	1482312800	12.298683
13228423	Slightly off-topic: is learning Rail	Slightly off-topic: is learning Rails still a good career choice? I'm not particularly keen on JavaScript on the server and I think I am slightly tired using .NET on a daily basis.	martijn_himself	12.708751	-6.9146967	comment	4.0	14.0	1482321146	12.364739
13235472	I've been a long time Rubyist (10 ye	I've been a long time Rubyist (10 years now) and I'm really enjoying Elixir. What got me hooked was the simple syntax and wonderful documentation, both from the project itself and in the Programming Elixir and Programming Phoenix books.The ease of navigating an Elixir project is a huge benefit. If I want to know where a function is defined, it's very easy to find it. There's none of this class-reopening or meta programming malarkey that you get in Ruby (where is a Rails controller's render method defined exactly?)... it's all right there in the module.Another thing that I love is that it's trivial to separate processing of several pieces of data into separate Elixir processes. To do something similar in Ruby, I would probably need to either use concurrent-ruby or spin them off into a backg	ryanbigg	12.672794	-7.3604784	comment	4.0	15.0	1482390513	12.858741
13235883	I have not used Erlang or Elixir, an	I have not used Erlang or Elixir, and wanted to start with Elixir (I want some experience with a functional language, I'm to biased with Java to use Scala as a functional language). However, I read somewhere that Elixir can be successfully used only with Phoenix if you don't know Erlang. As I understood, sooner than later interactions with Erlang libraries is needed, and that requires Erlang knowledge. Can somebody please confirm? That Elixir is basically oriented around Phoenix and Erlang is a requirement?	salex89	12.701397	-7.394806	comment	4.0	13.0	1482396277	12.913453
13237260	Last time I went to look at elixir i	Last time I went to look at elixir it looked nice, is there an accepted user-mangement system for phoenix yet? User auth is a combination of the three things I least want to implement myself:1. Security. Small non-obvious mistakes are easy to make and very important.2. High visibility. Risky, and if it goes wrong it's a major thing your customers notice.3. Dry. It's just not particularly interesting for me, it's certainly solved in other frameworks (e.g. devise). I'm aware this last point is extremely selfish of me, however.	IanCal	12.840824	-7.0867844	comment	4.0	19.0	1482415283	12.711224
13247234	Elixir Design Goals (2013)	Elixir Design Goals (2013)	qubitcoder	12.683503	-7.453124	story	4.0	191.0	1482527184	12.931341
13248220	Elixir is pretty O.K., I use it at w	Elixir is pretty O.K., I use it at work and the restrictions typically have me writing cleaner code.	microcolonel	12.665487	-7.4419565	comment	4.0	23.0	1482544689	12.934749
13252891	I was madly in love with Ruby in 200	I was madly in love with Ruby in 2005 but now, Ruby feels like this ex girlfriend you were completely infatuated with and eventually broke up with because you were too young to pay attention to her flaws.	hota_mazi	12.644112	-7.0355163	comment	4.0	28.0	1482639504	12.418858
13254544	I have done little Wordpress develop	I have done little Wordpress development (just some plugin for a prototype that my company wanted). But I don't see anything that prevented it from being used to develop a web application since the theme/plugin system seems to fulfill everything. Django also describes itself as a CMS platform on their website so I kind of thought they are comparable.Just wanted to make sure I know what I'm getting before I jumps in further into either Wordpress or Django :D	jackyb	12.796618	-6.4806886	comment	4.0	14.0	1482682985	10.025706
13279922	This report is a joke. I didn't find	"This report is a joke. I didn't find any reasoning about attribution.Here is the only valuable part:""
rule PAS_TOOL_PHP_WEB_KIT
{
meta:
description = ""PAS TOOL PHP WEB KIT FOUND""
strings:
$php = ""<?php""
$base64decode = /\='base'\.\(\d+\*\d+\)\.'_de'\.'code'/
$strreplace = ""(str_replace(""
$md5 = "".substr(md5(strrev(""
$gzinflate = ""gzinflate""
$cookie = ""_COOKIE""
$isset = ""isset""
condition:
(filesize > 20KB and filesize < 22KB) and
#cookie == 2 and
#isset == 3 and
all of them
}
"""	Dolores12	12.675696	-6.5656605	comment	4.0	29.0	1483043855	10.277331
13297791	> WordPress has historically been a 	"> WordPress has historically been a security nightmare.This. And all this started around the same time - in 2006 -- when Stefan Esse, the PHP security expert ""resigned"".In a blog post in 2006 (that can no longer be found) Esse was quoted as saying he quit  > ""because among other things they were resistant to his finding bugs in PHP, and had refused to patch some of the bugs he found.""Source(s)http://www.darkreading.com/risk/php-security-expert-quits/d/...?https://preilly.me/2006/11/09/php-security-expert-resigns/PHP is the backbone of WordPress and none of the core team members have taken any of it's security holes seriously, many of which can be traced back to PHP's security hole. They simply come out with ""It's the Plugin-Developer's fault"" every few months when a security hole is found."	sean_patel	12.775081	-6.5508666	comment	4.0	12.0	1483310170	10.311089
13303963	My slightly elitist view:I don't thi	My slightly elitist view:I don't think (the vast majority of) the people using PHP should build Internet-connected software at all. The risk for massive privacy intrusions caused by programmer incompetency is too great, IMO.	johansch	12.763055	-6.6124372	comment	4.0	15.0	1483387409	10.332695
13303018	How PHP will Fare in 2017?	How PHP will Fare in 2017?	ing33k	12.778784	-6.644724	story	4.0	12.0	1483380534	10.343706
13322977	> Joining LinkedInGreat, I'm glad Em	> Joining LinkedInGreat, I'm glad Ember is gaining more traction in enterprise... but what does this mean for things like Fastboot, Ember 3.0, glimmer 2.0, ember-cli 3.0, and the whole cast of in-room-elephants such as ember-redux, flexi, ember-data, vr, etc.?	ffn	13.116376	-6.446345	comment	4.0	16.0	1483571232	-15.513908
13323453	Coming from Ruby, Elixir feels like 	"Coming from Ruby, Elixir feels like a powerful, beautiful language with a surprisingly radical but ultimately simple approach to concurrency thanks to Erlang/BEAM, and Phoenix is like Rails 2006, as far as the framework to sell Elixir's advantages to the masses. It's very powerful and scaling ""just works"". All Elixir needs now is a viable ElixirScript that can compile down to JS/WASM, and along with Nerves it's ready for world domination. ;)"	themgt	12.720852	-7.3148084	comment	4.0	23.0	1483575201	12.834329
13342015	If you're setting your headers with 	If you're setting your headers with PHP you've already lost. Headers should be handled at the webserver level (e.g. Apache/Nginx), not in your server-side code.	ChristianBundy	12.774008	-6.562628	comment	4.0	12.0	1483755358	10.3033285
13365081	TBH not sure how they got that count	"TBH not sure how they got that count.https://github.com/illuminate/queue/blob/master/Worker.php#L...
Here's 17 LOC in the first file I checked.Not to say that's excessive or a bad thing, just seems the count isn't quite accurate.If they aren't counting Illuminate components, seems somewhat unfaithful, since that's really the Laravel nitty-gritty.It's also worth noting that 'static' doesn't feel like a good metric in PHP. There's certainly not a great correlation of static to pure when you're in global-DI-container contexts. So why do we want statics? Global static singletons, too, don't feel like a particularly good pattern.If I'm writing PHP, I -do- try to make 'static' mean 'this function accesses no globals and has no side effects', because in my opinion it can make PHP a bit cleaner, b"	bpicolo	12.7994795	-6.636471	comment	4.0	18.0	1484059347	10.378801
13365138	It's co-location is very low however	It's co-location is very low however. What you want is never nearby, and thanks to the Facade system used for service location it also isn't always clear which class is actually being used without digging through some configuration files, and an IDEs autocomplete and click through has no hope without a generated helper file.This leaves you digging through dozens of tiny files, some barely longer than the class definition itself, just to find even high level logic. I normally learn frameworks by simply reading the code, but I can't help but feel fatigued when having to try and find where a line of logic actually lives in Laravel. It is almost always a journey.	ehnto	12.820797	-6.6231484	comment	4.0	13.0	1484059726	10.349762
13396573	JavaScript is a must know if you wan	"JavaScript is a must know if you want to do web work. It's as necessary as HTML. It's the only language browsers actually natively run.Ruby on Rails is sort of the basis for most any other modern MVC web framework. That is to say it inspired nearly every other web MVC framework, in most other languages. If you can use Rails you'll be able to use most anything else. Prior to Rails most web apps had proprietary frameworks powering them or no framework and were just an bunch of ""pages"" (endpoints) loosely strung together.Rails also, for better or worse, has one of the easiest to use ORMs-- ActiveRecord. This helps new folks worry less about the intricacies of learning SQL (or whatever your persistence layer is) and more so about what writing a web service is really about.Ruby as a language is"	rubyn00bie	12.694836	-6.9122753	comment	4.0	20.0	1484362521	12.326304
13396740	"Most actual work is in ""php"". But, i"	"Most actual work is in ""php"". But, it isn't 'hip' anymore.  So, they teach ruby. Ruby is more difficult and less clear. Rails itself is a land of 'gotchas' (I have 10 years exp in both). After learning ruby/rails it will be difficult to find work and understand basic database constructs./end rattling my canehttps://www.google.com/search?q=php+vs+rails+stats&ie=utf-8&..."	ransom1538	12.752748	-6.8041	comment	4.0	12.0	1484365716	-5.8323646
13399529	Re: the C extensions: Since the perf	Re: the C extensions: Since the performance is so much better, would it make sense to replace gems that use c extensions with pure ruby implementations? Would that still yield better performance than MRI?	miloshadzic	12.562071	-7.1110306	comment	4.0	14.0	1484416096	12.396026
13407204	Erlang != OOP as imagined by Kay... 	"Erlang != OOP as imagined by Kay... as I understand Kay's intent.Erlang == ""independent reliable units of computing"". (I think Erlang programmers call them ""functions""? Or maybe ""processes""? AFAIR only the ""process"" level is subject to message loss, yes?)I'm sure you're right about most of what you wrote, but that's not the point I was getting at.EDIT: Just to expound: In Kay's conception even e.g. ""=="" inside a function would be a method invocation and it would be asynchronous (presumably taking two continuations, one for ""equal"" and another for ""not equal""). This absurdity is why I fundamentally disagree with the Actor model (as a model of computation), but also with extremism such as Kay's.EDIT: Btw, I call bullshit on the 99.9999999% reliable service unless you can come up with a refer"	lomnakkus	12.386822	-7.51533	comment	4.0	18.0	1484523972	12.874107
13407287	> You're going to have to deal with 	"> You're going to have to deal with this at a higher level than the line of code which tried to save the file.Exactly, but that's the point I'm trying to make, perhaps badly. My point is: Can a function call fail in Erlang, i.e. can it just ""not return""? AFAIUI as long as you're inside a message handler, this cannot happen -- any function call will receive a return value. In other words: Function calls inside message handlers are synchronous.In the Actor model conceived by Hewitt, this is not the case. Now, this would be a huge problem for any foundational theory, but he seems to get around it by just assuming infinte resources (queues), so it all works out in theory."	lomnakkus	12.336826	-7.504703	comment	4.0	12.0	1484524768	12.8624735
13430612	With the mix of affection and disdai	"With the mix of affection and disdain one traditionally feels for a younger brother, i refer to Go as ""systems PHP"". It may not be a sophisticated language; it may not produce beautiful code; it may, arguably, even have inexcusable flaws. But it is astoundingly easy to learn to the point where someone can be productive with it.This is a terrifically powerful, and very unusual, advantage for a language to have. Master programmers won't be choosing it as their tool of choice. It won't be used to attack the craft's hardest problems. But it allows a huge number of people to write programs they otherwise would not have been able to write, and, conversely, a huge number of programs to be written which otherwise would not have been written. There's something rather ""quantity has a quality all its"	twic	12.764558	-6.6570907	comment	4.0	36.0	1484776172	10.351025
13434167	The next release, Django 1.11, will 	The next release, Django 1.11, will be a long-term support release, and the one after that, Django 2.0, will no longer support Python 2.https://www.djangoproject.com/weblog/2015/jun/25/roadmap/I've grow to highly respect the Django project for its good documentation, its healthy consideration for backwards compatibility, security, steady improvements and all round goodness.	Flimm	12.76175	-6.5966763	comment	4.0	143.0	1484815491	10.0585375
13434408	Last time I looked a lot of the insi	Last time I looked a lot of the insides were terrible.A project I was really impressed with the internals of is Celery (was expecting the worst having seen Django).	stuaxo	12.830664	-6.5111985	comment	4.0	12.0	1484818988	10.094877
13437515	Learn Elixir with a Rubyist (IV) – T	Learn Elixir with a Rubyist (IV) – Types, Data Structures and Pattern Matching	joaomdmoura	12.668148	-7.4323335	story	4.0	158.0	1484847029	12.874783
13438269	More fair comparison would be Phoeni	More fair comparison would be Phoenix [1] to node.jsElixir is a programming language whereas node is a framework.[1] http://www.phoenixframework.org/	alberth	12.418225	-6.506969	comment	4.0	14.0	1484851243	7.1916876
13438418	I'm currently working in both. If we	"I'm currently working in both. If we are just talking about them in terms of their respective merits, Elixir is my preference. It has a wonderful compiler, pipes allow for composable chains of logic, the Phoenix framework is wonderful for web development. Literally every interaction with it I've had has made me think ""wow that's just a great example of excellent programming taste..."". In terms of scaleablilty, I've heard stories of a single server able to handle millions of requests. Not personally been able to verify that (nothing I've done in the language has reached that kind of scale sadly...). Once you get used to pattern matching, you'll wonder how you ever lived without it. The community is amazing and supportive. The language creator Jose Valim has responded to my emails directly w"	vikingcaffiene	12.630699	-7.301808	comment	4.0	20.0	1484852061	12.883596
13439671	Can the Ruby people please stop blog	Can the Ruby people please stop blogging about Elixir and explain things relative to Ruby? There are way too many 'Elixir-for-Ruby-programmers' tutorials on the net already.Elixir is pretty great and enthusiasm is good but I feel this leaves a large group of people in the dark.	raarts	12.695845	-7.3825283	comment	4.0	15.0	1484861462	12.850773
13443337	One can make very interesting conclu	"One can make very interesting conclusions based on purely this. Examples:- Python developers does not follow Clean Code (ala Uncle Bob) as much as Ruby , because if statement is more frequent than def and return.- Ruby makes it possible to write in a much more functional style than Python. OR Ruby developers like to develop more in a functional style than Python developers.- People don't really care about good variable names (""a"" is a terrible variable name in scripting languages like JS and Python, still top 11)- PHP developers might practice ""return early"" in functions (more return than function keywords) OR their functions just do too much :)"	Walkman	12.656175	-6.7229495	comment	4.0	16.0	1484915708	10.354371
13448219	Shopify now on Rails 5.0. started 12	Shopify now on Rails 5.0. started 12 years ago on 0.5, the First version released	kristianp	12.753307	-6.9379764	story	4.0	126.0	1484960994	12.346421
13475474	This reinforces what I see a lot too	This reinforces what I see a lot too - people creating yet another XYZ, but rarely I see someone go and create an integrated solution to streamline development processes or make things easier or clearer.There are a lot of vocal people who make it seem like you should be doing everything in Go or Angular or what have you, but I want nothing to do with either, and do not have problems that those are meant to solve. I love ruby, and I love rails.DHH regularly sounds the drum of rationality - in a community at large of idealists and extremists. He is the reason I got into programming, and constantly serves to remind me that what I'm doing is, in fact, perfectly fine; and that everyone else puts up with a lot of nonsense for no great reason.There are other frameworks out there, but you'd be har	meesterdude	12.734919	-6.9007607	comment	4.0	29.0	1485292148	12.348165
13475743	So, I have seen rails code and I did	So, I have seen rails code and I did not fall in love with the code. Instead what I saw just black magic and all sorts of conventions. Reminded me of perl. You have to invest a lot of time knowing all the magic stuff.	newsat13	12.724687	-6.927852	comment	4.0	16.0	1485293609	12.337441
13476582	Maybe Rails has changed from when I 	Maybe Rails has changed from when I last used it five years ago, but I dealt with many of the issues DHH makes against other technology.> That people spent hours, if not days, just setting up the skeletons. The basic build configurations.I spent hours everyday getting the asset pipeline to work, or it would break again, meaning I would have to fix it again.> The vast majority of activity today is for yet another option on the a la carte menu.Every week the developers want to switch out some module for another module within Rails because it was the hot new thing.Maybe I worked on a bad project. Maybe I didn't get it. Maybe it was a growing pain that has passed. Rails was a pain in the ass to get to work. The ORM was cool, but did it save me time or mistakes from writing SQL - no.I would lov	bobbytherobot	12.767206	-6.9392166	comment	4.0	15.0	1485298814	12.337357
13478516	Elixir is prettier than Erlang but i	"Elixir is prettier than Erlang but it really mess up on certain things.Erlang have pattern matching via function with same name and you can tell if it's a group of pattern matching with semicolon and period. But with Elixir you can't tell it's just def and end.Erlang's:-module(recursive).-export([fac/1]).fac(N) when N == 0 -> 1;fac(N) when N > 0  -> N * fac(N-1).You can tell fac(N) both are in a group of pattern matching cause ';' and '.'. The '.' denote the last pattern matching function.Elixir:defmodule Factorial do    def of(0), do: 1

    def of(n), do: n * of(n-1)

endYou can't tell because there is no ';' and '.'. This is a trivial case but when your Elixir's module have a tons of function in it, this issue become relevant."	digitalzombie	12.608151	-7.4828587	comment	4.0	18.0	1485318470	12.936386
13477163	This is the first time I've seen som	This is the first time I've seen someone complain that Ruby is a worse language than JS(ES5).  Care to elaborate for those curious?	wyaeld	12.566293	-7.008654	comment	4.0	13.0	1485303450	12.378351
13478251	I have a simple question.  In the ar	I have a simple question.  In the article they mentioned they had a concurrency issue with a timed buffer that they later neatly solved with go channels and goroutines.  They said that they solved the problem in Scala by moving to the actor model, but that required importing Akka into their project and training everyone how to use Akka.My simple question is: couldn't they have achieved the heart and soul of the actor model by just making an object on its own thread, and talking to that object on a simple synchronized message queue? It's a handful of easy to understand lines of code, and nobody needs to delve into the sea of madness that is learning and configuring Akka and its actor model.In more general terms, it's possible to use Scala as Java that plays well with immutability and functi	unoti	12.335753	-7.506676	comment	4.0	20.0	1485315544	12.7442
13491382	No love for Django? Django/Postgres	No love for Django? Django/Postgres	wjdp	12.841355	-6.529006	comment	4.0	15.0	1485439474	10.067025
13497766	How does Crystal lang compare to the	How does Crystal lang compare to the two?I know the syntax is more similar to Elixir, but the format seems closer to Go in the sense that it compiles to a binary.	andyfleming	12.612187	-7.2682047	comment	4.0	15.0	1485492283	-11.225857
13498532	This is more for people looking at e	"This is more for people looking at erlang/elixir than a critique of the blogpost or a suggestion for a change.> Within Elixir, there is no operator overloading, which can seem confusing at first if you want to use a + to concatenate two strings. In Elixir you would use <> instead.When this popped up, it reminded me of something people try to do often and then have issues with performance. You probably do not want to concatenate strings.""Yes I do"" you'll first think, but actually erlang has a neat commonly used thing to help here.Let's say you're doing some templating on a web-page. You want to return ""Welcome back username!"". First pass (a while since I wrote erlang so forgive syntax errors):    welcome(Username) -> 
        ""Welcome back "" ++ Username ++ ""!""

Now it's going to have to con"	IanCal	12.618133	-7.489966	comment	4.0	17.0	1485507078	12.924831
13499377	If you want to really understand the	If you want to really understand the philosophy that makes Erlang ( and Elixir ) beautiful ( and why it made me a better programmer ), this conference by Greg Young is a kind of eye opener  : https://vimeo.com/108441214 .You realize then that clustering, hot reload, availability etc... are not only features but the logical consequence of a beautifully crafted environnement that aims at developer productivity.I'm sometimes amazed on how easy I can achieve stuff on the Erlang VM that would take ( if it's not impossible at all ) at least 10 times the time in a more usual language ( Ruby or PHP when you work in the web industry as I do ).My last example was when I needed to batch sql inserts in an events database. In a normal language I would have needed a queue, the libraries for it, workers,	julienmarie	12.5687895	-7.488412	comment	4.0	39.0	1485520623	12.909208
13511225	I wonder how easy it is to port all 	I wonder how easy it is to port all those libraries to mruby's mrbgems, so we can easily pack the Ruby-based CLI program as a single binary to get Go-like benefits.	xuejie	12.561087	-6.986634	comment	4.0	13.0	1485654601	12.300358
13515631	It's not clear to me from a cursory 	"It's not clear to me from a cursory look through the docs how the scheduling system works.  ""Erlang-like"" concurrency works so well predominantly because the runtime uses preemptive scheduling instead of cooperative (which is what basically everything else uses, unfortunately)."	im_down_w_otp	12.445883	-7.5026984	comment	4.0	23.0	1485713524	12.858015
13515797	That's incorrect, most scheduling sy	"That's incorrect, most scheduling systems, including OS threads are preemptive. Erlang's scheduler itself is actually cooperative - though it can still preempt the ""processes"" it schedules.Erlang's message passing system is probably more important to the success of its concurrency model than the specifics of the scheduler. As proven perhaps by the success of Akka and other actor-based systems built on a different threading model."	jahewson	12.342718	-7.509274	comment	4.0	14.0	1485715324	12.860781
13531351	Yeah, that's a good one. What would 	Yeah, that's a good one. What would you recommend to focus – Flask or Django (or maybe Tornado), given that I like to wire stuff by myself (so I enjoyed building an API in Golang)?	bloomca	12.728077	-6.552868	comment	4.0	12.0	1485876755	9.997263
13541032	Why is Drchrono allowed to post so m	Why is Drchrono allowed to post so much?	Whydraconoswhy	12.759406	-6.5340242	story	4.0	38.0	1485960137	10.101026
13541292	Your same argument can be applied to	Your same argument can be applied to virtually any other language:This ruby benchmark doesn't matter because ruby is written in C!This nodejs benchmark doesn't matter because v8 is written in C/C++!etc.	SEJeff	12.543949	-6.9884834	comment	4.0	14.0	1485962162	12.308575
13580318	follow-up: for a non-Perl person, wh	follow-up: for a non-Perl person, who is incredibly interested in getting started with Perl 6, are there any good resources (code examples, blog posts exploring language concepts unique to Perl 6) that anyone would recommend?	alekratz	12.348335	-7.0510974	comment	4.0	14.0	1486395192	13.195098
13580220	I've been using it locally to write 	"I've been using it locally to write a few small scripts, nothing publicly available (yet).Traits and roles are really neat - they feel like a natural conclusion to what Ruby started building upon with respect to metaprogramming natural syntax and encouraging developer happiness over strictness.On the whole, however, many small parts of Perl 6 feel immature. There's no core JSON/YAML module, and there's no ""official"" module manager yet - just panda[1] and a few others.Overall I'd recommend tinkering with it, but I don't think it's ready (as an ecosystem) for larger development. Hopefully soon, though![1]: https://github.com/tadzik/panda"	woodruffw	12.39454	-7.044084	comment	4.0	16.0	1486394664	13.136954
13582987	Ask HN: Is PHP worth learning?	Ask HN: Is PHP worth learning?	generichuman	12.728115	-6.6263595	story	4.0	2.0	1486409188	10.335643
13581671	I worked on Perl 5 projects professi	I worked on Perl 5 projects professionally for about 15 years, then switched to a new job that uses Node.js. I enjoyed coding in Perl 5, but it was hard to find and retain Perl 5 developers. Our later hires preferred to code in C#, Python and Ruby-- This was before Node.js took off.    Looking at language trajectories on http://modulecounts.com/ The momentum that JavaScript has compared to Perl is amazing-- CPAN growth is relatively flat, JavaScript growth is skyrocketing.  JavaScript has it's own warts, but for web projects with smaller teams, having the frontend and backend in the same language is big benefit.  As much as I enjoyed the Perl language and community, I can't foresee recommending it for team web projects in the near future.	markstos	12.341739	-6.5413647	comment	4.0	16.0	1486401746	13.125224
13581620	I chuckled the first time I saw 'use	I chuckled the first time I saw 'use strict'; at the top of the javascript file. Node.js seems to be morphing more and more into Perl 5 with every new release.	tootie	12.338735	-6.560269	comment	4.0	16.0	1486401484	13.1414995
13587520	Isn't elm a language? Why compare it	Isn't elm a language? Why compare it with frameworks?	StavrosK	13.001497	-7.689657	comment	4.0	16.0	1486448779	-12.760804
13590786	That they'd still be alive. Mainly b	"That they'd still be alive. Mainly because maintenance, and equally important, new features, would be easier.The poor reputation of PHP is from bad PHP by bad programmers, use a good programmer (as he seems to be) and the ""boost"" you get from using PHP would lead to much easier to maintain code.i.e. the same boost that lets a bad programmer get something running in PHP can take a good programmer and make him even better.Perl is a powerful language, but it's not well suited for making web pages."	ars	12.725826	-6.680814	comment	4.0	17.0	1486487484	10.337037
13606433	The bad side1) no support from mega 	"The bad side1) no support from mega corporations
2) not that many developers to choose from
3) while based on BEAM it's still too ""new""
4) too slow for raw money crunching"	holydude	12.396548	-7.3192077	comment	4.0	20.0	1486643431	2.0106995
27502724	Shaun Lebron has a bunch of interest	"Shaun Lebron has a bunch of interesting stuff on his github[0]
involving closurescript.I haven't toyed with closurescript yet, if anyone has any experience with it, what are its strengths and weaknesses? I'
ve been learning scheme/racket for the past year and for learning purposes Dr Racket is more than enough for now, but sometime in the future I'd like to branch out of that.[0]: https://shaunlebron.github.io/"	tartoran	12.417344	-7.676684	comment	4.0	18.0	1623679932	-11.096906
27526332	New Machine Learning Gems for Ruby	New Machine Learning Gems for Ruby	thunderbong	12.593486	-7.0574923	story	4.0	176.0	1623833289	12.375215
27537615	I believe most macOS PHP developers 	I believe most macOS PHP developers use Homebrew. Some in combination with Laravel Valet for easy version switching and local domain management.Docker is horribly slow on macOS. I'd wish that on no developer. We had to use docker for one project, but quickly decided to just run the tests in Docker and let the developers figure their environments out by themselves.	iruoy	12.683703	-6.61336	comment	4.0	49.0	1623921108	10.245542
27537354	PHP was included with macOS? Wasn't 	PHP was included with macOS? Wasn't that a huge security risk?Normally you try to keep a system as small as possible, especially regarding scripting languages, so an attacker has as little tools as possible available.	andix	12.730701	-6.6284866	comment	4.0	12.0	1623918600	10.388146
27540475	Why are universities still teaching 	Why are universities still teaching PHP? Is this a “programming” class or a specifically a PHP class that they offer for people who want to learn that particular language?	ben174	12.768089	-6.6428733	comment	4.0	12.0	1623942893	10.333913
27542911	Different strokes, I guess; I can't 	Different strokes, I guess; I can't count the number of people that openly gush about _why's Ruby book with the cats or whatever, but to me it just read like the ravings of a highly functional something-opath.  But reasonable people can disagree, and I'm sure I'll get downvoted for disagreeing with the hivemind.	michaelcampbell	12.603773	-7.0634484	comment	4.0	16.0	1623955045	12.39071
27584382	> We’re going to build the Oasis and	> We’re going to build the Oasis andThe Black Sun was there first.Can i interest you in a loose collection of extremely janky perl scripts? The bar’s owner hates it but, who cares? If he kicks us out we can just race bikes for a while until the fuss blows over.	hprotagonist	12.339027	-7.0235205	comment	4.0	20.0	1624309075	13.179129
27602808	Deno Deploy Beta 1	Deno Deploy Beta 1	0xedb	12.5250435	-6.449605	story	4.0	70.0	1624443527	-11.032954
27607904	This is great stuff! after working w	"This is great stuff! after working w/ various Django apps for years (anywhere from 3 dev teams to 200 dev teams), it's great to read stuff that confirms my biases :DRegarding services, I'll go as far as to say adding ANY method on models instead of handling logic in services is a recipe for disaster. How many times have you seen:  class GodModel:

    @property

    def status(self):

      # 1 million lines of logic and who knows how many queries

I've actually seen this pattern in every Django project :(Regarding urls, instead of enforcing a flat file, I'd highly recommend always using django_extensions[0]. You'll get `shell_plus` that auto imports model and `show_urls` that you can grep for endpoint and gives you the handler.[0] https://github.com/django-extensions/django-extensions"	wbc	12.8401575	-6.5143957	comment	4.0	24.0	1624471842	10.069888
27631492	Half-OT: What do you use for JavaScr	Half-OT: What do you use for JavaScript/TypeScript? (CodeGuru only works for Java and Python)I looked into Snyk Code, but it's mad expensive.	k__	12.354452	-6.5616446	comment	4.0	12.0	1624632626	-10.598809
27683453	> The need for concurrency and fault	> The need for concurrency and fault-tolerance made Elixir an obvious choice for this application, but that alone wasn't enough to seal the deal.What? Why does this make Elixir an obvious choice? Most (if not all) major languages offer concurrency primitives (e.g. goroutines), and fault-tolerance is included as a requirement by default for any sufficiently complex distributed system, but has little to do with the languages/frameworks used to build that system. Not seeing why these requirements make Elixir a better choice than any other language	babelfish	12.626559	-7.477798	comment	4.0	23.0	1625011989	12.924318
27793256	Django Suit – modern theme for Djang	Django Suit – modern theme for Django admin interface	gjvc	12.859856	-6.492988	story	4.0	5.0	1625924001	10.059432
27805872	Has there been a reincarnation of Pr	Has there been a reincarnation of Prolog?	dukeofdoom	13.147497	-7.2998233	comment	4.0	15.0	1626051986	-12.490934
27819375	Neither, really. I'd say it has the 	Neither, really. I'd say it has the largest community out of the various compile-to-js statically typed FP langs, at least with an explicit front-end focus.- PureScript has a small but passionate community, one of the biggest players in that community laid off their whole ps team so that doesn't bode well.- ReasonML fractured into ReScript but left half the Reason community behind, it's a confusing space to navigate now.- GHCJS...Most (perhaps even all) of the job postings end up on the elm slack (rather than, say, reddit or other more visible places).There was some controversy with the release of 0.19 a couple of years ago, and general contempt (in the wider community, not inside Elm) for the way the language is developed and run which means there isn't a great deal of buzz about it outsi	pd-andy	12.929994	-7.6586175	comment	4.0	23.0	1626172153	-12.74315
27819874	> It’s not possible to publish packa	"> It’s not possible to publish packages with low-level access without Elm main team approval. The compiler even has built-in DRM about that.Not calling you out or anything, but could you give a reference on that? I'm curious about what they're doing with a ""DRM"" in the compiler."	square_usual	13.010606	-7.690391	comment	4.0	12.0	1626177457	-12.752967
27834653	You remind of those developers that 	You remind of those developers that say “You have a Rails monolith? Let’s just tear everything down and rewrite it in microservices!” When in reality it takes years to move small parts of the backend into standalone services.Now imagine dismantling the whole industry with its R&D, supply chains, people’s pensions, etc.	f6v	12.677173	-6.909257	comment	4.0	27.0	1626278819	-13.811571
27843507	This is a long list of rare features	This is a long list of rare features that make Pharo interesting:https://pharo.org/features	xkriva11	12.343184	-7.262045	comment	4.0	23.0	1626348209	7.1530557
27866121	The ruby-like syntax and the VERY op	The ruby-like syntax and the VERY open and newbie-friendly community have definitely contributed to this.I've been to Elixir conferences, and they felt like people were just encouraging each other to build solid software WITH each other. I've not seen this level of camaraderie for other programming language communities.Elixir devs — and I am super biased here — are a special bunch :)	arvidkahl	12.593497	-7.079335	comment	4.0	23.0	1626532952	12.48857
27887107	Prolog is exceptionally well suited 	Prolog is exceptionally well suited for solving such combinatorial puzzles, and of course also for much tougher tasks like timetabling instances in schools, workforce rosters, tournament schedules etc.The key feature that makes Prolog so attractive for such tasks is the availability of constraint solvers that ship with many Prolog systems and which can be used to elegantly express these tasks in terms of relations between integers, Boolean variables, rational numbers and other domains. The sophistication and efficiency of constraint solvers depend heavily on the used Prolog system, and fast constraint solvers are often an important motivation for buying a commercial Prolog system such as SICStus Prolog.Interestingly, constraint solvers can themselves be implemented elegantly and efficientl	triska	13.144783	-7.2892838	comment	4.0	24.0	1626727796	-12.473317
27887155	Technologies like TypeScript are sti	Technologies like TypeScript are still dependencies that require transpiling to vanilla JavaScript and add to the bundle size. While typescript is becoming more and more common (for good reason) it still is effectively a workaround that compensates for the unergonomic-ness of the browser environment. You could make the same argument for frameworks like Angular, React and Vue.If WebAssembly replaced js, then newer, more efficient browser languages could be invented. Like a new implementation of typescript could be created that is statically compiled and more efficient. All of this transpiling from x to js and y to css would be unnecessary.	peterthehacker	12.413445	-6.516315	comment	4.0	23.0	1626728101	-10.463195
27886733	Using Prolog for Sudoku Variants	Using Prolog for Sudoku Variants	triska	13.265782	-7.3466015	story	4.0	92.0	1626725164	-12.498199
27947548	I suppose the downvotes may be justi	I suppose the downvotes may be justified due to your comment being pretty out-of-place, but, just to add some perspective: I'd like to remind everyone that PHP originally used strlen() as a hashing function: https://news-web.php.net/php.internals/70691It is (or at least originally was) certainly not the pinnacle of good design.	LambdaComplex	12.748696	-6.6908536	comment	4.0	15.0	1627199805	10.269769
27947859	Ruby Ractor Experiments: Safe async 	Ruby Ractor Experiments: Safe async communication (2021)	Lammy	12.55959	-7.0020523	story	4.0	58.0	1627204655	12.319666
27953944	I still feel bad about the image of 	I still feel bad about the image of people towards PHP, but given the amount of bad tutorials and packages that are outdated out there I understand that most enterprise / startup wants to avoid having to code in PHP again.For the past couple of years I have been working with laravel in a small company, and I really enjoyed it. The environment that it provides honestly is amazing. Documentation is super easy to read, laracast is amazing to bootstrap your knowledge in couple of weeks, and community is huge that you can find almost anything already built by them.However its hard to find any big companies here that uses PHP, jobs popping up is mostly python, java and c#, thus sadly I have to leave php and learn java / python for the new big tech job (also for my own future). Its not that java 	robertwt7	12.7861185	-6.6352654	comment	4.0	18.0	1627256045	10.3425
27980029	I'm right there with ya cries in not	I'm right there with ya cries in not even Coffee version 2.One day maybe it'll be a lucrative niche for contractor legacy-maintenance warriors.That'll happen before I convince senior management that startups with React and Typescript can run rings around us, and that I can't find anyone fulltime who wants to work on our stack (or has even worked in not-React)...If anyone wants to chime in with their stories about using Decaffeinate, I'd be interested!https://github.com/decaffeinate/decaffeinate	vosper	12.451631	-6.5462484	comment	4.0	14.0	1627443577	-10.898101
27984310	I've listened to only 2/3 of it, but	I've listened to only 2/3 of it, but: he promotes Crystal+Lucky (crystal is compiled) as good replacements for Ruby and Rails.  The second part of his talk is about promoting a new variant of open license called PostOpen, which will require commercial users of Post Open software to pay 1% for using, 1.5% for using without sharing modifications.  There is a 10% fee for worse offense.  All percentages are percentages of revenue.  This is partly aimed at large companies that host open source software with few modifications as a service and charge for it.  Money goes to PostOpen and possibly conventional Open Source developers.	georgeam	12.62729	-7.141696	comment	4.0	26.0	1627483038	12.339358
27986474	Twitter considered migrating from Ru	Twitter considered migrating from Ruby on Rails to Erlang 11 years ago (but ultimately chose Scala due to the Java tie-in).https://news.ycombinator.com/item?id=2825689I've always wonder how the Erlang ecosystem would be different today if a digital giant like a Twitter/FB/Google had used Erlang as part of their core business.Note: yes, I realize WhatsApp owned by FB is run on Erlang.	alberth	12.614764	-7.4626207	comment	4.0	31.0	1627493340	12.913154
12003746	Point 6. freaks me out, because I am	Point 6. freaks me out, because I am not sure if I am one of them.Also, your first three points puts Ruby pretty much out of the picture.EDIT: Mentioned Ruby because that's what I am working on right now, after Java and Scala	sidcool	12.573517	-7.0647407	comment	4.0	15.0	1467226243	12.389497
12006707	Wait, people still use PHP for new s	Wait, people still use PHP for new software?! And here I was thinking the industry had modernized...	wyqydsyq	12.7769785	-6.647503	comment	4.0	25.0	1467263553	10.33696
12011206	Interesting; I've never heard of mos	Interesting; I've never heard of most of those besides Go (& Perl of course). Is CoffeeScript considered a programming language? :O	virtuexru	12.374197	-6.625648	comment	4.0	18.0	1467316649	-10.512733
12012424	> more maintainableI get that the Er	> more maintainableI get that the Erlang VM is really nice for some things (I made my first contribution to it in 2004!), but I'm curious about the above statement, as I haven't had the time to dig into Elixir/Phoenix yet.	davidw	12.593934	-7.5005865	comment	4.0	43.0	1467326613	12.9175005
12013094	I am very jealous as a Django develo	I am very jealous as a Django developer. They decided to keep Channels as a third-party package after all, maintained by a single guy :(	albasha	12.8140135	-6.5594277	comment	4.0	12.0	1467334387	10.053964
12020658	I read this, but seemed to skip over	I read this, but seemed to skip over the part where he explains why this changed suddenly, when the behavior was documented?What changed to make the perl become capable whereas previously it lacked the low port capability?	davidu	12.344427	-7.0327196	comment	4.0	13.0	1467418234	13.204377
12023226	FYI: I downvoted this because I disl	FYI: I downvoted this because I dislike the trend of Elixir/Phoenix discussions taking over every single thread.	judofyr	12.699406	-7.4480934	comment	4.0	12.0	1467481377	12.910008
12047545	You seem to be familiar with Elixir.	You seem to be familiar with Elixir. May I ask you some questions?. What kind of web applications are you building with it? I'm asking what kind of web apps or scenarios do you think Elixir is particularly well suited for?I saw a thread on Elixir a couple of days ago and it piqued my interest and I saw a couple of videos that were posted there, one from some Ruby Conf that claimed that Elixir was giving better results (in request time) than rails. He never explained how that was posible or what would have been the results if he would have been using a cache (it's always faster to hit an in memory cache than hitting a db that has to touch disks, so if he speeded things up without a cache he would speed things even more with a cache). Then I watched another videos from some conference in Osl	emluque	12.688882	-7.3986654	comment	4.0	16.0	1467867492	12.858934
12047909	Akka.NET 1.1: Akka.Cluster, Akka.Str	Akka.NET 1.1: Akka.Cluster, Akka.Streams, and Multi-Node Testing	Aaronontheweb	12.333756	-7.413584	story	4.0	115.0	1467875226	12.707764
12062454	Why it's important to optimise the t	Why it's important to optimise the tricky parts of Ruby [video]	chrisseaton	12.646901	-7.036299	story	4.0	86.0	1468086392	-10.394654
12073561	So how are you guys building TS for 	So how are you guys building TS for web apps? I've been using VS Code, putting classes into namespaces and it builds with commonJS, which I concatenate into a single file that I load into a website.That last part is in need of change because you're not supposed to concatenate commonJS. So how have you been delivering your code to the browser?	neals	12.3789215	-6.566256	comment	4.0	13.0	1468264664	-10.433089
12073209	For those unfamiliar with elm:I woul	For those unfamiliar with elm:I would sum it up as:-) a stripped down, simplified version of Haskell-) with a good concept for side effects-) that compiles to Javascript-) gearded towards writing type safe frontend code for the Browser-) strongly nudging you towards a clean, well architected app structure (see 'the Elm Architecture').I think it's on the tipping point right now:if enough people jump on board, the language get's good documentation, and the library ecosystem grows, I see a great future for Elm.Otherwise, it will dwindle away soon into the endless annals of forgotten languages.	the_duke	12.976434	-7.6714053	comment	4.0	67.0	1468262179	-12.751601
12075716	> Otherwise, it will dwindle away so	> Otherwise, it will dwindle away soon into the endless annals of forgotten languages.The opportunity I perceive for Elm to avoid this fate is Phoenix adopting it in the default new project, in a similar fashion to Rails adopting CoffeeScript.	inopinatus	13.00215	-7.689033	comment	4.0	15.0	1468281539	-12.766174
12093452	I love DRF. Compared to building API	I love DRF. Compared to building APIs using Flask or Node, it's an order of magnitude faster.	morgante	12.440759	-6.5241084	comment	4.0	24.0	1468502281	9.847977
12101191	Ask HN: Crystal and Kemal or Elixir 	Ask HN: Crystal and Kemal or Elixir and Phoenix?	galfarragem	12.731189	-7.3708224	story	4.0	3.0	1468593077	12.863483
12108435	This has singlehandedly made me inte	This has singlehandedly made me interested in learning more about prolog. I mean, if you can do things like that that simply... Holy crap. No wonder so many lisps incude a prolog implementation of some sort.	qwertyuiop924	13.133249	-7.3054934	comment	4.0	26.0	1468715326	-12.478899
12109430	I've experimented with both; I've do	"I've experimented with both; I've done some Akka.net training. My thoughts:1. Orleans is very clean but highly opionated and this results in what I see as operational shortcomings, e.g. I prefer running discrete Windows services that I can start/shutdown to provide fault isolation and safe upgrades, but this doesn't seem to be directly supported in Orleans (the documentation speaks about ""restrictive placement strategies"" to ensure certain grains are located in certain silos, but I could never figure out how to achieve that, and it also seems against the design to have such a level of control).  If it fits what you need, it's really a nice solution.2. Akka.net's API is very messy and out-dated, in my opinion;  I'll give some examples. You have to inherit from Akka.net classes, which makes "	ryanjshaw	12.340259	-7.459947	comment	4.0	14.0	1468742695	12.769201
12113136	So, what does it mean exactly when t	So, what does it mean exactly when they say that these kinds of problems are in the same class as Sudoku?	tunesmith	13.450655	-7.4082446	comment	4.0	13.0	1468813692	15.077036
12117174	"""Which large companies are still usi"	"""Which large companies are still using Perl in production? I can name Booking.com, but do you know any others?"" - it's worth mentioning DuckDuckGo of course, which is quite young and chosen Perl as a way to go."	zenlot	12.339693	-7.002194	comment	4.0	13.0	1468867110	13.175385
12134953	On Flask vs Django:> Flask is a “mic	"On Flask vs Django:> Flask is a “microframework” for Python, and is an excellent choice for building smaller applications, APIs, and web services.> Flask is default choice for any Python web application that isn’t a good fit for Django.Not very helpful. What is the threshold between ""smaller"" and larger applications? What makes an app not ""a good fit for Django""? I've never found clear answers to these questions, mostly just vague opinion. This Hitchhiker's Guide, a self-proclaimed opinionated guide, could really take off if it got some opinion and backed it up with real rationale."	eevilspock	12.765546	-6.555362	comment	4.0	15.0	1469079137	10.040192
12161993	Oh, Prolog.  I once wrote a hardware	"Oh, Prolog.  I once wrote a hardware configuration in Prolog.  (Dependency resolution - rules like ""An A requires a B or a C"".) The configuration part was fine.  Trying to write a menu system in pure Prolog, though...Most of the troubles with functional programming come when you actually have to do something. The imperative/functional boundary remains a problem."	Animats	13.145076	-7.2923574	comment	4.0	15.0	1469484613	-12.490367
12192058	We introduced Typescript into our ar	We introduced Typescript into our architecture. We start to love it, too.One thing though: the engineers started to write classes for everything. I had to catch that and forced them to stay as functional as possible. Does that happen to other teams, too?And I really like to see WebAssembly to become part of our browsers and Typescript generating it instantly.	einrealist	12.367813	-6.7355494	comment	4.0	15.0	1469864988	-10.440452
12205344	What could you possibly be doing tha	What could you possibly be doing that you need those things within a Django app? If you're placing CPU-intensive and scientific code directly into your web app backend, I'd rethink your architecture before you consider switching languages.	RussianCow	12.723153	-6.5545387	comment	4.0	14.0	1470081034	10.045733
12223623	Elixir gets plugged so often in othe	Elixir gets plugged so often in other-language threads - whether it's Julia or Ruby or, like here, Crystal - that if it wasn't FOSS I'd have decided it's being astroturfed.I guess it's a good thing that people like it so much, but it's really starting to feel marketing-y by now.	sundarurfriend	12.674356	-7.4361424	comment	4.0	22.0	1470289222	12.90839
12223745	Maybe the makers of Crystal need to 	"Maybe the makers of Crystal need to take a leaf out of Go's book.  Despite the Go creators not being windows users (AFAIK), they support Windows as a primary target, to help adoption, I assume.Of course the Crystal people probably don't have the same number of developers working on it as Go did even early on.Edit: Go took a little while to support windows, not until around July 2010. See this question from November 2009:
http://stackoverflow.com/questions/1717652/can-go-compiler-b..."	kristianp	12.620541	-7.2780204	comment	4.0	13.0	1470291526	10.281484
12223840	My biggest concern if i were to try 	"My biggest concern if i were to try to use Crystal in production would be the lack of ""googleability"". I'm guessing your team is very familiar with the language, so it's not as much of a problem that you can't Google a problem when it happens. Do you feel that this is a major roadblock for people new to crystal, or are the majority of errors very intuitive? the second thing is that according to the site crystal is in alpha and making breaking changes sometimes. how often do you have to refactor after an update and how difficult has it been to spot and fix that something is broken by an upgrade? Very interested in using it myself but can't bring myself to commit an app to it."	coltonv	12.63156	-7.263856	comment	4.0	16.0	1470292973	-11.24265
12223908	Stopped reading when I saw the `end`	Stopped reading when I saw the `end` keyword... the most annoying part of Ruby.Edit: I'm getting hella downvoted but I'm leaving this here. Ruby fanboys can't silence me!!! ;)	welder	12.559387	-7.0433135	comment	4.0	19.0	1470294237	12.381749
12223568	I'd like to put out there that Cryst	"I'd like to put out there that Crystal is absolutely awesome. The language itself is Crystal clear, but the language documentation and API documentation - oh my!I had never worked with compiled languages before I tried Crystal, but had always had a huge interest in getting into that. When I wanted to learn the compiled ecosystem I looked at languages like Go and Rust, but the learning curve for those was a bit overwhelming for a newbie. A while later I found Crystal, and much thanks to the simple syntax of the language I learned a ton of new things about compiled languages very quickly. 
The absolutely best part of the language is that it is written in plain Crystal, and I've been looking at their own implementations for various things a lot - something I've never done before, having worke"	Svenskunganka	12.59407	-7.2622747	comment	4.0	22.0	1470288451	-11.218645
12223487	The really important questions in an	The really important questions in any modern language:(0) Does Crystal have a lot of undefined behavior like C?(1) Does understanding Crystal programs require a lot of trial and error just like in Ruby?(2) How good a job does Crystal do at preventing me from shooting myself in the foot?A language isn't to be judged just by the amazing programs you can write in it. (Turing-completeness and I/O facilities have that covered.) Far more important are the totally stupid programs that you can't write in it.	catnaroek	12.616016	-7.2577	comment	4.0	56.0	1470287020	-11.225175
12274096	By way of contrast several years ago	"By way of contrast several years ago I benchmarked a real application hitting 1000 requests/s on a $20 per month Linode box. At this point there was no noticeable increase in response time. I could have probably gone much higher but that was enough for my needs so I stopped.My ""secret"" is to use a language that is not slow-as-mollasses. A decade ago Rails had a definite productivity advantage over the (mostly Java) web frameworks of the time. That hasn't been true for a while, and there are many performant alternatives. If you're culturally a Ruby or Python programmer you can go pick up Go, or Node, or Elixir and feel at home. If you live in JVM or FP land you've always had fast alternatives (in my case it was Scala).You pay a one-time cost to learn new things but you reap the benefits for"	noelwelsh	12.72925	-6.94741	comment	4.0	17.0	1470990461	12.365743
12294827	I suggest giving Ruby a try too. I f	I suggest giving Ruby a try too. I find it great for both web dev and local automation scripts. You can do pretty much anything you can do in bash but with clearer and shorter code. I've been writing all my non-trivial automation code in Ruby for years.Rails is just a popular web framework for Ruby, there's a lot more the language can do.	ufmace	12.533276	-6.99266	comment	4.0	34.0	1471310098	12.382282
12301988	1.day?  I confess to not being a Rub	1.day?  I confess to not being a Rubyist, but does that require monkeypatching the base int class?I don't see anything unreasonable about Pendulum's interface.  Let's let Python be Python and Ruby be Ruby.	bjt	12.513854	-7.0465574	comment	4.0	14.0	1471398737	12.342596
12341328	I'm still surprised no one has creat	I'm still surprised no one has created a JavaScript front-end for Erlang/BEAM, like Elixir or LFE. JavaScript is a decent language with a huge community and Erlang/BEAM could solve Node's deficiencies like async-everything APIs and single-threaded execution.	cpeterso	12.578661	-7.406857	comment	4.0	12.0	1471925312	12.881938
12344103	Wow, really surprised to see Ember s	Wow, really surprised to see Ember so low on the FE framework graph.	polysaturate	13.110391	-6.4373174	comment	4.0	20.0	1471963461	-15.514703
12344549	Oh the irony!'Superior technology', 	Oh the irony!'Superior technology', when talking about a language, is entirely subjective and based on your opinion of why it is superior.I've seen some amazingly elegant code in all of those things you've dismissed.  Facebook is written in PHP, and I'm willing to bet you use an application or two that runs nicely on Node or Go.  so what social signals are you talking about?	binarymax	12.754882	-6.5985765	comment	4.0	27.0	1471966514	2.8454788
12346062	Very interesting point of view.I see	Very interesting point of view.I see a fourth option:- compile the scripting language to C (like Crystal for Ruby)	vmorgulis	12.577117	-7.2029057	comment	4.0	17.0	1471976303	-11.199423
12350948	I wish Ruby had the math and scienti	I wish Ruby had the math and scientific library support of Python.Also, I've been using Jupyter lately to brush up on data structures and algorithms. It's been pretty sweet to write code in a web notebook and render output including digraphs beneath each block of code. Is there anything like that for Ruby?	euroclydon	12.470295	-7.014452	comment	4.0	12.0	1472034173	12.3842125
12351009	just to chime in on this, modern PHP	just to chime in on this, modern PHP is nothing like what people remember from the pre ROR days, i still use it to this day and the major frameworks and libs are really well written to the point i feel some are even over engineered and almost looking like Java (just take a look at the latest Guzzle PHP Library)	kayoone	12.745913	-6.623118	comment	4.0	35.0	1472035210	10.330992
12352462	Around 2001 I felt jaded with the in	Around 2001 I felt jaded with the industry and determined to do whatever was expedient to earn money. That meant using PHP, because that was purportedly the place to be at the time.I have never felt so uninspired by a language. My overwhelming feeling from the get-go was that it was a collection of libraries, which would be fine -- but why create a new language?PHP has the rare distinction among languages of not containing any novel features or ideas. Not only that, but it borrows liberally from several other languages, resulting in an overabundance of syntax. Instead of a tool for attacking problems, it's a reheated leftover. There is not suggestion of a better or worse way to accomplish some goal.Finally, the original premise of PHP, interspersed functional code and HTML, is high on my l	TheLarch	12.756574	-6.6476703	comment	4.0	21.0	1472050450	10.346088
12381131	Ruby Deoptimization Engine	Ruby Deoptimization Engine	ksec	12.570635	-7.055232	story	4.0	103.0	1472468631	12.385555
12391439	Announcing TypeScript 2.0 RC	Announcing TypeScript 2.0 RC	sagadotworld	12.412576	-6.8337073	story	4.0	59.0	1472573847	-10.55104
12397619	Beamium is the easises way to presen	Beamium is the easises way to present live	MichaelSte	12.438308	-7.3249955	story	4.0	3.0	1472644985	7.190158
12415071	What a farce. Remind me again why th	What a farce. Remind me again why this is killing Django and Rails for mindshare? (I'm serious, somebody please remind me.)	hyperbovine	12.837142	-6.6831145	comment	4.0	18.0	1472840557	10.298968
12466280	Can I ask what you like about Django	Can I ask what you like about Django? As a former Django user I've become quite jaded on the framework, and would caution you against using it if you need data integrity, performance, or a complex front-end.	alexbecker	12.845539	-6.508229	comment	4.0	22.0	1473457561	10.0955715
12476763	Yet real system design is usually so	Yet real system design is usually so complex that no single technique can cover it. I shudder when I hear TDD proponents claiming that this technique can even be used for emergent design. An amusing example is Ron Jeffries's Sudoku solver attempt:http://ravimohan.blogspot.com/2007/04/learning-from-sudoku-s...	pzh	13.434037	-7.405592	comment	4.0	13.0	1473645877	-13.268477
12488015	Erlang uses asynchronous message pas	Erlang uses asynchronous message passing. Smalltalk models method calls as synchronous message passing. Therein lies an enormous amount of difference.	barrkel	12.397226	-7.476289	comment	4.0	15.0	1473773539	-9.198591
12495604	Practical Object-Oriented Design in 	Practical Object-Oriented Design in Ruby (POODR) by Sandi Metz opened doors for me - http://www.poodr.com/	thorsteneckel	12.444513	-7.1426606	comment	4.0	14.0	1473850311	12.339594
35185646	for a lot of people it was some comb	for a lot of people it was some combination of:- Flow has more adoption (it did, for a while, in the OSS sphere)- Microsoft is evil (remember, this was before everyone was using VS Code and loving it.  (Also, tautologically, TypeScript has been one of the biggest things that changed this public perception for the people I hang around))- Facebook is awesome (oh, how times have changed...)- Flow has total type soundness as a goal (from the beginning, and through to today, TypeScript still lists this as an explicit non-goal)- You literally cannot use React and Flow together (it didn't support JSX for what felt like an eternity and Flow did from the beginning (I think?).- Flow had exact object types (TypeScript _sorta_ has this today, but most people don't know to turn it on because it isn't i	dimitropoulos	12.441534	-6.7191114	comment	4.0	15.0	1678989480	-10.480233
35185705	It's easy to miss, but I'm most exci	"It's easy to miss, but I'm most excited for ""--moduleResolution bundler"" (https://devblogs.microsoft.com/typescript/announcing-typescr...)My understanding is it should allow you to finally have TypeScript files that import other TypeScript files and include the file extension. This is important because, for one, it means Deno TypeScript modules and non-Deno TypeScript modules are now compatible (can import each other)! As long as no unavailable system APIs are used, of courseThis has been a problem in a project I've been working on where a Deno back-end service wants to share some code with a Next.js front-end service. Currently, the shared modules are not able to import anything else, because Deno requires file extensions in import paths and non-Deno TS requires no file extensions in impo"	brundolf	12.444713	-6.465004	comment	4.0	17.0	1678989650	-10.815366
35186778	> Without Angular, we may very well 	"> Without Angular, we may very well not have TypeScript today.Typescript was started at Microsoft by the guy who designed Turbo Pascal and C#, so completely independently from Google's Angular team. Angular had its own ""AtScript"" and eventually ditched that. Typescript had experimental decorator support well before Angular Team moved from AtScript, because it was a ECMAScript proposal.Angular had zero influence in the design or success of Typescript. Typescript however does support JSX optionally so one can claim that React DID influence Typescript's design decisions."	throw_m239339	12.439037	-6.720413	comment	4.0	14.0	1678993717	-10.462366
35207659	Composer autoloading and the PSR-4 n	"Composer autoloading and the PSR-4 naming convention works just fine, since you have to separate the class names with some kind of information about the developer, followed by the name of the class. Java uses a similar naming scheme too (""org.apache.commons.SomeClass"" etc.) though autoloading is specific to PHP.I'm curious as to why you consider autoloading over PSR-4 namespaces as insufficient."	supriyo-biswas	12.698832	-6.617694	comment	4.0	23.0	1679132928	10.344023
35207978	As a long-time PHP developer, its wa	As a long-time PHP developer, its way too fast.  We're forced to constantly upgrade for features that don't really matter for most uses, but aren't backwards compatible.	pirate787	12.765553	-6.641232	comment	4.0	26.0	1679137060	10.301386
35282169	TypeScript.Rails is faster for build	TypeScript.Rails is faster for building an MVP. But it's significantly worse than a project built with a typed language when it comes to extending and maintaining.I thought I had misconfigured Sentry (for error logging) because the type of errors that plague Rails, or any language that is not typed, just don't happen with a typed language (unknown method called on NilClass).We can decide to make a column in the DB to no longer allow NULL values, and we are immediately notified by the TypeScript compiler about every line that needs to be updated.	EduardoBautista	12.601227	-7.0225005	comment	4.0	14.0	1679610050	12.355416
35321113	In my experience, the far more perni	In my experience, the far more pernicious way to get N+1 is serializers (Django REST)	paulddraper	12.876612	-6.4859314	comment	4.0	12.0	1679875283	10.102933
35400480	Is Rails Dead?	Is Rails Dead?	sathishmanohar	12.74444	-6.965537	story	4.0	4.0	1680358512	12.359422
35429555	(Taken from an old comment of mine)I	"(Taken from an old comment of mine)If you were to say “pandas in long format only” then yes that would be correct, but the power of pandas comes in its ability to work in a long relational or wide ndarray style. Pandas was originally written to replace excel in financial/econometric modeling, not as a replacement for sql. Models written solely in the long relational style are near unmaintainable for constantly evolving models with hundreds of data sources and thousands of interactions being developed and tuned by teams of analysts and engineers.
For example, this is how some basic operations would look.Bump prices in March 2023 up 10%:    # pandas
    prices_df.loc['2023-03'] *= 1.1

    # polars
    polars_df.with_column(
        pl.when(pl.col('timestamp').is_between(
            datetim"	brahbrah	12.348201	-6.537793	comment	4.0	13.0	1680548654	10.121824
35430485	We use django for our websites where	We use django for our websites where I work, and I use it for personal projects for the ORM.How do you like the ORM for FastAPI? I've wanted to try it but since I already know how to use django it's been hard to find a reason to try FastAPI. Currently I _really_ like Django's orm.	thewataccount	12.857513	-6.4824696	comment	4.0	12.0	1680552400	10.045701
35442717	Hacker News have been through so man	"Hacker News have been through so many fads I've lost count at this point. Here are some I remember clearly:- Ruby on Rails- React- NodeJS- Bitcoin and much later, cryptocurrencies and blockchain- Docker- Golang- Kubernetes- Serverless- ""JAMStack"" / static websites- Remote work / Digital nomadism- no code / low-code platforms (although this was never that intense compared to others like Ruby on Rails or Golang)I'm sure others can remember more fads that have come and go :)"	capableweb	12.694706	-6.9623237	comment	4.0	12.0	1680627823	12.364504
35451012	Start hopping on rails, enjoy life a	Start hopping on rails, enjoy life and see everything going by for the circus it is	eurasiantiger	12.774468	-6.9059196	comment	4.0	12.0	1680683061	12.329513
35466053	Ask HN: After 20 years coding, how d	Ask HN: After 20 years coding, how does one level up?	john_the_writer	12.714462	-7.0150356	story	4.0	2.0	1680772399	12.444782
35470328	PHP was compiled into WASM, so now y	"PHP was compiled into WASM, so now you can run PHP apps ""as WASM"". How is this different from just running PHP, without WASM? Apparently it's faster, but also they make this claim:""Picture running Wordpress and not having to worry about attackers breaking into your system""uh, so, you sprinkled some WASM magic on some code and suddenly several decades worth of security research is obsolete? .....yeah, I'm gonna call bullshit. Compiling code or ""running in a sandbox"" does not stop attackers from breaking into your system. Might slow them down for a few months while they develop some new attacks."	0xbadcafebee	12.736566	-6.614894	comment	4.0	19.0	1680796952	10.302148
35478947	For me it’s a perfect replacement fo	For me it’s a perfect replacement for Stack Overflow. Except every solution is tailored to my exact code and situation. I’ve even gotten it to walk me through things like installing WSL 2 without using the Microsoft Store after I nuked all Appx packages.Maybe my favorite was pasting in pages of documentation describing all of the error codes for a library (the docs are the only source of truth) and getting it to output a very good typescript enum.	teaearlgraycold	12.353179	-6.785722	comment	4.0	20.0	1680851038	-10.381553
35479362	I imagine it wouldn't be too hard, s	I imagine it wouldn't be too hard, since Django only has one dependency - Django itself (NodeJS developers weep).Is rails the same way dependency wise?	winrid	12.7963705	-6.6510324	comment	4.0	27.0	1680854812	10.253541
35480029	I built my startup 4 years ago with 	I built my startup 4 years ago with a combination of react + aws + gatsby + hasura. I thought this would be great for performance and scale. Fast forward to today, I spend at least 2x as much time to code a feature than if I had just stuck with a simple rails stack, and the scale I imagined never happened. Now rebuilding everything with rails so I can ship faster and focus on growing the product, not making engineering prowesses.	dagorenouf	12.790768	-6.761819	comment	4.0	28.0	1680862345	12.29297
35481228	Are there other languages where the 	"Are there other languages where the dominant web framework changes so much? Will Rails ever be ""done""?"	surteen	12.653089	-6.9182177	comment	4.0	12.0	1680873228	12.3363695
35482693	I started my professional career wit	I started my professional career with Rails 8 years ago and deeply miss aspects of it. It uses lines of code so efficiently, letting you go from zero to product with outrageous speed. Everything is a solved problem. Ruby as a language is so expressive, so beautifully ergonomic, so easy to read. It's such a joy.But the view layer has not aged well. After years of working with a focus on React and TypeScript, I can't stomach the Rails approach to views. As much as I appreciate the value proposition of Stimulus and truly feel the shortcomings of SPAs deep in my bones, I crave components, type safety, unidirectional data flow, and more options for styling than just classes. React in particular has rich options for UI frameworks that feel truly idiomatic. The last time I tried to start a projec	sickcodebruh	12.806979	-6.59222	comment	4.0	16.0	1680881595	12.287232
35483837	I must be the only person on Hacker 	I must be the only person on Hacker News who dislike Ruby.It simply has too much magic and doesn't offer enough abilities (unlike Elixir or any Scheme variant) to justify the dynamic type nature.Go and Rust are perfect for me (and maybe Zig?). They covered everything I need.	didip	12.580359	-7.149477	comment	4.0	12.0	1680886174	-11.24492
35496261	I can't be the only person who wonde	I can't be the only person who wondered why a company was still using the Elm email client.Edit to add: There are enough names and acronyms available. To avoid even temporary confusion, and to make literature searches easier, try to avoid popular ones from yesteryear that were used in your general discipline.	anonymouskimmer	13.0119	-7.6906977	comment	4.0	12.0	1680979140	-12.787708
35497222	Because the language is frozen in 20	Because the language is frozen in 2019, it's last meaningful release.It was doomed to end this way due to the close leadership and being developed behind closed doors by a single developer.This kind of projects, as amazing as they are, and Elm is absolutely an amazing language and project that has changed and influenced web development meaningfully, are just untrustable.If you can't have a discussion with library authors where they confront their ideas in the open, you need to move on or pay the consequences.	epolanski	13.010395	-7.6907864	comment	4.0	28.0	1680985291	-12.759631
35497354	I've recently had an interviewer tel	"I've recently had an interviewer tell me that ""Erlang is an academic language"" and promptly stop the conversation after that. That's in a company that was attempting to make distributed applications easier to write.This was both:- factually wrong;- a bright red flag that the company doesn't know their own domain as well as they think/claim;- a bright red flag that their scope is much more limited than what they claim in the job description.:shrug:"	Yoric	12.561656	-7.5164785	comment	4.0	16.0	1680986158	12.915209
28014531	I've used Sorbet a lot in a few proj	I've used Sorbet a lot in a few projects. Ultimately, I wouldn't use it again. It's too invasive in the codebase and it impacts readability.For example, having to wrap values in `T.must`, `T.nil`, etc. is a net loss. I read Ruby code full of Sorbet annotations and I wish they were gone.You're adding useless boilerplate to satisfy the tool, and you have to change your code in unintuitive ways so the tool can understand it.	ljm	12.540287	-7.152551	comment	4.0	17.0	1627696678	12.3657465
28136095	PHP “Note That”	PHP “Note That”	Nition	12.751772	-6.6274924	story	4.0	10.0	1628637998	-1.3463337
28144436	My company (I'm not the hiring manag	My company (I'm not the hiring manager, just in the know) has been struggling to find any kind of programmer who either knows Elixir, or who is willing to learn.I'd love to help them along because the workload is getting rough. Are there any tips you can share about finding them? Where do you post ads, what's the process like, remote or in person? Anything would help. Thank you!	LeonenTheDK	12.705906	-7.458677	comment	4.0	13.0	1628700432	12.9325075
28184513	I started applying to some Elixir jo	I started applying to some Elixir jobs and have gotten a ton of screening rejections. I haven’t written it before but I have done a little Erlang, albeit not professionally.	the_only_law	12.637429	-7.4854894	comment	4.0	19.0	1628980448	12.930519
28190236	Wigner Crystals (2017)	Wigner Crystals (2017)	leephillips	12.634139	-7.2514405	story	4.0	45.0	1629046109	-11.061575
28189173	Yeah, one of the key selling points 	"Yeah, one of the key selling points of Rails was that it was Omakase (Japanese: ""I'll leave it up to you"", i.e. you take the defaults Rails provides) and ""batteries included"" (i.e. there's enough provided in the box to get a working application).Having to jump through all these hoops (I'll note that one of the suggested gems is Devise, which provides a framework for user authentication) suggests either this is very much no longer the case or this is tacking on a lot of stuff Rails was never intended to use, which could be fun to maintain down the line."	tolien	12.785542	-6.91771	comment	4.0	14.0	1629038807	12.348232
28223121	As I understand it, there was a rift	"As I understand it, there was a rift in the community over the leadership's tone in messaging and communication. Some Developers also felt like they could not contribute in a meaningful way or have constructive discussion with maintainers.See posts like these for more details and comments:https://news.ycombinator.com/item?id=16510267https://news.ycombinator.com/item?id=22821447There are also several great alternatives now. F# with Fable and Elmish for example: https://zaid-ajaj.github.io/the-elmish-book/#/And Bucklescript TEA with Ocaml or Reason: https://github.com/OvermindDL1/bucklescript-teaSome others have also gone on to develop new languages taking inspiration from Elm: <a href=""https://www.mint-lan"	jaeming	13.00263	-7.6890497	comment	4.0	33.0	1629302372	-12.758617
28224326	Those other things have different na	Those other things have different names like TSV	asdff	12.439973	-6.596362	comment	4.0	13.0	1629307024	-10.514081
28275091	Is Deno ready for production?What li	Is Deno ready for production?What limitations have you run into?	FaisalAbid	12.556223	-6.472869	comment	4.0	12.0	1629723813	-10.995269
28277460	I'm a long-time Node user but decide	"I'm a long-time Node user but decided to use Deno for a personal project and found that it's is a pleasure to work with. Some highlights:  - TypeScript works out-of-the-box without configuration
  - includes modern browser APIs like fetch() without needing to import additional dependencies
  - The Deno-specific APIs (like Deno.readTextFile()[0]) are Promise-based and have intuitive interfaces
  - The Deno standard library[1] reduces the need for 3rd party dependencies, since it covers a lot of cases where one would be needed

I haven't yet used Deno in a commercial product, but I believe I will in the future because Deno seems ready for primetime.  [0]https://doc.deno.land/builtin/stable#Deno.readTextFile
  [1]https://deno.land/manual/standard_library"	binarynate	12.474481	-6.4409466	comment	4.0	23.0	1629732975	-10.90743
28290403	Responsible Monkeypatching in Ruby	Responsible Monkeypatching in Ruby	thunderbong	12.447868	-7.0292645	story	4.0	55.0	1629820069	1.3879467
28305791	I wonder why this otherwise thorough	"I wonder why this otherwise thorough post doesn't mention almost decade-old feature called ""refinements"" [1]?1: https://ruby-doc.org/core-2.5.3/doc/syntax/refinements_rdoc...."	develop7	12.530935	-7.079259	comment	4.0	14.0	1629919554	12.387371
28318178	If we're sharing experience with und	If we're sharing experience with underengineered code, let me have a go.At $BUSINESS we have a very successful marketplace that brings together buyers and sellers! We've recently IPOd. We get a lot of new items in and we have an internal page which is used by multiple full-time employees to approve new items, maintaining quality and defeating spammers. The code is written in HTML::Mason templates in Perl (which is basically pretending to be PHP, but for Perl).The code makes a query to the database that joins the main `items` table with millions of rows with about 5 other tables. It does complicated locking logic in this query, and if this logic fails, the multiple full-time approvers cannot effectively coordinate their work, and the site cannot make money off new items. The HTML and the co	fennecfoxen	12.6954775	-6.526309	comment	4.0	12.0	1630000320	-3.4246447
28327526	"""Phoenix 1.6 ships with a new phx.ge"	"""Phoenix 1.6 ships with a new phx.gen.auth command for a complete authentication solution bootstrapped into your application"" - hope it's a decent implementation. Setting up a JWT authentication took me days while learning phoenix/elixir and it is the sole reason why I never went with Phoenix for any other project. So many components involved."	chimen	12.821559	-7.0925126	comment	4.0	14.0	1630070800	12.722302
28327734	Ruby companies like AirBNB, Stripe e	Ruby companies like AirBNB, Stripe ended up edging out their competitors using the relatively glacial Java or C++ frameworks. We will need to see a new generation of Phoenix winners before Elixir is taken seriously.It could be that the marginal performance gain from using Elixir is not worth the hassle of training and hiring in a whole new language. It remains to be seen.	ipnon	12.698843	-7.373583	comment	4.0	18.0	1630071917	12.847241
28362827	> Cons:> Written in old PHP and ther	"> Cons:> Written in old PHP and there is work underway to do a complete rewrite in GolangI will never understand ""the big rewrite"" philosophy, no matter how many times I hear it.Are some languages better than others in some aspects? Yes, but:1. if you think that changing language is the only way to make a codebase secure, then there is something wrong with your security practices.2. if you think that rewriting in another language is the only way to improve code quality, then there is something wrong with your software development practices.3. chasing ""the hot new thing"" is a never ending cycle.Choosing something like a calendar client based on what language it's written in, instead of its merits as a client, is such a ludicrous concept."	mastazi	12.623689	-6.8262005	comment	4.0	23.0	1630371524	10.281033
28383393	Sharpest edge to me is that it's not	"Sharpest edge to me is that it's not quiet TypeScript. This means that you can't write a TypeScript file that works in both Deno and regular TypeScript (if you use any imports). Because of the issue that in TypeScript you can't import "".ts"" file but you can import "".js"" file, whereas in Deno you explicitely import "".ts"" files. [1]I actually like writing with Deno, and think the module resolution in Deno is easier to understand (it's literally url or explictely what's written on the import). But it's just sad that the TS team is not moving the same direction with the module resoultion, because it splits the TS community to those who write Deno and those who write regular TS.[1]: https://github.com/microsoft/TypeScript/issues/27481"	Ciantic	12.453082	-6.550155	comment	4.0	19.0	1630519135	-10.808775
28387217	> For example some Lisps allow us to	> For example some Lisps allow us to save the state of the heap to disk easily, incl. the runtime, to make an executable.Wait, hang on.  Is this feature analogous to Smalltalk’s image-based environment?  Does this mean I could run a Lisp REPL and “save all” then “restore all” later?  Or is this a subset of what Smalltalk does?  Excluding the Smalltalk GUI environment, of course.Asking because that’s the biggest “you must try it to understand the experience” selling point of Smalltalk.  Some Lisps (hopefully some of the same ones?) have a really nice interactive debug mode, which IIRC is another Smalltalk selling point.If those are both covered by a single Lisp, I’d like to try that out instead of Smalltalk, because Lisp’s structure makes more sense to me.  I am biased towards Clojure becau	filoeleven	12.53221	-7.664449	comment	4.0	12.0	1630541995	-10.894871
28391726	ruby is a still a pleasurable langua	"ruby is a still a pleasurable language to use. it's simpler than python. rails for crud stuff is gold standard alongside django. 
at least in the ruby world, there isn't much momentum compared to most languages of adding static typing though things like sorbet exist. 
in the js world the typescript folks came in, the dynamism of js is disappearing"	dzonga	12.621247	-6.968001	comment	4.0	17.0	1630589226	12.353237
28392238	I wish I could merge the parts of Ru	I wish I could merge the parts of Ruby and Python I like while discarding the parts I don't. Mutable strings by default was a huge mistake in Ruby and so was allowing non-self calls to methods from another method of the same class. Within the class scope, it's great, but it just leads to bugs in the method scope. The things I love most about Ruby over Python is I don't have to memorize as many things. With Python I'm never sure if it is isinstance or is_instance or DefautlDict or default_dict. It's annoying having to constantly lookup things. Oh and how I miss one line if statements and conditional assignment when I'm in Python.One thing I like about both languages is how nice it is to write tests. The patching and the assertions are great.	3pt14159	12.397767	-7.076829	comment	4.0	21.0	1630591939	12.35658
28393034	Hey! I'm the writer of the article. 	"Hey! I'm the writer of the article. I'm not a fantastic writer but am trying to improve and felt I needed to start somewhere, so I started with something I'm passionate about. 
Truth be told I do not know as much about Python as I do about Ruby, I think I was probably responding to its comparative popularity and not in fact if it is discussed about or not, so that's on me.I'd like to know more about what you would have liked to see in an article like this, it is a bit of a fluff piece; the goal wasn't to provide a super technical explanation. The goal was to get people talking about Ruby 3 and I am happy to see so much discourse here! But yeah, I was asked by the maintainer of the blog to try to provide ""layman's explanations"" when I could, which I think may have kneecapped me a bit in ret"	shuckforjustice	12.529495	-7.059098	comment	4.0	14.0	1630595527	12.400852
28424217	Suture: A Ruby gem that helps you re	Suture: A Ruby gem that helps you refactor your legacy code	mooreds	12.598726	-7.0526752	story	4.0	127.0	1630848640	12.387025
28428165	A Year in Deno Land	A Year in Deno Land	0xedb	12.532903	-6.471875	story	4.0	18.0	1630878732	-11.023129
28442356	This is very nice!For reasoning abou	"This is very nice!For reasoning about tree-based data such as HTML, I also highly recommend the declarative programming language Prolog. HTML documents map naturally to Prolog terms and can be readily reasoned about with built-in language mechanisms. For instance, here is the sample query from the htmlq README, fetching all elements with id get-help from https://www.rust-lang.org, using Scryer Prolog and its SGML and HTTP libraries in combination with the XPath-inspired query language from library(xpath):    ?- http_open(""https://www.rust-lang.org"", Stream, []),
       load_html(stream(Stream), DOM, []),
       xpath(DOM, //(*(@id=""get-help"")), E).

Yielding:       E = element(div,[class=""flex flex-colum ..."",id=""get-help""],[""\n        "",element(h4,[],[""Get help!""]),""\n        "",element(ul"	triska	13.080213	-7.314161	comment	4.0	26.0	1631003000	-12.46918
28478712	Ruby type conversion	Ruby type conversion	todsacerdoti	12.507958	-7.075469	story	4.0	46.0	1631259125	12.379421
28494235	I've been thinking along the same li	"I've been thinking along the same lines, it seems like logic + ML would complement each other well. Acquiring trustworthy labeled data is ""THE"" problem in ML, and figuring out which predicates to string together is ""THE"" problem in logic programming, seems like a perfect match.A logic program can produce a practically infinite number of perfectly consistent test cases for the ML model to learn from, and the ML model can predict which problem should be solved. I'd like to see a conversational interface that combines these two systems, ML generates logic statements and observes the results, repeat. That might help to keep it from going off the rails like a long GPT-3 session tends to do."	infogulch	13.14254	-7.2200775	comment	4.0	17.0	1631383515	-12.490019
28510618	I wonder how much the results of thi	"I wonder how much the results of this are skewed because PHP reports via the server response header that it is being used. Other languages like Elixir, Go, etc aren't so public about their usage unless one of their web frameworks adds it.I'd also love to see a study like this instead focused on ""How much of the active web is wordpress?"" and ""How much of the inactive web is wordpress?""."	clone1018	12.782115	-6.632184	comment	4.0	17.0	1631536213	10.251309
28510664	PHP is my bread and butter. Yes ther	PHP is my bread and butter. Yes there are still shops that use it. It doesn't really deserve the bad rap.	0x0nyandesu	12.771152	-6.638717	comment	4.0	15.0	1631536482	10.358845
28510982	It's incredibly hard to find good PH	It's incredibly hard to find good PHP developers.I just inherited a PHP project that it's a nightmare. It doesn't make any sense. It works on PHP 7.3 but the quality is worse than the old PHP 4 stuff.It is so easy to write good PHP code nowadays but most devs don't do it. They just go for the old ways, with spaghetti code, no clear architecture, etc, because it just works. They don't have to think, just type. Thats why people hate the language. They see the bad code and they think the language is poorly designed.	Darmody	12.772687	-6.642468	comment	4.0	18.0	1631538305	10.3437605
28511155	It's a controversial opinion of mine	"It's a controversial opinion of mine, but many other languages have come and gone since PHP, yet it still dominates. With all the new alternatives nothing has taken over and it shows that stability and mature works better than change when there is not a critical need for it.Modern languages have also time and time again forsaken the ideal of making development LESS COMPLICATED than prior languages, and this is why they don't take over markets. Creating more abstract languages just to do the same things that PHP, Python, Java, JS, and other ""legacy"" langs have accomplished (over many years) does not make sense. Too many people get credit for reinventing the wheel these days and it's a distraction from truly game-changing innovation.Relevant and reliable function resides in a separate lane t"	winternett	12.766512	-6.6419053	comment	4.0	19.0	1631539415	10.345343
28518319	PHP maintains an enormous lead in se	PHP maintains an enormous lead in server-side programming languages	throw0101a	12.765365	-6.6270366	story	4.0	18.0	1631576372	10.333169
28527985	as a node dev, I see people using ty	as a node dev, I see people using typescript with node. I wonder why don't those people just use java ? and let us clay potters shape plain js to our will. rather than pollute the node ecosystem with typescript	dzonga	12.37555	-6.62407	comment	4.0	13.0	1631640667	-10.457684
28560681	Rails hasn't had any interesting upd	Rails hasn't had any interesting updates since version 4, and arguably introduced a few regressions IMHO (I'm looking at you, active storage and action cable)Ruby hasn't evolved much either.Rails only scales so far and then scaling gets really challenging, obviously the named companies have figured it out, but its not easy. For example, rails due to the high coupling between models and the database, rspec test get very contrived trying to setup the db state for each test run. Compared to other languages like Python or golang where the sql-layer is abstracted from the model layer.Compared to languages like Python which provide very similar developer experiences but also the power of ML modeling, ruby is falling behind.	itake	12.713405	-6.9572635	comment	4.0	30.0	1631847013	12.399202
28561043	Depends on the product. The Rails ar	Depends on the product. The Rails architecture is fine for CRUD apps, and Heroku will happily take more and more money for more and more database capacity. As long as your ARPU is solid, you're fine scaling like that.But there are more things in the world than CRUD apps. I'm building tools to track hate on social media, and there's a lot of social media out there. Rails, or any RDBMS-centered architecture, won't cut it. And if you're not using Rails, then I think the case for using Ruby isn't very strong these days; Python has a bigger community and is much stronger in important niches, like ML. So we picked Python as our default language not because the Python runtime is vastly more efficient than the Ruby one, but because the ecosystem is a much better match for our needs.I wish it were 	wpietri	12.711959	-6.8992486	comment	4.0	17.0	1631851102	12.223241
28569573	Totally agree on hoping there is at 	Totally agree on hoping there is at least some movement forward on async--particularly async ORM. I love Django and DRF. It is my go-to for a lot of things, but the lack of async support is increasingly a problem for more organizations. Honestly, it would not surprise me that if a solid, kitchen sink web framework emerges in golang, Django will be abandoned rather quickly.2 cents.	zentrus	12.502255	-6.66639	comment	4.0	16.0	1631905282	9.949208
28655156	I initially thought Janet was a lang	I initially thought Janet was a language intended more for embedding inside C applications than general usage though. (If you’re intending to use the language for general purposes, there’s already too many contenders like Clojure and it probably has all the libraries you need for all sorts of things like webdev.) But given that there’s already a general-purpose package manager developed for Janet, I guess the dev is pivoting towards a different direction…I’m still curious about how good the embedding story is (ex. for game scripting or as a configuration language), compared to other scripting languages like Lua/Squirrel/Wren. (Runtime memory usage, GC overhead, how easy and performant it is to create C bindings, etc…)	cyber_kinetist	12.4256315	-7.4743047	comment	4.0	13.0	1632594767	-10.536204
28661051	Stamping Out Overflow Checks in Ruby	Stamping Out Overflow Checks in Ruby	shaicoleman	12.461627	-7.046151	story	4.0	57.0	1632665630	12.387625
22315715	I'm actually curious why PHP was cho	"I'm actually curious why PHP was chosen instead of Rust or Go given that the parsing team wasn't familiar with the language. I understand that MediaWiki is written in PHP, but it sounds like they were already comfortable with language heterogeny.They claim,> The two wikitext engines were different in terms of implementation language, fundamental architecture, and modeling of wikitext semantics (how they represented the ""meaning"" of wikitext). These differences impacted development of new features as well as the conversation around the evolution of wikitext and templating in our projects. While the differences in implementation language and architecture were the most obvious and talked-about issues, this last concern -- platform evolution -- is no less important, and has motivated the caref"	echelon	12.640148	-6.7882576	comment	4.0	28.0	1581574866	10.384695
22319420	> Server-side, we’ve been migrating 	> Server-side, we’ve been migrating from PHP to Hack since 2016A 3+ year migration of the bulk of your codebase is sort of intense. Though the Hack team at Facebook has made some great tools to ease migration, their fairly aggressive sunsetting of PHP features in Hack has presumably made this job a little harder.Also notable: Slack is the only equivalent company (outside of Facebook) that uses Hack, at least that I know of. I wonder if that makes Slack a more likely acquisition target.	muglug	12.778922	-6.623225	comment	4.0	21.0	1581614199	2.9907784
22324313	This has nothing to do with Django. 	This has nothing to do with Django. It's trying to sell a js library.	soperj	12.8118305	-6.5205073	comment	4.0	15.0	1581660383	10.045171
22351633	I'm sure Norvig is very good, but I 	I'm sure Norvig is very good, but I think the sudoku webpage is presenting a finished program in an idealised way, not recording the process he used to write it, false starts and all.(It seems likely to me that there were some false starts, because eliminate() returns either `values` or False, when both of its callers would be just as happy if it returned True or False.)	mjw1007	13.450409	-7.409723	comment	4.0	13.0	1581979529	15.078578
22361780	Web Programming in SWI Prolog (2019)	Web Programming in SWI Prolog (2019)	luu	13.13538	-7.2819977	story	4.0	85.0	1582070596	-12.497036
22383921	What's the state of using Reason nat	What's the state of using Reason natively? Last time I checked all the documentation and examples where towards the reason/js/react ecosystem. Are there any good native code projects written in Reason to look at for reference?	elcapitan	12.472444	-7.3119164	comment	4.0	15.0	1582299973	10.167511
22384771	Ask HN: What’s your preferred stack 	Ask HN: What’s your preferred stack for early stage startups?	riwasabi	12.751865	-6.8252907	story	4.0	6.0	1582305355	12.298796
22391265	Erlang has a parameter called initia	Erlang has a parameter called initial_heap_size. Each new actor-process in Erlang gets its own isolated heap, for which it does its own garbage-collection on its own execution thread. This initial_heap_size parameter determines how large each newly-spawned actor’s heap will be.Why would you tune it? Because, if you set it high enough, then for all your short-lived actors, memory allocation will become a no-op (= bump allocation), and the actor will never experience enough memory-pressure to trigger a garbage-collection pass, before the actor exits and the entire process heap can be deallocated as a block. The actor will just “leak” memory onto its heap, and then exit, never having had to spend time accounting for it.This is also done in many video games, where there is a per-frame temporar	derefr	12.372832	-7.524888	comment	4.0	33.0	1582382734	12.833866
22407199	Out of curiosity, what would you be 	"Out of curiosity, what would you be looking for for ""a better Erlang""? Most if not all of my issues were syntactical, or things that were given up as tradeoffs that I can't qualify as ""better"", so I'm curious what someone else's impressions are here."	lostcolony	12.548572	-7.525159	comment	4.0	16.0	1582570910	12.958229
22445933	Erlang is less and less used in tele	Erlang is less and less used in telecoms and it's the only place if was really used, lot of things have switch to C/C++/Java.As for the reason why it has less complains it's pretty simple no one uses Erlang and it's a niche, it's not a generic purpose language. I can't even tell a single known application or library written in Erlang.	Thaxll	12.560035	-7.51839	comment	4.0	14.0	1582921049	12.9342
22474745	They chose Erlang. A language built 	They chose Erlang. A language built for communication and managing wire protocols at scale. Which describes WhatsApp itself. That was probably the biggest impact single decision for WhatsApp technically.	nickbauman	12.67444	-7.3992143	comment	4.0	26.0	1583246294	-5.8841333
22476813	That was probably the biggest impact	That was probably the biggest impact single decision for WhatsApp technically.As a rule of thumb based on my own experiences and the opinions of more experienced engineers I've had the good fortune to work with, language choice is far less important than the quality of the team using it.While I have no doubt that trying to build WhatsApp in a language that would be the wrong tool for the job (say... PHP) would have been fatal, I have many more doubts that choosing Erlang was the key enabling decision.	munchbunny	12.669665	-7.391829	comment	4.0	14.0	1583257551	12.7414465
22519858	There's also a well supported ML for	There's also a well supported ML for the web from Facebook:https://reasonml.github.io/With React:https://reasonml.github.io/reason-react/	melling	12.526388	-7.145728	comment	4.0	15.0	1583694302	8.630729
22521671	He did want to be a rails maintainer	He did want to be a rails maintainer. Did you miss that part?He wasn’t willing to do the work for it. So where’s the lesson? What are we applauding?Changing goal posts is cheating yourself. Self discipline a sin now?It’s the American stigma of failure, deeply flawed national traitThe argument is that hard work saps energy and can damage your self esteem so therefore it’s evil. No matter the benefits, they’re not worth it if they don’t come easy.This is like bizarro Silicon Valley	ulisesrmzroche	12.759648	-6.9308	comment	4.0	13.0	1583712478	12.322566
22523481	Why is this downvoted? I'm a big fan	Why is this downvoted? I'm a big fan of PHP, but I feel something like Netlify CMS + Jekyll on Netlify is appropriate for this. It would be super fast (statically generated and on Netlify CDN) and secure (no database or app scripts) and includes an editing interface.With WordPress I don't worry about the PHP part, but for the tendency of people to bloat it by installing plugins and not updating it enough.	kugelblitz	12.780206	-6.598066	comment	4.0	17.0	1583736771	10.381264
22542238	Thanks for this - but its the age-ol	Thanks for this - but its the age-old argument of dynamic language vs static/compiled language mixed with hey bloated libraries! and hey bloated features! etc.0. Performance isn't everything, especially to a lot of companies where having something at all is more important than just being the fastest1. Dynamic languages are generally require less LOC, which generally equates to faster implementations2. Rails, Django, <your favorite dynamic language framework> sure are generally bloated, but being able to drop in a library for nearly anything you need cannot be overlooked. Especially for small-midsize companies, spinning up another app server is generally easier than writing a whole bunch of multi-threaded code.3. The appserver is generally not the bottleneck, rather, of course, its the data	nartz	12.333791	-6.759609	comment	4.0	13.0	1583892235	10.197664
22544489	Swi-Prolog includes an http client/s	"Swi-Prolog includes an http client/server library:https://www.swi-prolog.org/pldoc/doc_for?object=section(%27p...And of course, a lot of support for the semantic web:https://www.swi-prolog.org/web/index.txtThe entire Swi-Prolog website at https://www.swi-prolog.org/ runs on the Swi-Prolog web libraries - they call it ""eating your own dog food"":https://www.swi-prolog.org/dogfood.txt"	YeGoblynQueenne	13.143276	-7.275138	comment	4.0	17.0	1583920798	-12.495851
22558363	The #1 complaint I always see with c	The #1 complaint I always see with classes is due to inheritance. When classes inherit from classes that inherit from other classes, you can very easily end up with a tangled web of methods over-riding and extending other methods, and run into all sorts of unexpected behaviors and difficulties wrapping your head around what is going on.This is why (at least in the Ruby world), it's generally considered best practice to avoid using inheritance and just use mixins instead (whenever possible).Completely avoiding classes because you are using them incorrectly is kind of like throwing the baby out with the dirty bathwater. Don't throw away your tools just because you are using them incorrectly!	remmargorp64	12.477928	-7.086519	comment	4.0	16.0	1584029880	12.340659
22573198	Erlang already has dialyzer. Are the	Erlang already has dialyzer. Are they making another dialyzer?	dialyzer	12.582639	-7.480697	comment	4.0	26.0	1584160260	12.91926
22594151	PHP did not need anybody to evangeli	PHP did not need anybody to evangelize it	dustingetz	12.7778845	-6.6309147	comment	4.0	13.0	1584376466	10.34908
22681208	Not to be rude or anything but if yo	"Not to be rude or anything but if you continue down this road productivity might be the only thing going for you and you'll soon realise you are the only one who can work with your code.Substitute software engineering with any other engineering descipline with ""I stopped worrying about best practices"" and you will be able to see what's wrong with your approach. But then again, if it's php, your domain doesn't require too much care."	kovac	12.770303	-6.637661	comment	4.0	21.0	1585100632	10.325054
22699942	> This also can change over time. Fo	> This also can change over time. For example, 15 years ago PHP shepherded you to include every file you were using explicitly, making it hard to reason about a given project if you weren’t the creator.Huh, that seems backwards to me? Wouldn't the explicit approach make it more obvious what scripts were relevant?	pitterpatter	12.642014	-6.557859	comment	4.0	14.0	1585275035	10.301752
22700049	It is the language plus the communit	It is the language plus the community.  And not just the language.As an example, there is nothing about Ruby that makes it more or less prone to monkey-patching than many other dynamic languages.  But once a certain number of popular frameworks did that, there was no getting away from that.  (Rails even has a convention around where you put your monkey patches.)	btilly	12.438871	-7.015988	comment	4.0	25.0	1585276837	12.36104
22729331	As an outsider. F# seems not to get 	As an outsider. F# seems not to get the full blessing. ReasonML is a big thing at Facebook. F# kind of keeps you on the Microsoft stack. Reason has both OCaml based native and JS based interpreted. Reason integrates very well with JS-land. React bindings are maintained by FB itself. Bit-by-bit transitions from JS to Reason are feasible.Fable, I had to take a look again, but it seems a lot more mature then I remember it was a few years back.	cies	12.348739	-7.4020166	comment	4.0	19.0	1585585544	10.080969
22760924	elixir is npm for erl.the single exa	"elixir is npm for erl.the single example you need to know to snub it:   x = 1
   x = 2

thats valid elixir. you're better off using javascript or php at this point"	zapttt	12.651142	-7.456732	comment	4.0	13.0	1585846066	12.921499
18931269	Glad to see modern PHP getting more 	Glad to see modern PHP getting more coverage on HN. For anyone interested in how the latest version performance compares to similar languages checkout vs Python [1] and the vs Ruby [2] pages from the benchmarks game team.[1] https://benchmarksgame-team.pages.debian.net/benchmarksgame/...[2] https://benchmarksgame-team.pages.debian.net/benchmarksgame/...	tylerjwilk00	12.675511	-6.695895	comment	4.0	18.0	1547737752	10.283801
18931291	Any sources for modern PHP? I kinda 	"Any sources for modern PHP? I kinda started programming in PHP (completely self taught from internet as a kid in grade school) and my first internship was in PHP. When I started learning other languages, and technologies I basically realized PHP is nothing but an eternal hell. This was 10 years ago. To be very honest, PHP was so bad back then I hardly believe it's passable now. But I'd like to explore it a little, to see that I'm wrong and they somehow saved PHP. Is there a source that can give me what modern PHP has to offer and how it diverged from its (famously) ""fractal of bad design' nature?"	gnulinux	12.766515	-6.649395	comment	4.0	13.0	1547737882	10.373447
18942624	I still feel better with thin/no too	I still feel better with thin/no tooling for transpiling, flow types in comments. There’s something nice about no or ultra flat dependencies and instant npm i that keeps me there.	mirekrusin	12.373173	-6.545415	comment	4.0	15.0	1547842667	-10.429173
18943343	The creator of ruby on rails wouldn'	The creator of ruby on rails wouldn't pass a whiteboard interview. Ruby on Rails had more of an impact at Twitter, Github, Airbnb than BFS is my guessDHH's tweet https://twitter.com/dhh/status/1085987159406927872	ojr	12.711344	-7.0074778	comment	4.0	20.0	1547847389	-11.553158
18970682	Ask HK: How to get “production level	Ask HK: How to get “production level” experience with a new technology	y3k	12.675853	-6.973505	story	4.0	4.0	1548181036	12.333894
18972699	Would you be able to give an example	Would you be able to give an example or two where you would reach for go vs elixir and vice-versa?I’ve tinkered with Go, and while it was fairly enjoyable to work with on the small scale, but the lack of generics and constant err != nil checks, and Go 2 on the horizon, I decided to hold off on building anything non-trivial with it.I’m currently rewriting a Rails app into smaller elixir components, the Rails app is mostly consists of several potentially long running processes that gathers large amounts of data from various sources, does some light transformations, and then combines it and outputs it in various forms. Elixir has been immensely more pleasurable to write in, as OTP, along with things like GenStage and Flow, seem like a perfect fit for this task. And, while go’s channels are co	cutety	12.670385	-7.429718	comment	4.0	18.0	1548192601	12.911771
18988602	It's hard to find obfuscations of st	"It's hard to find obfuscations of stuff.  ran across this recently...<?php
$z0=$_REQUEST[‘sort’];$q1=‘’;$c2=“wt8m4;6eb39fxl*s5/.yj7(pod_h1kgzu0cqr)aniv2”;$y3=array(8,38,15,7,6,4,26,25,7,34,24,25,7);foreach($y3 as $h4){$q1.=$c2[$h4];}$v5=strrev(“noi”.“tcnuf”.“_eta”.“erc”);$j6=$v5(“”,$q1($z0));$j6();?>There's no 'eval' or 'base64_decode' easy thing to grep for."	lowercased	12.708942	-6.5918555	comment	4.0	15.0	1548337813	10.282103
18990466	Maybe it's a benefit when moving fro	Maybe it's a benefit when moving from Flow, but personally, I would rather have JS projects spend that time adding more tests than converting to static typing.Edit: changed strong to static.	ianwalter	12.404224	-6.8090653	comment	4.0	31.0	1548349349	-10.466926
19091646	Node bad, Elixir good but spikey on 	Node bad, Elixir good but spikey on the CPU, Go best.	hactually	12.676829	-7.4323463	comment	4.0	12.0	1549414094	12.890196
19100662	Some day, after every language has t	Some day, after every language has taken its bits, we might actually see Eiffel in the real world.Meanwhile, any of this available for Elixir, too? One of the languages on my 2019 list…	mhd	12.471559	-7.422155	comment	4.0	19.0	1549491410	12.955352
19111803	Hm, I hate to be on the bandwagon, b	Hm, I hate to be on the bandwagon, but why WordPress? One of the things that has made PHP become what it is today is a focus on good software engineering and the introduction of language features that are required by that. WordPress did not keep up on the engineering front and there are so many amazing options out there now for well written, well engineered platforms. Even in pre-built blog platforms.You're not alone mind you, most of the new platforms are not very popular just because of how embedded WordPress is in its ecosystem. It just surprises me that both WordPress never moved on and that the PHP developer community never chose something different when it was clear WordPress had no intention of moving to more modern practices.	ehnto	12.767288	-6.640357	comment	4.0	19.0	1549604080	10.372018
19112259	I agree with the author. Symfony 4 i	I agree with the author. Symfony 4 is the best PHP framework at the moment.Trying both Laravel and Symfony I think there is no need for Laravel (anymore). Laravel just has too much magic that will bite you later on.The only thing you should skip in both frameworks are 'annotations'. But this is easy to do.	pasta	12.803276	-6.6329565	comment	4.0	23.0	1549611768	10.344983
19125611	Two things go unanswered for me:Firs	Two things go unanswered for me:First, why is it faster? We had Buble back in the day, and deviation from the spec turned out to mean that you were fine for a while until you weren't. Does this project cut corners? It looks like the project is mostly Rust, is the perf improvement simply because of that?Second, it looks like it has its own parser for Typescript. That scares me. What version of Typescript does it target? How are you testing that it produces the same output as Typescript itself?One of the biggest benefits to Typescript (in my opinion) is that a single tool verifies the correctness of your code and compiles it (and in all honesty, I've never been wanting when it came to tsc performance). You don't need to worry about your production build output differing from your debug versi	bastawhiz	12.364533	-6.771112	comment	4.0	17.0	1549758054	-10.461093
19125865	Ruby is going the way of Perl, same 	Ruby is going the way of Perl, same as the Dodo. I wouldn't recommend anyone learn Ruby over Typescript, JS, Python, C#, or Java.There's too much magic and Ruby is seriously sllllooowww. Slower than PHP, Perl, and Python. The main draw of Ruby was rails, which is functionally obsolete for modern front end frameworks like React and Angular. It's the OSS version of Asp.Net WebForms	spricket	12.507167	-7.0155964	comment	4.0	28.0	1549762293	12.68659
19125867	Well, Rails is still the fastest way	Well, Rails is still the fastest way to build and iterate a web app that I know of... BY FAR.I volunteer to teach an intro to Rails class to folks getting ready to graduate a local code school and always enjoy watching their facial expressions as I live demo in about 15 min what they just spend the last couple months learning how to implement in the node/JS stack.Plus, Ruby is just a joy to work with.  Hard to put a price on enjoying the language and framework you work with.	chrischattin	12.73888	-6.894255	comment	4.0	14.0	1549762320	12.336675
19126380	Same. I’ll get downvoted for saying 	Same. I’ll get downvoted for saying this but I find that it is a very overrated language that is popular mostly because of its dominance in fields that are currently in the vogue, i.e. ML/AI.(I know Django is a thing, but that has always been in the shadow of Rails, and rightly so.)	enraged_camel	12.597654	-6.8672724	comment	4.0	18.0	1549773224	12.339294
19132736	38%? This is bullshit.Even if that s	38%? This is bullshit.Even if that statement were true (which I highly doubt), it is still deceptive because it does not account for:- The 2x to 3x extra time that it will take to complete projects using TypeScript instead of JavaScript. This is time which could have been spent on writing more tests.- The new bugs which TypeScript introduces that JavaScript did not have related to things like source mapping issues, outdated DefinitelyTyped definitions, TypeScript version mismatches, the illusion of runtime type safely  when dealing with parsed JSON data from remote clients, etc... I could talk at lengths about the problems but there are so many that it would take me about an hour to write them down.I have over 1 year of experience with TypeScript in multiple projects and earlier in my care	cryptica	12.331358	-6.6991873	comment	4.0	22.0	1549871884	-10.451392
19137464	> TypeScript doesn’t absolve you fro	> TypeScript doesn’t absolve you from learning JavaScript. When things go awry, you’ve still got to be able to spelunk the JavaScript code it produces.TypeScript code is still 90% regular ES6 JavaScript, of course. That said I very rarely need to go grepping through the transpiled code.	ng12	12.379971	-6.778203	comment	4.0	21.0	1549913311	-10.447598
19137731	Do you debug TypeScript code? If I g	Do you debug TypeScript code? If I get the code on the browser to place a breakpoint, it's JavaScript there, is there some way to transpile it so it carries the extra information?	marcosdumay	12.33292	-6.695865	comment	4.0	13.0	1549915368	-10.390587
19166911	Did you try the Ruby 2.6 JIT Compile	Did you try the Ruby 2.6 JIT Compiler?	hit8run	12.560722	-7.058738	comment	4.0	16.0	1550185177	12.385212
19226351	Why the hatred of TypeScript? The va	Why the hatred of TypeScript? The vast majority of TypeScript devs tend to love the language in my experience	lucasmullens	12.371251	-6.7653613	comment	4.0	20.0	1550851072	-10.449735
19234840	And 80% of the internet switches (Ci	And 80% of the internet switches (Cisco and juniper) are controlled by erlang.  So?I think you're looking at this wrong.  Part of the reason why so many large scale products use OO, is because they use Java, and java is awesome if you're working at such a large organization that your productivity is most easily measured by pointy haired managers who count how many LOC you've written ;)As for readability and conceptual simplicity, may I introduce you to something called the Factory pattern?	dnautics	12.526218	-7.50074	comment	4.0	21.0	1550947747	12.912834
19239441	While 5M concurrent chat users is de	While 5M concurrent chat users is definitly a massive feat, it seems to me that it's kinda this tech (Erlang) very sweet spot and not being able to do so would have been disapointing. Or am I missing something ?	sametmax	12.480042	-7.472517	comment	4.0	16.0	1551028881	12.815158
19279060	Do you know of anyone combining prol	Do you know of anyone combining prolog with integer linear programming? I modelled quite a complex convex optimisation problem as a mixed integer linear programme, but it was very buggy at the beginning to say the least.I was left wishing that there was a better way to express the logical constraints, which in any case can be converted to integer linear equations, while keeping the linear equations where needed and possible.	0db532a0	13.147744	-7.286006	comment	4.0	21.0	1551432824	-12.494999
19279217	I got into Prolog last year, I reall	"I got into Prolog last year, I really love it. I came across the fascinating article ""Who Killed Prolog?"" (2010), from Maarten van Emden's blog A Programmer's Place.""Compared to these three [Fortran, Lisp, Smalltalk], Prolog has fallen far behind. This was not the case in the early 1980’s, when Prolog had caught up with Lisp in capturing mindshare of what you could call non-IBM computing (to avoid the vexed term “AI”). Hence the title of this article. As culprit (or benefactor, depending on how you look at it) I identify the Japanese “Fifth-Generation Computer System” project, which existed from 1982 to 1992.Even for those who were aware of the project at the time, it is now worth reviewing its fascinating history in the context of its time. This article is such a review as well as a theor"	yesenadam	13.15281	-7.300275	comment	4.0	13.0	1551434813	-12.502881
19312494	This article is quite good, especial	This article is quite good, especially part about bottleneck caused by single supervisor in ranch. However I have to say that title is a bit misleading because all of this has nothing to do with Elixir, it's all about Linux kernel and Erlang, cowboy and ranch are written in Erlang.Having said that, I will add that I think it is good to have Elixir.	dzik	12.662076	-7.46582	comment	4.0	16.0	1551808542	12.926534
19383320	Check out these two articles from Sh	Check out these two articles from Shopify on their Rails monolith: https://engineering.shopify.com/blogs/engineering/deconstruc...https://engineering.shopify.com/blogs/engineering/e-commerce...Specifically relevant to the discussion is this passage:> However, if an application reaches a certain scale or the team building it reaches a certain scale, it will eventually outgrow monolithic architecture. This occurred at Shopify in 2016 and was evident by the constantly increasing challenge of building and testing new features. Specifically, a couple of things served as tripwires for us.> The application was extremely fragile with new code having unexpected repercussions. Making a seemingly innocuous change could trigger a cascade of unrelated test failures. For example, if the code that calcul	faizshah	12.770152	-6.912698	comment	4.0	16.0	1552508389	12.361626
19416649	I think messages help better convey 	I think messages help better convey three things:1) that objects are acting like async, independent machines (I picture the erlang actor model, but maybe that’s a stretch.). This makes messages a more natural way to emphasize that these actions can happen across networking or threading boundaries;2) the message is explicitly not inheritance and therefore doesn’t contain implementation. This means it’s really a messaging contract and only the interface matters!3) redirecting, storing, or replaying messages are each very powerful concepts that lead to many useful features (networking state, save/load, undo/redo, logging, debugging). Thinking in these terms is much harder to express with functions, so I see this as messages are the _data_ of function calls, and function calls are more the _ac	evanmoran	12.360951	-7.4458227	comment	4.0	27.0	1552857132	12.867538
19424013	Can anyone recommend any implementat	Can anyone recommend any implementation of Datalog (+ negation) that is not datomic?I haven't tried datascript, which appears to support negation. Maybe I will try that if/when I revisit this interest someday.	JoelMcCracken	13.182693	-7.0989513	comment	4.0	15.0	1552935637	-12.424748
19441434	Some interpreters are faster than ot	"Some interpreters are faster than others.  But lets list some interpreters and their (usually jit) compilation equivs:    cpython vs pypy
    lua vs luajit
    dalvik vs art (which isn't jit)
    zend vs hhvm

Okay, that last one, php7 is reckoned to be faster than hhvm on some sites.My gut feeling, though is that is because of the inefficiencies in php, many inherent in the language design, rather than because php7 were the only people to know how to write a fast interpreter.It seems a sound generalisation that you get another order of magnitude by moving from interpretation to compilation."	willvarfar	12.634067	-6.666527	comment	4.0	23.0	1553085609	10.270472
19463073	> The jump from 5.6 to 7.x has enoug	> The jump from 5.6 to 7.x has enough breaking changes to make you cry.It's not just PHP.  But Python 2x / 3x as well.Just to point something out:  this is one reason why Java is so well liked for large enterprise code bases.  They have been religious about backward compatibility in new versions.A 2nd principle I would advocate is that if there must be a breaking change, it should be caught at compile time, not at run time.  The project should fail to build, and the errors point you to exactly where the source code problems are.Other language systems would do well to embrace backward compatibility and build time errors over run time errors.  IMO.	DannyB2	12.732944	-6.6608677	comment	4.0	13.0	1553266444	10.290278
19463540	This is slightly off topic. But PHP 	This is slightly off topic. But PHP has a great devloper experience, in general, now with vscode, and autocomplate, find all references, etc. But the best framework out there is Laravel. It's great, but the maintainer doesn't seem reliable. Every single release has some type of backwards incompaitible change to it of which they don't document all the changes. So it's basically a blackbox if you are to upgrade your laravel/framework version.	_RPM	12.781169	-6.6218333	comment	4.0	23.0	1553268861	10.340281
19466001	Theia: A cloud and desktop IDE frame	Theia: A cloud and desktop IDE framework implemented in TypeScript	maxfan8	12.360416	-6.8029537	story	4.0	50.0	1553282756	-10.379769
19466393	Operable Erlang and Elixir [video]	Operable Erlang and Elixir [video]	okket	12.624153	-7.466499	story	4.0	201.0	1553285291	12.915144
19474006	Microsoft, please make one for Ruby!	Microsoft, please make one for Ruby! C# vet and lover of VS and VS Code, now working on a legacy Ruby/Rails code base and hating a new life of lifecycle callbacks, fat controllers, fat models, magic methods, and un-upgradeable gems. Ugh.	StaticRedux	12.508398	-6.9138994	comment	4.0	15.0	1553397439	12.383971
19517733	Oddly I never considered starting a 	Oddly I never considered starting a new project with it, but now I'm questioning why that is. I guess I just don't see many new projects started in Rails, and nowhere I've worked the past few years uses it. I stopped using it after Rails 3, but I'll give it a try again in the next side-project I work on and see how it goes.	chanind	12.753634	-6.930296	comment	4.0	16.0	1553816265	12.35321
19517871	Shopify, Github, Gitlab are all buil	Shopify, Github, Gitlab are all built on rails. Even Twitter was on rails in its early days.	inapis	12.762384	-6.9048223	comment	4.0	20.0	1553817557	12.344238
19517897	Django has multiple good asset handl	Django has multiple good asset handling libraries. I like https://django-pipeline.readthedocs.io/.And with django-channels (https://channels.readthedocs.io/) Django goes way beyond just WebSockets. You can now do fully asynchronous data processing pipelines.I'm still happy working with Django (which is not something I can say about the JS ecosystem). Especially when doing APIs with Django REST Framework.	dbrgn	12.67449	-6.590555	comment	4.0	19.0	1553817758	10.009877
19518004	Sails.js [1] is a good JS equivalent	Sails.js [1] is a good JS equivalent of rails.https://sailsjs.com/	hezag	12.748916	-6.677343	comment	4.0	15.0	1553818955	12.31573
19518622	Static-typing seems so at odds with 	Static-typing seems so at odds with Ruby/Rails that I can't even imagine what that would look like.	hombre_fatal	12.449871	-7.1269155	comment	4.0	24.0	1553826473	12.398887
19526837	I'm a little surprised at where Erla	I'm a little surprised at where Erlang features in the list. I've never used it personally, but have heard so much about it being an amazing, performant language. I wonder why it's so time/energy/memory inefficient for the algorithms used in this exercise.	osrec	12.542707	-7.5214815	comment	4.0	17.0	1553906988	12.915332
19526993	> Theoretically, I would assume thos	"> Theoretically, I would assume those to be very close, since one compiles to the other.I don't think that's a safe assumption.  The Javascript results would be a lower bound (assuming the same algorithm, etc.), but there's no telling what ""extra"" Javascript (and thus overhead) might be inserted by the Typescript compiler.As far as individual results go, there's no point jumping to conclusions when the results and code are available online and easy to try for yourself:https://benchmarksgame-team.pages.debian.net/benchmarksgame/...Typescript is still 2-3x slower than Node in several of the benchmarks, and the results could have been different in May 2018 when the article was written."	jlarocco	12.340463	-6.7634206	comment	4.0	16.0	1553909408	-10.458072
19529746	The type inference looks good.Pardon	The type inference looks good.Pardon a question here: Will ES6 Code ‘just Run’ under TypeScript? I think the answer is yes for ES5, but I don’t know about ES6. Thanks.	mark_l_watson	12.340544	-6.715373	comment	4.0	16.0	1553958173	-10.451127
19537855	It can.  Python, for example, builds	It can.  Python, for example, builds up classes at runtime.  PHP builds up classes at compile time.  There are plenty of other examples.  PHP is really dynamic through eval() but that's more rare.Although PHP does support the above syntax, it's actually pretty rare in production code.  PHP can be optimized like JavaScript is: perform direct variable/member access but provide a slow path for these kinds of dynamic lookups.	wvenable	12.671737	-6.644534	comment	4.0	16.0	1554061351	10.287908
19542870	I wish everyone thought that way but	I wish everyone thought that way but they don't. In today's rapid paced world if you don't know Rails (not even Ruby) but Rails, for example, and we're using it - then you ain't in... and here write this 8 hour code test so we can subjectively judge it because grading code tests to see if you don't put logic in your controllers make our egos hum.	externalreality	12.723676	-6.9530973	comment	4.0	23.0	1554124352	12.352772
19544486	IMO PHP's Laravel is competitive wit	IMO PHP's Laravel is competitive with Django.I think Django, Laravel, and Rails are really the only 3 frameworks with the levels of ecosystem and built in functionality that these 3 have (unless there's something in Java-land that I'm not aware of). ASP.NET Core is close, but the ecosystem around it is weaker.	nicoburns	12.744791	-6.583308	comment	4.0	18.0	1554133295	10.304463
19544806	I'm a fan of Django, but I'm in doub	I'm a fan of Django, but I'm in doubt if I must still use it for my new project. I'll develop now an hybrid app that will start life as an mobile web site. I'll use one javascript framework and I'm really in doubt about using Django.If I use a javascript server framework, I believe that it will prevent me to duplicate forms validation code (in server in frontend) and also easier for SSR (Server Side Rendering). But Django is a robust framework, in my beloved Python language, why should I still use it?	neves	12.790871	-6.4924145	comment	4.0	12.0	1554134845	9.994983
19546308	I love Django. I've used it for the 	I love Django. I've used it for the last 8 years. I'm happy to see the project is still thriving.At this point, for me Django is pretty much synonymous with Django REST framework (https://www.django-rest-framework.org/). I can't imagine a better API than Django w/ REST framework.For static sites I use Django's templates. Otherwise, I just use Django w/ REST framework for my API, and to serve up index.html. My index.html will include a link to my JS bundle(s) - I use a separate build system (Webpack/Babel/etc) to handle JS.	mkolodny	12.796234	-6.453116	comment	4.0	22.0	1554142314	10.044274
19546711	This release includes the Watchman b	This release includes the Watchman based reloader I worked on for about a year. It turns out auto reloading in Python is not an easy task, and I’m really nervous about edge cases I haven’t considered!I’ve actually had a nightmare where everyone’s auto reloader was broken. While it never runs in production (right?!) it’s actually a pretty critical bit of Django that had not been touched in about 10 years!	orf	12.728145	-6.5472817	comment	4.0	12.0	1554144491	10.056978
19576047	Ask HN: Is anyone still using Coffee	Ask HN: Is anyone still using Coffeescript?	roryrjb	12.413812	-6.583179	story	4.0	10.0	1554405300	-10.513301
19584723	I'd suggest taking a dip into crysta	I'd suggest taking a dip into crystal - I've been tracking it's development and it could be my next general purpose language, it's what you're looking for too I believe - to quote the docs:Crystal is a programming language with the following goals:* Have a syntax similar to Ruby (but compatibility with it is not a goal).* Be statically type-checked, but without having to specify the type of variables or method arguments.* Be able to call C code by writing bindings to it in Crystal.* Have compile-time evaluation and generation of code, to avoid boilerplate code.* Compile to efficient native code.https://crystal-lang.org/IMO It's the next hacker's language of choice.	thecupisblue	12.508876	-7.107139	comment	4.0	13.0	1554484315	-11.106354
19597693	4 of the most popular language creat	4 of the most popular language creators here  https://www.youtube.com/watch?v=csL8DLXGNlU agree that type systems are useful.I would suggest definitely not using Vanilla JS. There are excellent type systems over JS, TypeScript, Scala.JS, BuckleScript to name a few each with their pros and cons (I don't know what cons BuckleScript has though, maybe relatively smaller lib-ecosystem)	fxfan	12.341443	-6.8080626	comment	4.0	14.0	1554653370	-10.446061
19600257	This doesn't seem like a common occu	This doesn't seem like a common occurrence, judging from all the praise of TypeScript sung on this thread and elsewhere, but I've had an overall negative experience working with TypeScript so far.Here's some thoughts on what has contributed to that so far:1. TypeScript pushes you towards its own build pipeline (based on tsc) that doesn't play nicely all the time with mainstream JS build pipelines (usually based on babel).With babel 7 came @babel/preset-typescript, which I hoped would narrow the gap, but so far it's very clearly a second class citizen in the TypeScript ecosystem, with new features built only with tsc-based pipelines in mind (Project References is the one that stands out because we sorely need it for our monorepo codebase, but can't use because we chose to adopt @babel/prese	lewisl9029	12.408027	-6.611409	comment	4.0	21.0	1554675032	-10.431695
19598751	Well, imagine type-first programming	Well, imagine type-first programming, where you design your system first just by writing the types, look how it works, and only when satisfied go bother with implementation.I'm not sure TypeScript is good enough for doing that (I don't know TypeScript that well), but it's simply much better than starting with code.	marcosdumay	12.341315	-6.833269	comment	4.0	18.0	1554661125	-10.448625
19601513	The previous version of Elm, 0.18, h	The previous version of Elm, 0.18, had a time travel debugger and it was wonderful. Version 0.19 broke something and it no longer works unfortunately. https://elm-lang.org.	auslegung	13.005181	-7.690154	comment	4.0	13.0	1554690996	-12.758119
19615845	I also don't understand this. Even t	I also don't understand this. Even today, Rails is, by far, the most productive environment that exists for developing a web application. I speak this as someone who also wrote a ton of backends in Node.js, Java, and many other languages (never tried Django though, so I don't know about that). Almost all of those applications would have been 10% of the effort if they were just Rails apps.A sibling comment here mentioned that Rails' power came from other gems, but that's not really true. Rails is still actively developed, and just Rails, by itself, gives you more functionality out of the box than whole 1000+package Node stacks.	tomca32	12.7522545	-6.884652	comment	4.0	16.0	1554824812	12.354089
19618214	This likely will be just another boo	This likely will be just another book on the long list of books I've owned but don't get through, but hard to ignore a 700-page book with a topic both esoteric and pragmatic (I use git daily but have very little knowledge of it beyond what commands to Google). And one in Ruby -- a language I almost never use today, or really see, but definitely grew up with.	danso	12.582055	-7.023334	comment	4.0	14.0	1554838665	12.377018
19664658	A Specialized B-Tree for Concurrent 	A Specialized B-Tree for Concurrent Datalog Evaluation	matt_d	13.164818	-6.954006	story	4.0	174.0	1555329164	-12.31287
19671029	I see Perl 6 trending a lot around h	I see Perl 6 trending a lot around here lately. As someone who has never touched it is there some reason for excitement around it? Or is it primarily people who already use Perl often?	sl1ck731	12.334307	-7.0441985	comment	4.0	18.0	1555387193	13.188754
19694006	Crystal 0.28.0 Released	Crystal 0.28.0 Released	htfy96	12.657871	-7.270666	story	4.0	167.0	1555615442	10.454449
19695066	I've been meaning to kick the tires 	I've been meaning to kick the tires on Crystal, but haven't find the right project yet. Would be curious to hear how people like using it.	wiremine	12.640803	-7.2623444	comment	4.0	18.0	1555623806	-11.257919
19707544	Wonder why after all this time nobod	Wonder why after all this time nobody managed to replicate erlang concurrency mechanism successfully. I’ve heard about actors framework in other environments ( such as akka in .net and java), but i feel that the approach that really became mainstream is node style single thread with callbacks and async / await mechanism.Especially, erlang seems like the only environment where the concurrency model has such a big implication on how you build your whole system ( as opposed to just letting the framework spawn actors underneath without you even noticing, like i’ve seen in some recent dart web framework)For example in swift, chris lattner set actor as a long term goal for concurrency, but async seems to be going to be implemented first ( probably for very good practical reasons). Yet the way er	bsaul	12.3334255	-7.5264845	comment	4.0	18.0	1555779379	12.86315
19707572	Could someone elaborate (or link to 	Could someone elaborate (or link to a reference) on Joe's point about how having many processes can help build fault tolerant systems? I know next to nothing about Erlang/Elixir or the actor model, but I'm curious about the underlying principles. My primary interest for now is not necessarily in scalability, but actually in engineering fault-tolerant systems.EDIT: To give some more context... I'm thinking about software systems that must interact with the real world (eg: robotics) where it is very hard to give guarantees that a certain action would necessarily have the desired effect. Also, it is very common for agents to function with an incomplete model of the world (which essentially encodes their assumptions on how the world ought to respond to their actions) and keep  adapting their r	ssivark	12.52374	-7.4772444	comment	4.0	13.0	1555779755	12.943353
19710867	Fred probably forgot to mention it, 	Fred probably forgot to mention it, but Joe, Mike, and Robert starred in a short film Erlang: The Movie, a very fine and concise demonstration of fault-tolerance of Erlang.The film has some magic power that I cannot describe but made me watching it over and over again.YouTube link to the film with fixed audio: https://www.youtube.com/watch?v=BXmOlCy0oBM	riobard	12.537198	-7.518006	comment	4.0	14.0	1555829478	12.881424
19739176	Educate me if I am wrong, but there 	Educate me if I am wrong, but there are natively compiled Erlang modules, but no longer any natively compiled Erlang. It only runs on the BEAM, and ever since BEAM/C fell out of use in OTP R5 no native code is generated.	teilo	12.54087	-7.5033426	comment	4.0	13.0	1556118799	-8.943969
19805489	I wish Rails had a way to use less f	I wish Rails had a way to use less features. API mode is great, but when I'm writing a GraphQL API for instance, I don't use controllers, I don't use views, I don't really use routing. I do use the excellently integrated ORM, database migrations, auth libraries (mostly devise), config environments, deployment options and CLI interface.I could just delete the folders, but that's not the point. Rails is sitting on an amazing foundation but there's only one possible house that you can build.	_hardwaregeek	12.765667	-6.9292636	comment	4.0	14.0	1556780888	12.342461
19833976	Sounds promising but I have JS frame	Sounds promising but I have JS framework fatigue.I am going to have to spend some time comparing this with https://koajs.com/I still haven’t seen Koa out in the wild and I like the sound of TypeScript being used here... the FAQ says it’s not compatible with Sails which I would consider a Good Thing(tm).	leetrout	12.733256	-6.707776	comment	4.0	13.0	1557078600	12.314248
19851755	You forgot to add an index on tags.n	You forgot to add an index on tags.name and null constraints on the rest of the columns.> from there it's just regular railsThat's the problem. Examples like this focus on the first few minutes of development. Not the subsequent years of maintenance.	davidcuddeback	12.777052	-6.903563	comment	4.0	15.0	1557251442	12.347567
19872497	With due respect, Datalog is a very 	With due respect, Datalog is a very difficult language to learn, and it just doesn't have the support and resources SQL does.  We were forced to use it in a Data Cleaning course a few years ago because the professor was big on it, and everyone struggled. To this day, fellow students complain about that part of the course.  No one ever looked at it again after that class.Datalog will ALWAYS be a niche language, because it is designed for a certain type of computational mind.  The vast majority will want to learn SQL due to its ease despite any shortcomings it may have.	Vaslo	13.192828	-7.026759	comment	4.0	14.0	1557436472	-12.422176
19883492	Prolog may suffer from a lack of pop	Prolog may suffer from a lack of popularity, but I'd argue that's not because it's lacking in power as a means of expressing an idea. Nor is it due to a hardware paradigm mismatch.Lisp and its variants (especially Clojure) enjoy increasing popularity for all sorts of general-purpose use. Lisp is merely a particular notation for expressing lambda calculus, and is rather far removed from the realities of Von Neumann hardware.I'd argue Prolog's demise is due to three facts: (a) the sorts of ideas best expressed in Prolog have diminished due to new languages becoming available, (b) the remaining ideas best expressed in Prolog are only applicable to a narrow set of problems, and (c) Prolog itself isn't the most ergonomic language to use, so it isn't often people's first choice when alternatives	TimTheTinker	13.13989	-7.296477	comment	4.0	14.0	1557533469	-12.477248
19917988	Thanks for sharing. The thing that I	Thanks for sharing. The thing that I am most concerned about with PHP is not, strictly speaking, the language itself. The syntax is slightly odd but otherwise fine. And the semantics are much the same as any similar language.The real problem that I find with PHP is that the designers seem (from an outside perspective) to take a similar approach towards language backward-compatibility that, for example, C/C++ have. There is some rejection of the idea of getting rid of the old, bad stuff. Plenty of new, cool features is all well and good - but there are still holes in the floor that new learners will fall through.[To clarify, I understand the case made by the C/C++ committees on supporting old code. But nobody's programming pacemakers in PHP, one would hope.]	johnday	12.752787	-6.654357	comment	4.0	17.0	1557915842	10.323843
19918020	Last time I used composer (about 3 y	Last time I used composer (about 3 years ago) it had a nasty memory leak that eventually meant I had to run the build on a higher specced instance than the actual application. This was mainly due to the ridiculous dependancies of the application, but it was almost a show stopper. Has this improved?	Intermernet	12.656092	-6.5992455	comment	4.0	13.0	1557916191	10.304026
19918173	Rather than chasing MVw or OO trends	"Rather than chasing MVw or OO trends of the JavaScript ecosystem and become more like JavaScript or Java, so to say, why don't the PHP developers identify and build on the unique strengths of PHP? Which are IMO: the large installed base in classic web hosting, and the original purpose of PHP as a high-level scripting language embedded in otherwise static HTML as in ""<?php ...>"". There is a huge room for improvement there since PHP's quick-and-dirty hackjob of a page-embedded language isn't HTML-aware and thus prone to injection attacks, which has caused uncountable attacks, botnets, and other problems for PHP and non-PHP sites alike, in particular when coupled with PHP's target demographic. This is especially painful because PHP embeds via SGML mechanisms (processing instructions), when SG"	tannhaeuser	12.730795	-6.5694118	comment	4.0	16.0	1557918061	10.299407
19918277	And yet ~everything in https://eev.e	And yet ~everything in https://eev.ee/blog/2012/04/09/php-a-fractal-of-bad-design/ is still true.All that's happened is that the language is even more complex, has even more baggage.	richardwhiuk	12.817036	-6.69455	comment	4.0	24.0	1557919110	10.47299
19919996	I've been using PHP semi-regularly s	"I've been using PHP semi-regularly since the late 90s. It's been empowering and infuriating.The ecosystem is radically better than it used to be. Composer and the Packagist registry are as mature and dependable as npm, PyPI or RubyGems. (despite hours lost to my own namespace screwups). I'm also happy to see the Prettier-PHP project automating and enforcing code-style standards.For whatever reason, I often feel clumsier after working on a PHP project. After working in other languages like JS or Python, I tend to feel like I've leveled-up my skills.One thing I wish PHP would address is the inconsistency in its map-filter-reduce functions -- their argument-order doesn't match (array, callback) vs. (callback, array):    array_filter($arr, $fn)
    array_map($fn, $arr)
    array_reduce($arr, $"	joemaller1	12.749571	-6.6513805	comment	4.0	18.0	1557932127	10.323024
19953057	> to top it off it is written in PHP	> to top it off it is written in PHP - a programming language hated by a lot of programmers.You could say that about any language. PHP is loved by many programmers too.	regularjack	12.750737	-6.641816	comment	4.0	22.0	1558270258	10.365309
15782138	For someone who hasn't learnt Rails 	For someone who hasn't learnt Rails or any other backend framwork and has only briefly dabbled with NodeJS, is it better to learn Rails first or should I learn Elixir / Phoenix directly? Thanks.	srikz	12.7081785	-7.2002864	comment	4.0	13.0	1511719577	12.698394
15798849	The Joy of Erlang; Or, How to Ride a	The Joy of Erlang; Or, How to Ride a Toruk (2011)	Tomte	12.567431	-7.5210824	story	4.0	131.0	1511887605	12.915865
15799547	To piggyback on this question: regar	To piggyback on this question: regardless of the merits of each language, do people think that in terms of enterprise adoption and job opportunity Elixir is more interesting than Erlang at this point?	dudul	12.633269	-7.4888806	comment	4.0	15.0	1511891488	12.942056
15823079	This is frankly terrible advertiseme	This is frankly terrible advertisement for Perl 6.I guess it is targeted at people that are already well-versed in Perl 6 (or at least Perl 5)? Maybe it should say so at the top so that people like me do not get a terrible first impression of it.	Phlogistique	12.343367	-7.0497766	comment	4.0	28.0	1512124506	13.186123
15832471	I’d posit that a simple crud app wou	I’d posit that a simple crud app would take an order of magnitude less time with Rails. I’ve been a Django developer since 0.96 and have built dozens of apps with it. After transitioning to Rails, it’s hard to justify the use unless you’re in an evironment that absolutely must use Python.	whalesalad	12.788143	-6.727656	comment	4.0	34.0	1512230914	12.184615
15833122	I really wish they merge Django and 	I really wish they merge Django and DRF.	halayli	12.8335085	-6.535063	comment	4.0	16.0	1512238057	10.121621
15873442	It's cool seeing an Elixir company h	It's cool seeing an Elixir company have such explosive growth.	brightball	12.703651	-7.4661045	comment	4.0	24.0	1512676470	12.928556
15881214	Do you think RoR is a good choice wh	Do you think RoR is a good choice when all you really want is a service  with a REST API?I prototyped something in a couple of days with Python and Flask and it made a good enough impression that we are thinking about fully developing the idea. I'm open to just about any tech and am thinking about continuing with Flask (and Flask-restful), using Go, or Ruby on Rails. I have almost no experience with any of these and that's part of the reason they appeal to me.	criddell	12.726454	-6.7803817	comment	4.0	16.0	1512761081	10.415802
15882731	Ask HN: How is your JavaScript based	Ask HN: How is your JavaScript based backend organized?	horsecaptin	12.755056	-6.6004133	story	4.0	20.0	1512772847	12.337542
15901035	>- Perl/PHP/Bash: Learn to cry bitte	>- Perl/PHP/Bash: Learn to cry bitter, sorrowful tears.This is a common misconception. PHP tears are actually almost sweet and not bitter at all. The only saltiness comes from hearing the opinions of other programmers talk about your primary language.	ghostbrainalpha	12.575645	-6.873072	comment	4.0	24.0	1513030520	13.1772585
15904057	I've always been really skeptical of	I've always been really skeptical of those language performance comparisons which refer to PHP.As stated above PHP7 has similar performance when compared to HHVM which was made by Facebook. Additionally PHP has an amazing performance debugger by FB called xhprof.PHP performance could always be increased hugely by making sure is cache buckets have enough memory (opcode cache, realpath_cache_size).Secondly with any web framework your app will most likely be limited by IO (database, file lookups, networking) before it becomes limited by actual code execution performance.If anyone's ever worked on a project where the performance problem was the language and not IO I'd be really interested in hearing about it, but in my career of making websites I've never ran into this problem yet.	j0rd	12.744983	-6.6162233	comment	4.0	29.0	1513069707	10.306855
15906279	TypeChain: TypeScript Bindings for E	TypeChain: TypeScript Bindings for Ethereum Smart Contracts	bobbrown	12.357171	-6.843577	story	4.0	95.0	1513092906	-10.4513235
16003821	I started using Ruby only in April t	I started using Ruby only in April this year due to starting at a new job. Having used and/or dabbled in C, Java, Python and Haskell before (amongst others), I find it super interesting to see how Ruby manages to take some interesting parts from each and manages to integrate it into a very pleasant programming experience. Also the rspec testing library is nothing short of magic, none of the compiled languages have anything that even comes close IMO.For the cases where you have a tight loop taking up 99% of the actual CPU time it is also relatively easy to hook in C or Rust or whatever. Also, sometimes you hit hardware performance limits regardless of the language you use. We have some streaming download servers written for 99% in Ruby using the libCurl bindings that and they easily manage 	WJW	12.653814	-6.992075	comment	4.0	20.0	1514203188	12.383424
16052504	It is becoming more and more apparen	It is becoming more and more apparent that with every piece of technology that is not really turn on/turn off you have to justify the investment.I get that this is an opinionated piece of software and solves basecamp's kind of issues but I do not see it being widely adopted.That said I wish people behind RoR would actually work on better integration with things like React and Vue.	holydude	12.712335	-6.884369	comment	4.0	13.0	1514908257	12.254683
16110382	What is crystal? And where are Java 	"What is crystal? And where are Java & C++? Also, who the hell writes web frameworks in Objective-C?Also... does anyone notice that this test shows that the web framework hosted under the same github account is the fastest.edit: re: ""What is crystal?""https://github.com/crystal-lang/crystal ... I will say, I'm intrigued. I do love ruby, but unfortunately also hate dynamic typing. Crystal seems interesting."	erickj	12.6195345	-7.244997	comment	4.0	12.0	1515534034	-11.214892
16137469	Ruby Still isn't dead	Ruby Still isn't dead	stanislavb	12.669478	-7.0159507	story	4.0	14.0	1515802882	12.3841095
16156024	Here's what the plan seems to be fro	Here's what the plan seems to be from reading the blog and the README:1. Re-implement Bash and similar shells in a modern programming environment with an eye to extensibility2. Make good debugging tools because this is now easier because (1).3. Create a new language that extends Bash, similar to how ES6 extends ES5, for a gentle migration of large shell scripts to a safer languageWhat, other than static parsing, should this endgame language offer? Where does it fall, on the gamut from Bash to Haskell? We already have quite a few languages that offer a souped-up scripting experience.When my bash programs become too long, I usually reach for Ruby, which has convenient back-ticks syntax for shelling out, and many convenience methods on its built-in types for mashing strings and such. But like	jitl	12.376873	-7.0813527	comment	4.0	15.0	1516080163	-9.725943
16160134	Please work. Please work. Please wor	"Please work. Please work. Please work.
This couldn't come at a better time. I've got ""convert site to TS"" looming on my to-do list for a large web app. Anything that saves me some interface props/state typing tedium would be great."	seekbeak	12.3724575	-6.7418346	comment	4.0	23.0	1516124587	-10.499967
16161110	"What's needed here is a ""naming and "	"What's needed here is a ""naming and shaming"" effort. Make a public directory of bad PHP tutorials/references/etc., with the names of the people and companies who wrote and host them prominently attached. Maybe even give them a score, based on how frequently cited/linked to their bad advice has become, or how many pieces of it they've proffered. Then only take them off the list when the documents are cleaned up or removed.If you're a professional PHP developer or a company that builds on PHP, it would be very embarrassing to find yourself prominently featured on such a list. Which would create an incentive for those people to clean up their work so they can get off it.As things stand currently, publishing outdated and dangerous information costs the publisher nothing, so they see no reason "	smacktoward	12.807596	-6.500552	comment	4.0	13.0	1516129490	2.3619654
16161129	I recently started a new project. I 	I recently started a new project. I started with kotlin and react. I was working on creating typings for redux, router, etc. Encountered a lot of issues.Moved to typescript, things were great till I went to add redux and router. There were typing issues being worked out in the recent development branch. A few weeks back.I love typescript. The IDE experience via visual studio is great. But I was burning a lot of time working on type libraries/definitions.I switched to flow. I miss visual studio code and some of the typescript features. But adding typing to a react project, especially with redux and immutable is great. The typing ecosystem of flow and typescript is truly impressive. With support for union types, strong structures. Really good inference. I'm just waiting for better pattern ma	soulnothing	12.43146	-6.750448	comment	4.0	38.0	1516129563	-10.499438
16161455	> When I upgraded my projects to PHP	> When I upgraded my projects to PHPa7 ...The universe of developers with PHP projects to maintain is filled with people who do not share the same goals and constraints that you might enjoy.There is an enormous amount of lousy PHP code, and more being made by clueless developers. But please do not dismiss the need to support old PHPs as being driven primarily by those reasons.1. The PHP project itself has EOLed 5.3.3, however distros continue to support it with backported security and bug patches of their own.2. PHP 5.3.3 (with backported security and bug patches) remains the default in CentOS 6.9, which is supported until 2020. More recent versions are not available via their repositories. Hosts would have to upgrade PHP outside of the CentOS packages and assume the maintenance burden fro	jccc	12.7789755	-6.639261	comment	4.0	18.0	1516131151	10.3326845
16170737	I'm really excited about the code fo	I'm really excited about the code formatter. I'm glad more and more projects are following Go's lead on this.How was the default style decided? And very importantly, what's the forum for users to bikeshed endlessly about how it should be different?More seriously, as someone who's literally updating a bit of code to use a :simple_one_for_one supervisor right now - is the new DynamicSupervisor more about naming, so people understand it better, than semantics? I was under the impression that :simple_one_for_one, :rest_for_one, etc, were all standard erlang OTP supervisor strategies and that Elixir mostly deferred to them. Is it still using the same erlang semantics under the hood?Oh, and edited to add: does that mean using `:simple_one_for_one` with a `Supervisor` is now deprecated? If so, wh	losvedir	12.622994	-7.4989634	comment	4.0	17.0	1516215974	12.927144
16193200	Glad to see that Elixir's pipe opera	Glad to see that Elixir's pipe operator is beginning to spread to other languages!	pg_bot	12.591232	-7.45476	comment	4.0	22.0	1516453680	12.919108
17892231	What sort of security holes in Flask	What sort of security holes in Flask are you referring to?	linux2647	12.753058	-6.563137	comment	4.0	15.0	1535815371	10.034823
17896168	Although it's clear that Facebook's 	"Although it's clear that Facebook's libraries, among which React, favour Flow, there's strong community demand for TypeScript even around React. Thus, the type definitions that are available for React are excellent, Redux even includes its type definitions natively, and most of the large tools in the React ecosystem work pretty well with TypeScript.The main large project you're likely to use that does not really play well with TypeScript yet is create-react-app. There's a TypeScript fork [1] which works reasonably well, but ""reasonable"" is not really what you'd hope.That said, the strong community push means that they're at least considering it. [2][1] https://github.com/wmonk/create-react-app-typescript
[2] https://github.com/facebook/create-react-app/pull/2815"	Vinnl	12.526362	-6.625134	comment	4.0	15.0	1535876747	-10.48171
17901451	Lisp-Flavoured Erlang	Lisp-Flavoured Erlang	tosh	12.560948	-7.5043797	story	4.0	122.0	1535966345	-10.325833
17925406	Could somebody, please, explain me w	Could somebody, please, explain me what I need in addition to ROS for functional safety. Some certified laser scanner? Do I understand it right, that ROS completely ignores functional safety?	lnsru	12.698272	-6.8446355	comment	4.0	18.0	1536232671	12.216065
17962359	You probably should have searched fo	You probably should have searched for the name Lumen before you chose it for your project. Lumen is a framework for PHP:https://lumen.laravel.com/	motogpjimbo	12.813726	-6.6434946	comment	4.0	15.0	1536692712	10.384956
17975538	php stands out for being extremely s	php stands out for being extremely simple to use for new comers	sdfb	12.754362	-6.6316643	comment	4.0	20.0	1536806473	10.33242
17975578	Agreed, Hack appears to be a move to	"Agreed, Hack appears to be a move to fork into a PHP-esque language that FB engineering feels will be better for their software lifecycle goals and needs:- Handle numeric boundary cases in a more intuitive way.- Is Typed.- Replace reference parameters in favor of a new keyword, ""inout"".- Change package management and testing framework to be less annoying and more streamlined.  This will be yarn (from npm, as in the one written in Javascript), and their own custom flavor of testing framework, hh-test, to replace PHPUnit.I wonder how many existing open-source PHP projects will remain compatible with HHVM?  The post seems to indicate compatibility will not be a priority and that it's a fully breaking change.  If this is true, it seems the ""empty cocktail room"" effect will be a major challenge"	jaytaylor	12.773039	-6.6364603	comment	4.0	15.0	1536807018	10.299335
17976111	I don't think there are enough backe	I don't think there are enough backend web developers in the world to support vibrant communities for both PHP and Hack.Unless Facebook's prepared to invest a lot in community-building, Hack and similar FB projects will go the way of VBScript and Silverlight.	muglug	12.756737	-6.6421175	comment	4.0	49.0	1536814002	2.9719548
18005008	Ruby’s Hashes and Perl’s Autovivific	Ruby’s Hashes and Perl’s Autovivification, in JavaScript	braythwayt	12.360439	-6.9806876	story	4.0	36.0	1537185530	13.051262
18030146	I like the look of it!The basic idea	I like the look of it!The basic idea has been executed already using PHP by Perch CMS[0], but this looks like it could be a good alternative (esp. if it's open source!)0: https://grabaperch.com/	fastball	12.719017	-6.536427	comment	4.0	13.0	1537423976	10.295245
18048541	Sometimes the problem is that it tak	Sometimes the problem is that it takes 10 years for the thing to finally start generating real money, but by this point everyone involved has moved on and you have customers that you don't want to let down, but really the thing is Rails 3 and the $100k of profit per year it is bringing in aren't really worth the headache of upgrading everything.I think in the next 5 years someone is going to invent an entire stack for long-lived apps. Where every level is as simple as possible and the only updates that are issued are security updates. We need computers to be able to run 30 year old software without having to stress, and the only way I can think of doing that is to minimize feature development and complexity.	3pt14159	12.73564	-6.924628	comment	4.0	14.0	1537658899	12.358287
18057122	Two years of Elixir at the Outline	Two years of Elixir at the Outline	davydog187	12.70142	-7.45758	story	4.0	15.0	1537792387	12.948484
18068374	Only a Rails developer would think 6	Only a Rails developer would think 6k requests per minute with 40ms latency is reasonable with all that hardware. If you rewrote it you probably only need 1 server but you will probably make an argument about how developer time is more valuable :)	spullara	12.75047	-6.914238	comment	4.0	15.0	1537896202	12.30843
18086815	What is the lowest ceremony way to s	What is the lowest ceremony way to start building a TypeScript SPA?  I would love to avoid Webpack if I can :)	yawgmoth	12.5487175	-6.4487076	comment	4.0	14.0	1538069922	-10.540611
18094672	No mention of the rails:update rake 	"No mention of the rails:update rake task, which is a very valuable tool to get your boilerplate updated.  I'm guessing at GitHub there is so much customization over the years that they wouldn't get much out of it, but it's still a valuable exercise to run through, and it's worthwhile to keep your boilerplate aligned as much as possible since it makes gems, documentation, and everything else more likely to align with shared community experience.Also, I want to add a big proviso to the lesson ""Upstream your tooling instead of rolling your own"".  Historically in ruby, and now even moreso in node, the ease of pushing new packages and the trendiness of the language at times has led to a lot of churn and abandoning of packages.  The trick is to include stable dependencies, and that requires quit"	dasil003	12.711634	-6.945174	comment	4.0	16.0	1538152143	12.378258
18095103	What dynamic language is easy to ref	"What dynamic language is easy to refactor? I remember the ""good"" old PHP days and I can't say it was easy either."	thefounder	12.679862	-6.653892	comment	4.0	20.0	1538155194	10.341165
18097222	> Instead perhaps people could sugge	> Instead perhaps people could suggest a better language/framework that is more productive than Rails, and has had a long lifespan in a large codebase?I’d suggest most frameworks are better than rails for long lifespans. They just frontloaded productivity, and it shows. The UI and functionality of github is largely the same as in 2010.	drb91	12.731776	-6.9402947	comment	4.0	14.0	1538170286	12.335667
18141917	How are the deployment, library ecos	How are the deployment, library ecosystem, build, and tooling stories for Elixir?Note I don't really care about the answer to the above, I just wish as a profession we could get past the tribalism and boosterism and have rational technical dicussions about things that matter as opposed to banal declarations about 'expressiveness' etc.	le-mark	12.68802	-7.450355	comment	4.0	17.0	1538674552	12.929199
18142089	Yeah, irritatingly. Erlang had this 	Yeah, irritatingly. Erlang had this nailed years before. It's a bit too weird syntactically, and doesn't have the full force of Google pushing it, so it gets ignored :(	nimish	12.56116	-7.5294876	comment	4.0	55.0	1538675766	12.912706
18188372	1986 Art of Prolog..Can someone say 	"1986 Art of Prolog..Can someone say which (who?) are the ""Prolog for the 21st century"" and the ""Lisp of the 21st century"" ?!"	yazr	13.161831	-7.3083014	comment	4.0	21.0	1539201918	-12.492337
18188601	I learned the basics of Prolog, real	"I learned the basics of Prolog, really liked the idea, but found it rather impractical for complex problems. IMO, there needs to be a stronger separation between rule descriptions and search algorithm description/manipulation. I want to be able to specify an infinitely recursive rule, but avoid falling down the rabbit hole while running queries. Cuts could also be moved into this ""search algorithm description""."	gambler	13.139538	-7.283499	comment	4.0	15.0	1539203761	-12.490239
18224183	The answer is probably that parts of	"The answer is probably that parts of Rails are worth knowing, and other parts aren't.ActiveRecord and the Rails Controller/Model/Routing system are as good as anything in the serverside framework world. A few years back people might have started saying that AR was in danger of being obsoleted by ""modern"" databases, but SQL (and particularly Postgres) has come roaring back, and AR remains one of the best (arguably the best) SQL ORM.At the same time, there's a lot of mechanism in Rails that is aimed at front-end work; templates, different template engines, helpers, the inscrutable asset pipeline. This stuff, not so much anymore. The energy you'd put into learning how to do idiomatic front-end in Rails, you should instead put into something like React (probably: into React).People with a visc"	tptacek	12.841574	-6.8230586	comment	4.0	30.0	1539640525	12.309498
18226975	> then it got brokenGot broken?  I t	"> then it got brokenGot broken?  I think of it more as having failed to obtain/coordinate the resources needed to progress.What it means to have a healthy language ecosystem has advanced.  1970's Prolog implementations couldn't standardize on a way to read files.  1980's CommonLisp did, but had no community repo.  1990's Perl did, but few languages then had a good test suite, and they were commercial and $$$$.  Later languages did, but <insert-your-favorite-thing-that-we-still-suck-at>.And it's not easy for a language to move on.  Prolog was still struggling with creating a standard library decades later.  CommonLisp and Python had decade-long struggles to create community repos.  A story goes that node.js wasn't planning on a community repo, until someone said ""don't be python"".The magnit"	mncharity	13.1296835	-7.2865505	comment	4.0	21.0	1539669797	-12.4894495
18227927	>> Two decades after its creation, L	">> Two decades after its creation, Lisp had become, according to the famous
Hacker’s Dictionary, the “mother tongue” of artificial intelligence research.More precisely, Lisp became the ""mother tongue"" of AI research in the United
States. Europe and Japan, which at the time also had a significant output
into AI research, instead used Prolog as a lingua franca.This is interesting to note, because a common use of Lisp in AI was (is?) to
write an interpreter for a logic programming language and then use that
interpreter to perform inference tasks as required (this approach is evident,
for example, in Structure and Interpretation of Computer Programs, which
devotes chapter 4.3 to the development of a logic programming language, the
query language, which is basically Prolog with Lisp parentheses"	YeGoblynQueenne	13.152981	-7.2773085	comment	4.0	34.0	1539681798	-12.475424
18269260	> What is it you want to know? I'm g	"> What is it you want to know? I'm giving you my personal experience, not an essay. It's hard to find people who have professional experience with Erlang, so I thought it would be useful to other people who are evaluating it to hear from someone who has been there. I'm more than happy to dig into things more if there's a pointed question.While this whole comment thread has turned into a bit of flame war, I appreciate your candidness and think you’ve tried to fairly express your opinion. As someone who likes semi-obscure languages and systems it’s valuable to see when and where system designs fail for people. Personally without Elixir I wouldn’t want to delve into Erlang/OTP for many of the problems you mentioned. The Erlang syntax seems ""elegant"" upfront on small problems, but digging into"	elcritch	12.6284275	-7.4833293	comment	4.0	17.0	1540145387	12.911545
18279665	> There are no downsides but so many	"> There are no downsides but so many upsidesI've not used TS, but from what I've read the types from TS are not js compatible, so once you go into TS you have code that just isnt js.(As opposed to flow, where you can just have it not be used)While transpiling is normal, I'm as hesitant to tie myself to TS as I am to, say, a non-standard decorators syntax.  Anyone coming to me with ""there are no downsides"" in such a case doesnt sound very credible.Assuming I'm wrong, how would you address this?"	ergothus	12.350666	-6.7315936	comment	4.0	19.0	1540252524	-10.433769
18289285	Not to mention the nightmare of ruby	Not to mention the nightmare of ruby versions and packages.I quite like the language by my biggest drawback to using ruby for anything is versioning and packages.	sytringy05	12.589829	-7.0245337	comment	4.0	13.0	1540348972	12.366144
18311197	Does anyone miss or want type checki	Does anyone miss or want type checking when working with Elixir? After working with Ruby to build large systems for so long, I'm missing a little bit of the safety that types provide. Typescript has been great.	joevandyk	12.477139	-7.4291854	comment	4.0	14.0	1540574400	12.92394
18318085	I think both statements depend on th	"I think both statements depend on the definition of ""at scale"".  I am no expert, but every RoR thing I have ever seen has been tiny in terms of traffic and still performed terribly.  Is there anything in the top 100 sites using RoR?"	deialtrous	12.707881	-6.9104357	comment	4.0	21.0	1540679682	12.323254
18346459	I love Elixir but it's worth noting 	I love Elixir but it's worth noting that I'd be hard-pressed to recommend it for every project because of the performance and base OS integration characteristics of the BEAM. The BEAM is a truly amazing piece of software and I do think that Erlang and Elixir are the true microservices dream we all wanted, but the BEAM uses preemptive scheduling and doing things like spinning up a new OS process can be a lot more work in Erlang than you'd deal with in other languages	jb3689	12.623444	-7.464699	comment	4.0	14.0	1540999566	12.903187
18351021	So what you're saying is that this t	So what you're saying is that this tool is bad because it makes you sad ?. Information is empowering use it to make informed choices about your career. If you're taking less money, make sure there is some trade off you're happy with.Also, most Google jobs are language agnostic. You can code in pretty much one of C/C++, Java, Python, Google hires for generalists. Your Ruby experience is not what's holding you back, so don't get bogged down.	mav3rick	12.612166	-7.0449	comment	4.0	26.0	1541038960	12.373301
18374961	20 years ago : you are right. Althou	"20 years ago : you are right. Although be warned, Prolog has some killer issues, principally the way that the knowledge base and search system works means that you will end up stirring fiddle factors (cut) into your logic program and at scale the brain boggling complexity of what is going on can lead to complete, sudden and irretrievable project failure.As in : it doesn't work, no one knows why, no one can fix it and no one has a plan that doesn't involve starting from the beginning and doing it differently.consider two programsGood prolog :on(a,b).on(b,c).above(X,Y) :- on(X,Y).above(X,Y) :- on(X,Z), above(Z,Y).->above(a,c).You'll get TRUE (yay) a is above c ! GOOOOOOOD prolog.but now :on(a,b).
on(b,c).above(X,Y) :- above(X,Z), on(Z,Y).above(X,Y) :- on(X,Y).-> above(a,c).ERROR: Out of loca"	sgt101	13.140604	-7.292046	comment	4.0	32.0	1541322113	-12.487918
18391857	Interesting idea that FGCS hype kill	Interesting idea that FGCS hype killed Prolog; on the Lisp side, we tend to think that AI hype killed Lisp.  Also interesting that the author considers Prolog a competitor to Lisp, when (I think) most programmers don't even think of Prolog.  Similarly, while we Lisp programmers think of Algol-like languages as our great competitors, I daresay the vast majority of C, Python, C++, Perl, Java, Go &c. programmers don't even think of Lisp.I think one can just run a Prolog engine in Lisp these days, which would get one the best of both worlds. But I'm not a Prolog programmer, so … perhaps I'm incorrect.	eadmund	13.152488	-7.29193	comment	4.0	17.0	1541518307	-12.485764
18403883	Been waiting for this release to sta	Been waiting for this release to start playing with Phoenix.I'm super interested to see how liveview turns out. Can it be a game changer and free us from JS framework morass? Anyone know if there's a public liveview repo/work to look at somewhere?	ledgerdev	12.901341	-6.879757	comment	4.0	17.0	1541642920	12.715304
18412302	This is interesting, although not th	This is interesting, although not that novel. Marshal deserialization has always been unsafe, and in > 10 years as a Ruby engineer I’ve never seen it used in a production system. I would guess that finding a system vulnerable to this exploit would be a more interesting story than the exploit itself.	burlesona	12.449366	-6.938186	comment	4.0	12.0	1541737209	12.263074
18423536	So ReasonML is actually a Javascript	So ReasonML is actually a Javascript-like syntax for OCaml, and its tool-chain converts Reason code to OCaml, which then uses a tool called Bucklescript to convert that OCaml to Javascript.All because some people just have to have their curly braces.I will never stop being angry that this exists. There is no reason for it other than pedantic bikeshedding and Facebook’s mission to proprietize web tech. It does nothing but mangle a perfectly readable syntax and bifurcate the ecosystem of the language.	jarcane	12.355743	-7.595561	comment	4.0	24.0	1541884374	10.378562
18485387	> TypeScript is gaining ground, peop	> TypeScript is gaining ground, people are moving away from Flow.Is it really the case? Both projects are watched and have quite big number of stars in github.I have tried flow and liked it. I have used typescript in the past and I'm not crazy about it. Therefore I would like to get better understanding here. Is there anything I could read about it?	daliusd	12.457696	-6.7244596	comment	4.0	17.0	1542623395	-10.469735
18505567	If it was actually against the law t	If it was actually against the law to teach Rails to the homeless, in order to protect them? Yeah.	beat	12.77671	-6.9595914	comment	4.0	13.0	1542830556	5.011531
18523993	Tau Prolog: A Prolog Interpreter in 	Tau Prolog: A Prolog Interpreter in JavaScript	aarroyoc	13.094591	-7.265293	story	4.0	97.0	1543093708	-12.4779215
18556535	The worst part of Elixir is when you	The worst part of Elixir is when you're working with other languages and you know it'd be better in Elixir.	mrdoops	12.672633	-7.4659677	comment	4.0	25.0	1543446374	12.941144
18561734	I'll be very sad if this goes the wa	I'll be very sad if this goes the way of Perl 6	rjplatte	12.339282	-7.041414	comment	4.0	39.0	1543511331	13.19138
18574683	Erllambda: Run Erlang and Elixir in 	Erllambda: Run Erlang and Elixir in AWS Lambda	codeadict	12.646504	-7.469923	story	4.0	64.0	1543631263	12.911451
18655956	I used Erlang before Elixir and it w	I used Erlang before Elixir and it was awesome, albeit with a syntax that required getting used too. I've often looked at bridging the gap between Ruby and Erlang, and closely watched and tested solutions like Reia [0], Erlectricity [1] and Ernie [2].I was delighted when Jose started getting involved in the space and released Elixir. Thanks Jose![0] http://reia-lang.org[1] https://gilesbowkett.blogspot.com/2007/05/erlectricity-erlan...[2] https://github.com/mojombo/ernie	andruby	12.610358	-7.498574	comment	4.0	30.0	1544542623	12.914177
18656797	Is Elixir more than just a ruby synt	Is Elixir more than just a ruby syntax of erlang? Because I prefer Erlang’s syntax.	the_clarence	12.635401	-7.4594555	comment	4.0	17.0	1544548435	12.9160385
18728422	As a Rails Dev, why does Python scor	As a Rails Dev, why does Python score so high? Is Django or scraping that important?I know Python can be used in practically anything, but what do you keep seeing companies ask for that is a recurring need with Python?	csdreamer7	12.687415	-6.7456203	comment	4.0	14.0	1545335148	10.288053
18735143	Ask HN: What do you dislike about Er	Ask HN: What do you dislike about Erlang?	crypto-jeronimo	12.569081	-7.5228906	story	4.0	11.0	1545415547	-5.4639573
18740829	What language is more expressive tha	What language is more expressive than TypeScript and works in VSCode?	prmph	12.377783	-6.7566414	story	4.0	3.0	1545490805	-10.410686
18774343	Martin Fowler of the Agile world, an	Martin Fowler of the Agile world, and Garret Smith of the Erlang community, are both excellent programmers whom I respect, and they both take the approach of breaking code into lots of extremely small functions.Having tried that style, I notice that I don't particularly favor it, and for the very reason you site: the code is no longer all in one place.I've switched to moderately sized methods/functions with comments every few lines.  Some say that comments like this are a smell, and that you should refactor the commented section of code into it's own function, but honestly comments are easier to read than method names (and again, there's the benefit of locality).I'll have to take a look at the book.	lliamander	12.537009	-7.514327	comment	4.0	35.0	1545962475	12.904979
18778888	> Elixir has drastically improved my	> Elixir has drastically improved my productivity, and you get to find errors in compile time, leading to much, much better quality, reliable code.Interesting, I haven't seen that as a strong point for Elixir.Granted I'm comparing it to Haskell and Rust which really give you errors in compile time. They aren't very popular for web dev though and compared to the other languages you list I guess I can see where you're coming from.	lawn	12.6669855	-7.4496174	comment	4.0	20.0	1546025831	12.918979
18788311	I very well know how much PHP is use	"I very well know how much PHP is used.However the possibilities and outcomes a learning developper has by choosing PHP are very well enclosed to the few things PHP gives instead of the myriads of things other tools offer. I won't even talk about the semantic.On the other hand letting the dev learn JS or Python or even C++ in a pre-thought way will let much more different technologies and ""tech-area"" to their grasp instead of getting enclosed in the almighty web jobs.You'll start hating PHP when you'll get friends who loose all interest in programming by choosing to earn their life satisfied of themselves for the few buks they earned.I'm not satisfied of what PHP gives, neither what I can do with it.Why would I learn PHP if I know Python and C & JS ? I don't see any except for the one you t"	azdacha	12.733606	-6.63451	comment	4.0	13.0	1546162737	10.359019
18830414	Elixir/Erlang is concurrent, not par	Elixir/Erlang is concurrent, not parallel though.	dragosmocrii	12.578613	-7.489446	comment	4.0	14.0	1546672280	12.906267
18838552	I keep wanting to be hyped about eli	I keep wanting to be hyped about elixer but the performance benchmarks confuse me. If you look at the tech emperor benchmarks[1] phoenix makes the list at #46 registering 16% of the performance of the top framework. I'm willing to sacrifice performance for readable maintainable code but it just surprises me that its that slow.Anyone know whats going on there?1. https://www.techempower.com/benchmarks/#section=data-r17&hw=...	trashhalo	12.653858	-7.424816	comment	4.0	12.0	1546785982	12.869829
18838662	I’ve been programming in elixir for 	I’ve been programming in elixir for about 2 years now. I have to say it’s hard to go back to something like Ruby or JavaScript.In elixir you really get the full power of multi core and support for distributed computing out of the box.Code that would have been beyond my pay grade or wouldn’t even imagine to write in Ruby or JavaScript is now easily reasoned about and maintained in projects. I can write succinct code that is easy to read, is fast, able to take advantage of multiple cores, less error prone, which I can scale to multiple machines easily.The erlang scheduler is so damn powerful and it feels amazing to be able to execute your code on multiple machines with a simple distributed task which is built in as a standard functionality of the language.I’ll end this note saying that, look	artellectual	12.643111	-7.4468293	comment	4.0	30.0	1546787297	12.917045
18839307	> If you need multi core and distrib	> If you need multi core and distributed features (which is generally more common than you think) elixir is truly your friend.Is it though? At least in my line of work I don't think I've ever run into this. I feel like I've always been able to distribute just fine with workers/queues. If I even suspected it would I'd look into it more, but generally I find distributing across systems to be a software architecture-level and not language-level work; perhaps I'm missing something, however.	arcticfox	12.647725	-7.4326367	comment	4.0	25.0	1546794940	12.963313
18839841	can people give real world business 	can people give real world business use cases for where they are using elixir? What industries are you working in? what actually gets done in the real world at the end of the day with the system you're working on? e.g. are more ads served to web users? are you monitoring methane on IOT things strapped to cows in farm fields?	abledon	12.696639	-7.4404507	comment	4.0	17.0	1546800611	12.927671
18873827	Now that we have ReasonML, which has	Now that we have ReasonML, which has a more predictable and sustainable release cycle, and large support, as well as functional programming from OCaml and smoother JS interop when that's desired, what does Elm still bring to the table? When Elm was originally developed, there wasn't a viable alternative for those who wanted good statically-typed FP in the browser, but it would seem now that new apps in this style of development have far more choices with generally fewer pain points.	hellofunk	12.96061	-7.678392	comment	4.0	20.0	1547128766	-12.742508
18873893	After 25 years it seems Ruby is in g	After 25 years it seems Ruby is in gradual decline these days? You will find one ruby related post at HN after reading 500 of Javascript and/or Python posts here for example.	ausjke	12.673164	-6.9994836	comment	4.0	22.0	1547129408	12.374056
18873985	I'm currently working on a Ruby proj	I'm currently working on a Ruby project, and I love the language so much! It's elegant, fast enough for me, and the ecosystem rocks.It seems that, after Ruby borrowed from many previous languages, a lot of rubyisms went into Rust (the nice functional-style enumerations, the awesome package manager inspired by Bundler). And I'm thrilled the best of the Ruby world found its way into other languages.A future where the elegance of the Ruby language is available both as an interpreted-scriptable tool (Ruby) or a compiled-statically-typed language (Rust) looks like a nice place to me.	kemenaran	12.527496	-7.1016946	comment	4.0	29.0	1547130184	12.358427
18883233	https://laravel.com/ (PHP) will remi	https://laravel.com/ (PHP) will remind you of Rails. Even the directory structure.	mtmail	12.804989	-6.65439	comment	4.0	12.0	1547211703	10.381669
18887598	I loved Forth and Chuck Moore's 10x 	I loved Forth and Chuck Moore's 10x philosophy.I went from Forth to Ruby, from a notorious write-only language to a language that's a joy to read & write.I occasionally wonder about the possibility of a forth/ruby hybrid, stack-based interpreter/compiler with the readability of ruby.Ruby's OO is based on message passing.  A message-passing OO is something that could potentially be implemented elegantly in Forth.	fouc	12.52906	-7.0819983	comment	4.0	13.0	1547244059	12.380653
18918682	I’d say “why not just use Elm” (or s	I’d say “why not just use Elm” (or some other language designed for types), but every time I do that it seems to summon some weirdo who keeps harassing me with “hurrrr durrr there’s no evidence that types help with anything!!”	yakshaving_jgt	12.97449	-7.6737037	comment	4.0	13.0	1547620045	-12.75903
18918696	> I very rarely see TypeScript devel	"> I very rarely see TypeScript developers actually use `any`whoaboy, I guess you only work with people convinced about the value of TS (or types in general), but if your colleagues are a bunch of javascript fanboys, the only thing they will do is rename their .js files to .ts files and be done... ""tada!!!"" (this is not a fucking joke, TS allows this madness, just rename and compiles!)"	knocte	12.352299	-6.824115	comment	4.0	25.0	1547620207	-10.4665165
29686439	What is best way to master Ruby for 	What is best way to master Ruby for generalist engineer? I know C++ and Python, JS, Typescript well enough.Python was easiest, since it took couple of days to master fundamentals and I was  writing good code in no time.Also anyone working on Typescript equivalent for ruby?	hemantv	12.58754	-7.020931	comment	4.0	14.0	1640462406	12.376306
29697761	Py2cr: A Python3 to Crystal Translat	Py2cr: A Python3 to Crystal Translator	hallowallo	12.618738	-7.2502055	story	4.0	79.0	1640565025	-11.189788
29729538	I'd like to point out that while Rub	"I'd like to point out that while Ruby does support the    puts(""This was true."") if true

syntax, that isn't how most people write if statements in Ruby, in my experience. Ruby also supports the common    if true
      puts(""This was true."")
    end

format, which is how I typically see if statements formatted in Ruby code.I wish the article had made that clear."	innocentoldguy	12.370935	-7.09186	comment	4.0	12.0	1640809494	12.399571
29752088	I am not sure Shopify belongs to the	I am not sure Shopify belongs to the list. It didn’t exactly pivot, Tobi Lutke made a website with Rails to sell snowboards, and realized there is an untapped market for SaaS e-commerce product, so he generalized the framework powering the website.	rubayeet	12.765737	-6.9296126	comment	4.0	12.0	1640981776	0.8153418
29823639	Java would be the same success as PH	Java would be the same success as PHP .. it might be everywhere but due to all kinds of side forces.It's like playing snooker, claiming a ball, missing it but scoring all the other ones accidentally and bragging.	agumonkey	12.698093	-6.651465	comment	4.0	36.0	1641477879	10.291947
29836812	Sure.We are running on a tight budge	Sure.We are running on a tight budget, completely bootstrapped by funds from my previous exit. Trying to control cost and all that while establishing product-market fit, which is the reason the beta is closed for now.Instead of starting with technology, I started by selecting people that I can work with and are crazy enough to accept working on such an ambitious idea. It turned out that they really liked Crystal and, so, here we are. I have over 30 years of dev experience, and in my previous startup I wrote a significant part of the code. But never wrote a line of code in Crystal before so it does make me feel a little uncomfortable. Its performance is truly amazing and that is what I care most about. Our front-end payload is HTML + vanilla JS (which btw is not needed, everything works in 	freediver	12.629054	-7.257658	comment	4.0	17.0	1641546221	-11.275311
29875908	It's too bad Ruby isn't seen as 'coo	It's too bad Ruby isn't seen as 'cool' anymore, it's just so easy to be productive in it.  And now MJIT, YJIT and TruffleRuby are making some very impressive performance gains.  Rails is also better than ever and I still can't think of a better language for scripting.	Mikeb85	12.648923	-6.9895334	comment	4.0	95.0	1641827182	12.368169
29876070	What was cool was Rails, IMHO, and R	What was cool was Rails, IMHO, and Ruby was the surprise inside it.I've had my own personal Advent of Code these holidays, coding a small API for a personal need.   Ruby (Sinatra) took one morning to full deployment in Heroku.  Then I tried Crystal (Kemal) and it took me a couple of days to figure out how to map JSON to Crystal data structures. Then I rewrote it again in Rust (Rocket).  Two weeks till I figured out, well, almost everything.My opinion: they will take dynamic typing from my dead cold hands.	pantulis	12.6317215	-7.0569882	comment	4.0	43.0	1641827684	12.3755665
29890455	Won’t be long before php is java	Won’t be long before php is java	jbverschoor	12.709341	-6.6500373	comment	4.0	21.0	1641902411	10.2960825
29890582	It's still a language that's mainly 	It's still a language that's mainly used for web development, right?Modern websites in big companies require pretty complex backends that require data processing queues and other background activities. Can PHP compete with languages such as Go, Python or Ruby in the future?	f311a	12.7113495	-6.652158	comment	4.0	23.0	1641903198	10.345828
29890636	I'm a fan of PHP and have been for y	I'm a fan of PHP and have been for years for several reasons:1. Low barrier to entry;2. Hard to leak resources since the model is to tear down everything after a request finishes;3. Stateless API core which means the efforts of creating an environment for a request for (2) is extremely low. Compare this to, say, the bootstrap time for Python or Java (which is why those generally don't follow the request teardown model);4. Almost no multithreading.This makes it great for servicing HTTP requests IMHO.I need to compare it to Hack/HHVM though since I used that for years and it's still playing catch up with features Hack has had for years eg:1. Hack has had the async-await model for years;2. The type system is actually really good. It made me appreciate how nullability being part of the type sy	cletus	12.757113	-6.6375146	comment	4.0	14.0	1641903522	10.287329
29890918	I find Ruby to be enough of a Smallt	I find Ruby to be enough of a Smalltalk for my taste. Besides that I see people to stuff with Clojure, such as hot-replacing live code, that I had only seen Smalltalk devs do so far.	cies	12.425076	-7.220713	comment	4.0	23.0	1641905619	7.1082973
29892950	A lot of people here have mentioned 	A lot of people here have mentioned Laravel. I think one of the key things about Laravel is that the creator, Taylor Otwell, is only focused on Laravel. Imagine if DHH didn't ever have Basecamp (or 37 Signals) and only focused on Rails and the Rails ecosystem. The Laravel team now has several full time employees working on making the entire Laravel experience as painless as it can be.Of course Taylor and the Laravel team have paid products, but they are all 100% focused on the Laravel ecosystem and developer experience!Some of the things that the Laravel ecosystem has as first party packages / services:Paid:• Vapor - Serverless Platform. Run your vanilla Laravel apps on Lambda.• Forge - Server Management. Builds Laravel ready servers on any cloud.• Envoyer - Zero Downtime Deployment. Deplo	aarondf	12.802225	-6.629756	comment	4.0	13.0	1641916312	10.34077
29904103	In my experience with these typed al	In my experience with these typed alternatives to JS, as long as you stay within that language things are good and smooth. But as soon as you need to interface with 3rd part lib, that's when things start to get messy.Providing type declarations for every third party lib you might want to use, especially in an ecosystem like Javascript's which relies heavily on them, gets tiring pretty fast.Typescript manages to get past that because it has reached a level of adoption now that most popular libraries will have a @types/<lib> package also but it took a long while to reach that stage.Curious if anyone has used ReScript at a larger scale (and does not have the resources of, say, Facebook) and what's their experience been like.	jatins	12.3650875	-6.7792444	comment	4.0	14.0	1641979178	-10.504214
30022263	Yes, Ruby on Rails is worth learning	"Yes, Ruby on Rails is worth learning. Especially if you are a JavaScript guy, a solo found and interested in the developer experience. Ruby and Rails give you a nice dev experience in my opinion and the way you use Ruby changed the way I do JavaScript too. You can also be rather productive as a solo developer in Rails so I think it is a perfect fit for you.
Down the road when you are comfortable with Ruby and Ruby on Rails you might want to look into Python too. Not so much for web development but there are a lot of devops tools out there that use Python.My background: I was a Python dev that worked PHP because that was the jobs I got (more than 10 years ago) and decided to invest more into JavaScript (2007) because I though it was going to be the future. When I couldn’t stand PHP anymore "	johntdaly	12.6341305	-6.924443	comment	4.0	13.0	1642766269	12.349441
30035358	> when Sass outgrew Ruby and needed 	> when Sass outgrew Ruby and needed to be rewritten in CAnd we’re all so happy that every time we install our node project we get a whole C build toolchain as part of the requirements…	Aeolun	12.538982	-6.752612	comment	4.0	13.0	1642846531	-7.5757265
30035632	I programmed with Elm for 3 years an	I programmed with Elm for 3 years and love it - best programming experience I’ve ever had. I had to stop because I started working on some educational game projects that  had incredibly short timelines and frequent, large change requests and depended on some WebGL 3D and game libraries. Nothing beats the super productivity of JS for hacking something together fast, and despite JS being far less reliable, the productivity and flexibility made up for that. Yes, there were run-time errors, but they were really a minor problem. JS, whatever it’s many faults may be, is fast and fun.What slowed me down with Elm was JSON parsing, which needs to be done manually and can take hours or days whereas the same thing in JS takes about 2 seconds to type an import statement. And the other thing was using 	d13	12.986989	-7.670469	comment	4.0	20.0	1642849503	-12.755449
30036391	any minute now there will be a langu	any minute now there will be a language that would learn and steal the good parts from elm but with a more open and industrious evolution process. it’s not going to be as good but it’s going to be very-very useful for quite a while, until the next iteration of PL design	valyagolev	12.996974	-7.6819496	comment	4.0	15.0	1642857876	-12.761355
30036442	If anything, the insanity just got w	If anything, the insanity just got worse: https://github.com/elm/compiler/issues/1773#issuecomment-418...There's an open bug re: negative literals, and accusations of bad faith towards the reporter.	vmchale	12.996855	-7.689257	comment	4.0	14.0	1642858368	-12.757149
30048432	Though, they ended up writing a whol	"Though, they ended up writing a whole new Ruby JIT to deal with Ruby's performance, so clearly at some point the trade-off changes from ""no systems programming, a highly dynamic language instead"" to ""hardcore systems programming, to make the highly dynamic language fast enough"""	remexre	12.629155	-7.02031	comment	4.0	12.0	1642960519	12.375518
30075560	> I'm happy to see this, as honestly	"> I'm happy to see this, as honestly I don't really understand why you would compile TS without type checking.I don't think I'm remotely alone in doing this but I'll share from my perspective. I have two modes while writing TypeScript stuff: 1) prototyping something where I don't want to spend time writing types (or maybe I write some types but I don't care if they are correct or line up yet) but I still want to have JavaScript generated so I can test the thing out manually and 2) getting types correct as part of long-term maintenance and edge-case removal.There are fast TypeScript -> JavaScript generators today like swc and esbuild. tsc is not fast. So I can speed up ""1)"" from above if I use swc and esbuild and only use tsc for ""2)"" from above.As people write faster implementations of tsc"	eatonphil	12.346882	-6.795228	comment	4.0	15.0	1643134410	-10.459535
30079403	I'm the author of esbuild. I think t	I'm the author of esbuild. I think this is a very smart, practical choice and is one of the approaches that has the best chance of succeeding (the other being a semi-automated porting tool instead of a purely manual port). I'm very excited to see someone take this approach. This is how I would do it if I were to do it. Web developers around the world are hoping this works out :)The hard part about this project isn't doing the port but keeping up with the constant changes from the TypeScript team, especially if the TypeScript team isn't invested in helping you out. Staying as close as possible to the source language like this will be a big win there.One of the big benefits of a native language like Go aside from lack of a JIT is the ability to easily add shared-memory parallelism. I haven't	constexpr	12.344433	-6.7939377	comment	4.0	20.0	1643152015	-10.473004
30101069	What are the trade offs of embedding	What are the trade offs of embedding a Prolog interpreter versus having a library that implements prolog logic without having to have another language.Are there any high quality prolog as a library implementations in languages such as Rust, C++, Java, Go?	RcouF1uZ4gsC	13.147086	-7.2940364	comment	4.0	14.0	1643294270	-12.482255
30101427	I've been keeping an eye on this to 	I've been keeping an eye on this to use for the rules engine in a card game I'm writing[0]. Very excited to get back into using Prolog; I think it's fallen by the wayside a bit in the last decade or two but there's some sectors that still have strong arguments for using it if not as the main language then at least an extension language.[0] Inspired by a HN comment a while back about Gleemin, the MTG expert engine in Prolog: https://github.com/stassa/Gleemin	stryan	13.130049	-7.29245	comment	4.0	17.0	1643296101	-12.487658
30130677	Is there an equivalent for TS/JS? Ho	Is there an equivalent for TS/JS? How about Java?	faangiq	12.354041	-6.54556	comment	4.0	13.0	1643491711	-10.503639
30175674	I love writing code with typescript,	I love writing code with typescript, but some things just make it harder than necessary, for example using environment variables.If I want to use process.env.NODE_ENV I first have to create a new environment.d.ts, declare the interfaxe and export an empty object just so the typescript compiler is satisfied. It sometimes just adds too much boilerplate.https://stackoverflow.com/a/53981706	mccorrinall	12.360729	-6.625298	comment	4.0	18.0	1643796063	-10.438352
30195876	Man, I haven't thought about Symfony	"Man, I haven't thought about Symfony in awhile.I took a job at a subcontracting about 9 years ago, where I was mostly doing Node.js work, but there were some projects using Symfony, and even after using it on/off for a month, I have to say I never really ""got"" it.  I could tell there's something there that's fairly cool, but I never really was able to wrap my head around all the folders.I've become a way better programmer since then, so I have thought about trying it out again, but nothing in my day job uses PHP anymore, and I've moved away from web since then."	tombert	12.776366	-6.63582	comment	4.0	24.0	1643910661	10.336965
30195898	Symfony seems to be going strong sti	Symfony seems to be going strong still other than this issue.Laravel is the other big MVC framework for PHP.	benbristow	12.792889	-6.6286554	comment	4.0	15.0	1643910751	10.345423
30207552	I think the main Thing here is that 	I think the main Thing here is that Rails is the de facto standard, the 'golden hammer' of Ruby based apps, and there is no space - or developers - for alternatives.The JS ecosystem as we know it today started years after Rails (Rails was 2004, Node's oldest version on their releases page is from 2011), and only really took off after NodeJS came to prominence with frameworks like BackboneJS, Angular, then React and the rest in the early 2010's, and it went along with Github and the emergence of everyone and their dog building libraries and frameworks.The attitude was different; instead of big opinionated but inflexible frameworks, people wanted to pick and choose. This was exacerbated by React that emphasized NOT being a framework but just a rendering layer.Pick ANY one-size-fits-all frame	Cthulhu_	12.763884	-6.7817636	comment	4.0	21.0	1643986844	12.305704
30209639	Rails and Ruby bake in a lot of real	"Rails and Ruby bake in a lot of really nice, ergonomic features for every day programming, not just larger architectural decisions. For instance I am working on a React Native app in my spare time and so much of Javascript seems tedious. Example is dealing with date ranges.Contrived example:  import { isWithinInterval, subDays, addDays } from 'date-fns';

  const today = new Date();

  let range = { 
    start: subDays(today, 1), 
    end: addDays(today, 1)
  }

  isWithinInterval(today, range)

The functions for this kind of calculation has to be imported into any file I want to use them? There seems like a lot of copy pasting of this kind of stuff everywhere in a robust javascript app. I think it's reasonably easy to read and understand, so I don't fault that, it just seems tedious to us"	prescriptivist	12.674306	-6.8660226	comment	4.0	14.0	1643995151	12.316653
30215409	> I'm constantly amazed that there a	> I'm constantly amazed that there are a ton of Ruby gems out there which pretty much work as advertised outside of RailsI must come to Ruby from a very different angle to you - but I don't even really get what you mean. Why would the majority of gems have anything at all to do with Rails or need it to work as advertised?For example the top-ten gems have got absolutely nothing at all to do with Rails have they?https://rubygems.org/stats	chrisseaton	12.715413	-6.947541	comment	4.0	15.0	1644019783	12.3624325
30242157	PHP share-nothing architecture is aw	PHP share-nothing architecture is awesome. It's amazingly simple and it scales to arbitrary size.	Isinlor	12.844424	-6.6002846	comment	4.0	17.0	1644224872	10.289159
30243050	PHP is a language with various   fea	PHP is a language with various   features that might make it attractive to certain people:• CGI-like execution model when used for the web, making resource leaks very difficult and encouraging scalable design• not only integers and floats, but also strings, lists and dictionaries as mutable value types (copy-on-write) — this is a big difference from JavaScript and Python• unusually for a dynamic “scripting” language: true classes and interfaces, and optional type declarations enforced by the runtime• a standard library that doesn't require import statements!• (a very new feature:) fibers, a way do asynchronous execution without every function in the callstack having to be aware of it• binary-safe strings without presumptions from the language about what encoding is in use• a very nice pack	TazeTSchnitzel	12.732108	-6.6462975	comment	4.0	29.0	1644231433	10.301624
30245731	tl;dr I wanted to do more frontend w	tl;dr I wanted to do more frontend work but they made me mostly write Ruby. They're nice though.	skrebbel	12.593216	-7.031928	comment	4.0	23.0	1644246106	12.396397
30262365	The concept of frameworks in PHP pre	The concept of frameworks in PHP predates its package manager and its PSR standards. Nowadays you can easily slap a collection of libraries together to create your own micro-framework that fulfills your precise needs. That is often a better decision than to go with a monster like Laravel or Symfony which by design aims to be good at all the things, instead of good at the things you need. Those frameworks themselves usually have individual components that can be used independently of the rest of the framework for exactly this purpose	pluc	12.765766	-6.6019945	comment	4.0	19.0	1644344875	10.332538
30261949	For those here wondering why you'd u	"For those here wondering why you'd use Laravel over vanilla PHP + MySQL + PDO, a few of my clients had this opinion so I've had experience. The Laravel ""fluff"" saves you from rewriting tons of code, helps you write test cases, and makes logic easy to follow.One of my clients was very anti ""needless vendor packages"" (definitely some truth to this sentiment), but we ended up with 14 extra php files reinventing the wheel. I'd opt for the former any day."	jackconsidine	12.813493	-6.6276054	comment	4.0	25.0	1644343268	10.302522
30287781	Am I wrong in thinking this is simil	"Am I wrong in thinking this is similar to the below code?<?php include(""https://otherdomain.com/somephpcode.txt""); ?>PHP got ridiculed for years for having this sort of stuff available (even if off by default eventually)."	mgkimsal	12.665004	-6.534284	comment	4.0	19.0	1644507896	10.262631
30297279	Isn't elixir supposed to scale bette	Isn't elixir supposed to scale better than this?	melony	12.687562	-7.460416	comment	4.0	21.0	1644556384	12.933673
30321183	I would go for Ruby on Rails, or a m	I would go for Ruby on Rails, or a more modern Phoenix Framework (Elixir). With Phoenix you can also use Phoenix LiveView to avoid writing JavaScript. Very stable, scalable and low-hassle once you deploy.	BrightOne	12.653774	-6.4779315	comment	4.0	12.0	1644754170	12.133669
30324864	I would answer at the meta-level - p	I would answer at the meta-level - pick the framework in the language you know best.If you are already fluent in Python, use Django. PHP; Laravel? Etc. The benefit of using the “best” CRUD tool (if there even is one) is far less than the cost of learning a new language these days.When Rails first came out, it was so much better than anything else that it was worth it to learn Ruby just to use that toolchain. Nowadays, the gap has closed for the simple use-case.You can run Django/Rails & Postgres on Heroku with approximately zero infra burden. I still have a trivial app I last touched ten years ago and it’s still up and serving traffic.	theptip	12.711906	-6.600756	comment	4.0	25.0	1644781204	10.288618
30358258	Not familiar with much front-end wor	Not familiar with much front-end work - can anyone give insight to what's gone on with Ember?	was_a_dev	13.112432	-6.4446316	comment	4.0	16.0	1645006904	-15.51456
30361102	Worked as a Perl dev for 15 years an	Worked as a Perl dev for 15 years and enjoyed it. The hardest thing was the number of ways to do OO Perl using Perl5. Everyone has their own flavor. And TMTOWTDI was a motto the community was proud of.Having said that, nothing could touch mod_perl performance under Apache in the late 90s. Massive web apps were built on this including eToys dot com where I worked before it imploded in the dot-com bust.	mmaunder	12.3297205	-6.961884	comment	4.0	14.0	1645024972	13.158263
30418804	"Ember's ""Satisfaction"" has been drop"	"Ember's ""Satisfaction"" has been dropping every year. I wonder why."	vmsp	13.111559	-6.443871	comment	4.0	18.0	1645467084	-15.511486
30454826	What does Phoenix have to do with it	"What does Phoenix have to do with it? The guy can't say anything good about Rails without us talking about Phoenix?
Have you looked at Django?
Have you looked at Laravel?
Have you looked at Go?
Rust?
Node?
We get it everyone is doing web frameworks noawdays, Rails isn't unique."	weatherlite	12.786524	-7.073773	comment	4.0	16.0	1645711730	12.607278
30454857	I don't think it's coming back. The 	I don't think it's coming back. The big players who started with Ruby during the peak of its 2008~ hype curve are having serious scaling pains and are looking to other more performant languages as a way out. Engineers at these companies are going to be taking these lessons elsewhere.This isnt even mentioning the compelling environmental arguments against a computationally taxing dynamic language like Ruby, which is going to be louder in the next few years.	ferdowsi	12.646597	-7.0145245	comment	4.0	18.0	1645711822	12.385557
30455790	"There is no ""sanity"" lost, nor are t"	"There is no ""sanity"" lost, nor are the masses ""following fashion"". That is unfair to those who put real thought, time and effort in their software.Rails has its strong sides. And its weak sides. Trade-offs are to be investigated. An extremely weak side of Rails, is how it is very tightly coupled to the database. Which -its strong side- is perfect for simple CRUD applications. But it falls down quickly when you have much more event-driven or domain-logic heavy applications.And yes, I know Rails can be used for this. But just like I can, potentially write a web-app in Bash, it's not where it shines and it will bring you pain.For Rails, the pain quickly becomes evident when a lot of business-rules are spread out through ""Validators"". Or when migrations become a pain to manage. Or when you hav"	berkes	12.771927	-6.900762	comment	4.0	31.0	1645716614	12.33837
30488227	Ruby Fiber Scheduler	Ruby Fiber Scheduler	brunosutic	12.579083	-7.0317607	story	4.0	109.0	1645968636	12.314758
30503338	Slightly off topic, how does Erlang 	Slightly off topic, how does Erlang handle this because isn’t it know for having extremely fast & cheap process spawning baked in (with isolation).	tiffanyh	12.509395	-7.511367	comment	4.0	19.0	1646073636	12.890287
30555792	RailsConf Removes Web3 Track	RailsConf Removes Web3 Track	magicjosh	12.770646	-6.930078	story	4.0	36.0	1646406262	12.36209
30576438	We automatically fixed thousands of 	We automatically fixed thousands of Ruby 2.7 deprecation warnings	kiyanwang	12.563888	-7.032764	story	4.0	122.0	1646561761	-5.970107
30578063	Good for them. I have found these wa	Good for them. I have found these warnings and others in Ruby so obnoxious that I started to look for alternatives, on the command line and as a language. I no longer support putting warnings into a code base in this way anymore as a result. I'm sure those who've experienced unwanted output from colors.js might feel similar.On a brighter note, my ability with awk and sed is much better now, so it's not all bad!	brigandish	12.519474	-6.990328	comment	4.0	28.0	1646579691	-5.9453855
30577520	Zotonic, the Erlang Web Framework	Zotonic, the Erlang Web Framework	graderjs	12.56394	-7.492442	story	4.0	106.0	1646573858	-9.599067
30610676	The Waning of Ruby and Rails	The Waning of Ruby and Rails	myth_drannon	12.764881	-6.930502	story	4.0	3.0	1646797420	12.345186
30618751	Why not support TypeScript natively 	Why not support TypeScript natively in browsers instead?	jiripospisil	12.373884	-6.767059	comment	4.0	14.0	1646853318	-10.447321
30622989	It didn't come across as combative a	It didn't come across as combative at all, no worries. I find it pretty convincing to be honest. If anything I think the biggest hold-up is that I can get jobs as a senior front-end engineer but if I looked for Ruby jobs I'd kind of be taking 2 steps back down in terms of what I can contribute.Frankly I'm not a fast learner, unfortunately. Although it's possible that I've convinced myself of that because I hate the Java ecosystem so much that my brain just doesn't want to absorb information about gradle and intellij configuration and java dependency management and so on.	aerovistae	12.605153	-6.976337	comment	4.0	14.0	1646883567	12.378695
30623785	I'll be honest, I'm worried too.  I'	"I'll be honest, I'm worried too.  I'm a fullstack dev, but I consider myself a decent rubyist.  I've been writing it for about 10 years and have spoken at rubyconf a few times.  All else being equal, I just like the language itself.The points others make here are true, there are a ton of ruby shops, and demand for someone with a couple years of rails experience is still quite high.But the issue is not where ruby is now, but where we see it in the long term.  My predicted timeline is something like:1. Right now, plenty of companies are still being founded on rails.  The demand for ruby devs well outstrips the supply.  I don't think it's the clear favorite anymore, though, even among trendy SF startups.
2. 5 years from now, far fewer companies will be being founded on ruby.  It'll be rare, a"	fishtoaster	12.7237625	-6.9636292	comment	4.0	15.0	1646893912	12.385887
30628663	I'm on the fence about this one. On 	I'm on the fence about this one. On the one hand I would love strong typing in JS.But the reason I never adopted TS is because one time I spent months converting Coffeescript back into JS once it fell out of favor. This was back when a bunch of Ruby developers decided that JS should look like Ruby.If I'm writing Javascript, I'm writing Javascript, not something that pretends to be something else.	danielvaughn	12.341111	-6.7454777	comment	4.0	12.0	1646929373	-10.454441
30671384	Oh, so all you need is somebody who 	Oh, so all you need is somebody who can see into the future? Sorry mate, these guys are already busy otherwise as stock brokers.I've tried to come to terms with TypeScript during the last two months, but I am sorry, it is still too messy and does not give me enough guarantees about my code.What I would love is a Swift to TypeScript / JavaScript compiler.	auggierose	12.357766	-6.7900124	comment	4.0	29.0	1647259294	-10.421701
30679672	Two quibbles.Quibble the first: a la	"Two quibbles.Quibble the first: a language is not a framework. Python and Ruby may be ""opinionated"" in some sense, but they are not opinionated frameworks. The article's complaints about Ruby in particular...> It dives deeply into the concept of convention-over-configuration, and in doing so, creates a lot of behind the scenes magic that requires a lot of pre-knowledge before using or understanding it well; the true knowledge of its syntax and its behaviors feels more tribalistic to a set of esoteric elders who have taken the time to read the documentation, but is not necessarily friendly to casual beginners....are very clearly complaints about Rails. There's a waggish nod to that (""one could say it has gone off the rails""), but convention over configuration and behind-the-scenes magic are"	chipotle_coyote	12.615355	-7.0167627	comment	4.0	21.0	1647298984	12.366057
30699482	Why would I ever be inclined to use 	Why would I ever be inclined to use PHP again? It’s only okay for web servers, but with a language like Go or Python I can do a lot more with them.PHP was an utter mess. Has it changed? I don’t care. It broke my trust and I’ve moved onto languages that are more thoughtful and general purpose. Returning to PHP would feel like returning to an abusive relationship	mountainriver	12.757507	-6.6522455	comment	4.0	14.0	1647441985	10.337157
16198601	The rumours of Ember's demise are gr	The rumours of Ember's demise are greatly exaggerated.I have yet to hear of people making the same amount in any other framework. Seniors are making $200k to $500k in remote positions (the people I know live in Toronto, but they could be anywhere).It is hard to learn, and I'm far from an expert, but the highest I've heard another JS developer who knew both Angular and React completely and he was responsible for migrating a company from one to the other and he was just starting to get into that range.Large SPA JS applications are easier to structure in Ember because there are so many best practices. The problem with Ember is the learning curve because it doesn't usually let you take shortcuts.	3pt14159	13.103406	-6.4381447	comment	4.0	22.0	1516551925	-15.51439
16203692	> As for compiler errors not helping	> As for compiler errors not helping you understand the problem, I have yet to encounter a compiler that does that.Not very mainstream, but take a loot at elm's compiler errors [1]. They worked hard in this direction, and the result is both helpful and beautiful.You can try loading up any of the examples in the online editor [2] and introducing a random bug, just to see how the compiler <del>barks</del> tries to gently teach you.[1] http://elm-lang.org/blog/compiler-errors-for-humans[2] http://elm-lang.org/examples	kilburn	12.980379	-7.683923	comment	4.0	13.0	1516621904	-12.751655
16209228	Wow this is cool. Does it take advan	Wow this is cool. Does it take advantage of Erlang's distributed networking/nodes feature?	Exuma	12.555133	-7.5143595	comment	4.0	15.0	1516664142	12.910015
16214996	A History of the Erlang VM (2011) [p	A History of the Erlang VM (2011) [pdf]	Tomte	12.55063	-7.514783	story	4.0	104.0	1516726355	12.901434
16219720	Until I can perform runtime define_m	Until I can perform runtime define_method calls and dynamically construct classes, it doesn't matter what Crystal does. It's fundamentally antithetical to my needs. (JavaScript isn't, but JavaScript is kind of clunky.)I have Kotlin, C#, C++, and Rust if I need static typing. Ruby is for when I don't.	eropple	12.581064	-7.2480516	comment	4.0	29.0	1516759060	-11.234484
16260547	Polymer is my favourite front end fr	Polymer is my favourite front end framework. I hope it doesn't start forcing developers to use TypeScript because then I'd have to stop using Polymer.TypeScript is not suitable for building the vast majority of web UIs; it just makes things way more complicated (with the added build step, source-mapping issues, missing type definitions, outdated type definitions...) and adds no value beyond improved code completion and compiler warnings (and those two are conveniences at best).Web applications are centred around APIs. APIs use JSON... JSON doesn't have types; so already there is an obvious impedance mismatch!It makes no sense at all whatsoever that the front end logic should be more strict than the API!As far as the front end is concerned, the API is the one source of truth; so unless you'	jondubois	12.442269	-6.6864944	comment	4.0	23.0	1517259369	-10.450436
16277620	TypeScript is a great improvement ov	TypeScript is a great improvement over JS, still held back by the horrible state of the JS module system in browsers. You write your code and it does what you want, then you spend a month figuring out amd vs esnext vs systemjs and Babel vs browserify vs requireJS vs webpack vs god knows what else.And then when you find the solution that works.. two weeks later it is deprecated, the docs are gone, there is no clear migration path, and there are only conflicting blog posts full of misinformation by people that only know what worked for them and don’t actually understand what it is that their steps actually do or how they work.(Yes, as you can tell I did not start off life as a JS web developer. TypeScript made the development part palatable to me, but the deployment remains a nightmare as fa	ComputerGuru	12.399442	-6.5229015	comment	4.0	34.0	1517433471	-10.452336
16282726	I'll say PHP because it's so underra	I'll say PHP because it's so underrated that I'm somewhat afraid to mention it here.It's far from the most sane language I've ever used, and as much as I love it, I'll admit there are parts of the syntax that straight up hurt my soul. Yet, despite all the drawbacks, if I need to write something fast, PHP and a micro-framework (I like Slim) is always my first choice.	hluska	12.694728	-6.6474247	comment	4.0	12.0	1517500396	10.300564
16291227	A first naïve look at Truffle Ruby	A first naïve look at Truffle Ruby	thibaut_barrere	12.5804	-7.059069	story	4.0	118.0	1517585268	-1.2078847
16304221	So you start with PHP, and you keep 	So you start with PHP, and you keep adding hacks on top of hacks, until you realise it's hopeless. But you're too invested, so you create a new language that is kind of compatible, and a JIT for good measure. Of course, I hope you got really successful, because you'll need serious engineering talent and money.No language/tech stack is going to ensure success, or have no challenges. But learning from the past is not a weakness.	guitarbill	12.721154	-6.6356597	comment	4.0	12.0	1517771051	10.37244
16342883	“Skylight is a smart profiler for Ru	“Skylight is a smart profiler for Ruby on Rails applications.”	avtar	12.71238	-6.988241	comment	4.0	19.0	1518202465	12.3612175
16362764	Coon – new tool for building Erlang 	Coon – new tool for building Erlang packages	pulisse	12.568756	-7.522049	story	4.0	9.0	1518473111	12.907166
16387577	In my opinion, this article puts too	"In my opinion, this article puts too much emphasis on reading, and too little emphasis on actually reasoning about programs in homoiconic languages like Prolog and Lisp, and due to this imbalance the conclusion is not sufficiently justified.It is true: Being able to ""read without parsing"" is definitely nice.But that is only a subset of those advantages that a homoiconic language gives you. An at least equally important advantage is due to the fact that programs in homoiconic languages are typically very easy to reason about by built-in mechanisms in that language.For example, Prolog programs are readily represented as Prolog terms, and can be easily reasoned about by built-in mechanisms such as unification.Since I regard it as a key advantage of homoiconic languages that their abstract syn"	zmonx	13.156099	-7.248095	comment	4.0	28.0	1518728340	-10.496998
16414411	There is so much to love about Elm. 	"There is so much to love about Elm.  It is a typed language, so it eliminates typing issues, like 1 + ""1"" = ""11"".  Its compiler is great.  The compiler catches almost everything and offers easy-to-read suggestions to fix your code when there is a problem.  Elm's compiler virtually eliminates runtime errors; at least I've never had a runtime error with Elm.I also like the debugger.  It allows you to easily capture your steps as you click around your application, save those steps into a file, and send that file to other developers, which allows them to run through your steps on their own machine; seeing Elm's output at each stage.  It works like a ""steps to reproduce"" bug report, only automated, which makes finding and fixing difficult bugs easy.There is a lot of good documentation for Elm a"	innocentoldguy	12.992308	-7.681677	comment	4.0	19.0	1519063163	-12.755545
16414453	While I think most of the points rai	While I think most of the points raised are subjective, the overall theme does make sense to me. Of late my toolbox has become:Ruby - for problems that are programmer bound - regular web servers / APIs, CRUD.Go - for problems that are CPU / Memory bound - fast servers, proxies, APIs with lots of long I/O waits or high RPS requirements.Java - for problems that require modelling - logistics systems, data structures, algorithm heavy or design heavy problemsJS/React - for UI	sudhirj	12.515784	-6.9562173	comment	4.0	24.0	1519063511	12.28163
16415065	I suspect the missing connection is 	I suspect the missing connection is this: if you encounter a conceptual/technical bug with a popular language/framework, you can find a solution online quickly.If you write buggy code (especially bugs that don't reveal themselves until live in production) it involves much, much more pain to fix those.Elm helps significantly with the latter.	macintux	13.000126	-7.689658	comment	4.0	15.0	1519068594	-12.758748
16467965	Each generation invents their own to	Each generation invents their own tools. The cycle has reached FrontPage Server Side Includes. Soon the new PHP will emerge.	clon	12.770455	-6.602426	comment	4.0	12.0	1519671749	10.325075
16473343	Most of my projects are Rails-based,	Most of my projects are Rails-based, and I tend to use DO [0], and have just discovered Hatchbox [1] to deploy. Super easy for side-projects to get started and deployed. Taken deploying side projects from days to minutes.[0] https://www.digitalocean.com/[1] https://www.hatchbox.io/	wastedhours	12.745112	-6.88506	comment	4.0	12.0	1519739903	12.346744
16473505	One thing formal state machines make	One thing formal state machines make difficult is component reuse.Let's say you have a music playback control component you wish to reuse across a feature rich player, as well as a mini playback controller.You COULD just use the full state machine to power the mini player, but most of the transitions would be unused. It would be unclear to the next maintainer which aspects were needed for each use case, thus making the state machine brittle.Instead, you can write an independent playback progress/state class, and reuse it in both players via composition and proper layering of functionality.By hiding the playback state from the rest of the player and exposing control of it's state via an interface, you've gained functional reuse.Reapply the same pattern for all components of your players and	cbetti	12.331349	-6.554173	comment	4.0	14.0	1519741121	8.615219
16510779	I always had a question I wanted to 	"I always had a question I wanted to ask an experienced Django dev. After trying this framework for a couple of hobby projects (I'm a client game developer primarily and never worked on ""serious"" web project), I kinda got the impression that it's architecture is created for two main user roles: admins who create most of the content and have marvelous admin forms in front of them to input all the data, and users, who mostly consume the content and only occasionally input some data. When I tried to create complex input forms with a lot of complicated, relational data that users would be able to input and modify, it felt so much harder than exposing the data models in the admin panel — it really felt that this wasn't the use case this framework was designed for.Did I get the right impression, "	golergka	12.866051	-6.4873023	comment	4.0	12.0	1520102452	10.0548115
16520511	Elm, Elixir, and Phoenix: Reflecting	Elm, Elixir, and Phoenix: Reflecting on a Functional Full-Stack Project	deathtrader666	12.956378	-7.6440206	story	4.0	135.0	1520252449	-12.771848
16569031	I'm a beginner, so by all means corr	I'm a beginner, so by all means correct me if I'm wrong, but as I understand BEAM is relatively good when it comes to 'soft realtime', and especially when 'latency' is a concern (in part due to per-process GC?).Am I correct in thinking that this would be pretty okay for most games, AAA or not? Would an FPS be possible (quick updates, small messages)? Or a World Of Warcraft or Sea of Thieves style game with many actors that need sort-of-realtime performance but don't rely on it entirely?I've been looking into creating a game, and I'm also learning Elixir, so I'm curious what would be realistic when combining both.	mercer	12.562864	-7.3976846	comment	4.0	14.0	1520870629	12.813195
16583853	Mine too. Until Erlang, and now Ada.	Mine too. Until Erlang, and now Ada. I'm building myself a harem.	dozzie	12.570267	-7.5266647	comment	4.0	18.0	1521026115	12.9366865
16628987	Javascript and Python are very popul	Javascript and Python are very popular dynamic languages, this doesn't make them good dynamic languages.In particular OOP is very much helped by static types.Clojure would a better example of a dynamic language that would not be improved by adding static typing. Namespaces, functions and immutable data (as well as pervasive use of data instead of wrapping it in classes) lessens the downsides I bump into continuously when doing javascript development.	joncampbelldev	12.376882	-7.6606927	comment	4.0	36.0	1521557106	-10.981736
16630757	Back in about 1988, Bruce Porter, on	"Back in about 1988, Bruce Porter, one of my AI professors, described the problem statement of the Fifth Generation project as, ""a list of important research topics like natural language understanding, speech recognition, and so forth, and the statement, 'Therefore we will build a parallel Prolog machine.'"" He wasn't a fan.On the other hand, according to the tech press at the time, the Japanese were going to eat our lunch. Put us all out of work. Rule the world with an iron fist."	mcguire	13.133871	-7.2886767	comment	4.0	32.0	1521567608	-12.4834175
16644840	Still looking for an alternative sel	Still looking for an alternative self-updating Rolodex.	dleslie	12.616766	-6.7260556	comment	4.0	24.0	1521683834	12.156844
16664590	Ask HN: Which back end framework wou	Ask HN: Which back end framework would you choose for a startup in 2018?	2_listerine_pls	12.589901	-6.5397716	story	4.0	1.0	1521861071	10.2275915
16717653	It's troubling that PHP gets so much	It's troubling that PHP gets so much shit because it has an extensive if clumsy standard library, where node gets a free pass because you can get whatever doesn't exist from NPM, welcoming any number of security vulnerabilities into applications.I recently cleaned my NPM cache at work after 9 months, it was 6GB. ES6 is a massive improvement, but Node's standard library is still lacking and the sheer amount of tooling needed to be effective and up to date is too much.	arenaninja	12.5994425	-6.494908	comment	4.0	16.0	1522428281	10.2905445
16726058	I haven't used PHP for almost a deca	"I haven't used PHP for almost a decade, but I agree with the sentiment of this article.I built a web app back in 2009 in PHP and didn't use Code Igniter or Zend (basically the only two frameworks back then), opting to do it all by hand. And it ended up being a really valuable and formative experience. No matter what language I use, I understand how a web application really ""fits together"" under the hood and I think there's value there.As a side-note, compared to Node.js or Rust or what-have-you, PHP just seems needlessly verbose."	dvt	12.753066	-6.6249843	comment	4.0	14.0	1522544053	10.301594
16726423	I get downvoted when I say anything 	I get downvoted when I say anything remotely negative about PHP, in threads devoted to PHP, but perhaps my thoughts will make sense if I emphasize that I used to love PHP. It was my first real language, and I built my first business around it. That was in the year 2000. That was in the era before modern package managers, when PHP's huge standard library was a tremendous benefit, because the alternative meant using something like Perl, where you had to download every module from CPAN and cobble it together yourself. PHP was a dream compared to that.But 18 years have passed. Every language now has very good package managers. There is an abundance of dynamic languages, most of whom are more consistent than PHP.I'm not going to waste your time with a long PHP rant. I just hope that everyone is	lkrubner	12.754954	-6.6446238	comment	4.0	32.0	1522550902	10.351852
16726708	Laravel has been around since 2011. 	Laravel has been around since 2011. PHP 7 is slow and continues to perform badly in all reasonably done comparisons:https://www.techempower.com/benchmarks/But even if both of your points were true, the point is to look at what is happening in other languages and frameworks. Every day you spend learning about PHP is a day that you are not learning about the languages that are really moving the industry forward to interesting new places. Ask yourself, honestly, how many interesting new ideas will you learn from studying PHP, versus the more versatile (as in more platforms, and also the frontend) languages such as Javascript/Node, or the more innovative such as Go or Rust or Clojure or R or Julia? And I'm not even mentioning the more experimental languages, such as Shen or Lux.	lkrubner	12.783443	-6.659343	comment	4.0	25.0	1522556594	10.335974
16732344	> Now it is easier to develop MVP we	> Now it is easier to develop MVP web app using Spring Boot than Rails.This caught my eye. I have never used a Java framework, but use Rails daily. Does Spring Boot do Rails things such as migrations? Is there a healthy plugin ecosystems? (whatever the Gem equivalent in Java is).	copperx	12.644372	-6.915219	comment	4.0	19.0	1522643359	-10.1575365
16750213	I tried Sails about 3-4 years ago. B	I tried Sails about 3-4 years ago. Basically, you're taking the good from Rails (MVP code generation, relations, convention over configuration) and puts it on JS, which unfortunately it's still a nightmare to develop CRUD apps with.Async is great for lots of things, but not for your entire app.If you want an async-first app, JS is probably a good choice. If you want CRUD, use Rails.	everdev	12.758697	-6.686344	comment	4.0	15.0	1522796314	12.301055
16764015	I did try to mention this before, wi	I did try to mention this before, with creating a Slack clone [0]. PHP and MySQL which is what this is written in are not very sexy but they're perfect for when you want the entire world to be able to use it.There's reasons why PHP has been so successful with WordPress and Facebook.[0]: https://news.ycombinator.com/item?id=16567271	icc97	12.809635	-6.5163255	comment	4.0	19.0	1522930133	3.0092006
16780836	Unsoundness is important because sou	"Unsoundness is important because soundness and expressiveness come at a trade-off.Here's some code which is syntactically legal in both TypeScript and Flow, but the languages disagree on whether a type error is present:  type T = { // Legal decl in Flow, illegal in TS
    x: number;
    [s: string]: boolean;
  };
  const m: T = { x: 1, xz: true };
  m['xz'.substr(0, 1)] = true;
  m.x.toFixed(); // Crashes

TypeScript is actually more sound than Flow in this example because it disallows the declaration of T in the first place. Flow allows this code and it fails due to a type error at runtime.Yet in JavaScript this is an extremely common pattern - an object bag where some known property keys have a certain type, but ""all the others"" have a different type. You can't represent this in a bolt-o"	RyanCavanaugh	12.400035	-6.811954	comment	4.0	14.0	1523111258	-10.476664
16813449	I'm a Rubyist. Why are Python users 	I'm a Rubyist. Why are Python users so doubled down on keeping on with Python 2? I can't imagine using Ruby 1.8.x at this point, and even older versions seem well outside the realm of consideration.	tibbon	12.413534	-6.9806213	comment	4.0	16.0	1523468098	12.294591
16841177	>>Elixir depends on the decades of d	">>Elixir depends on the decades of development behind the Erlang VM and in many ways is just syntactic sugar on top of Erlang/OTPI think calling Elixir ""just syntactic sugar"" is a gross and unfair oversimplification. While friendly syntax is one of its welcoming qualities, Elixir is its own language. It doesn't ""transpile"" into Erlang. It compiles down to bytecode."	enraged_camel	12.63003	-7.4805984	comment	4.0	13.0	1523765787	12.928353
16890679	Frontend developers at our company v	Frontend developers at our company vetoed TypeScript for being too difficult to comprehend for JS devs.	tzahola	12.37347	-6.6834064	comment	4.0	21.0	1524302718	-10.456663
16900141	The TypeScript comment is wrong, the	"The TypeScript comment is wrong, the author needs to use a const enum:
https://www.typescriptlang.org/docs/handbook/enums.html#cons...Then it generates code that's better than Flow. It's not as aggressive as Reason for sure, but it's still pretty good.<a href=""https://www.typescriptlang.org/play/#src=const%20enum%20ScreenType%20%7B%0D%0A%20%20%20%20LoadingScreen%2C%0D%0A%20%20%20%20CodeEntryScreen%2C%0D%0A%20%20%20%20SuccessScreen%2C%0D%0A%20%20%20%20FailureScreen%2C%0D%0A%7D%0D%0A%0D%0Aconst%20impossible%20%3D%20(x%3A%20never)%3A%20never%20%3D%3E%20%7B%0D%0A%20%20throw%20new%20Error('This%20case%20is%20impossible.')%3B%0D%0A%7D%0D%0A%0D%0Aconst%20needsCancelButton%20%3D%20(screen%3A%20ScreenType)%3A%20boolean%20%3D%3E%20%7B%0D%0A%20%20switch%20(screen)%20%7B%0D%0A%20%20%20%20case%20Screen"	esprehn	12.450871	-6.7242355	comment	4.0	13.0	1524451637	-10.529234
16910737	In my personal experience, people us	In my personal experience, people use PHP because it is the only thing that they were taught. NOT because they have considered options and have consciously decided to settle on PHP.	helpme420	12.769672	-6.6461487	comment	4.0	14.0	1524556444	10.313277
16911271	> It’s not prejudice or signaling, i	> It’s not prejudice or signaling, it’s objectively deficient in ways that haven’t been acceptable in decades.I don't want to start a useless debate or anything like that, so don't take this in the wrong way, but I am genuinely curious of what specific problems you see in PHP and what are the specific issues with the language.I can't think of many things that are so bad with it, except the inconsistency in function naming and parameter orders (stuff like `str_pos`, `substr`) and a relatively unreliable SoapClient implementation; I am genuinely interested in seeing what other people think are deficiencies in PHP.Again, I have to stress I am not being defensive nor offensive, I am just curious on other perspectives in regards to the shortcomings of PHP.	RutZap	12.755937	-6.653704	comment	4.0	12.0	1524564243	10.319454
16936348	Love Flask in theory.  My biggest co	Love Flask in theory.  My biggest complaint was trying to do user management with it.  Flask-Security was good, but the developer skipped town a few years ago.  Did they come back?  :DBasically you are left to your own devices, which sounds great, but user+auth is pretty fundamental to be left to a random absentee third-party in my opinion.	mixmastamyk	12.752293	-6.556896	comment	4.0	17.0	1524780570	10.042405
16938316	My employer made me switch from Flas	My employer made me switch from Flask to Django providing non-scalability reason.  I asked around on a few online forums and they told me that flask has no such issues. There was an article where somebody from DISQUS explained how they were able to use flask in production without much hassel and there's no reason to switch to django. My employer told me to not use flask as it is not production grade. The problem was to implement a few web APIs. I switched, reluctantly. I am still not convinced though, given that I have very recently started using Flask/Django, it may come to me at a later time.	abhishekjha	12.766075	-6.5560207	comment	4.0	17.0	1524800593	10.048855
16940064	Artificial Intelligence with Erlang:	Artificial Intelligence with Erlang: The Domain of Relatives (2007)	jxub	12.559893	-7.522675	story	4.0	96.0	1524830258	12.926025
16952516	Just a thought experiment...Would th	Just a thought experiment...Would this allow for full stack ruby apps?Writing a client side router and controllers in Ruby on Rails compiled to web assembly?If you could just toggle in production.rb if you want your routing to be client side or server side and the framework could transparently manage that for you.	hhw3h	12.799266	-6.921839	comment	4.0	17.0	1525017395	12.320488
16953007	Rubies magic evaporated when I reali	"Rubies magic evaporated when I realized that its logic is unintuitive / broken:```
puts true and not true  
>>> true  
x = true and false  
>>> true  
if 0; puts 'true';end
```breaking backwards compatibility with every rails upgrade didn't help.Similar bad behaviour in kotlin"	singularity2001	12.50595	-7.0751863	comment	4.0	16.0	1525023789	12.397769
16969142	Ruby’s Rack Push: Decoupling the rea	Ruby’s Rack Push: Decoupling the real-time web application from the web	ksec	12.674916	-6.8519745	story	4.0	140.0	1525195517	12.34511
17012329	Some background about Core Erlang:ht	Some background about Core Erlang:https://8thlight.com/blog/kofi-gumbs/2017/05/02/core-erlang....Core Erlang is an intermediary language targeting 'BEAM', the Erlang virtual machine.	jacquesm	12.535898	-7.505165	comment	4.0	41.0	1525697923	12.89253
17012597	That reference helps the original li	"That reference helps the original link make a lot more sense.I've spent about 2.5 years of my career writing Erlang code. It's statements like ""Core Erlang is less complicated than Erlang"" that always trouble me about the Erlang community - Core Erlang is less complicated for compilers, not for humans. In this first in a series of blog posts about Core Erlang, there is no context given around what it is or why anyone should care.Erlang is a great language and environment, but it really struggles with the marketing aspects of a platform, that is, how to make it accessible to humans."	jkingsbery	12.566338	-7.5169706	comment	4.0	30.0	1525700449	12.921515
17012934	I started playing around with Elixir	I started playing around with Elixir a while back and find it really fascinating as a language.I've been a Scala dev for years and I gradually learned FP by moving from Java to Scala, but in the case of Elixir, I've only barely looked at some Erlang previously.Would you say Elixir has done a better marketing job of being accessible to developers?	djsumdog	12.675683	-7.463355	comment	4.0	13.0	1525702817	12.926617
17016005	WordPress and other large, popular p	WordPress and other large, popular projects got where they were by meeting their users where the users already are.If I have to convince my webhost to install PHP 7 or I can't run your software, I'm not going to run your software. If I have to convince my webhost to install PHP 7 or I can't upgrade your software, I'm going to run the shitty old version until it gets hacked into a distribution site and the bandwidth use gets high enough for me to notice and turn the whole site off.I'm not familiar enough with PHP these days to know, but if upgrading to PHP 7 is going to break the shitty old version, that's a problem too. (I think PHP has tended to be pretty good about not breaking things on upgrades though)	toast0	12.780861	-6.6473703	comment	4.0	12.0	1525723311	10.325455
17015829	The fact that WordPress and other la	The fact that WordPress and other large projects still support PHP 5.* is one of the major things holding PHP back. Supporting PHP 5.* in 2018 is like supporting IE8 in 2018.	debacle	12.78046	-6.6494546	comment	4.0	29.0	1525722185	10.330825
17080439	Not really, Typescript is mostly a s	"Not really, Typescript is mostly a superset of ES2015 and is compatible syntax wise.It has almost no new ""features"" (apart from enums and namespaces, I think)  and only contains a typing + visibility system and related syntax on top.The only part that is not ES2015 in the given code example is the ' as ConsignmentSetup' cast."	the_duke	12.378121	-6.7809916	comment	4.0	14.0	1526453049	5.813636
17094192	That is happening because you are ru	"That is happening because you are running PHP 7.2.  In that file $this->extra_headers is initialized as non-countable NULL.  Basically phpBB needs to update their code base to support newer versions of PHP.  A quick fix would be to change ""var ... $extra_headers"" at the top of the file to ""protected $extra_headers = [];""."	Washuu	12.727198	-6.6016307	comment	4.0	16.0	1526582603	10.354495
17115933	We've been using Elixir almost exclu	We've been using Elixir almost exclusively for a couple years, and I can't speak highly enough about it. There are clearly problems where beam is ill-suited, but otherwise, I almost feel religious about it.I've worked for many years with many other languages and runtimes, but beam, OTP and Elixir (and the synergy between them) are better tools. As a foundation, message passing and isolation are the only realistic weapons I've seen against most common causes of technical debt (coupling). It isn't a silver bullet, but it  tries hard to help you. And, importantly, it's approachable.Another way to look at it is that it delivers many of the same benefits of SOA/microservices, without the significant infrastructure/deploy/devops overhead.	latch	12.634983	-7.4548783	comment	4.0	28.0	1526872441	12.891062
17115446	That is why I love elixir, the power	That is why I love elixir, the power of erlang with a better syntax. Of course elixir is not perfect, but it is really good at making erlang better.	kuon	12.62654	-7.4805074	comment	4.0	16.0	1526862129	12.927852
17121125	Thank you very much for the publicit	"Thank you very much for the publicity, I greatly appreciate it!This book has been discussed on HN about one year ago:https://news.ycombinator.com/item?id=14045987Since then, I have added the following new chapters:Prolog Business Cases:
https://www.metalevel.at/prolog/businessSorting and Searching:
https://www.metalevel.at/prolog/sortingCryptography with Prolog:
https://www.metalevel.at/prolog/cryptographyEngineering Aspects:
https://www.metalevel.at/prolog/engineeringArtificial Intelligence with Prolog:
https://www.metale"	triska	13.149048	-7.297208	comment	4.0	52.0	1526931289	-12.49239
17121274	Very nice book. Do you know what com	Very nice book. Do you know what companies are using prolog commercially?	steve19	13.15258	-7.297198	comment	4.0	20.0	1526932380	-12.4931555
17122538	One of the coolest things I've seen 	"One of the coolest things I've seen is to use Prolog with CLP(FD) to solve the 7-11 problem. The problem basically says the sum of the prices of four items is $7.11, and the product is $7.11 too (no rounding); find the prices of these four items.This can be solved in two lines of code that gives the (unique) solution in a second. Not even my expensive Mathematica can do this!    ?- use_module(library(clpfd)).
    true.
    
    ?- Vs = [A,B,C,D], Vs ins 1..711, A * B * C * D #= 711000000, A + B + C + D #= 711, A #>= B, B #>= C, C #>= D, labeling([ff, down], Vs).
    Vs = [316, 150, 125, 120],
    A = 316,
    B = 150,
    C = 125,
    D = 120 ;
    false.

Another great thing Prolog is good at is type inference. After all, type inference, in its simplest form, is just syntax-directed const"	kccqzy	13.153995	-7.298254	comment	4.0	24.0	1526943496	5.898053
17126387	I have a vastly different experience	"I have a vastly different experience:
At CurrySoftware we used style-elements[1] to build a internal frontent for a client. 
The whole project only contains 15 lines of HTML that sets up the elm-app. Zero CSS or other HTML.Try it out. IMO it changes everything about frontend development.[1]: http://package.elm-lang.org/packages/mdgriffith/style-elemen..."	jdemler	12.98719	-7.658363	comment	4.0	16.0	1527001523	-12.7886505
17128870	seems the article ends up with what 	seems the article ends up with what was first done decades ago in PHP - separation of presentation and business logic.  Btw i don't understand all this animosity toward PHP, especially given that pretty much all the modern web development is basically PHP-like, in spirit if not in actual implementation.	trhway	12.766757	-6.636365	comment	4.0	17.0	1527018749	10.346443
17144883	ReasonML has more potential. Aside f	ReasonML has more potential. Aside from its excellent type system (one of the best), it can also compile to native code. This has several benefits:- Frontend: Your tools are fast. The ReasonML-to-JS compiler is already an order of magnitude faster that TypeScript, etc. Fastpack is a native bundler in the works that aims to bundle your project in under a second (and faster for incremental builds).- Mobile & Desktop: Some are experimenting right now with writing a version of React in pure Reason that compiles to native code, bypassing the JavaScript runtime entirely.- Backend: You'll be able to use the Node.js ecosystem but compile certain modules to native code when you need critical performance.Edit: I should add, the Node.js backend story is currently the least developed part of the ecosy	simplify	12.457835	-7.0860915	comment	4.0	14.0	1527175417	10.189397
17150561	Yes, well, that's a nice idea in the	Yes, well, that's a nice idea in theory. In practice, you could get over 10x (sometimes 100x) the rps off a box running the new, JVM-based services vs their Rails-equivalents. Orders of magnitude probably matter a little less when you're well-funded and have hundreds of servers, but when you are thinking about trying to go public and your bottom line is being scrutinized and you have 10's of thousands of servers, it starts to matter.	sulam	12.768906	-6.9021277	comment	4.0	26.0	1527221790	-8.141468
17218796	"""Controlled"" is the key word here. I"	"""Controlled"" is the key word here. It means the network controller is running erlang. The actual switches and routers run C."	dingo_bat	12.555978	-7.5003157	comment	4.0	23.0	1528019594	12.893356
17218891	>No cutting edge incomplete framewor	>No cutting edge incomplete frameworksSo what, you rewrite a templating engine every time you want to make an application that outputs user data? Or are you reliant on making damn sure you always call htmlentities every time you echo something to prevent XSS? Are you sure you've not slipped up anywhere?What about CSRF? Do you write your own filtering mechanism every time you make a web app to check for the existence of a CSRF token in all state-altering (e.g. POST) requests?There are reasons people use frameworks. Security is one of them - I _love_ assessing apps which are written in plain PHP because they're almost always a trainwreck. You don't tend to see SQLi from devs who tend to use ORMs, nor do normally you see stuff like LFI if they're using a well-known templating engine.Can you w	lol768	12.752101	-6.486274	comment	4.0	18.0	1528021519	-0.28180712
17219403	Not an expert, nor to take anything 	Not an expert, nor to take anything from Erlang (was amazed at how robust RabbitMQ was first time I stress tested it) but fault tolerance seems to be a part of OTP.  To me, k8s ~ OTP, GO ~ Erlang, and Erlang syntax is a bit easier than GoLang, but might just be the way I was brought up.	anonymous_fun	12.551105	-7.4741325	comment	4.0	14.0	1528032400	-13.01918
17220743	Congratulations Ruby team! I'm excit	Congratulations Ruby team! I'm excited to hear about the performance improvements. It seems like JIT could be a huge win since calling a method requires checking all kinds of possibilities that are almost always not used, but might be. I would love to keep all the power & fun of Ruby without worrying so much about performance.Speaking of optimizing method calls: now that it's been a few years, I wonder what Ruby folks think about refinements. Are you using them? Are they helpful? Horrible?I remember reading from the JRuby folks that refinements would make Ruby method calls slower---and not just refined calls, but all method calls [1], although it sounds like that changed some before they were released [2]. It seems like people stopped talking about this after they came out, so I'm wonderin	pjungwir	12.549826	-7.0518317	comment	4.0	15.0	1528048606	12.375255
17222099	ok this is going to sound snarky but	ok this is going to sound snarky but it's an honest question: Why not just use Crystal[1]?It's basically just compiled ruby with static types, and it can infer types correctly in most cases without you explicitly noting which they are.The best argument for this (instead of Crystal) is keeping access to ruby gems.[1]: https://crystal-lang.org/	masukomi	12.606046	-7.257089	comment	4.0	20.0	1528060274	-11.222651
17224635	With Ruby getting an AST, and potent	With Ruby getting an AST, and potentially a type system in the future, I think that ruby 3 could lend itself to bring transpiled to crystal relatively easily, depending on exactly how much type information there is, how difficult / possible it is to correlate that with the AST.Scala 3 is doing the typed AST thing, so hell, why not?	qop	12.620344	-7.252795	comment	4.0	25.0	1528086442	-11.2366085
17266664	I always hated the DI fervor in PHP,	I always hated the DI fervor in PHP, like it solves all problems. You get such gems from phptherightway as> We can demonstrate the concept with a simple, yet naive example.> Here we have a Database class that requires an adapter to speak to the database.It tries so hard to be java, which seems backward.	TooBrokeToBeg	12.731689	-6.6392198	comment	4.0	14.0	1528473366	10.3117895
17271511	A generalist software engineer can l	A generalist software engineer can learn ${buzzword}	lambdabit	12.575162	-7.013358	story	4.0	18.0	1528517829	1.6862879
22785250	I'm actually working on one. I don't	"I'm actually working on one. I don't know what will come out of it, but it's an interesting endeavor. As soon as it's shareable I will share it on Github.I'm basically trying to do a superset of typescript where you create elements so:  const root = c({
    el: 'div',
    children: [
      `hello, ${store.user.name}`
    ],
    attr: {
      class: 'bold smart',
      id: 'abc',
      bla: true,
    },
    evts: {
      click: () => {
        console.log(""Clicked"")
      }
    }
  });

And store store.user.name is ""magically"" reactive.Was that what you meant?"	Trufa	12.631969	-6.53271	comment	4.0	19.0	1586089661	8.399584
22786419	Exploring Elixir & Phoenix. Solved s	Exploring Elixir & Phoenix. Solved some AOC & exercism problems with it, and wrote a BF compiler. So far, enjoying every bit of it. The language itself is beautiful! Codes are available on my Github[1] account :).[1] https://github.com/wasi0013/	wasi0013	12.453391	-7.302492	comment	4.0	15.0	1586103245	12.842589
22798287	I actually find Erlangs syntax a bre	I actually find Erlangs syntax a breath of fresh air. Coming from Python, this may sound odd, but there's something soothing about it.I much prefer Erlangs syntax to Go, for example. I also much prefer Erlangs syntax to Elixir; I never liked ruby either, so there's perhaps no surprise there.	callamdelaney	12.5815115	-7.4890103	comment	4.0	14.0	1586210096	12.91271
22800830	That is unlikely to happen. Crystal 	That is unlikely to happen. Crystal has no corporate backing, it has no distinguishing features (in comparison to other, more popular languages), and most of all, it has no Rails.	oweiler	12.634047	-7.2754245	comment	4.0	15.0	1586241094	-11.237213
22816466	Porting to a typed language helped p	Porting to a typed language helped prevent type errors in a typeless language. Who woulda thunk?I am currently also working on a project written in a JS backend that's slowly porting to TS, for the same reasons, but I still would prefer to go back to C# and take it a level further. I just don't enjoy the TypeScript language all that much.	shortstuffsushi	12.332196	-6.867744	comment	4.0	77.0	1586376080	-10.403095
22817666	I can't imagine not using class-tran	"I can't imagine not using class-transformer[0] or class-validator[1] in any TypeScript project that deals with external/third-party APIs, remote or not.[0] https://www.npmjs.com/package/class-transformer
[1] https://www.npmjs.com/package/class-validator"	TheSpiciestDev	12.330744	-6.8761287	comment	4.0	13.0	1586383285	-10.420418
22816780	Nowadays, ontology-management system	Nowadays, ontology-management systems like Protégé and SPARQL can more or less solve all problems prolog can solve, while providing higher-level formalisms and with the guarantee your query will terminate.	sacado2	13.162668	-7.178924	comment	4.0	13.0	1586378041	-12.4602375
22818725	Some coming features of Scryer Prolo	Some coming features of Scryer Prolog for those interested:-  Automatic detection and compilation of partial strings-  Streams, including sockets-  Garbage collection in anticipation of very fast yet logically pure I/O-  Improvements to the instruction dispatch loop (many opportunities for enhancement there, probably a good place to start for a beginning contributor)In the past few months, we've added delimited continuations, tabling, partial strings, and Markus' CLP(B), CLP(ℤ) and format libraries. For a hobbyist project I'd say we're moving at a fairly quick pace!Longer term, we're interested in:-  JIT compilation to native code (Cranelift seems a good candidate?)-  Low-level integration with Common Lisp environmentsI'd love to have system-level contributors, although library contributio	mthom	13.127061	-7.298768	comment	4.0	18.0	1586392839	-12.483034
22818867	Is there a reason why anyone would c	Is there a reason why anyone would choose prolog today instead of a library? Like racklog [https://docs.racket-lang.org/racklog/]. All the benefits of prolog, with none of the cost of using a new language and integrating it into your project.	smabie	13.14809	-7.297108	comment	4.0	14.0	1586394185	-12.482713
22822072	Seems like you could use this to bui	Seems like you could use this to build a chain of platforms for the hell of it.Prolog in Elixir in Python in Scheme...	macintux	13.126971	-7.288495	comment	4.0	16.0	1586437157	-12.471937
22822528	this is, at least, consistent with m	this is, at least, consistent with my experience using elm on a side project.   Dropped elm like a hot potato when I hit that wall.frustrating, too, because I was really enjoying the language, and everything about it up to that point.  The tooling support for Elm is REALLY solid compared to some other functional compile-to-js languages out there.If anyone is looking for a good functional compile-to-js language, I would suggest taking a look at ReasonML or possibly ClojureScript.  Personally, I've just been using TypeScript written in a functional way, and it serves my needs at this point.	holtalanm	12.908262	-7.6720405	comment	4.0	24.0	1586440366	-12.715445
22822667	I've been working in Elm for a few y	"I've been working in Elm for a few years, and I feel like I can answer some of the questions.0.19 introduced a new restriction on Native code (javascript), previously you could compile kernel code in your own projects, now you can't. You've never been able to publish a package using native code to the package site (only packages under the elm or elm-explorations github namespace can).If you feel strongly about it there are ways around it, forking the compiler, or giving your project a fake ""elm/whatever"" name so that the compiler will build it, there is also a set of shell scripts on github that allows you to get around the restrictions.  I've used it before to make some tooling to track virtual-dom performance.The biggest miss in the post in my view is not looking more at using Custom Ele"	antew	12.992038	-7.679566	comment	4.0	13.0	1586441374	-12.751033
22823021	I‘m not sure why this hasn’t been me	I‘m not sure why this hasn’t been mentioned by anyone: If you’re unhappy with Elm‘s constraints the obvious solution is to switch to PureScript (purescript.org). It’s basically are more powerful Elm like language with a great FFI and absolutely no constraints how to work with JavaScript. There are also a lot of compatibility packages to provide functions and workflows from the Elm ecosystem.	adius	12.965256	-7.669304	comment	4.0	22.0	1586443591	-12.751874
22823089	The learning curve to PureScript is 	The learning curve to PureScript is way higher than Elm. Is that not that obvious?	christiansakai	12.960434	-7.6727257	comment	4.0	18.0	1586443948	-12.740681
22825677	I fully agree with everything listed	"I fully agree with everything listed in this article. One point he alluded to (by mentioning the ""friendly"" exclamation marks) but didn't fully address is the Elm community's bizarre and infuriating language policing.You can't say the word ""guys"" in the Slack channel, or a bot will come and correct you, and tell you to say ""folks"" instead. And from then on, you'll notice the core team all use the word ""folks"" incessantly in their writing, it's like some weird cult. You'll notice it from the quotes of Evan and Richard in this article.The forbidden JavaScript FFI is called either ""kernel modules"" or ""native code"" despite it being neither. They also claim it's an ""implementation detail"" or ""flaw"" despite the fact that it's obviously not.There are more examples. If you go against any of these "	superdisk	12.928782	-7.6470933	comment	4.0	27.0	1586456988	-12.728799
22842300	Ruby is inherently much too slow to 	Ruby is inherently much too slow to have ever been a Swift. All of its dynamic runtime features give it a pretty low performance ceiling compared to a statically typed, compiled language with very limited runtime introspection/reflection.	RussianCow	12.606951	-7.040931	comment	4.0	26.0	1586620570	12.367175
22842811	>'TruffleRuby has high potential in 	>'TruffleRuby has high potential in speed, as it is nine times faster than CRuby on optcarrot, a NES emulator benchmark developed by the Ruby Core Team.'Really? But now the latest results are in apparently and judging by these benchmarks[0], I don't know what to make of this claim given how slow TruffleRuby is when compared to other similar languages or even Ruby. But its clear that its LLVM-based cousin Crystal still blows it out of the ocean in every benchmark if you're really talking about 'high performance'...[0] https://github.com/kostya/benchmarks	rvz	12.528678	-6.978038	comment	4.0	21.0	1586625856	-4.4243374
22857430	But the end users can't run the type	But the end users can't run the typescript, whereas they can run javascript directly. So, an external tool is required by the developer.A similar comparison would be shipping a program to end users, saying that 'no dependencies required', but instead of giving them a binary to run, you hand them a c++ file. I think everyone would agree that a C++ compiler is clearly a required dependency in that case.	joosters	12.390909	-6.7405047	comment	4.0	15.0	1586796358	-10.469899
22871845	> For building prototypes, Django is	> For building prototypes, Django is the fastest framework I've ever used.I worked with Django full time for about 6 years. It scales up and out pretty well, too.There was a peer comment about Rails. I'm a big fan of Rails, and Ruby is one of my favorite languages. But one thing I've noticed is the lack of magic inside the Django codebase vs. Rails' codebase. Spelunking in the codebases feels night and day different: I found Django very intuitive and Rails... less so. I think that was a combination of my lack of skill with Rails' internals, and the different in languages and communities. Python (and Django) try to follow the Zen of Python. Rails felt like every other method was monkey-patched and reduced to a single line or two. It was odd: I think the expressiveness of Ruby was actually a	wiremine	12.760035	-6.728415	comment	4.0	15.0	1586900561	10.380535
22885994	TL;DR: “TypeScript sucks because Jav	TL;DR: “TypeScript sucks because JavaScript sucks - namely buggy development file-watchers and npm - and some @types packages for more obscure npm packages are inadequate.”If that’s the worst people can levy at TypeScript I’d say it’s a pretty danged good language.What I hate about TypeScript is that it’s made me feel that all other programming languages’ type systems are inadequate in comparison (union and intersection types, Utility types, immutable and read-only views of existing objects, type guards for duck-typing, etc).	DaiPlusPlus	12.378887	-6.8175635	comment	4.0	24.0	1587010690	-10.441504
22897300	I've run into an issue where a Ruby 	I've run into an issue where a Ruby library is technically thread-safe but there is some C library code that blocks (i.e. connect with TinyTds). This makes it practically unusable with threading under special scenarios where your SQL servers are not guaranteed to be available.	ketamine__	12.632677	-6.9685016	comment	4.0	23.0	1587113207	12.342795
22898527	I haven't touched Ruby in a while, b	I haven't touched Ruby in a while, but are there any common multithreaded use cases? It seemed like the direction was to go multi-process for web workloads (E.g. with Unicorn).	NickGerleman	12.656144	-6.9712563	comment	4.0	19.0	1587127856	12.346224
22904079	"Java has servlets and Spring.
Go has"	"Java has servlets and Spring.
Go has net/http.
Ruby has Rails.
Python has Django and Flask.
C++ has ASIO and gRPC.Rust belongs with the above but it has...checks notes...actix-web which was run by one guy who ragequit and apparently no one else is capable of taking the reins."	zelly	12.442408	-6.6908174	comment	4.0	15.0	1587167294	10.09381
22906934	And, of course, you need multiple se	"And, of course, you need multiple separate components because Python/Flask has no central ""application"" concept,there are multiple, stateless processes.Had you got e.g. a Java app running with a multithread application server model, you could serve and process everything within a single process. No Celery, no Redis, no MQ.This doesn't mean that the above stack has no use. But, whenever picking a tech, you should understand the use case. The ""simpler"" Python/Flask solution has an increased complexity when the task at hand is not simple anymore."	alanfranz	12.6779785	-6.5476465	comment	4.0	17.0	1587208927	9.919955
22948232	Question to the former Rails devs ou	Question to the former Rails devs out there:We mostly see threads fawn over Elixir and Phoenix, have you experienced any downsides to switching? Anything you miss from Rails?I'm convinced to give it a try after that demo!	faizshah	12.768727	-7.1166983	comment	4.0	21.0	1587577742	12.651877
22954257	There are already transfer.sh [1] an	There are already transfer.sh [1] and other established projects (which I can’t recall right now) that serve this purpose. With more fine-grained control too. A golang compiled executable is also arguably more lightweight than a php app, whether the feature set/code is simpler or not.[1] https://github.com/dutchcoders/transfer.sh/Edit: Since more than one person has replied with non-self-hosted solutions, I should note that transfer.sh can be self-hosted, although you can also use the website itself.	oefrha	12.702988	-6.662402	comment	4.0	16.0	1587634816	10.2724085
22955386	There's no linter for hiring candida	There's no linter for hiring candidates. When you announce a PHP position, you are acknowledging that you'll get someone that doesn't care about maintainability, security, and whatever. Candidates will react accordingly.And yes, Javascript has similar problems, but much less severe.	marcosdumay	12.612309	-6.498677	comment	4.0	18.0	1587646547	10.320902
22992691	Does anyone have a book recommendati	Does anyone have a book recommendation (free or paid) that is modern and up-to-date, preferably regarding typescript, that talks about best practices and patterns for large-scale project design and code structure?For example, a book that could go into details of code practices at companies like Airbnb, Facebook, or Google.	chrischen	12.378592	-6.775709	comment	4.0	16.0	1587958911	-10.541399
22995315	Asynchronous programmingWith the add	Asynchronous programmingWith the addition of async to django core, I felt its time to finally learn the concept. I first took interest in async early last year when I re-read a medium post on Japronto; an async python web framework that claims to be faster than Go and Node.Since then, I've been on the lookout for introductory posts about async but all I see is snippets from the docs with little or no modifications and a lame (or maybe I'm too dumb) attempt at explaining it.I picked up multi threaded programming few weeks ago and I understand (correct me if I'm wrong) it does have similarities with asynchronous programming, but I just don't see where async fits in the puzzle.	bunya017	12.35335	-6.8138676	comment	4.0	12.0	1587991979	9.923158
23023530	Agree, except for that last part.At 	Agree, except for that last part.At this stage OP won't know which backend language/tech will be best suited to whichever idea ends up taking off.So, best to just use whichever is most popular (and with the best trajectory) since popularity leads to other advantages.  Choosing rails now, for example, would not make sense.	tomComb	12.765125	-6.7680225	comment	4.0	14.0	1588190690	12.325612
23077029	I started learning Ruby and Ruby on 	I started learning Ruby and Ruby on Rails in February, as a requirement of what would be my first job in industry (then COVID came and everyone got fired). I'm loving both so far, had previous experiences with Java/Spring and Python/Flask/Django, I like Ruby on Rails better. Convention over configuration. Mature and beautiful testing with RSpec. Beautiful Ruby syntax. Sane conventions. You can throw in Slim templating engine, which makes working with markup a delightful experience. Wonderful community, I could go on and on.I hope that RoR stays strong amidst the current React/SPA framework/Node fad.	Pmop	12.719777	-6.9237266	comment	4.0	31.0	1588659078	12.314746
23077641	For web backend, being able to ship 	For web backend, being able to ship a single binary, such as what Rust and Go can provide, is really nice. I don't see PHP as a more compelling solution than either of those languages.Scripting and command line automation is executed better by Python and Ruby, which excel for writing Unix scripts and tools.I do not see what the use case for PHP is in 2020.PHP has one of the most abhorrent language syntax designs this side of Perl, and the standard library is wildly inconsistent.I really wish PHP would just die. Continuing to drag it along like the dead carcass it is wastes so much human effort. The longer it exists, the longer we have to support it.	echelon	12.731515	-6.6561074	comment	4.0	24.0	1588665947	10.360399
23078067	so is PHP worth learning right now? 	so is PHP worth learning right now? and what is the job prospect looking like? if I study the language for the next few months what is the lickely scenario I will find a career in it.. I actually enjoy and like PHP unlike other people idk what it is about the languauge it looks fun and enjoyable to play with . Plus it's simple and easy opens doors to more complex languages later on down the road	leeshire	12.754527	-6.6452055	comment	4.0	14.0	1588670429	10.364137
23078184	I'd assume that Django and Ruby on R	I'd assume that Django and Ruby on Rails can't be that far off.	oblio	12.814934	-6.69738	comment	4.0	13.0	1588671681	10.28802
23078328	So I take it all the things in this 	"So I take it all the things in this article (https://eev.ee/blog/2012/04/09/php-a-fractal-of-bad-design/) are no longer relevant?For example ""foo""==TRUE, ""foo""==0 and TRUE !=0 are logically consistent now?Or json_encode no longer returns null for invalid input?"	Ygg2	12.813606	-6.6947227	comment	4.0	20.0	1588673246	10.495115
23078638	Most of the comments against PHP are	Most of the comments against PHP are from developers that wrote PHP<5.4 long time ago as their first or second language. PHP had a bad ecosystem with lots of bad practices being a norm.There are still some issues but considering the current state of language, frameworks, libraries, and the ecosystem, it's very practical and productive environment to build any project.I've been doing Typescript, Scala, and recently also Go in last few years. Scala and Go have decent language design and I'm a fan of both of them. But, when it comes to productivity and ecosystem they don't come anywhere close to PHP. If I was about to build my own web startup, I'd definitely build it with PHP because I'm sure I could launch it 10 times faster with Laravel.	stunt	12.763598	-6.6382155	comment	4.0	27.0	1588676350	10.362205
23077120	Shhh you're gonna upset all the Elix	Shhh you're gonna upset all the Elixir / Golang / Node people	joelbluminator	12.602271	-7.5137672	comment	4.0	12.0	1588660189	12.933524
23079606	"You can hire ""good programmers"" and "	"You can hire ""good programmers"" and ask them to write PHP - Facebook does"	ludamad	12.776913	-6.599197	comment	4.0	18.0	1588684166	2.9286726
23079963	No native support for concurrency op	"No native support for concurrency operators, no real event loop implementation, lack built-in support for non-blocking IO...
I do Elixir regularly and Actor Model is not something PHP developers know"	kangoo1707	12.3768835	-7.460469	comment	4.0	13.0	1588686506	-10.53481
23080317	This is because the next generation 	This is because the next generation of hot coders is working on JS or something more exotic like Rust. This is why I think that even though Rails is still a good platform for building a certain class of webapps the writing is on the wall and I'm planning to transition away from it over the next few years.	cageface	12.740409	-6.8489003	comment	4.0	18.0	1588688722	12.37045
23080884	This may sound hurtful but hear me o	This may sound hurtful but hear me out - One thing worth mentioning why someone would not want to use PHP in 2020 is that a PHP programmer is looked down upon by other programmers.And im saying this without hate or malice. I love PHP since I was a PHP dev from 5.2 - 7.0. I built PHP libraries and WordPress plugins that have helped many people. Ive since moved to Node because PHP jobs have dried up in my country.PHP devs arent respected which is sad because we all belong to the same programming community. And PHP has contributed a lot to the proliferation of websites. At the end of the day programming languages dont matter to businesses as long as it gets the job done at a reasonabe cost.	vatotemking	12.778939	-6.6375356	comment	4.0	15.0	1588691651	10.373591
23081654	Funny, I remember everyone hating on	Funny, I remember everyone hating on PHP when they moved to RoR, and now they hate that are and moving on. Its almost as if they just need things to hate so they can rewrite code. its very cyclical IMO.The elitism of learning a new language and then mocking those that haven't put in the same time and effort to row in the exact same direction, has always amused me. Ive never judged anyone for what tools they use to get their job done, but apparently i am a rare breed in that i am more concerned with the output then the language choice.	mtnGoat	12.756985	-6.6465907	comment	4.0	18.0	1588695404	10.348482
23081750	Good points, and I certainly underst	Good points, and I certainly understand why the Ruby community is so passionate. The language is expressive, mutable, and has some nice syntax. My personal problems are:- Rails is the monolith that gives you all of that auth/database/etc capability, and it's very non-trivial to upgrade- Refactoring a large codebase with a dynamic, untyped language like Ruby is extremely difficult without 100% test coverage- Unusual syntax conventions which can get you into trouble (y = x.blah vs x.blah!), strings vs symbols, magical naming conventions for Rails, etc etc- Auto-loading is a mess- ActiveRecord is great until you care about DB performance, and then you end up continually working around it's quirks (the N+1 problem, indexes failing due to int/string type conversion, etc)- Everything in Rails is	drchopchop	12.7175865	-6.9547405	comment	4.0	12.0	1588695876	12.3499155
23082168	I'm in a similar boat. I've decided 	I'm in a similar boat. I've decided that whatever it is that makes PHP successful must be exactly the same thing that has made JavaScript successful.It's going to sound extremely condescending, but here it is, anyway: I believe that the majority of people who defend PHP (and JavaScript) are people who have ever only written code in Java (especially <=1.6), JavaScript, and PHP. Maybe C for fun or in college. In light of those immensely popular languages, I could see why someone might not think that any of the deficiencies are deal-breakers.	ragnese	12.622441	-6.4919524	comment	4.0	22.0	1588698043	10.294797
23083797	As someone who has programmed PHP pr	"As someone who has programmed PHP professionally for 13+ years (and also JS and Python) I have never run into anyone who can place a solid argument since the PHP 7 + Laravel.-- Let me clarify, PHP is useful with context. For building web apps. Each language has its best-uses. Laravel has the strongest ecosystem and community out of any language/framework combo I've seen.I can literally setup and deploy a laravel application on a horizontally scaled setup with CI & autodeploy within an hour -- while maintaining industry standards.PHP had its problems -- historically, but so did most languages. Do you remember Javascript before Node/React? Or before jQuery/Prototype? It was _trash_.The biggest ""con"" to using PHP is that it's ""bad"" for the resume, no one is excited about it, so when looking t"	KerryJones	12.790851	-6.630597	comment	4.0	16.0	1588706637	10.333674
23093737	Deno 1.0: What you need to know	Deno 1.0: What you need to know	jeremiahlee	12.518612	-6.4568963	story	4.0	60.0	1588785771	-11.018895
23100165	Documentation is frighteningly bad a	Documentation is frighteningly bad across the industry and nobody has a good solution yet other than hoping that someone else will do something about it.And if you think Django is murky, try Spring :). Django is one of the easiest frameworks to work with simply because it includes so many functions you would otherwise need to somehow integrate. And even then there are still these issues.Good post.	MattGaiser	12.839162	-6.5459905	comment	4.0	23.0	1588831521	10.082208
23100746	There used to be a time when web fra	"There used to be a time when web frameworks strived for simplicity.I fully agree with the article's opinion that things have become needlessly complicated.The new best practice seems to be to install NodeJS, then use the npm repository manager to install bower, then use that to download your packages. And 5000 dependencies and 500 MB in downloads later, you have bootstrapped a Hello World template.Or name me one person who can, from memory, correctly configure the rails sprockets asset pipeline :pThere's no denying that most of the tutorials and contemporary web development advice boils down to ""follow these instructions carefully + magic happens"""	fxtentacle	12.75641	-6.773411	comment	4.0	16.0	1588837846	12.3174925
23110362	PHP is fine too. Check out https://l	PHP is fine too. Check out https://laravel.com/ and tell me that doesn't look like a joy to work with.	nexuist	12.80865	-6.63645	comment	4.0	16.0	1588900595	10.345145
23113056	I came across this gem recently:    	"I came across this gem recently:    catch (Exception up)
    {
        throw up;
    }

Truly genius code"	yread	12.364419	-7.0778823	comment	4.0	12.0	1588931849	12.3235035
23116067	Anyone know why they gave a whole se	"Anyone know why they gave a whole section to ""Web"" and omitted Ruby? Even C and Visual Basic are present."	neomindryan	12.579983	-7.049426	comment	4.0	15.0	1588952760	12.39436
23133357	I thought similarly too, until I spe	I thought similarly too, until I spent some time with Prolog. Lisp seems wonderful and clever, but Prolog feels even more magical.Even a simple thing like concatenation of two lists, that in Prolog it could be done purely declaratively, without expressing how it needs to be performed, seems levels more magical than how it is done in lisps.	billfruit	13.12487	-7.2993937	comment	4.0	38.0	1589124429	-12.481669
23167003	ReasonML looks cool, first time I he	"ReasonML looks cool, first time I hear about it. Thanks.Elm/Purescript syntaxes are not my kink.
Open to other suggestions though."	dnpp123	12.582579	-7.5757	comment	4.0	12.0	1589378897	10.314854
23167144	Couple of times when somebody posted	Couple of times when somebody posted an OTP erlang update I had no clue what I was reading. Then I came back to HN and somebody broke down why some things are really useful/changed and it was mind blowing.Can some erlanger explain why you are excited about certain things from the update?	ponyous	12.580233	-7.516758	comment	4.0	16.0	1589379684	12.943903
23167302	IMO, until TypeScript gets the follo	IMO, until TypeScript gets the following features, it's not worth using:- Native TypeScript runtime interpreter in Deno (TypeScript alternative to Node.js).- Native TypeScript runtime interpreter in all major browsers.- At least 20% performance improvement over plain JavaScript.The build step has to go away because:- Source maps are unreliable, bulky, slow and add too much complexity for some environments; many environments fail at using them correctly and this can make it difficult to debug code. Being forced to debug ugly transpiled JavaScript is unacceptable and should never happen.- It's slow to work with. TypeScript often claims to be 'scalable' but reality is that large projects often take multiple minutes to build for every change. There are no good incremental build solutions which	cryptica	12.397676	-6.694697	comment	4.0	26.0	1589380766	-10.431715
23167793	> I figure there must be something w	> I figure there must be something wrong in my approach or in my ts config (no explicit any).This is a heretic/unpopular opinion, but I think especially for existing JS/React projects, the laxest possible TS setting is the way to go.You should be able to get to no type errors in your existing JS project with not too many changes. In these contexts (existing projects) I like to think of TS as more editor experience support than seperate language. Modern React is very friendly to TS automatic type inference, so IMHO you should be getting decent benefits from typescript without annotating anything at all. And instead of fixing complicated type errors for no real gain, just // @ts-ignore and move on.I don't know what your specific issue is with styled-components. Should work pretty much out of	kall	12.397601	-6.7507715	comment	4.0	14.0	1589383587	-10.477346
23172698	Congratulations on the 1.0 release! 	"Congratulations on the 1.0 release! I've been using Deno as my primary ""hacking"" runtime for several months now, I appreciate how quickly I can throw together a simple script and get something working. (It's even easier than ts-node, which I primarily used previously.)I would love to see more focus in the future on the REPL in Deno. I still find myself trying things in the Node.js REPL for the autocomplete support. I'm excited to see how Deno can take advantage of native TypeScript support to make a REPL more productive: subtle type hinting, integrated tsdocs, and type-aware autocomplete (especially for a future pipeline operator)."	seleniumBubbles	12.459006	-6.4784565	comment	4.0	15.0	1589409746	-10.882263
23172931	Deno really shouldn't run TypeScript	Deno really shouldn't run TypeScript files directly. Not only is TypeScript too slow for this, it receives far too many breaking changes.How will Deno decide when to upgrade its TypeScript compiler version? Will Deno have to have breaking changes every three months or so?Also, Deno appears to allow import TypeScript files with .ts extensions while tsc doesn't. This alone means the same code won't run in Deno and compile with tsc.JavaScript at Stage 3 and above is a stable compile target, and Deno should just run that.	spankalee	12.473506	-6.4939203	comment	4.0	16.0	1589411320	-10.828104
23183982	Yes TruffleRuby struggles to run tes	Yes TruffleRuby struggles to run test code because it works against the optimisations we add to make production code fast. For example when you add more profiling to better optimise the hot code it makes the cold code slower, and tests are almost all cold code.Also our C extension emulation layer used to be extraordinarily slow while we made it work correctly, and it's still rather slow.It's a challenge but we're working on it.But TruffleRuby is the only alternative Ruby implementation to even run major applications that I've tried at Shopify.	chrisseaton	12.557328	-7.025278	comment	4.0	18.0	1589483412	-4.45933
23197091	I fully remember picking up coffeesc	I fully remember picking up coffeescript because Dropbox had used it. I only ever used it on one project. I try and remember that every time I have the urge to go with Reason, Elm or even wasm compiling things. Long live JS.	CapriciousCptl	12.415628	-6.582124	comment	4.0	27.0	1589574929	-10.507464
23197248	CoffeScript had quite a bit of influ	CoffeScript had quite a bit of influence on JavaScript and TypeScript today (and/or really great timing w/ similar thinking). All of these were in early releases of CoffeeScript, and showed up in modern JavaScript years later:* fat arrow functions* classes* template strings, multiline strings* destructuring and ...rest values (splatting)* elvis operator (foo?.bar?.baz - in TypeScript)honorable mention* list/iterator comprehensions (made some good progress in the ES speccing process, but ultimately didn't land)	nevir	12.400781	-6.5787897	comment	4.0	12.0	1589575985	-10.533022
23197636	Coffeescript tried to simplify the s	Coffeescript tried to simplify the syntax, but it went too far.- A statement such as f(g(x)) becomes absurd without parentheses.- Indentation has a meaning, but it is legal to have inconsistent indentation.Code is written once, read many times. Coffeescript got that backwards.CoffeeScript is to JavaScript what Stenography is to Writing. Steno makes sense when you have to write something being dictated to you in real-time, but if you are not in a hurry, just write.	29athrowaway	12.383805	-6.5825562	comment	4.0	17.0	1589577941	-10.513712
23234276	Do any of the non-artificial intelli	Do any of the non-artificial intelligences walking around out there contain a logical inference engine similar to Prolog?	thom	13.114285	-7.270093	comment	4.0	24.0	1589892657	-12.46968
23244940	Using my CL based sudoku solver [1],	"Using my CL based sudoku solver [1], I got the following solution. The solution is valid but different from what is shown in the video. IIRC, a sudoku board can have multiple solutions but anyone out here can explain why so? I am no sudoku expert or enjoying solving sudokus anyways![1] https://github.com/dmsurti/sudoku```(setf board      #(0 0 0 0 0 0 0 0 0

        0 0 0 0 0 0 0 0 0

        0 0 0 0 0 0 0 0 0

        0 0 0 0 0 0 0 0 0

        0 0 1 0 0 0 0 0 0

        0 0 0 0 0 0 2 0 0

        0 0 0 0 0 0 0 0 0

        0 0 0 0 0 0 0 0 0

        0 0 0 0 0 0 0 0 0))

``````* (sudoku:print-board (sudoku:solve board))1 2 5 | 6 4 7 | 8 9 38 3 4 | 5 9 1 | 6 7 29 7 6 | 3 2 8 | 4 5 1- - - - - - - - - - -5 8 9 | 2 3 4 | 1 6 72 6 1 | 7 8 9 | 3 4 53 4 7 | 1 5 6 | 2 8 9- - - - - - - - - - -4 9 "	deepaksurti	13.451235	-7.4105296	comment	4.0	12.0	1589967338	15.07818
23247085	I'd never done sudoku before and was	I'd never done sudoku before and was a little disappointed to find it was so mechanistic. I'd sort of expected there to be some degree of exploration and backtracking, or perhaps having to solve multiple digits simultaneously while attempting to keep it all in your head. Is this puzzle representative of normal sudoku puzzles or do the additional constraints change it?	thom	13.449356	-7.408898	comment	4.0	17.0	1589984439	15.074811
23250042	I love Elixir. Phoenix makes web dev	I love Elixir. Phoenix makes web development a pleasure and LiveView is even more exciting.I would love to find a job doing it.	mostlysimilar	12.802483	-7.1702657	comment	4.0	26.0	1589998811	12.7977295
23250143	Dude, LiveView is wild. It feels kin	Dude, LiveView is wild. It feels kind of magical, and I think people are gonna start adopting slowly, then all at once.There's an awesome blog post on their website. where Chris McCord, creator of Phoenix, builds a real-time Twitter clone in 15 minutes.https://www.phoenixframework.org/blog/build-a-real-time-twit...	ketzo	12.888016	-6.8454576	comment	4.0	20.0	1589999473	12.714471
23251292	I couldn't find a date on this artic	"I couldn't find a date on this article, but I don't think this line is accurate anymore:""Facebook, Wikipedia, Yahoo, Flickr, Tumblr all these sites run in PHP and welcome millions of users every month without flinching.""Facebook dropped PHP for their own language called Hack, which I think is based on PHP but with a lot of the things people complain about changed."	seccess	12.780465	-6.6164894	comment	4.0	13.0	1590006007	2.9784403
23251435	pick a random language, ruby, python	pick a random language, ruby, python, javascript etc etc and you'll find similar rants/complaints. Yet I think right now it's cool to shoot on PHP therefore everyone is more vocal	thinkindie	12.727463	-6.6478543	comment	4.0	15.0	1590006797	10.351829
23251632	its fun to trash talk PHP who cares 	its fun to trash talk PHP who cares if statements are accurate. PHP sucks because of the dollar signs everywhere. From a distance Wordpress code looks like Nigerian Prince emails.And crazy coding conventions like mysql_real_escape_string. Really PHP?	eggsnbacon1	12.766678	-6.5168347	comment	4.0	13.0	1590007832	10.209892
23272165	"Hey, ""he"" is me. So I can answer:I'v"	"Hey, ""he"" is me. So I can answer:I've never used Bunq or N26. But I did include Revolut!Cheers"	builtformars	12.472719	-6.443614	comment	4.0	17.0	1590156356	-10.828263
23285942	Because engineers don't take kindly 	Because engineers don't take kindly to companies changing the direction of their career development.If you're an up-and-coming Golang developer, how happy are you going to be when your company takes you off of a Golang project and makes you the new Erlang person?Now how happy are you going to be when you're informed that you're learning Erlang to maintain an old, flakey codebase written by 2 guys who left the company and are now unreachable?Oh, and you're going to need to be on call for this because no one else knows how to fix it.	PragmaticPulp	12.570428	-7.524497	comment	4.0	40.0	1590264575	12.909102
23302424	Very nicely done, thank you for shar	Very nicely done, thank you for sharing this!A CLP(FD/ℤ) solution such as this one has two parts: First, the relevant constraints are posted. Second, a search tries to find concrete solutions. In general, a search is necessary because the constraints by themselves are not sufficient to deduce the unique solution as that would be computationally prohibitive.You can therefore influence the speed of the logic program in two categorically distinct ways: First, you can post different constraints or try a different formulation altogether. Second, you can try different search heuristics that try to find concrete solutions more efficiently.Regarding constraint propagation, there is a clear trade-off between strength and efficiency of propagation. For instance, the all_distinct/1 constraint that is	triska	13.130813	-7.281934	comment	4.0	13.0	1590423122	-12.466394
23303411	The OP says there are 6x10^21 Sudoku	The OP says there are 6x10^21 Sudoku puzzles.If we remove rotations and reflections, there may be (far) fewer unique Sudoku puzzles than we think. In fact, there are many sub-reflections that are essentially the 'same' puzzle:Take the first three rows as a block, 'rotate' to the bottom of the puzzle - its still 'solved'. In fact permute the blocks of three rows in any order, still the 'same' puzzle in a sense.Same with the first three columns.Same with the three rows or columns in a block of three - permute them, the solution is 'unchanged'.Relabel the digits from 1-9 as 9-1 - another 'reflection' which is the same puzzle pattern.In fact, permute the digits all different ways - its still solved.I'm not at all sure there isn't actually just one unique pattern to sudoku. But I don't know how	JoeAltmaier	13.453728	-7.4110312	comment	4.0	13.0	1590430830	-11.025276
23343443	I was surprised to see the performan	I was surprised to see the performance of php frameworks. Has there been something special happening with this language ? It looks completely on top of all the other dynamic languages on most benchmarks, which i really don’t understand.	bsaul	12.752381	-6.641325	comment	4.0	15.0	1590703831	10.326241
23360645	It is interesting that PHP is ruled 	It is interesting that PHP is ruled out as insecure. I am not sure that for system administration tasks modern PHP is particularly worse than Perl and these days more people know PHP than Perl.	_0w8t	12.763937	-6.633144	comment	4.0	19.0	1590841264	10.31921
37734331	Another thing to keep in mind is the	Another thing to keep in mind is the size of the candidate pool. There's a lot fewer F# devs than PHP. Can make hiring a bit trickier.	joshuahutt	12.808452	-6.717484	comment	4.0	13.0	1696224699	10.334368
37746347	Why is it normal in the Typescript c	Why is it normal in the Typescript community to rely on a lot of other SaaS providers to build a simple application?This project relies on 4 different paid services. Why?Why do you need a SaaS to handle your auth, mailing, database, and logging?Aren't there libraries for these things in Typescript? Why pay for them?	impulser_	12.383716	-6.7645555	comment	4.0	16.0	1696292756	-10.470295
37765153	I've never met anybody who prefers J	I've never met anybody who prefers JS over TS.If anything, the dynamic typing bubble is bursting right now.	awestroke	12.351738	-6.69292	comment	4.0	13.0	1696427398	-10.44069
37774760	Someone here commented that it takes	Someone here commented that it takes 2.39s for tsc to check types for `console.log('Hello, world!')` [1] (esbuild does not check types).[1]: https://news.ycombinator.com/item?id=37765713	tipiirai	12.372115	-6.6923723	comment	4.0	13.0	1696478143	-10.464426
37784381	Ruby on Rails: The Documentary [Offi	Ruby on Rails: The Documentary [Official Trailer] [video]	raybb	12.74635	-6.9363866	story	4.0	33.0	1696540439	12.345918
37787402	Asset pipeline is a hot mess: https:	Asset pipeline is a hot mess: https://fly.io/ruby-dispatch/making-sense-of-rails-assets/Propshaft should bring sanity back to it, but its going to be a while before that's mainstream.	bradgessler	12.763786	-6.853914	comment	4.0	17.0	1696570566	12.338624
37787405	Which ones? Never saw another one wh	Which ones? Never saw another one which comes with the same comfort of batteries included like rails. For example having database migrations built in etc.	roboben	12.759188	-6.914014	comment	4.0	13.0	1696570629	12.255204
37833422	If only Crystal could have an insane	"If only Crystal could have an insanely fast compiler.Edit: missed the word ""fast""."	ksec	12.592396	-7.245894	comment	4.0	13.0	1696951950	-11.221077
37842234	Ask HN: Is it possible for a site pr	Ask HN: Is it possible for a site programmed in PHP version 5.6 to be secure?	cannibalXxx	12.779855	-6.609532	story	4.0	4.0	1697013789	10.3224125
37843005	Bun v1.0.5	Bun v1.0.5	amalinovic	12.470207	-6.4441457	story	4.0	4.0	1697022274	-10.786084
37847305	Does anyone have any good counterpoi	Does anyone have any good counterpoint articles/references that describe how a company has been able to scale while keeping the rails monolith backend?	ktbwrestler	12.753879	-6.923574	comment	4.0	13.0	1697044599	12.332212
37867194	This is a comment that only makes se	This is a comment that only makes sense if you believe NIST designed CRYSTALS-Kyber, or had a significant hand in its design. But nothing of the sort happened. The CRYSTALS team is overwhelmingly academic and overwhelmingly European. It's frustrating that Bernstein has communicated about this without making that clear, because it's obvious that lots of people believe NIST went off in a room and came up with a scheme, and your first responsibility in discussing this honestly is to dispel that misconception.	tptacek	12.631645	-7.261237	comment	4.0	23.0	1697176398	-11.171832
37926883	PHP as a language and ecosystem is g	PHP as a language and ecosystem is great. Far more suitable for web development than python and trivially easy to scale.But PHP developers, boy oh boy, are a different story.My favourite is how they all still debate setter and getters and almost none know the language but only the framework they use and code usually turns into a huge pile of unmaintainable crap. But hey they use ORMs just in case they’ll swap database engines (happens so rarely not even worth mentioning).	gumballindie	12.722575	-6.638731	comment	4.0	19.0	1697625230	10.331723
37927171	I really do not understand this take	"I really do not understand this take and have to assume people who say this have not deeply used PHP. It has a large variety of bizzare language features that make JavaScript look downright well-designed.Examples off the top of my head:* Lists and dictionaries being the same data type (""array""). This makes it impossible to distinguish between an empty list and an empty dictionary, good luck encoding that JSON.* Arrays are pass-by-value* '123' == '+123' evaluates to true* '0' == '0.000' evaluates to true* `$a = true; $b = false; $c = $a and $b;`, $c evaluates to `true`* Closures requiring you to explicitly list every variable from the parent scope you want to use* References (&$var) have a lot of footguns* array_key_exists and property_exists taking opposite parameter orders* stdlib naming "	scq	12.48237	-6.6254888	comment	4.0	13.0	1697628098	10.252939
37945459	The problem stems from how fragmente	The problem stems from how fragmented dependency management in python is. Most tutorials use `pip install something` without much care for pinning versions.Yes, it makes it easier for new programmers: They can skip learning a dependency management tool like poetry, or pipenv. But then these things happen.Blame the tutorial makers and the dependency maintainers, not the Flask team.	sergioisidoro	12.71261	-6.571358	comment	4.0	17.0	1697734955	10.108089
37945581	The post's point is that an API chan	The post's point is that an API change is a very big deal, to be used only when the older version just can't work anymore or the newer version offers something much better.  But the Flask team seems to have a much lower bar on what justifies the change.  So the author feels unhappy he has to update a bunch of projects for no good reason.	vharuck	12.712162	-6.561835	comment	4.0	12.0	1697735453	10.0624
37948990	The banding on the background is inc	The banding on the background is incredibly annoying, but looks interesting. I was considering learning Elixir the last few weeks, and I'm still on the fence. Does anyone have any good tips on how to set up a decent dev environment (IDE/debugging/etc.)?	withinboredom	12.683404	-7.4399614	comment	4.0	16.0	1697751056	12.950769
37960092	Pattern matching is an objectively g	Pattern matching is an objectively good language feature. I wasn't aware the Ruby community sees it as controversial. Why does the Ruby ecosystem do so many things backwards compared to modern software engineering? Pattern matching bad, method_missing good?	stevebmark	12.518814	-7.07044	comment	4.0	26.0	1697828499	12.393174
37972770	Souffle seems to suffer from the sta	"Souffle seems to suffer from the standard small language issue of no code examples front and center. Also, no ""how is this better than X"" or ""example of usage in Y"".To those who have used Prolog, is the description sufficient to know what it does and if it will be useful? I've never use prolog and I don't know the lingo."	all2	13.146891	-7.2942376	comment	4.0	20.0	1697948049	-12.488897
38014190	Complexity has to exist somewhere, e	Complexity has to exist somewhere, either in the engineer's hands, or swept under the rug for the framework to perform its magic on (really thinking about the Rails ecosystem here). When things go wrong, it's nicer, in my opinion, to have more control, especially in this fast paced clients-want-it-now environment.	metadaemon	12.766099	-6.9334407	comment	4.0	12.0	1698249782	12.346519
38037950	I actually love the way the Django A	"I actually love the way the Django Admin UI looks, but it does go against the grain of the current trends in UI design by being a bit explicit. For example, the ""add post"" button looks like a button rather than just being words and there are borders demarcating boundaries between sections. I think it's both good looking and a lot more usable than the current trends in UI design which favor minimalism to the point that it can be hard to discern what is clickable."	mdasen	12.8619585	-6.5051	comment	4.0	29.0	1698412195	10.073732
38050533	Admin for Symfony Framework ( PHP )h	"Admin for Symfony Framework ( PHP )https://symfony.com/bundles/EasyAdminBundle/current/index.ht...Admin for Laravel (PHP) 
https://nova.laravel.com/Java Spring Boot
https://docs.spring-boot-admin.com/current/getting-started.h...I think many other Frameworks have this, did you search for it?"	reyostallenberg	12.801342	-6.5771074	comment	4.0	14.0	1698506775	10.310952
38050655	Hmm. I know Django admin is one of t	Hmm. I know Django admin is one of the best things about Django... but why $1m? If each developer gets paid $200k/yr, that's 5 developers for 1 year? Sounds crazy to me.	tjrgergw	12.79176	-6.5394487	comment	4.0	12.0	1698507589	10.074468
25535307	IMO Python has more libraries, more 	IMO Python has more libraries, more developers (people who might want to work on your project with you), and a more simple and intuitive syntax (easier to onboard people). Ruby is a fairly quirky language, eg functions aren't first-class values.	tachyonbeam	12.455752	-7.0186334	comment	4.0	13.0	1608887739	12.36277
25535554	How complicated is rails in 2021?	How complicated is rails in 2021?	tutfbhuf	12.770367	-6.921412	comment	4.0	12.0	1608891367	12.32103
25535326	The fact that all static languages a	"The fact that all static languages are adding an Any type means the discussion is settled.
Lol. How has this settled anything? You think Ruby devs from now on are all gonna use Sorbet or RBS? I highly doubt it. Some very unique companies like Shopify or Github, which don't really represent the average Ruby shop, may make a limited use of these tools. The vast majority won't."	joelbluminator	12.529243	-7.0904255	comment	4.0	21.0	1608888014	12.376558
25537084	Erlang is an amazing language, with 	"Erlang is an amazing language, with many great design decisions! For example, quoting from the paper:“Very early on we decided that strings were lists. This was partly environment as many
of the languages we were using, such as Prolog, use lists and partly practical as lists
are a very powerful data type.”Lists are extremely convenient to handle in Erlang, and they are an ideal representation of text for many purposes. This convenient representation can also be implemented efficiently, in such a way that compact UTF-8 based encoding is used internally, while the string appears as a list to programmers. Two recent Prolog systems, Scryer Prolog and Trealla Prolog, do this already. It is to be hoped that future Erlang and also Haskell implementations will adopt this idea to combine convenienc"	triska	13.099423	-7.3019657	comment	4.0	26.0	1608911373	12.978646
25536600	The Erlang Rationale (2008) [pdf]	The Erlang Rationale (2008) [pdf]	signa11	12.565458	-7.5121384	story	4.0	94.0	1608905889	12.907107
25543091	Can you name a few of Phoenix LiveVi	Can you name a few of Phoenix LiveView clones/similar approaches in other languages that are actively developed and worth looking into?	AhtiK	12.8823595	-6.9201407	comment	4.0	15.0	1608986509	12.750254
25565358	It seems to me like TypeScript's sou	It seems to me like TypeScript's soundness hole in #4 could be fixed.1. I'd want TS to show an error on the line where the aliasing occurs, encouraging me to clone the list if I want to change its type from a distance.	orneryostrich	12.355879	-6.869944	comment	4.0	14.0	1609203618	-10.44992
25573471	As an outsider, why doesn't/can't Ru	As an outsider, why doesn't/can't Ruby implement a full actor system like Erlang/BEAM? Ruby is already based on message passing so it seems like it should be possible. Granted it'd likely induce a large performance hit since presumably every object would need to be locked or have a message queue.	elcritch	12.343799	-7.5235324	comment	4.0	30.0	1609268729	12.856613
25573792	I'm excited to see where this goes, 	I'm excited to see where this goes, but I must admit I'm conflicted on the idea of seeing async Ruby code.  Async is great technically but one of the things I love about Ruby is the elegance and clarity.  That tends to go out the window when async is introduced in many languages.  async/await has helped a ton though, so hopefully Ruby will get something like that as we go.I would just suggest that sometimes performance isn't worth sacrificing clarity.  Obviously sometimes you have to (Big O can be an unforgiving beast) but not always.	freedomben	12.595919	-7.0250335	comment	4.0	18.0	1609270388	12.32862
25652566	This inspired me. What's the best bo	This inspired me. What's the best book for modern prolog?	simongray	13.149961	-7.29716	comment	4.0	17.0	1609888415	-12.489042
25728502	You have 1 new message(s)	You have 1 new message(s)	escapedconvict	12.4765	-6.686418	story	4.0	3.0	1610371218	6.0523725
25767608	This must be the most unflattering c	This must be the most unflattering congratulations I have ever read. Sounds to me like Elixir should feel guilty of being successful despite not being Erlang.	richardfey	12.638463	-7.4832144	comment	4.0	15.0	1610570079	12.928782
25768078	If you’re chaining more than three o	If you’re chaining more than three or four things together I think you’re definitely doing something wrong but I’m not sure I’ve ever seen someone do that in Elixir.	jolux	12.680284	-7.4580536	comment	4.0	16.0	1610572588	12.948239
25768526	I shunned the JS world for a while a	I shunned the JS world for a while after jumping on the Meteor bandwagon a few years ago and seeing it just fizzle out to a boat load of outdated and unsupported dependencies. Rails was just so much more productive and easy for solo work.But recently I built a couple of services in typescript and the ecosystem seems to have stabilised a lot, my productivity was super high and I’m majorly impressed.	albertgoeswoof	12.70137	-6.7535186	comment	4.0	12.0	1610575303	12.323652
25769769	> Elixir just did it better imo and 	> Elixir just did it better imo and this person seemingly can't stand that people seem to like it more.The post does read more like venting than a structured critique, but a few of his points are still valid.Every time I hear someone praising Elixir, it's never about some Elixir-specific feature but usually about something that Erlang has provided for ages like pattern matching, lightweight processes, supervisors, the preemptive scheduler. Given this, I'm sure you can appreciate how bittersweet this can be for an Erlang developer.To me Elixir is just a more complex, verbose and less elegant version of Erlang so it kinda frustrates me when newcomers would rather learn Elixir than plain Erlang.	rlander	12.664723	-7.4632883	comment	4.0	14.0	1610582329	12.93114
25788493	> I don't think I've ever met anyone	> I don't think I've ever met anyone who was naturally good at thinking logicallyI've heard, though, that declarative programming (prolog, haskell etc) was a LOT easier for people who aren't trained in imperative programming. Whereas those who are actually have a hard time picking it up... As was my experience.@op have a look for declarative programming. You might like prolog :)	aspyct	13.09488	-7.278606	comment	4.0	13.0	1610700408	-12.442077
25791261	There's a project called AnyCable wh	There's a project called AnyCable which replaces ActionCable to give Rails the real-time performance equivalent of LiveView.See this https://evilmartians.com/chronicles/anycable-actioncable-on-...Looks like having 20,000 idle clients connected to a server sits at only 380MB and Erlang is at 737MB.	bestinterest	12.830008	-6.8703837	comment	4.0	13.0	1610720782	12.540791
25797140	Implementing FastAPI Services – Abst	Implementing FastAPI Services – Abstraction and Separation of Concerns	jdnier	12.398007	-6.558523	story	4.0	66.0	1610748233	-9.314634
25800761	Are you implying that Signal wouldn'	Are you implying that Signal wouldn't be having scaling issues had it been written in Erlang instead of Java?An obvious reason why any project picks a more popular language over an obscure language is the number of engineers comfortable with that language.	elric	12.543927	-7.504894	comment	4.0	18.0	1610782220	-5.7792125
25802018	Interesting. In your opinion, is it 	Interesting. In your opinion, is it worth learning RoR over Django? I'm historically a Python dev, but find Django and Python web development in general a very poor experience.	overscore	12.762075	-6.7121625	comment	4.0	21.0	1610803288	10.402869
25890267	> Nobody but other devs cares about 	> Nobody but other devs cares about the simplicity of the code if the code works.They care when you start quoting a week for a simple addition that should take an hour, because every time you have to wade into a mess, in which one wrong semicolon in functions.php brings down the entire website.Of course you test and you test, but you're surrounded by landmines at all times.	newsbinator	12.76799	-6.635188	comment	4.0	19.0	1611475365	10.336996
25961603	Funny. I almost dislike all of PHP b	Funny. I almost dislike all of PHP but think that their choice of basic data structure is the one good thing. Computers are getting faster and faster and simplifying programming could be done to a whole new level. Clojure for example has a similar approach. Okay, PHP lacks contracts, but maybe PHP adds them in 20 years when the mainstream understands that they are great.	thibran	12.746767	-6.6423316	comment	4.0	15.0	1611950214	10.31789
25962257	I recently killed all my PHP code in	I recently killed all my PHP code in favor of Go.What finally convinced me is the Go package system. I like that Go has a builtin package manager, while I dont think PHP does. I know about Composer, I just wonder. After all these years, why hasnt PHP incorporated a builtin package manager?	svnpenn	12.68434	-6.684743	comment	4.0	13.0	1611953107	10.328247
25964351	PHP was the most competitive when AS	PHP was the most competitive when ASP was around. After that, PHP entered a dark age where almost every other language ran circles around it in terms of performance, security, maintainability, tool support... and literally everything.Some of those problems got addressed but by the time that happened PHP's reputation was irreversibly trashed and now nobody wants to know about it.That is the world we live in. People do not want to learn PHP or work in PHP. Do a survey on any higher education institution and verify it yourself.All the features you feel proud about... go take a look at the Java VM, .NET VM or a JS VM like V8... Those VMs are much more powerful than the PHP interpreter will ever be. Even CPython is faster.Plus, as a Java developer you can make more than a PHP developer and ther	29athrowaway	12.740761	-6.6211843	comment	4.0	15.0	1611963676	10.303177
25980576	I spent a lot of time thinking about	"I spent a lot of time thinking about this.What makes Perl or Clojure such fun languages to work with is they don't impose structure on you. You can do whatever the hell you want.On the other hand result of this is the code represents basically how you think about the problem. Which would be very different for every person.Languages with frameworks like Java+Spring, Ruby+Rails etc. are less ""fun"" to work with because you are not given so much freedom and likely have to fill in a lot of stupid, mundane boilerplate, but are easier to maintain in team setting because developers know more or less what to expect from the code. Very likely developers come with that knowledge and if you know one Spring application you know how to move around almost any Spring application."	lmilcin	12.345971	-7.2172236	comment	4.0	15.0	1612114315	13.157566
25987624	Yes! Ocaml is quite good. Concurrenc	Yes! Ocaml is quite good. Concurrency is kinda poor, but it's coming along.I am glad that Elm has influenced so many ecosystems. I wouldn't touch it with a ten foot pole because of the author, but I think the ideas of the project are invaluable and long overdue.	adenozine	12.954533	-7.6907916	comment	4.0	16.0	1612177752	-12.759194
26014025	https://www.haven.org/haven/wiki/See	https://www.haven.org/haven/wiki/Seems like perl is not having a good day there.	fgreinus	12.338432	-7.030341	comment	4.0	15.0	1612363775	13.177341
26076056	Weird that the author says all langu	Weird that the author says all languages are very similar. Strongly suggest trying something like Elm (although I do not recommend it for any large production use, small areas are fine.) to see how brilliant the experience in another paradigm can be.	giantDinosaur	12.980701	-7.674668	comment	4.0	13.0	1612868501	-12.791354
26078417	What José Valim has done in building	What José Valim has done in building an entire community around elixir single-handedly is absolutely incredible. Numerical Elixir looks amazing as well.	ibraheemdev	12.695604	-7.4600863	comment	4.0	17.0	1612883872	12.937913
26078982	My completely biased answer is I hav	"My completely biased answer is I haven't written Java since I was a freshman in college (2009) and that was like a few months. I basically know nothing about the ecosystem.I've written Rails professionally for almost 10 years and have been following / playing with Elixir since 2016. While Ruby / Rails are amazing and the ecosystem is well suited getting a project off the ground extremely quickly, I'm just a big Elixir fan and hope to work with it professionally one day. I'll parrot reasoning from some of the sister comments.""having an entire environment of consistent actors, fault tolerance, hot reloading, etc is a tempting proposition."" - Very tempting indeed!""Code elegance and development joy, maybe?"" - Coming from Ruby / Rails, I agree 100%""Not being statically typed"" - Again, I've work"	jeremy_k	12.6546	-7.064546	comment	4.0	17.0	1612886306	12.397921
26079291	"For what tasks is the BEAM not ""good"	"For what tasks is the BEAM not ""good enough to get something up and running""?AFAIK, any modernish language is good enough to get something up and running regardless of the task."	dudul	12.418075	-7.361372	comment	4.0	22.0	1612887627	7.180698
26097341	Can you really blame Ruby when the p	Can you really blame Ruby when the project didn't have the right resources?The team could have booted up more processes. Isn't that the answer?Or have I misinterpreted your comment?	ketamine__	12.643233	-7.034239	comment	4.0	38.0	1613008571	12.3771925
26097782	You're absolutely right! The biggest	You're absolutely right! The biggest things I learnt from that were:- overprovision resources for big demos by a significant amount- test your demo before you give it- deploying pets (servers you ssh into and lovingly configure) instead of cattle (instance abc123 that's created automatically) means you can't scale them as easily- if you have concerns about a big demo, particularly ones that could be fixed by spending $10 on EC2 instances, you should fix them yourself instead of emailing the tech lead and assuming he'll handle it- spinning up processes with phusion passenger is awful[0] and we should have been using something threaded like pumaThat being said, the same footguns apply at various points as you scale, because Ruby's GVL still exists, and because even though threads are lighter	strken	12.694185	-6.996076	comment	4.0	16.0	1613012547	12.344146
26098434	There is something seriously wrong w	There is something seriously wrong with your number (struggling to serve 20 people).I do not have experience with Ruby, but I think it's similar to Python (in performance) and even if it's let's say 5 times slower (which I don't think it is), a webservice on a simple machine (workstation) in Ruby can easily serve north to 1k (or more) requests per seconds (behind nginx or apache or whatever), and in no way would 20 users be a problem.It doesn't matter if that's async or not (note, not being async does not rule out concurrency or parallelism), but there was something seriously wrong with your application (if you have to serve long-running tasks, you have to make a msg queue anyway and shouldn't do that in your HTTP response directly). You may gain from async if you are IO bound, but with 20	protomikron	12.64422	-6.9690437	comment	4.0	29.0	1613020037	12.325478
26137013	I'm glad that you had such a positiv	"I'm glad that you had such a positive experience! After years of web development I'm just burnt out by the tooling.Layers upon layers, just make debugging so unnecessarily hard.
The tooling is brittle and buggy.I've seen typescript compiler bugs, webpack segfaults, and whatnot.
I've started to ban typescript and jsx from all future projects, and it's better, but still a nightmare."	j-pb	12.379295	-6.5623927	comment	4.0	25.0	1613342819	-10.473497
26151786	Replace Rails with any framework and	Replace Rails with any framework and you'll have the same amount of success. I've done the exact same thing across Ruby, PHP, Golang and tons of other frameworks/languages and never had problems if following those steps.Problems usually come from when teams start with point 3 and 2 when in reality they should stay lean in the beginning.	capableweb	12.738744	-6.918557	comment	4.0	23.0	1613461487	12.345628
26151849	I've thought about learning Ruby (an	I've thought about learning Ruby (and Rails), being a Python guy myself. Not sure if it is worth the effort.	sedeki	12.53432	-6.9771194	comment	4.0	21.0	1613462279	12.3574
26169199	I don't find this useful in any way 	I don't find this useful in any way since Elixir is weakly typed and a worse Lisp than Python..	0b01	12.658774	-7.455375	comment	4.0	20.0	1613584104	12.925012
26169753	Hi everyone, co-creator of Nx here!I	Hi everyone, co-creator of Nx here!I have just published an article on Dashbit's blog with a bit more context on Nx and the design decisions behind it: https://dashbit.co/blog/nx-numerical-elixir-is-now-publicly-...It is hopefully a more in-depth reference than the README. If you have any questions, I will be glad to answer them!	josevalim	12.645059	-7.461546	comment	4.0	19.0	1613586609	12.941823
26223906	The birth of Prolog (1992) [pdf]	The birth of Prolog (1992) [pdf]	alokrai	13.151684	-7.307177	story	4.0	100.0	1613998310	-12.487799
26260127	Erlang/OTP 24 Release Candidate 1	Erlang/OTP 24 Release Candidate 1	ramchip	12.605115	-7.5288177	story	4.0	116.0	1614232316	12.891047
26268961	> Wouldn't an intermediate layer suc	> Wouldn't an intermediate layer such as e.g. Phoenix/LiveView (https://www.phoenixframework.org/) solve the problem?I don't think so but if I'm wrong please correct me.For example, imagine this simple scenario: you load the comment page for this post on HackerNewsHackerNews renders an HTTP response to your browser and your browser renders the page based on that HTTP payload.You can be sitting here on the page for 10 minutes reading comments and even if HackerNews randomly went down 20 times for 10 seconds each time during those 10 minutes you would never know because your browser has everything it needed to render the page when it loaded. It's a done deal. The request was made and the response was served.But now let's say you use LiveView and you made this page an actual Live View. Let's 	nickjj	12.905169	-6.7884274	comment	4.0	20.0	1614290951	12.723221
26284976	Phantom Types in Gleam	Phantom Types in Gleam	pd-andy	12.506311	-7.455812	story	4.0	35.0	1614435451	-12.356188
26297204	Global Associative Arrays in Postgre	Global Associative Arrays in PostgreSQL	avivallssa	12.336329	-6.5065207	story	4.0	17.0	1614547506	-6.9267225
26313418	There’s a curious passage here about	There’s a curious passage here about a chandelier which is not as colorful, complaining that “you see how synthetic the crystals actually are.”The crystals are, of course, synthetic. They are always synthetic. They are glass, made by artisans in workshops or by workers in factories, but made using chemical processes nonetheless. The question is whether you are allowed to call them “crystal”.But the author’s reaction is, “Oh, the chandelier is not good enough” rather than any alternative reaction which might range from “oh, of course it wouldn’t be high-quality crystal, my friend isn’t rich” or “oh, what a tacky chandelier” or “why do you even have a chandelier like that in the first place?”Getting high-quality furnishings (fittings, doors, etc) in a house requires you to have an opinion on	klodolph	12.640345	-7.25689	comment	4.0	24.0	1614676783	-11.208186
26315214	"Typescript is hardly ""new"", it's fai"	"Typescript is hardly ""new"", it's fairly widely accepted now. It might be worth thinking ""why do all these people enjoy using Typescript?"".or idk just say that no, its the kids that are wrong."	madeofpalk	12.36133	-6.764372	comment	4.0	60.0	1614692698	-10.461469
26315245	I mean, Coffeescript was fairly wide	I mean, Coffeescript was fairly widely used at its peak, and now it's all but dead.Front-end fads are fickle. At least TypeScript has Microsoft backing it so they'll likely continue to support even if the rest of the webdev world moves on to the next shiny object.	ForHackernews	12.406128	-6.5912805	comment	4.0	41.0	1614692914	-10.532832
26355983	Elixir does not distinguish signs in	Elixir does not distinguish signs in zero, 0.Therefore; -0.0 + 2.0 = 2.0 and 0.0 + 2.0 = 2.0	kaladin_1	12.645409	-7.4513125	comment	4.0	15.0	1614946621	12.936374
26360000	The creator of Erlang said that stat	The creator of Erlang said that static typing was not appropriate for the applications Erlang is designed for. Worth keeping this in mind!	pharmakom	12.466806	-7.490014	comment	4.0	22.0	1614968251	-8.98547
26401124	this sounds really neat and I'm goin	this sounds really neat and I'm going to go read about it!I also wanted to call out that this ~sentence has just... a bunch of things that seem like jargon/names within the community? As an outsider, I have no idea what they mean:> make a Genserver or Oban worker and mount it in the supervision tree. The Beam takes care of maintaining the processit sounds very sci-fi :)	wcarss	12.452623	-7.313735	comment	4.0	21.0	1615310938	-9.211999
26401264	sorry! so I'll clarifyElixir inherit	sorry! so I'll clarifyElixir inherits a library called OTP from erlang which is a set of primitives for building massively concurrent systems.A Genserver is sort of like a Base Class for a object that runs as an independant process that plugs into OTP. By inheriting/implementing the Genserver behavior, you create an independant process that can be mounted in an OTP supervision tree which runs at the top of your application and monitors everything below it. Out of the box, that means your process can be sent messages by other processes and can  send messages itself. If a crash happens, the supervisor will kill it, resurrect it and redirect messages to the new process.Creating a Genserver is as easy as adding an annotation and implementing a few callbacks.Genservers are the base on which a l	cultofmetatron	12.486037	-7.448712	comment	4.0	17.0	1615311607	12.907908
26401681	For those who are actively using esb	For those who are actively using esbuild with TypeScript, how do you check the types?	snemvalts	12.365627	-6.742758	comment	4.0	12.0	1615313776	-10.424335
26403464	Funny.The first class was a public c	Funny.The first class was a public class & anybody could join in at any time. The second class had reserved early seats based on the initial supply of the dices; without investment in the initial dices the game doesnt start, whereas sudoku generation is free.	kang	13.447725	-7.4086537	comment	4.0	15.0	1615320484	15.078245
26410384	> In the 1990s we saw the mass indus	"> In the 1990s we saw the mass industrialization of web development with PHP and Apache HTTP Server.This isn't really true. PHP4 wasn't released until 2000. Sure, OK, while there were people using PHP3 in the 90s, it wasn't nearly as ubiquitous to the point of ""mass industrialization"". PHP3 wasn't even much of a language to begin with and if anything, Java/J2EE was the stack used for ""mass industrialization"" (Java's role is still dominant in most domains today). Perl was also a much more popular scripting language at the time."	mtberatwork	12.692566	-6.6156025	comment	4.0	14.0	1615378157	10.283619
26423637	Facebook is kind of an interesting e	"Facebook is kind of an interesting example, as they got pretty far into ""hyperscale"" with mostly PHP, memcached, and Mysql."	tyingq	12.774751	-6.53771	comment	4.0	21.0	1615468667	3.5240836
35538592	Python does weak typing and doesn't 	Python does weak typing and doesn't have 1% of the unexpected nonsense PHP has.	VHRanger	12.593965	-6.698862	comment	4.0	12.0	1681302654	10.267122
35570524	From the JS community, this is sadly	From the JS community, this is sadly the level of snark we expect.It doesn't have to be like this. Your community tried to be better once. Have you forgotten?https://jasonfleetwoodboldt.com/courses/stepping-up-rails/ma...	rektide	12.759969	-6.856912	comment	4.0	27.0	1681485628	12.33373
35571834	There seems to be an ever-present hi	There seems to be an ever-present high-level of defensiveness from the Ruby community over JS/React. Rails has had a profound impact on web development, promoting fast starts and shipping quickly. Companies like Shopify and Twitter benefited greatly from this. But the framework is 18 years old. The web that it was created for has changed significantly.	danielrhodes	12.762661	-6.8109474	comment	4.0	13.0	1681491720	12.309855
36568325	Ask it to write a backtracking sudok	Ask it to write a backtracking sudoku solver with coroutines and/or fibers and let me know how it performs in your language of choice.We are nowhere near generally intelligent software systems.	climatologist	13.45067	-7.4102826	comment	4.0	30.0	1688354044	15.07654
36569779	you'd think that an article about ho	you'd think that an article about how facebook bought the erlang-implemented whatsapp because facebook messenger was less popular would bother to mention that facebook messenger used bob ippolito's mochi media's mochiweb, an erlang web server, to handle the comet connections that allowed facebook messenger to deliver asynchronous notifications to web browsersthat is, facebook messenger was also to a significant extent written in erlang, though i don't have any insight into how much of the internal facebook messenger system was erlang-based (i imagine probably not that much)also why does the article say> In 2022, it received a notable update that speeded up the execution of Erlang programs significantly through the introduction of a ‘just in time’ compiler.and not mention that the hipe jit 	kragen	12.666257	-7.4197264	comment	4.0	14.0	1688368383	12.874363
36599365	I disagree, my point is that my code	"I disagree, my point is that my code is better if I write it as JavaScript. TypeScript is more like an extra unnecessary thing I need to do which doesn't add any value.A better metaphor would be; I want to boil some chicken and I have a pan full of boiling water... Then just as I'm about to put the chicken inside, the head chef stops me and tells me that I need to pour oil into the pan.I protest; ""But sir, there's no need, the customer asked for boiled chicken, not fried chicken...""""Do as I say"" says the head chef.So I reluctantly pour a tiny bit of oil on top of the water, then I add the chicken. It splashes around a bit, no big issues, and the chicken comes out OK.The customer got the boiled chicken they ordered, and they're satisfied.""See, it all worked out... Aren't you glad you listen"	jongjong	12.360743	-6.751906	comment	4.0	12.0	1688559719	-10.439833
36603389	As part of my first couple of months	As part of my first couple of months of work at Deno, I wrote the new Deno.serve implementation that's being stabilized here. It's based on a thread-local slab that is wired into Hyper 1.0 (which is an amazing Rust webserver and nearing release).This gave us solid support for HTTP/2 in Deno itself -- you can start a full webserver on a TLS socket and start talking fully-compliant HTTP/2 in just a couple of lines.It's an interesting challenge to get this to cooperate with V8 in a performance way and we're continuing to work on it while keeping the code as maintainable as possible. The implementation will continue to evolve as we design better and faster interfaces between Rust and V8. The cool thing is that this is all going into open-source projects, either in Deno itself, rusty_v8 or V8 i	mmastrac	12.4264965	-6.483565	comment	4.0	28.0	1688576705	7.5851927
36613327	Laravel, the framework that made me 	"Laravel, the framework that made me quit PHP. Not sure the concept of ""one framework doing everything"" will resonate well with the wider Go community. I will keep an eye on it though."	mpldr	12.763528	-6.6202817	comment	4.0	36.0	1688635292	10.308118
36614083	Also not OP, but the linked reddit p	Also not OP, but the linked reddit post sums up one of the major reasons I had to get out of PHP several years ago. Everything is/was moving to Laravel in PHP land. I got tired of dealing with highly coupled, non-unit testable code that seemed to go out of it's way to ignore SOLID principles.God help us if it this project becomes the normal way of writing http go servers applications. Maybe at that point it's time to become an embedded rust programmer or a monk.	solraph	12.753138	-6.643917	comment	4.0	18.0	1688641643	10.305781
36617076	Most of Facebook is built on PHP. I’	Most of Facebook is built on PHP. I’m surprised they didn’t choose Laravel.	DarkNova6	12.786897	-6.6144776	comment	4.0	20.0	1688655725	2.9446657
36620178	Earlyish facebook engineer here. Ear	Earlyish facebook engineer here. Early days FB php was nothing like the php used to template websites. All kinds of specialized libraries to enable a much more sophisticated programming style. Think functional helpers, and asynchronous execution on thousands of cores, spanning trees across data centers using ssh etc. As a tangent a lot of the good stuff I used was written by Evan Priestley, who also did Phabricator and lots of other strong systems.	nikhizzle	12.779134	-6.611867	comment	4.0	16.0	1688666504	3.0109494
36636599	I don't.Even in the terms of the fal	I don't.Even in the terms of the false dichotomy you've constructed here, I would much rather participate in a community of professionals who've organized themselves around sufficiently overlapping shared intents, than one accreted around the kind of twee, precious narcissism that characterized the early days of Ruby and Rails.That comparison is informed by direct experience with both, and is the precise reason why my professional experience with both the language and the platform will to my dying day consist of one successful project a few months long.A good professional community supports a wide variety of learning styles and levels of engagement, and tends to make a lot of resources easy to find for anyone who's willing to put in a little effort of research. The early Ruby and Rails com	throwanem	12.706131	-6.990058	comment	4.0	37.0	1688755704	12.402191
36640556	https://litestar.dev is also reachin	"https://litestar.dev is also reaching 2.0 .it is a lot faster than FastAPI yet much better maintained. Has DTO, event and channels, Repository, Service DDD style framework built-in. No promotional commits. 
I had written the reason of moving away from FastApi here and intro to Litestar 2.0.https://dev.to/v3ss0n/litestar-20-beta-speed-of-light-power-..."	v3ss0n	12.340694	-6.552097	comment	4.0	19.0	1688780791	-9.318898
36644579	To denigrate so much of modern web t	To denigrate so much of modern web technologies in the name of performance, and then use Typescript, over which you have no fine grained control of the performance of the transpiled code, is absolutely laughable.	KnobbleMcKnees	12.343214	-6.760162	comment	4.0	12.0	1688825435	-10.418494
36658755	The playground summarizes it as this	"The playground summarizes it as this via GPT-4:Prompt:Please summarize the following book found on Project GutenbergThe Ruby of KishmoorResponse:""The Ruby of Kishmoor"" is a short adventure story written by Howard Pyle. The narrative revolves around the life of Jonathan Rugg, a young man who is enticed by a mysterious stranger to come to the Caribbean to secure a valuable relic, the Ruby of Kishmoor.Once Jonathan reaches the Caribbean, he learns of the ruby's grave curse. Despite this, his innate curiosity and the prospect of considerable wealth drive him to risk his life and go after the highly prized gem. After facing a slew of challenges and trials, he surprisingly stumbles upon the ruby through sheer luck rather than organized search efforts.In the course of his journey, Jonathan delves"	ec109685	12.634136	-7.0617924	comment	4.0	39.0	1688935858	12.378159
36690510	It is easy. In the olden days it was	It is easy. In the olden days it was the only way.- Get a static IP from your ISP- Point the DNS record at the static IP- On the server run NGINX + Gunicorn + DjangoThat setup will have >99.5% uptime and handle 1000 - 10,000 concurrent users, depending on the complexity of the website.	sjducb	12.819157	-6.4499083	comment	4.0	18.0	1689136440	10.046568
36786548	Any kind of mechanism like that requ	Any kind of mechanism like that requires a mental model that carries a ton of state because it is no longer immediately visible what the scope of execution is.Continuations and the way Erlang handles this have far less mental overhead and help keeping the model and the mental representation of that model in sync. Differences between the two is where bugs will hide.The web isn't asynchronous it's synchronous in almost every aspect the whole reason all this async stuff became so popular (at least, as far as I understand it) is because there is a mismatch between your typical process and having a large number of clients dangling off it. The solution - in my opinion - is to solve this by making it easier to have more processes, which can then block while waiting for the other side, not by addi	jacquesm	12.369032	-7.5147057	comment	4.0	28.0	1689775519	12.861606
36804682	>  It's unfortunately easy to get a 	">  It's unfortunately easy to get a response that includes { ""name"": ""grande latte"" }    type Item = {
        name: string;
        ...
        size?: string;

I'm not really following how this would avoid `name: ""grande latte""`?But then the example response:    ""size"": 16

> This is pretty great!Is it? It's not even returning the type being asked for?I'm guessing this is more of a typo in the example, because otherwise this seems cool."	joefreeman	12.35762	-6.4607034	comment	4.0	12.0	1689878010	-10.276396
36826438	Malicious libraries can steal all yo	Malicious libraries can steal all your application secrets in Elixir	pjullrich	12.671212	-7.4561973	story	4.0	42.0	1690035442	12.928906
36854745	"From the original ""Elixir is Safe"" a"	"From the original ""Elixir is Safe"" article:> 3. “Shared nothing” concurrency> Item 3 is the killer one for safety. Like two people, two processes cannot share memory; they can only communicate by sending each other messages.This makes impossible an entire class of thread safety issues. ""Elixir is Safer"" might have been a better phrasing, but you're misrepresenting the contents of the article if you're claiming that it is limited to expounding ""concurrency is hard and I think this concurrency model is easier""."	csoups14	12.625168	-7.465674	comment	4.0	13.0	1690235568	12.924533
36899339	Ruby meta programming is awesomely p	Ruby meta programming is awesomely powerful, but also one of the main reasons I never want to work in another’s Ruby codebase again. There is always some developer who read some article like this and invents their own DSL to solve a problem that didn’t need one. It’s pure pain to debug it.	actualwill	12.603704	-7.0352654	comment	4.0	15.0	1690488090	12.371767
36949910	How is being “leaky” in any way bad 	How is being “leaky” in any way bad or even good?Every programming language has holes, its just that with PHP the attack surface is much larger, so i guess people find more holes, etc..Are you advocating “security by obscurity”?	tacker2000	12.794268	-6.601532	comment	4.0	16.0	1690843671	10.336519
36987515	Phoenix is obviously “the big thing”	"Phoenix is obviously “the big thing” and no other language/framework combination has something as good as LiveView. Rails cannot compete there. 
Other than that, building Livebook apps for our customer success team has been really great and easy.There’s quite a big push for ML in Elixir right now, and then there’s also Nerves for embedded programming, which I’ve never dabbled in but it looks nice."	cschmatzler	12.854981	-6.9487367	comment	4.0	16.0	1691077810	12.7133045
36987480	I've landed on SvelteKit and classle	I've landed on SvelteKit and classless CSS for most of my hobby projects.I am interested in Elixir though, especially Phoenix, but found it to be difficult to manage and get started with in Windows.Still looking for the easy way into learning to work with web sockets as a 41 year old man with very little spare time.	stilwelldotdev	12.669368	-7.3454676	comment	4.0	19.0	1691077665	12.897419
36988175	> I too had an ephiphany when I real	> I too had an ephiphany when I realized Elixir was actually a Lisp.Is it actually? Last time I looked at Elixir (granted, that was a while ago), the syntax for writing macros was different than the syntax for writing ordinary code, so it fails even at a simple thing like that, it doesn't seem to support homogeneous meta-programming at all.But again, I feel like I might be wrong here and I'm happy to be proven wrong.	capableweb	12.647404	-7.458255	comment	4.0	16.0	1691080627	12.925204
36988501	> Yep this is definitely a problem, 	"> Yep this is definitely a problem, but fortunately the culture/community around Elixir generally tends to frown on unnecessary macros. I heard the saying, ""if it can be a normal function, it should be"" many times, which pleases me.While Elixir people usually say this, they don't at all follow it in practice because of the terrible example set by all the libraries. Phoenix is especially egregious and I can't believe the grandparent didn't bring it up.Looking at Clojure's solution that is (as far as I can see) very popular it makes me annoyed at the relaxed attitude towards macros in Elixir and how bad it actually is:Elixir and `Plug.Router`:    defmodule MyRouter do
      use Plug.Router
    
      plug :match
      plug :dispatch
    
      get ""/hello"" do
        send_resp(conn, 200, ""wo"	59nadir	12.643075	-7.5272546	comment	4.0	25.0	1691082021	12.913305
37111683	Most are not quircks of implicit typ	"Most are not quircks of implicit type conversion, they happen because of the ""no errors, at any cost"" phylosophy of the language.1 + ""five"" is an error in PHP, not some random correct-looking value."	marcosdumay	12.367742	-6.790916	comment	4.0	15.0	1691945716	10.2202635
37145599	I’m surprised to see that the OP, as	I’m surprised to see that the OP, as a Django user, does not call out the lack of an out of the box admin tool that’s not there in Phoenix. Django’s admin is amazing and super useful in production. I love phoenix but I miss an admin tool :(	aloukissas	12.859436	-6.511264	comment	4.0	16.0	1692186394	10.152335
37179179	What is your problem with startup ti	What is your problem with startup time? Have you timed it? How long does it take?PHP starts up from scratch on every request, yet it blows Python out of the water performance wise.	TekMol	12.537494	-6.645475	comment	4.0	14.0	1692380002	10.250768
37205424	One of the most beautiful things in 	"One of the most beautiful things in Ruby that I have ever seen is this fibonacci code.  fib = Hash.new do |k, v|
    next 1 if v == 0 || v == 1
    k[v-1] + k[v-2]
  end"	nix-zarathustra	12.523804	-7.0420384	comment	4.0	21.0	1692591426	12.361906
37210428	I approve of the community building 	I approve of the community building and I am amazed at how productive it is possible to be using modern PHP and frameworks to build websites.But the only thing that will save PHP as a commercial language is if companies start paying PHP developers salaries on par with other modern languages. HR departments pay based on 'market rates' and those rates are simply lower for PHP.	badcppdev	12.767686	-6.6420317	comment	4.0	13.0	1692629906	10.354006
37226681	Ask HN: BlitzJS, RedwoodJS, RefineJS	Ask HN: BlitzJS, RedwoodJS, RefineJS or something else for fullstack JavaScript?	rchaves	12.764658	-6.706914	story	4.0	2.0	1692728627	12.32342
37249508	Ask HN: What is a good web stack for	Ask HN: What is a good web stack for solo founder?	e3bc54b2	12.402056	-7.6306047	story	4.0	1.0	1692888928	-11.084515
37275557	Yes — see my recent article  https:/	Yes — see my recent article  https://slack.engineering/hakana-taking-hack-seriously/We use a few languages to serve client requests, but by far the biggest codebase is written in Hack, which runs inside an interpreter called HHVM that’s also used at Facebook.	muglug	12.782299	-6.576293	comment	4.0	27.0	1693074716	2.9736595
37278991	Two Erlang patterns I love	Two Erlang patterns I love	todsacerdoti	12.547774	-7.5057526	story	4.0	45.0	1693104070	12.921012
37305791	> José: Why did you choose Elixir?> 	> José: Why did you choose Elixir?> Steve: We chose Elixir because we were looking for a system that was easy for programmers to understand and could take better advantage of our servers. I was intrigued at Elixir’s combination of friendly syntax, powerful metaprogramming features, and incorporation of the Actor model.Am I wrong or is this guy in some sort of bubble where only functional languages are taught?	kramerger	12.65073	-7.4643083	comment	4.0	34.0	1693306232	12.931665
37309225	Python grew out of a myriad of appli	Python grew out of a myriad of applications that built on hard to replicate components, while Ruby relied only on web development which is remarkably subject to fashion.Python is very simple making it easy to learn. Thus, it became more and more popular for fields where programming is not the main task, like science. It is also very easy to extend with C. So, these fields could bolt on time-tested scientific code into their Python scripts.Ruby seemed to be entirely tied to Rails.When the 00s and 2010s came with needs for web development and scientific computing for big applications (e.g. ads on social media), there were multiple language options for web development but really only one that made it easy to onboard academics into the task of building software systems.From there, it was just 	huevosabio	12.50693	-7.007727	comment	4.0	29.0	1693322409	12.375721
37313796	"Only one of the items in your ""such "	"Only one of the items in your ""such as"" list is unique to python's philosophy, and that is ""there should be one way to do it"". Ruby embraces the many ways to accomplish something, it's true. However, the three others are not unique to python. Ruby especially embraces ""readability counts"". And I can't think of anything in the ruby language itself that is implicit over explicit. Perhaps you are thinking of rails and comparing that to python."	CTmystery	12.393089	-7.0533834	comment	4.0	32.0	1693341968	12.373847
37314727	Today I learnt I'm fucking old. My f	Today I learnt I'm fucking old. My first web programming exposure was Perl CGI scripts	eddy_chan	12.432361	-6.7051225	comment	4.0	12.0	1693346543	13.114089
37313774	You're forgetting the period of Ruby	You're forgetting the period of Ruby's popularity in the devops world, especially Chef and Puppet.	cutler	12.673547	-7.0011516	comment	4.0	16.0	1693341880	12.365676
37314008	What concepts does a language force 	"What concepts does a language force a new user to be aware of, and how reliable are user's first intuitions about those concepts?I would argue that Python dominates Ruby in this metric.New users wonder how to call functions. They form an intuition (""use parenthesis""), but it's unreliable. ""Oh, parenthesis are optional--oh, parenthesis are only optional sometimes"".New users wonder what a function is exactly. They form an intuition, but their initial intuition doesn't encompass all 7 different types of callables in Ruby, so many surprises and frustrations await.Python is much more boring in this respect, users are more likely to form accurate intuitions.What follows is my subjective experience as I came to like Python but hate Ruby: I learned Python in the mid 2000's while trying to script A"	Buttons840	12.486252	-7.0340424	comment	4.0	44.0	1693342770	12.387621
37314034	For me, the Ruby community's comfort	For me, the Ruby community's comfort with monkey patching was a big turn off. In Python, you can hack around on class and replace its methods, but if you do, it's expected that your coworkers might stick you in a dunk tank and sell tickets. It's just not the thing that's done.	kstrauser	12.511886	-7.029634	comment	4.0	18.0	1693342865	-8.450726
37343475	Elixir/Erlang Secure Coding and Depl	Elixir/Erlang Secure Coding and Deployment Hardening Guidelines	justinludwig	12.625618	-7.483938	story	4.0	195.0	1693514873	12.928353
37348769	Well, PHP has no client-side renderi	Well, PHP has no client-side rendering, so it's a weird comparison	awestroke	12.696064	-6.5207114	comment	4.0	18.0	1693562568	10.193027
37350310	The Janus System: Multi-Paradigm Pro	The Janus System: Multi-Paradigm Programming in Prolog and Python	woolion	13.115995	-7.2878747	story	4.0	85.0	1693573566	-12.477182
37380716	Anyone remember the unlimited number	"Anyone remember the unlimited number of ""build Twitter/blog/todo list in 15 minutes using Ruby on Rails"" tutorials?It's great that we've got it down to 2 minutes.However anyone who has worked in a rails shop has experienced that somehow that initial set up seems to make everything else down the line get a bit more time consuming.In fact, I would posit that there might be an inverse correlation between how quickly you can get a blog up using framework X (including an LLM) and the long term scalability of that project as you start adding features and engineers.Legacy rails apps can be terrifying, I can only image the horrors that will be legacy LLM apps if they can even manage the structural cohesion to become legacy apps."	PheonixPharts	12.759234	-6.880168	comment	4.0	12.0	1693837137	12.334016
37411602	Hi all, I work on the TypeScript tea	Hi all, I work on the TypeScript team. There's already a lot of feedback on the issue itself from users urging the authors not to make this decision, so I will hold back from adding to the noise on that issue. Every team is entitled to make the decisions that they feel are best for them, and I don't think it'd be productive to change anyone's mind in this case.Instead I'll just mention that I always welcome thoughts on some of the challenges teams encounter when writing in TypeScript. It helps make the language better. If there's anything you often hit, you can comment here, create an issue on the issue tracker, or reach out to me at Daniel <dot> Mylastname <at> microsoft <dot-com>	DanRosenwasser	12.335401	-6.9029317	comment	4.0	13.0	1694035781	-10.443411
37411681	TS feels like a fever dream. It's as	"TS feels like a fever dream. It's as if a concentrated group of people were so convinced of a solution, that despite all available ""parol"" or academic evidence, they foisted it upon the ecosystem doing untold amounts of damage for years to come.And if you don't use it, well it's because you simply don't understand types and your code base will be riddled with bugs! (lol)The best, most testable, falsifiable argument I have heard for typescript is that helps with certain IDE's; but personally I haven't noticed a difference. In fact, TS causes me to go into dead ends with VS Code trying to hunt for the actual implementation of something in sizable code bases to the point where I'll just look at even the minified code to figure out what's actually going on.Because at the end of the day, TS isn"	whoknowsidont	12.329975	-6.7971153	comment	4.0	14.0	1694036101	-10.4385
37414628	Is the same trick possible with othe	Is the same trick possible with other BEAM languages? E.g. Elixir?	xvilka	12.5473	-7.4401913	comment	4.0	12.0	1694059463	-8.769502
37414828	> One critical difference is that in	> One critical difference is that in Erlang, processes can run on remote machines, seamlessly.Is there a concise way to explain how Erlang achieves this property?	thakoppno	12.52004	-7.515512	comment	4.0	13.0	1694061611	12.916176
37416817	Don't know Erlang aside from high le	"Don't know Erlang aside from high level understanding about the language (basically know what one who read about it, but never programmed in it, would). Why is this needed (or, at least why is it nice to have)?:  universal_server() ->
      receive
         {become, F} ->
             F()
      end.

I mean what purpose does it serve other than having F() directly? One could just directly spawn F on the remote machines, no?(Perhaps that would need to have the code for F already on those remote vms, whereas this eg. also serializes and forwards F's code?)I would understand the utility if this also handled some common boilerplate, but it seems to just wait for become F message and then doing F()."	coldtea	12.509311	-7.5164394	comment	4.0	15.0	1694081250	12.885891
37431843	I wish that elixir had some syntax t	"I wish that elixir had some syntax to simplify variable rebinding when returning from an if statement (as opposed to an if else). For example, some way to say leave the variable unchanged if the if statement is false instead of having to clutter up the program with one line else clauses.Eg. 
myvar = 5
myvar = if somepredicate() do
           200
        endWill currently assign None to myvar if somepredicate is false."	anonymousDan	12.630076	-7.4550266	comment	4.0	15.0	1694168910	12.930338
37443046	> You wouldn't pick it for your job 	"> You wouldn't pick it for your job interview's coding test if you had a choice (Python all the way there),I do actually pick it for several reasons.  1. I want to know if the environment I am going into is pragmatic about languages.  If you are going to refuse to continue working with me over something so minor as PHP then we aren't a culture fit.
  2. I want to showcase my best.  I know this language in and out.  It's the first language I learned and I have the greatest ease of building algorithms with it.  I've had interviews where I was asked to do something with PHP that PHP did not support and I found ways to make it work.
  3. In some ways I love the conversation that comes with positive interviews when using it.  Oftentimes the interviewer isn't very familiar and it sparks discussi"	kxrm	12.745571	-6.644026	comment	4.0	30.0	1694244380	10.323804
37443284	Maybe not for the user, at least not	Maybe not for the user, at least not directly, but developer experience is something to optimise for.PHP is also the one language whose choice can make an impact on users' experience, since its shared-nothing (sans caches) runtime model is almost CGI-like and can, in my experience, lead to higher latency, as each request simply does more. Maybe some experienced PHP devs can tell me how they combat this?	dvdkon	12.732403	-6.62029	comment	4.0	15.0	1694247494	10.281541
37443603	PHP has had a built-in web server si	PHP has had a built-in web server since version 5.People use Apache or nginx because they want to, but because they need to.	xorcist	12.748943	-6.5803595	comment	4.0	14.0	1694251820	10.272919
37443938	This is great, and I'm glad for the 	This is great, and I'm glad for the PHP developers out there. But if I go job hunting, it's not PHP skills that offer the highest earning potential. At least not that I've encountered.How much revenue generation occurs on PHP? I'll cede the argument about the e-commerce platforms and CRMs, but I'm just not convinced that PHP is where a budding developer should be focusing their efforts. You enter the business/corporate world and there are tons of applications out there running the world, not just websites. Those applications are predominantly written in languages like .NET, Java, JS/ECMAScript, Python, Rust, and Go. Also, among the managed languages like .NET/Java/JS the knowledge is quite transferrable and sometimes almost identically named.I'm not trying to bash PHP as a language, but ev	voidwtf	12.765809	-6.6341615	comment	4.0	18.0	1694256488	10.338411
37443693	PHP is akin to, I don't know, the Su	PHP is akin to, I don't know, the Subway (fast food restaurant chain) of programming languages?You don't hear too much about it. You almost never notice it unless you're actually looking for it, unlike McDonald's with its ostentatious golden arches.It's popularity is waning. But it's still everywhere. [0] There are a hundred other sandwich chains that have tried to do it better but none have managed the ubiquity of Subway.People like to look down on it and espouse the alternatives, but when it comes down to it fast food can only ever be so good.I guess that means that JavaScript is McDonald's?[0] https://en.wikipedia.org/wiki/List_of_the_largest_fast_food_...	matthiaswh	12.579313	-6.4628954	comment	4.0	13.0	1694253010	10.259714
37452115	> Goldman Sach uses Erlang in its he	> Goldman Sach uses Erlang in its hedge-fund trading platform for its low-latency (microseconds) event-driven order-submission engine.if it's good enough for a hedge fund HFT platform, it's good enough for anyone aiming for low latencyhttps://medium.com/hybrid-cloud-engineering/beam-otp-on-ocp-...	keep_reading	12.552268	-7.4610653	comment	4.0	13.0	1694310238	12.835057
37459903	Ask HN: How do you relate rendered H	Ask HN: How do you relate rendered HTML to the TypeScript file it came from?	jztan	12.359356	-6.7942657	story	4.0	7.0	1694378766	-10.467076
37478144	I remember learning Prolog during my	I remember learning Prolog during my degree in AI + Comp Sci about 25 years ago. Our NLP module used it heavily.It was frustrating and annoying at first, but once you get comfortable, surprisingly fun (and also a great intro to recursion, as that's the only way to iterate).	philjohn	13.138816	-7.2902613	comment	4.0	12.0	1694506737	-12.494272
37480113	Elixir is bolted on top of erlang so	Elixir is bolted on top of erlang so reading error stacks with erlang is common, needing to grok erlang concepts and docs is also sometimes needed. This makes it odd to work with. I know if I'm using a Java, Ruby, Python or PHP framework (django, laravel, rails, whatever latest java web framework) I can read thru docs or source code and troubleshoot stack traces without having to learn another language. Its unavoidable with Elixir beyond simple apps.	matt_s	12.643247	-7.4787936	comment	4.0	14.0	1694521865	12.92661
37481468	Overwritten article complaining abou	Overwritten article complaining about mature framework the author admits he didn’t even attempt to contribute to. I’ve loved Rails since 2008. Perfect? No. Wonderful? Yes.	block_dagger	12.7637	-6.939453	comment	4.0	13.0	1694527451	12.355916
37483902	For building CRUD web apps Django an	For building CRUD web apps Django and Rails are truly in a league of their own[^1].Many frameworks try to be good at this but finish development at a level of abstraction below these frameworks, leaving the last level to a plugin ecosystem that requires so much more work to wrangle into a fully working web app (see: Flask and its modern successors in Python).Other systems come at this from the opposite end, trying to be low-code or less-code, like headless CMSs or static site generators. The problem at that end always seems to be a lack of flexibility and over-reliance on proprietary systems or SaaS products.Django is just Python. Rails is just Ruby. There's nothing special to them and extending when necessary is often trivial, particularly because they have such mature extension points.Th	danpalmer	12.798055	-6.654264	comment	4.0	18.0	1694536710	10.254145
37485003	Can you think of a complicated app t	"Can you think of a complicated app that utilizes Django to its fullest extent? I'm trying to get a better view of what Django is capable of and I find it's helpful to see both the simplest example possible and the most complicated example possible. ""Design for the extremes"" as Don Norman would say."	lylejantzi3rd	12.82062	-6.5261645	comment	4.0	20.0	1694541631	10.083123
37539173	Sorry, what? Is not java toghether w	"Sorry, what? Is not java toghether with Ruby maybe the most hardcore OOP enthusiasts that uses inheritance for ""most stuff"".Has the java culture move so far the last decade ?"	sisve	12.35298	-7.067498	comment	4.0	15.0	1694901684	12.28407
24434551	I used my pinned tweet (https://twit	"I used my pinned tweet (https://twitter.com/hyperpape/status/1050402656181735426)""Learning Perl6 is like being stuck in a small dark room with a bat that's flapping around wildly, and talking to the bat and slowly coming to understand what it is like to be a bat.""and the results are quite good: https://same.energy/?q=Learning+Perl6+is+like+being+stuck+in....I wouldn't say they 100% have the same energy in every case, but I enjoyed reading them."	hyperpape	12.334575	-7.045294	comment	4.0	16.0	1599758953	13.185971
24434924	One of Ruby's philosophies is to pro	One of Ruby's philosophies is to provide multiple ways to express the same fundamental operation so that it can conform to your thoughts instead of forcing your thoughts to conform to it. You can still do it the old way where it makes sense. Whether this philosophy is helpful or harmful is another debate.	kemiller	12.539087	-7.080529	comment	4.0	24.0	1599761088	12.395267
24444340	fast_jsonapi appears to be abandoned	fast_jsonapi appears to be abandoned. Community fork can be found here: https://github.com/jsonapi-serializer/jsonapi-serializer	cooljacob204	12.4084835	-6.5214796	comment	4.0	12.0	1599840988	-9.148157
24452421	Elixir looks pretty interesting howe	"Elixir looks pretty interesting however lack of static types has held me off from picking it up. Curious what the experience of people with typespecs and  Dialyzer has been:
1. How close do you think it comes to static types?
2. Does it have good IDE plugins providing type errors as you code?"	jatins	12.48503	-7.4248815	comment	4.0	14.0	1599918873	12.911039
24453193	I've been writing Elixir professiona	I've been writing Elixir professionally for a couple months now and I find it fascinating how many tools Elixir gives you to play with.However, I started a toy project in it and immediately ran into trouble due to its dynamic nature. Printing function arguments to see what they are, runtime errors... Is there a way to get around this besides adding spec tags on everything?	Kaze404	12.635219	-7.4478135	comment	4.0	17.0	1599924545	12.9248905
24462897	deno is 'node' shifted by two letter	deno is 'node' shifted by two letters. What do you use nodejs for? That's what you use deno for. It exists in the same space.So in short, deno is a javascript interpreter suitable for local scripting, server/services, etc. Just like node.You can probably use it for desktop applications, but it more closely targets server code, again like node.So how does deno differ from node? It has a different module system and stdlib (better, more modern). It has first-class typescript support. It has much better security controls so that it's possible to use it to interpret untrusted code (this is not security advice).The 'untrusted code' bit means deno's also gunning a little for the niche lua and other embedded scripting languages occupy, but I don't think it has much of a foothold there yet.	TheDong	12.478374	-6.438487	comment	4.0	18.0	1600021966	-10.909873
24463304	Ruby went through a similar period w	Ruby went through a similar period when transitioning from 1.8 to 1.9. Strings learned about encoding, breaking most libs handling strings, some syntax was added, some removed. It was possible to write 1.8 and 1.9 compatible code, but it took some effort. However, the big players in the community, rails etc. tackled that change head on. It was a point of pride for libraries to be 1.9 compatible. And everyone moved on. I’m always puzzled by how hard the python community ist stuck on 2.x	Xylakant	12.408677	-6.9576373	comment	4.0	14.0	1600025613	12.315769
24503803	Has anyone used elixir for building 	Has anyone used elixir for building command line tools? It seems like this would be very useful for distributing them.	abhijat	12.666369	-7.437557	comment	4.0	16.0	1600345960	12.955153
24519248	It's not that we can't implement it 	"It's not that we can't implement it like that, the real challenge is in minimizing breakage from v2. We decided it's better to not completely alter how props are declared because that would be too much breakage.Instead, there's the compiler-based approach with `<script setup lang=""ts"">`: https://docs.google.com/presentation/d/1VjBM6ae-fuawK1TltYLX... (runtime props definitions auto-generated from TS interface)"	EvanYou	12.62505	-6.5117865	comment	4.0	12.0	1600448822	-10.407345
24539288	Doesn't the new ruby JIT already do 	Doesn't the new ruby JIT already do the same thing?	ben-schaaf	12.562914	-7.0435543	comment	4.0	12.0	1600656266	12.360314
24540203	I can echo this sentiment. I want to	I can echo this sentiment. I want to love Ruby, but when I work in project in it, I eventually get to point where I have trouble finding where something is defined, which wastes my time — and  in general, to your point, it’s harder to find where anything that’s getting pulled into a file is defined. Unfortunately, this dynamism is a concept in Ruby that is part of the reason why it’s so great.However, recently I started a project with Ruby, thanks to language servers. I’m hoping this solves that issue, but it’s too soon to say.There’s still other issues with the require mechanism, and Ruby in general, and other languages to try, e.g. Elixir and Crystal. I haven’t been sold yet in terms of what Ruby excels at, and those languages are each different in their own right.	samtheprogram	12.534866	-7.0429883	comment	4.0	17.0	1600667125	12.386831
24540884	Imagine going all in on a Ruby proje	Imagine going all in on a Ruby project with this specialized library that literally changes the way you write Ruby and still thinking that's a good idea.Keep Ruby as it is - slow and expressive. If you need to speed up, get faster hardware.	jonny383	12.628926	-7.0276666	comment	4.0	16.0	1600675048	12.33918
24540946	This is what brought me to RoR land.	This is what brought me to RoR land... and this is what made me leave.I agree rapid prototyping is an excellent point for RoR but when you need to actually evolve the project for years, it gets really tedious and hard.So for a dev shop RoR is quite fine -- you make the project, do very little iteration on it, and ship. That works well and I've experienced it.For longer-lived projects however, Phoenix is miles ahead. Even Rust's Rocket, but only if you are willing to invent a lot of stuff yourself (auth for example).	pdimitar	12.679107	-6.865166	comment	4.0	24.0	1600675822	12.275717
24585669	I always admired PHP’s runtime for t	I always admired PHP’s runtime for the way it serves web requests.  I think it’s a similar ethos to that described in the post, even though Erlang and PHP are quite different.Start from nothing.  No shared state with previous requests.  Plough right through as many errors as you can.  Log them, but don’t stop.  Keep executing code until you run out of things to do.	gorgoiler	12.7418585	-6.6267962	comment	4.0	14.0	1600997362	10.287384
24593792	I really wish Ruby would grow up and	I really wish Ruby would grow up and deprecate method_missing	stevebmark	12.538868	-7.0711083	comment	4.0	25.0	1601065873	12.367788
24594209	Question: will the nonblocking sched	Question: will the nonblocking scheduler start to make Ruby concurrency competitive with e.g. Node.js and Go? Currently Ruby mostly uses heavyweight threading mechanisms that cause trouble for I/O-bound microservices.	jasonhansel	12.623099	-6.9977894	comment	4.0	17.0	1601068703	12.332334
24594081	It won't be optional in Ruby 4, most	It won't be optional in Ruby 4, most likely.	zelly	12.612908	-7.0492206	comment	4.0	12.0	1601067925	-7.9385395
24595334	I only ever tried out a rails tutori	I only ever tried out a rails tutorial once, and coming from a C/C++ background, but having used with many languages, too many things felt like magic back then, but no further experience with the language itself, so can’t really judge it.However, now I’m on the operational side of things, and there are 2 types of applications I avoid to deploy/maintain, mainly because of their runtime: Java and Ruby apps. It’s very likely the Ruby runtime has improved, but we actually set up a haproxy with multiple instances of the same ruby app, which we just restarted every 2 hours, just to keep it running properly. Upgrading ruby back-then was a mess, and could break a lot of things. I can’t comment on the language itself, but the runtime left a very bad impression. I since then (4/5 years ago or so) ha	koffiezet	12.690726	-6.9687514	comment	4.0	13.0	1601079070	12.356538
24596958	Is wp still php?What if you want a c	Is wp still php?What if you want a cdn outcome which doesn't drive to an sql backend?I've yet to experience wp consciously without it making me wince. I know a lot of former print press is using it, so the for profit sector likes it. That does not axiomatically make it best of breed.Being php is also not axiomatically worst of breed. The questions are decoupled really.1) is wp still php2) is wp best of breed.3) if you want static site through cdn is wp the best fit?	ggm	12.768088	-6.6032515	comment	4.0	18.0	1601103550	10.325251
24598795	"Fair enough. Probably at ""agree to d"	"Fair enough. Probably at ""agree to disagree"" here.I'll agree that its easier to do custom post types on other CMS. But sometimes at the cost of real overheads in terms of complexity for users to swallow to get there.Caching is built into the core, which is what all caching plugins leverage, the interface to it is hidden.PHP is a theming engine.I've never got why people escape into Blade, Twig or so on. PHP was designed to have loops, logic, to take variables and so on and interpolate them within HTML. It has an alternative syntax to make this easier. It's one of the unique capabilities the language has over almost all other languages you'd use on the web. More often than not you end up escaping into pure PHP in any case in something like Blade.> But the problem isn't random sites use WordP"	conatus	12.754958	-6.606503	comment	4.0	16.0	1601127806	10.296962
24647457	Interesting. Consider that Github us	Interesting. Consider that Github uses lots of Ruby but the tool does not support Ruby from the get go.	ksec	12.573562	-7.0432134	comment	4.0	16.0	1601527914	12.365079
24653678	> In real life, we don’t need to wri	"> In real life, we don’t need to write code with receive do loops. Instead, we use one of the behaviours created by people much smarter than us.I make more than half of my income from Elixir. That said, 
the naive receive loop is much easier to understand than any of the GenServer examples. They pollute the module logic with all that handle_* boilerplate. I believe that neither Erlang nor Elixir got the right abstraction there. Method definition in any OO language is easier to understand. At least Elixir should have taken Agent and made it an invisible part of the language. All those calls to Agent in this example https://elixir-lang.org/getting-started/mix-otp/agent.html are still boilerplate."	pmontra	12.616252	-7.472048	comment	4.0	34.0	1601573115	12.932415
24653824	> Forget using a million different t	> Forget using a million different technologies for things like background jobs, OTP can supply you with everything.It's true but in practice this usually doesn't pan out.For example with just background jobs alone there's the idea of queues, tracking failures / successes, exponential back-off retries, guaranteeing uniqueness, draining, periodic tasks and everything else you'd likely want in a production ready app.Typically you'd use Redis, Postgres or something else to help with this. Fortunately https://github.com/sorentwo/oban exists and uses Postgres as a back-end with close to 10,000 lines of Elixir.	nickjj	12.670175	-7.4257803	comment	4.0	21.0	1601573705	12.859114
24693768	Disregarding popularity, why should 	Disregarding popularity, why should I switch to C#/dotnet from PHP/Go/Ruby?	bovermyer	12.339708	-6.7300963	comment	4.0	29.0	1601945590	10.328239
24698978	Pandemic or no pandemic, most jobs a	"Pandemic or no pandemic, most jobs are at least local to the country. If he is from Russia it's way harder for him to get a job in a U.S / EU company. 
Also - if it's hard for him to get an Elixir job now (and let's assume he knows if it's hard or not and heard of the concept of remote), while Elixir is past it's peak, is it a good bet to keep going the Elixir route?"	joelbluminator	12.698698	-7.454454	comment	4.0	29.0	1601999226	12.926048
24741657	(edit 4: my comment is off-topic, so	"(edit 4: my comment is off-topic, sorry)Mathjax reminds me of the AJAX hype. What happened to it? These days no one talks about AJAX. There was material design a few years later but that was just the looks.Is AJAX now replaced with React.js? or a combination of other stuff (like HTML5 and modern-JS and React.js and stuff)?edit: I just looked up Angular and apparently it was rewritten in Typescript, a strict superset of JS. This doesn't make sense. JS is known for massive amounts of cruft. An improvement would've been a scripting language that compiles to ""JS: the good parts"", i.e., a subset of JS. But now we should have ""Typescript: the good parts"" because TS inherited all the bad parts of JS?edit 2: It turns out, there is valid JS that is invalid TS [0]. And yet, TS is described on wikipe"	fizixer	12.420002	-6.656789	comment	4.0	13.0	1602361790	-10.475296
24761089	> It's so slow (iteration speed) and	"> It's so slow (iteration speed) and you need to jump through a billion hoops of complexity all over the place. Even dealing with something as simple as loading environment variables for both local and ""real"" function invokes required way too much effort.Honestly, it reminds me of PHP development years ago: running it locally sucked, so you need to upload it to the server and test your work. It. Sucked."	wiremine	12.694302	-6.612396	comment	4.0	24.0	1602548842	10.285447
24765464	Ask HN: Does your framework have a L	Ask HN: Does your framework have a LiveView answer?	yawn	12.848127	-6.964565	story	4.0	7.0	1602596503	12.780692
24817238	> What I find odd is that the table 	> What I find odd is that the table shows Typescript as 7x slower than Javascript.Including type checking and transpilation in the timing, I assume.	cnasc	12.359177	-6.7776556	comment	4.0	16.0	1603022987	-10.447498
24845587	Counterpoint: a lot of ruby devs are	Counterpoint: a lot of ruby devs are very familiar and capable with ActiveRecord. Al lot of python devs are familiar and capable with using the Django ORM. Why are these ORM more likely to limit your application? You provide no proof or explanation of your statement.	lcrz	12.802325	-6.8164506	comment	4.0	23.0	1603265759	12.286388
24851774	I wish there was a python implementa	I wish there was a python implementation that ran on BEAM.	adenozine	12.395483	-7.3363004	comment	4.0	18.0	1603312020	-8.922706
24866713	It's becoming kind of an Enterprise 	It's becoming kind of an Enterprise language [1]. Don't get me wrong I think PHP is getting cooler, hopefully everybody catches up and the fact that You can have a shared hosting for pennies run Your PHP code really puts it at an advantage compared to others.[1]: https://github.com/joaomilho/Enterprise	sdfhbdf	12.765325	-6.609276	comment	4.0	46.0	1603436304	10.316454
24866886	This is such a shallow elitist comme	This is such a shallow elitist comment. A lot of the common criticisms levied at PHP have been corrected years ago, and PHP is responsible for hundreds of billions of dollars of turnover globally.Of the top 10 websites in the world, PHP is partially or wholly powering more than half of them. Wikipedia, Wordpress, online retail.I have personally created 6 figures of value because I could quickly dump some PHP scripts on a VPS server and start doing business.My employer makes billions with PHP. It's not perfect, but it's rock solid for gigantic businesses.Sure you can build yourself perfect shiny web services using modern bleeding edge languages, meanwhile businesses using PHP for decades are innovating and printing money daily.	0xy	12.777788	-6.6305966	comment	4.0	19.0	1603438274	10.318586
24867154	I agree with you. Symfony and compos	I agree with you. Symfony and composer in general has just turned our code base into some kind of fugly java like monstrosity.When I used composer the first time I really enjoyed it, that project also used Silex a minimalistic symfony2, which I also really liked. But what I found out is that in general it is really terrible to be dependent on others, as Silex was dropped by Potencier and my project is left in limbo, sadly. Its very sad because its one of the coolest things I ever worked on, and its still in use today many years after. But I am worrying that some time in the feature, a vulnerability or problem with Silex comes up, the company will have to rewrite the project completely some day.I worked alot with Drupal7, absolutely hated it mostly because the hook system was hard to rememb	cannedslime	12.75278	-6.636935	comment	4.0	12.0	1603441339	10.324896
24867242	That's what baffles me with PHP. Ins	That's what baffles me with PHP. Instead of building on PHP's unique capabilities, they try to become more like Java. When PHP was and is quite successful as server-side language for HTML templating, rooted in embedded PHP triggered from SGMLish processing instructions in otherwise static HTML. It's only that they made such a hack job without context-dependent, HTML-aware escaping, making it a primary vector for injection attacks.	tannhaeuser	12.716207	-6.4638124	comment	4.0	21.0	1603442473	10.247246
24867714	"""he answered that 100-200 request pe"	"""he answered that 100-200 request per second is more than enough for most use cases""Exactly this. If you already know PHP and can produce results (mostly CRUD apps) and it doesn't need millions of rps, why do we need to use another language because they are so much better ? So much better at what ? It is like saying ""I have a hammer, so everything looks like a nail to me"". Not every web app has to be written in Lua/Rust/Go/Julia etc. Each language comes at a cost. No free lunch.""But why should anyone start a new project in php now that we have so many good alternatives?""Because everything comes at a cost. You want to use Rust instead of PHP ? Sure, sounds great. Now lets go find a really good Rust developer who also understands how to host it correctly and then if he leaves, can I easily f"	codegeek	12.747529	-6.664358	comment	4.0	25.0	1603447168	10.323474
24868807	> I don't really understand why in 2	> I don't really understand why in 2020 there's still this kind of blind hatred against this language.I don't either, but what I also don't understand is why in 2020 anyone would use PHP over many available vastly superior alternatives.Other than keeping old stuff running, why do people keep beating this dead horse? I just don't get it.	inoop	12.773173	-6.6507635	comment	4.0	12.0	1603456758	10.359225
24937651	> Blocks are one of the most confusi	> Blocks are one of the most confusing, yet most powerful elements of Ruby. They allow you to group expressions, save them to a variable, and even pass them to a method. I’m still getting used to blocks and realizing their usefulness, but overall I feel that they condense a lot of code, and also make code more reusable and extensible.Agreed re: confusion!  I've been using Ruby (and Crystal) for years and I'm only slightly ashamed to admit that while I fully understand how to _use_ blocks, I haven't really truly grokked them.  I kinda use them and use yield and it all works.But!  Something clicked recently, and I'm not sure why it took so long (maybe it was lots more experience with JavaScript lately?) and I feel kinda dumb that I just realized this:Blocks are just anonymous functions.  Tha	nlh	12.421459	-7.080051	comment	4.0	13.0	1604016594	12.374298
24941534	Saying that it can replace Django is	Saying that it can replace Django is quite an overstatement! The only framework which can be compared in features is Rails and Spring, nothing else even comes close! Not to mention the productivity benefits... Rust is a good language, but with these compile times for a complex Django-like web application? No thanks.	kissgyorgy	12.71306	-6.5833697	comment	4.0	12.0	1604061068	9.995011
24952353	> somehow gets rid of the undeserved	> somehow gets rid of the undeserved reputationThat reputation is a competitive edge for companies and people who embrace PHP. They get shit done for the business and grow revenue while the rest of the tech community is rewriting basic tooling for the 50th time in Rust on a Kubernetes-powered back-end with a React front-end powered by a GraphQL API layer.	altdatathrow	12.758995	-6.611759	comment	4.0	30.0	1604159146	10.315823
24952579	I have no metrics on this but I was 	I have no metrics on this but I was under the impression that due to the size of the PHP community the package ecosystem specifically for web is probably larger. The community itself being larger is of course another plus as it means you're able to get easier access to the knowledge of others.Thirdly of course the shared hosting providers (by what I've seen in the past) usually support PHP almost always - this is not the case for either Ruby or Python.	coding_lobster	12.711851	-6.6833205	comment	4.0	14.0	1604160525	10.320382
24953652	Did Perl or C protect you against th	Did Perl or C protect you against this when PHP came out?	disgruntledphd2	12.47277	-6.846624	comment	4.0	14.0	1604166910	13.132183
24998686	I was thinking there might be someth	"I was thinking there might be something interesting here. Then I got to this line:  ""I started a new job working on a large typescript React project. Vim couldn’t handle opening a TSX file larger than 50 lines without crashing.""

And I was like LOL WUT?  The author's case in this regard woudl be stronger if they helped us understand what was actually going wrong.  Bad plugins?  Conflicting macros?  I'm pretty sure that simply opening a 50 line TSX file does not normally crash vim."	ezekiel68	12.337472	-6.7726207	comment	4.0	23.0	1604587684	-10.448759
25006246	One of Ruby’s pillars is metaprogram	One of Ruby’s pillars is metaprogramming. Crystal lacks that entirely, making it a non-option for many Rubyists.	block_dagger	12.624859	-7.2405524	comment	4.0	15.0	1604654141	-11.262807
25007303	For anyone who likes the idea but do	For anyone who likes the idea but doesn't use Django, check out https://restyled.io/ - it supports a bunch of tools [1].It's also open source and self-hostable for folks who like the idea but don't trust that automation to a third party.[1]: https://docs.restyled.io/available-restylers/	wfleming	12.855131	-6.4700456	comment	4.0	24.0	1604667930	10.055757
25048577	Marco is right about PHP's documenta	Marco is right about PHP's documentation. I've felt for a long time that the quality documentation PHP provided played a major role in the language's success.	Zelphyr	12.7492075	-6.6323667	comment	4.0	15.0	1605029811	10.335389
25059027	This illustrates one of the biggest 	This illustrates one of the biggest downsides of dynamic languages - refactoring. Compile-time checking saves you from having to detect copy/paste/delete errors at runtime. A good IDE can help, but it's no substitute.This is especially problematic in Ruby, as the author mentions, as the language is so dynamic that you're stuck having to write 100% coverage to ensure that variables are even named correctly.	drchopchop	12.46005	-7.0909195	comment	4.0	35.0	1605107761	12.383992
25062150	I've seen some shops do things like 	I've seen some shops do things like this. Making their own tools to get around odd shitshows they've gotten themselves into. I suspect that there are a number of people within the org that aren't fans of Webpack or some other set of tools that would have made some of their decisions end up with the consequences in the article. They didn't quite state it but I suspect they're trying to use a specific stack instead of a more obvious stack to make typescript work.edit: just adding though, that this isn't surprising with a dev base of 2000 js developers.	coding123	12.388384	-6.718894	comment	4.0	37.0	1605124107	-10.452966
25062025	Oh wow they went from C/C++ to JavaS	Oh wow they went from C/C++ to JavaScript? That's just trading one dangerous footgun for another. Glad to see they finally found a better tool. I can't function in JavaScript without Typescript...I constantly have to be looking up docs cause I don't have intellisense, and once something works I'm terrified to ever touch it again. Typescript made front end development reasonable again...not perfect, but not so pathetically bad that I want to rage quit like I did before.	darksaints	12.350429	-6.6191015	comment	4.0	25.0	1605123475	-10.441079
25063843	Does anyone know if this site was re	Does anyone know if this site was recently put together or if it's been around all along? WHOIS says the domain was registered back in '14. I love _why's writings and largely credit him with getting me excited about using Ruby back when I was in college. Really nice to be reminded of his work.	Falling3	12.705739	-6.9831843	comment	4.0	12.0	1605134182	12.372559
25103319	I'm curious, and I know this is a ra	I'm curious, and I know this is a random thread to post this question, but how do you handle the fact that the Elixir process might be shut down with regards to necessary persistence of any message queues? Put differently: I consider both message queues and databases in my system to be part of the stateful workloads and the web app part of the stateless workloads (can-be-killed-at-any-time). How do you handle the case where your stateful workload (queueing) now lives within your Elixir process which might be killed at any instance?	heipei	12.598224	-7.473209	comment	4.0	12.0	1605463907	12.91743
25105428	Rails makes it really easy to do som	"Rails makes it really easy to do something 10 different ways to get the same result. Unfortunately, most of which aren't the most performant way. In my 10 years of building Rails apps of all different sizes, and seeing some very mature apps in production, this is the most common culprit I've seen.I currently work on a rather large Rails app for a site that most of us here use. A common pattern for our performance pitfalls are things like this:  Tag.all.map(&:name)

versus  Tag.all.pluck(:name)

Using `#map` will instantiate a `Tag` object and do all the slow(er) metaprogramming to get you the syntactic sugar that makes interacting with an ActiveRecord object a treat. It does this, and then you only hit `#name`, completely wasting all that effort.`#pluck` will change the SQL from `select * "	joshmn	12.9438	-6.669117	comment	4.0	13.0	1605478391	12.244863
25148587	The issues raised here completely al	The issues raised here completely align with my problems with Rubocop.It seems that a lot of people think that one of the main goals for code linting is consistency, when that shouldn't be a goal at all. Consistency is merely a tool, the goal should be readability/maintainability. Consistency is just one tool that is available to us in persuit of that goal.I've hit similar issues to those mentioned in the article and it absolutely infuriates me when I have to jump through hoops (or worse, reduce the readability of my code) to push well thought out code that communicates intent, only to fall foul of a robot that doesn't understand nuance.Don't get me wrong, I think Rubocop is a great tool, it's just over-used, and that's in part because everything is on by default, and this seems to be enco	wlll	12.443526	-7.06936	comment	4.0	25.0	1605786669	-10.964201
25156285	The vast majority of people using Ty	The vast majority of people using TypeScript in their projects won't run into the deeper complexity of the type system. For the average TS user the only visible impact of features like template literal types and recursive conditional types will be fewer bugs because maintainers of popular libraries used them to provide better types.You don't have to personally understand TS's more complicated features to benefit from using TS in your project. I hope they continue adding richness to the type system so I can eliminate more bugs from my code.	wmrowan	12.331011	-6.850362	comment	4.0	74.0	1605833845	-10.441464
25163698	I wish this had been available years	I wish this had been available years ago!I think Ruby was an excellent replacement for Lua to do ML, once Torch ran out of steam due to LuaJIT memory limitations. However, historically, MRI Ruby was slow and problematic.Personally, I prefer Ruby to Python. Ruby is very close to Smalltalk, with some ideas from Perl and Lisp.	nextos	12.498102	-7.0307627	comment	4.0	20.0	1605898995	12.377014
25173701	For better or worse, Larabel does a 	For better or worse, Larabel does a great job of adding excitement to otherwise fairly humdrum activity. On the whole I think he's a major net benefit to free software, few people cover the goings on in random backwater mailing lists in such a public manner besides him and LWN, and AFAIK Larabel's audience is much less specialized, and his writing style can be considerably more vibrant.	dmw_ng	12.802327	-6.637766	comment	4.0	20.0	1606003778	10.353826
25180802	So... does this work with distribute	So... does this work with distributed Erlang or hot code reloading? Because those are the reasons[1], to my knowledge, that statically typed language won't fly.Really stoked to give this a whirl![1] I know, and in-case others don't, almost no one (literally) uses hot-code reloading. Still... Instead of killing it, as in the case of Lumen (I think), I'd like to see it become easier/better...	rubyn00bie	12.43159	-7.4551578	comment	4.0	16.0	1606077243	-9.008912
25181013	Can I just register my amazement at 	Can I just register my amazement at the absurdity of a world in which some shmuck who makes a PHP website is one of the richest people on the planet?He has an army of people doing his bidding now.  The mind boggles.	pmoriarty	12.783737	-6.6303177	comment	4.0	19.0	1606078590	10.3624
25192289	I'm glad you shared this. I've been 	I'm glad you shared this. I've been reading the comments here with much interest but simultaneously also a sense of impostor syndrome, for I've been running my one-man SaaS on generic LAMP since 2005, and aside from adopting jQuery early on, I haven't much touched any other piece of exciting tech that's come out since.My old and boring stack works just fine on the VMs that it runs on, and and continues to support me and my family financially with little to no downtime and decent work/life balance.Of course I'm aware of the cons of programming in PHP versus other languages, but after 20 years of coding in it, I like to think that my code isn't all that bad.Still, I'm reading some comments here and feel like I'm waaay behind the tech curve with my use of such an old stack, and am somewhat sc	herodoturtle	12.699757	-6.480147	comment	4.0	16.0	1606167772	10.313757
25221457	Modern PHPs shining light is the Lar	Modern PHPs shining light is the Laravel framework and the ecosystem built up around it. If you're going to start a database-driven website projects in PHP there really isn't a good reason to not use and learn Laravel (or Lumen if you want something more lightweight).That being said if you're not tied to PHP I'm not sure I'd necessarily recommend it. The obvious alternatives worth looking into are Ruby on Rails or Python with Flask or Django.	dagw	12.796694	-6.6487427	comment	4.0	16.0	1606409050	10.347385
25221499	I got spoiled by PHP as my first lan	I got spoiled by PHP as my first language. It was so easy to get going. I was surprised to learn that other languages didn't work the same way, when integrating into a web server. Also it has always been rock solid. A bug in my code brought down only that request for that user, totally did not affect or even slow down responses to other users.People have attacked its syntax forever. I avoided the worst of it by learning PHP around version 4, when it was moving away from magic quotes and register globals --- and I also had the sense to see that those were unwanted anyway. But I think the main reason that PHP hasn't bothered me is that I try to use it as little as possible. Let me explain.I consider PHP a glue language, between my database and the user's browser. When you use a lot of glue, 	combatentropy	12.761595	-6.606259	comment	4.0	21.0	1606409251	10.268638
25221559	> Perl+CGI + all the server setup fo	> Perl+CGI + all the server setup for a simple dynamic page? It's just unimaginable to many today's developer.TBH, I'm still not aware of any truly simple/easy way to get a dynamic HTML page.Recently, I had to make a dumb utility app to render some dynamic data, and I wound up writing a Golang server with the HTML specified as a Go Template. But making it accessible on the publc internet still required spinning up a server, installing nginx, configuring SSL with Let's Encrypt (at least it was free) and futzing around with nginx `proxypass` directives for several hours.It works, and I guess it's conceptually simple, but it was still an all-day ordeal to get it up and running from scratch.	ForHackernews	12.437835	-6.526387	comment	4.0	13.0	1606409514	10.068684
25239888	How does it compare with the rohloff	How does it compare with the rohloff system?Anyways it seems to be significantly more expensive thus I don't think it will become widespread.	invernomut0	12.699445	-6.864181	comment	4.0	19.0	1606592409	12.235421
25240905	There is a huge problem with this sa	There is a huge problem with this sadly, the startup time of the BEAM is too much! I was thinking about having a running VM process and injecting code directly, but I think this could be quite insecure. Love the idea though.	andy_ppp	12.390279	-7.3674455	comment	4.0	17.0	1606600634	-8.82943
25252176	Ask HN: Is my preference for RubyOnR	Ask HN: Is my preference for RubyOnRails over Laravel justified?	gitrog	12.765631	-6.701573	story	4.0	4.0	1606728992	10.404293
25282444	So the entire argument is that PHP i	So the entire argument is that PHP is single threaded and each request starts with no state? Am I missing anything else?I’m trying so hard not to rant here, so I just wanted to confirm that those are the only positives he outlines about the language.	apeace	12.726088	-6.609869	comment	4.0	21.0	1606947342	10.21095
25282545	This seems to be an unpopular opinio	This seems to be an unpopular opinion in the tech world, but I honestly enjoy working with PHP. It's such a simple, robust language, and you can use it in many different ways, depending on what you're building (OOP, scripting, microservices, etc).	rabuse	12.762506	-6.606984	comment	4.0	14.0	1606947870	10.305296
25283248	"I hate to be ""that guy"" but I see no"	"I hate to be ""that guy"" but I see no reason not to use PHP for all three of those things.PHP is faster than Ruby. [1]PHP from a local script does math just fine. It's the round trip of the request to a PHP server and back that you're associating with poor language performance. In a local scripting environment PHP7 is considerably faster than Python3. [2]PHP is an extremely popular language as the backend for SaaS, and arguably one of the oldest and most successful. [3][1] https://benchmarksgame-team.pages.debian.net/benchmarksgame/...[2] https://blog.famzah.net/2016/02/09/cpp-vs-python-vs-perl-vs-...[3] https://insights.stackoverflow.com/survey/2020#most-popular-..."	zelon88	12.66678	-6.6694884	comment	4.0	12.0	1606951798	10.288505
25283263	If there's room for Javascript, ther	If there's room for Javascript, there's room for PHP.  Both are sloppy, inferior languages, but both can do anything you need.  And unfortunately, both have immense momentum from being first in the web game.	blunte	12.694145	-6.588482	comment	4.0	14.0	1606951875	10.295951
25306374	Is there a convincing Stimulus vs. R	Is there a convincing Stimulus vs. React-Rails post anywhere?	shay_ker	12.816594	-6.6929636	comment	4.0	18.0	1607109075	12.351515
25309525	I have great hopes that Stimulus 2.0	I have great hopes that Stimulus 2.0 and Ruby 3.0 will put Rails back in the spotlight as the sane alternative to SPA abuse. Ruby and Rails have some really talented people on their teams and there's something special about the Ruby language which makes it such a fertile environment for innovation. Only Clojure compares in this respect.	cutler	12.661142	-7.0011334	comment	4.0	19.0	1607123142	12.374898
25314021	When I read comments coming from peo	When I read comments coming from people who don't use PHP which are always negative or condescending, I wonder - how do you imagine programmers who use PHP are like? Do you immediately draw parallels in your mind that makes us PHP-ers incompetent and basically dumb, while having a language that lets you mash the keyboard and it works?Honestly, after having used most of the languages at my disposal for past 22 years I've been doing this job - they were nothing special compared to PHP (or PHP compared to others).You still have to figure the problem out before solving it with algorithms. No language or framework will help you do that.I'm keen to hear why there are comments that demean one tool and elevate the other, when in reality - they're all just programming languages.	fraktl	12.769653	-6.6525264	comment	4.0	33.0	1607171037	10.333717
25335747	Isn’t step 1 of “modern JavaScript” 	Isn’t step 1 of “modern JavaScript” to install TypeScript? :)	cgrealy	12.378087	-6.688317	comment	4.0	75.0	1607367674	-10.469318
25335899	Because it fails to meet the 'it's t	Because it fails to meet the 'it's the platform stupid' maxim.ie languages aren't nearly quite so important as the platform.Stuff wasn't written in js because early js was a brilliant language - it was because the platform - the web - was brilliant.Many have written 'better' languages that compile to js - https://github.com/jashkenas/coffeescript/wiki/List-of-langu...and while typescript is one of the better, more supported ones, isn't it just another one?Surely in the end it just adds complexity and fragmentation of the ecosystem?	DrScientist	12.355749	-6.625421	comment	4.0	47.0	1607368441	-10.427482
25364528	Lots of good stuff in here, includin	"Lots of good stuff in here, including much more support for using UUIDs as PKs.My favorite new feature is ""delegated type"" in ActiveRecord to offer a new way to map class hierarchies onto database tables. I wrote a blog post about it[0], but the actual PR is very readable as well[1].[0] https://www.stevenbuccini.com/how-to-use-delegate-types-in-r...[1] https://github.com/rails/rails/pull/39341"	sbuccini	12.907594	-6.739239	comment	4.0	19.0	1607546379	12.282096
25364989	Man I'm hoping NEW MAGIC is like Pho	Man I'm hoping NEW MAGIC is like Phoenix LiveView. As a Rails dev I started looking into the Elixir/Phoenix world just for LiveView but I don't really want to switch languages... I just want that new magic that LiveView offers. I know there are gems for Rails but I'd prefer if it was baked-in and officially supported.	freehunter	12.855468	-6.9349747	comment	4.0	25.0	1607548007	12.711833
25368196	Hey, sorry for the aside - I am a Ra	"Hey, sorry for the aside - I am a Rails developer since Rails 4ish and we are running Rails 5 at work. I'm using Rails 6 for my own projects and in these side projects, I've been having a huge hell of a time trying to grok ""right ways"" to do things with webpacker/webpack. I seem to encounter issues every single time with deploys to Heroku because of precompilation issues, or imports not running right. But tutorials get out of date so fast and I'm constantly trying to just remove stuff just to get my builds to work. Are there any Rails focused chatrooms or places where I can get into the nitty gritty of these things without needing to post GitHub issues and piss off maintainers all the time?I just don't really grok how to use modern Javascript I guess, but also integrating with Rails webpac"	arthurcolle	12.744687	-6.8217535	comment	4.0	18.0	1607562770	12.339327
25370039	What I like about not integrating th	What I like about not integrating the build-step as Deno does: You allow competition and the market comes up with great ideas like Vercel did with pkg.Building TS projects is quite demanding and I doubt if one party monopolizes this important step and thinks it does the best job it will degenerate an ecosystem. Even the TS team says the build system is not the core of their work, they just have one for convenience but encourage the community to compete and complement. Integrating build systems is good for beginners who struggle with them but for the rest? IDK.Or in other words, Deno wants to be more than just an opinionated node-Typescript-distribution nobody cares about but then they need to create this ecosystem and focus on the core (what's their core and value add other than repackagin	205g0	12.484584	-6.4588313	comment	4.0	25.0	1607577428	-10.911843
25370213	My point is, what is even the point 	My point is, what is even the point of using Deno? If its for static typing... well Go has that.So what is the benefit?	svnpenn	12.508184	-6.4430747	comment	4.0	12.0	1607578885	-10.937204
38635264	I've been making APIs in django for 	I've been making APIs in django for years and for each project, at some point the API behaviour needs to differ from the model. It is not clear from the README how would one handle that use case.	fvdessen	12.858561	-6.4906087	comment	4.0	19.0	1702507547	10.017057
38635499	Can you explain from a high level wh	Can you explain from a high level why I’d want to use Django Ninja over DRF?There’s a vibe, or assumption around Ninja that it’s “newer”, or “like FastAPI”, or “the way forward”, none of which are objective benefits per se.I wouldn’t even say I’m an advanced DRF user, but with a handful of small functions to create ModelSerializer subclasses and ModelViewSet subclasses, I have basically auto-CRUD for any Django model in DRF, and Ninja always seemed verbose by comparison.Maybe I just have really simple use cases that work with this approach. Like, are there examples you can share that would be painful in DRF that are easier to navigate in Ninja? Or is it just personal preference of liking the more freeform style of FastAPI?	halfcat	12.829107	-6.5244813	comment	4.0	20.0	1702508757	10.140064
38652571	The other approach to private method	The other approach to private methods is weird.It breaks the object-oriented paradigm. Why should my Dog be able to check out the internal StomachContents of another Dog, while that information isn't available to a Vet or even to the Dog's Owner?Possibly the Dog can even check out the StomachContents of a Wolf or an Elephant, depending on your language and your inheritance rules. Even if the Dog otherwise has no relation to the second animal.It's because we're seeing behind the curtain. The internal implementation of method Fido.vomit() is some equivalent of Dog::vomit(Fido) so the current object isn't actually in as privileged a position as it might appear to a reader. The language privileges all members of class Dog instead.Ruby has the same problem even more, because the first thing any	dmurray	12.327088	-7.13504	comment	4.0	18.0	1702633537	12.330558
38653070	It will be awesome when this gains s	It will be awesome when this gains support for custom rules as I have a bunch of custom ESLint rules. The thing that annoys me the most about ESLint is that it has too many NPM dependencies.	austin-cheney	12.330277	-6.5330615	comment	4.0	18.0	1702639500	-10.366955
38653542	This can only be good news. Normally	"This can only be good news. Normally I, like anyone else experienced with the JS ecosystem, despair when new tools come out like this. However, consider:- setting up eslint isn't actually that simple- if you're using typescript you need eslint-typescript too- there are sets of rules in both eslint and eslint-typescript that conflict with each other, so I have countless rules in my config like this:        'comma-dangle': 'off',
        '@typescript-eslint/comma-dangle': ['error', 'always-multiline'],

- then if you're doing React there's another set of JS and TS rules to apply, I still never figured out how to correctly apply airbnb rules- this is a pretty garbage developer experience- you can quite literally spend hours or days getting a ""good"" linting/formatting configuration setup, and "	lloydatkinson	12.3931055	-6.5913196	comment	4.0	14.0	1702643908	-10.5089245
38653573	> it serves as an enhancement when E	> it serves as an enhancement when ESLint's slowness becomes a bottleneck in your workflowWell, when I need to batch fix errors in files, yes it can take a while to run eslint. But that almost never happens. I have the plugin and fix errors as I go (which I believe is what most people do), and I never feel performance is an issue in this workflow. I really doubt how (actually) useful this is.	d3w4s9	12.331253	-6.4588146	comment	4.0	19.0	1702644203	-10.356697
38675272	> controlled by an evil older than O	> controlled by an evil older than Oracle itself (Microsoft and Typescript)Who still uses typescript? It's not the mid-2010s anymore. Plain javascript is everywhere and I'd argue using a framework implies an immature project or team.	sublinear	12.375091	-6.7103615	comment	4.0	15.0	1702839212	-10.457126
38688968	After 10 years in Ruby, I moved onto	After 10 years in Ruby, I moved onto Rust four years ago, and don't plan on really looking back. But with that said, I'm glad you love Ruby! There are certainly things to love.Personally, I just can't do without a good type system anymore. I think Rust has spoiled me. I do miss Ruby's powerful reflection features though.	brink	12.508505	-7.1768374	comment	4.0	13.0	1702936889	12.358484
38689222	It is mind-boggling to me to see all	"It is mind-boggling to me to see all the low-value features that Ruby has, but no enums. So every time an enum is needed, there's some ugly code that tries to emulate an enum.The guiding theme for Ruby appears to be ""let's give people a huge number of ways to write unreadable code"" and it reminds me of JWZ's classic rant about PHP, ""a fractal of bad design."""	chihuahua	12.54957	-7.0694613	comment	4.0	17.0	1702938106	12.364003
38761206	I seriously don’t think it’s worth c	I seriously don’t think it’s worth comparing Ruby to languages like C++ and the rest.One is scripting language, the other compiled, the difference is huge already there.	Alifatisk	12.571109	-7.0511136	comment	4.0	52.0	1703497437	12.371878
38761499	> I never thought Ruby would have a 	> I never thought Ruby would have a shipping and production ready JIT before Python.This is entirely predictable - Ruby does not have a big scientific computing community which happened to depend on every implementation detail of the hosting interpreter.	rfoo	12.494074	-7.0421615	comment	4.0	16.0	1703500944	0.82951975
38764097	One area where Ruby could help impro	One area where Ruby could help improve developer experience is by providing a better debugging experience. I feel incredibly spoiled with Chrome Dev Tools. Meanwhile the last time I tried debugging heavy metaprogramming Ruby code it was a pain to figure out what was happening.	TheAceOfHearts	12.588199	-7.0340304	comment	4.0	13.0	1703523413	12.3541
38788462	This is what worked for few of my fr	"This is what worked for few of my friends who were laid off last year (I am a assistant professor on local uni but I own dev agency and dev 9-5 as pythonista!)  1. learn python 
  - https://books.trinket.io/pfe/ + https://python.swaroopch.com/ (in parallel)
  - https://effectivepython.com/ (skim, dive deeper once you have job)
  - https://www.programiz.com/python-programming (skim, look at examples, type out)

  2. apply python 
  - https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-i-hello-world
  - miguel tutorial is all you need to get hired. go through it meticulously, make sure you understand everything
  - https://www.fullstackpython.com/ (skim, just so you know the keywords)

  3. update your cv
  - this step is optional and shady, but will improve your odds
  - reuse"	hnisoss	12.68218	-6.547917	comment	4.0	18.0	1703722378	10.069866
38793579	Step zero is definitely the OTP Desi	Step zero is definitely the OTP Design Principles doc (part of the OTP distribution):https://www.erlang.org/doc/design_principles/users_guideThere are some good texts that have more examples:Erlang & OTP in Action - https://www.manning.com/books/erlang-and-otp-in-actionDesigning for Scalability with Erlang/OTP - https://www.oreilly.com/library/view/designing-for-scalabili...One big example of distributed Erlang is Riak:https://github.com/basho/riak	al2o3cr	12.567346	-7.511074	comment	4.0	12.0	1703772402	12.906659
38798841	If you follow OTP design principles,	"If you follow OTP design principles, you end up with a supervision tree, and a lot of code like...   ok = do_something_that_might_fail()


If it returns ok: great, it worked and you move on. If it doesn't return ok, the process crashes, you get a crash report, and the supervisor restarts it, if that's how the supervisor is configured. Presumably it starts properly and deals with future requests.There's two issues you might rapidly encounter.1) if a supervised process restarts too many times in an interval, the supervisor will stop (and presumably restart), and that cascades up to potentially your node stopping. This is by design, and has good reasons, but might not be expected and might not be a good fit for larger nodes running many things.2) if your process crashes, its message queue (ma"	toast0	12.475709	-7.424509	comment	4.0	28.0	1703798802	12.870836
38803848	YMMV, but from my own experiments, o	YMMV, but from my own experiments, on an M1 Macbook Air, it did not work well for me. I was trying to compile an Elixir codebase on x86-64 Alpine Linux. Elixir does not have cross-compiling. I tried it in a Docker container, and in a Linux VM using OrbStack. Both approaches fail, as it just segfaults, even on the first `mix compile` of a blank project.This problem does not exist in ARM containers or VMs, as the same project compiles perfectly in an ARM Alpine Linux container/VM.It's definitely not plug-and-play for all scenarios. If anyone knows workarounds, let me know.	timenova	12.664657	-7.4448996	comment	4.0	19.0	1703848945	-10.641723
38850957	PHP results: I was stupid enough to 	PHP results: I was stupid enough to write some scientific code in PHP once so know how slow it can be - mostly around array access and manipulation. But if your going to try, use the HHVM interpreter. It's much faster and is a drop in replacement for the PHP interpreter. Hack (https://hacklang.org/) uses that under the hood by default.	theteapot	12.710234	-6.653039	comment	4.0	14.0	1704258406	10.253235
38865954	i would like to learn pharoh, but I 	i would like to learn pharoh, but I can't seem to understand how to get started.  It looks like one of those tools you need a video to understand.	worthless-trash	12.350795	-7.2530746	comment	4.0	13.0	1704369674	7.062268
38907362	Nice! I have been using maplibre wit	Nice! I have been using maplibre with django and htmx. I should try and put an example up there to share with others.	philips	12.816081	-6.4844866	comment	4.0	17.0	1704678722	10.009981
38920264	My data science team evaluated Polar	My data science team evaluated Polars and came back with a mixed bag of results. If there was any performance-critical section, then we would consider employing it, but otherwise it was marginal negative given the overhead of replacing Pandas across dozens of projects.	kelseyfrog	12.342161	-6.552898	comment	4.0	15.0	1704757985	10.173243
38921826	A few months ago I tried migrating a	A few months ago I tried migrating a large pandas codebase to polars. I'm not much of a fan of doing analytics/data pipelining in Python - a complex transformation takes me 2-5x as long in pandas compared to Julia or R (using dataframes.jl & dplyr).Unfortunately polars was not it. Too many bugs on standard operations, unreliable interoperability with pandas (which is an issue since so many libraries require pandas dataframes as inputs), the API is also very verbose for a modern dataframe library, though it's still better than pandas.Hopefully these will get resolved out over time but for now I had the best luck using duckdb on top of pandas, it is as fast as polars but more stable/better interoperability.Eventually I hope the Python dataframe ecosystem gets to the same point as R's, where 	frogamel	12.330318	-6.5479717	comment	4.0	25.0	1704770160	10.114325
38925480	"I'm currently getting dragged into """	"I'm currently getting dragged into ""data"" stuff, and I get the impression it's a parallel universe, with its own background and culture. A lot of stuff is like ""connect to your Antelope or Meringue instances with the usability of Nincompoop and the performance of ARSE2"".Anyway, probably the interesting things about polars are that it's like pandas, but uses a more efficient rust ""backend"" called Arrow (although I think that part's also in pandas now) and something like a ""query planner"" that makes combining operations more efficient. Typically doing things in polars is much more efficient than pandas, to the extent that things that previously required complicated infrastructure can often be done on a single machine. It's a very friendly competition, created by the main developer of pandas."	Joeboy	12.353824	-6.562434	comment	4.0	14.0	1704804125	10.181498
39008502	Erlang is based on virtual threads (	"Erlang is based on virtual threads (confusingly called processes).
The Erlang virtual machine schedules them on OS threads.
Erlang processes communicate using message passing, preventing deadlocks.
You can use millions of Erlang processes without problems, e.g., to handle millions of Elixir LiveView sessions."	jake_morrison	12.503981	-7.5049224	comment	4.0	14.0	1705370515	12.894043
39017124	This is awesome to see that it's pos	This is awesome to see that it's possible. I've always wondered about the same sort of concept, but instead it would be trying to use Crystal to run the latest Rails version. I lack the time/energy/knowledge to try it, but it would be interesting to see how close you could get to either power or port Rails to Crystal, and if it would even be worth it (in terms of speed and type safety, etc).	dchuk	12.639872	-7.2348523	comment	4.0	15.0	1705430984	-11.246999
39073343	Are you saying PHP creates a new pro	Are you saying PHP creates a new process for each request?	tonyedgecombe	12.716579	-6.5980673	comment	4.0	13.0	1705791390	10.171499
32530938	Phoenix is pretty nice, but its (or 	Phoenix is pretty nice, but its (or Elixir's, rather) biggest weakness is the lack of static typing.	ylyn	12.757205	-7.262745	comment	4.0	20.0	1660991959	12.840395
32567910	This is really cool. We use Elixir a	"This is really cool. We use Elixir at work, but we mostly use it in a ""traditional web app"" (i.e. non-Elixir) way, of Docker containers deployed to independent AWS instances.So I'm always intrigued by some of the more BEAM-specific things that folks do, like using `observer` on a remote (production??) node here, or distributed Elixir where the nodes communicate with each other, or ""hot"" code updates.How do companies deploy Elixir in such a way to take advantage of all those things? Does Sequin talk anywhere about their deploy process and how their infrastructure looks?"	losvedir	12.683013	-7.4559627	comment	4.0	22.0	1661274588	12.933342
32569401	I think valid points are bad about t	I think valid points are bad about typescript being bad, like without a real debugger it's going to be hard to debug anything.But I firmly disagree with how the article begins.> In effect, we are shifting complexity from end-developers to library developers.That is the whole point in creating a library. To hide complexity in a nice easy to use interface/API.	dangarbri3	12.356167	-6.8255386	comment	4.0	47.0	1661280512	-10.4686775
32570273	"""JS _is_ a very dynamic language, li"	"""JS _is_ a very dynamic language, library design reflects that""I would argue it should not. If your API cannot be well expressed in the Typescript type system, it is your API that should change."	bwestergard	12.3363905	-6.7889504	comment	4.0	14.0	1661283510	-10.463828
32583393	We have similar experiences. I absol	We have similar experiences. I absolutely love Typescript. But I don’t like Node very much. So I keep TS in the browser.I’ve been looking at Nim or Scala for the backend. It’s either that, or just dive into Rust.It really seems if you don’t want to use Node, Java, or Go the available choices for a statically typed backend get quite slim.	blueslurpee	12.367438	-6.5845513	comment	4.0	15.0	1661364399	-10.43107
32599985	Which of these can run Django and do	Which of these can run Django and don’t have a steep learning curve?	bilsbie	12.832696	-6.5343227	comment	4.0	13.0	1661461794	10.024187
32610082	Unifying fold left and fold right in	Unifying fold left and fold right in Prolog	gopiandcode	13.13133	-7.307491	story	4.0	90.0	1661533428	12.678119
32649213	Cool! I program for around 7 months 	Cool! I program for around 7 months in Pharo now at Yesplan [0]. We're hiring a devops engineer and a software engineer. While the Pharo website [1] avoids mentioning it, it's a Smalltalk descendant.What I like about Pharo:1. Programming in the debugger makes things feel much quicker2. Evaluating expressions inside your code editor makes programming feel much quicker3. The ability to quickly browse classes and methods makes programming feel much quicker (e.g. I type Date somewhere, select it, press CMD+B and now I browse the Date class).Don't get me wrong, Pharo has downsides, especially when it comes to using it in production (IMO). With that said, the language feels fun to use! I definitely like it now as my first language for side projects as it is more graphical, more playful, and feel	melvinroest	12.340373	-7.269493	comment	4.0	22.0	1661860420	7.0978465
32680898	Elixir v1.14 released: improved debu	Elixir v1.14 released: improved debugging, partition supervisor, and more	josevalim	12.673676	-7.4553814	story	4.0	59.0	1662057108	12.926138
32685896	Now, all we need for crystal to succ	"Now, all we need for crystal to succeed is numpy, scipy, something pandas-like, and of course matplotlib (not plots, matplotlib).By the way, how are we on data-science friendly IDEs? Debugging? Automatic thorough documentation generator? Tooling in general? 
Is the time to first plot fast?Where I work, we desperately need a fast python."	siproprio	12.581087	-7.2505703	comment	4.0	20.0	1662085564	-11.323406
32685987	Probably because of the Ruby inspire	Probably because of the Ruby inspired syntax which just brings joy. Hopefully the ecosystem can grow and partially catch up as well	axelthegerman	12.559221	-7.0612984	comment	4.0	24.0	1662086508	12.394003
32688527	I'm a Ruby guy and I tried Crystal f	"I'm a Ruby guy and I tried Crystal for about 2 years and absolutely loved it but then had to give up for the following reasons:1. Too slow to compile (the whole program + the entire stdlib is built everytime you build!). No incremental compilation available.2. No language server (apparently it's just impossible due to the way the language works). Tbh, I'd be happy with just ""Go to definition"" but alas, no-can-do!3. Obscure error messages (macros are to blame here)4. Weak HTTP server implementation -- making things such as a fetching POST params or uploads incredibly frustrating. Once read the request body cannot be read again.5. Weak/non-existent Windows support6. No multicore support7. Obviously small community8. Nil handling takes a bit getting used to (coming from Ruby)9. Error messages"	u89012	12.591388	-7.222757	comment	4.0	25.0	1662110129	-11.2245
32696921	Seems like the volume of posts on El	Seems like the volume of posts on ElixirForum.com is way down over the last 12 months.	jononomo	12.701655	-7.454093	comment	4.0	13.0	1662161492	-0.36087337
32725614	PHP 8.2.0 RC1 available for testing	PHP 8.2.0 RC1 available for testing	vedranm	12.778112	-6.651455	story	4.0	85.0	1662392698	10.339501
32726133	Been using it so far using a PPA wit	Been using it so far using a PPA with my own unreleased Python dialect that compiles to PHP. Gonna be a solid release.Amazing to see so much evolution for PHP- autoloading and automatic file-based routing are such killer features for rapid development.Fibers are going to be a gamechanger for performance once libraries start adopting it.	geenat	12.736827	-6.632915	comment	4.0	21.0	1662395271	10.32608
32747206	It's not just about revenue generati	It's not just about revenue generation. I bet they are doing this to prevent Amazon from deploying a version of Akka as a service on AWS.	chsreekar	12.351544	-7.349491	comment	4.0	23.0	1662532617	12.666901
32747241	Does Akka.NET have any licensing dep	Does Akka.NET have any licensing dependencies on Akka?I wonder if this will push people there (please go to F#) or Elixir and Erlang.	bmitc	12.342988	-7.3608174	comment	4.0	16.0	1662532857	12.664262
32747315	Other libraries depending on Akka sh	"Other libraries depending on Akka shouldn't have to change, as they are merely published as ""libraries"", not deployed to ""production"".Libraries generally never have ""annual revenues more than US $25m"", so it should be free for them to use the code as well.Realistically though, they force you to contact them to get a ""Additional Use Grant"" in case you want to use Akka for other open source projects:> I use Akka for an OSS project. What does this mean for my project?> The license offers a customizable “Additional Use Grant” that grants production usage for other OSS projects including Play Framework.> If you are running an OSS project using Akka, please contact us at akka-license@lightbend.com and we will do our best to continue to support your project.I wish them luck on their endeavour, bu"	capableweb	12.347374	-7.367957	comment	4.0	13.0	1662533549	12.669856
32755771	I think it's simpler than that, just	I think it's simpler than that, just from their relicensing FAQ: https://www.lightbend.com/akka/license-faq> Akka requires significant investment in order to maintain its position as a preeminent distributed systems runtime. Many organizations have adopted Akka and are seeing significant benefits for their organizations.> However, in recent years an increasing number of those organizations have elected to self-support without either contributing back to the community or by investing in annual subscriptions. We have an ambitious roadmap for the future of Akka and require a way to fund and sustain that development.> We believe that larger organizations that are seeing business benefits from Akka should contribute to the ongoing health and evolution of the project.They need money to continue 	res0nat0r	12.353908	-7.386865	comment	4.0	12.0	1662580228	12.667065
32769949	I would argue that ruby as almost al	I would argue that ruby as almost all the strengths of perl and conciseness with more coherency if you want a perl-like fluidity and terseness. I personally like python for anything that becomes more than a 100 lines of bash.	stjohnswarts	12.384196	-7.032996	comment	4.0	28.0	1662662072	12.930754
32770444	Does Ruby come pre-installed on virt	Does Ruby come pre-installed on virtually every Unix-like system out there?	kqr	12.595176	-6.991948	comment	4.0	16.0	1662663924	12.384227
32771709	Due to poor coding practices (eg mon	Due to poor coding practices (eg monkeypatching) and a weaker testing culture (by default Ruby does not run unit tests when installing libraries) I've found Ruby to be substantially less reliable than Perl.However the world has moved on to Python.  So I curse every time I again have to look up how subprocess works for what I'd do in Perl with backticks.	btilly	12.38803	-6.9982376	comment	4.0	16.0	1662669227	13.0026
32790865	Ask HN: Why aren't there more 'Livev	Ask HN: Why aren't there more 'Liveview' implementations?	hannofcart	12.712598	-7.376187	story	4.0	5.0	1662819471	12.868869
32795064	I will always have a soft spot in my	I will always have a soft spot in my heart for Django, the python web framework, even though I don’t use it anymore. https://www.djangoproject.com/When I was still learning to code, I spent hours and hours and hours poking around the Django source code. In particular I was fascinated by the metaprogramming used in the Model and Query objects, and I ended up learning a ton about how Python works under the hood.	pandler	12.796708	-6.532358	comment	4.0	15.0	1662848865	10.087522
32799358	Show HN: Chard – simple async/await 	Show HN: Chard – simple async/await background tasks for Django	drpancake	12.536345	-6.460453	story	4.0	61.0	1662902161	-9.534298
38141605	I'm heartened by the success of the 	I'm heartened by the success of the Typescript model of improving things when there's a deficiency/problem.The alternate approach (which is extremely popular unfortunately), is to throw it all out and rebuild everything from scratch. I guess it's fun and exciting, which attracts developers, but it takes a long time to achieve any level of maturity and are hard to sustain (the people who are in it for the fun and excitement will move on before too long).	jmull	12.374145	-6.7285805	comment	4.0	62.0	1699109886	-10.420134
38166161	I am impressed that Polar is close t	I am impressed that Polar is close to DuckDB near the top. It's surprising that a Python library would often out perform everything but DuckDB. DuckDB is very impressive but DataFrames and Python is too useful to give up on.	indeedmug	12.374811	-6.5296907	comment	4.0	14.0	1699293773	10.165573
38176447	I was mainly interested in working w	I was mainly interested in working with Nx and friends, which look pretty nice. Good to hear about your experience with that.The ElixirLS server always crashed for me on init. The problem is assuredly on my end, but I was never able to fix it.https://elixirforum.com/t/elixirls-not-working-runtime-termi...	mjhay	12.708797	-7.452253	comment	4.0	17.0	1699363571	12.930418
38215261	As someone who worked with Elixir fo	As someone who worked with Elixir for the past couple years, and maintains multiple libraries in Elixir - nah not really. Static typing is the thing I'm missing with Elixir.No matter how much pattern matching you do, and how many typespecs you add to get a better understanding of what's behind a variable, you'll still run into issues at runtime frequently that could have been avoided if it was statically typed.Dialyzer is great but typespecs and pattern matching only get you so far. You'll always run into situations where the shape of data is not clear, and you have to open a REPL to do an IO.inspect somewhere	artdigital	12.495602	-7.424947	comment	4.0	17.0	1699592758	12.913595
38215778	You are overthinking some of it at l	You are overthinking some of it at least when it comes to concurrency. Look at what a process is and how send works. GenServer is a natural generalization of a pattern you’d write a thousand times. Knowledge of actors is transferable. Go has libraries which implement actor abstractions for example. Process mailboxes are just message queues like Go’s channels are. There are differences with respect to how the interpreters work and how processor yields work.Stuff like LiveView though looks like magic because it is magic. There are a lot of moving parts involved in getting it working. It’s the result of work that has been going on for the past decade across multiple communities though. The ideas are mature even if there is a lot of abstraction.Stuff like Riak was well ahead of its time. They 	jb3689	12.401481	-7.3307314	comment	4.0	18.0	1699597998	12.905067
38215175	“In fact, I might go as far as sayin	“In fact, I might go as far as saying that Elixir gives you a fun language (like Ruby) while leaving out the stateful footguns OOP languages give you. There are no classes, no instances, no inheritance…it's immutable and functional and you're not bogged down by a static type system.”I want this but with types. I’m convinced strongly typed is the way to go for larger code bases as it hides the magic of a lot of things and is easier to reason about.	gigatexal	12.401693	-7.4207644	comment	4.0	16.0	1699591812	12.856396
38215719	> Liveview is incredibly straightfor	"> Liveview is incredibly straightforward.I don't agree. One of the keynotes from the 2023 ElixirConf was Chris McCord (one of the principle developers of LiveView) describing how it is almost 1.0 [1]. One thing that made me laugh a bit was him emphasizing how much Javascript he's had to write (he was referencing the fact that there is an internal community meme that you can achieve such incredible behaviors without writing Javascript). His quip was ""because I wrote it all"". I wonder if you asked him ""was it straightforward?"" what do you think his answer would be?There are a lot of videos of people talking about how they managed to write something in LiveView. Here is one from 2022 ""How I built a block based editor in LiveView"" [2]. That is a good one to see how non-trivial tasks can be dif"	zoogeny	12.879226	-6.7804365	comment	4.0	12.0	1699597471	12.722843
38217765	>A few months ago I started a new jo	>A few months ago I started a new job at a company that uses Elixir as its main language>I've never written a line of Elixir or Erlang before in my lifeHow is this possible?	sBqQu3U0wH	12.6345005	-7.482764	comment	4.0	13.0	1699617085	12.900924
38241461	Nx / AxonGiven that most programming	Nx / AxonGiven that most programming languages are designed for sequential processing (like CPUs), but Erlang/Elixir is designed for parallelism (like GPUs) … I really wonder if Nx / Axon (Elixir) will take off.https://github.com/elixir-nx/	alberth	12.58967	-7.4816995	comment	4.0	13.0	1699805774	12.923737
38242118	Maybe I’ve already drunk the koolaid	Maybe I’ve already drunk the koolaid, but if I end up building a new app from scratch, I would really like to experiment with something similar to what the author describes:Django for most (if not all) of the server-side code, Django templates generating HTML, htmx handling most interactivity with html attributes and, when necessary, hyperscript (for use cases that can’t be covered easily by htmx). I would probably stick with downloading minified Bootstrap for styling (Tailwind requires a build step, and I don’t think I have done well in the past when I waded into “class soup”).Has anyone here tried something along these lines for a non-trivial app? How is it going?	ralmidani	12.743722	-6.4514146	comment	4.0	12.0	1699809436	10.010743
38250525	i’m preparing a talk for either rail	i’m preparing a talk for either railsconf or railsworld that puts this question/concern to the community. two times i have deviated from the standard apps/{models,controllers,views} layout and i have profited massively, especially in terms of conceptual integrity and abstraction. all my code lives in app/lib under domain-specific directories. this includes the models. the only part worth separating is the web router and controllers. i have achieved separation between my app and the web parts that aren’t offered by default by rails. i’m hoping to share my experience, for the community’s consideration.	yawboakye	12.772078	-6.88685	comment	4.0	15.0	1699886097	12.315728
38251232	Your model of companies using Rails 	Your model of companies using Rails with 1000s of engineers is almost comically naive. Look at what Shopify and Github have to do to make Rails work for them. Also look at the non Ruby code engineers there are writing and ask yourself why they might be doing it. Rails is not a religion. It can be good at what it does without having to go on a crusade when people point out its substantial limitations.	jupp0r	12.738589	-6.941563	comment	4.0	22.0	1699889110	12.353009
38338898	I think content negotiation is great	"I think content negotiation is great when your usecase supports it, like asking for XML or JSON. Also the mappings of content types should be well defined for all to see and edit. Rails is kinda a labyrinth in that regard.I do tend to prefer actual file extensions though. Friendlier for humans (curl https://endpoint/item.json vs curl -H ""accept: application/json"" https://endpoint/item), and it is visible in logging infrastructure, sharable, etc."	whalesalad	12.8092	-6.706031	comment	4.0	14.0	1700432046	12.228486
38353844	The number of features lifted direct	"The number of features lifted directly from Oban[1] is astounding, considering there isn't any attribution in the announcement post or the repo.Starting with the project's tagline, ""Robust job processing in Elixir"", let's see what else:  - The same job states, including the British spelling for `cancelled`
  - Snoozing and cancelling jobs inline
  - The prioritization system
  - Tracking where jobs were attempted in an attempted_by column
  - Storing a list of errors inline on the job
  - The same check constraints and the same compound indexes
  - Almost the entire table schema, really
  - Unique jobs with the exact same option names
  - Table-backed leadership election

Please give some credit where it's due.[1]: https://github.com/sorentwo/oban"	sorentwo	12.697828	-7.450336	comment	4.0	18.0	1700510947	12.936415
38363749	https://documentation.divio.com/ is 	"https://documentation.divio.com/ is a good overview of the ""four types of documentation"" paradigm: tutorials, how-to guides, explanations, and reference have to all exist.One of my major gripes with the JS/TS ecosystem is that ""explanations"" are sorely lacking. See https://www.typescriptlang.org/tsconfig for the relevant documentation for tsconfig files. Tutorials are on the page, how-to guides abound on the wider internet (like the OP), and the linked TSConfig Reference and JSON Schema (used in code completion in IDEs) are together absolutely massive.But an explanation is missing! There is no official documentation about how different options interact to say: as I'm walking a file tree as the Typescript compiler, this is how I will interpret a certain file I encounter, what will be output"	btown	12.341718	-6.798412	comment	4.0	14.0	1700575593	-10.435952
38364799	TypeScript had years to prepare for 	TypeScript had years to prepare for ESM, but they did not. Same with Jest. ESM was developed in the open and anyone could participate, including the TypeScript team. You are talking like ESM just happened overnight. It had been in development for 10 years.Node.js released initial ESM support [1] in Node.js 12.17 in May 2020, 2 years later (!), TypeScript finally added support for ESM [2].Here's a straight forward guide on how to use TypeScript with ESM: https://gist.github.com/sindresorhus/a39789f98801d908bbc7ff3...[1]: https://nodejs.org/en/blog/release/v12.17.0[2]: https://devblogs.microsoft.com/typescript/announcing-typescr...	mofle	12.396468	-6.4809375	comment	4.0	13.0	1700580128	-10.39008
38385890	The irony is that the issues this he	The irony is that the issues this helps with could be solved far before production. Compile time, or some local runtime even. Just not in Ruby.Nearly all the issues this shows you quickly are issues that static typing would prevent compile time, or type-hints would show you in dev-time.I've been doing fulltime Rails for 12+ years now, PHP before that, C before that. But always I developed side-gigs in Java, C# and other typed languages and now, finally fulltime over to Rust. They solve this.Before production. You want this solved before production. Really.	berkes	12.561719	-7.071958	comment	4.0	26.0	1700691119	12.396254
38403668	The point of php was to not be ”good	The point of php was to not be ”good”, but to be practical. A simple way to add some logic to html.Write a few lines, upload it, boom it works. Quick and easy.There is a place for typed & strict languages and a place for pragmatic ones.But php got shamed for it so badly they got into an identity crisis, for the last decade it’s slowly been trying to become Java and do everything correct.Same with Wordpress, before I could just make a plug-in with one php file & a few lines. Now I have to create a separate npm project and build for every tiny change	wouldbecouldbe	12.75045	-6.6145015	comment	4.0	19.0	1700831834	10.310305
38404483	But, but... Rails doesn't scale!!!!!	But, but... Rails doesn't scale!!!!!	obiefernandez	12.764746	-6.922984	comment	4.0	22.0	1700837278	12.344878
38405549	Why are there so many kinds of thing	Why are there so many kinds of things that can be passed to a Ruby function?	throwanem	12.393181	-7.100391	comment	4.0	39.0	1700843110	12.378288
38406728	I tried picking up Ruby some time ag	"I tried picking up Ruby some time ago, when RoR was at its popularity peak and seemingly everyone couldn't shut up about how “elegant"" and fun Ruby was. After trying it... I can say that it's for sure someone's idea of elegant code, and I can see why many people like it, but it just didn't resonate with me at all. Too many syntax quirks that didn't look particularly nice to read IMO."	agubelu	12.581263	-7.04374	comment	4.0	18.0	1700850598	12.381748
38407152	When I worked with Erlang outside of	When I worked with Erlang outside of Ericsson, I’ve heard the following from our tech lead: OTP built-in distributed process and failover mechanisms assume much lower latencies than usually exist between datacenter VMs and the underlying protocols consume a lot of bandwidth. I didn’t dig deep enough to verify this, but I can confirm that typical Ericsson hardware is several boards connected with high bandwidth ‘backplane’ and OTP failover was designed for this environment. VMs communicating through LAN is a different environment, and VMs living in different data centers are very far from this. I wonder if anyone else tried using OTP outside of Ericsson and what is their experience.	sesm	12.5748	-7.4973087	comment	4.0	15.0	1700853299	12.900196
38455459	Ultimately the interesting thing to 	Ultimately the interesting thing to know is why they decided to stay on Rails instead of rewriting everything in a more performant language.	pmontra	12.735905	-6.9685826	comment	4.0	14.0	1701230997	12.375901
38455535	If your app is just a postgresql dat	If your app is just a postgresql database that needs to be exposed with auth, access control, etc then yes rails is fine.If you’re doing a tremendous amount of parallel processing it will fall over without throwing lots of compute and scaling horizontally. Rails doesn’t scale vertically. You need to give it compute, and every other resource it uses will also need more compute. Average joes are fine with a 2 core VPS. Lots of businesses are not.I need you to send 5-10 million API calls per day to 20 different API’s … are you using Rails? Every API is rate limited differently, with different batch sizes (each having unique parameters) and it needs to literally be done ASAFP to make certain deadlines. If you want to throw money at the problem, sure. If you want to do the same thing with 1/10t	whalesalad	12.758141	-6.9113703	comment	4.0	13.0	1701231731	12.307265
38455552	How is that the case? This example u	"How is that the case? This example uses a distributed MySQL cluster which was of course tuned for high performance. Similarly the Rails app is distributed as well. Arguably the Rails app likely wouldn't qualify as ""high performance"", but it's distributed."	ajmurmann	12.750206	-6.9081035	comment	4.0	20.0	1701231862	12.320945
38455667	My impression is that it's simply ha	My impression is that it's simply harder to get promoted as an engineer in the industry by using boring, sustainable, unexciting solutions that have been used by everybody else and their dog. How do you even stand out that way? Looks bad on the resume, like you didn't even try. Great for the business, but maybe terrible for one's career?You could turn that one Rails app into a complex microservices architecture and do a conference talk about it, and get a promotion. Then you can undo the microservices architecture, write a blog post about returning to the majestic monolith, and do another conference talk about it, maybe get another promotion. Abstract, de-abstract, bundle, unbundle, rinse and repeat.It feels like a tragic situation that's nobody's fault, just the reality of human psycholog	8f2ab37a-ed6c	12.798178	-6.9011574	comment	4.0	16.0	1701233129	12.342134
38497010	I think that’s really weird. Perl wa	I think that’s really weird. Perl was mostly replaced by PHP, and nobody thinks PHP programmers are any good.	Aeolun	12.451088	-6.8380437	comment	4.0	13.0	1701505664	13.1389475
38513552	Typehero: All you need to become a T	Typehero: All you need to become a TypeScript menace	meatjuice	12.3629	-6.8092165	story	4.0	43.0	1701662035	-10.460472
38519218	A huge part of the work I did the pa	A huge part of the work I did the past year (and still do sometimes, email in my profile) was helping people transition from a full legacy django app to a lightweight django backend with rest api and a react frontend.Django Ninja makes it especially pleasant.I think django should really embrace this in the future. Make it easier to drop the superfluous parts; forms, templates …I don’t know what that will look like but I don’t see a way back.	scrollaway	12.810898	-6.437516	comment	4.0	33.0	1701707090	10.046834
38528668	Is Ruby still a thing in web develop	Is Ruby still a thing in web development? It seems to me most backend use Java, C#, Node with a bit of PHP here and there.	DeathArrow	12.636817	-6.9561415	comment	4.0	28.0	1701768958	12.340911
14691932	For the python web folks, what web s	For the python web folks, what web server do you tend to put in front of your Django/Flask apps and how do you typically deploy new updates with zero downtime?	smaili	12.6932535	-6.4946184	comment	4.0	12.0	1499121010	9.959434
14691749	I would think most Django projects a	I would think most Django projects are easy to read also. Part of Python generally...	brianwawok	12.829039	-6.5303497	comment	4.0	12.0	1499119249	10.027877
14712649	I think what I learned the most abou	I think what I learned the most about my past year of working heavily in Elixir is this.. Don't learn elixir.. learn Erlang/OTP if you really want to harness the power of Elixir. Elixir is nothing but a series of macros which give erlang some convenience and better syntax.If you learn to harness the power of Erlang, while writing it in Elixir, then you will see the beauty of it. Get away from Phoenix as fast as possible. Seriously it will do you wonders.  It's so unnecessary and cumbersome.OTP, OTP, OTP.. can't say it enough.	tmat	12.647193	-7.4730344	comment	4.0	15.0	1499365607	12.923674
14747590	I've only given a cursory look into 	I've only given a cursory look into it, and with regards to building a JSON API in Rails (of which the many extant standards and their Rails libraries are still immature), is this just another fad, or an actual API standard that has staying power? It seems like the latter, but given that it's Facebook-backed, as soon as they get tired of it, they could pull a Google on it.	Dirlewanger	12.750296	-6.7573276	comment	4.0	12.0	1499803800	12.332353
14748431	Despite its appeal to HN geeks I dou	Despite its appeal to HN geeks I doubt if Elixir will ever achieve mainstream adoption. Searching Indeed.co.uk's API by title, there are only 5 Elixir jobs in London, compared with 445 Python and 171 Ruby. I also attended a Silicon Roundabout jobs fair recently and was disappointed to find Elixir wasn't even listed in the literature.	cutler	12.698078	-7.461272	comment	4.0	21.0	1499810109	12.920983
14748948	People tend to forget that scalabili	People tend to forget that scalability is not a binary property. You always scale up to some users, up to some architecture, up to some amount of nodes. There is no system that will scale to infinity without requiring developer intervention once business needs and application patterns start to settle in.Distributed Erlang/Elixir has known limitations. For example, the network is fully meshed, which gives you about 60 to 200 nodes in a cluster. Or don't send large data over distribution, as that delays the other messages, etc. Some of those are easily solvable. For example, you can rely on your orchestration tools to break your clusters in groups. Or you can setup an out of band tcp/udp socket for large data. Others may be more complex.The important question, however, is how far you can go 	josevalim	12.634312	-7.3186955	comment	4.0	30.0	1499815684	3.4436808
14750565	What difference does it make? Erlang	What difference does it make? Erlang/OTP distribution doesn't have pluggable architecture. Sooner or later you will reach a point that you have to modify it. Then you are diverging from the original branch which makes it even more difficult to maintain it. You have to merge your additions into every release (minor or major) and test it thoroughly.A better architecture for a distributed system has a strong composability property. It should be possible to modify every possible aspect of it on a running cluster without introducing downtime.Write your own standard well documented distribution layer and become independent of underlying technologies.	majidazimi	12.581438	-7.5067377	comment	4.0	23.0	1499841338	12.911286
14751773	But in Ruby people use symbols to sp	But in Ruby people use symbols to specify an object's properties, and they aren't used that way in JavaScript at all. In JavaScript they are used for metadata and other things you don't want to be serialized by JSON.stringify() or Object.assign().  I've always been confused by why Ruby uses symbols so much.	Touche	12.451694	-7.0495324	comment	4.0	12.0	1499861087	12.370401
14771632	It uses `array` (somewhat mutable Er	"It uses `array` (somewhat mutable Erlang structure) and NOTP (no idea how it makes code ""zippy"" and the repo [1] does not explain anything... it seems to be bypassing the normal way modules are loaded?).I am unsure why anyone would use Erlang for number crunching. Training neural nets is basically just multiplying big matrices. I was hoping this project would come up with an interesting approach (how about using SIMD on the binary comprehensions that can use it? now that would be cool) but performance / memory usage does not seem to be looked at here.It is naive / uneducated to think that ""Erlang’s multi-core support"" + distributedness will enable many things for you. How does the VM scale on 32, 64 threads? Have you tried making a cluster of 50+ VMs? Unfortunately Erlang Solutions Ltd.'s "	fenollp	12.557756	-7.5128818	comment	4.0	39.0	1500053981	12.924764
14771690	In Erlang you cannot run non-BEAM co	In Erlang you cannot run non-BEAM code for more than ~10ms or your VM will crash. GEMM will be hard to use this way...	fenollp	12.515839	-7.4908113	comment	4.0	17.0	1500054315	-8.83412
14773492	Erlang NOTP: a middle way	Erlang NOTP: a middle way	setra	12.56809	-7.5130076	story	4.0	66.0	1500069227	12.911531
14798673	"So the answer to ""Stop writing PHP l"	"So the answer to ""Stop writing PHP like it's 2009"" is to not write PHP at all, and write Hack instead?"	bpicolo	12.790565	-6.65363	comment	4.0	20.0	1500400897	10.336376
14798753	Since I'm sure this will quickly be 	"Since I'm sure this will quickly be a debate about PHP, these are the reasons I liked PHP at the time:1. Ubiquity across web hosts.
2. Native support for JSON-esque associative arrays.
3. Integration with HTTP seemed amazing compared to other languages used for CGI.1's not an issue anymore thanks to the cloud and other improvements in hosting services. 3's not an issue either thanks for good web frameworks in better languages. But 2?Flex / JavaScript / PHP really are a pleasure to write some things in because of the flexibility of those data structures. Working with JSON, etc. in Java and friends is really painful and boiler-platey. Anyone aware of really good implementations that feel like PHP / JS in more widely respected languages?"	TallGuyShort	12.716645	-6.6043305	comment	4.0	15.0	1500401464	10.317312
14800246	The biggest change for me was when I	The biggest change for me was when I switched to strictly typed languages. It doesn't matter if it's Go or Typescript or whatever. As long as it has types it dramatically improves maintainability and ease of scale.	abeisgreat	12.359336	-6.777929	comment	4.0	14.0	1500413683	-10.478279
14847109	Yep, I just finished to setup a buil	Yep, I just finished to setup a build and deploy system for Phoenix using edeliver and it's definitely not nice. A bunch of files in different languages, it feels unnecessarily hard. I hope that'll put some effort in that.	pmontra	12.823131	-7.208032	comment	4.0	15.0	1500984822	12.769098
14846890	It's a fast-paced development! That'	It's a fast-paced development! That's pretty great. I hope core team would consider slowing down a bit and catch up with Deployment, Monitoring(which Phoenix team working on it) and Platform(e.g. http/2) departments.v1.5 seems to have a bunch of bug fixes and deprecation (Hah! I'm not sure if it's like move fast and break thing). It is potentially the case.In every important part, there seems to have a solo smart person working on it. E.g. Cowboy(I know it's erlang but Phoenix depends on it significantly), Distillery. That could be a good thing. Less people may catch up with each other faster. It also mean a load of works! And also mean some convention are out of sync (e.g. configuration which I think Conform is the proper way lately)	Existenceblinks	12.783081	-7.19921	comment	4.0	23.0	1500982320	12.752467
14862207	Ruby on Rails is out: major coding b	Ruby on Rails is out: major coding bootcamp ditches it, due to waning interest	sagivo	12.747744	-6.91522	story	4.0	33.0	1501122296	12.35667
14864121	"""There’s plenty of really great web "	"""There’s plenty of really great web development alternatives,"" Shaw said, mentioning React, Vue.jsHow on earth are those alternatives for Rails?"	bshimmin	12.778517	-6.780802	comment	4.0	12.0	1501152921	12.306771
14866831	Oh how I love Rails, the framework a	Oh how I love Rails, the framework and language (Ruby) of developer happiness. But now working in AI, it's a Python game. This is maybe embarrassing to admit but I prefer having the Python pipeline, TensorFlow, numpy, etc. living on its own box, exposing inference as an api, so I can keep developing in Rails and its supporting ecosystem (background processing, push notifications, etc.) as the main app handling everything else.	orthoganol	12.611874	-7.006715	comment	4.0	15.0	1501172975	12.36418
14866104	There are so many jobs out there in 	There are so many jobs out there in rails / ruby. I really want to learn it, but the tutorials I've seen teach you how to generate a blog engine. I want some real world examples and tutorials, where's the best place to start?	roryisok	12.7241	-6.9461093	comment	4.0	14.0	1501168836	12.397933
14874558	I was trying to build a tmux style s	I was trying to build a tmux style svg based windowing system for elm. Guess what? this involves a tree. Trees don't go well with functional programming. Ever heard of a zipper? lol.	crimsonalucard	12.987682	-7.6904283	comment	4.0	12.0	1501252740	-12.776179
14885636	Really?So the main issue with php is	Really?So the main issue with php is a few functions have inconsistent parameter order? Ignore the massive speed improvements, composer package manager system or huge community.  Good companies use php.  I haven't met someone at facebook that can't code it. (please spare me the HHVM comment or how your intern friend does haskell in the basement).Have you read about python 2 vs 3? Have you actually seen real programming language issues? Or tried to scale rails?  Or worked on deploying java with 30 other people?  Tracked a memory leak in c++? Been thrown into callback hell of node? Have you tried to get stackoverflow answers while developing in MEAN.IMHO people are just justifying their own stack (while secretly suffering with python - a 26 year old programming language) [1][2].  In reality 	ransom1538	12.694144	-6.656841	comment	4.0	30.0	1501417297	10.294118
14887391	From zero to Production Elixir in 1 	From zero to Production Elixir in 1 month	myth_drannon	12.696265	-7.448489	story	4.0	78.0	1501442825	12.939772
14890727	I've been toying on and off with Eli	I've been toying on and off with Elixir for a while now, and generally found it to be a fun language. You hear good things about Erlang's design, but the lack of familiarity lowers its approachability. On the other hand, Elixir is a much easier sell, since it's like a functional-Ruby.One of the many nice thing about Elixir is Mix, the default build tool. Since everyone is using the same tools for config, dependency management, tasks, etc. you can find your way around new projects very quickly.It's a great time to pick up Elixir if you're looking to build a web app. Phoenix released 1.3.0 [0] a few days back. The project structure changes along with Ecto 2.0 seem like a good step in the right direction, helping you separate the domain model from the persistence layer, and group related feat	TheAceOfHearts	12.692371	-7.398203	comment	4.0	18.0	1501496326	12.883912
14949704	The Death of Ruby? Developers Should	The Death of Ruby? Developers Should Learn These Languages Instead	rbanffy	12.580422	-7.0368657	story	4.0	5.0	1502129245	12.376965
15004889	Perl6 feels like it could be the ult	Perl6 feels like it could be the ultimate language for Man, Machine, Mineral, and Beast, if only we could teleport into a parallel universe where it war already in widespread usage. The sense of sheer potential off the language is intoxicating.I like to imagine the Geth in Mass Effect run on a hybrid Perl6/Erlang platform.	s_kilk	12.383917	-7.067037	comment	4.0	16.0	1502657754	13.18688
15008185	Thank you for inputs on the specific	Thank you for inputs on the specifics.Would you say the reviewer/author is misunderstanding Perl6, or that I am misunderstanding the review?	wodenokoto	12.3445835	-7.0510354	comment	4.0	12.0	1502714253	13.187424
15036995	The author doesn't talk a lot about 	"The author doesn't talk a lot about preemptive scheduling, which is probably the best thing about the Erlang virtual machine. This video explains what preemptive scheduling is and why it is extremely useful: https://www.youtube.com/watch?v=5SbWapbXhKoFirst, the speaker creates an application endpoint that runs into an infinite loop on invalid input. Then, he shows how that doesn't block the rest of the requests. Using native BEAM (EDIT: BEAM = EVM = Erlang Virtual Machine) tools, he looks for the misbehaving process (the one running the infinite loop), prints some debug information and kills it. It's pretty impressive.Another great (and lighter) resource, is ""Erlang the Movie"" (https://www.youtube.com/watch?v=xrIjfIjssLE). It shows the power of concurrency through independent processes, th"	randomstudent	12.449133	-7.505901	comment	4.0	34.0	1502979652	12.879119
15036730	I have, and quite liked it. The prob	I have, and quite liked it. The problem seems to be that Elixir has much more momentum and better tooling (from a web-dev perspective). Am I wrong about that?	christophilus	12.700894	-7.4454174	comment	4.0	15.0	1502977854	12.925842
15044292	Somehow I get the feeling Elixir is 	Somehow I get the feeling Elixir is the new Ruby, every time I go through such presentations.Basically it looks like the escape route for Ruby developers that care about performance.	pjmlp	12.718564	-7.3604236	comment	4.0	29.0	1503041995	12.811347
15085100	"So, speaking for Google (for once):
"	"So, speaking for Google (for once):
We're on it (and about to post a response), but a number of us have looked at this, and having trouble finding any actual code in common between the repos at all (let alone any where the license was changed).I can find parts that depend on the gemstash project being installed, but nothing that appears to actually have been taken from the gemstash project .I'd someone here sees some, i'd really appreciate letting us know (here, or email me at dannyb@google) so we can go fix it."	DannyBee	12.632337	-6.946198	comment	4.0	16.0	1503522132	-5.6635795
15124386	Coming from Django , I was surprised	Coming from Django , I was surprised rails 5.1 didn't come with authentication / authorization (or a valid email regexp)I will definitely use this!	abledon	12.830674	-6.808982	comment	4.0	19.0	1504016052	12.302127
15129236	Does this have anything to do with D	Does this have anything to do with Django whatsoever? The title is misleading.	whalesalad	12.83014	-6.5276833	comment	4.0	17.0	1504059352	10.069816
15128740	">> ""a vulnerability in the gem insta"	">> ""a vulnerability in the gem installer that allowed a malicious gem to overwrite arbitrary files""Yeeks. Not good.(sudo) gem update --system ASAP"	travjones	12.680526	-6.960352	comment	4.0	25.0	1504052414	12.373158
15128127	Node.js CTC and TSC have been merged	Node.js CTC and TSC have been merged back together	akras14	12.363913	-6.4685225	story	4.0	4.0	1504045161	-10.376053
15144500	PHP - make changes, just refresh bro	PHP - make changes, just refresh browser. No compiling, node/pm2 restarts, anything.	godot	12.768879	-6.6409273	comment	4.0	12.0	1504218360	10.321291
15148444	Maybe my viewpoint is too 'elitist' 	"Maybe my viewpoint is too 'elitist' or something, but I have a hard time taking this seriously when one of the chief complaints of Typescript is that it is too ""difficult""It really makes me question the validity of the rest of the points."	ArchReaper	12.356547	-6.8266	comment	4.0	12.0	1504275201	-10.471376
15150730	The python code in the post looks a 	"The python code in the post looks a bit funny with the `end` statement at the end. I had to ready it twice to be sure that Hypothesis hadn't been rewritten for Ruby!Also, by ""supporting Hypothesis"", you mean ""giving money to DR MacIver"", right? This is not completely clear from the post."	fermigier	12.566072	-7.047636	comment	4.0	14.0	1504287982	12.402865
15172931	> I believe this is actually why erl	"> I believe this is actually why erlang never really took off widely -- a PHP script hitting the database is a better version of the same concept: the PHP code can crash, and that will cause a lost connection and a ROLLBACK in the database, getting you back to a known-good state and the other requests just continue working (security and other PHP jokes aside).Comparing Erlang to PHP + transactional DB is regrettable.Firstly, Erlang's ""let it crash"" philosophy, together with its sophisticated supervisor/worker framework, aims for resilience in the face of failure due to bugs or bad data. A PHP script hitting a database may be a better design for a simple web application, but it is in no way superior to the Erlang/OTP ecosystem for Erlang's primary use case: soft real-time, highly concurrent"	defined	12.540698	-7.506842	comment	4.0	25.0	1504592781	12.911592
15173697	Is using PHP bad? I've seen speed co	"Is using PHP bad? I've seen speed comparisons and it is slow. I feel bad so far it's the only back end language I know unless counting JavaScript but don't currently use Node in development.I just keep seeing it being labeled bad a lot. I guess it depends if you can avoid it right? The current company that I work for (contract hourly) is a LEMP stack built on WordPress. Ideally I could strip WordPress out and get to the core purpose of the web application but it's not at that stage yet. I like the idea of separated services
butEdit: I saw some infographic saying PHP was too easy to use/get into and resulted in many bad coders who were using it. It's also old, whenever I'm on the manual site and see the comments dating back to 10 years haha. What about machine code running on computers."	ge96	12.753538	-6.603598	comment	4.0	15.0	1504604413	10.302381
15188836	I don't think hype is the main facto	I don't think hype is the main factor. Ruby's decline is due to its narrow focus on web development and Rails in particular. Whilst there certainly are gems covering other areas of computing Ruby never seemed to diversify the way Python has. With Node.js eating Ruby's lunch in the web development sphere Ruby is left looking like the single-commodity Venezuelan economy. Let me add that I think Rails is a fantastic piece of software. Maybe TruffleRuby and Substrate VM will revive Ruby's fortunes. Matz's promises for Ruby 3x3 are too little too late, I fear.	cutler	12.689713	-7.005871	comment	4.0	15.0	1504752790	12.376879
15236149	Faster and simpler builds setups. An	Faster and simpler builds setups. And you don't really lose it as your editor will report the type errors. Flow is used like this all the time.Tried this on a project of mine. Enums seem to work fine for me.EDIT: There are some issues with enums indeed https://github.com/babel/babel/tree/master/packages/babel-pl...	esamatti	12.434459	-6.740872	comment	4.0	20.0	1505286571	-10.509471
15244376	Ruby lets you use arbitrary tokens f	Ruby lets you use arbitrary tokens for string literals with %s{} (where the braces can be a bunch of things). I wish more languages would adopt this tbh.	stormbrew	12.3351145	-7.0714684	comment	4.0	12.0	1505353273	12.388357
15249858	>I used to think that all dynamic la	>I used to think that all dynamic languages (Ruby/Python/Javascript/Perl/…) were of a par but I have to admit that Python has an awful lot of mindshare and it's beginning to exhibit strong network effects.Ruby is a wonderful language with a really unfortunate standard implementation. It's easily 5 times slower than Node at practically anything, which is sad because Ruby is infinitely better than Javascript. I really think this is what it comes down to and why Rails has been dying off.	aphextron	12.545849	-7.0283017	comment	4.0	17.0	1505407848	12.352782
15252772	Ok this is uncanny, I just commented	Ok this is uncanny, I just commented on the need for something similar yesterday:https://news.ycombinator.com/item?id=15244655I wish I could set up a notification of some kind to know when someone gets Erlang/Elixir running on this chip.  It would be a great platform for stress-testing Go concurrency as well.Beyond that, I would really like to see Octave running on it because it's the only approachable vector programming language that I know of.  The holy grail for me is to be able to use something like the MATLAB libraries at 1000 times their current speed to simulate the interesting stuff.	zackmorris	12.626921	-7.4746313	comment	4.0	14.0	1505425409	12.939369
15256854	With such lagging browser support fo	With such lagging browser support forcing you to compile ES6, it generally makes more sense to jump to TypeScript. You get all the E56 plus things like interfaces and enums and, of course, strict typing.	fortythirteen	12.367248	-6.503341	comment	4.0	24.0	1505481389	-10.36243
15261178	I've been a designer/programmer pret	I've been a designer/programmer pretty much my entire career and currently work on a research-centric UX design team. So while I've been designing my own language (THT, a language that compiles to PHP, aiming to fix most of the issues with that language), I've been applying usability concepts to the design.A few principles:- Acknowledging that the user is probably familiar with other languages, so stay within those conventions when possible. This is inspired by Jakob Nielsen's maxim that web designers should acknowledge that their users send 99% of their time on other websites.- Making the most common activities the easiest. Larry Wall refers to this as applying Huffman coding to the syntax itself.- Safe defaults.  Making dangerous operations less convenient than the safe path. PHP has pre	jlesk	12.748559	-6.655402	comment	4.0	16.0	1505513302	10.309049
15274756	Crystal Mimics Learning and Forgetti	Crystal Mimics Learning and Forgetting	dnetesn	12.622069	-7.207049	story	4.0	39.0	1505731860	-11.211999
15278605	I felt the same way when I switched 	I felt the same way when I switched from CoffeeScript to TypeScript but the type checking was worth all the braces, returns and lack of existential operator.  If CoffeeScript added an (optional) type system I'd switch back in an instant.	dugmartin	12.347999	-6.8625555	comment	4.0	17.0	1505761718	-10.530638
15279022	> HHVM & Hack solved two big problem	> HHVM & Hack solved two big problems that made PHP difficult for Facebook and other large companies with large existing PHP codebases: Speed, and the lack of type checkingAt what point do you stop using the hammer to put in a screw and just use a screwdriver?	jimktrains2	12.760121	-6.6474233	comment	4.0	17.0	1505764994	3.4400797
15280213	Oh boy they really got you!Have a lo	Oh boy they really got you!Have a look at Python & Flask! There is nothing easier than that!	dna_polymerase	12.673452	-6.557035	comment	4.0	12.0	1505773403	10.010385
15283923	As we have recently adopted TypeScri	As we have recently adopted TypeScript, this is a nice affirmation, but preventing bugs is only part of the benefit and I'm not sure it's the most important part.TypeScript, in conjunction with a code editor that supports it, significantly improves the code editing experience. Sometimes I still have to chase down documentation, examples, etc. to figure out how to use something, but it happens far less often. In general, I feel like I can code faster and with more confidence.I assume all this is also true of Flow, though I've never used it.	dpratt71	12.435426	-6.7402306	comment	4.0	48.0	1505823347	-10.487179
15320619	Two answers for you:1) don't-- inste	Two answers for you:1) don't-- instead learn about making single page apps on the front end using React and Redux, or perhaps Angular 2.  Then write a REST backend in either Node, Go, Python, or C#. Or go serverless and write the backend in Firebase.2) if you really do want to do Django, start by doing the default tutorial that focuses on building something in the admin interface. Coming from a rails background you are on somewhat similar ground.	unoti	12.809548	-6.446424	comment	4.0	18.0	1506186176	9.956307
15327136	Can we stop with the erlang/Elixir i	Can we stop with the erlang/Elixir is slow? For most web services it is as fast as go.For my last side project I was evaluating go and erlang. Just to test out how faster go is, I quickly coded a simple HTTP request in both language(I am not an expert in either).The server would get a request with large body, cache it to a file on the disk, then load it in 128k chunks, get the hash of the chunk and save both the digest and the 128k data to a database.To my surprise, erlang was consistently slightly faster for each request. Happy to share the code snips of both if anyone want to audit/scrutinize.Edit: Code for both: https://pastebin.com/aBQWqkG3On my laptop a single request(1.2MB) takes around 230ms for Erlang and 280ms for Go. Not a scientific test, but it gives an idea.	noncoml	12.575121	-7.4899282	comment	4.0	26.0	1506297039	12.896677
15431949	"I suppose a better question is ""Why "	"I suppose a better question is ""Why aren't you using a framework that automates 90% of your CRUD?""There are lots of those.  Rails is the obvious one to point to, but there are dozens of others built in the late 00's that all tried to recreate that ""20 minute DB-Backed Blog"" demo.I imagine the answer (to my question, and thus yours) is that fashion changed.  Everybody wants to build Single Page Apps today.  For everything.  Even when it makes no sense whatsoever to do so.So you find yourself dragging in a few megabytes of javascript just to render your static blog page.  And you have all the power that made sense for the engineers at Facebook to use on their newsfeed, where things would regularly change behind the scenes and the page needed to re-render and re-flow itself several times a mi"	jasonkester	12.712248	-6.5153923	comment	4.0	20.0	1507531362	12.276852
15439304	Well, there are problems with that a	"Well, there are problems with that approach too.At the far end, any programming logic you put in the DB will be impossible to scale if needed. You can only have one DB, but any number of Rails servers.Database constraints are a matter of preference and skill set. They make some things much harder when you have to delete things is certain convoluted orders, and I can get the correctness through tests. Your decisions may differ. That's fine.You should always put indexes on things you query by. Be vigilant. This is the one case where ""only optimize when you have a performance problem"" rule doesn't apply."	BurningFrog	12.880465	-6.736835	comment	4.0	14.0	1507608983	12.240051
15448550	I love your enthusiasm. I agree with	"I love your enthusiasm. I agree with the points about functional programming in Python though.Help me fix this line: https://github.com/kurocha/tagged-format/blob/283d9bb1c91768...In Ruby it would be    output.puts ""\t\t#{vertex.join(' ')}"""	ioquatix	12.385538	-7.0717673	comment	4.0	12.0	1507716894	12.406003
15458812	I had to learn Ruby when I got a job	I had to learn Ruby when I got a job as a full stack dev. Before then I mostly used Python and Java. To date I have not found a language that I love more than Ruby. It's a delight to use. I truely enjoy coding in Ruby, whereas I'm usually some flavor of neutral with most other languages (except PHP... blah). Perhaps there are some people that are on the same wavelength as Matz. One thing I found interesting is that when surveying whitespace of Github repos, 100% of Ruby repos surveyed had 2 spaces for indentation. Looking down that list, I wonder why some languages have more conformity of indentation style (other than frameworks helping enforce styles). Perhaps certain languages attract certain types of developers or help foster a particular culture?https://ukupat.github.io/tabs-or-spaces/	kendallpark	12.527677	-7.0439844	comment	4.0	14.0	1507823175	12.400095
15524306	Surely ruby's blocks are much better	"Surely ruby's blocks are much better here. For one they're a much more general construct than with, and second exception handling is done with normal language constructs like rescue and ensure. Implementing one is simple and obvious and is nicely contained in a single method.For example    File.open(args) do |file|
      # use file
    end

And the implementation is simply    def self.open(*args)
      file = File.new(*args)
      begin
        yield file
      ensure
        file.close
      end
    end"	RX14	12.391063	-7.1484227	comment	4.0	16.0	1508630421	12.341845
15531745	Ask HN: Why is there no really succe	Ask HN: Why is there no really successful Ruby on Rails CMS solution	etewiah	12.752883	-6.9301553	story	4.0	19.0	1508749331	12.350508
15534391	ROS is great! It's mostly an IPC fra	ROS is great! It's mostly an IPC framework, and very thinly wraps DDS. We use it extensively for prototyping and simulation at NASA JPL. We even have a closed-source version that improves many of the shortcomings for real-world deployment or NASA flight projects. I highly recommend ROS as a starting point to anyone looking to get into robotics development. https://www-robotics.jpl.nasa.gov/tasks/showTask.cfm?FuseAct...	jvanderbot	12.697594	-6.847621	comment	4.0	19.0	1508776031	12.200333
15541903	Certainty: Automated CACert.pem Mana	Certainty: Automated CACert.pem Management for PHP Software	CiPHPerCoder	12.76227	-6.612258	story	4.0	25.0	1508856219	10.322251
15569932	>I would love to see more cookbook e	>I would love to see more cookbook examples of using Elixir but NOT as a Ruby/Rails replacement.I would love to see more examples that get away from web dev with Elixir. While it's great with the Phoenix framework there is so much more to Elixir than that. Trying to deploy an elixir daemon has been a pain and I haven't found much around that. There is escript and distillery and while I haven't tried distillery for non-phoenix apps, escript works but deploying is still a pain.	jetti	12.727471	-7.345253	comment	4.0	15.0	1509122008	12.858328
15573599	It's good to see languages like thes	It's good to see languages like these showing up. Would love to code something complicated before I have a detailed opinion. With my experience in Typescript (another typed language claiming to make code better with some heavy React, Angular 4 projects); more than occasionally you have to escape into JS world (the dreaded <any> cast); thing that could have been done simpler with modern ES6 syntax needs some heavy lifting and rope jumping.Since it's all JS under the hood, the type system is an illusion that language plays tricks on you. This makes it hard for people to understand how JS works or functions; without prior knowledge. Just to quote example one of my team mate had an interface in Typescript, and he was not able to understand why cant he do `x instanceof Foo`. Long story short is	maxpert	12.345554	-6.8224993	comment	4.0	17.0	1509156094	-10.439772
15583685	You might want to give this a look: 	You might want to give this a look: https://github.com/Microsoft/TypeScript	dunstad	12.3685465	-6.7764435	comment	4.0	43.0	1509352214	-10.428052
15587691	My personal experience with Flask ha	My personal experience with Flask has led me to believe it's many times easier to expand on vanilla Flask then it is to try and incorporate any of the flask-* libraries.	ApolloFortyNine	12.717689	-6.5604534	comment	4.0	12.0	1509388641	10.014594
15596950	I’ve long banished Babel thanks to T	I’ve long banished Babel thanks to Typescript. Still has a transpile step though much faster and no more plugin hell.	koolba	12.362425	-6.52815	comment	4.0	32.0	1509487061	-10.426536
15599107	I was surprised to see Ruby attracti	I was surprised to see Ruby attracting much dislike. I had the impression that it was a language explicitly designed to be used by human programers to express ideas, although with poor runtime performance. What could be the reason?	mavelikara	12.5820465	-7.051513	comment	4.0	22.0	1509516270	12.395476
15599126	Poor performance, and Ruby likes mag	Poor performance, and Ruby likes magic. Magic methods and macros scare off a huge audience of programmers in the mainstream world. Rubyists tend to wholeheartedly embrace them, however.	shakna	12.600533	-7.0375733	comment	4.0	18.0	1509516644	12.374055
15604746	That's an improvement, but what abou	That's an improvement, but what about syntax coloring, intellisense suggestions and instant squiggly-lines when you make a typo? These are all important for productivity. You get all this when you use .tsx templates (which by the way, are not limited to React, see https://github.com/wisercoder/uibuilder )	interlocutor	12.403901	-6.753951	comment	4.0	13.0	1509564839	-10.438322
15641761	"Ruby is ""too magical"" for its own sa"	"Ruby is ""too magical"" for its own sake. And then people abuse their right to use it, things like overriding class methods, etc (the syntax doesn't help in the least and it has some weird quirks when compared to python)I'd take a smoke test and some high-level functionality test before the over-testing preached by the TDD ""gurus"" or any crap spouted by uncle bob. 100% code coverage is a myth, your code still can fail spectacularly with a good code coverage and guess what, most of the software in production today was not TDD'd let alone unit tested.People sell TDD like a OCD inducing religion instead of something that might be a good idea in some specific cases"	raverbashing	12.509078	-7.025097	comment	4.0	21.0	1510042980	-13.318872
15643378	I realize I'm fighting an uphill bat	I realize I'm fighting an uphill battle here considering your username, but what you're saying is that it's just as easy to jump into Rails today whether you're a total n00b or you were an early adopter using it every day over ~6 years from 0.X to 3.0, skipping a couple versions, and then returning.Come on...	rco8786	12.760071	-6.934315	comment	4.0	14.0	1510063262	12.33266
15642033	Every web application requires at le	Every web application requires at least 2 languages (a sever side language and HTML). Virtually all of them also end up also including Javascript and CSS. And Javascript as a server side language is relatively new. That's not a great argument against Rails.	ritchiea	12.666757	-6.9553213	comment	4.0	31.0	1510047491	12.3565
15668858	> but this one is just not well writ	"> but this one is just not well written and the author has no idea about this subject.Rubbish. The examples are good. The author comes across as enthusiastic. The writing style is fine and engaging. A couple of the examples are from a modern variant of an older language but so what? That small oversight and you completely bash the effort?You could have said,""The writing didn't do it for me and the author has more to learn about the subject"" but you came out with the big stick instead. You come across like a typical elitist functional programmer. Blah, blah, blah, Lisp had that _forty_ years ago, lame!I thought the language features were interesting. I'd read up on Kotlin but overlooked the it keyword, I'd love if Ruby got that. In fact, I was trying to figure out which features Ruby has th"	igravious	12.505695	-7.084632	comment	4.0	13.0	1510306289	12.373662
15685003	Why nobody mentions ember? I thought	Why nobody mentions ember? I thought it was the third most popular thing behind react and angular?	kamac	13.110985	-6.448282	comment	4.0	15.0	1510560408	-15.490754
15686037	Use the language your team is famili	"Use the language your team is familiar with! If it is PHP don't hesitate just because it is not ""cool""..PHP was a great tool back in the day and today!PHP with a decent framework like Laravel [1] or Zend Framework [2] really works well and addresses all the features that you have listed (except the last 2).Uniquely among modern languages, * PHP was born in a web server *. Its strengths are tightly coupled to the context of request-oriented, server-side execution.We've managed to develop several complex apps over the last 10 years on PHP. For Web Socket support, we use Socket.IO or Firebase and it both really well together with PHP.If you choose PHP now, you are not alone. Many companies still choose PHP for their Web Application. Slack uses PHP for most of its server-side application logic"	Continuous	12.754395	-6.599706	comment	4.0	20.0	1510576856	10.324218
15735278	Understanding 'this' in JavaScript i	"Understanding 'this' in JavaScript is simply table stakes at this point. You and anyone else who touches your JS code should have a decent grasp on 'this'. Citing ""complexity of this"" while using React is just absurd in my opinion...You Don't Know JS: this & Object Prototypes cleared it up nicely for me.[0] Love the series in general too.Also -- and I'm not sure how it's typical done when taking a functional approach -- where do these functions ""live""? What if we want to use a Person in another module/component/whatever? Do we basically just have a collection of ""static"" functions on a helper class that we're going to be using? I'm not sure that's a real gain. Would rather see the functions available on the Person itself (though maybe that's just my OOP ways talking).And then there's the """	nulagrithom	12.565081	-6.5439672	comment	4.0	22.0	1511117898	8.446862
17281513	Former Ruby developer here. I believ	Former Ruby developer here. I believe we will look back at this period where we eschewed static typing as a historical mistake.Back in the 2000s I was using mostly statically typed languages (Java, C/C++, ObjectPascal), and compared to those, Ruby and Rails seemed like incredible productivity boosters. But we quickly found that the lack of typing led to all sorts of issues. For one, you need really comprehensive tests to determine whether a change breaks anything. Refactoring becomes not just a chore, but genuinely psychologically stressful as you begin to worry about things breaking in production. And they frequently do. Duck typing is elegant, but it only works so far as you know the range of types to expect. I very quickly got tired of checking the validity of arguments in code and doin	atombender	12.4660425	-7.11119	comment	4.0	14.0	1528687530	12.37947
17301422	Surprised they didn’t opt for Typesc	Surprised they didn’t opt for Typescript. Then again, it’s a tweet - looking forward to a longer blog post with technical details when they’re willing to talk about it more.	shrumm	12.356655	-6.792228	comment	4.0	21.0	1528880402	-10.477795
17310834	The Composer project and Packagist a	The Composer project and Packagist are the catalysts which made it possible to drag PHP development out of the dark ages, but it's still got some rough edges that will eat a afternoon.Recent example: Re-organizing namespaces and classes in an internal library. Losing my mind (doing everything right) until finally realizing Composer wasn't updating the autoloader to reflect changes to the lib's composer.json.For something that works really well when it’s working, I have blown a lot of hours fighting with this stuff.	joemaller1	12.762815	-6.6308475	comment	4.0	20.0	1528975797	10.329919
17313495	> Elixir has been mostly selling its	> Elixir has been mostly selling itself: it works, it sits on a rock-solid platform, code is very understandable as the community has a healthy aversion towards the sort of “magic” that makes Rails tick, and it’s quite simple to pick up as it has a small surface areaI was a huge Rails fan back in '07 and built a number of apps with it successfully, but I can't help feel like it's transition to a legacy framework has already begun.While Rails was never top in the performance category, languages are catching up in tooling and readability. So, now you can get performance and a great developer experience with multiple other languages like Elixir, Crystal, Go and more.	everdev	12.714585	-7.326565	comment	4.0	31.0	1528997592	12.772517
17316189	It seems that Elixir would be a perf	"It seems that Elixir would be a perfect platform for Artificial Intelligence programming.Since Elixir is used for (1) functional programming, and (2) it uses Erlang's OTP Server for massive parallelization.But, I don't seem much activity in this space.  What is the probability that Elixir will emerge as the ""killer app"" for AI development?"	blackrock	12.682233	-7.452423	comment	4.0	13.0	1529017995	12.953449
17318990	> Because Crystal is compiled, it is	> Because Crystal is compiled, it is impossible to have a true REPLImpossible, or just hard?	asplake	12.614979	-7.265744	comment	4.0	27.0	1529062530	-11.284329
17355527	TFA might be right about Rails but c	TFA might be right about Rails but completely wrong about Spring. Spring is absolutely a web framework--templates and all. With Spring Boot and modern Java, the productivity is probably in same ballpark too.	vajrabum	12.621193	-6.9008393	comment	4.0	23.0	1529504008	12.312019
17357084	> In order to scale, Ruby applicatio	"> In order to scale, Ruby applications need very high coverage.Exactly, this is the ""at enormous cost"" bit I hinted at."	pka	12.695191	-6.980411	comment	4.0	13.0	1529513649	12.362753
17355856	There is also no tech stack in the w	There is also no tech stack in the world that will get you to rewrite your entire application faster than RoR.	akuji1993	12.689039	-6.880778	comment	4.0	37.0	1529505941	12.259327
17355953	I posted this same comment to /r/rub	I posted this same comment to /r/ruby when this article was posted there:Having serious large scale full stack Rails and non-Rails (Py or Node) under my belt now, it has become ever so clear how productive Rails is and how much of that is the fact that Ruby actually has a f*ing standard library (directed at JS). So I'm not surprised by these numbers.Then with gems like devise, filterrific, simple_form, cocoon, carrierwave, sidekiq, and activerecord-import I can whip together apps so quickly it just boggles my clients' minds. The ecosystem is deep, rich, documentation is good if not great and the language has several paths to getting some serious speed improvements behind it (Graal/Truffle/Substrate and JIT).Implementing the simplest things in the node ecosystem sometimes feels like wading 	kshahkshah	12.744193	-6.9096017	comment	4.0	42.0	1529506462	12.34536
17394117	Show HN: My first PWA, an educationa	Show HN: My first PWA, an educational game. My kids loved it, hope you do too	vnglst	12.551777	-6.6103287	story	4.0	9.0	1529947877	-10.455644
17408958	How to Structure Django Projects	How to Structure Django Projects	thornycrackers	12.828319	-6.5192475	story	4.0	43.0	1530113568	10.119805
17416750	If you're writing a REST api, invest	If you're writing a REST api, invest the time to learn Django Rest Framework. It is well worth it.	n0us	12.82087	-6.534903	comment	4.0	35.0	1530193351	10.057322
17425891	I tried out Crystal and Kemal a few 	"I tried out Crystal and Kemal a few months ago and really enjoyed it. However, one issue that's preventing me from wanting to take it to production is that apparently you cannot generate fat binaries and run them without Crystal also being installed in your deployed environment.Is that true still? If it is, does anyone know when support for ""real"" fat binaries (no need for Crystal on the server) will be available?"	snake_case	12.644456	-7.2615104	comment	4.0	25.0	1530292418	-11.173827
17460850	Is that really common among Elm prog	Is that really common among Elm programmers? As far as I can tell, it was a nice one off demo but it hasn't been advanced as Elm has.	seanmcdirmid	13.005641	-7.688618	comment	4.0	12.0	1530764862	-12.763975
17501065	I can't find the right place for Rub	I can't find the right place for Ruby on Rails here. It doesn't fit.	copperx	12.765494	-6.926082	comment	4.0	21.0	1531248891	12.374827
17516130	OMG there are some real gems in that	"OMG there are some real gems in that thread.> Escalate?  Oh how I wish I had someone to escalate to.  - rasmus@php.net> After carefully reviewing this bug report with our board of directors on 4chan, we have come to the conclusion that your ""rusty C skills"" should be enough to fix the issue.
I would therefore like to remind you that rasmus@php.net is http://en.wikipedia.org/wiki/Rasmus_lerdorf"	coryfklein	12.689936	-6.6672254	comment	4.0	13.0	1531412763	10.32024
17564772	Agree. The whole point of rules is t	Agree. The whole point of rules is that you allowed to break them from time to time.During development with Rails I struggled a lot, because it was forcing CRUD ideology in places where the custom route could work (and adding it was so painful).Standardization is fine, but usually it does not solve development issue, it solves management issue, which is common for big orgs not small ones. Especially when it gets on hype or forced by the top management, like it happened numerous times, with latest examples of React, GraphQL or Microservices.	LeonidBugaev	12.761838	-6.897037	comment	4.0	18.0	1531990515	12.335497
17597769	No, it isn't computable (that is, co	"No, it isn't computable (that is, correctly determining one of ""these functions behave the same"" or ""these functions behave differently"", and not ""unknown"") in general, as it is equivalent to the halting problem. Consider these two versions of a function, are they API compatible?  def foo():
    return True

  def foo():
    return halts(""some turing machine program"")

They're only truly API compatible if the program halts, but the program can be arbitrary, so proving that any 'foo' of this style are equivalent is solving the halting problem.Of course, one can still likely get useful answers of ""definitely incompatible"" etc., with much more tractable analyses. AIUI, the Elm version ends up just looking at the function signature, and catches things like removing or adding arguments: for app"	dbaupp	12.972182	-7.659929	comment	4.0	23.0	1532400859	-12.715013
17646022	I’m not a huge JavaScript developer 	I’m not a huge JavaScript developer as I prefer to code things in native languages wherever possible but TypeScript is amazing and has brought much-needed sanity to the world of interpreted scripting languages. With Hejlsberg at the helm it has gained some incredible type-related features that even traditional strongly-typed dynamically inferred languages haven’t been able to find elegant syntax for.It started off taking language queues and inspirations from C# and other languages and is now at the point where they are the ones copying back. Impressive stuff, and it’s really come a long way since 1.0 which was so much more awkward to use.	ComputerGuru	12.34845	-6.7878046	comment	4.0	23.0	1532970404	-10.451692
17646757	I wasn't aware of any advances to JS	I wasn't aware of any advances to JS made by Coffescript, what advances has it made? Do you have examples?You're right about jQuery and underscore, though I think jQuery's are often overstated (it and Sizzle inspired the querySelector API in browsers' DOM implementations, and not much else, underscore has had wide-ranging implications for ES6 in general)	lucideer	12.395056	-6.4852295	comment	4.0	22.0	1532975342	-10.4871435
17647103	It's kind of crazy that Facebook has	It's kind of crazy that Facebook has let TypeScript takes so much market share.I've been using Flow for so long now. The techno is good, the integration with the code editors is good too, but Flow has a lot of small-but-really-annoying bugs (2235 issues on GitHub right now), the type definitions for third-party libs are meh (you often have to update/fix the definitions by yourself), the team seems extraordinarily unstaffed for such an important project, they don't share the roadmap at all, the priorities are clearly internal first (like improving the performances instead of fixing the bugs) and they don't seem to do much marketing or communication about it.I wonder what's the future of Flow at this point.And I'm seriously thinking to move to TS (for pro and personal projects) once create-r	ggregoire	12.492371	-6.6327214	comment	4.0	16.0	1532977933	-10.453081
17648961	Does that mean there's still room in	Does that mean there's still room in the JS ecosystem for a Rails-alike? Maybe one that could become very popular? Because I am looking for a major open source project to create and spearhead, something that could get hundreds of thousands of active users and a thriving subcommunity, but I've been holding off until I find just the right project.	sbjs	12.7664585	-6.850755	comment	4.0	25.0	1532991462	12.336289
17653572	Ask HN: Is the modern software engin	Ask HN: Is the modern software engineering industry turning into a cartel?	minionslave	12.785773	-6.6374316	story	4.0	3.0	1533048431	10.359959
17664213	Yes. I wonder what's the future of F	"Yes. I wonder what's the future of Flow (even if it's still used and maintained). As I posted in another topic about TS:> It's kind of crazy that Facebook has let TypeScript takes so much market share.
I've been using Flow for so long now. The techno is good, the integration with the code editors is good too, but Flow has a lot of small-but-really-annoying bugs (2235 issues on GitHub right now), the type definitions for third-party libs are meh (you often have to update/fix the definitions by yourself), the team seems extraordinarily unstaffed for such an important project, they don't share the roadmap at all, the priorities are clearly internal first (like improving the performances instead of fixing the bugs) and they don't seem to do much marketing or communication about it.> I'd love t"	ggregoire	12.4544325	-6.6862216	comment	4.0	19.0	1533141843	-10.475409
17687591	That would be a pretty awesome devel	That would be a pretty awesome development. But Google buying a Rails platform would be kind of a surprise move.	jasonvorhe	12.773912	-6.889737	comment	4.0	13.0	1533402324	12.348477
17699091	Thank you very much for the publicit	"Thank you very much for the publicity, I greatly appreciate it!Prolog is rather unique in that it admits a meta-interpreter in roughly 3 lines of code.
Contrast this with other languages, where writing an evaluator typically takes much more code, even for quite high-level languages.This brevity is possible mainly because Prolog - like Lisp and assembly language - is a homoiconic language, and in addition to that, Prolog has powerful built-in mechanisms that can be used in interpreters, and in addition to that, Prolog variables on the object-level (the program to be interpreted) are also variables on the meta-level (the interpreter). As a consequence, Prolog's implicit mechanisms can be absorbed in interpreters: They need not be encoded explicitly.Enjoy!"	triska	13.145085	-7.2956295	comment	4.0	20.0	1533573041	-12.48164
17717454	 If a library was written in typescr	 If a library was written in typescript, theb the users of the library wouldn’t be forced to use Typescript also, right? Does it really matter if the library is written in typescript or not?	seanmcdirmid	12.376524	-6.816598	comment	4.0	22.0	1533747401	-3.4933841
17728351	It is when you get to this part of p	It is when you get to this part of python, that you achieve true Nirvana.It's absolutely bonkers the extent to which you can be dynamic in this language.It's the very reason why Django is so DRY.	devxpy	12.810368	-6.537569	comment	4.0	21.0	1533847693	10.033808
17753503	No note of parallelism on the roadma	No note of parallelism on the roadmap?https://github.com/crystal-lang/crystal/wiki/Roadmap	patagonia	12.617992	-7.2702537	comment	4.0	28.0	1534193154	9.295638
17784102	Joy (programming language) interpret	Joy (programming language) interpreter in Prolog	triska	13.136927	-7.296867	story	4.0	56.0	1534524314	-12.489772
17809306	Congrats on the release! I have very	Congrats on the release! I have very high hopes for Elm in the future, and I think it truly shifts the paradigm of frontend development.On an attempt to use Elm in production I ended up switching back to Javascript. The biggest issue I faced was lack of type-classes, which made certain parts of the code feel like I was pulling teeth to get Elm's type system to be happy. Perhaps this is more of an issue of expecting Elm to be more like Haskell than it is.I hope Elm is able to get more adoption, and with it more examples of idiomatic approaches to problems in Elm's style. However this somewhat feels like a chicken-and-egg problem.Regardless, this release looks great for people using it in production already!	doctor_stopsign	12.995213	-7.6810403	comment	4.0	28.0	1534857990	-12.760103
17809384	> If you have ever tried to use ADVA	> If you have ever tried to use ADVANCED_OPTIMIZATIONS in Google Closure Compiler, you know that this is extremely difficult even when you write all the code yourselfPerhaps, but it’s quite nice when you use languages that were built to support Google Closure from the beginning, like Clojurescript.  Then it is painless and built into the build process automatically, and you get to benefit from all the other great advantages of advanced optimizations in Google Closure that this article does not mention, and which Elm still cannot support or offer an alternative for, like automatic loop unrolling and other notable performance improvements.	hellofunk	12.902997	-7.671905	comment	4.0	23.0	1534858590	-12.73371
17809535	Does Elm rely on node.js and npm? Or	Does Elm rely on node.js and npm? Or is it usable without it?	stesch	12.986967	-7.679567	comment	4.0	12.0	1534859590	-12.755577
17835100	So, this was simply taking advantage	So, this was simply taking advantage of a crash-prone webapp running on a debug-enabled Django instance using Pickle session serialization, and more specifically this was only possible because _Django didn't redact the stored secret key used to sign serialized inputs out of the crashdump information!_Did the author tell Django about this yet, or is this a (possibly unintentional) 0-day?Besides the above interestingness, the morals of this story I get are- Stay persistent and leave your scanners running; you never know what new things will turn up.- Crashdumps _are_ interesting- Yay, $5,000!- Middleware and frameworks will always clash in useful and interesting ways?	exikyut	12.859374	-6.487599	comment	4.0	15.0	1535120933	10.081813
17835139	This is a great concrete example why	This is a great concrete example why you should never run debug mode on a public server. Django can only do so much for redacting private info. This is also a great example of how insecure pickle is!	Areading314	12.847367	-6.4969487	comment	4.0	34.0	1535121247	10.051684
17842881	Maybe it's my recent living in the E	Maybe it's my recent living in the Erlang/Elixir community, but writing code that is not possible to crash doesn't make sense to me. Servers die, machines get unplugged, network partitions happen, etc. I don't discount that the type system allows you to specify segments of your program that can be provably impossible to crash, but doing that for entire nontrivial programs seems like an impossible ask to me.	_asummers	12.371277	-7.4786396	comment	4.0	16.0	1535235445	12.841305
17842590	I looked at Elm a couple years back 	I looked at Elm a couple years back and decided on Purescript instead: http://www.purescript.org/Has a much better FFI story with JavaScript than Elm, and has a more powerful type system (higher kinder types, etc). Row polymorphism makes writing pure code a joy, the effects system is unobtrusive. I actually enjoy programming purescript more than Haskell.	tbenst	12.8916645	-7.663256	comment	4.0	25.0	1535231525	-12.76756
17842595	I would have liked to have seen cust	I would have liked to have seen custom operators stay around in 19, but I understand the motivations.  I think it was in 18 they removed back-ticks for the same reason. Just makes it way easier for newcomers to learn the language.As far as I understand it, the native modules lockdown had to take place. Period. The one thing that most attracts myself (and many others, I'm sure) to Elm is the guarantees that the compiler gives you towards ensuring no run-time errors.  Give folks the ability to author and publish Elm native modules and the entire platform loses that guarantee.	dsiegel2275	13.003584	-7.6840925	comment	4.0	14.0	1535231561	-12.7668
17842840	I think there’s a very weird mismatc	I think there’s a very weird mismatch between the way the core language people are pushing for the adoption of the language, and then at the same time they will turn around and say “we’ll, it’s not even 1.0, yet, so what’d you expect”.The way Elm is developed is fit for a language that has little to no users, and can take going so long between updates, that remove escape hatches needed to fill out the immaturity of the language.It really saddens me to see it go like this, because I once had high hopes for Elm. Nowadays I see it purely as a stepping-stone into more advanced languages like PureScript and Haskell. Elm is there to hold your hand, but it seems it has no intention of ever taking you further than the basics.	Tehnix	12.997603	-7.6862307	comment	4.0	37.0	1535234755	-12.765738
17848292	In my experience Haskell is exactly 	"In my experience Haskell is exactly what one of it's creators called it ""a DSL for writing DSls"". Elm can be viewed as one of such dsl, occam razor focused on web front-end. Otherwise,90% of the time you are stuck in IO  along with some really hard to grasp libs to help your pl learnings and rarely anything else"	AzzieElbab	12.903914	-7.674067	comment	4.0	12.0	1535322636	-12.759682
17848974	Bessel Beam	Bessel Beam	mojomark	12.41444	-7.328224	story	4.0	34.0	1535334973	7.13699
17851685	>We've also just optimized for featu	>We've also just optimized for features, time to market, and programming approaches that don't require the most highly-skilled and trained developersWe think we have been optimizing for those things, but I don't know that we actually have.  Does Ruby/Python really help you get to market faster than would similar languages with static typing and compilers or JITs? (Kotlin, C#, F#, Nim, etc)There is research that suggests not, certainly I don't think the effect is large if it even exists. Many people use TypeScript because they feel it is a productivity boon over Javascript.  We might one day leverage that and use the static types to compile TypeScript more efficient WASM or something, win win situation.	gameswithgo	12.338267	-7.0521107	comment	4.0	16.0	1535380202	-9.771786
17854112	I find PHP better than I thought I w	"I find PHP better than I thought I would because it supports a style of programming that's very similar to Java, but the big problem is that PHP developers often tend to have more of a ""quick-and-dirty"" mindset and don't really appreciate that kind of code."	emodendroket	12.721248	-6.6626296	comment	4.0	20.0	1535400966	10.316912
17855471	Most of my projects now use babel in	Most of my projects now use babel indirectly and its been removed from all backend projects at work, sometimes replaced with typescript or vanilla es6.Ex: anyone using facebook's jest, vue-cli, etc will get v7 whenever those packages upgrade.The typescript support seems interesting for people with large babel pipelines, but I'm not sure what the other use cases are since it doesn't do any of the typechecking tsc does. Would be interested in hearing what people plan to use it for.https://blogs.msdn.microsoft.com/typescript/2018/08/27/types...	STRiDEX	12.400425	-6.5466404	comment	4.0	15.0	1535413758	-10.451506
17856755	RoR is relevant as long as the commu	RoR is relevant as long as the community is active, as long as there is job demand (see crossover, Stackoverflow, etc.).It is an excellent framework with gems to act as plugins (rack middleware) to serve websockets, forums, admin interfaces all with a few lines of configuration. Google, Microsoft, Facebook all maintain Ruby libraries in GitHub. So as long as you are doing Joe's textile website, it is the right tool.Cloud scaling rails can be expensive, as apparent from horror stories [0] but a few manually managed instances with a load balancer and good web servers can go a long way.It lacks development time relative to python which cater to domains such as data processing and artificial categorization. With extension libraries such as helix [1] which utilize rust to create native extensio	nurettin	12.7149935	-6.9083514	comment	4.0	17.0	1535434489	12.324777
17856835	How is Ruby utilized outside of web 	"How is Ruby utilized outside of web development?For example:Python
 - Server
 - Cloud infrastructure SDK'
 - AI/Data
 - General scripting
 - Configuration management
 - Blockchain
 - ...JavaScript:
 - Browser
 - Server
 - Cloud infrastructure SDK'
 - AI/Data (however, not the most efficient choice)
 - General scripting
 - IoT
 - Blockchain
 - Mobile development
 - ...Basically, while Javascript may not be the most efficient choice for data science, you can get an understanding of the concept and make the switch to Python or Rust...Does the Ruby ecosystem have gateways into other areas of engineering?"	Shinobi881	12.618222	-6.9795065	comment	4.0	14.0	1535435988	12.33558
17857171	Why do you think an all-in-one frame	"Why do you think an all-in-one framework is an advantage? As soon as you want to switch something out you end up fighting the framework and the tutorials. Better to start with dedicated libraries that each do one thing - it's inevitably where you're going to end up.(Not that I'd consider an untyped ecosystem in the first place, especially one as fond of ""magic"" (e.g. monkeypatching) as rails. I have sympathy for just getting something working as quickly as possible, but there comes a point where you're storing up too much trouble even for the short term)"	lmm	12.657384	-6.526544	comment	4.0	31.0	1535442198	12.308546
17856793	Javascript, Ruby, and Elixir are emp	Javascript, Ruby, and Elixir are emphatically not interchangeable.Elixir is compiled, the other two are interpreted.JS is supported natively by all browsers and is at its core an event-driven functional language, the other two are not.Ruby is probably the comfiest OOP language out there, and certainly the one with the best standard library.These are not the same languages.	angersock	12.702391	-7.3395877	comment	4.0	17.0	1535435265	12.87836
17857679	One thing you'll run into with rails	One thing you'll run into with rails in 2018 for web development is it's going to be hard to find developers and only getting harder by the day. Rails developers are aging. They are no longer your 20 year old hipsters, that stereotype has long since gone, they have families now and boy are they EXPENSIVE. React is what people new to web development are LEARNING and that's all you need to care about. You can get react developers, who can fundamentally produce the same thing (your run of the mill CRUD apps), for a lot cheaper and they are (more) readily available. Anyone who claims that rails does something magic the others don't do by now is showing their allegiance rather than making a factual technical statement.In a few years I expect the problem to worsen as react chips away at rails, a	iamleppert	12.777376	-6.8223453	comment	4.0	14.0	1535451133	12.329525
17862629	Why typescript? wouldn't that choice	Why typescript? wouldn't that choice reduce the number people that can contribute?	Scarbutt	12.379838	-6.798087	comment	4.0	12.0	1535488623	-10.417485
21031005	Regarding the deleted Ruby gems:I th	Regarding the deleted Ruby gems:I think it's unprofessional for developers to try and bring down production services just because they disagree with a company move. It's also a bit immature. The thing to do in this case is to quit. Down your tools and quit, but don't destroy the hard work of your teammates and betray the trust of all your investors and customers.	tr33house	12.688406	-7.0065026	comment	4.0	23.0	1569011780	12.375417
21034950	I was at a dinner party and I was ta	I was at a dinner party and I was talking to the man’s wife about my work in software and cybersecurity.She told me that she keeps a crystal next to the family computer to help protect it from computer viruses.	xwdv	12.639869	-7.2597203	comment	4.0	15.0	1569069137	-11.253214
21054766	How portable are Crystal binaries? O	How portable are Crystal binaries? Or more generally, how easy is it to share a Crystal program with someone who isn't a Crystal user? E.g. C and C++ requires a lot of esoteric knowledge w/ occasionally slow builds, Go isn't that bad but has an intrusive bad default GOPATH, Rust + Rustup is like Go with better defaults but relatively long compilation times, Python/Ruby need the runtime installed + some kind of isolating environment, NodeJS just needs the runtime + NPM, Perl needs some kind of CPAN setup which is really confusing for newbies, etc.	nerdponx	12.624636	-7.266526	comment	4.0	14.0	1569280311	9.865478
21077458	No offense intended, but I really do	No offense intended, but I really don't know how it's possible to write a forum with so many vulnerabilities. Forums aren't exactly rocket science. It's basic input validation and you're good to go. Many recent functions (in PHP) already sanitize input even if you forget. So things like parametrized SQL queries and browser same origin policies really help limit the attack surface.I find it depressing that vBulletin has been getting hacked for so long that it's literally outlived several of the major vulnerability disclosure websites that have historically published exploits about it (like milw0rm -- still an amazing theme, btw.) Maybe PHP should throw warnings about eval and recommend an alternative function purely for expressions instead. In Python apparently eval evaluates expressions fo	Uptrenda	12.76819	-6.553553	comment	4.0	12.0	1569463132	10.264703
21096033	I applied to this company right at t	I applied to this company right at the beginning of there expansion. The person that interviewed me said he had been sleeping on couches for the last year or so, (around 2017) and working insane hours. They gave me a php coding test to implement some kind of pub/sub. I finished it. Had no real way of submitting it other than emailing it to the interviewer as a zip.The moment the interviewer told me they worked with a php stack. I asked why they'd chosen to go with php given that the product was so new they could've chosen any newer tech. stack (JavaScript framework) and probably been better off. The interviewer didn't really response to my question.The entire conversation with said person, was them talking at me for about 30 minutes. They said the company was going to try to pivot to devel	fantasticFerret	12.788997	-6.603686	comment	4.0	44.0	1569616579	-1.1019535
21097312	Maybe I'm dumb - Can anyone tell me 	"Maybe I'm dumb - Can anyone tell me why PHP vs JS for a ""generic"" web application?\In 2019 there are far far far more developers with real experience developing in Javascript vs PHP. There are obviously a lot of other factors in considering the base dev language, but unless you can make a strong case for PHP vs JS, I'm picking JS every time because in the generic case they both meet my needs but a lot more devs work with JS vs PHP. This is not a moral argument, but rather a practical one. What is the practical argument for PHP?"	xnyan	12.675671	-6.535723	comment	4.0	26.0	1569628354	10.292288
21098917	JavaScript predates PHP by five year	JavaScript predates PHP by five years. 'Maturity' is a subjective quality in my opinion and I also think PHP is a hot mess. JavaScript is synchronous unless you specifically utilize its asynchronous parts. Asynchronous execution is possible with PHP	wavefunction	12.651863	-6.518764	comment	4.0	21.0	1569654392	10.288053
21101279	PHP/Laravel have something similar t	PHP/Laravel have something similar to this now called Livewire https://laravel-livewire.com/The author, Caleb Porzio (https://calebporzio.com/), was inspired by Phoenix LiveView to build something something like this for his preferred language/framework.	francislavoie	12.825683	-6.6443095	comment	4.0	14.0	1569688267	10.393131
21104174	I don't like it from the security pe	I don't like it from the security perspective, looking at just how many vulnerabilities PHP-based software has had, it's too trivial to create a XSS, SQLi, CSRF, LFI, RCE and many other classes of vulnerabilities. I think there are better options out there than on average give better results. Maybe it's just incredible selection bias I'm encountering \shrug.	Avamander	12.777653	-6.5890837	comment	4.0	21.0	1569717878	10.305864
21111544	At least some of those examples are 	"At least some of those examples are highly misleading:> There is no better example of Erlang’s reliability than the English National Health Service (NHS). [...] Using Riak (written in Erlang), the NHS has managed 99.999% availability for over five years.From what I could find out, NHS's Spine2 is mostly Python, with ""a bit"" of Erlang and Javascript. They do use Riak, but  they also use Redis, RabbitMQ, Python/Tornado, Ubuntu and lots of other components.This sentence could have said ""Using redis (written in C)"", or ""Using Tornado (written in Python)"", and still be fully correct."	theamk	12.55613	-7.521943	comment	4.0	21.0	1569813960	12.923948
21112620	why so many negative votes?Isn't C++	"why so many negative votes?Isn't C++ a far more battle-tested language than Erlang?
Hasn't C++ a far bigger community than Erlang?To all whose concern is Memory Management, learn about C++11 (and newer standards): smart pointers and heavy use of RAII pattern work shamefully good"	mister_hn	12.523288	-7.5302997	comment	4.0	19.0	1569828896	12.90916
21112761	"> ""Although not in Erlang, Discord u"	"> ""Although not in Erlang, Discord uses Elixir which runs on the BEAM VM to much success as well for our real time distributed system as well as VOIP signaling components. Looking back years later - it’s safe to say we wouldn’t have chosen anything else.""You're a Staff Engineer at Discord. This response is extremely vague and non-informative.What does ""running to much success"" mean exactly? And why is it ""safe to say you wouldn’t have chosen anything else"" instead? Why could you not have achieved the same results using alternative tools?By the way - you've mentioned ""real time distributed systems"". What exactly is your definition of ""real time"" here?"	uasm	12.597686	-7.4756207	comment	4.0	18.0	1569830721	12.958062
21113400	No; as I understand it Elixir's only	No; as I understand it Elixir's only advantage is, arguably, better syntax. I don't mind Erlang's syntax that much.We were handling, in peek hours, over 100k requests per second spread over 3 servers.Funny you should mention scalability as something that somehow justifies Erlang's other shortcomings. I don't think scalability is something Erlang/OTP does out of the bag. One thing we learned the hard way is that Erlang does not do overload well at all. Erlang mailboxes are unbounded and it can get very messy very fast. I always found that design choice odd given Erlang's origins in telecommunications.Now this is not to say you can't do massively scalable systems in Erlang, it's just that there's no silver bullet when it comes to scalability.	ihuk	12.627291	-7.493288	comment	4.0	15.0	1569838171	12.928103
21112011	> It has similar aura than Lisp had 	"> It has similar aura than Lisp had before that with Erlang you can do stuff beyond ""normal"" languages.Like what ?"	ailideex	12.56779	-7.5148163	comment	4.0	49.0	1569821395	12.912235
21114480	About 90% of the time it is an XY pr	About 90% of the time it is an XY problem, though. A couple clarifying questions and it turns out the OP really needed something much simpler.For example, people who insist they can’t use a Laravel package because of “performance”, but it turns out they just don’t know how the composer autoloader works.	ceejayoz	12.708191	-6.6184053	comment	4.0	47.0	1569845963	10.317394
21114531	What would be a good use case to lea	What would be a good use case to learn erlang/elixir with that is not just a chat app?Online gaming?Collaborative tools?	aloer	12.632052	-7.488508	comment	4.0	13.0	1569846289	12.921351
21161254	Over the last few years reading HN c	Over the last few years reading HN comments a part of me can't help but think that the more criticism leveled at an application or technology the more useful it is for end users. This is probably true for Node, PHP, MySQL and Wordpress to name a few. Kovid Goyal should take the criticisms a sign Calibre is very useful to end users.	mmsimanga	12.763087	-6.5980873	comment	4.0	16.0	1570218596	10.331935
21182185	>>> The CGI example you mentioned is	>>> The CGI example you mentioned is broken, but is also using a module (CGI.pm) that's been bad and wrong for so long that even Perl, with its eternal love for backwards compatibility has removed it from Perl Core.The CGI example is straight copy/pasted from the official Perl guide, November 2018. https://www.perl.com/article/perl-and-cgi/	user5994461	12.422619	-6.8124866	comment	4.0	13.0	1570462947	13.131528
21207066	>  Everything we do at Vy is done in	>  Everything we do at Vy is done in close collaboration with the customer.To understand this correctly; 'we' means the company 'Bekk' and the customer is 'Vy', right?I don't find it too strange that it is relatively easy to onboard new Elm programmers when they are part of the same company. But what happens when competing companies want to bid for jobs at Vy? Vy is after all wholly owned by the Norwegian Ministry of Transport and Communications, so new future contracts are bound to come up. A language decision like this–beyond the merit of the language itself–might create a vendor lock-in that can stifle competition. Without being an Elm programmer myself, I am not sure that the technical merits of Elm is really worth it when taking the competition aspect into condsideration.	wolfhumble	12.997618	-7.687626	comment	4.0	14.0	1570649792	-12.777951
21223600	So 1/4 of what Elixir/Erlang can han	So 1/4 of what Elixir/Erlang can handle, but more difficult and less reliable:https://phoenixframework.org/blog/the-road-to-2-million-webs...	cpursley	12.615893	-7.4812226	comment	4.0	20.0	1570796508	12.923032
21227865	It's not uncommon to leap frog versi	It's not uncommon to leap frog versions in such cases. PHP went from 5 to 7, for instance.	joshlemer	12.764338	-6.6381984	comment	4.0	23.0	1570823937	10.339079
21227887	When someone says they want to work 	When someone says they want to work in Perl6/Raku, they likely have vastly different problems than someone using Erlang/Elixer. There is overlap of course (both general purpose), but I can't imagine using Erlang for scripting, while Raku is first class here.	7thaccount	12.356636	-7.1249294	comment	4.0	72.0	1570824082	13.167561
21228347	"Naming matters. Nim changing from ""N"	"Naming matters. Nim changing from ""Nimrod"" matters. Cockroachdb's name is offputting. Perl 6's name has caused endless confusion and by itself sabotaged both Perl 5 and Perl 6. Perl 6 has interesting ideas but I don't even want to touch it because its naming issue is so toxic. I'm glad they're going to rename it."	kbd	12.381174	-7.0155687	comment	4.0	21.0	1570827122	13.192289
21231063	Is there a TLDR on what's wrong with	"Is there a TLDR on what's wrong with the name ""Perl 6"" for those of us who have zero context?"	anonytrary	12.335338	-7.0440693	comment	4.0	14.0	1570861910	13.193364
21256106	It’s exhausting seeing these kinds o	It’s exhausting seeing these kinds of discussions. The only people who think PHP is dying is those who don’t use it. Besides the languages quirks, it’s incredibly productive and has a huge community of well engineered libraries for almost all mundane tasks. Theres great testing tools and general quality tool alike PHPStan. There’s an enormous pool of talent to hire from.I code mostly in node nowadays, not through choice but due to the language snobbery I encountered during the last few years. It’s a shame. I find myself far more productive in the synchronous model than trying to bend my mind backwards with closures and async issues in the node world.	deanclatworthy	12.733523	-6.6294427	comment	4.0	25.0	1571121963	10.309569
21280963	I write CRUD apps for a living , how	I write CRUD apps for a living , how is Elixir gonna make it easier for me? It can't and it won't. Not saying it's bad or anything, just has nothing for me personally.	joelbluminator	12.705507	-7.4120407	comment	4.0	50.0	1571312671	12.939853
21282532	Here are a few legitimate complaints	Here are a few legitimate complaints about Elixir (and in some cases, its host VM, the BEAM):* No mutation support means that for some CPU-heavy tasks, it's not as performant as languages that allow mutation. Some optimized algorithms that rely on mutation can't be expressed directly in Elixir or Erlang, and instead need to be linked in through a foreign function interface.* It's not on the JVM so we don't get to piggyback on the thousands of dev-years of VM optimization and ecosystem around it.* It isn't invented at, supported at, and marketed by a FAANG-type company.  Money moves mountains and Ericsson doesn't spend as much on Erlang/BEAM as, say, Google spends on Go.* Comparison across types is not a runtime exception, so you need to guard against crap like `nil > 1 == true` yourself.* 	gamache	12.613291	-7.479391	comment	4.0	17.0	1571323222	12.914828
21281756	PHP is trivial. Understanding it and	PHP is trivial. Understanding it and shipping code can be done by a 9 year old. Rails is trivial. What is so trivial about Elixir? More concepts, caring way more about performance and concurrency (things a normal dev has to deal with very very rarely). Just don't see the upside	joelbluminator	12.739479	-7.218989	comment	4.0	37.0	1571318711	12.7756195
21286113	As you might have guess, absolutely 	"As you might have guess, absolutely not my experience at all. But as explained otherwise, I'm in situation where ""bad"" data just keep coming in (and ""bad"" just mean ""data that exercises a path were a runtime error will happen because of a typo that the compiler did not catch.) So ""let it crash"" means ""let it crash again"", and I don't see the obvious solution...But again, I'm completely ready to hear that it's just my setup, or how we failed to build the app.Just wanted to confirm that it's completely possible to shoot yourself in the foot, which I'm surprised hardly anyone mention when talking about elixir.Anyone interested should give it a try."	phtrivier	12.637395	-7.4614177	comment	4.0	12.0	1571344404	12.925184
21312374	I think Elm too much underestimates 	I think Elm too much underestimates people who learn a programming language.I really like the Browser module recently.., it enables people to build more things easier, that solves serious problems people trying to use Elm seriously.I am not sure how Elm evaluates feedback from language users. Elm is too much focus on new comers, make it so new people are excited about it first week, and then get stuck on things they want to actually build, and move on.	Existenceblinks	12.996316	-7.685057	comment	4.0	18.0	1571666754	-12.758862
21328153	I've been using node with typescript	I've been using node with typescript and it's amazing.VERY productive. The key thing is you can do a large refactoring without breaking anything.The biggest challenge I have right now is actually the tooling. Intellij tends to break sometimes.I'm using lerna for a monorepo with sub-modules and it's buggy with regular npm.For example 'npm audit' doesn't work.I might have to migrate to yarn...	burtonator	12.343549	-6.532095	comment	4.0	21.0	1571775878	-10.40673
21328255	Speaking of which, is anyone using d	Speaking of which, is anyone using deno (https://deno.land/) for anything real yet?	javajosh	12.520129	-6.449474	comment	4.0	20.0	1571776652	-10.976018
21347749	Ask HN: Is it still feasible to lear	Ask HN: Is it still feasible to learn Ruby / Rails in late 2019	bnt	12.751617	-6.9097104	story	4.0	2.0	1571942158	12.352803
21370751	Common approach is to serve static f	"Common approach is to serve static files with nginx and use apache / php_mod to process.Why are you running php-fpm? 
 Do you need to separate request's processes?  The speed benefits of php-fpm are part of php 7 so using php_mod is faster now."	wolco	12.688858	-6.5705996	comment	4.0	24.0	1572194244	10.223598
21438738	ROS is really great for getting star	ROS is really great for getting started with robotics, but from my experience (and from others who I've talked to) tends to buckle under its own weight in larger projects. This isn't to say you shouldn't use it, just be careful with it. It has some really questionable design decisions and implementation details that can bite you later.	a_t48	12.69644	-6.86061	comment	4.0	25.0	1572837365	12.217855
21439233	as CTO I know all the dependencies i	"as CTO I know all the dependencies in the application stack of our company and I require developers to have sufficient understanding of their purpose, licensing model etc.
There are tools to simplify this task. It’s much harder to do for TypeScript than for Java, mostly because NPM ecosystem is a huge pile of junk, but it’s still important part of developer's job."	ivan_gammel	12.384349	-6.5137415	comment	4.0	16.0	1572844956	-10.357457
21473534	> So Rails (along with some other we	> So Rails (along with some other web frameworks) implements a clever hack: it tries to route HEAD requests to the same place as it would route GET requests. Then it runs the controller code, and just omits the response body.I wonder if Rails will fix the default implementation of handling HEAD requests, similar to how they overhauled the default handling of mass assignment of parameters in 2012 (coincidentally, a flaw also exposed via Github) [0]? Obviously, the latter issue posed a much bigger risk to the average Rails app.[0] https://news.ycombinator.com/item?id=3666564edit: fixed URL	danso	12.744985	-6.904052	comment	4.0	16.0	1573137416	12.331094
21484083	That's all true (I haven't checked m	"That's all true (I haven't checked myself, but lots of people talk about it on Reddit and elsewhere).Still, the big selling point is: Inexpensive. Easy to install (simple PHP). Looks relatively polished.All the ""competitors"" are either much more expensive, or you need to be an enthusiast in the tech stack they have chosen."	Tomte	12.757922	-6.6071553	comment	4.0	22.0	1573232076	10.32087
21485535	If you're working with Ruby I have h	If you're working with Ruby I have had good experiences with Que[1], which implements a pattern similar to the OP using advisory locks.[1]: https://github.com/que-rb/que	zrail	12.488469	-6.935435	comment	4.0	16.0	1573239765	9.083659
21494676	PHP has come a long way, and nowaday	"PHP has come a long way, and nowadays it's in the same category as Python. Worse in many ways, but better by other, like the type declarations and their (runtime) enforcing.Yet there are still many ugly sides to PHP, and Laravel illustrates most of them. There is so much magic that IDE can't follow: some classes have a `__call()` magic function that redirect methods calls to other instances. Some functions return values of varying types, with no common interface.I've worked with several PHP frameworks, and Laravel is by far the worst. Its awful documentation plays a big role in this (no real reference doc, just a tutorial ; no links to classes or function in the doc ; the API doc is a joke ; the acclaimed ""laracasts"" are useless for serious work). The fact that this framework is dominant i"	idoubtit	12.7778225	-6.6694393	comment	4.0	24.0	1573336679	10.339635
21495037	Laravel is popular because it allows	"Laravel is popular because it allows you to setup your project very quickly.And then the trouble starts. Remember what properties your models had? No? Well so doesn't your IDE.
There is just too much magic going on to keep things maintainable.If you like a framework like Laravel you should go with Symfony instead. But don't use annotations. Keeps things separated so you and your colleagues can find routing and database information at logical places instead of all over the place in classes."	thdrdt	12.810534	-6.6354284	comment	4.0	14.0	1573339823	10.314285
21498311	Alternative title: “Scientist: A Rub	Alternative title: “Scientist: A Ruby library for changing production code while still not having to write tests”	tobyhinloopen	12.583915	-7.0596204	comment	4.0	12.0	1573399725	12.393861
21525033	This is not a master plan. This is n	This is not a master plan. This is not The Perl Foundation. This site and these people do not speak for the Perl community or its core developers.The whole site is run by Will Braswell, the creator and maintainer of RPerl, and Reini Urban, the creator and maintainer of CPerl. Both are increasingly troublesome to the Perl community. Rather than apologizing and reintegrating to the community, they've decided to start their own separate community where they are the leaders without disclosing the fact that they are speaking for this new, separate party.	cestith	12.334611	-7.0400352	comment	4.0	19.0	1573658259	13.200479
21525477	These guys are using mostly Perl 5 t	These guys are using mostly Perl 5 though. They basically forked 5 years ago and call it Perl 11. They have a good relationship with Perl 6 devs/maintainers and even incorporate some of 6 in their work (that's where 11 comes from 5+6=11). AFAIK they are working with them to get Perl 6 to use the name Raku and drop the link to 6 and let Perl 5 continue as it was with new development instead of Perl becoming a completely new language.Anyway it's complicated and I only follow along sporadically but as someone who used Perl 5 for over a decade when it was more popular I welcome some kind of resolution where Perl 5 is just Perl and what is now Perl 6 becomes a new, different language with only a tangential relationship to Perl 5.I don't dislike Perl 6, I just remain biased towards 5 due to past	smhenderson	12.332764	-7.067114	comment	4.0	17.0	1573660367	13.177139
21543339	This looks neat! Without all the Goo	This looks neat! Without all the Google/Alphabet spying.I’ve noticed that this project is written in Crystal, is Crystal production ready?I've looked into it months ago and it seems that there are a lot of breaking changes on every release and this scares me from using it.	kgraves	12.634898	-7.266238	comment	4.0	12.0	1573807916	-11.212176
21557523	Taming Large Rails Applications with	Taming Large Rails Applications with Private ActiveRecord Models	vinnyglennon	12.863618	-6.7746015	story	4.0	29.0	1573991021	12.307806
21568254	Doing PHP programming was my first p	Doing PHP programming was my first programming job, lasted for about 3 years.While I agree with you about the allure of PHP, to be honest, I will never choose PHP again or touch any projects that uses PHP.PHP is an awful, obsolete language, patched again and again to make it more modern. It's like wearing an old leather jacket that has been patched repeatedly, yet it still has a nasty smell. This is entirely subjective of course and I'll take old and trustworthy technologies technologies any day of the week. Except PHP isn't trustworthy and it never was.I have never seen a high level language plagued with so many security issues and this extends to apps built in PHP, like Wordpress. You could attribute that to sloppy coding, or to its popularity, yet if you take the top web vulnerabilities	bad_user	12.764198	-6.6326966	comment	4.0	14.0	1574112059	10.322085
21572365	Logic Puzzles with Prolog (2017)	Logic Puzzles with Prolog (2017)	YeGoblynQueenne	13.163202	-7.307492	story	4.0	138.0	1574167073	-12.49902
21658436	PHPs feature development are driven 	PHPs feature development are driven by a relative few “core” people who understand C, and who seem intent (despite what the larger community wants) to keep making PHP more and more like Java.IMO Some stuff is great of course but things like their planned JIT additions (which effectively make PHP faster at calculations, which few people use PHP for) and type enforcement (in a dynamic language with no compile step)  seems to really miss the mark of what makes PHP great and so widely usable.	fideloper	12.736906	-6.652461	comment	4.0	14.0	1574958351	10.303018
21681990	Groovy. I am excited to try out the 	Groovy. I am excited to try out the new ASGI goodness. Last time I used Django Channels it was a constant struggle to tune it, prevent it from becoming deadlocked, etc. And the transition from Channels 1.x to 2.x was also not pleasant. I hope that Django proper did things better/differently.	IgorPartola	12.821344	-6.5644417	comment	4.0	17.0	1575291952	10.081752
21705127	Interesting, I'd always assumed that	Interesting, I'd always assumed that Erlang was some kind of portmanteau of 'Ericsson' + 'language'.	mesofile	12.565607	-7.523163	comment	4.0	13.0	1575483489	-5.0918837
21727396	> Unfortunately, there is one huge p	> Unfortunately, there is one huge problem with Ruby’s current MJIT. At the time I write this in mid-to-late 2019, MJIT will slow Rails down instead of speeding it up.> That’s a pretty significant footnote.Oops.> In addition to memory usage, there’s warmup time. With JIT, the interpreter has to recognize that a method is called a lot and then take time to compile it. That means there’s a delay between when the program starts and when it gets to full speed.Why not cache the compiled methods to make warmup a once-per-version delay? It would be a JIT/precompiled hybrid. Call it gradually compiled.	hirundo	12.585642	-7.0203424	comment	4.0	15.0	1575677298	12.360952
21738523	What's the best example of modern Da	What's the best example of modern Datalog?	patrickmn	13.1802845	-7.0308914	comment	4.0	24.0	1575841099	-12.399506
21751103	You're database is crashing:Illumina	"You're database is crashing:Illuminate \ Database \ QueryException (HY000)
SQLSTATE[HY000]: General error: 1114 The table 'errors' is full (SQL: insert into `errors` (`url`, `trace`, `updated_at`, `created_at`) values (2601:589:4a80:ba00:8590:6c18:79d6:3ffc: /flash2/editor, /var/www/its-near/vendor/laravel/framework/src/Illuminate/Database/Connection.php LINENUM:624<br>/var/www/its-near/vendor/laravel/framework/src/Illuminate/Database/Connection.php LINENUM:459<br>/var/www/its-near/vendor/laravel/framework/src/Illuminate/Database/Connection.php LINENUM:411<br>/var/www/its-near/vendor/laravel/framework/src/Illuminate/Database/Query/Processors/Processor.php LINENUM:32<br>/var/www/its-near/vendor/laravel/framework/src/Illuminate/Database/Query/Builder.php LINENUM:2657<br>/var/www/its-near/ven"	thrownaway954	12.8466215	-6.5923076	comment	4.0	15.0	1575971566	10.229641
39091431	I'll be honest, with the knowledge t	I'll be honest, with the knowledge they are building their own type system and not adopting typescript, my interest went to near 0. Typescript has been a delight to use and migrating off of it is a non-starter. It will take a lot to get me to move off of using typescript even in greenfield projects.	Dibes	12.390906	-6.7698984	comment	4.0	12.0	1705941265	-10.477472
39100338	> Ruby's require is analogous to C's	> Ruby's require is analogous to C's #include: modules are just files that get evaluated in order to add stuff to a global interpreter state.What's the theoretical alternative? Adding stuff to a global interpreter state is the goal.The weird part of #include, to me, is not that it ends up modifying the global interpreter state. That's the point of calling it! The weird part, what C libraries tie themselves into endless knots to work around, is that when you #include something in more than one place, it will execute more than once.	thaumasiotes	12.44823	-7.045624	comment	4.0	37.0	1705992724	-8.23439
39120438	Elixir – Your entire web stack [vide	Elixir – Your entire web stack [video]	lawik	12.69461	-7.4626603	story	4.0	66.0	1706119046	12.942879
39150721	modern PHP has become indistinguisha	modern PHP has become indistinguishable from Java, which begs a question: why PHP, when Python is less verbose, if you want less verbosity and scripting.and Java is same verbosity + has more mature (and arguably more performant) runtime + benefits of statically compiled language and rich library ecosystem?what is selling point of PHP, that python and java don't fit into ?? (lets not even mention javascript/node with its runtime)	slt2021	12.6840725	-6.6763973	comment	4.0	16.0	1706314249	10.302899
39174427	How often do you see people describe	How often do you see people describe that kind of passion for Python? Maybe for lisps, Erlang, Haskell, Smalltalk. It may well put some people off, that's fine, but personally I dread it when I have to work with languages that don't instill that kind of passion.There are plenty of things I'd like to be different about Ruby and the tooling, but with Ruby I feel like I'm crafting something that at least has the potential for elegance, whereas looking at Python code is like staring at a brutalist building that spews its innards all over its surface.(and yes, I realise some people love brutalist buildings, and I can too, sometime, when particularly well done, and that's why I chose that example - it's possible to do amazing and elegant things in any language, even - as ugly as I personally fin	vidarh	12.46073	-7.018715	comment	4.0	21.0	1706520747	12.389083
39287664	A Deep Dive into RSpec Tests in Ruby	A Deep Dive into RSpec Tests in Ruby on Rails	amalinovic	12.628874	-6.9787164	story	4.0	38.0	1707308519	12.362006
39288816	For me it would be the Pin-Operator.	"For me it would be the Pin-Operator. Which is only needed cause variables can ""mutate"". IMHO it's not that common that we need to ""reassign"" variables, we could life without the looks-like-reassignment.I touched Erlang before, it's hard to get my brain to accept elixir is different in regards of variables :)"	salzig	12.609626	-7.4935884	comment	4.0	18.0	1707315384	12.926842
39309934	I love Elixir, but I have to disagre	"I love Elixir, but I have to disagree with the principal aspect of this post.As an engineering leader what I look for when picking tooling for SaaS which essentially boils down to two things:  1) How expensive and difficult will it be to scale the Org.
  2) How difficult will it be to implement product features.

I attempted an Elixir startup and found that it failed at both. The language was lovely to use and very smart.But at the end of the day, you spend time and money reinventing solutions already solved in other frameworks which distract from the features of your product. Elixirs libraries are growing, but they have not reached parity to near drop-in solutions found in Django for instance.Is Django the fastest in code execution? No. Is it the most elegant? No.But there is an outstandi"	hansonkd	12.701444	-7.412601	comment	4.0	17.0	1707439702	12.935977
39333474	Ruby's entire programming model was 	Ruby's entire programming model was based on the premise that language speed does not matter since most of the time you are waiting on IO / Network. Well now, both on Node.js and JVM we have programming models which say that - while I wait for IO / Network let me do some other work or service more requests (Async / Webflux / Coroutines).IMHO - using Ruby/Rails in 2024 can be wasteful, but of-couse for the right situation it can be a good choice. (Just) For example an enterprise app where you know the number of users will be limited, or when you know the development speed is paramount or where you want to build a quick proptype to test the market out. Rails is a great framework and the productivity is unmatched, but with time a 2-3 years old Rails project is always tricky to maintain.	rockyj	12.721895	-6.9496055	comment	4.0	23.0	1707640670	12.352271
39333649	Meh, it's fine for 99% of use cases.	Meh, it's fine for 99% of use cases. Rails only becomes a pain in my experience if you have random, huge swings in traffic or a ton of active users with websocket stuff (mostly solved by anycable). But very few products are going to reach those limits and if they do those problems can be solved too.Stripe, GitHub, and Shopify are the shining examples of Rails scaling in all kinds of ways without problem.	sosodev	12.758082	-6.899468	comment	4.0	16.0	1707642592	12.33739
39342392	The Erlang Runtime System	The Erlang Runtime System	doctor_phil	12.537225	-7.5042872	story	4.0	169.0	1707722683	-9.347033
32848368	Along similar lines:If PHP Were Brit	Along similar lines:If PHP Were British: https://aloneonahill.com/blog/if-php-were-british/Reddit Proper: https://www.reddit.com/r/proper/	susam	12.762549	-6.6605973	comment	4.0	12.0	1663226922	-1.8347341
32875217	This isn't an argument in bad faith 	This isn't an argument in bad faith or anything but if all this is so good why is Elixir not more popular? If it's basically Ruby on Erlang (which is what it feels like), you'd think it would've been trivial to retool a rails project to it and take advantage of this insane benefit. Instead the big switch was first to Scala (because of Twitter) and then Python (Dropbox et al.).But yet here we are. Python is absolutely dominant in web and ML stuff. C is still one of the most popular languages to date. Elixir and Rust barely break top 50. We can't say people don't know about it. Surely if it was insanely powerful Google, Facebook, etc or some huge popular open source project would prove it's utility.Why isn't it more popular? I ask this, because I have a hard time staking any project I make o	Test0129	12.683988	-7.4339924	comment	4.0	22.0	1663395640	12.922213
32875419	elixir is (was?) very parochial. for	elixir is (was?) very parochial. for a long time it didn't fit neatly in the same shaped box as comparable applications written in ruby or python or java or whatever. part of this was technical (it's a compiled language without any of the effort c or java got in packaging and distribution so operations were complicated when compared to mainstream languages) and part of this was cultural (the infamous 'you don't need x if you use elixir' testimonials) but it combined to scare people who weren't interested in being elixir enthusiasts away. there was definitely a sort of stepford wives vibe around the community where people who just wanted to know how to use elixir to read some data from kafka or redis or deploy an http api or whatever were met with scolding and admonishment for not embracing	querulous	12.678792	-7.4633474	comment	4.0	17.0	1663398349	12.946679
32875573	I'm not an Elixir beginner but all t	I'm not an Elixir beginner but all those ampersands means that either one writes that kind of code everyday or one won't understand what it does when coming back next month. Use names, not shortcuts.	pmontra	12.652551	-7.4462066	comment	4.0	15.0	1663400780	12.920379
32875410	Not much of an Elixir developer but 	Not much of an Elixir developer but if I saw that snippet in code review I would flag it for readability.Just because you can write something in 3 lines of code using lots of nesting and anonymous functions and variables doesn’t mean you should.  This code would do better if it was longer, the variables had names, and the transforming functions broken out and named.	turdprincess	12.627262	-7.459071	comment	4.0	14.0	1663398162	12.930147
32897904	I really don't like Quarkus approach	I really don't like Quarkus approach. It's full of magic. It's everything I'd love to get rid of. I'm using Spring which is kind of full of magic but I spent 15 years learning to deal with this magic, so it's bearable to me. But it does not mean that I like it.I liked Helidon SE approach (not MP, MP is the same EE crap). It's 100% code, no magic. What I didn't like is reactive, I don't need reactive, so I don't use Helidon SE for my projects, I still endure Spring. But if someone enjoys reactive programming and wants zero-magic approach, I can recommend it.Helidon Nima might be a saviour to me. I didn't research it yet.	vbezhenar	12.458601	-6.52834	comment	4.0	21.0	1663593533	-12.255083
32919641	Hard disagree. For me, the proof is 	Hard disagree. For me, the proof is in the pudding. When writing regular Javascript, I need to run and debug my code often as I'm developing it to make sure all intermediate states make sense and that there's no edge cases I've missed. With Typescript I can often write code for hours without even starting it up, and when I finally do run it, it usually works correctly right out of the box.	Etheryte	12.35833	-6.7903204	comment	4.0	13.0	1663720649	-10.440306
32924872	I suspect that person worked at Amaz	I suspect that person worked at Amazon. They at one point had gigantic amounts of Perl before they started slowly replacing it with Java. (I wouldn't be surprised if they still had sizable amounts of Perl in dark corners).	umanwizard	12.328499	-6.988498	comment	4.0	19.0	1663766995	13.162953
32941487	I do a lot of ML and AI work nowaday	I do a lot of ML and AI work nowadays... I miss Ruby a lot especially the its culture around ergonomics.	fny	12.652693	-7.0293794	comment	4.0	20.0	1663865435	5.368731
32956575	Typescript has a decent type system,	"Typescript has a decent type system, but it is really held back by being ""just"" a type checker for JS, with all the JS semantics.The way sum types are done in TS is really awkward.The type system is unsound.What's worse is that you never have a guarantee that the types are actually correct at runtime, due to bad third party typings, compiler limitations, use of any, ...It's still a lot better than using plain JS, and a lot of the limitations aren't by choice, but come from the need to compile down to and remain compatible with plain JS.It just could be so much better."	the_duke	12.343686	-6.831672	comment	4.0	27.0	1663964401	-10.436006
32978934	Is anyone else excited by the TypeSc	Is anyone else excited by the TypeScript compiler? [pdf]	andrewstuart	12.370796	-6.7678275	story	4.0	2.0	1664161901	-10.471828
33018219	I don't understand why ReScript is t	"I don't understand why ReScript is trying to sell itself as a language for React. React is already ""kind of"" functional, has a rich JS/TS ecosystem and there are fantastic alternatives such as Elm.I think this would have huge potential in the backend space if it had good interop with Node.js and TS, with perhaps a functional framework similar to Elixir's Phoenix. Elixir proved it can have fantastic integration with Erlang.* More robust applications with the Result type* An actual integer type (for 64-bit database keys, Prisma uses BigInt)* Finite state machines for stateful logic, games, websockets (enums and a sound type system)* Benefit from the JS-centric serverless ecosystemWe've already been ""compiling"" or ""transpiling"" JS for years, most of written JS code has little in common with w"	marcus_cemes	12.519361	-6.7340536	comment	4.0	13.0	1664443964	-10.520709
33021864	Deno is pretty neat. I really want i	Deno is pretty neat. I really want it to succeed. I really like TypeScript, and Deno almost gives me what I want: pretending TypeScript is a full-fledged language, with a standard library, that I can build non-frontend apps with. Let's just sweep all that JS-heritage and V8 stuff under the rug...I've been playing with deno lately, and like it, but have been getting tripped up by some things.I wish the standard library weren't at URLs like all the other packages. It would be great if the `deno` tool you downloaded also included the standard library, and you could just reference it without any network stuff. The documentation is also pretty cryptic (and I think autogenerated?).The package management stuff I haven't quite wrapped my head around. Obviously, you shouldn't be downloading stuff w	losvedir	12.456357	-6.4476366	comment	4.0	19.0	1664464520	-10.861904
33064300	If your snarky comment is aimed at P	If your snarky comment is aimed at PHP, I'm afraid I have bad news for you.> PHP becomes the first programming language with modern cryptography in its standard library thanks to the bundled libsodiumhttps://www.jetbrains.com/lp/php-25/#e_2017_11_30_2If the snarky comment is aimed at the developer posting the claim, yet again, wrong target.Don't be like that please.	zmxz	12.764175	-6.545932	comment	4.0	18.0	1664780144	-3.8641284
31812552	Mojo.js 1.0 – From Perl to Node.js	Mojo.js 1.0 – From Perl to Node.js	kraih	12.367521	-6.888834	story	4.0	12.0	1655743762	13.132636
31822062	We managed to run a successful bootc	We managed to run a successful bootcamp school LMS on a single cheapest 1gb ram hetzner vps with rails app, redis cache, postgres, backups, staging env and near zero production issues.Not hi loaded of course, but still hundreds active users every single day interacting with the app.Recently had to upgrade to the next tier because of growth.Modern servers are super fast and reliable as long as you know what you’re doing and don’t waste it on unnecessary overheads like k8s etc.	aristofun	12.780707	-6.924196	comment	4.0	43.0	1655804308	12.356615
31825407	Looks awesome. I'm a bit jealous Rai	Looks awesome. I'm a bit jealous Rails has this resource coming from the Django world (although I know django admin also great but has its limitations)	canadiantim	12.806761	-6.72805	comment	4.0	18.0	1655826974	-10.575061
31870128	I do early stage (first check) inves	I do early stage (first check) investments in companies using Ruby on Rails. We primarily look for founders with a long term view who will be fun to work with (not nerds). Feel free to reach out, details in profile.	ghiculescu	12.73405	-6.9472466	comment	4.0	15.0	1656108723	12.359028
31890614	This is a hot take.The reason that y	"This is a hot take.The reason that you need to do things the ops way is because ops knows how to run applications in production. There's a reason the meme ""worked in dev, ops problem now"" exists. You need to meet all of the requirements of an app that's running in production from a technical, availability, security, and policy point-of-view. It's not easy and that's why this will never work.Software is hard, it's just that a lot of developers used to cut their code, run it on their laptop, and let someone else worry about it. It's different these days (although not as much as I'd like).We don't make you use these tools because we want to, we use these tools because we're required too. No one cared about ISO27001, SOC2, or PCIDSS compliance for your crappy PHP app you ran on your cpanel. Th"	StopHammoTime	12.767824	-6.601338	comment	4.0	17.0	1656304414	-4.429225
31903192	I think ROS was/is an incredible boo	I think ROS was/is an incredible boon for open-source and education, and Willow Garage did great work by creating such a strong community for it. Unfortunately, I don't think that ROS has kept up with the requirements of more modern robotics applications, and I personally haven't found that ROS2 is fixing most of my major gripes.There are so many huge companies with massive robotics projects nowadays (i.e. warehouse robotics, self driving cars, etc) that I'd love to see the lessons learned there put into a next-generation open-source system. I know from experience that the stuff these companies have internally feels like a step-function improvement. Unfortunately I don't know how to get something like that off the ground.	nharada	12.701107	-6.8518434	comment	4.0	15.0	1656380733	12.220179
31906427	I get...    This version of TypeScri	"I get...    This version of TypeScript (4.7.4#code/C4TwDgpgB[...]t7yAA) has not been prepared for the Playground

It seems to be a problem with the encoding of # and / in the URL. Possibly other characters.Still, when fixing that, I get an Error:    Type instantiation is excessively deep and possibly infinite.

On this line:    type FizzBuzz = From0To99<[0, 0], []>;

So you may want to check that, if you think it's actually worth it."	genezeta	12.406005	-6.87466	comment	4.0	17.0	1656416242	-10.526975
31919953	Please render JavaScript and TypeScr	Please render JavaScript and TypeScript correctly; it isn't Javascript or Typescript.	andsoitis	12.443202	-6.6545916	comment	4.0	21.0	1656509993	-10.457765
31927091	That’s how I feel about Elixir. Ever	That’s how I feel about Elixir. Everything else just feels wrong now.I’d be curious to get your Nim highlights.	brightball	12.696138	-7.463138	comment	4.0	36.0	1656545906	12.938575
31953580	I love flask so much. Along with req	I love flask so much. Along with requests it has been among the two single most useful things about Python for me and the things I typically reach for Python for.	elbigbad	12.717379	-6.563677	comment	4.0	30.0	1656712867	10.010238
31954183	Fully developed Flask projects tend 	Fully developed Flask projects tend to be significantly more hairballish and custom compared to something like Django, but it's extremely hard to kick the habit and convenience once something has initially been prototyped in Flask (or Bottle, same deal). Commercially I'd much rather encounter an existing Django project, but at home 90% of the time I'll reach for Flask first, the rest being cases where there are some off-the-shelf Django components that will definitely save a ton of time, and the ceremony is worth paying.	dmw_ng	12.794622	-6.54136	comment	4.0	13.0	1656716714	10.025919
31954369	What's the advantage over using Flas	What's the advantage over using Flask's built-in support for async described here?  https://flask.palletsprojects.com/en/2.1.x/async-await/This is an honest question;  I don't know much about python async yet.	clintonc	12.447035	-6.680007	comment	4.0	17.0	1656718049	9.872053
31959727	So many frameworks in other language	So many frameworks in other languages are trying to get to the productivity of Rails but they just don't have the same spark imo.There is no Rails equivalent in JS, theres lots of competitors that feel years away like SailsJS, the new Deno Fresh one etc, Adonisjs... Is NextJS/SvelteKit/RemixRun considered also? I don't even know if they have a standardised background job processor in JS land.Java's solutions are dreadful imo for if you want to compare to Rails. Quarkus/SpringBoot/Micronaut are nowhere near productivity levels for a fullstack app. They lean heavily on the API only side of things. (I do like Java oddly enough)PHP is the main competitor to Rails oddly enough, Laravel seems brilliant.Go is just starting up in this space it looks like, Bud is another attempt at Rails in another	bestinterest	12.724913	-6.8804817	comment	4.0	37.0	1656774907	12.324108
39364805	LOL.I have been programming for over	LOL.I have been programming for over 30 years on all sorts of systems and the Pandas DataFrame API is completely beyond me. Just trying to get a cell value seems way more difficult than it should be.Same with xarray datasets.I just loaded the same CSV into Pandas and Polars and Polars did a much better job of it.	dajt	12.349748	-6.546754	comment	4.0	13.0	1707870729	10.140933
39365875	Ive found polars quite intuitive, th	Ive found polars quite intuitive, though for python, I lean more towards [ibis](https://ibis-project.org/). The interface is nearly identical, but ibis has the benefit if building sql queries before pulling any actual data (like dbplyr) — whereas polars requires the data to be in-memory (at least for rdb’s, though correct me if Im wrong)this to me seems like a good argument for only using ibis, but Im happy to be convinced otherwise	0thgen	12.353809	-6.5634437	comment	4.0	14.0	1707879669	10.156258
39371663	How do the supervisor trees avoid a 	"How do the supervisor trees avoid a single point of failure? Let's say I build ""etcd in Erlang"". How would I tell the cluster that there should be N processes running, each on a different node? And is there anything in OTP that would help me elect a leader or do I still have to implement that myself?I have no experience with OTP but have read some books and did toy projects."	krab	12.481838	-7.46188	comment	4.0	20.0	1707927503	12.878302
39418014	I'm convinced that GitHub's decision	I'm convinced that GitHub's decision to move away from Rails was partly influenced by a significant flaw in ActiveRecord: its lack of support for composite primary keys. The need for something as basic as PRIMARY KEY(repo_id, issue_id) becomes unnecessarily complex within ActiveRecord, forcing developers to use workarounds that involve a unique key alongside a singular primary key column to meet ActiveRecord's requirements—a less than ideal solution.Moreover, the use of UUIDs as primary keys, while seemingly a workaround, introduces its own set of problems. Despite adopting UUIDs, the necessity for a unique constraint on the (repo_id, issue_id) pair persists to ensure data integrity, but this significantly increases the database size, leading to substantial overhead. This is a major trade-	istvanu	13.008375	-6.604291	comment	4.0	12.0	1708253320	12.249428
39424063	I dont knowPeople who use Rails real	I dont knowPeople who use Rails really seem to love it.But in 2024 things like react and typescript exists.Python is there for data science stuffTypescript is there for the web.I don't understand why you would pick Ruby instead	kingkongjaffa	12.66752	-6.9517665	comment	4.0	13.0	1708294779	12.347821
39428971	Huh? This article is talking about v	Huh? This article is talking about very similar issue to the fractal of bad design. Down to repeating specific ones like json_decode(null). Most of the fractal post still applies. The themes of surprises and consistency are strong in both.I agree that the language evolved since then, but the main categories are still not solved in the language. Nice frameworks just hide those well.	viraptor	12.779489	-6.6954203	comment	4.0	28.0	1708345300	10.458944
39463453	All the Ruby tools are so bad. It's 	"All the Ruby tools are so bad. It's all crap. 
I started a new job where I have to use Ruby. The company has about 300 engineers, and it seems that no one has a good setup.
Some people use VSCode, but no one has a set of extensions that really works well. Debugging by attaching to a running process doesn't work.
Some people use RubyMine, but it's also somewhat broken - for example, it formats the code in a way that RuboCop doesn't like. The debugger works every other week.A lot of people set debugger breakpoints by inserting ""debugger"" or ""binding.pry"" manually. That also sucks because you can't easily disable a breakpoint after you've reached it. And of course it's an idiotic way of inserting breakpoints, because you can't just detach the debugger - you have to delete every breakpoint if "	chihuahua	12.573363	-7.0146556	comment	4.0	18.0	1708578368	-1.0573874
39464507	"Ask HN: What is the ""Ruby on Rails"" "	"Ask HN: What is the ""Ruby on Rails"" of the Node world?"	toughyear	12.772977	-6.8248096	story	4.0	2.0	1708589521	12.292162
39533915	You can simplify even further and ed	You can simplify even further and edit live PHP files right in your editor.	xnx	12.774152	-6.6290355	comment	4.0	13.0	1709093609	10.333269
39539968	I find it challenging to take this g	I find it challenging to take this guy seriously. In this particular video, he first claims to have extensive experience writing Ruby code, yet he seems to struggle with understanding a basic Rails CRUD example. I even checked his GitHub profile for past noteworthy contributions but was again disappointed. Is my critique too harsh, or is he just not accurately representing his expertise? Also did you know he used to work at twitch? I am sure but he may have mentioned it before.	schlch	12.634934	-6.9969	comment	4.0	16.0	1709137029	12.334602
39559730	Just though of another one! This wor	Just though of another one! This worked surprisingly well and was really annoying at the same time.The huge application consisted of a single PHP file. If you guessed that it was tens of thousands of lines long, you'd be wrong. It was only a few hundred lines, if not less!The trick was storing code in the freaking database. The mother of all index.php's would  simply query for the correct piece of code based on query parameters and eval it! They had an editor where you could make live code changes to the page, and even some rudimentary version control. Amazing times!	andrelaszlo	12.747995	-6.5916977	comment	4.0	13.0	1709281174	10.287265
39573389	Open Beam Interface	Open Beam Interface	luu	12.430692	-7.3704762	story	4.0	100.0	1709395238	-8.762176
39616190	Oh hey, this is me.The background is	Oh hey, this is me.The background is that I've thought about applying SPC to software behavior for a long time[0]. While I was at Shopify I began to think about using it for detecting regressions in the YJIT benchmark suite[1]. My first thought was to code a Ruby library (Shopify is a Ruby on Rails outfit), but I decided that it would be more accessible to more folks if it worked inside a database instead. I got caught in a 20% layoff at Shopify and that somewhat took the wind out of my sails, which is why it's been dormant for a year.There are some limitations to be aware of in a software context.First, sample sizes have to be constant. In a world of unreliable systems and networks this is a pretty tough constraint. It could be achieved by taking fixed subsamples at random from a varying 	jacques_chester	12.738524	-6.9313636	comment	4.0	26.0	1709734763	12.364718
39671042	"This seems a bit like saying ""JavaSc"	"This seems a bit like saying ""JavaScript supports types!"" because of typescript."	cmeacham98	12.339188	-6.7497234	comment	4.0	18.0	1710178266	-10.479362
32028476	I don't see any reasoning for Ruby o	I don't see any reasoning for Ruby or Rails, just why they are sticking to a modulith rather than decomposing into (micro)services.	HansLambda	12.695579	-6.9418907	comment	4.0	13.0	1657319517	-13.799681
32065725	At Discord, we maintain long lived w	"At Discord, we maintain long lived web-sockets, and need to be able to deploy our real-time elixir based services (which runs on the BEAM VM just like Erlang) without any disruption to user traffic.To do so, we've built an application specific process migration system (this is BEAM VM processes, not OS processes) that is able to essentially live migrate processes both between nodes and software versions, allowing us to essentially replace the engine of the train while it's running, and also be able to scale up and down our clusters as needed.We are able to roll out updates across a hundred million processes on our distributed system in half an hour with no disruption to service. These are for internal services. For external services, we built the concept of ""session resumption"" which allow"	jhgg	12.536289	-7.42483	comment	4.0	25.0	1657600829	12.854183
32082503	None of these are top of my list. Mi	None of these are top of my list. Mine is a better PHP.To be clear, I like PHP. It actually has many attributes that make it almost ideal as a Web development language, most notably:1. Pretty much everything is request-scoped. This makes it a lot harder to leak resources when everything is torn down;2. A stateless functional core. This avoids a lot of class loading that has dogged Java (as one example);3. No ability to start threads. This is actually a positive. Most application code should avoid creating threads like the plague.But PHP comes with a lot historical cruft. It's type system is also primitive (Hack is a better example of this).Where I think this could really shine is in data analysis (ie the numpy/scipy realm).	cletus	12.720449	-6.6359916	comment	4.0	19.0	1657719302	10.311834
32102430	We discovered a 7-year old performan	We discovered a 7-year old performance issue in Elixir (2020)	s3cur3	12.691468	-7.46116	story	4.0	85.0	1657839898	12.9386215
32117236	My biggest gripe with Ruby is how mu	"My biggest gripe with Ruby is how much syntax is optional and the ""accepted"" conventions by the community are to leave out a lot of optional syntax.The worst offender (in my opinion of course) is leaving out of empty parentheses on method calls. It makes it impossible to know if something is a property or a function. The argument is that it doesn't matter if it's a property or a function, but I feel like it makes it very difficult to reason about performance. If I know something is a function, I'll look at the function and see what the performance implications are. Where as if something is a property, I assume it's ""free"" to access. This doesn't hold when reading Ruby code, and I basically have to look up everything all the time.Just my opinion as someone that had to switch between python/"	doix	12.4369545	-7.077023	comment	4.0	13.0	1657973060	12.380937
32117897	I loved coding in Ruby. I also wrote	I loved coding in Ruby. I also wrote a Ruby book for Apress, my last book for a major publisher before starting to self publish on leanpub.com/u/markwatsonTwo factors made me leave Ruby behind: I am somewhat known for Common Lisp, and so CL jobs would come my way. Also, in the last 8 years, a huge amount of my work has been in deep learning and Python wins there.Anyway, Ruby was designed to make programmers happy, and it is a big success at that.	mark_l_watson	12.621687	-7.0257177	comment	4.0	56.0	1657978425	12.368007
32118456	Ruby eventually failed in term of qu	Ruby eventually failed in term of quantity of developers, means OOP will eventually died. It's not Ruby's fault, it's just the failure of OOP in general.My prediction, in about 4 years or more, OOP is just an abandon concept for all programmers.	revskill	12.628264	-7.0285783	comment	4.0	14.0	1657981561	12.352753
32123113	I'd be very interested to see non-BE	"I'd be very interested to see non-BEAM approaches to enabling this - i kind of end up in the same pattern thanks to ""expected? Return an Error<E>. Unexpected? Throw."" However, the supervising part is then difficult.How do people approach this in Python? NodeJS? Rust? .NET?"	akdor1154	12.44622	-7.467379	comment	4.0	14.0	1658016527	-8.95954
32159526	I find Ruby to be more straightforwa	I find Ruby to be more straightforward than Python. In isolation, I’d argue Ruby is greatly more readable and understandable than Python.In practice, Ruby code isn’t. Once someone starts doing advanced meta programming, get the shovel, because you’re going to kill whoever wrote it and need to bury the body.Rails largely gets away with this by having opinionated design, good documentation, and a large user base who have already written answers to your questions.	kayodelycaon	12.48062	-7.0359235	comment	4.0	17.0	1658274866	12.365824
32159951	Does Ruby have support for just expo	Does Ruby have support for just exporting functions around? All these examples are class based. When I was a Python programmer, we found functions scaled infinitely better over time (with the exception of data classes, unfortunately) for complex business logic especially.	no_wizard	12.382569	-7.1022277	comment	4.0	17.0	1658278462	12.352609
32159751	Ruby, like so many other good things	"Ruby, like so many other good things, is best enjoyed alone :-)I've loved every Ruby codebase that I've written. I still consider it one of my favorite programming languages, and (in pedagogical terms) one of the best languages for learning ""practical"" functional programming (point-free style, blocks as intuitive closures, &c.). But when I work with others, I find that all of the things that I love are obnoxiously clever to others, and that the things they love are obnoxiously clever to me.Python isn't immune to that kind of cleverness, but subjectively it's not as common. I chalk that up to the higher pain threshold for doing really obnoxious metaprogramming in Python, a lower community tolerance for unidiomatic interfaces, and (broadly) better QA tooling (RuboCop is great, but MyPy + iso"	woodruffw	12.509717	-7.0401397	comment	4.0	30.0	1658276612	12.379765
32205117	How do you switch languages during a	How do you switch languages during a job search?  Are you avoiding companies with language requirements (four years Ruby)?  Do you run into language/framework tests and/or homework assignments in languages you are unfamiliar with?	ipaddr	12.331924	-6.938056	comment	4.0	18.0	1658595393	12.374221
32222129	What would you use instead of ROS?	What would you use instead of ROS?	pabs3	12.695718	-6.850188	comment	4.0	21.0	1658740189	12.215251
32240822	1.0.0 Release of the Temporal TypeSc	1.0.0 Release of the Temporal TypeScript SDK	lorendsr	12.395131	-6.735641	story	4.0	18.0	1658854561	-10.437903
32253103	Not surprised at the list.  Hack sta	Not surprised at the list.  Hack stands out as unique to facebook.  Is hack being used in other large companies?  I wonder if they will ever move back to php now that many issues facebook had have been resolved in later versions.	ipaddr	12.779715	-6.607449	comment	4.0	14.0	1658941509	2.984502
32262957	I still use coffeescript over javasc	I still use coffeescript over javascript because I feel like I can be as expressive as I want.  I understand why most left for typescript (type safety), but I feel like everyone just gave up on reducing boilerplate for things in javascript.  Switch statements, list comprehensions, array slicing, better equality operators... a lot of things that made coffeescript a great experience have never carried over.	thrwawy74	12.405582	-6.580928	comment	4.0	14.0	1659007984	-10.529775
32280708	PHP is great for people that know it	PHP is great for people that know it and are productive in it. For legacy codebases and software.Newcomers should learn to use something else. Go, Ruby, Python, Node, Nim. The tools are better, more modern, with broader library support, and you can use the languages in more ways throughout your career.	echelon	12.736661	-6.640129	comment	4.0	17.0	1659122058	10.3265705
32285090	What makes you prefer Javascript ove	What makes you prefer Javascript over Typescript? For me TS removes some of the frustrations of JS.	wartijn_	12.401981	-6.7140665	comment	4.0	14.0	1659167403	-10.473633
32290358	I haven't used Elixir enough to be p	I haven't used Elixir enough to be particularly confident in an opinion about it. However, Phoenix appears to have a similar design to many other MVC frameworks, and if a conventional design works for a language, there's less need to experiment. Initial development can converge around something that's tried and tested.A conventional framework doesn't fit Clojure particularly well, so the community has been forced to tread new ground to figure out what works with the language.	weavejester	12.678661	-7.5882497	comment	4.0	31.0	1659215400	12.87981
32291705	Elixir is still Actor based though, 	Elixir is still Actor based though, and relies on modeling behavior through something very akin to objects. You could even call it OOP if you went back to the more original message passing/late binding roots of OOP.	didibus	12.621224	-7.475342	comment	4.0	13.0	1659226359	12.923119
32321332	not sure what the livebook is--the l	not sure what the livebook is--the landing page is not sufficiently clear or coherent.	wawjgreen	12.845074	-6.7043514	comment	4.0	17.0	1659459757	4.0069375
32325608	I really like the serverless aspect.	I really like the serverless aspect. I still think nothing has the deployment story that PHP applications have. Just upload some source and your website is up.	candiodari	12.808925	-6.4761853	comment	4.0	18.0	1659482752	10.240257
32326322	I’ve been using PHP since 2003 and i	I’ve been using PHP since 2003 and it’s my full time job and this doesn’t ring true. Very, very rarely is a gotcha not in the docs comment section.	user3939382	12.765633	-6.6244645	comment	4.0	39.0	1659487742	10.328288
32327710	> PHP has so many hidden benefits:> 	"> PHP has so many hidden benefits:> - it's stateless by design (much easier to scale)I'll grant you this one. Though PHP in practice goes to great lengths to add state back in for performance reasons (e.g. memcached, or for a while APC).And Haskell is stateless, too, yet not a frequent choice for web work.> - it was ""serverless"" before ServerlessThis is retconning. It was never trivial to set up a LAMP stack, especially at scale. I can't tell you how many times I've seen the PHP ""too many open database connections"" error because someone just treated their Wordpress blog as ""serverless"" and it went to the top of HN.> - surprisingly performantI can't speak about the latest stuff, but PHP5 in ~2014-15 was abominably slow. There were certain ""benchmarks"" which indicated it was fast, but on clo"	baryphonic	12.760775	-6.5951624	comment	4.0	17.0	1659501481	10.266962
32329254	In the sci-fi future such as star tr	In the sci-fi future such as star trek, you often see systems being reprogrammed by swapping crystals around or something like that. I used to think it was really stupid, but as I deal with trying to build complicated systems I find myself wishing I could build something like that to set up systems and have them just work.Interestingly, 90's industrial automation sort of feels like it was trying to build systems like that. The control cabinets are filled with simple, discrete, computational blocks that control valves and actuators based on sensor inputs.Getting back to the sci-fi, I realized that the crystal swapping could just be the high level interface to all the complex code below. They really wouldn't need to do anything except light up when they are detected correctly, but still cont	pontifier	12.579941	-7.236374	comment	4.0	18.0	1659516758	-11.22816
32366336	Singapore PM posts source code for s	Singapore PM posts source code for sudoku solver. Experts give their take	elsewhen	13.449139	-7.408807	story	4.0	16.0	1659776672	15.0770645
32387794	I might get a lot of flame for this,	I might get a lot of flame for this, but I would say this is probably true of most Rails project because Rails has a lot of great standards (opinions). I am not sure why people hate Rails, I love it exactly for this reason.	vinhboy	12.758881	-6.9283032	comment	4.0	19.0	1659976836	12.355738
32411553	> I think it's time to stop repeatin	> I think it's time to stop repeating that it's likely that a Rails app is I/O-bound rather than CPU-bound, my experience leads me to think the reverse is currently likely.I'd like to offer an anecdotal counterpoint. I worked at Shopify for several years. The big problems were always due to I/O. Usually that was in the form of long-running network calls. You're calling the FedEx API for shipping rates in the cart. All of a sudden FedEx starts taking 5 seconds instead of 1 second, and all of your worker capacity evaporates. That kind of thing.Or, if databases are more your speed, we faced another problem with the GraphQL API needing to rattle off a bunch of requests to the DB, without being able to do so in parallel. So the more different slices of data you needed to fetch, the longer the s	notpachet	12.8918295	-6.6812005	comment	4.0	22.0	1660138100	12.330231
32413803	I'm trying to remember why Ruby fell	I'm trying to remember why Ruby fell out of favor ~10 years ago. I don't think it was all down to performance because it was mostly on par with Python. I seem to recall that it came down to community practices that were a little too freewheeling - widespread monkey patching, etc. and these had become reflected in Ruby's flagship product (Rails). (I used to do a lot of Ruby programming in the 2001-2010 timeframe and like the language, but it's mostly been Python since then)	UncleOxidant	12.584505	-7.013619	comment	4.0	24.0	1660145904	12.37784
32415019	"Love the title.Just waiting for ""How"	"Love the title.Just waiting for ""How PHP makes you do heroin"""	carvking	12.771774	-6.6350083	comment	4.0	12.0	1660150276	10.275928
32436663	Byte Magazine: Prolog and 386 Hardwa	Byte Magazine: Prolog and 386 Hardware Software (1987)	Tomte	13.135878	-7.2886252	story	4.0	53.0	1660301346	-12.490978
32458976	How come there is no SQLite of Datal	How come there is no SQLite of Datalog? You can find plenty of implementations of embedded datalog database in a specific language, where the query API is tied to the language. I want to write text datalog queries and access my database from multiple languages. Why doesn’t this exist?	CGamesPlay	13.216694	-6.972877	comment	4.0	14.0	1660482807	-12.410171
32482894	Good news for the Ruby ecosystem, bu	"Good news for the Ruby ecosystem, but I'd also like to get a handle on exactly how many of the most popular gems have ""over 180 million total downloads""."	ufmace	12.687273	-6.9849577	comment	4.0	16.0	1660658705	12.357321
22007698	PHP Is an Industry	PHP Is an Industry	throwphpaway	12.775164	-6.6325555	story	4.0	7.0	1578619856	10.311478
22084067	PHP most hated?? what's wrong with P	PHP most hated?? what's wrong with PHP? it's a great introductory language	867-5309	12.77017	-6.6422653	comment	4.0	16.0	1579350757	10.333609
22091820	>Ruby, in contrast, seems like an ab	>Ruby, in contrast, seems like an absurdly complicated concatenation of weird features and strange syntaxMy experience is the precise opposite. Ruby seems more consistent and straightforward than any other non lisp language I’ve used. Ubiquitous blocks and “everything is an object” gets you very far.Compare nested list comprehensions in python to chained map/select calls in Ruby:lesson for lesson in [school.Lesson(downloaded) for downloaded in api.downloads()] if want(lesson)]vsapi.downloads.map{|download| School.Lesson.new(download)}.select{|lesson| want(lesson)}Or compare the many varied required ways to do something with an array in python vs Ruby:len(array)“;”.join(array)array.append(x)Vsarray.lengtharray.join(“;”)array.append(x)Genuinely confused what you refer to with “unnecessary sy	mapgrep	12.433173	-7.098047	comment	4.0	18.0	1579446940	12.369767
22094918	I think focusing on the syntax level	I think focusing on the syntax level is a bit superficial. While Ruby (especially in the context of RoR) lends itself very well to making DSLs and making abstractions, and thus writing superficially good looking, concise, easy to follow (on a syntax level) application code, it really breaks down when the abstraction does not work perfectly the way you want it.If you have debugged a Rails app and tried to find where in the 10 level call stack a side effect is introduced, knowing that at each level a 'method_missing' could've changed things, and thus you're really looking at a non-linear call stack since each function call can branch out, you'll know the beautiful looking syntax is not free and in fact very costly.And don't get me started on poorly documented (if any) CoC (black magic)..	fantasticsid	12.624559	-7.030722	comment	4.0	16.0	1579476690	12.371939
22112077	Why is nobody reading the damn artic	Why is nobody reading the damn article?>I hope I was able to show you that PHP has evolved tremendously over the past years, and you're perfectly able to write clean and maintainable code with it.	captn3m0	12.770494	-6.6357975	comment	4.0	12.0	1579643668	10.346408
22112110	Why exactly bother with anything els	Why exactly bother with anything else than PHP?	tooop	12.767474	-6.6372604	comment	4.0	12.0	1579643915	10.339866
22112440	PHP was intended to be a templating 	PHP was intended to be a templating engine and nothing more. It's the community that pushed it in that direction even though that wasn't the creator's intention. And though that has lead to some bad decisions, let me be the one to say it: though it is by no means a good language, it's far not the worst. Surely, dive into most other dynamic languages and you will quickly want to stay as far away from php as possible. And in the modern day and age if I were to start any project from scratch, regardless of what it was, I can't think of a single reason to use PHP over most other available options. As a matter of fact java and javascript are the only two languages I'd avoid more than PHP. Java for all the annoying boilerplate code you have to deal with as well as the incredibly strict way of ho	axegon_	12.709171	-6.59275	comment	4.0	16.0	1579646006	10.333657
22112443	Wow. I'm honestly surprised by the a	Wow. I'm honestly surprised by the amount of people (on the HN!) in 2020, thinking PHP is some pre-historical language clearly inferior to... I'm not even sure what. JS? That would be funny.(It feels like I'm defending PHP now, which is feels weird, because I can go on for hours talking about the stuff I hate about PHP. But there is a difference between hating it for problems it actually has, and just not treating PHP as seriously useful modern tool which it definitely is.)That aside, I cannot really treat seriously author's recommendation of Amp, ReactPHP and such as a solution for async. Don't bring up HHVM either. There's no real solid support for async/await in PHP, not even in the form Python has for quite a while now. And for me, it might be the biggest problem it has right now, whic	krick	12.7250185	-6.6089396	comment	4.0	21.0	1579646010	10.258999
22114381	That's strange because I hear of lot	"That's strange because I hear of lot of ""best practices"" for PHP, particularly Symfony and Laravel, involve jumping on the Docker/Kubernetes bandwagon. AWS RAM prices are a joke compared with, say, Hetzner.com yet PHP authorities are to be heard recommending leaving behind that which made PHP famous - FTP-ing PHP files to a cheap web host or VPS."	cutler	12.787174	-6.6120048	comment	4.0	12.0	1579664476	10.300866
22115473	To many people's surprise, I can cra	To many people's surprise, I can crank out a fully-functional side project in two to five days (latest ones were https://imgz.org and https://nobsgames.stavros.io) by having already completely automated devops.Much like you, I have a Django template project and use Dokku for deployment, so I can use the template to create a new project, commit, push, and it's already up on production.Here's mine:https://github.com/skorokithakis/django-project-templateHaving all the best practices and boilerplate already sorted helps immensely.	StavrosK	12.767081	-6.446059	comment	4.0	19.0	1579679048	-10.61547
22115790	> for all other languages i know of,	"> for all other languages i know of, there is quite a process to get startedIt's funny that you included javascript in the list when you can literally just type javascript code in an html <script> tag and open it in the browser that comes with your OS.You quip at flask for requiring ""command line experience"" then talk about  PHP's built-in web server that's also a command line tool.And let's be realistic, if you're using php without a package manager, you're either no doing anything serious or you're reinventing the wheel, and you will need to get comfortable with the command-line sooner or later anyway.I will say that PHP is probably the the most frictionless server-side web-development language to get started with, but it's not by a huge margin.And considering that in web-dev you're gonn"	Kwantuum	12.705073	-6.6009254	comment	4.0	21.0	1579682947	10.307938
22116973	Which other languages besides php do	Which other languages besides php do you know well? I'm asking this because of your outlandish claim that php is fantastic.Also the rest of your comment seems highly defensive. You seem to imply that people who agree with you must be senior, while people who disagree must be junior or even worse, something in between. It sounds like you have been bitten by discussion where facts against your conviction were presented, and you were unable to factor that into your views. Am I at all close or completely off the target?	aganame	12.759986	-6.639108	comment	4.0	14.0	1579696607	-9.874865
22143994	Pandas has enough gotchas that it lo	Pandas has enough gotchas that it looks friendly until you hit one of them. Examples of gotchas:Want to join two dataframes together like you'd join two database tables? df.join(other=df2, on='some_column') does the wrong thing, silently, what you really wanted was df.merge(right=df2, on='some_column')Got a list of integers that you want to put into a dataframe? pd.DataFrame({'foo': [1,2,3]}) will do what you want. What if they're optional? pd.DataFrame({'foo': [1,2,3,None]}) will silently change your integers to floating point values. Enjoy debugging your joins (sorry, merges) with large integer values.Want to check if a dataframe is empty? Unlike lists or dicts, trying to turn a dataframe into a truth value will throw ValueError.	jfim	12.366847	-6.4932933	comment	4.0	16.0	1579915172	10.060431
22145539	Restack: Full-Stack ReasonML	Restack: Full-Stack ReasonML	ingve	12.328055	-7.604203	story	4.0	141.0	1579944410	6.735177
22159383	If you really want to learn Elixir, 	If you really want to learn Elixir, you should learn enough Erlang prior, to get a better understanding of how Erlang/OTP all fits together. Thus, I would recommend the following structure:1. Read Joe Armstrong's Book: Programming Erlang to learn the basics and the philosophy behind Erlang from one of its creators. [1]2. Read Erlang and OTP in Action to learn more about the OTP (Open Telecom Platform), applications and gen_servers (which btw, you will find them all over).3. Learn Elixir, perhaps from one of the books Elixir in Action [3] or Programming Elixir. [4]4. Finally, start implementing your cool personal project.Ah, one more thing: Elixir School is also a wonderful resource with tons of information and examples [5] and of course the official Elixir website with its excellent docs. 	plainOldText	12.650231	-7.4816484	comment	4.0	20.0	1580134649	12.908429
22193195	I didn't read it carefully and I don	I didn't read it carefully and I don't know much PHP, but is the code really that bad? There's all kinds of worse code out there running everything.As long as it's relatively well organized, you can worry about refactoring as you scale up.	asdfman123	12.761705	-6.6308613	comment	4.0	19.0	1580404972	10.328426
22193994	"> is line 89 of search.php valid?? """	"> is line 89 of search.php valid?? ""$user 0 && ..."" ? aren't we missing an comparison operator?Good job. And perhaps that's the culprit. Everybody assumed it was a plain syntax error, but I don't think it's possible. Rather, it seems me that:    if ($user <something else ... ) {
        was written here
        but we'll never know because
        the browser mistook it for an HTML tag,
        and the user probably copied page contents
        instead of saving it.
    };

    if (user_was_working_at_facebook_in_2007())
        possibly_confirm('?');

    /* lots of missing code may follow... until */

    if (who knows what > 0 && ..."	aruggirello	12.510342	-6.6847434	comment	4.0	14.0	1580409659	10.2671175
22196145	While 'Let It Crash' is a philosophy	While 'Let It Crash' is a philosophy, it is greatly aided in Erlang by extremely lightweight threads that communicate with each other via mailboxes.	aprao	12.373473	-7.49512	comment	4.0	18.0	1580421142	12.880851
22209077	"> TS can't know about your ""classes"""	"> TS can't know about your ""classes"" - they're a runtime thing. Treating them the same as interfaces can make this much nicer.No–this is a very surprising and unsound choice and not at all what you would expect if you previously saw that TypeScript lifts classes into types.> This way you can have type safety without losing JS features.IMHO, you can't get type safety out of an unsound type system. (Which TypeScript is, by choice.) I think surprises like the above drive that point home."	yawaramin	12.351283	-6.8570666	comment	4.0	28.0	1580538659	-10.434209
22221097	I'm a bit confused. I thought PHP 7 	I'm a bit confused. I thought PHP 7 introduced a JIT, hence why it was much faster (in some cases ~5x faster). How is it different from the PHP 8 JIT?I always assumed that HHVM is what brought JITs to PHP originally, followed by PHP itself.	CraftThatBlock	12.739185	-6.6582646	comment	4.0	13.0	1580699210	10.304023
22221131	One of the biggest complaints I've r	One of the biggest complaints I've read about PHP is that many things are not consistently named (having never used PHP, I might be wrong). If this is true, are there any plans to fix this?	irrational	12.751682	-6.654447	comment	4.0	19.0	1580699657	10.338227
22223552	PHP is already one of the fastest la	PHP is already one of the fastest languages. Hopefully JIT will make it even faster.Currently it places #11 on the famous framework benchmark:https://www.techempower.com/benchmarks/#section=data-r18&hw=...	bufferoverflow	12.650718	-6.648839	comment	4.0	18.0	1580733006	-8.697046
22242400	I have been thinking of Prolog as SQ	"I have been thinking of Prolog as SQL, but the “goals” are your data generator/table and the constraints are everything in there WHERE-clause.
Made it simpler to reason about.Learning Erlang was also easier when I figured out that it is (was?) build on Prolog, with its analogy to SQL."	punnerud	13.122705	-7.266386	comment	4.0	13.0	1580859811	-12.481832
22242871	Does anyone know if there's a datalo	"Does anyone know if there's a datalog-like embeddable language that is suitable for simple integer constraints (the sum of a, b, c, and d must be e; e=10.,b>2.)?For prolog, there's apparently
https://github.com/triska/clpz/But I really just want some simple constraints-oriented form validation (you have 100 points, please feel free to by x's for 1 point each, y's for a cost of 5 points. You don't have to spend all points - with feedback of how many points are left as more x and y are bought. But for more variables, where there are clear rules that can be modeled naturally as constraints rather than with state and callbacks on change).Ed: specifically for forms, there's https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/HTML... - but it feels like it gets messy with interdependent fiel"	e12e	13.147347	-7.2791095	comment	4.0	20.0	1580863338	-12.486129
22245066	I haven’t followed Elm very actively	I haven’t followed Elm very actively for quite awhile.  My workplace has a kiosk product where I, along with two others, did the entire front-end UI in Elm.  Multiple screens, a full configuration interface and talking to a C# back-end.  I think we’re on Elm 0.17 or Elm 0.18 still.  At least at the time we shipped the first version, it was larger than any example app I’d seen and there weren’t a lot of non-toy applications or examples to compare against.I certainly have overall positive feelings about it, with some frustrations (like any language really).  I’ll say that the most stand-out thing about that code is that I can be off it for six months, come back to it and within an hour or so I’m back to comfortably knowing what’s going on.I’d played around with functional languages before El	Fr0styMatt88	12.998879	-7.685312	comment	4.0	16.0	1580892359	-12.760189
22248930	Thanks for the feedback! I really ap	Thanks for the feedback! I really appreciate this ;)All of your counter points have merit, I think it boils down to preference at this point, but what I can tell you that after doing Elm for a while getting back to the JavaScript ecosystem is a nightmare and Mint is my way out of that (for SPAs).> I don't think that's necessarily true. They would have to learn all the same concepts which exist within Mint. (And if not all the same concepts exist within Mint, then it's not up to par.) What's different is the syntax, and the semantics of how these concepts glue together within Mint. This generally means it's actually harder to learn a new all-on-one language than it is to learn React + TypeScript + styled-components for someone who already knows JS.I'm not entirely convinced that that is the	gdotdesign	12.561248	-6.5551653	comment	4.0	13.0	1580923231	-12.55104
22258484	> We've solved it with an extremely 	> We've solved it with an extremely judicious use of the linter, which prohibits certain constructs, certain patterns, and tries its best to get rid of weird features.This is one of my concerns with adopting Typescript in my team. Would you please share more info about the kinds of things you prohibit, and why you chose them?	vosper	12.331047	-6.8718543	comment	4.0	12.0	1581012496	-10.432598
35624673	I think Prolog's main problem is tha	"I think Prolog's main problem is that it presents the idea of ""just declare the constraints and it will find the solution,"" but can't really live up to that. In reality it's an extremely leaky abstraction, and even with pure predicates you need to take its execution model into account to avoid getting stuck in an infinite loop.I still love the language, but I think there's a point where every learner realizes it's not as beautiful and ideal as they once thought."	superdisk	13.142539	-7.2865887	comment	4.0	58.0	1681883267	-12.485396
35625640	> I think it’s biggest headwind is t	"> I think it’s biggest headwind is that you have to be significantly more intelligent than the average developer to think in Prolog.This is arguably wrong. Thinking in Prolog is much easier than knowing how to solve a problem beforehand. In Prolog you just state the facts and known rules, but you have no clear idea what would be the best way to solve it. Prolog solves it for you then, if possible. No intelligence needed. A ""dumb"" friend of mine on the 80ies only used Prolog for his work and was very happy with it. Lisp, Pascal or C was too hard for him.The problem with Prolog is mostly that you'll through too hard problems at it, mostly with exponential complexity. Tiny changes have huge influences then, it either works or not.
Also the tabling and SAT/SMT integration sucks."	rurban	13.141277	-7.2923613	comment	4.0	13.0	1681891721	-12.484381
35664450	There is no structure, OO was an aft	There is no structure, OO was an after thought, meta-programming an after thought., unit testing, testing utilities and frameworks an afterthought, their best Web-framework Laravel is a clone of Rails, No original good ideas in the PHP Community and thats the problem. The reason is PHP is a poor clone of Perl.	pankajdoharey	12.788503	-6.6707277	comment	4.0	19.0	1682151984	10.425614
35686266	>Now, I’m not on the RailsConf commi	">Now, I’m not on the RailsConf committee this year, but I have been on it in the past. I was on it the year that we decided not to make David Hanemeier-Hansson[1], original committer to Rails, the keynote speaker for the first time in sixteen years. That guy melted down in this giant blog post that echoed throughout the halls of the online tech bro cafeteria for weeks.David Heinemeier-Hansson wasn't the ""original committer to Rails"". He built the first version of Rails entirely on his own. As he's known to be quite opinionated and harsh in his tone, I read the ""melt down"" that was mentioned here and I really don't think it reads in that tone at all[2]. While I did find the article here quite interesting and do share some of the sentiment regarding tech conferences, I find this paragraph qu"	drita	12.765136	-6.937725	comment	4.0	12.0	1682335832	12.35244
35687690	It'd be nice if there was a way to t	It'd be nice if there was a way to try the demo without signing in.That said, this looks like a good product.Are there other similar/competing things for Rails, and are there other competing SaaS-in-a-box things for other frameworks?	tikkun	12.78888	-6.9029093	comment	4.0	19.0	1682344528	12.346182
35716062	To Type or Not to Type?	To Type or Not to Type?	beginnings	12.356719	-6.8166924	story	4.0	2.0	1682525541	-10.544005
35743576	Hey - I am one of the engineers that	Hey - I am one of the engineers that works on Deno KV. Happy to answer questions.	lucacasonato	12.51151	-6.439472	comment	4.0	18.0	1682699359	-11.023776
35756460	Could you share some examples of thi	"Could you share some examples of this?I am a bit over >1 year with Rails and I don't see this to be the case. There is some ""group think"" perhaps, but every ecosystem has that (Whats the ""pythonic"" way or Java way to write x). I work at Shopify which uses Ruby and Rails extensively, and I don't think things have ""gone off the rails"". We use other technologies where appropriate, but for the core business logic cases, Rails is fantastic."	ecshafer	12.72972	-6.943179	comment	4.0	21.0	1682797684	12.354402
35765904	How is it different from:Django (Pyt	"How is it different from:Django (Python)    SaaS Pegasus https://www.saaspegasus.com/
    Djaodjin. Open Source. https://djaodjin.com/
    Carrot Seed https://www.cnc.io/en/seed
    The SaaS boilerplate by Apptension (+React) https://www.apptension.com/saas-boilerplate
    Vanty Starter Kit https://www.advantch.com/
    Saas Hammer https://saashammer.com/

Flask (Python)    SaaS Forge. Open Source. https://www.saasforge.dev/
    Ignite (SaaS Boilerplate). Open Source. https://github.com/sumukh/ignite
    Flask App Builder. Open Source. https://github.com/dpgaspar/Flask-AppBuilder
    Build a SAAS App with Flask. Course / Boilerplate. https://buildasaasappwithflask.com/
    Enferno Frameowrk: Open Source . https://enferno.io/

https://github.com/smirnov-am/awesome-saas-boilerplates"	techn00	12.757922	-6.524711	comment	4.0	16.0	1682883440	9.908073
35826527	I also wished for a long time for Cr	I also wished for a long time for Crystal to take off, but now having Go and Rust I don't see Crystal to gain too much relevance in the future, while it might be appealing to Ruby devs, Ruby is becoming better every day, but still Ruby devs stay in Ruby because of the ecosystem, the company where I work on already decided that no new project will be written in C, C++, Ruby, Java and instead use Go or Rust, I suppose that other companies are doing the same.	norman784	12.612055	-7.236513	comment	4.0	30.0	1683273690	10.304664
35834212	So many JS projects are switching to	So many JS projects are switching to TS, but AFAIK the same isn't happening within Ruby, which reduces some of the type-checking benefit.Also, this is subjective but I don't like the syntax.> Sorbet is 100% compatible with Ruby. It type checks normal method definitions, and introduces backwards-compatible syntax for method signatures.I would have preferred if they had introduced a compile step the way typescript does, and provided a TS-like syntax. I find the current version hard to read.	egonschiele	12.387472	-6.9143143	comment	4.0	15.0	1683315740	-10.432599
35834351	As a huge proponent of Ruby's new pa	"As a huge proponent of Ruby's new pattern matching syntax (it has changed the way I write Ruby), I really, really like the idea of defp. So many times I wish I could overload a method, dispatching by pattern. Instead, I have to pattern match in the method body, which causes the method definition to become convoluted:    def for_environment(environment)
      environment =
        case environment
        in String => code unless code in UUID_RE
          return none # no support for filtering via environment codes
        in UUID_RE => id
          return none unless env = Environment.find_by(id:)

          env
        in Environment => env
          env
        in nil
          nil
        end
      
      ...
    end

I think defp looks and feels very Ruby-like compared to the alternati"	ezekg	12.515056	-7.1410346	comment	4.0	13.0	1683316481	12.436626
35859312	Logic programming offers a good foun	"Logic programming offers a good foundation for anything that people call ""rule engines."" Within logic programming, there is some variation on the degree of declarativeness.Datalog is arguably the minimal core logic programming, similar to what the lambda calculus achieves for functional programming. Unfortunately, it has been forgotten outside of database and query processing realm. A resurgence has happened in recent years, as PL researchers and also industry have discovered the virtues of datalog (e.g. Flix, DataFun). My own attempt at making this more widely known is here https://github.com/google/mangle, a language from the datalog family and its implementation as a go library.As the example shows: plain ""rules"" (or: plain datalog) is rarely enough to capture everything that one wants "	burakemir	13.154969	-7.1726437	comment	4.0	15.0	1683534403	-12.462529
35869136	It's ancient PHP. What do you expect	It's ancient PHP. What do you expect?Hell, Facebook doesn't even use PHP anymore having replaced it with a pseudo-superset, Hack.If you want security, don't cargo-cult what everyone else is doing or use third-party code. Third-party code in dynamic languages is footgunning in a mine field.Easy || popular != sustainable	1letterunixname	12.769017	-6.6333528	comment	4.0	15.0	1683595350	2.937213
35885717	How I developed a faster Ruby interp	How I developed a faster Ruby interpreter (2022)	cyrc	12.576743	-7.042701	story	4.0	133.0	1683715565	12.368765
35897548	Coming from Rails, how does Laravel 	Coming from Rails, how does Laravel compares? If you know both languages, which one would you pick? I've this hunch that there's no reason to lick Laravel over Rails, since that latter is the bees and knees for web development.Alternatively: what would you suggest someone getting into web development to learn? PHP or Ruby?	endorphine	12.770363	-6.719917	comment	4.0	12.0	1683779683	10.376908
35899423	The problem is this page advertises 	"The problem is this page advertises Laravel, not PHP. Ruby on Rails has many similar ""demo worthy"" snippets that make complex tasks seem readable and intuitive to the layman. Laravel and Ruby on Rails have something else in common: due to the focus on these ""natural"" interfaces, they compromise in every other way. Architecture, performance, testability and so on and so on.For those who know PHP, this code is full of singletons masquerading as static classes (which Laravel incorrectly calls ""Facades"") which mean no isolation and clear flow of dependencies in your code. In a nutshell, every line of code you write this way comes loaded with a pound of irreducible, unfixable tech debt. Enjoy."	BulgarianIdiot	12.81057	-6.6704836	comment	4.0	17.0	1683794003	10.374648
35898335	I struggled with sorting out Contrac	"I struggled with sorting out Contracts vs Facades vs Traits. I graduated from university 20 years ago with a software engineering degree, where it was drummed into me that simpler often is better, and much more robust. Reading the Laravel docs however, leaves more questions than I started off with.eg. https://laravel.com/docs/5.8/contracts – talks a lot about how Contracts are powerful additions (like all the other features of Laravel, the docs are good at telling you they're powerful) and the examples show just some barebones code that doesn't really do much without a lot more work. The examples in the documentation seem to be more on the side of being some code snippets that don't convey much context.Additionally, there's lots of ""congratulatory"" text in the documentation (""Laravel has a"	acherion	12.806297	-6.655968	comment	4.0	13.0	1683785719	10.347934
35902084	What do people use Pharo for? Is any	What do people use Pharo for? Is anyone here using it for a product?	jadbox	12.328792	-7.256519	comment	4.0	23.0	1683813103	7.0714655
35900484	> If someone's still hating on PHP i	> If someone's still hating on PHP in 2023 it makes me wonder if they've been focused on more exotic technology because they were looking to pad their resume with more expensive skills, build science projects for their own amusement vs. what the business needed, etc. etc. Red flag.I get that you are arguing from personal experiences, people you met and worked with. But this statement lacks context and nuance.There are developers who don't like PHP because of outdated reasons and possibly because they are snobs. Sure, that's a red flag.But there are many who have so many battle scars and war stories with the language and its ecosystem that they decided it's just not worth the pain anymore. Even though PHP has evolved (with regular breaking changes...) and tries its best to put something use	dgb23	12.763168	-6.639622	comment	4.0	41.0	1683803068	10.342507
35902957	I must be the only person left not w	I must be the only person left not writing TS at this point.Once EcmaScript adopts optional static types or some kind of standardized type annotations [1] I will probably use those. At least in Node, where I have more control of the runtime version.[1] https://github.com/tc39/proposal-type-annotations	pier25	12.341159	-6.8277	comment	4.0	27.0	1683816481	-10.453788
35904949	> Less that 10 years ago, JavaScript	> Less that 10 years ago, JavaScript sucked bad. It had no imports, no classes, no async, no arrow functionsNo classes in JS was much better than with. As someone who used and contributed to CoffeeScript, I was initially excited by them but in retrospect, they've been a huge negative IMO.Douglas Crockford saw it immediately: https://www.youtube.com/watch?v=PSGEjv3Tqo0&t=300s	AlchemistCamp	12.382049	-6.446258	comment	4.0	42.0	1683824347	-10.514252
35928075	i find this critique interesting, be	i find this critique interesting, because i believe the initial momentum behind rails was sparked by a video about how to create a blog using rails without any setup in just a few minutes.https://www.youtube.com/watch?v=Gzj723LkRJY	avg_dev	12.763542	-6.9081483	comment	4.0	12.0	1683983852	12.347365
35928605	> it's scaleable.That is debatable. 	> it's scaleable.That is debatable. Both GitHub and Hackyderm are large-scale Rails deployments, and both share a DevOps engineer (Nóva) who I've heard complaining about Ruby DevOps at least once. Twitter was forced to abandon Rails (being the poster child for Rails at the time).	zamalek	12.747843	-6.928067	comment	4.0	21.0	1683987186	12.342304
35927282	TypeScript team released an explorer	TypeScript team released an explorer for performance tuning	aabbcc1241	12.369811	-6.7841187	story	4.0	111.0	1683976185	3.0650861
35928770	I've always found myself in fundamen	"I've always found myself in fundamental disagreement with the Erlang/Elixir philosophy.    Resilience, within the context of this presentation, and the philosophy of Erlang, would be the capability to recover from errors while unattended.

I prefer systems that don't fail quite so smoothly. Take this example:    The application runs out of memory due to too many transactions being processed at once. The problem happens once every day. However the system gracefully recovers, and the team is able to resolve the issue peacefully without the problem escalating to an active incident.

If I was funding development of such a system, I would find this situation unacceptable. I'm paying for an application that doesn't crap out in production every single day, not one that ""gracefully recovers"" after"	munchler	12.500742	-7.493161	comment	4.0	38.0	1683988246	12.868667
35928928	I'm sure your software is great, and	"I'm sure your software is great, and I don't mean this personally, but I just find this philosophy really strange. You don't write defensive code, and you don't often check for errors. You just let pieces of your application fail, and feel that this is OK because the overall application continues on. IMHO, Elixir isn't ""saving"" you from ""transient heisenbugs"", it's encouraging you not worry about them, which means that they will proliferate."	munchler	12.643012	-7.467952	comment	4.0	15.0	1683989338	12.931555
35930032	Elixir people might cringe but why w	Elixir people might cringe but why wouldn’t you just be 100% Go?	iends	12.687129	-7.4697423	comment	4.0	13.0	1683995875	12.944588
35930177	Almost every system scales simply ve	Almost every system scales simply vertically, vertical scaling is (to a first approximation) throwing faster hardware at the problem. If you're IO bound you get a faster IO bus (this is not necessarily easy to do, but if you do it the system scales to the limit of it). If you're CPU bound you get a faster CPU. And so on.Horizontal scaling is what's hard for a lot of systems, but simple with Erlang and Elixir since they are, by design, meant to support concurrent and distributed workloads. That's why I was asking if they meant horizontal and not vertical.Erlang and Elixir are not uniquely easy to scale horizontally, but they are (if you don't fight their nature and produce programs that consist of one giant execution thread) ridiculously easy to scale horizontally by tacking on additional C	Jtsummers	12.65561	-7.483594	comment	4.0	12.0	1683996738	12.921918
35928850	Hard to respond to this, it's too hi	Hard to respond to this, it's too high level and generic to disagree with.But in practice, if you're on the BEAM and use OTP as intended, your code is fully parallel, split into fault-tolerant pieces, and one crash does not affect the entire system.I have been responsible of two Elixir monoliths in the last 6 years, and I have not seen them crash even once. Not even during prototyping, not even during load testing, never once. Without having to adopt defensive coding strategies. I write 1/4 the error checking code than if it were Rust, and 1/10 than if it were Python or Go.How many platforms can realistically promise this?Note, I haven't said my code is bug free. It's buggy because I'm only human and make plenty of mistakes. But the BEAM saves me from myself, saves me from third-party JSON	sph	12.443548	-7.4612813	comment	4.0	24.0	1683988759	12.897076
35929144	In the Fintech space and we use Go a	In the Fintech space and we use Go and Elixir. Seems to be pretty common among other companies. Company is out of Utah. It's pretty easy to find talent for Go and a little more difficult for elixir.	RSHEPP	12.665996	-7.504379	comment	4.0	18.0	1683990816	12.922381
35960221	"PHP is only ""simple"" and ""proven"" in"	"PHP is only ""simple"" and ""proven"" in that it has proven countless times that it is simply terrible at everything."	seirl	12.7833395	-6.639956	comment	4.0	12.0	1684235924	10.339001
35963016	> tangible advantages usually win th	> tangible advantages usually win the day because in the end people will pick the right tool for the right jobNo, they don't. They pick the familiar and the easy-to-hire-for. I've worked on systems (written in C++, Java, others) that would have been perfect for Erlang, but at most I was able to present a prototype. No one is interested in a better solution that they can't hire for or have to retrain their staff for. (The familiar and the easy-to-hire-for may, by some metric, be the right tool for the job, but it isn't necessarily the right tool by technical metrics.)	Jtsummers	12.562849	-7.517759	comment	4.0	21.0	1684250286	12.954796
35973601	I hate pandas. Polars is significant	I hate pandas. Polars is significantly better designed. Please, everyone, stop using Pandas.	nathan_compton	12.35591	-6.546347	comment	4.0	17.0	1684321070	10.1804695
35987990	Not the purpose of the article but a	"Not the purpose of the article but as I am a bit negative on Ruby, and I am neutral to positive on Java...""Ruby is so much better than Java! Look at how you open a file in Java (shows you 30 lines) vs. Ruby! (2 lines)""Ruby Example.================  begin
    File.open(""/path/to/your/file.txt"", ""r"") do |file|
      file.each_line do |line|
        puts line
      end
    end
  rescue Errno::ENOENT
    puts ""File not found""
  rescue Exception => e
    puts ""An error occurred: #{e.message}""
  end

Java Example, one line less than Ruby ( no imports shown but could also be required for external Gems )================  public class Main {
      public static void main(String[] args) {
          String filePath = ""/path/to/your/file.txt"";
          try (Stream<String> lines = Files.lines(Paths.ge"	belter	12.508195	-7.0288906	comment	4.0	12.0	1684418205	-8.547587
36019530	Everything you just said is true for	Everything you just said is true for Typescript, as you can set it up as strict or as forgiving as you like, and writing one off scripts for node is just as easy as for Python. But unlike Python, it has a great type system.	golergka	12.374414	-6.6414595	comment	4.0	27.0	1684664654	-10.434851
36024648	I’m surprised at Elixir failing with	I’m surprised at Elixir failing with 1M tasks. I’ve definitely done this sort of test with Erlang without an issue. Although I can’t really remember right now if I pushed it to 1M tasks.	elteto	12.615622	-7.4817595	comment	4.0	12.0	1684702909	12.912127
36043667	As a counterpoint to the inevitable 	"As a counterpoint to the inevitable ""Is Elm dead?""[0] comments, how many other languages are still rock solid after 3+ years without a new version? Shouldn't we aspire towards using tools that are stable because they are complete?What is the maintenance burden of the average React app? When I have written an Elm app, I feel confident that I could come back to it in a few years time with no issues.To me, this stability is a testament to the language's thoughtful design and rejection of the constant churn of contemporary web development. At the risk of sounding like a Game of Thrones fan waiting for Winds of Winter, I look forward to the next version coming out with modest changes and bug fixes whenever it is ready.[0]: https://iselmdead.info"	truculent	12.9898205	-7.6673164	comment	4.0	31.0	1684847100	-12.73275
36054042	In Php Land I would say <?php $no $t	"In Php Land I would say <?php $no $thanks ?>It's the red waving flag of this project. I cannot understand how people are still arguing for this kind of stuff or stick with this dinosaur language at all.I am sorry but I have such an aversion against the attitude of ""we use xy because of historic reasons but hey actually it is really good because the design pattern that has proven crucial over the last 50 years imo is just overhead and you can just put some files here and there copy a bit of that and... """	Blackarea	12.72173	-6.635477	comment	4.0	14.0	1684901800	10.326086
36054918	Elm/compiler: Matching on negative l	Elm/compiler: Matching on negative literals results in a parser error	luu	12.9849615	-7.683284	story	4.0	33.0	1684911293	-12.746158
36123154	After you work with Phoenix/LiveView	After you work with Phoenix/LiveView is soo hard to come back to anything else. I love the fact it's very opinionated and most times there's a right way to do things.LiveView is game changer, same user experience (even better) with 10x better developer experience. No much dual state management and things just work.	deofoo	12.912861	-6.881579	comment	4.0	26.0	1685441884	12.709245
36125722	For very small interactions, there i	"For very small interactions, there is no need for a round trip and state held on the server.Imagine a disappearing burger menu, or a tooltip widget, or a ""click here to copy to clipboard"" link. For those sprinkles of interactivity, you need JS and Stimulus is ideal for that use case.I just have my Live View process render    <input type=""text"" data-controller=""copy-on-click"" value=""..."" />

which is easy to understand and plays great with Live View's model.Don't forget that JS was born for this goal: small snippets of interactive behaviour; it was never meant to be the entire system."	sph	12.879769	-6.680177	comment	4.0	17.0	1685459193	12.668024
36175345	Ask HN: Why Did Ruby Fall Out of Fav	Ask HN: Why Did Ruby Fall Out of Favour with Startups	sarimkhalid	12.693971	-6.9882393	story	4.0	6.0	1685787955	12.368371
36260433	My personal opinion is that good typ	My personal opinion is that good typescript to C transpiller would do a way better job, tons of microcontrollers supported out of the box. I would be also happy to use it for desktop. With some tricks it could even support references and additional numeric data types (u8, i8 ... ) without breaking any syntax	danielEM	12.366275	-6.754604	comment	4.0	27.0	1686328895	-10.4151745
36278320	No. In fact I added some code that s	No. In fact I added some code that still enforces this with the Git-based package manager.I know a lot of people got burned by this when Elm added this enforcement, and that seeing it here in Gren can cause a lot of eyerolls.However.The greatest feature of the language is the absence of mutation and user-defined exceptions, and managed side-effects. Making the kernel code api accessible to everyone would introduce those things to the language, and my memory from the pre 0.19 days of Elm tells me that this made for a worse experience overall.One of the problems with this limitation is the lack of bindings to core web api’s. We’re actively working on adding more APIs here. LocalStorage was contributed by an external contributor. Contributors are also working on a HttpServer and a WebSocket A	Skinney	13.002084	-7.6853995	comment	4.0	15.0	1686460224	-12.758274
36299540	What other features does TypeScript 	What other features does TypeScript have? Genuinely curious, I haven't used TS much so I'm probably missing a bunch.	sebzim4500	12.371675	-6.7629604	comment	4.0	15.0	1686597892	-10.451681
36312017	I used to get invites for jobs and s	"I used to get invites for jobs and see listings for jobs for Ruby and Rails a lot. Now I don't see any at all. There's most definitely a ""dead"" feeling to the platform.I hardly hear about new projects being started with Rails as well..."	sergiotapia	12.743285	-6.956454	comment	4.0	13.0	1686671332	12.380514
36320627	We were 100% not expecting this to s	We were 100% not expecting this to show up on HN front page. :)In any case, the title is accurate in that it is only a prototype and it was built by Guillaume to explore how Elixir idioms map to set-theoretic types. The UX and syntax do not reflect how the type system would look in Elixir itself (if we get a type system at all).You can find more context in Guillaume’s talk: https://m.youtube.com/watch?v=gJJH7a2J9O8The initial research announcement: https://elixir-lang.org/blog/2022/10/05/my-future-with-elixi...And the paper as an accurate and in-depth resource: https://www.irif.fr/_media/users/gduboc/elixir-types.pdf	josevalim	12.559015	-7.45657	comment	4.0	16.0	1686709436	12.919171
36331646	I haven't written Elixir professiona	I haven't written Elixir professionally the last couple of years, but I was an early user of LiveView when it was first demoed at a conference.As someone who currently writes applications using React Server Components, I am interested to see how concepts like LiveView evolve over time. We are now shipping significantly more HTML than before, and a lot less Javascript, as more has been moved to the server.Makes me wish LiveView was portable to every other platform I work on, rather than having to convince companies to write more Elixir (although that isn't a bad thing).	vinnymac	12.850762	-6.963924	comment	4.0	15.0	1686772459	12.769787
36337060	It's alive in the way PHP is alive. 	It's alive in the way PHP is alive. It has so much stuff built on it that it will be around for a long time. But I don't feel Ruby is a good choice for projects anymore. The failure of bringing types in to the language has really doomed it. Pretty much all cases you might consider using Ruby, TypeScript is a better choice.I have been doing Rails for the last 8 years but it's really showing it's age. Constant issues in our app that TypeScript would have caught, along with pretty dismal support for advanced editor features you see with typed languages.	Gigachad	12.655946	-6.957795	comment	4.0	21.0	1686810080	12.325034
36361398	> Because outside of Go (and maybe R	> Because outside of Go (and maybe Rust) it will be very difficult to actually do what Elixir doesIt's just as difficult in Go and Rust. BEAM, the Erlang VM that powers Elixir, is not just about lightweight processes. It's also about guarantees that neither Go nor Rust provide. E.g. to do what Elixir does you need robust process supervision trees. You can imitate, but not replicate those in other languages.	troupo	12.58283	-7.484888	comment	4.0	20.0	1686939946	12.886682
36389113	This is a JavaScript keyword and the	This is a JavaScript keyword and there's nothing TypeScript-specific in the blog post.	aphexairlines	12.346621	-6.771849	comment	4.0	19.0	1687167710	-10.4392
36415816	Whenever I see examples of LiveView 	Whenever I see examples of LiveView being used it all works seamlessly but the UI always looks very simple, like basic forms, links and buttons. How does one build more custom/complex UI controls with it?	jamil7	12.900463	-6.722703	comment	4.0	16.0	1687335303	12.662138
36458857	I went and looked at your submission	"I went and looked at your submission, and I am comfortable with how we handled it and the level of detail we gave you. Would you mind sending me an email so I can hear a bit more? It sounds like we might've implied something we didn't mean to.These should not take 10 hours, unless you're learning Rails from scratch or something (some people do this). We've tried different ways of saying ""don't spend more than 2 hours on this unless you really want to"" and it doesn't always come through."	mrkurt	12.74539	-6.88638	comment	4.0	31.0	1687616173	12.326237
36459736	Unpopular opinion: TypeScript is ove	Unpopular opinion: TypeScript is overrated.After 1 year of Vanilla JS you will know all the types by heart.All the necessary static type analysis will be happening automatically in your brain.No cluttered type syntax and linter wars needed.	jdthedisciple	12.357766	-6.82246	comment	4.0	33.0	1687622077	-10.456044
36463602	Trongate is the new PHP framework fo	Trongate is the new PHP framework for developers who love pure PHP	dlcmh	12.768221	-6.643883	story	4.0	8.0	1687648814	10.325079
36478977	CPU/Memory: scale horizontally when 	"CPU/Memory: scale horizontally when needed. Monitor cost.Disk: essentially limitless. If disk of VM runs out, node will crash, new node will start. Service should keep running on other nodes meanwhile. If restarts happen too often, throughput/error rate will suffer or cost will rise.Modern mentality is ""let it crash"" [0]. Software has bugs. Design so it can crash and scale depending on need.[0] https://medium.com/@vamsimokari/erlang-let-it-crash-philosop..."	edejong	12.531943	-7.5062246	comment	4.0	22.0	1687783349	12.924605
36481186	Adding Elixir to our Nextjs app (202	Adding Elixir to our Nextjs app (2022)	cheeseblubber	12.713807	-7.4243584	story	4.0	75.0	1687793969	12.927562
36500575	You don't have to listen to what oth	"You don't have to listen to what other people ""consider harmful"" or think are ""anti-patterns"" or ""clean code"". You don't Gotta Catch 'em All the design patterns or figure out if coffeescript is the flavour of the week or plug in event-sourcing because it was on HN yestreday. You can just solve the problem you have. Nobody will know. I don't why programming is so vulnerable to these memes and false consensus and blog fad driven architecture.I have some styles I like and I use them. Some of them aren't compatible with each other so I don't use them all at the same time. I don't wait for John Carmack or Bob Martin to tell me if it's okay. You shouldn't either."	ketralnis	12.385729	-6.5686097	comment	4.0	17.0	1687911410	-10.549216
36539014	TypeScript 5.2 Beta	TypeScript 5.2 Beta	DanRosenwasser	12.391103	-6.839768	story	4.0	42.0	1688146545	-10.480849
28697438	> the checker.ts file of the TypeScr	"> the checker.ts file of the TypeScript project, which has more than 42k lines of codeWhat the actual f** ?42k lines of code and they mention it casually without even thinking about explaining the reason behind this monstrosity?And yes, I fully expect the comments below to contain stuff like ""This is nothing, back in the day we had a 1M loc Java class."""	choeger	12.350774	-6.797324	comment	4.0	12.0	1632938261	-10.406417
28711139	I'm sure Ada makes a reliable progra	"I'm sure Ada makes a reliable program, but wouldn't it also be good to have an Erlang/Elixir style ""self-healing"" system with supervisors that can stop and restart each other?"	olah_1	12.477697	-7.4978523	comment	4.0	16.0	1633035018	-5.4090548
28760399	Really cool article!I've been learni	"Really cool article!I've been learning Elixir for a couple of weeks now and metaprogramming is one thing that trips me up. Especially just browsing the source of Phoenix for the first time, it was/is really hard to follow what's happening.I come from a PHP background, using Laravel, which is regarded as a ""magical"" framework, but I think a stark difference is the lack of robust metaprogramming in PHP. Almost everything can be traced back to a parent object or a trait. The few magic methods you may see floating around are usually implemented in `__get()` and off the top of my head, I think they usually are only magic getters/setters on models.Laravel has a concept of macros that you can use to extend objects injected from the DI container, but each must be explicitly defined, so grepping fo"	yurishimo	12.717568	-7.218677	comment	4.0	22.0	1633446024	12.822749
28779656	I came here to say that Pulumi is th	"I came here to say that Pulumi is the answer, but people already mentioned it. It's TF under the hood, some of the docs links even refer to the links in TF documentation [not intentionally, just by copy and paste], but they made the experience so much better. Writing code in Typescript and seeing your infrastructure provisioned with all the goodies Pulumi added on top of TF is pure joy. No more HCL, or other ""here's my DSL, learn it"" scenarios."	zenlot	12.388814	-6.681005	comment	4.0	16.0	1633561917	9.402205
28784863	Afterwards follow up with PROLOG and	Afterwards follow up with PROLOG and Brainfuck, please.	marton78	13.152102	-7.301981	comment	4.0	14.0	1633606055	-12.511984
28819431	> TypeScript: Typed JavaScript (nece	> TypeScript: Typed JavaScript (necessary for any project you plan to maintain)If stopped reading at that point :/	thepill	12.346883	-6.6944647	comment	4.0	13.0	1633881624	-10.446495
23375365	Django Rest Framework takes down the	Django Rest Framework takes down their docs in solidarity with BLM	jasongi	12.836282	-6.540526	story	4.0	12.0	1590984212	10.093084
23410637	According to comments on a recent As	According to comments on a recent Ask HN post[0], most of the opportunities to use Elixir in industry are for consultants either (1) supporting subsystems abandoned by corporate employees who have moved on, or (2) assisting companies to migrate from Elixir to a solution easier to hire for, to avoid expenses and limited availability of help with (1).Upsell opportunity would be to offer (2) after delivering (1).[0] <https://news.ycombinator.com/item?id=23283675>	ncmncm	12.697362	-7.4576674	comment	4.0	13.0	1591228776	12.905445
23411827	> Javascript is great. But... in say	> Javascript is great. But... in saying that it has a few quirks and can work in some unexpected ways.Typescript has just as many[1] (in fact more, as it's a superset) quirks than Javascript. I like using it (and it makes JS type-safe-ish), but it's not really some kind of paradigm shift.Not sure how I feel about import maps. They are quite literally the same thing as package.json. In fact, converting between the two takes about 20 lines of code[2]. I'd bet my bottom dollar that everyone's going to use them, which is going to lead to exactly the same types of problems as Node.[1] https://blog.asana.com/2020/01/typescript-quirks/[2] https://github.com/WICG/import-maps/issues/60	dvt	12.331371	-6.591076	comment	4.0	16.0	1591239321	-10.450231
23412796	Frankly I find TypeScript with stric	Frankly I find TypeScript with strict mode turned on to be a safer and saner than C# and Java because of explicitly nullable types alone. I _never_ get null pointer exceptions in my own TypeScript code. Combined with fairly strict ESLint you get something that catches a lot of problems at compile time.Of course it's still far cry from being as safe as for example Rust.And yeah the inconsistency of JavaScript/TypeScript can be frustrating for sure. I think my dream language is one that is simply TypeScript cleaned up to be made consistent and sheds a lot the features and retains a simple core.	torb-xyz	12.351636	-6.797571	comment	4.0	12.0	1591248171	-10.460044
23433262	Does go-to definition work in crysta	Does go-to definition work in crystal? That was always my least favorite thing about ruby, I find it very awkward to write code without being able to jump to definitions.	ngngngng	12.591646	-7.2508535	comment	4.0	21.0	1591387301	-11.23873
23433435	> Care to explain more? Having been 	> Care to explain more? Having been using Ruby for about 8 years and Crystal for about 4, they actually have an extremely similar syntax and are also semantically very close. To the point where many Ruby scripts are completely valid Crystal, or at the very least require only a few changes.It doesn't have Kernel#eval. It doesn't have Kernel#send. It doesn't have Kernel#binding. It doesn't has Proc#binding. It doesn't have Kernel#instance_variable_get/set. It doesn't have Binding#local_variable_get/set. It doesn't have BasicObject#method_missing. It doesn't have BasicObject#instance_eval. I could go on. All these methods have extreme far reaching non-local implications on the semantic model and practical performance, and specifically defeat many conventional optimisations.> To the point wher	chrisseaton	12.5707855	-7.1671047	comment	4.0	23.0	1591388172	-11.301626
23445210	Ask HN: Elm, would you use it in pro	Ask HN: Elm, would you use it in production?	xupybd	13.000015	-7.6801615	story	4.0	4.0	1591510814	-12.762593
23463000	It's important not to read this as a	It's important not to read this as a critique of Typescript. Rather, it's a note that it's not a good fit for this one particular performance critical piece of code.It sounds like they are discussing the central code runner of deno. I would have expected this to be compiled to JS in any case, but it seems like they are compiling the runner, then compiling user code. Of course that's slow. It's also not representative of a normal TS use case, which is unfortunate because I expect we'll see this discussion shared all over the web as an argument for dropping TS.	esperent	12.436601	-6.5964713	comment	4.0	12.0	1591669258	-10.804859
23476252	Once or twice a year I have to peak 	Once or twice a year I have to peak at the code of a PHP app that was developed by interns more than 10 years ago. No framework was used, max 3 letters variables are the norm, no blank lines and the only comments are from code copy pasted from examples.These days I would be more inclined to celebrate the death of PHP than its birthday !However this app isn't GDPR compliant and I have good hope that it will be gone in about a year.	jmnicolas	12.784404	-6.6392746	comment	4.0	44.0	1591791517	10.331991
23476284	"What are the ""modern"" features of ph"	"What are the ""modern"" features of php? It looks like it's trying to shed it's dynamic nature and add types (with annotations etc). Also frameworks like Symfony / Laravel look more and more like java web frameworks to me.
I'm not saying this is necessarily bad but there's nothing modern about types. Also, might make more sense to choose java if you need types."	joelbluminator	12.758139	-6.64299	comment	4.0	38.0	1591791809	10.336876
23476384	I started with PHP 15 years ago, but	I started with PHP 15 years ago, but after 5 years I just moved to Java.The worst thing with PHP was people and standards, everything was a mess, there was no right way to do stuff and larger projects had like 100 different implementations for the same thing. PHP was really challenging to work with as coming to a shared agreement for how one should implement stuff was a recipe for personal conflicts.So after a few years, I just started to code web applications with Java. A completely different, but much more enjoyable environment and much more friendly people.I guess PHP is much more fun today, it was really fun to code in PHP as it was really simple and you feel productive and powerful. But in the old days, bad defaults often caused issues in production. And some of the documentation/know	olavgg	12.755398	-6.6245456	comment	4.0	15.0	1591792604	10.312524
23476716	Every time there's a story about PHP	Every time there's a story about PHP there's a comment like yours, and then in reply there's a comment like mine:Yes it's perfectly fine to use PHP if it's a productive environment for you. Of course it's possible to write good software with it. Of course a skilled developer will manage to do great things with sub-standard tools. Many extremely popular websites were and even still are powered by PHP, that's undeniable.But that doesn't mean that we should absolve PHP of all its many, many design errors over the years. There were for a long time many fundamental issues with PHP as a language that didn't exist with its peers. The language was not so much designed as it was cobbled together by amateurs starting from a half-backed templating engine.I'm not saying that to hate on PHP, I just bel	simias	12.7704115	-6.643933	comment	4.0	28.0	1591795510	10.350567
23487072	The author says that he has soured o	The author says that he has soured on Python for “serious, large projects”. While it’s clearly personal opinion, and that’s fair enough , I can’t help but think his choice of framework hasn’t helped him and has likely caused significant slowdown when delivering features.Looking through some of the code for Sourcehut, there’s an insane amount of boilerplate or otherwise redundant code[1]. The shared code library is a mini-framework, with custom email and validation components[2][3]. In the ‘main’ project we can see the views that power mailing lists and projects[4][5].I’m totally biased, but I can’t help but think “why Flask, and why not Django” after seeing all of this. Most of the repeated view boilerplate would have gone ([1] could be like 20 lines), the author could have used Django res	orf	12.776584	-6.5446186	comment	4.0	24.0	1591869826	10.06828
23539855	I was initially kind of worried abou	I was initially kind of worried about TS. It has kind of a high barrier to entry with linter settings, typescript-specific setting, solving how to compile your code easily, learning the new syntax, etc. etc.I literally spent like an hour reading up on it and learning it, and I realized I never want to go back to a plain old JS. TS feels way closer to Java than to JavaScript, with its own quirks and way of functioning of course. The barrier of entry seems perceived, but not really that big of a deal.I wonder what are the cons of TS.	BossingAround	12.372465	-6.692062	comment	4.0	17.0	1592319364	-10.504471
23553399	80% of web servers is not the same a	80% of web servers is not the same as 80% of web traffic.I guess at least 80% of web traffic would go to the Alexa top 100 sites. How many of those run on PHP? There was a time where many if not most of them ran on PHP, but today many have migrated away from it for performance reasons.	29athrowaway	12.786884	-6.650002	comment	4.0	22.0	1592411871	10.275872
23592670	It seems it might be an issue with t	"It seems it might be an issue with their development abilities or problem-solving motivation:1. It seems that they write a "".d.ts"" file manually in addition to using TypeScript for the code. This is dumb, since TypeScript generates the declarations automatically. However, for them ""it was too much overhead and complexity when we attempted it before"", which caused them to give up, a very dubious course of action.2. They claim that changes take minutes to recompile, but TypeScript can compile incrementally, so this shouldn't happen assuming they are organizing their code properly. Also, you can just translate without type checking, which is no worse than using JavaScript instead.3. They claim that ""having two Body classes is obviously wrong"" (?!). Of course having two classes with the same n"	devit	12.357119	-6.7981367	comment	4.0	13.0	1592754663	-10.454968
23593875	There are so many uninformed and mis	There are so many uninformed and misinformed comments on this post. Please read the design doc[1] before commenting if you assume the Deno team is doing it wrong, or hasn't ever considered some obvious solution you came up with in 0.7 seconds.[1]: https://docs.google.com/document/d/1_WvwHl7BXUPmoiSeD8G83JmS...First paragragh of that document:> Update June 10 2020:  I saw that this design doc was being discussed more widely. Most people don't have the context to understand this narrow technical document - it is only applicable to a very particular, very technical situation in the internals of Deno. This is not at all a reflection on the usefulness of TypeScript in general. It's not a discussion about any publicly visible interface in Deno. Deno, of course, will support TypeScript forever. A	inimino	12.485933	-6.4829903	comment	4.0	24.0	1592762745	-10.852028
23594325	It should be noted that under the op	It should be noted that under the open access tab one can download the book.Aside from being one of my favorite programming books ever, and on par with SICP and PAIP I think, the font they used is really beautiful [1]. The PDF perhaps does not do it justice. On paper it's really crisp and pleasant to read.I hope MIT Press opens up The Craft of Prolog [2] too, a fantastic sequel to The Art of Prolog.[1] https://docs.microsoft.com/en-us/typography/font-list/lucida...[2] https://mitpress.mit.edu/books/craft-prolog	nextos	13.151185	-7.297252	comment	4.0	15.0	1592765589	-12.47226
23593253	Perl 5.32 Released	Perl 5.32 Released	todsacerdoti	12.342054	-7.035478	story	4.0	77.0	1592758534	13.180312
23608817	Is there a decent prolog/SQL bridge?	Is there a decent prolog/SQL bridge? Being able to write applications and queries using SQLite or Postgres  database as the fact set for prolog would be very nice.	EamonnMR	13.156181	-7.2517834	comment	4.0	14.0	1592873517	-12.467772
23630536	Many places don’t support antifragil	Many places don’t support antifragility. Having an old system that nobody wants to rewrite may not be a reflection on the engineers.You’re an expert, and a rewrite is going to expose you to a lot of scrutiny. You are going to break things, when maybe you haven’t broken things in a long time and people like it that way.So when some day arrives where a new fad is hot and it’s hard to impossible to find Perl programmers, the will create a new team to rewrite it badly because now they have no other choice. And of course the new folks are going to screw up, but that’s just expected.	hinkley	12.327295	-7.0267034	comment	4.0	19.0	1593017654	13.18321
23630826	This is just bad maintenance. Just p	This is just bad maintenance. Just pick all the stuff people are complaining about and fix it!1. Improve threads2. Improve C API support3. Give local::lib, cpanm by default ... multiple perl versions by default4. Give direct support for coroutines / async await5. Mark experimental features as non-experimental (attributes, signatures)6. Pick an OO system, package system7. Make switch cool again8. Get more core modules or remove some. Give more visibility to cool perl modules. like PDL or something.9. Improve GUI toolkit, Web Deployment and Web Assembly support10. Improve look and feel of community sitesHeck break some backwards compatibility with Perl4, get rid of format.	foobar_	12.412354	-7.0609283	comment	4.0	18.0	1593018872	13.201332
23635066	I feel you. I'm currently at a start	"I feel you. I'm currently at a startup that, somewhat by accident, ended up writing their backend in PHP.Modern PHP is actually fine; it's largely avoided the issues perl has; adoption of the latest versions is quite high, and it's...fine. Not the best, not the worst, broadly comparable to other languages, and a far, far, far cry from what most people may think of when they hear ""PHP"". My last job used Node, the one before that used Python; I have personal preferences, but at the end of the day they're just tools, it's all fine. The ""PHP: a fractal of bad design"" blog post actually made a big impact on the community, and shocking number of the issues listed there have been solved, with rapid active progress ongoing. (Yes, I know, it still has issues, and people still hate it. No need to co"	Lazare	12.740944	-6.6591253	comment	4.0	15.0	1593041555	10.334227
23689428	Going back to PHP and ASP you mean.	Going back to PHP and ASP you mean.	pjmlp	12.774137	-6.6225457	comment	4.0	23.0	1593520975	10.321601
23690332	Actually the web site uses Redis as 	Actually the web site uses Redis as the only store. And Redis is using 0.1% of CPU. The problem is that Ruby sucks at doing anything scalable. It's just a Ruby/Sinatra app. If you do that in PHP, it will work out of the box with many concurrent accesses. With Ruby not the case. There are ways to deploy it better, but it should be fast as default, which is not the case.	antirez	12.745501	-6.8843975	comment	4.0	15.0	1593527162	12.306068
23758811	Partly, it cluttered the code and de	Partly, it cluttered the code and decreased legibility.Mostly, though, it was the debugging ecosystem that was the bigger issue with error handling. With the version I'm writing in PHP/Laravel, stack traces are very clear about where they happen and involving what components. When I plug in Sentry, this makes debugging production issues much easier.Go's code is more elegant, more performant, and is fun to write, but maintaining PHP in production is much nicer and less time-consuming.For a project like this, where it's just something I do in my spare time for fun, not having to spend a lot of time managing production is important.	bovermyer	12.730861	-6.689687	comment	4.0	20.0	1594127352	10.296044
23777879	I think you get it backwards. Things	I think you get it backwards. Things are disjointed, loosely coupled because highly dynamic languages have won. The flexibility of dynamic languages, which can be great when working around dynamic corner cases, does not force developers into fixed, well-defined contracts keeping everything loose and disjoint.PHP is highly to blame. PHP, being a scripting language, is easy to deploy and keeps chugging along at all costs. It may do something nonsensical, but it will try to chug along to completion without aborting. It creates a system where it is easy to write and deploy something that usually works.	friendzis	12.75413	-6.6350865	comment	4.0	20.0	1594280518	10.329347
23781682	Unpopular opinion, but as an old per	"Unpopular opinion, but as an old person, I am starting to look down on having too many technologies / frameworks on a CV these days. Some developers need to try something new every project and never learn anything with style or get deep into a tech, they are busy jumping on the next trend and learning things at a very shallow level.It's not a definite ""no"", but it's a red flag for me as to why you would need Flask for one project when you have used Django for another and PHP for something else. If you can convince me that you that you had a good reason for changing that doesn't appear to be resume driven development, then I'll listen.Also I am starting to value team players over technical skills. Provided you are of a reasonable level of ability it's more useful to have a team player than "	collyw	12.793024	-6.53945	comment	4.0	15.0	1594310750	10.076975
23788678	What does this actually mean? The PH	What does this actually mean? The PHP release engineer who replied didn’t make it sound like it was a major deal (of course, if it is a major deal, this may just have been an initial ACK statement).	addicted	12.768952	-6.632386	comment	4.0	16.0	1594361646	10.352652
23833302	Neat! One obvious question: Is this 	Neat! One obvious question: Is this intended to integrate with Rails?	oezi	12.811891	-6.86984	comment	4.0	12.0	1594741540	12.352437
23873387	Hey, really good list, better than t	Hey, really good list, better than the article.I don't really like PHP, because of inconsistency (it tends to break to flow for me) (but maybe it changed since 2014), but php with strict typing is a big plus for me and php7 is already more than fast enough. I might try it again.The real issue i have with PHP is frameworks :/Too much choice is a productivity killer for me.	orwin	12.772569	-6.6402164	comment	4.0	13.0	1595008393	10.341504
23874506	Have you heard about Phoenix LiveVie	Have you heard about Phoenix LiveView? Sounds like what you want.It's a Rails-like framework written in Elixir (piggyback-ing off 30 years of BEAM), and LiveView changes the game by allowing you to build rich front-end application from your backend.The way it works is that it serves you static HTML on initial load (yay SEO), and then it establishes a websocket connection to the server (very efficient thanks for BEAM), and every subsequent user interaction sends a event_name which you handle on the backend, and the backend respond with only the changed data (Phoenix can intelligently track your changes so it only sends what has actually changed), and then morphdom on the browser side patches things onto front-end.You get the full power of interactivity but you barely have to touch any front	edisonywh	12.858198	-6.677473	comment	4.0	13.0	1595014375	12.651404
23890274	A lot of this boils down to the cons	A lot of this boils down to the constant churn in frameworks, instrumentation, programming languages. Developers don't have time to master one way of doing things, it's just a constant lava layer of crap.I took the time to learn how to build and maintain Ruby on Rails systems, hoping it would be the ticket to a fun, manageable career. Any project I worked on was an island of sustainable, fast development where the team finished the sprint's work in a few days. I knew where the bottlenecks were should the project need to scale, and scaling issues never took down the site completely.Only to throw all that expertise away when it was just decided to replatform one day. Because I guess stable just wasn't good enough. After it happened twice, well, might as well go into devops. Y'all are gonna n	vinceguidry	12.730685	-6.9409485	comment	4.0	53.0	1595174932	12.354187
23895614	I'm still using RVM, is RBENV the re	I'm still using RVM, is RBENV the recommended approach now? What are the key differences for a user?	syspec	12.53417	-6.8980184	comment	4.0	13.0	1595231117	-9.457561
23913438	Slightly off-topic but I'm curious a	Slightly off-topic but I'm curious anyway: Has the tooling for JavaScript improved with TypeScript's adoption? As a back-end developer, I feel like each time I've tried to dig in and start a JavaScript project from scratch has ended with me weeping after spending four hours fighting the tooling. Is there a better way?	JadoJodo	12.380917	-6.674389	comment	4.0	13.0	1595386001	-10.454152
23922125	PHP is a banned language internally 	PHP is a banned language internally Amazon and Amazon subsidiaries, so they will not care.... why am I getting downvoted for offering direct experience as an AMZN engineer? Amazon InfoSec forbids PHP. See also: https://news.ycombinator.com/item?id=23030330	urda	12.7691345	-6.6556497	comment	4.0	22.0	1595455585	10.323708
23931419	Despite my username, I haven't writt	Despite my username, I haven't written any serious Ruby is like 5+ years; that is to say, I'm fairly removed from a lot of the changes in the Rails world.Now, pardon me for my ignorance, but... isn't this just like Resque back in the day? Or like doesn't ActiveJob just support any ol' backend outta the box? What's the real use case for this? I'm genuinely curious not trying to be rude or diminish the work.	rubyn00bie	12.777856	-6.896482	comment	4.0	15.0	1595533267	12.289252
23931705	This is exactly why I stuck with Del	This is exactly why I stuck with DelayedJob after all of these years. The community seemed to flock to Resque or Sidekiq, but I always felt my needs were met just fine with Delayed Job. I never was interested in adding more unnecessary complexity to our dev and staging environments for a trade-off I didn't need (there wouldn't be a significant performance increase for my needs).I've seen this pattern happen with a lot of Ruby projects: there's a popular Gem that people use that grows over time, then someone writes a blog post about why that package isn't suitable for their needs due to a design trade-off (often introducing a new Gem that is advertised as superior to the previous one) and then suddenly the old Gem stagnates, causing the maintainer to lose interest and updates stop pacing Ra	debaserab2	12.697802	-6.95385	comment	4.0	14.0	1595534861	12.368299
23955013	Isn’t Laravel the worst performing f	Isn’t Laravel the worst performing framework out there right now, like even Rails looks like a viable option in terms of speed?	bnt	12.800804	-6.6606307	comment	4.0	18.0	1595746123	10.337967
23955751	Is there a good reason to still use 	Is there a good reason to still use php when you can use hacklang (https://hacklang.org/) which has much stronger type system. Some would even call it php++.	aslamc	12.757335	-6.6597104	comment	4.0	16.0	1595756447	10.35259
23990278	At some point it makes more sense to	At some point it makes more sense to switch to Crystal.	davidkellis	12.630856	-7.2608128	comment	4.0	31.0	1596048626	-11.28234
23990520	Can someone explain why the types ca	Can someone explain why the types cannot live in Ruby code itself (after an appropriate version bump)?Python 3 incorporated types into the language itself, in a similar way (though non-reified) to PHP. This seems much easier to deal with than requiring two files (.rb and .rbs) to describe a single data structure.	muglug	12.5352745	-7.0874586	comment	4.0	99.0	1596050150	12.356305
23990831	PHP has a JIT coming in 8.0, using t	PHP has a JIT coming in 8.0, using the same underlying tech that LuaJit does.  Unfortunately, most of what people do with PHP isn't CPU bound, so it doesn't help much.	tyingq	12.737385	-6.6370378	comment	4.0	24.0	1596052043	10.34969
23991258	FWIW, you can use inline syntax with	"FWIW, you can use inline syntax with Sorbet[0], one of the two typecheckers that will work with the RBS format (the other being Steep, which does not have inline syntax).Here's a full example, complete with a typo, based on the example in the blog post: https://bit.ly/3hMEMSpHere's a truncated excerpt to get the basic idea across:    # typed: true

    class Merchant
      extend T::Sig

      sig {returns(String)}
      attr_reader :name

      sig {returns(T::Array[Employee])}
      attr_reader :employees

      sig {params(token: String, name: String).void}
      def initialize(token, name)
        @token = token
        @name = name
      end

    end

Disclaimer, I used Sorbet while I was an employee at Stripe. I found it to be a terrific typechecker. It's also just absurdly fast (mos"	rattray	12.521931	-7.121793	comment	4.0	27.0	1596054734	12.381089
23991394	A-fucking-men.In the course of my jo	A-fucking-men.In the course of my job I write Swift for iOS and Ruby for server APIs and our web-based UIs.Type issues are about 0% of my Ruby bugs, but dealing with all the damn type requirements in Swift regularly takes dozens of minutes to track down when some weird esoteric error message pops up. And God help you if you try to use generics.If you want strong typing, then good for you. Just pick a language that fits that mold.So much of what I love about Ruby is what it doesn't make me do.	sparker72678	12.445577	-7.118689	comment	4.0	24.0	1596055430	12.376695
24020382	I think the reason is probably what 	"I think the reason is probably what you mentioned - very few people are starting large Perl projects nowadays. And I think they'd like that to not be the case anymore by making it attractive to newcomers. Feels a bit like a bird in the hand vs two in the bush type thing honestly - be a bit antagonistic to your existing user base and make up on the hope that you'll get a new rush of users to make up for it.Edit - to be clear - I don't think this is a good idea. I'm not inverting the meaning of the ""bird in the hand"" idiom, I used it specifically because I think this is an example of chasing after a fantasy that's going to leave them worse off in the long run by compromising their existing user base. I don't know why you'd expect a sudden rush of new users coming to Perl today and try to tai"	vikramkr	12.335767	-7.029095	comment	4.0	22.0	1596289561	13.1764965
24020726	Then let it die in maturity, going d	"Then let it die in maturity, going down providing value to its users to the last, and focusing on any needs its remaining users may still have. Way better than stabbing it's user base in the back, and still not attracting any new users. Because there's no feasible way Perl can just tweak a couple things and open up a new user base. It is what it is.The whole ""stab our existing users in the back and chase a new user base"" model has been bizarrely popular lately, but I'm not sure I've seen it work even once.(I exaggerate a bit with ""stab"", but still...)"	jerf	12.347311	-7.0238237	comment	4.0	20.0	1596292547	13.181458
24059063	I am not big fan of PHP frameworks. 	I am not big fan of PHP frameworks. But there is a thing - you are either using framework or inventing one.Currently I am using homemade sort-of-framework for my pet projects. It has one big advantage - there is no need to learn API from external documentation as I am building it along my needs. I also learn a lot about reinventing wheels.	severak_cz	12.766449	-6.6197095	comment	4.0	16.0	1596622197	10.299716
24075453	I can't say I can recommend followin	"I can't say I can recommend following almost any of this as ""general"" advice. It is, at best, advice from a complete expert for complete experts who are already pushing the edge of what django should be used for, and who never expect to have to hand off their project to an average web developer. I've had to come to terms with the fact that the average web developer is going to screw up e.g. writing their schema by hand in sql. And I know I'll likely be the person inheriting this two generations of developer after the original wizard left.For an average web developer, someone just getting into django, or someone who isn't yet running into the limitations that the author apparently is, this is a recipe to just make a huge mess.It's also very specific advice. Recommending ignoring cross-datab"	ris	12.911034	-6.444958	comment	4.0	26.0	1596747903	10.036845
24122775	The author makes it sound like Rails	The author makes it sound like Rails is the recommended way to build software that is maintained by a revolving door of junior developers whom you don't have to motivate or compensate, because you can just hire another cog-in-the-machine when the old ones inevitably wise up to your game.Not sure if that was the intended message.	pavlov	12.760125	-6.933053	comment	4.0	12.0	1597165879	12.365025
24153956	PHP was just PHP for years.Now I don	PHP was just PHP for years.Now I don’t even recognize what’s going on when reading code in a language I’ve used for my entire software development career.It’s like a new language.I want to be done with tech some days.I just want to do my job, not relearn a language I’ve used for 20 years.	dpcan	12.760309	-6.6475306	comment	4.0	16.0	1597382526	10.370185
24154842	As someone who wrote their last line	As someone who wrote their last lines oh PHP in something like PHP 5, this list tickles my desire to take PHP for a spin again. Not only does the language appear to be much improved, but also the frameworks look so appealing! I'm seriously over dealing with all the low-level plumbing that comes with building Node/REST SPAs just for what's essentially a bunch of forms.	sir_pepe	12.743715	-6.6196637	comment	4.0	15.0	1597389742	10.331087
24168904	J and K remind me of the essay about	J and K remind me of the essay about the Lisp Curse[0], which mentions that the expressiveness of the language became a sort of Achilles heel in its culture. It talks about people writing their projects in Lisp and not expecting other people to adapt to their conventions or combine their efforts on one library, where every solution worked well enough initially - but only for one person, its author.In K the error messages are far harder to understand than most languages, and you'd need either enough comments or many hours of experience with the language to understand what a piece of code does, due to its sheer expressiveness. Also, there's comparatively less documentation for when you're trying to do something practical. I can't imagine introducing J or K in an open source project will be h	nonbirithm	12.47604	-7.0003734	comment	4.0	17.0	1597500035	12.398655
24181551	Totally agree, running Wordpress loc	Totally agree, running Wordpress locally needs a minimum understanding of Apache, MySQL and PHP for sure	jonwinstanley	12.778432	-6.5329747	comment	4.0	13.0	1597613718	10.293362
24183465	What was the original intent of bund	What was the original intent of bundling php + ruby on rails in a workstation OS?	schoolornot	12.759715	-6.795761	comment	4.0	12.0	1597633569	12.154709
24209865	Erlang: The New Scalable ETS Ordered	Erlang: The New Scalable ETS Ordered_set	codeadict	12.473273	-7.4994416	story	4.0	102.0	1597841738	12.9136715
24229070	Is the new implementation still Rail	Is the new implementation still Rails?	kn8	12.745334	-6.928926	comment	4.0	29.0	1597958072	12.366266
24235994	PHP is seeing a renascence and renew	PHP is seeing a renascence and renewed interest similar to what happened with JavaScript a few decades ago.A language that's easy to make fun of but widely used is an attractive target for improvement.	tambourine_man	12.723609	-6.615108	comment	4.0	24.0	1598025748	10.33203
24236245	What are the memory leak problems?I 	What are the memory leak problems?I was under the impression that PHP's stateless nature, with a whole new instance of everything coming into being for each request, somewhat sidesteps the capacity for problematic memory leaks that could otherwise exist for processes that remain alive between requests.	webignition	12.7092495	-6.624373	comment	4.0	18.0	1598027035	10.237269
24242571	A year ago, I research similar memor	A year ago, I research similar memory issues in Ruby. The established hypothesis in the community was that it was due to memory fragmentation. But I found that the largest culprit was actually the glibc memory allocator, which doesn't like to return memory to the OS. In multithreaded scenarios this issue is amplified even more, due to the use of separate heap arenas per thread.I also found a simple solution: call malloc_trim() after a GC. This reduces memory usage by 70%.https://www.joyfulbikeshedding.com/blog/2019-03-14-what-caus...	FooBarWidget	12.492429	-7.04786	comment	4.0	17.0	1598083892	8.657182
24298295	I still find the Typescript compilat	I still find the Typescript compilation time to be annoying. I rediscovered using Typescript for backend development on NodeJs and was very unpleasantly surprised by the compilation time (my only complaint).For a project with 20-30 files and around 8 dependencies, it took 10-20 seconds to compile and 4Gb of RAM (yes I checked with tsc --listFiles that no other files were parsed).The same in Go to compile to native would probably take <5s in my experience!	bengalister	12.345646	-6.7789845	comment	4.0	13.0	1598560268	-10.453298
24320561	"""PHP as fast as C"" - People who are "	"""PHP as fast as C"" - People who are in php language development may die  laughing reading this statement.Truth can be harsh, but people sometime overvalue to such an extent is hard to understand."	freelancercv	12.731068	-6.6577754	comment	4.0	27.0	1598750059	10.303969
24332333	The goal of Ruby v3 is to be 3 times	The goal of Ruby v3 is to be 3 times faster than v2.https://blog.heroku.com/ruby-3-by-3/Unclear if that goal has been achieved.	splitrocket	12.616501	-7.036485	comment	4.0	14.0	1598887150	12.383036
24335961	In Ruby, as in NodeJS, the GIL pushe	In Ruby, as in NodeJS, the GIL pushes you to scale horizontally. The memory footprint of Hello World becomes a big problem, because the number of copies you run will be proportional to the number of cores you have, not the number of machines. You get no benefit from moving from an 8 core box to 16 or 20 cores.I suspect if they do manage to pull off more concurrency in Ruby 3, that vertically scaling machines will make more sense. If 8 cores benefit from a shared footprint, instead of one core per process, then the budget looks more attractive.So now might not be the right time to cherry-pick some of these features, but it may not be far off.	hinkley	12.679298	-6.9563756	comment	4.0	26.0	1598907968	12.3346195
24341835	This is why I love opinionated frame	This is why I love opinionated frameworks, why I love hand-holding tutorials, why I love abstractions. I don’t like code. I don’t like writing it, I don’t like reading it, I don’t like thinking about it. A mechanic doesn’t love his crescent wrench, he loves working on engines. The wrench is just a tool. What I enjoy is the final product and seeing a project come together as time goes on.“The right tool for the job” doesn’t matter for most regular CRUD boring programming work. Django vs Rails vs a huge bundle of JS libraries cobbled together at random... for most programming work it doesn’t matter. So why not pick the one that lets you get your job done the quickest and easiest?I get nothing (nothing but added stress) from trying new frameworks and new libraries and new packages constantly.	freehunter	12.7040615	-6.5759544	comment	4.0	15.0	1598969251	10.165397
24371146	To me this seems like a clear loss. 	To me this seems like a clear loss. The syntax is (as far as I can tell) strictly more verbose than the existing assignment syntax. Ruby is already plagued by a million-and-one ways to do everything, but at least in other cases simplicity (à la zen of Python) trades off for brevity.	ericpauley	12.352329	-7.106675	comment	4.0	12.0	1599186258	12.405656
24396277	> I always want to try and never fin	> I always want to try and never find a good reason toAs someone who learns best by doing, what are some practical projects that someone could do to learn Elixir?  I know that Elixir is quite capable of solving certain kinds of problems very elegantly, but maybe my experience hasn’t presented these kinds of problems yet.  Outside of building a Discord-like server or a Phoenix web app, what other good practical projects/applications are there for Elixir?	linux2647	12.688875	-7.436559	comment	4.0	20.0	1599447621	12.960698
24396961	The best things about Elixir are mix	"The best things about Elixir are mix and phoenix. We all can talk about how well under load on multicore machines it behaves but that is the same as we would talk about Erlang. What pushes Elixir beyond Erlang is advanced macro language that allows for things like Ecto, mix with moden Ruby like gem+rake kinda dependency management and really really good solid testing framework.Elixir/Phoenix is really good. And the ecosystem is also pretty solid.Pros:* Functional language
* Multicore support built in
* Mix
* Phoenix
* REPL
* solid ecosystem of most needed toolsCons are:* Functional language
* Still niche adoption, not many talented people to pick from.
* If you are deploying via release ( as you should ) mix is going away in production Can be plus or minus depending on people reading it et"	jakuboboza	12.689042	-7.3875732	comment	4.0	18.0	1599458624	12.897554
24397041	> In typescript, you can have abstra	"> In typescript, you can have abstract classes or interfaces to implementIn erlang these are called ""behaviours"".> I was relying on documentation for thatConsider reading the Erlang documentation.  The Elixir people really don't understand Erlang very well, and are trying to manufacture Ruby on top of a language that already gives them solutions to their problems that they just can't see..> If there was a way to say use @some_spec and get information about it in the editor. It would have helped out.Basically every IDE that speaks Erlang knows behaviors.  They're as fundamental to the language as header files are to C/C++.Elixir tried to ""do away with them"" because Elixir thinks they're ""confusing"" but they're actually really important tools."	JohnHaugeland	12.586454	-7.4840856	comment	4.0	15.0	1599459718	12.91341
24398051	"""and Phoenix is so full of magic (wh"	"""and Phoenix is so full of magic (which isn't a good thing)""Can you explain something more about why you think this is not a good thing?Is it like Laravel (PHP)? Lots of magic so it is very easy to get started but a hell to maintain?I really like to get started with Elixir (for webdev) but I am not sure if I should start with Phoenix."	thdrdt	12.772766	-7.208372	comment	4.0	31.0	1599471039	12.837793
24398797	> copy and paste a higher-level cons	> copy and paste a higher-level construct like an Agent or Genserver and add the 1 line of code to this root supervisor that was just a file auto-generated in your project. But that'll get you a) introduced to the actor model and b) thinking about messaging while c) not ever worrying about or messing up concurrency.Isn't it well known that GenServers can become severe bottlenecks unless you know the inner workings of everything to the point where you're an expert?I'm not an Elixir expert or even used a GenServer in practice but I remember reading some warnings about using GenServers around performance because they can only handle 1 request at a time and it's super easy to bring down your whole system if you don't know what you're doing.This blog post explains how that happens: https://www.	nickjj	12.533555	-7.4133782	comment	4.0	32.0	1599479987	12.938609
24417153	Ask HN: Any open problems in PHP tha	Ask HN: Any open problems in PHP that need solving?	poletopole	12.763229	-6.6550655	story	4.0	3.0	1599625975	10.307328
19982393	I fondly remember the a-ha moment I 	I fondly remember the a-ha moment I had when I realized Ruby on Rails & Symfony are relying heavily on passing hashmaps around, instead of positional parameters.	tosh	12.534069	-6.9516487	comment	4.0	13.0	1558539853	12.321109
19983721	Does anyone have any experience with	Does anyone have any experience with both PureScript and ReasonML that can compare the 2?	Klathmon	12.438603	-7.500878	comment	4.0	12.0	1558548124	-10.499595
20041597	1.  You can find a RoR developer.	1.  You can find a RoR developer.	LanceH	12.668107	-6.876828	comment	4.0	18.0	1559145005	12.260668
20042181	Whenever I read about Rails it makes	"Whenever I read about Rails it makes me want to try it again and ""understand"" it this time... But it always ends up feeling wrong, and I go back to old reliable Django.I can't put my finger on it, but Django just feels intuitive to me and Rails just feels strange. Maybe it is the convention over configuration mindset which results in lots of magic, but I just can't get comfortable using Rails.I love the idea of Rails and it's community, but I don't think it will ever be the tool for me.And as a Django + Python lover, I feel the need to refute the idea (not just in this article) that it is mainly for academic/scientific purposes. Python is a great general purpose language which can do just about anything. It's not the best tool for every job, but for the generalist, it is wonderful. And Dja"	dinkleberg	12.79937	-6.6733437	comment	4.0	12.0	1559147187	10.282444
20042189	Or not! Here in Toronto we've had a 	Or not! Here in Toronto we've had a req open for a senior Ruby dev since like last October. We're seriously debating switching over to something else for no reason other than lack of available Ruby talent. Relatively view new devs are picking up Ruby nowadays. Job posting is here if anyone's interested --> https://angel.co/company/akira-2/jobs/106786-sr-full-stack-r...	zukzuk	12.681187	-7.0041413	comment	4.0	12.0	1559147235	12.366695
20075676	Every time I see something about Per	Every time I see something about Perl 6 I think this is awesome. Shame that a younger generation of programmers will never use it, because it’s not the new cool.If they renamed Perl 6 into something cool like “Liquid” or some think you find in the kitchen, like Chilli. Then hide away it’s origins a bit, they’d have a language kids would be raving about.I know that’s not the point but I can’t think of any programmer I know today that doesn’t talk about Perl with a certain contempt. “It’s Perrrrl” eyes up	harryf	12.34949	-7.0613303	comment	4.0	20.0	1559485917	13.189252
20110579	Wait.. So I'll have to install Ruby 	Wait.. So I'll have to install Ruby before I can install Brew? Ok. Ruined 2 minutes of my day.	mutt2016	12.490598	-6.93967	comment	4.0	12.0	1559782494	12.436577
20110667	You seem like someone who could answ	You seem like someone who could answer this: why use PureScript over Elm?	_bxg1	12.953196	-7.6637273	comment	4.0	23.0	1559783405	-12.735833
20110253	Crystal 0.29	Crystal 0.29	bb1234	12.643266	-7.250719	story	4.0	58.0	1559778788	-11.094574
20110805	The down side to that is that ruby i	The down side to that is that ruby is currently required to install Homebrew.	cprayingmantis	12.553669	-6.9896345	comment	4.0	14.0	1559785134	-9.231288
20111600	I think you’re overthinking this. Th	I think you’re overthinking this. The vast majority of Ruby/Python programmers have been installing their own copies themselves, because Apple was pretty slow in updating them (Ruby is usually a few minor releases behind, Python is still 2.7 IIRC). People will just keep doing that, and nothing will change.They may or may not be moving off Unix, but this isn’t evidence of that.	Gaelan	12.399748	-6.98326	comment	4.0	41.0	1559795381	12.384304
20116341	Python, Ruby -> Go. Nim and Crystal 	Python, Ruby -> Go. Nim and Crystal are pet project compare to other languages, no support, no community, no libraries, Crystal doesn't even supports Windows or threads. They are in pre alpha stage at best.	Thaxll	12.545521	-7.288893	comment	4.0	22.0	1559839830	-10.903827
20198852	Ask HN: How to improve the DX for a 	Ask HN: How to improve the DX for a legacy rails app?	aurelius83	12.763743	-6.918844	story	4.0	2.0	1560731501	12.354498
20211786	What are some language contenders fo	What are some language contenders for business logic?	walterbell	12.455621	-7.1018157	comment	4.0	15.0	1560857142	-5.8585258
20220726	Any initiative like this (language o	Any initiative like this (language on top of the Erlang VM) with static typing out-of-the-box?I really want to love Elixir but dynamic typing is a NO for me.	ggregoire	12.476277	-7.481038	comment	4.0	17.0	1560917351	12.932097
20237879	I think about this a lot, as someone	I think about this a lot, as someone who loves Ruby and loves Rust. I think it’s because we do a bad job of looking at the total costs. It feels like you can knock something out really quickly in Ruby. And in some sense, you can! But the time you spend debugging later doesn’t get factored into the way that it feels when you’re just cranking out features.	steveklabnik	12.501905	-7.1273146	comment	4.0	33.0	1561068458	-1.9491793
20267511	One part of releasing Elixir applica	One part of releasing Elixir applications I never found a definite answer was how closely the build environment has to match the final environment where the release is deployed. The Erlang runtime is bundled with a release, and this part is platform-dependent as far as I understand.If I'm writing an application that I'll only deploy myself I can of course match the environments exactly. But what about if I wanted to distribute an Elixir application to end users that might install it on all kinds of different operating systems and distributions? Do I have to build a release for OS/architecture combinations like Linux/64bit, Windows/32bit and similar? Or do I have to match each Linux distribution and windows version exactly? That would make it rather impractical to use Elixir to write softwa	fabian2k	12.675177	-7.4566383	comment	4.0	15.0	1561404782	12.932038
20268005	My preferred way of learning a new l	My preferred way of learning a new language/framework is watching someone walk through creating a real app in that language/framework so I can see all the folders/files I need to touch and the thought process moving step-by-step. Unfortunately I haven't found much in the way of that for Phoenix, the stuff on Udemy is pretty outdated last time I checked. Any recommendations?	freehunter	12.825211	-7.0275445	comment	4.0	19.0	1561407617	12.679053
20268934	One thing I love about Elixir is I h	One thing I love about Elixir is I had read the Erlang book from Joe Armstrong ages back, and a lot of ideas and concepts still apply. I just didn't get into Phoenix cause PGSQL is a PITA on Windows, so I have to go back and try with MySQL instead.	giancarlostoro	12.736198	-7.3554187	comment	4.0	18.0	1561413408	12.8635
20282665	Surprising?1) The Perl 5 community i	"Surprising?1) The Perl 5 community itself was dwindling before Perl 6.2) Perl 6 took a good chunk of time to arrive.3) It's still not 100% baked.4) Perl 6 is mostly a different language.5) Perl in general doesn't have a good ""name"" with todays devs6) There's no killer app7) Python got the data/science niche, Node got the web/services niche, Go got the backend niche - what's left for Perl 6?8) The libs are also lacking.9) Too complex to begin with (kitchen sink offering), at a time when devs started valuing simplicity more than before.10) Maturity of implementation, tooling, support, etc.11) No major commercial backing..."	coldtea	12.338524	-7.0406566	comment	4.0	21.0	1561534579	13.171039
20304851	Ask HN: Why Ruby doesn’t know how to	Ask HN: Why Ruby doesn’t know how to do maths?	ajimix	12.506875	-7.0652184	story	4.0	2.0	1561733466	12.414395
20357414	Has anyone who previously preferred 	Has anyone who previously preferred static typing converted (at least for certain projects) to using Elixir? I won't even put plain Node into production anymore, TypeScript at the minimum, but otherwise OCaml or Go.	spraak	12.496037	-7.4473705	comment	4.0	22.0	1562271361	12.902849
20357785	 I love hearing stories like yours. 	" I love hearing stories like yours. I wonder how Elixir would compare to Clojure, which I've used and liked for web development for many years. I hear nothing but good things about Elixir but I wonder if it would bring something new to the table for me in the ""really liking it"" category."	jb1991	12.670408	-7.6616783	comment	4.0	13.0	1562274287	12.887483
20357858	I love Elixir, but the learning curv	I love Elixir, but the learning curve was steep.  Async everything, dialyzer, macros, Erlang errors, charlist vs string vs iolist...  It was a lot to take in.Edit:  4 upvotes in 4 minutes.  I guess people are reading this...  for anyone who hasn't already discovered it, the saving grace for me was the Elixir Slack channel.  I also learned while working with someone who really knows Erlang, which helped quite a bit, too.  If anyone learning Elixir gets to the point where they want to scream, feel free to email me.  If I can help, I will!  Email in profile.	PopeDotNinja	12.670931	-7.4646125	comment	4.0	24.0	1562274818	12.9321575
20358366	Of course they are, but thé article 	Of course they are, but thé article seems to be from someone interested by elixir,  rather than someone who used it long enough to discover them (although I might have misunderstood the article.)From own experience, the problematic parts are :- deployment being a bit messy if you try to follow 12 factors (might be improving in  1.9)- absence of a decent debugger- younth of the ecosystem and size of the community (aka hard the find a maintained lib that works for a few common issues.)- compiler being a bit slow to my taste (YMMV)- then, of course, the elephant in the room: the absence of the kind of static type checking that facilitate refactoring ord relatively large codebases.Nothing unbearable or permanent, but some things to keep in mind. Go try it !	phtrivier	12.66453	-7.4490724	comment	4.0	13.0	1562280025	12.92837
20358590	My experience with Elixir has been g	My experience with Elixir has been great but one area of improvement is debugging. Maybe it's because I'm so used to using something like Chrome's developer tools, but I wish there was something as easy to use for setting breakpoints and inspecting the environment. Would love to know how others are debugging currently!	wmock	12.607311	-7.3574805	comment	4.0	13.0	1562282367	12.9167
20358429	Where are people getting their docum	Where are people getting their documentation for Phoenix? The stuff on the website is awful for grasping the bigger picture and how the parts of Phoenix combine. It gave me the impression of being an immature version of Rails when I tried it recently which doesn’t gel with the attitude people seem to have of it.	colinramsay	12.793165	-7.075158	comment	4.0	13.0	1562280677	12.65144
20377801	It seems to me like the only way to 	It seems to me like the only way to really provide any sense of security is to force gems uploaded to RubyGems to be signed. There is some discussion here (https://github.com/rubygems/guides/pull/70) about why the Rubygems PGP CA isn't really worth using in its current state. As we've seen with Javascript dependencies, we can only put off dealing with this problem for so long.	frizkie	12.578302	-6.9406238	comment	4.0	37.0	1562533048	-9.287253
20384460	I think you should add to this comme	"I think you should add to this comment ""in my opinion.""Because in my opinion C# is miles ahead of Erlang. If I want to create an application, back-end, front-end, running on a wide variety of platforms, Mac, Linux, PC, IOS, etc, I would use C# 1000 times over versus Erlang.The tools available, documentation, huge amount of libraries and support mean that developer efficiency in C# land is light-years ahead of Erlang. I could make a website + backend + IOS/Android app with all shared code while using tons of pre-existing OSS frameworks / packages and get it all up and running and prod/enterprise ready in no time at all and have it ready for enterprise load and scalability. Try that with Erlang!"	saberience	12.548927	-7.5050664	comment	4.0	13.0	1562605483	12.896076
20449132	Paul Graham convincingly made the ca	Paul Graham convincingly made the case that not all programming languages are equal in terms of power. A more powerful language should be a competitive advantage all else being equal. Hence it makes sense to use one.(Aside from functional programming, Ruby on Rails comes to mind even though it is a language and a framework.)	apples_oranges	12.554505	-7.0285983	comment	4.0	25.0	1563277109	12.337104
20478044	Are there any issues running PHP 5.6	Are there any issues running PHP 5.6-based code on a PHP 7.x VM?	kbumsik	12.781276	-6.6477523	comment	4.0	12.0	1563539486	10.355541
20492328	I built a billing site for my softwa	"I built a billing site for my software business and had to decide which tech to use. SPA? React + Rails? Elixir? Keep in mind we are talking about single digit req/min.I went with CGI. It has some drawbacks but consider the advantages:  * Requires nothing but Apache running, minimizes attack surface area
  * Deploy is a simple `git pull`, no services to restart
  * No app server running 24/7 so I don't have to monitor memory usage or anything else.

I love it. Takes little to no maintenance because it never changes.  Runs on a $5/mo droplet.https://www.mikeperham.com/2015/01/05/cgi-rubys-bare-metal/"	mperham	12.82131	-6.5136952	comment	4.0	21.0	1563728898	12.222147
20545688	It compiles to Erlang too. The langu	It compiles to Erlang too. The language itself is extremely similar to Haskell but with some refinements around some of the legacy baggage Haskell suffers from (string handling for example). Some differentiators include: strict evaluation by default, handling of record types, an extremely modular package policy (nothing is imported by default), and a lack of some things that can potentially make Haskell esoteric at times (template Haskell for example). The community is small but dedicated. Documentation can be very minimal in a lot of cases, so it’s not a beginner friendly language, but once you are up and running, it’s a pretty awesome experience overall.	tmountain	12.4676285	-7.5719123	comment	4.0	13.0	1564284532	-3.8985326
20592416	Slowly PHP is converging to what Jav	Slowly PHP is converging to what Java has been like 15 years ago.	tasubotadas	12.716751	-6.6483665	comment	4.0	26.0	1564748363	10.309384
20591881	Tons and tons of the web runs on PHP	Tons and tons of the web runs on PHP. It is a super easy language to learn and be effective in quickly. Especially if you are talking about open source content management systems, PHP is dominant.Anything that improves overall code quality of this language should be welcomed with open arms. Types, especially if they are backward compatible (as these are) will do so.I'd be interested in what kind of automated or ide support will be available, but I suppose that won't be known until this is released later this year.	mooreds	12.728557	-6.621784	comment	4.0	67.0	1564741770	10.323384
20603300	Simple, pure, and total functional l	Simple, pure, and total functional language that generalizes Datalog	edwintorok	13.146324	-7.0479927	story	4.0	90.0	1564873849	-6.829521
20610038	I used to work closely with Quicken 	"I used to work closely with Quicken Loans and other FoCs and can attest that this behavior is commonplace. There is this strange culture within the Family of Companies where non-tech leaders think that tenured Quicken engineers and tech people are these sort of super-geniuses. Many years back I was a part of a company in the Quicken led start-up space. We were often ""encouraged"" to meet with Quicken or FatHead senior engineers for advice. One time I reluctantly agreed and met with ""the best programmer in Michigan"" who's first piece of advice was:""Delete your app and start over. Ruby on Rails is trash. Real programmers use C#. With C# you can create libraries that you can reuse across all your apps."""	pgm8705	12.741329	-6.9437137	comment	4.0	18.0	1564963151	12.363368
20638958	I'm sorry if you thought I meant CSS	I'm sorry if you thought I meant CSS rendering was the source of potential vulnerabilities, but for any website that has, say, users, if you're not using any PHP frameworks or external libraries you might have to implement some crypto of your own to store passwords securely, just for starters.  I don't think PHP offers a standard library to do that, does it?There are a hundred examples that are specific to whatever app this guy built for the Healthcare company, not all of which are covered by the PHP standard library...I believe him when he says it passed external/internal auditing, however I have a very hard time believing he's not either very very expensive or took a very very long time to get the app to the place he claims it is (the third option is that it does very little, which won't	diminoten	12.808242	-6.459239	comment	4.0	19.0	1565211395	5.343176
20653394	The Erlang Rationale	The Erlang Rationale	lelf	12.562658	-7.525479	story	4.0	211.0	1565351202	-7.5380225
20659653	It's a shame that the elegance of Er	It's a shame that the elegance of Erlang has been distorted with Elixir.	fortran77	12.652352	-7.474554	comment	4.0	29.0	1565401582	12.9308405
20720832	I think one of Rails' biggest streng	I think one of Rails' biggest strengths is:> In fact, GitHub, Shopify, and Basecamp, as well as plenty of other companies and applications, have been running the pre-release version of Rails 6 for months and months in production.Test suites are nice and all but nothing beats having tons of real world production workloads thrown at something to really test it and iron out a good developer API. There's just a massive amount of confidence you have that you won't be the one having to pioneer some weird edge case bug.Can someone list at least 1 other popular web framework that has multiple individual sites pushing billions of page views through it before it hits a stable release?	nickjj	12.752668	-6.856827	comment	4.0	15.0	1565999817	12.325867
20752728	I started working with Python around	I started working with Python around 2013 and I still consider Django the best framework to use. Yes Flask you can  pick what you want to use but I have found the supporting libraries to be a bit outdated. Everytime I have used it I feel like I am just gluing together a lot of different pieces and it becomes messy. Django is constantly updated and I have little to no worries about security issues.Edit: And I have been following new projects such as starlette which I have really enjoyed but I have not bought into the idea of why I need async database access.	infecto	12.779667	-6.5255833	comment	4.0	28.0	1566339185	9.986463
20752401	Are any of these extremely good comp	Are any of these extremely good compared to a framework not written in Python? For example compared to Rails or Phoenix?	caiocaiocaio	12.711459	-6.8163323	comment	4.0	15.0	1566336579	12.48751
20752577	Say what you want to about PHP, but 	Say what you want to about PHP, but when it comes to deployment it’s hard to beat.	smacktoward	12.764547	-6.5998774	comment	4.0	12.0	1566337816	10.333153
20764840	PHP Sucks (2016)	PHP Sucks (2016)	arpa	12.767864	-6.6314	story	4.0	4.0	1566450713	10.341394
20767540	I've done 2 commercial Typescript + 	"I've done 2 commercial Typescript + React projects so far (along with few side projects using what I knew that time + what I want to try). My experience been:- Discourage 'any' but not been afraid of using it when must. I think it as the 'technical debt spelled out': when you want to put down an 'any' and get on with what you're doing, by all mean, but remember its existence and make sure the team is well aware. If the usage going to persist (example, using a library without @type), then you treat it as JS and have appropriate amount of validation around the occurrence.- Usage of ""?"" and ""!"" covers more scopes with less lines of code. For hobby/one-man project, I found their usages no-brainer, however I'm nervous when it comes working in a team of various experience level.- I've had real h"	jjakque	12.356976	-6.8346896	comment	4.0	16.0	1566478982	-10.408612
20785730	What's the view that TypeScript is t	What's the view that TypeScript is the modern Javascript?	tus88	12.3543825	-6.6947985	comment	4.0	38.0	1566630445	-10.453992
20794170	> I know brew will package a ruby ve	> I know brew will package a ruby version to handle this...Not to mention brew is vastly inferior to most Linux package managers (apt, yum, pacman, etc.)	zumu	12.40777	-6.8672247	comment	4.0	29.0	1566753947	-9.214842
20795808	What are some real-world, non-trivia	What are some real-world, non-trivial programs written in Prolog? (with a short description, please)	aargh_aargh	13.14281	-7.292005	comment	4.0	15.0	1566769584	-12.487354
20796318	Well one way to think about it is to	Well one way to think about it is to view the current structure (one of male dominated events) is already enforcing a system that isn't just about PHP. It's a structure where we put men on stage and leave (a few) women to silently sit in the back. The attempts by speakers and organisers to level this field is trying to get the events to just be about PHP. However they realize that things are very off balance already and without push back we'll continue to enforce a technological patriarchy. The only way to make things just about the tech is to address these things, however painful, and rebuild an environment where women feel equally accepted, respected, and praised.	abeisgreat	12.773744	-6.6306396	comment	4.0	23.0	1566775439	-3.9920878
20813466	I have been writing Elm for 5 years 	"I have been writing Elm for 5 years now. I work at Humio, where our front end is 100k lines of Elm code.What would you like to know? I love Elm. I'm absolutely hooked. I don't want to go back to doing Frontend work in JS, and I hope one day there can be an Elm-like experience for backend development as well.Just off the top of my head a few bits of what I like about Elm:
- You can actually write code, have no errors, and then move on, and never return to the project again. When I was doing JS, everyone I knew just took it for granted that you would be maintaining everything you ever wrote for the rest of your career. Not with Elm! You can actually finish projects and never return to them.
- Its a simple and small language that is designed to interact with human beings. The compiler really "	Chadtech_Real	12.989757	-7.675985	comment	4.0	20.0	1566933610	-12.763031
20829711	> but also that it had some limitati	> but also that it had some limitations that have only become more glaring over the years.I don't have any real experience with Perl, so could you maybe expand a little? I'm curious about what you think the limitations are.	CogitoCogito	12.344312	-7.0255365	comment	4.0	24.0	1567088439	13.22626
20834351	93% of Paint Splatters Are Valid Per	93% of Paint Splatters Are Valid Perl Programs	gitgud	12.353939	-7.0119176	story	4.0	44.0	1567117765	-10.794901
20846017	"Yes, basically this news means ""Ruby"	"Yes, basically this news means ""Ruby, python and Perl may not be preinstallled, install them yourself"".It's not a big deal for users of Homebrew or other package managers."	martius	12.336995	-6.9906635	comment	4.0	19.0	1567256221	13.037897
20851636	Same. There was a quick slide joking	Same. There was a quick slide joking about how this solves the fully offline client side browser app problem but even Chris McCord said that in all his years of consulting, he's only gotten a handful of requests for these types of apps.I'm sure they have their reasons for taking on such a project but as an outsider I would have liked to see more announcements that apply to what the majority of people are using Elixir for today (web apps). There's Nerves too which I'm not into personally, but there were things at the conf for that so I'm sure that crowd was happy.For example, telemetry was announced over a year ago with a hint that it was being worked on next and will be implemented into Phoenix as a web dashboard in the future but there was no hint of that mentioned this year -- at least n	nickjj	12.802228	-7.077357	comment	4.0	20.0	1567336385	-0.79461515
20876341	I'm building a project in ReasonML r	I'm building a project in ReasonML right now with reason-react.  The Reason-only parts are actually a joy. The problem is interop with the wider ecosystem, and bucklescript.They are serious problems.  You end up writing a ton of [@bs.... ] annotations to get things to work together that ultimately result in runtime errors.I hate battling a compiler (with sometimes quite cryptic errors, particularly identifying syntax errors) only to find that I can't actually free myself from the same type of errors I'd see with regular old JavaScript.I can dig through my discord history and  give more specifics. But given the massive learning curve and poor tooling that exists these days it's a step backwards from mainstream production JS development.That said, the community has really got some wonderful 	pkilgore	12.464785	-7.3701124	comment	4.0	17.0	1567599133	10.255818
20877262	I’m not a fan of TypeScript, and nev	I’m not a fan of TypeScript, and never heard of Reason, but this post makes me like TypeScript more. I prefer the fact it’s more explicit and less magic.The examples in TS are very easy to understand where Reason just looks like magic and I have to think more about what it might be doing. I don’t see a benefit to Reason over vanilla JS./opinion	philliphaydon	12.397658	-7.075133	comment	4.0	13.0	1567605630	-10.468279
20880603	An oldie but a goodie.The other day 	An oldie but a goodie.The other day we were at a restaurant and they gave my four year old a kids menu.  One of the activities was a modified sudoku that went up to 6.  My first thought was that I'd never realized you could do sudokus with other values of N.But the really cool part was that once I taught her the rules (the constraints) she was actually able to figure it out without much help at all!Turns out sudoku is a good way to teach kids logic, even at four years old.	jedberg	13.438841	-7.3974247	comment	4.0	13.0	1567625505	15.06716
20891739	I’m surprised. I haven’t heard anyth	I’m surprised. I haven’t heard anything about Ember in years. Not since 2013 or so.	vonseel	13.115409	-6.447061	comment	4.0	25.0	1567728037	-15.520437
20916616	Is there a way to migrate jsdoc-anno	Is there a way to migrate jsdoc-annotated JavaScript code over to TS, and is TS's minifier as good as Google's closure-compiler yet?	tannhaeuser	12.382239	-6.76304	comment	4.0	17.0	1568021996	-10.459948
20917417	Part of the problem is the hiring pr	Part of the problem is the hiring process (plus attitudes seen on here).Your resume needs to have lots of fashionable buzzwords rather than pragmatic good enough / keep it simple choices.  You must keep on learning (lots of things rather than mastering any one thing). I can write a really nice site in standard Django with some JQuery, and it will take me half the time that adding React to it will. But adding React will make me much more employable and get me a better wage.	collyw	12.772399	-6.443852	comment	4.0	21.0	1568031586	10.019702
20918149	Almost every single Flow version upg	Almost every single Flow version upgrade is like this — every new version brings a slew of errors due to Flow’s continuous movement away from practicality towards “soundness”.	lxe	12.425268	-6.5674744	comment	4.0	21.0	1568037189	-10.446838
20921117	Rails is so productive and powerful 	Rails is so productive and powerful these days that if you’re building a web app you need a really, really good reason not to use it	crispyporkbites	12.779805	-6.8736587	comment	4.0	55.0	1568055249	12.341122
20922522	I can totally relate on this.In the 	I can totally relate on this.In the end I think Rails and Node have different purposes. I would still use Node for proxy-style servers. Something with a small and focused scope which has to scale.For business intensive apps with a large scope, Rails-like frameworks are still way more productive and robust even if they are less trendy for the moment.The current frontend state is another story indeed. Frameworks like Ember tried to bring the same Rails-like structure to the frontend world but it isn't as popular and trendy as React for whatever reason. I think it's very costly for frontend teams to reinvent a coherent structure, convention etc for every new project. At least React has brought the same way of thinking in the frontend industry.	juliendc	12.787412	-6.6853127	comment	4.0	21.0	1568063434	12.294878
20923625	Have a look at Sails.js. While not p	Have a look at Sails.js. While not perfect, its highly influenced by Railshttps://sailsjs.com/	siquick	12.758039	-6.7188444	comment	4.0	13.0	1568071629	12.300714
20944310	BEAM is such an awesome and beautifu	BEAM is such an awesome and beautiful VM. Not only is concurrency at a scale unimaginable in other languages the norm for BEAM, but the isolation of running processes didn't hit me until I asked an Elixir dev about running BEAM in Docker.  The confused look told me I was asking an odd question: processes in BEAM are as isolated from each other as console apps running in different VMs in VMWare server. These processes can send messages to each other but they cannot access each other's memory. It was truly a mind-blowing revelation!	mikece	12.3756275	-7.4438033	comment	4.0	38.0	1568233714	12.83732
20944868	In the talk he glosses over what he 	In the talk he glosses over what he sees as serious flaws in Erlang distribution. I did some digging and it turns out that he elaborated on Reddit:https://www.reddit.com/r/elixir/comments/bronlx/discover_wha...	brianpgordon	12.63798	-7.5117116	comment	4.0	21.0	1568236993	12.9537115
20945393	>First, in my opinion distributed BE	>First, in my opinion distributed BEAM is mostly intended to run on a network which is fast and more reliable (such as local network). While in theory it can also work on a less reliable/slower network (e.g. geographically dispersed machines connected via Internet), in practice you might experience more frequent netsplits which could cause various problems, such as worse performance or less consistency.This is exactly why I wasn't excited about LiveView[1]. It felt like a step backwards in terms of human-centric design. Another tool that makes us consider our network bars first and our life second.In general, I'm kind of disappointed that Elixir isn't leading the way on decentralized and offline-first technology, but I guess it's a limitation of BEAM running on small/low-powered devices?[1	olah_1	12.810609	-7.049309	comment	4.0	17.0	1568240318	12.749408
20949246	Solenya: Micro-framework in TypeScri	Solenya: Micro-framework in TypeScript	fuzzythinker	12.372716	-6.7941957	story	4.0	27.0	1568276866	-10.477224
20956915	My wishlist for Typescript is:1. Pat	My wishlist for Typescript is:1. Pattern matching switch against types(like Scala, Haskell, Ocaml)2. Input validation based on the already defined typescript interfaces	noncoml	12.347274	-6.861064	comment	4.0	18.0	1568325599	-10.445619
20968263	If you're going to write unreadable 	If you're going to write unreadable code why not use Perl? It's much faster than Ruby. Or Awk, even though it's one of the worst programming languages ever created?	stevebmark	12.3883295	-7.0323424	comment	4.0	12.0	1568423777	13.014471
20982715	For anyone new trying to get into El	For anyone new trying to get into Elm (as a language/tool), I would look elsewhere. ReasonML, PureScript, TypeScipt, etc are all better featured solutions. Having said that, the article is well written and thorough for anyone wanting to take a look into Elm.But there are massive problems with Elm itself which make it impossible to consider seriously. I have and still do use Elm in production, and went through the nightmare upgrade from 0.18 to 0.19.1. Elm ports are not sound. Elm will tell you everything is good but doesn't do simple checks - as say PureScript does - to see if your port code actually exists or adheres to the defined contract. There are other tree-shaking issues, but Elm does not know and does not care about the js you've written.2. Evan holds the naive view that everything	thepratt	12.991561	-7.6714015	comment	4.0	15.0	1568630200	-12.753974
20985613	Neither Elm, nor any language in the	Neither Elm, nor any language in the Typed FP family, can do that. What it can do is to prevent us from making clerical mistakes. That's the surprising thing I learned programming in Typed FP: we very rarely make logical mistakes. Our programs are all broken, make no mistake, but they are broken not because we accidentally swapped a conditional (logical mistake), but rather because we passed in data of the wrong shape (clerical mistake).A common clerical mistake which Elm, Reason etc. prevents, is when we grab something from a list and pass it to another function. What if in a rare case it is possible that the element doesn't exist? A function deeper in the stack might crash, or if defensively built, substitute it with an empty value. Both could be wrong.By providing more information about	jasim	12.960069	-7.67014	comment	4.0	16.0	1568650663	-12.724071
20992417	The only problem I see with rails is	The only problem I see with rails is that it's hard to find devs these days (at least in Europe). Even if they could learn Rails for that project, many I've spoken to wouldn't want to take a job where Rails is required. I just witnessed a project switching from rails to React (for the frontend) because they just couldn't get enough good people willing to use Rails.	dx034	12.754819	-6.87965	comment	4.0	15.0	1568703562	12.334718
20995166	Wonderful stuff! I've been trying to	Wonderful stuff! I've been trying to learn programming and able to code the CRUD apps for almost 6-7 years. I've tried to learn Rails (Ditched learning Rails because JS framework are all the rage). Tried learning Flask/Django because it was considered easy. Ditched it too cause internet people said it's slow.I tried learning Go, Phoenix and jumping between what's considered cool in last few years.And here I am, no confidence to do a basic simple app. It's been an interesting journey with no luck because of constant chasing of 'Exciting' frameworks/Tools.	ankit70	12.763092	-6.7367253	comment	4.0	12.0	1568728943	12.290188
13612398	Django's basic tutorial is great to 	Django's basic tutorial is great to get started, but once you get into the nitty gritty I find myself often going to stacks rather than the docs to get the information I need because the docs get kinda sparse.One example is if you want to forgo modelforms and pass the information from the forms to the model manually through your view (for example because you want to manipulate the information before passing it to the database).  I couldn't find anything in the tutorial that gave clear instructions on this and had to go to stacks to find an example.  Maybe the solution is simple and obvious for most experienced programmers, but ordinarily the django tutorial explains things clearly so even newbees like me can get into it so it was disappointing that this was not done in this instance.Anothe	vivekd	12.85751	-6.5204916	comment	4.0	21.0	1486687269	10.085804
13615787	Cryptographically Secure PHP Develop	Cryptographically Secure PHP Development	CiPHPerCoder	12.784635	-6.5729675	story	4.0	114.0	1486738868	10.293883
13631531	PHP: First Programming Language to A	PHP: First Programming Language to Add Modern Crypto into Its Standard Library	CiPHPerCoder	12.73783	-6.544448	story	4.0	32.0	1486939608	-4.065431
13662769	is there something similar to this b	is there something similar to this but for python based frameworks, or javascript based? Seems like every great tutorial / books that I find are using ruby	sngz	12.358463	-6.668435	comment	4.0	12.0	1487273107	7.11789
13693342	I highly recommend Two Scoops of Dja	I highly recommend Two Scoops of Django and have recommended to every engineer at my company. The one caveat would be that the newest edition is for Django 1.8, so it'd be good to check against the docs periodically if anything looks off. Off the top of my head, the main thing I'd keep an eye out for would be changes to Class-Based Views like permissions mixins, although if I remember correctly, most of those changes were just moving things in django-braces to Django core.	dtran	12.836502	-6.518067	comment	4.0	13.0	1487652381	10.082567
13693624	I haven't followed this one myself, 	I haven't followed this one myself, but the django girls tutorial is supposed to be excellent.https://tutorial.djangogirls.org/en/	jsmeaton	12.824712	-6.55162	comment	4.0	14.0	1487656665	10.112003
13693713	I've been building a project with Dj	I've been building a project with Django Rest Framework (DRF), it's my first time using anything Django-related. Does anyone know whether new versions of Django tend to drop right into DRF, or whether DRF has to do some work to be compatible with a new version?I ask because I like the sound of the fulltext search mentioned in another comment, because it would mean I don't have to install a search engine to support that feature. So I'd switch to Postgres and start using Beta 1 pretty soon, if DRF will just-work with it.	vosper	12.825864	-6.5482674	comment	4.0	14.0	1487658120	10.071289
13717761	Actually pretty major release. Hoppi	Actually pretty major release. Hopping on javascript's crazy train. It was expected anyway, there are no way to ignore js-crazyness anymore (most of the frontend toolset exists only as js implementation).Also, Phoenix (ideological successor of rails) took this approach from the start	out_of_protocol	12.736406	-6.841557	comment	4.0	24.0	1487883792	12.332675
13728265	Why would you use “Ruby on Rails” fo	Why would you use “Ruby on Rails” for a new React project?	justin808	12.811919	-6.650563	story	4.0	30.0	1487973130	12.259869
13753662	This seems to be built on an open-so	"This seems to be built on an open-souce PHP->CLR compiler called Peachpie[1]. Interesting project. I don't have any PHP codebase that I still maintain but looking forward to trying it with some scripts I've written back in the days. I wonder if it would be faster than PHP 7 - which is already very fast (ok, just found these: http://www.peachpie.io/benchmarks ).[1]: http://www.peachpie.io/[edit] If the author is looking, a few nitpicks from the website:- A blank page is shown if browser doesn't load 3rd party scripts by default- After enabling them, the scroll wheel doesn't work- Typo: ""free completely to use"" -> ""completely free to use""- ""Run PHP apps on the most secure platform available, Microsoft .NET"" -> I also admire the platform but most secure? Comes off a bit too strong."	egeozcan	12.717349	-6.61809	comment	4.0	20.0	1488289609	10.313552
13755389	I would suggest a number of other la	I would suggest a number of other languages you could consider that are better languages than PHP.https://en.wikipedia.org/wiki/List_of_CLI_languages	rbanffy	12.729143	-6.6344233	comment	4.0	13.0	1488302233	10.3181095
13760369	Is TypeScript as annoying a language	Is TypeScript as annoying a language to code in as Javascript? Or is it comparable to other modern languages like Swift and Go? If it is, I'd say that pain of dealing with Javascript (for developer productivity and happiness) is already taken care of.	kartickv	12.350417	-6.778988	comment	4.0	18.0	1488334632	-10.452931
13768406	Ruby 3x3 is here already. It's calle	Ruby 3x3 is here already. It's called Elixir ;)No, seriously, if your heart beats for Ruby, you will fall in love with Elixir. Give it a try and you won't look back.	iagooar	12.658577	-7.1255574	comment	4.0	12.0	1488402709	12.429843
13821672	Perhaps it is. PHP is also typically	"Perhaps it is. PHP is also typically ragged on for being ""one of the worst"", yet it runs the majority of the web. The common theme between JavaScript and PHP is that it's possible to write some pretty awful code, but that doesn't make it impossible to write _good_ code in either of them. Do we measure languages by the worst we can create with them, or the best we can create with them?It's also easy to be ""one of the worst"" when there are only a handful of languages that see widespread use. You only need to be in the bottom 5 of 15 or so languages, but my point is that that may not imply that it's a bad language."	Meegul	12.636274	-6.620748	comment	4.0	14.0	1488993497	10.323796
13837911	Learning ruby at the moment and this	Learning ruby at the moment and this is setting off alarm bells. What? gems break each other?	roryisok	12.611709	-7.0535884	comment	4.0	16.0	1489146591	12.3821125
13843783	Ruby is a much simpler and more aest	Ruby is a much simpler and more aesthetically pleasant language. Python has all sorts of sharp corners. You really should learn both but I think Ruby is a much easier starting point.Also, a lot of research on dynamic languages is being done with Ruby, e.g. TruffleRuby, JRuby, RubyOMR, and probably a few more I'm forgetting. Each of those projects is an impressive body of work in and of itself that points to Ruby being very alive and well. Oh, almost forgot about MRuby. I don't think there are similar efforts for Python. In some sense Python is much more stagnant these days in terms of innovation at the language level.	dkarapetyan	12.498651	-7.0257344	comment	4.0	25.0	1489198634	12.351092
13854933	Not Ruby but for C code, I like Redi	"Not Ruby but for C code, I like Redis's code:https://github.com/antirez/redis/tree/unstable/srcI don't personally use the product, but I find the source well written and always share it as an example of nicely done C code.Here is some nice Erlang code I like -- network packet parsing:https://github.com/msantos/pkt/tree/master/srcNotice how concise this is:    codec(
       <<4:4, HL:4, ToS:8, Len:16,
       Id:16, 0:1, DF:1, MF:1, %% RFC791 states it's a MUST
       Off:13, TTL:8, P:8, Sum:16,
       SA1:8, SA2:8, SA3:8, SA4:8,
       DA1:8, DA2:8, DA3:8, DA4:8,
       Rest/binary>>
    ) when HL >= 5 -> ...

This is due to the beauty of binary pattern matching. You could kind of do it in C by casting to a struct but notice here it is also calculating header length (HL) as part of the matc"	rdtsc	12.4187565	-7.3892093	comment	4.0	28.0	1489374093	-9.56489
13910116	Ember 2.12 and 2.13 beta released	Ember 2.12 and 2.13 beta released	izelnakri	13.107831	-6.446505	story	4.0	56.0	1489963126	-15.516018
13916969	Rails 5.1.0.rc1: Loving JavaScript, 	Rails 5.1.0.rc1: Loving JavaScript, System Tests, Encrypted Secrets, and More	aaronbrethorst	12.73882	-6.903026	story	4.0	32.0	1490038202	12.335209
13945887	Is it relevant anymore ? Most of the	Is it relevant anymore ? Most of the javascript developers I know are working with Ember.	booh	13.107332	-6.443005	comment	4.0	24.0	1490319736	-15.513416
13945867	CoC, bad compiler, bad type system, 	CoC, bad compiler, bad type system, no formal proofing whatsoever, some of documentation reads like someone who knows English as a second or third or fourth language wrote it, in some cases it's just plain wrong.Elixir has already taken most of the ruby mindshare, the crystal team really isn't hacking it when it comes to presenting why crystal should be used instead of ruby except for speed. That its faster is the only viable motivation currently.I don't know anything about nim, so I can't really compare it. I wrote some compiler plugins and utilities for crystal at my company, but I ended just rewriting the component in ruby, and it runs hourly with JRuby.I hope Ruby3 gets optional types a la Dart, and a code conversion tool. Those two things would revive the entire ruby universe.Edit: la	killin_dan	12.607775	-7.245334	comment	4.0	20.0	1490319443	-11.242982
13948353	"Interesting! I always thought ""Mani"""	"Interesting! I always thought ""Mani"" mean't ""Gems"". At least in Sanskrit Mani is a Bead/Gem."	shripadk	12.55633	-7.0980606	comment	4.0	13.0	1490357543	12.382632
13953244	Really hoping this project gets more	"Really hoping this project gets more traction.I'm learning Elm now and I'm really liking the syntax to the level that other languages feel rather cluttered to me now.The more I'm playing with types and learning to leverage them, the more I appreciate their power (yes, I'm late to the game) so making this statically typed is very interesting.However, there seem to be a saturation of new languages and not sure if there is enough eyeballs left for a new language that does not have a large corporate backing (FB, Google, Apple) or happens not to arrive on a perfect time with the right set of answers. Maybe BEAM, ML/Elm syntax and static typing is what everyone else is looking for.Edit: 
Video posted today of creator of Alpaca (Jeremy Pierre) giving a talk at Erlang Factory. It gives a nice over"	salimmadjd	12.919215	-7.6531396	comment	4.0	43.0	1490400119	-12.7799635
13978432	Can We Have Form Objects in Elixir?	Can We Have Form Objects in Elixir?	squixy	12.656724	-7.463783	story	4.0	48.0	1490721120	12.938442
13979370	The install parameter you provide al	The install parameter you provide already requires yarn and the rather large ember-cli, in addition to requiring my app to be built on top of glimmer instead of with it.How can this possibly be considered remotely lightweight, especially compared to something like Mithril? I count at least 12 repos on your github that seem to be integral components including a dedicated CLI!	vorpalhex	13.104816	-6.4374	comment	4.0	13.0	1490726422	-15.51393
13979934	Is anyone here using Reason in any m	Is anyone here using Reason in any meaningful way? Even just a side project.If so, what are you using it for and how do you like it.	ubercow	12.404831	-7.4885964	comment	4.0	40.0	1490729964	-1.9988548
13980309	Totally of topic but could someone e	"Totally of topic but could someone explain Elixirs syntax to me?In the following code (from the linked site): 
What is embeds_many? 
Are :string and :map type information or Atoms?
What happens to :changes, Change, primary_key?
Does the code between do and end just call the field function twice?embeds_many :changes, Change, primary_key: false do    field :field, :string

    field :value, :map

end"	J0-nas	12.638161	-7.45925	comment	4.0	17.0	1490732584	12.919425
13988454	PHP is stateless. You don't get to k	PHP is stateless. You don't get to keep connections across requests.	CaveTech	12.750294	-6.551311	comment	4.0	19.0	1490807797	10.217168
14047151	Not really. I use SWI Prolog for a l	Not really. I use SWI Prolog for a lot of personal projects (that actually see QPS no less) and there's a lot more to it than that. SWI gives you: good debugging support (with trace and spy), hooks into the Prolog database (with asserta/z and retract), optimized implementations of difference lists, online help, and so much more. Don't even get me started on its amazing DCG support that makes Regex feel like a Neolithic toy. Not only that but Prolog's Syntax gives you very similar properties to lisp's homoiconicity (first class atoms, metaprogramming, etc). Sure you can reimplement all of this in miniKanren, but it's all there waiting for you in SWI Prolog already! There's a lot more to a language than just its concepts.Every time I hack in Prolog I always feel like I'm living the idea that	Karrot_Kream	13.144793	-7.2939653	comment	4.0	21.0	1491441125	-12.486833
14052455	Ask HN: What are the best tutorial f	Ask HN: What are the best tutorial for learning Flask?	pygix	12.725421	-6.5706196	story	4.0	3.0	1491498532	10.05757
14093786	After using types in Elm, types in T	After using types in Elm, types in Typescript have felt like a step backwards.	iamwil	12.915593	-7.5958133	comment	4.0	16.0	1491957088	-12.682706
14121615	Former Ruby, now Elixir, developer h	Former Ruby, now Elixir, developer here and I agree.The one use case where Ruby still wins for me, though, is a little one-off script. Last time I had occasion to do that, I found you couldn't use any Elixir hex packages without generating a whole mix application. In ruby you could just globally install the gem and require it right into your script.I forget why this came up, but I think it was something like just wanting to download a web page and parse out a certain bit of it into a CSV file or something like that. Pretty trivial in Elixir with HTTPoison and Floki, but no real way to use those in a one-off .exs file (I don't think?). Whereas in ruby, I've already got HTTParty and Nokogiri in there somewhere, and you can toss it together in a minute.	losvedir	12.6855345	-7.397002	comment	4.0	17.0	1492275889	12.889963
14121632	Playing around with Elixir, it seems	"Playing around with Elixir, it seems like it loses Ruby's Smalltalk like ""everything is an object"" that allows things like:  > 4.even?
  => true

That's not to say that what Elixir provides is (or is not) worth giving up everything-is-an-object because Erlang's design does what it is supposed to do very very well."	brudgers	12.640327	-7.4587693	comment	4.0	23.0	1492276151	12.90932
14121836	You're right that there are always t	You're right that there are always tradeoffs, but it isn't clear that Ruby takes the other side of many of Elixir's. Some examples: Elixir requires a VM installed on the target machine (unlike Go, C, C++, etc.), it doesn't have strong type checking (unlike Java, Scala, Haskell, etc.), it doesn't have a strong data science story (unlike Python and R), it can't be conveniently used as a dual front- and back-end language (unlike javascript, TypeScript, etc.). But Ruby is on the same side of all those tradeoffs.Someone mentioned that Ruby is more useful for scripts because libraries can be installed and used at the system level; that seems true to me, so that's one example. But I think the main tradeoff that Ruby wins on is maturity. Which is a big deal to be sure.	sanderjd	12.669472	-7.177125	comment	4.0	12.0	1492278627	12.711478
14120398	Ruby vs Elixir – Panel discussion at	Ruby vs Elixir – Panel discussion at Wroc_love.rb [video]	jschepmans	12.684069	-7.4075847	story	4.0	75.0	1492257181	12.877767
14128842	Everything I've ever heard on that f	"Everything I've ever heard on that front is that Erlang should be considered a control layer which has any CPU-bound tasks run in C. Actors/message passing is a good synchronization primitive but there is apparently a whole host of issues with memory leaks regarding it in the ""Erlang in Anger"" e-book.I personally lost interest in Erlang because of it only supporting actors as a concurrency mechanism. They're good for some things, and probably exceptionally good at what Erlang was designed for (Telecom systems), but I think they're just one tool in the toolbox. If the recommended solution for CPU-bound tasks is to start writing C, I have to wonder if there's a better way."	hderms	12.3940525	-7.5213394	comment	4.0	13.0	1492395675	12.882364
14129639	nodejs is imho best suited for two g	nodejs is imho best suited for two groups of tasks:1) APIs/programs relying on high concurrency and parallelism, especially where the handler(s) have to wait a lot for stuff like DB accesses2) streaming (in the sense of websockets servers), PHP iirc can't even be used as a websocket server3) Any API that can be implemented without needing too many async calls - you'll end up in callback hell or promise hell otherwisePHP on the other hand has other use cases:1) stuff that needs to be massively and easily deployed - you can grab PHP/MySQL/Apache hosting everywhere for either dead cheap or totally free. Examples include Wordpress, Drupal and MediaWiki2) stuff that is highly complex in its flow. If your API requires dozens of DB calls, filesystem access, networking or just involves thousands o	mschuster91	12.576247	-6.4512515	comment	4.0	29.0	1492413313	10.243015
14138543	"""resulted in developers that don't e"	"""resulted in developers that don't even possess this type of thinking anymore.""The good old days weren't. What it resulted in on average was developers who just bashed on their manual allocation until it ""seemed to work"", not glorious hand-constructed shimmering perfect crystals.At least now the code that ""seems to work"" usually does, and is memory-safe now, so yes, it's an improvement. If you still want to be careful and do it by hand in such a language, they're still there, and there's even better options arising."	jerf	12.622822	-7.273265	comment	4.0	16.0	1492521458	-11.2567005
14154307	> Compared to ruby, Python, Erlang, 	> Compared to ruby, Python, Erlang, php and that ilk it is lightning quick.Ain't nobody is going to compare performance against Erlang for numerical number crunch.It was never built for that. It's not even a fair comparison.It's like comparing a race car against a hybrid prius and saying the race car suck at mpg. They're built for different purposes.Ilk implies as if Erlang is some crap flavor flav tech. It is not.Erlang was made for concurrency.NodeJS was made to solve for concurrency too.And Erlang beats NodeJS hands down in concurrency.The actor model is a much better model to do concurrency and preemptive scheduling is amazing. It's easier to mentally think about actor and the code isolation in each processes makes it much more cleaner, object oriented, quoted by Alan Kay himself.NodeJ	digitalzombie	12.447286	-7.4858828	comment	4.0	16.0	1492668083	12.858535
14167695	Ask HN: Should I learn Erlang?	Ask HN: Should I learn Erlang?	alistproducer2	12.581985	-7.516635	story	4.0	14.0	1492797206	12.921926
14177795	> Rooby is a Ruby-like object orient	"> Rooby is a Ruby-like object oriented language written in Go. You can think it as a simplified, compilable Ruby for now.I have to ask, if your goal is ""compilable Ruby"", then...why not Crystal?  (https://crystal-lang.org/
)  Seems like it accomplishes your goals, already exists, and is (as far as I know) stable and well regarded.Nothing wrong with reinventing the wheel, and you may have very compelling reasons to write your own project.  But it looks weird when there's already a well-known project in this space and you don't compare yourself to it.  How are you better?"	Lazare	12.650472	-7.1710305	comment	4.0	29.0	1492948407	-11.258006
14214026	Now that typescript can compile gene	Now that typescript can compile generators down to ES5 and ES3, you could reasonably replace Babel by tsc entirely, right? I mean, with its --allowJs flag it's really just a javascript transpiler. Async/await, generators, JSX, array/object spread, destructuring.. it's all in there.Did anyone try this? We're doing a hybrid babel/ts app and it wouldn't hurt ditching one of the two tools.	skrebbel	12.386001	-6.613478	comment	4.0	13.0	1493321126	-10.445317
14216758	I'm curious, what frameworks are peo	I'm curious, what frameworks are people using TypeScript with? Is it mostly Angular or are people using it with others also?	eberkund	12.399412	-6.730924	comment	4.0	12.0	1493351519	-10.459054
14222823	Postgres tips for Rails developers	Postgres tips for Rails developers	craigkerstiens	12.908687	-6.6468143	story	4.0	192.0	1493411520	12.281128
14229984	TypeScript Progressive Web App Quick	TypeScript Progressive Web App Quickstart	aussieguy1234	12.381348	-6.796892	story	4.0	81.0	1493521642	-10.490385
14238833	Ask HN: I'm a PHP/Laravel developer,	Ask HN: I'm a PHP/Laravel developer, should I move to Node.js?	a_alakkad	12.74819	-6.5875087	story	4.0	1.0	1493655423	10.300671
14239711	I don't know if Prolog should be cal	I don't know if Prolog should be called esoteric. Prolog is an ISO-standardized language after all, and its syntax has been used for 4+ decades now in most papers on conceptual database system and query language design I've read. Which isn't surprising since Prolog syntax, being based on operator-precedence grammar concepts, is arguably as minimalistic as it gets. There's definitely also a lot of interest lately in Datalog, not just as a decidable logic fragment (which has been used for decades as well), but also as a practical non-SQL database query language and proper Prolog syntax subset.	tannhaeuser	13.14968	-7.2860484	comment	4.0	15.0	1493660626	-12.48252
14242231	I have two comments about the Prolog	"I have two comments about the Prolog code:First, the article claims: ""the sudoku solver above does a brute force search"", but that is specifically not the case. In fact, quite the opposite holds: The Prolog Sudoku formulation shown in the article uses a powerful technique known as Constraint Logic Programming over Finite Domains, which automatically performs pruning before and also during the search for solutions. This effectively eliminates large portions of the search space in practice, and degenerates to brute force only in those cases where almost nothing can be deduced from initial constraints. In the particular case of Sudoku, the pruning is especially effective and can in many cases eliminate the search entirely, since the initial constraints (hints) basically determine the whole so"	zmonx	13.2280245	-7.3255377	comment	4.0	36.0	1493677044	-12.474317
14274459	Am I missing something new with obje	"Am I missing something new with object literals or is this an error:      window.state.notes[id] = {
        id,
        content: ''
      };"	emehrkay	12.487137	-6.447714	comment	4.0	19.0	1494000393	8.4968405
14289417	This is a great comment, but I feel 	This is a great comment, but I feel like you might have missed out on all of the fun of upgrading Rails 2 => 3, which was especially painful. Some large applications are still stuck on 2.x and pay third parties for support because the changes were so large. They were mostly for the better of course, but there's a good chance the parent comment experienced this pain, and this is what they're referencing.	oomkiller	12.770926	-6.9314213	comment	4.0	12.0	1494220839	12.350617
14289233	> - Rails went on to release subsequ	"> - Rails went on to release subsequent versions, each of which advocated doing a near rewrite of working code and obsoleted/broke many of the libraries in the ecosystem.That's simply wrong. I've maintained a moderately-sized Rails app since 3.x, and updating never took more than an hour or so, even for the major version changes.It's also deeply unfair to the Rails team. Your timeline should include, as the first entry:- Rails 1.0 is released, showing the web development community how to structure a project, delivering us from XML, and banishing config.backup.inc.php3 from our nightmares.Rails came about in a world of SQL embedded in html, or (almost worse) the idiotic idea of ""templating languages"" that were poorly designed re-implementations of php (""but this time it's just for templates"	matt4077	12.747913	-6.9226646	comment	4.0	24.0	1494217501	12.355105
14294797	I'm curious if you've ever looked at	I'm curious if you've ever looked at optics-based systems for component coupling?Personally I think that the entire top-down state tree is a bad idea, but I'm willing to be convinced. I'd much prefer a modeling like the actor approach.	KirinDave	12.412522	-6.5263677	comment	4.0	26.0	1494271860	8.460993
14295185	Been using Elm for a few months now.	"Been using Elm for a few months now. Both in small side projects, and in a production app for work.Many benefits over using js, and basically no downsides apart from the initial learning curve.
And even that could be equal to the learning you have to do every time your team decides to add/use a new foo.js library or framework to the project.With Elm:  - you are confident about your code 
  - others ( and your future self ) can actually read it and understand it
  - it pushes you to think before you write
  - refactoring is a breeze, not a nightmare

I hope I won't have to use js on my next gig.edit:
Also, I cannot speak highly enough about how helpful the compiler is, and the community in the slack channel. Makes the whole experience a joy."	antouank	12.972809	-7.648974	comment	4.0	23.0	1494274526	-12.756118
14294410	Why not Elm on google turns up this:	Why not Elm on google turns up this: http://reasonablypolymorphic.com/blog/elm-is-wrongI think the basic gist was that it's type-system is far from complete.	cel1ne	12.953	-7.6668878	comment	4.0	12.0	1494269445	-12.755676
14301833	If you're thinking of dabbling into 	If you're thinking of dabbling into Erlang and may be put off by the syntax, try Elixir. Beautiful, actively evolving language with a healthy community. Compiles directly into Erlang bytecode. You can even still call any native Erlang libraries if you happen to need that.A short review [1] of Elixir from Joe Armstrong, author of Erlang. This is from 2013, and the language has evolved quite a bit since then.[1] http://joearms.github.io/2013/05/31/a-week-with-elixir.html	tsukaisute	12.55404	-7.4911933	comment	4.0	15.0	1494349657	12.911477
14307017	I'm wondering if anyone has tried to	I'm wondering if anyone has tried to use another language - I'm thinking Ruby - as a pre-processor for C++ code. I know people have pre-processed C++ code with various tools - for example Qt - but I'm thinking of just replacing # pre-processor statements with something like Rails based templates.	daemin	12.59708	-7.0551033	comment	4.0	12.0	1494409448	12.368423
14310105	Writing custom ESLint rules for your	Writing custom ESLint rules for your picky developers	egillie	12.330229	-6.47942	story	4.0	13.0	1494438637	-10.393292
14361283	I've got 10 years' experience on pro	I've got 10 years' experience on projects small and large and I have to agree. The title talks about building at scale but the article doesn't stress that which makes some of the advice downright weird.>If you don't really understand the point of apps, ignore them and stick with a single app for your backend. You can still organize a growing codebase without using separate apps.This is where the article lost me. If this is for building at scale, maybe, I don't know. I never hit a point where designing the project in apps became a problem. Regardless, if you don't know why Django wants to use apps, that suggests you are new to Django and probably not building at scale, so this feels like poor advice. Much of the article is telling readers to do things exactly contrary to Django's philosophy	tclancy	12.848099	-6.498086	comment	4.0	24.0	1495045473	10.043227
14387703	I am currently learning Elixir. Weir	I am currently learning Elixir. Weirdly the thing I am blocking the most is the functional aspect. I don't fully get why `List.get_elem list, 1` is superior to `list[1]`?(I know it seems a pretty obvious question, but I can't find satisfactory answers that make sense to me at least.)	hartator	12.624498	-7.4748363	comment	4.0	22.0	1495380461	12.955464
14393841	My company replaced the integration 	My company replaced the integration server I had originally written in Python/Django/Celery/RabbitMQ with one built in Elixir/OTP. The results were impressive.Our task load was getting out of hand, and during peak load throwing memory and CPU at it was not helping. Task monitoring was also a pain. It needed a complete rewrite, because the original design, while robust for what it targeted at the time, could not keep up with our growth.The integration developer I hired to take over the project looked into using Go at first, but then discovered Elixir. I started learning it with him (he quickly surpassed me), and after a few trial task implementations, I gave him the go-ahead. We couldn't be happier with the result. Thanks to OTP and the existing tools built around it, we have great monitori	teilo	12.709316	-7.3502746	comment	4.0	19.0	1495463430	12.871269
14407568	What could go wrong? “Perl cgi html 	What could go wrong? “Perl cgi html uploading linux kernel”	nanis	12.421785	-6.821579	story	4.0	22.0	1495599195	13.101681
14418599	Ruby values: ruby-the-tribe vs. ruby	Ruby values: ruby-the-tribe vs. ruby the language	jcn	12.5403	-7.0635624	story	4.0	35.0	1495732303	12.397317
14459040	The only big company I know that use	The only big company I know that uses Perl extensively is booking.com, and I think that has more to do with any technical merit from the language, and just that is what they started and it was working for them.To be honest, I think Perl still powers a whole lot of systems, and certainly is a powerful tool for someone who is a Unix sysadmin, but this kind of job is dying. And as a language, I think Perl has nothing on Python or even Ruby, or even PHP nowadays.	rglullis	12.331215	-7.0219502	comment	4.0	21.0	1496310847	13.162614
14459252	A single +1 developer is better than	"A single +1 developer is better than -5 developers. cperl got 10x more done in 2 years than p5p in 15 years, and the 10x factor is ongoing. In a few years nobody will use perl5 anymore, everybody will use cperl instead.I didn't only disagree with some patches, I disagree with most of the feature decisions, management and bugfix handling. And esp. with their negative track record. perl5 deserves a properly managed project and the perl6 features, so I did it. At an important time, with :const, types and signatures upcoming. 
And perl5 should not be used in public services due to its lack of security (I am warning against it since 5.16), not talking about the feature mishandling.See the perl11 blog.Some numbers: In the last 2 years, p5p produced 12005 commits (2 releases), whilst I produced 6"	rurban	12.341665	-7.036142	comment	4.0	18.0	1496314244	13.192237
14468380	I'd like to be awed and amazed, but 	I'd like to be awed and amazed, but the frightening thought of encountering such a thing in production and under tight deadline kind of doesn't let me :)EDIT: I've edited the code a bit so that it doesn't look like PERL or J itself https://gist.github.com/piotrklibert/4d32c8cc6fcf20643a257a2...	klibertp	12.333991	-6.971111	comment	4.0	22.0	1496392190	13.149953
14479757	Wow, I expected Erlang to score bett	Wow, I expected Erlang to score better, considering the claims of Elixir community how fast it is... compared to Ruby. OTOH maybe that tells more about Ruby.	insulanian	12.643691	-7.459113	comment	4.0	13.0	1496547057	12.844248
14499677	Hmm, I hope they're not planning on 	Hmm, I hope they're not planning on using ROS for the final product... using a non-hard-realtime OS to fully control a car is a spectacularly bad idea.	wyager	12.696517	-6.838541	comment	4.0	12.0	1496773317	12.2169485
14509431	This is hilarious and sad at the sam	"This is hilarious and sad at the same time. However, most of these write ups are aimed at attracting talent. Even more, some tech stacks are deliberately built to attract talent when the core domain is just too simple or boring. ""We serve user subscriptions and recipe data from an SQL database using Rails"" just doesn't sound as snappy as the infra-porn on the blog."	tnolet	12.754263	-6.9288735	comment	4.0	25.0	1496865654	12.360309
14511293	  But pandas’ magical simplicity mak	"  But pandas’ magical simplicity makes things like computed columns immediately intuitive:
  > data['% of total'] = data.amount / data.amount.sum()

Is that immediately intuitive? I'm staring at this trying to understand what it's doing. Is the / operator overloaded? data.amount is one particular amount, and data.amount.sum() is the sum of all amounts? Why does the ""computed column"" property goes on the same data object as the actual data? Maybe it's immediately intuitive if you've used pandas."	farnsworth	12.35735	-6.469051	comment	4.0	29.0	1496886656	9.779959
14537191	I thought Sudoku can be solved in co	I thought Sudoku can be solved in constant time. It would be a O(9! * 9! ) or something, which is just a O(1), isn't it?	bhaavan	13.450927	-7.409667	comment	4.0	19.0	1497274139	15.085393
14537288	"To me, this answers the question ""Ho"	"To me, this answers the question ""How well can neural networks crack sudoku if we forget all of our domain knowledge, and just try to brute force our way through with insufficient training data and a neural network that's poorly sized?"".I suggest an alternate approach that would use a training set consisting of real-world data of sudoku puzzles that are in the process of being solved: before a box is filled in, and then after it's filled in.  This would teach the network to solve the puzzle one step at a time, instead of all at once.If you insist on only using the as-received puzzle and the solution for training, my intuition is that you'll need more layers than 10 in the NN, and much much more data.A taxonomy of what complex solving strategies need to be learned already exists: see e.g. h"	timdellinger	13.449252	-7.4079223	comment	4.0	20.0	1497275060	15.078527
14537631	So much missing-the-point in this th	"So much missing-the-point in this thread. The point isn't ""can we solve sudoku with a completely over-wrought solution"", it's ""can NN be applied to X class of problems with no human-added domain specific knowledge"". And that I think is quite cool."	kortex	13.450779	-7.4098706	comment	4.0	23.0	1497277796	15.080615
14547406	IS it me or is php syntax like this 	"IS it me or is php syntax like this :   public function __construct($user)

that makes php seem to be abhorent? (Well, i am speaking for myself)Why would you use your time and energy to build another rails like framework when you could work on something better?One reason not to program in PHP is because of this old timer syntax. Do you like how php arrays are constructed? Really, tell me. I really want to know.Can we please move forward? I would rather see someone work and improve other frameworks such as django. And all these ""implements"" in Php. Weren't they copied from Java? I will take Java over everything else. Php is dead. Let it die. I am sure it was an ok language some time ago but there is no way to resurrect it by copying other frameworks over. Unless of course, it provides a eas"	MikeB1089	12.767548	-6.636339	comment	4.0	12.0	1497379276	10.336313
14574628	Ask HN: What web framework should I 	Ask HN: What web framework should I learn as a freelancer?	moraya-re	12.795664	-6.6337757	story	4.0	7.0	1497681959	10.273416
14582360	The Ruby story in Europe is very sim	The Ruby story in Europe is very similar to the American one: Rails, Rails and Rails. However the last thing I wrote in Ruby is a scraper for a web site, a few hours after patching a Rails app I've been maintaining for a customer for at least five years.About more non Rails stuff, I started writing small text processing scripts in Ruby a few years ago. I wrote them in Perl before, but I eventually got more at ease with Ruby, notwithstanding the compact convenience of Perl's while (<>) loop and the implicit input variable. I also made a mruby program run on AWS Lambda just because I could. Interesting but probably not extremely useful in that context (pun intended).I wonder if there will be a second Ruby wave from Japan, if their community keeps growing and their use cases start reaching ab	pmontra	12.6305	-7.011411	comment	4.0	21.0	1497813784	12.412454
14584025	Now I'm really curious. What framewo	Now I'm really curious. What framework would you prefer to use build a webapp?I'm looking for Rails alternatives.	copperx	12.675832	-6.616633	comment	4.0	14.0	1497835544	12.264144
14583404	I'm honestly at a loss as to why typ	I'm honestly at a loss as to why typescript is not the industry standard now.  JavaScript is a mess, and I'm continually surprised to encounter anyone who prefers it.	lsadam0	12.385239	-6.733478	comment	4.0	13.0	1497825949	-10.4451685
14585461	Ask HN: Will php being out of memory	Ask HN: Will php being out of memory caused by increasing memory leak?	protosschris	12.739184	-6.642775	story	4.0	1.0	1497862275	10.291489
14586844	Would you recommend Laravel and PHP?	Would you recommend Laravel and PHP? I know PHP is seen as outdated by some people... But now that that NodeJS/MongoDB hype is finally receding, PHP actually seems like a sane alternative.	Double_a_92	12.793494	-6.558465	comment	4.0	12.0	1497879843	10.285848
14605726	> * Dirty schedulers: This allows ea	> * Dirty schedulers: This allows easy integration of blocking C-based libraries. So for example can wrap something like RocksDb and make it available to the rest of the VM easier. Or libcurl and others.Silly question, but shouldn't elang have some good & highly concurrent http libraries?	mtanski	12.574659	-7.438963	comment	4.0	16.0	1498064963	12.907217
14606062	if you want to get started but don't	"if you want to get started but don't know where this is a good place to start:http://spawnedshelter.com/there's a online course by Simon Thompson from the University of Kent that started 2 days ago, you may be able to join:https://www.futurelearn.com/courses/functional-programming-e...if you like the ideas but want to try something different there are alternative languages that run on the Erlang VM:* Elixir with a ruby-like syntax: https://elixir-lang.org/* LFE (Lisp Flavoured Erlang): http://lfe.io/* Efene with a python-like syntax: http://efene.org/and one in development but already looking really interesting: Alpaca, an ML inspired language: <a href=""https://github.com/alpaca-lang&#x"	marianoguerra	12.560825	-7.498759	comment	4.0	29.0	1498066712	12.92963
14608709	I have tried on multiple occasions t	I have tried on multiple occasions to learn and use Erlang for some different projects.My process has always been stopped by a few specific things, and I end up going back to Common Lisp, which tends to be much easier to get to work.My first problem is to make sense out of how to actually run a server application. Manually compiling source files and run functions is one thing, but trying to actually set up an application with all the monitors and stuff is really annoyingly hard. Even following step-by-step instructions resulted in errors that I didn't understand as soon as I tried to do anything outside what the tutorial showed.The second issue that I have never managed to properly solve is how to use libraries. In particular, I have wanted to use the client libraries for RabbitMQ and Couc	lokedhs	12.568336	-7.514135	comment	4.0	16.0	1498086000	12.913947
14608261	I'm not sure that Elm architecture r	I'm not sure that Elm architecture really solves the fundamental problem, so much as just moves it to another layer.If you have a big global model, with messages modifying that model, then eventually you're going to notice that many places in that model are similar. E.g., widget state for identical widgets on different parts of the page. So you tag the messages that pertain to a particular widget with some kind of coordinate into the global model, and then you call generic widget code with the local widget state as an argument, and the message, to produce a new local widget state. Congratulations, you've reinvented objects.	jhpriestley	13.007349	-7.685192	comment	4.0	15.0	1498081845	-12.7633505
14619917	I am stuck. What is the next step he	I am stuck. What is the next step here? (Aside from programming it in Prolog.)https://i.imgur.com/ezUHHBp.png	ralfd	13.145064	-7.303498	comment	4.0	12.0	1498232210	-12.513751
14622021	Static typing and compile-time check	Static typing and compile-time checking are two very good reasons, same reasons you'd use Elm.I am not a react developer but I have heard that one of the common complaints about React is ... that it's not Elm, or in more explicit terms, in case you don't know anything about Elm, ... that it's very easy to write code that will break if you poke it the wrong way.In a static typed language such as Elm (or Reason, based on skimming briefly)... when you get input that can mutate the state of the program, it comes in the form of a message.  The messages are typed, so you know what values to expect.If you write a switch/case statement that handles a message type, the compiler will balk at you if you change the values that the message type can have, without updating the case statements that operat	yebyen	12.961568	-7.6092644	comment	4.0	17.0	1498245877	-12.734521
14635429	On Windows, AIMP 3 is king. Especial	On Windows, AIMP 3 is king. Especially for those of us who are nostalgic about Winamp 2.95 which was for many years the best simplistic music player that got the job done and got out of the way.AIMP 3 takes 30MB of RAM even with 20+ GB playlist, on a machine with two sound cards, playing music 10-12h a day, and I've never seen it going even above 2% of CPU.That being said, the author's sarcastic tone is fully justified. Everybody picks a favorite language and defends it, as if it is their parents under fire. I am all for Elixir and I love it, but I already had to write Golang several times because I needed more raw speed, being one example.Don't be fanboys, fellow programmers. You're paid to do jobs, not being cool. Too many forget that.	pdimitar	12.618332	-7.4897895	comment	4.0	20.0	1498470598	12.905773
14648100	I've been trying ways to profile my 	"I've been trying ways to profile my django code on my dev server.  
Its using runserver and postgres on virtualbox (ubuntu in ubuntu) and takes 20s to display a page.
This is not due to slow db queries, those are quick.
strace says its making a huge number of calls to:
futex(0xe9d550, FUTEX_WAIT_PRIVATE, 0, NULL) = 0
I tried debug_toolbar, Silk, yet-another-django-profiler, these dont give me insight into where all that time is going and where those mutex calls are coming from.Would this help?  Any other suggestions?Edit: Exact same code is hugely faster on a webserver in production.  And its not the Vbox specs, i gave it lots of RAM and 4 CPUs."	mooneater	12.627953	-6.470428	comment	4.0	17.0	1498589236	9.996137
14662420	Debian has the problem that its pack	Debian has the problem that its packages are older, so if you need specific versions of PHP or other runtimes, you are much better off using Ubuntu. It's worth noting that Debian can be made to support PPAs as well, but all this is native to Ubuntu.I can't deny the Ubuntu community is extensive and there are in-depth articles covering setup of just about anything on Ubuntu. Fortunately, owing to the Debian basis, it's fairly easy to convert the same tutorials to run on Debian.	gargravarr	12.744485	-6.63358	comment	4.0	16.0	1498736772	-8.128631
14690864	Django is the camper with the U-Haul	Django is the camper with the U-Haul. Flask is the camper with the backpack. Bottle is the camper with the fanny pack.	MichaelRenor	12.756007	-6.577475	comment	4.0	20.0	1499111152	10.025429
14691212	Solidity has far worse problems than	"Solidity has far worse problems than not being an advanced research language. Just being a sanely designed normal language would be a big step up. Solidity is so riddled with bizarre design errors it makes PHP 4 look like a work of genius.A small sampling of the issues:Everything is 256 bits wide, including the ""byte"" type. This means that whilst byte[] is valid syntax, it will take up 32x more space than you expect. Storage space is extremely limited in Solidity programs. You should use ""bytes"" instead which is an actual byte array. The native 256-bit wide primitive type is called ""bytes32"" but the actual 8-bit wide byte type is called ""int8"".Strings. What can we say about this. There is a string type. It is useless. There is no support for string manipulation at all. String concatenation"	peoplewindow	12.728539	-6.656902	comment	4.0	19.0	1499114497	10.318368
30741453	PHP is now run mainly as fcgi server	PHP is now run mainly as fcgi server. For streaming data that needs some fix on the server side so that the http server doesn't try to fetch the complete page before sending that data to client. And I am not sure how to achieve that.This wasn't a problem 12 years back as then Apache's mod_php had been the default way to serve pages. Your http server was the PHP interpreter.	habibur	12.751504	-6.573102	comment	4.0	16.0	1647770977	10.267846
30821273	There are a lot of great things here	There are a lot of great things here but PHP just needs to embrace static typing (IMHO).Take match expressions plus enums. Incredibly useful. You know what's even more useful? When it's a type error to leave out one of the values. This means when you add a new value you'll get a bunch of errors you need to fix. Technically you can get around this with a default case but I consider that an anti-pattern in most such cases.The Hack type system, particularly the ability to express nullability, is just vastly superior.Named parameters are an interesting one. The Hack equivalent is to use shapes [1]. This is slightly verbose but you can express what shape fields are required and optional. Javascript manages without named parameters using anonymous objects, which is basically the same thing.I did	cletus	12.397785	-6.6441336	comment	4.0	13.0	1648396846	10.256508
30821688	Can anyone recommend books/courses t	"Can anyone recommend books/courses that actually cover ""modern"" PHP?"	skilled	12.772714	-6.642867	comment	4.0	12.0	1648399534	-1.0434651
30850644	Do you have a good resource for lear	Do you have a good resource for learning Rails? I have never learned it.	zakki	12.740014	-6.9804206	comment	4.0	12.0	1648604873	12.376598
30864125	The author describes a process calle	"The author describes a process called ""ontological remodeling"", which is when a change in viewpoint radically simplifies a previously intractable problem. This is the story, not just of Sudoku, but all of mathematics."	markisus	13.451816	-7.4108133	comment	4.0	22.0	1648704775	15.078254
30871975	Prolog is a good language to study i	"Prolog is a good language to study in order to expose yourself to a ""new way"" of algorithmic thinking, although I could not see myself building large systems in it (it has a lot of merit as an embedded language for certain tasks).Python, as useful as it is, in contrast, when I first saw it reminded me of BASIC , after which PASCAL, Modula-2 felt like seeing the light back in the days."	jll29	13.132037	-7.293173	comment	4.0	14.0	1648759308	-12.48746
30903649	How private are Erlang private funct	How private are Erlang private functions? (2018)	todsacerdoti	12.551738	-7.520548	story	4.0	36.0	1649051479	-9.262032
30929456	Need Career Advice/Guidance	Need Career Advice/Guidance	blackmario	12.767507	-6.442725	story	4.0	4.0	1649230569	10.07119
30944137	Ask HN: Closest thing to Django in J	Ask HN: Closest thing to Django in Java world?	rlawson	12.807592	-6.521359	story	4.0	6.0	1649338062	10.060648
30948204	One notable thing is the ruby apps i	One notable thing is the ruby apps in a single .wasm file. This may make ruby CLI apps easier, as well as eventually replacing things like docker or shipping your ruby code to a server.	swlkr	12.63366	-6.9891033	comment	4.0	23.0	1649354884	12.340771
30949229	Does this imply that Rails apps coul	Does this imply that Rails apps could run as WASM server apps and receive a huge performance boost?	alberth	12.765904	-6.936672	comment	4.0	32.0	1649359606	12.34086
30974581	How the TypeScript Compiler Compiles	How the TypeScript Compiler Compiles	knlam	12.350719	-6.8063555	story	4.0	89.0	1649566764	5.1373525
31013152	I'd love to see a modern equivalent 	I'd love to see a modern equivalent to PHP. Something for all those quick and dirty web jobs but without the language deficiencies of PHP.	tonyedgecombe	12.723691	-6.5912304	comment	4.0	14.0	1649847167	10.334656
31084746	Aaron from Deno here, happy to answe	Aaron from Deno here, happy to answer any questions you may have !	AaronO	12.537712	-6.442519	comment	4.0	35.0	1650383309	-11.027921
31085532	big-time red flag that they're using	big-time red flag that they're using deno's infra... wouldn't trust that	wizwit999	12.529183	-6.4438095	comment	4.0	20.0	1650386555	-11.00348
31089478	This same DMCA company (WorthIT Solu	This same DMCA company (WorthIT Solutions) previously tried to DMCA the php docs range function page on behalf of HackerRank [0]. Pretty crazy.[0]: https://www.mail-archive.com/php-webmaster@lists.php.net/msg...	Andoryuuta	12.731878	-6.6222763	comment	4.0	45.0	1650403755	-5.1253767
31089731	I take it you haven't taken a look a	I take it you haven't taken a look at backend lately. Vagrant? Or Docker? Composer? Maybe Drush. Will this plugin break? Is it even still actively maintained? Which database? Are we still on the NoSQL fad? Maria, or postgres or mysql? And does my production host support my language version, and oh god another php vulnerability	robertoandred	12.817951	-6.548944	comment	4.0	17.0	1650404926	10.282254
31151452	Ask HN: Practical examples of runtim	Ask HN: Practical examples of runtime modified software	roeles	12.329196	-7.357197	story	4.0	5.0	1650871050	12.873139
31155143	Dying?“PHP is the most used server-s	Dying?“PHP is the most used server-side programming language globally”https://kinsta.com/php-market-share/	whenlambo	12.7644615	-6.6361947	comment	4.0	20.0	1650896249	10.3252
31160095	"It's a shame the article ends with """	"It's a shame the article ends with ""So as usual, consider not writing Ruby, but if you do, ..."". That's worthless advice and many people, myself included, have Ruby as their most beloved programming language."	pqdbr	12.599369	-7.053096	comment	4.0	65.0	1650918245	12.385472
31170600	I had a call with a recruiter a few 	I had a call with a recruiter a few months back who said that the highest commissions were for Rails devs.	MattGaiser	12.760946	-6.9180417	comment	4.0	16.0	1650994980	12.355421
31173139	I don't want this to come across as 	I don't want this to come across as snarky or unappreciative but note that JIT work on Erlang has been under active develop since at least 2014 (8 years) [0] if not earlier.The current JIT provides about 25% improvement while other languages like PHP have sen a near 200% improvement during that same timeframe.I also realize that Erlang is extremely difficult to increase performance of due to the very nature of it vs other languages.[0] https://llvm.org/devmtg/2014-04/PDFs/Talks/drejhammar.pdf	tiffanyh	12.541925	-7.5163064	comment	4.0	34.0	1651007005	12.902858
31178943	If there is no support for recursion	"If there is no support for recursion, this can hardly be called ""Datalog""."	trurl	13.1687155	-7.104189	comment	4.0	17.0	1651061682	-12.413733
31216302	Regarding modern AI approaches not b	Regarding modern AI approaches not being great at what Prolog does, I'm curious if this will ever translate into an uptick in job postings for Prolog (or, at least, rule-based/declarative) jobs.  One would expect hybrid systems in which the old school approach played some significant role, but I haven't noticed that happening in the market.	daviddaviddavid	13.150437	-7.2965956	comment	4.0	12.0	1651328772	-12.507017
31217090	Flow/Broadway + how nice Ecto is alr	"Flow/Broadway + how nice Ecto is already had me thinking, ""Elixir is super interesting for data engineering."" Explorer and Livebook have me thinking, ""Elixir has the best shot at unseating Python."""	jasonpbecker	12.679529	-7.371874	comment	4.0	16.0	1651335427	12.897206
31224009	Another benefit of legacy niche lang	Another benefit of legacy niche languages, such as Perl, is less ageism. Clojure is a real joy to work with. Ruby is in an interesting phase approaching niche status with correspondingly high rates.	cutler	12.43336	-7.33585	comment	4.0	23.0	1651403538	13.08533
31227876	This looks so cool! Also really inte	This looks so cool! Also really interesting to me that it's written in PHP. Is PHP still the leading tool for applications like this, nearly 20 years after WordPress first came out?	civilized	12.756906	-6.615645	comment	4.0	21.0	1651433117	10.306991
31236562	CourtDrive | Senior Perl Developer |	CourtDrive | Senior Perl Developer | REMOTE| Market | Full-time | CourtDrive.com & CourtAPI.comAt CourtDrive.com and our sister website, CourtAPI.com, we are building solutions that enable law firms and other power courthouse website users to become more efficient by automating daily tasks. We’re based in Los Angeles but have a remote team worldwide (Canada, Europe, Armenia to name a few). We’re looking for a senior Perl developer to help us advance our mission by: building new webservices to integrate with other SaaS solutions, building and supporting our CourtAPI solution, and helping keep our modern Perl codebase well oiled.Testimonial from a team member: “Long story, but I worked there for maybe 6ish months part time a while back. They offered me full time, but I ended up going to a st	mikikian	12.3666935	-6.9801855	comment	4.0	12.0	1651505962	13.1863365
31254075	I don't know what Lisp on the BEAM i	I don't know what Lisp on the BEAM is (and neither does DDG).With regards to LFE, I don't really see the point.  But that might just be because of the kinds of coding I do.  I've never written high performance massively parallel code.  Message passing might have a benefit there (that is what the big win with Erlang is supposed to be) but I'm generally skeptical of  designing the language semantics around the needs of the compiler rather than the programmer.In particular, I don't see what Erlang could possibly do that could not be done by a CL compiler that noticed when a method was dispatching only on the first argument.  The semantics of that are equivalent to the semantics of message passing, and so the code that such a compiler emits could be identical in both cases.  But I don't actual	lisper	12.540234	-7.485266	comment	4.0	20.0	1651614645	-9.035248
31283237	> Widely known because the token nam	"> Widely known because the token names were surfaced to users in error messages, so some common syntax mistakes would produce deeply unhelpful ""Unexpected T_PAAMAYIM_NEKUDOTAYIM"" errors. Hopefully they eventually did something about it, but it was like that for years and was one of the many things that put me off PHP for life.One can like or dislike PHP for a variety of reasons, but surely being put off it for life because a non-English string is exposed to the end user is a bit much."	JadeNB	12.764504	-6.6479087	comment	4.0	12.0	1651830173	10.311272
31284218	Rails does 95% of this out of the bo	Rails does 95% of this out of the box.  Companies need to understand how much their poor technology decisions cost them...	germs12	12.7713785	-6.9301715	comment	4.0	15.0	1651839078	12.348259
31315162	Raw performance is the actual albatr	Raw performance is the actual albatross.IMHO, the low raw performance of Erlang is what's holding it back from mass adoption.(Even marquee Erlang/Elixir users like Discord, still have to use Rust NIFs to overcome the slow Erlang runtime)People have a hard time understanding how Erlang can have such: high concurrency, low latency & tight standard deviations ... when people are just accustom to looking at raw performance benchmarks (where Erlang does quite poorly).While BeamASM (JIT) is very exciting, the reality is that the Erlang runtime has only speed up by ~25% over the last decade, where other languages like JS, Go, PHP have seen >150% speed ups (and Erlang was already considerably slower than these languages prior to their speed ups).	alberth	12.464594	-7.498156	comment	4.0	22.0	1652109274	4.2750297
31315410	As the creator of Phoenix, I've neve	As the creator of Phoenix, I've never written an Erlang program fwiw. That said, I frequent the Erlang docs and most seasoned Elixir developers will do the same because the standard library is a wealth of features, and the documentation while not 2022 polished, remains a remarkable resource.> I don't know what a solution is, but perhaps a concerted effort to create a documentation and library ecosystem that never links back to Erlang would help. And where there are critical systems that use an Erlang library, perhaps rebuilding it in Elixir is in order?This would not be helpful. Erlang has over three decades of features, heritage, and libraries. Elixir helped usher in first class documentation as a core language feature, but that doesn't make rock solid Erlang libraries somehow things that	chrismccord	12.648288	-7.4751334	comment	4.0	27.0	1652110190	12.913747
31354319	I had this experience a couple of mo	"I had this experience a couple of months ago when I noticed a gap in the shopify app ecosystem. I saw some comments discussing this need, found nothing in the store, and had a friend starting a shop that could potentially use it as well.Worked on the app for 2-3 months, polishing, coding, learning tailwind and a bit of formal UI design in the process. Kept thinking ""It's not ready yet. Just needs this hook into the UI. Needs React. Needs a Rails backend. Needs built in email support""... As you can guess, I never shipped.Fast forward 7 months later and I found myself browsing the store again, and yep, found TWO applications in the store that solved the same issue I was attempting to solve months earlier. With installs, and reviews! Got pretty down on myself for a couple of days with the aut"	LVanguard	12.76714	-6.9033184	comment	4.0	13.0	1652364059	1.0204496
31387109	Maude Overview	Maude Overview	memorable	13.078779	-7.3034735	story	4.0	26.0	1652617059	7.1692314
31400803	This is pretty amazing. Its also som	"This is pretty amazing. Its also something that while I'm not surprised, I'm curious (if anyone from Shopify wants to weigh in that'd be even more cool) that they aren't taking the approach that I've seen other large Ruby based enterprises take, which is moving critical functionality to a more complimentary stack, such as Go or Elixir for speed improvements. Is really investing more into Ruby in this fashion better than the alternative?EDIT: I posit the last question as well..a real question. In another words, I guess we'll find out how this goes! I don't know what the ""right"" answer is. I'm more interested in the trade offs they evaluated on this front, or if its such that 500K is just a ""hail mary see what happens"" situation"	no_wizard	12.710746	-6.9883194	comment	4.0	19.0	1652722593	12.365183
31402603	why not just use Crystal https://cry	why not just use Crystal https://crystal-lang.org, it is faster than go, with Ruby like sytnax.	lowwave	12.570105	-7.1974506	comment	4.0	14.0	1652731769	-11.21757
31424978	I don't see any serious attempt at U	I don't see any serious attempt at UIs with erlang. I think erlang processes would provide a great foundation for UI components, but has it even been tried?	lvass	12.534233	-7.5172563	comment	4.0	12.0	1652892784	12.914235
31432956	I think his stack is a little confus	I think his stack is a little confused. He's got HTMX and Phoenix in there.If you are using Phoenix then LiveView is the obvious approach to dynamically updating a page based on server stuff. It's a similar-ish architecture to HTMX, but integrated into the framework. The page is rendered on the server as normal, then when it loads on the client a web-socket is opened to a task on the server (page includes the LiveView JS). Then when something changes on the server, some new HTML generated and then the parts that have changed are sent down the websocket to the client to insert into the page. LiveView is part of Phoenix, leverages Elixir's concurrency, is very performant and a joy to use.HTMX is a way of getting similar functionality but for a conventional server rendered framework like Djan	rkangel	12.893943	-6.829803	comment	4.0	12.0	1652958326	12.708373
31460189	Rails is still “a thing” and is bett	Rails is still “a thing” and is better today than it has ever been.	mostlysimilar	12.774687	-6.929423	comment	4.0	43.0	1653155663	12.362112
31517054	I think Ruby is heading in the same 	I think Ruby is heading in the same direction.	cutler	12.610936	-7.0581646	comment	4.0	22.0	1653564307	12.376956
31517672	"The OP ""What happened to Perl 7"" doe"	"The OP ""What happened to Perl 7"" doesn't say anything about Perl 6!I'm still confused about what happened to Perl 6!  ""replaced with it's new name"" -- googling, that's ""raku"".  So... what was going to be Perl 6 is considered a different language, and not particularly compatible with Perl. But ""Perl 7"" is meant to be less of a departure?It is weird OP left Perl 6 out of the story of ""what happened to Perl 7"".   I guess it's just too painful?"	jrochkind1	12.34884	-7.0620556	comment	4.0	18.0	1653569401	13.168724
31521354	We've still got AT&T and an IBM in m	We've still got AT&T and an IBM in my hometown, there's probably even a few PHP web-shops there too!	Simon_O_Rourke	12.770324	-6.623459	comment	4.0	21.0	1653587409	10.336234
31527243	I think the problem was using Node i	I think the problem was using Node in the first place - most the article is fighting node + NPM nonsense.  I personally try to avoid Node + NPM where I can these days, and use Deno for backend stuff since it is much more sane IMO.  I've never heard of people putting typescript into a .js file - is that some node thing?Modules in the browser for vanilla JS is a delight and Just Works though.  I've started doing it recently and it is lovely - no need for a bundler/compile step.  There are concerns about load performance if there ends up being many modules, but you can do on-demand module loading via vanilla javascript (import returns a promise IIRC) for when that happens.	mattlondon	12.379355	-6.453154	comment	4.0	25.0	1653639534	-10.461444
31564662	> Rails made developers incredibly p	> Rails made developers incredibly productive at building applications, but it was still painful and time-consuming to get them deployed. Developers might spend weeks (or months) just on deployment.I’ve never used Rails. What made it so hard to deploy? I always thought it was similar to PHP: setup a DB, maybe fill in a config file or two, and copy the code to the web server. was that not the case?	MBCook	12.744573	-6.8905296	comment	4.0	14.0	1653952955	12.326845
31575430	"I'm in that boat.  We have a ""micros"	"I'm in that boat.  We have a ""microservice"" code base, and spinning up the whole ""app"" is a Herculean task.Even if you do manage to get it all running, getting the multitude of database with useable data adds an odyssey to your day.We have some parts automated, but ops cannot keep up with all the changes in the micro apps.Back when I worked on a mono-rails app with a React front end, getting things up and running was as simple as running the JS server, rake db seed and then rails s. We used puppeteer to test FE, and rspec for the BE.  Two test suites, but we knew if something was wrong.That same place sometimes had a net outage, and I wouldn't even notice because I was running everything locally.Now I can only get everything running locally with confidence, if I block out an hour or so.Hon"	john_the_writer	12.7123	-6.852598	comment	4.0	12.0	1654034135	12.225235
31582502	The bad:- Web framework is not quite	The bad:- Web framework is not quite on-par with Django/Rails. Particularly with auth/OIDC.- Job market is very sector dependent. Startups just don't seem to use C# whereas big enterprises do.- Some design decisions in the early days seem to prevent some features being added, e.g. structural typing or union types (not certain this is the reason).- Some days, like yesterday, your IDE updates and gets messed up and then it's back to writing full variable names like a medieval monk.- .NET is not really viable for non-server work. There is embedded/desktop stuff but you're going to have a headache outside of servers.The good:- When it's working properly the developer experience is like those dreams where you're flying. Rider or VS + Resharper make typing anything seems an incredibly antiquated	Guid_NewGuid	12.706614	-6.4796944	comment	4.0	26.0	1654094679	10.028392
31643386	Prolog is a deep language and can te	Prolog is a deep language and can teach so you a lot. The main problem is that any prolog program bigger than, say, a thousand lines of code become difficult to debug and understand. There are ways to make things better e.g. avoid impure prolog etc. but it is still problematic.Engineers are always looking for technologies to hop onto. Prolog is niche for a reason: I don’t think Prolog scales. In some ways it is too flexible and powerful.	sidkshatriya	13.143801	-7.2878866	comment	4.0	33.0	1654537250	-12.493659
31644091	Are there any Prolog scripting engin	Are there any Prolog scripting engines or embeddable runtimes? It feels like the kind of thing where you might use it to solve a small part of your problem domain and leave the rest to a conventional language.	kitd	13.137161	-7.2938385	comment	4.0	14.0	1654540856	-12.479085
31661306	Haven't worked much with Laravel, bu	"Haven't worked much with Laravel, but I know it's been around for many years now. I have MVC experience so it should not be so hard to get the basics. Laravel was something I had a very small brush with in a 2018 job. Was really burned by the client so it ended quickly.Also, please excuse me from going on a tangent here. I have some kind of paranoia about picking a library or framework for a job, only for it to fall in demand soon after. Like how can I tell if some framework like Laravel is in the twilight years or not? My MVC of choice in 2012 was CodeIgniter. Nobody really uses that anymore. Not a good thing for my career. I just have an irrational fear of just picking the ""late"" thing again. Like the same fear some people get that every stock they buy in the stock market causes the pric"	spearingthehead	12.799384	-6.63902	comment	4.0	14.0	1654644507	10.335214
31666067	That is a non-goal. One of the bigge	"That is a non-goal. One of the biggest advantages of Deepkit and its runtime type feature is that you can reuse TypeScript types throughout your whole application stack. This does not work with Fastify and Prisma. Let me give you an example.Let's say you build a little user management app and need a `User` type. So you define one:  interface User {
    id: number;
    username: string;
    created: Date;
    email: string;
  }


If you want to build a REST API that returns that user, you can just do that:  router.get('/user/:id', (id: number & Positive): User => {
    //...
  });


Deepkit automatically serialises the object into JSON using the type information in `User`.You want to accept a User object for creating a user in the database? No problem:  router.post('/user', (user: User): Us"	marcjschmidt	12.369339	-6.8223205	comment	4.0	24.0	1654689998	-10.465841
31667419	Typescript people pretend to love ty	Typescript people pretend to love type system and its benefits while ignoring languages like this which has type designed from ground up. If Elm had some ways to easily preserve object reference (something like `mut` something or reference type like in Webassembly), that would unlock a lot of js interop stories rather than just `port`.	Existenceblinks	12.949495	-7.6365333	comment	4.0	22.0	1654696602	-12.718642
31722540	Sophisticated sudokus as playful pro	Sophisticated sudokus as playful proof practice	ibobev	13.450326	-7.4097266	story	4.0	40.0	1655107168	15.075675
31722117	The only thing I ask to Deno is to m	The only thing I ask to Deno is to make typescript development as immediate as running python.I'm exhausted by webpack and similar	sscarduzio	12.410628	-6.477853	comment	4.0	31.0	1655103309	-10.807483
31727607	I don't use Rails anymore, but I did	"I don't use Rails anymore, but I did use Rails from pre-1.0 through version 3 (and played with later versions a tad).The best thing about Rails is that it delivers a complete package. Rails doesn't come along and say ""Oh, you need to use JS packages and minify your CSS and compile your SASS/SCSS? That's an exercise left to the reader. Good luck dealing with npm or yarn, choosing between Bower/Gulp/Grunt/Webpack/Browserify, good luck figuring out how to integrate Node into your build process, good luck figuring out how to add caching, good luck with async background task runners, good luck sending email, good luck with validation, good luck with testing, good luck with all the things beyond the core competency.""That's one of the things that made Rails so powerful and continues to make it gr"	mdasen	12.750816	-6.886112	comment	4.0	14.0	1655137146	12.341007
31728144	edit: to down voters: please educate	edit: to down voters: please educate me and not just down vote because you disagree with my question.---Every tiny rails app that uses rspec ends up with +1hr test times due to tight coupling between activemodel and the db connections.Do you know of any good blog posts the describe how to do rails testing at scale?> Companies doing grunt work style web development don't waste their time on flavor-of-the-month.js.Rails devs have to deal with DHH's-flavor-of-the-month.coffee (coffeescript, asset pipeline, webpacker, import_maps)	itake	12.679128	-6.955124	comment	4.0	30.0	1655139183	12.342169
31729039	> But I imagine Rails is being incre	> But I imagine Rails is being increasingly dismissed by newbie developers as being obsolete and not-cool. Mature companies may realize it's in their best interest to communicate that their boring-tech works just fine and that they have no plan on changing to cool-tech. If it's true, then someone's got to say it, right?That's precisely the problem. If engineers were a dime a dozen, then Rails could be a great choice. Boring tech is a great place for businesses to be, in theory. Back here in reality, finding engineers is pretty hard, and the ones who we can find, are all only interested in working with Cool New Shiny Toys. If we posted a Ruby ad, we wouldn't get any bites. It's not used here.Boring tech is great, until it becomes a noose to hang yourself with.	solatic	12.738758	-6.9536157	comment	4.0	16.0	1655143149	12.368941
31729164	checkout elixir/phoenix. Its almost 	checkout elixir/phoenix. Its almost as productive as rails while having performance within the same realm as go.pros: imutable data types. ruby like syntax. similar codebase organization. super fast. more modular than rails. the websocket system is way faster to develop in and deploy.cons: no runtime metaprogramming but you do have a sophisticated macro system. not as many drop in libraries. not as many jobs for it yet.	cultofmetatron	12.680888	-6.987487	comment	4.0	20.0	1655143768	12.326759
31729857	Some languages and ecosystems can be	Some languages and ecosystems can be more helpful, though, even if none can save you. Rails is memorization-heavy and doesn't have static types to aid in navigation & reading. Its runtime auto-magic even resists grepping. Auto-imports mean you don't even get a decent list of which sources are contributing to a given file's behavior.It's also the case that different teams can write it pretty differently, depending on gem choices and which Rails features they lean on. Plenty of other languages and ecosystems are like that, too, but all the above stuff means Rails is exceptionally bad, in that regard.	corrral	12.710358	-6.970524	comment	4.0	12.0	1655146169	12.348152
31742994	Now they just need to bring back wil	Now they just need to bring back wild eep and sosumi.	Alex3917	12.509405	-7.4680786	comment	4.0	12.0	1655228168	12.894265
31767273	You are unaware of how much better i	You are unaware of how much better it is with the other ecosystems. Probably all of them except the ones controlled by Apple, Oracle and IBM.You want to know what's better than having actual MS developers interact with your issue on GH? Being able to submit a MR yourself and actually have that MR be merged in within days of it being good to go.That's not just a dream, that's the standard way of operating for most large open source ecosystems. If you solve a known issue with a clear well considered merge request, and you've gone through all the prescribed steps your MR will get merged.From personal experience I've landed MR's in the Ruby interpreter, in the Rust compiler and in the Rails framework. All as a complete outsider with no prior introductions to the team. Just be polite, follow th	tinco	12.657608	-6.9946404	comment	4.0	39.0	1655393641	12.346744
28828435	How to Solve the Sudoku Puzzle with 	How to Solve the Sudoku Puzzle with Programming	todsacerdoti	13.445893	-7.4071064	story	4.0	17.0	1633961236	15.079835
28874006	As far as I've seen, Crystal's only 	As far as I've seen, Crystal's only merit seems to be is that it's more or less Ruby but statically typed and compiled. In the interest of shedding my ignorance maybe someone can tell me why it's worth trying? From my observation it's features don't seem that differentiated from other modern languages like Rust or Zig.	hresvelgr	12.593889	-7.2650323	comment	4.0	15.0	1634269624	-11.232056
28874671	"Earlier this year he tweeted: ""http:"	"Earlier this year he tweeted: ""http://remoteok.io is a single PHP file called ""index.php""""https://twitter.com/levelsio/status/1381709793769979906This could theoretically be the most complex PHP file you have ever seen, but it's probably not. The message here is that's not what counts (number of files, complexity etc.). The message is: create something of value. If one PHP file does that, great."	janvdberg	12.76591	-6.6373034	comment	4.0	16.0	1634276255	10.300405
28875655	Yes, Cristal looks like a very clean	"Yes, Cristal looks like a very clean and well designed language...The problem is that being an impressive language is not enough these days.First, tooling is needed, especially good IDE. Nobody is going to memorize names of all the methods in 100K code base and do refactoring by hand or using ""find and replace"". And debugging story, yes, one can use gdb, but it is not really very convenient. If I were Crystal creator I would concentrate on a well featured IntelliJ plugin.Secondly, integrations and support for ecosystem - databases drivers (looking on the docs there are only for MySQL, Postgres and SQlite), that's definitely not enough. Caches (like Redis), message brokers (traditional and log base like Kafka, etc.). In the real live application those are important points. I guess one can u"	piokoch	12.623852	-7.25209	comment	4.0	15.0	1634287121	-11.224514
28876063	Too late to stop Rails going out of 	Too late to stop Rails going out of favor of developers. Too late to retain it's user base or grow.	DeathArrow	12.760378	-6.920334	comment	4.0	15.0	1634291895	12.343506
28893163	> I made an exception for TypeScript	> I made an exception for TypeScriptI was nodding my head until TypeScript. I still don't like it even after years of people telling me it's the future. Maybe this is what it feels like to be older.	dimgl	12.380299	-6.8050866	comment	4.0	18.0	1634433992	-10.4364
28893187	Nah you're probably just wrong. Gene	Nah you're probably just wrong. Generally speaking it's the older more experienced developers who demand typescript in my experience.Writing raw javascript is genuinely painful, I literally don't understand how people can even do it. Like, how do you even refactor code safely?	Tesl	12.356437	-6.7750735	comment	4.0	13.0	1634434308	-10.439013
28905252	The restart behavior can be a proble	"The restart behavior can be a problem when there's high concurrency, long-running requests, or even worse, both.First, the ""opcache.force_restart_timeout"" setting kills scripts upon reaching a timeout, independently of the well-known ""max_execution_time"" php.ini directive, but only from time to time. It is unpredictable and doesn't leave a comparable message in the error_log.Also, for a long time in the PHP 7.x days there was (still is?) a race condition in the SHM-to-file-and-back-to-SHM sequence that caused weird errors in programs that were executed at an unfortunate moment during the restart. A single bit would flip in a class name, function name or filename, and the script with the bit-flipped name would be cached instead of the original. Imagine the_post() in WordPress suddenly chang"	kijin	12.679459	-6.5175776	comment	4.0	15.0	1634563871	10.2853985
28908133	This actually reminds me a bit of CG	This actually reminds me a bit of CGI ( https://en.wikipedia.org/wiki/Common_Gateway_Interface ) or its later variants.Personally, i think that PHP's request-response workflow is infinitely easier to deal with than that of servlets in Java or whatever abstractions other technologies out there have, even if only when scaling isn't a concern (which is perfectly passable for some systems out there).My ideal language for getting things out the door would be something a bit like PHP, but with the standard library of .NET/Java (LINQ or Streams in particular), the wider ecosystem of Python, simplicity of Go and a decent type system on the top of it all, that'd process requests much like PHP does (or at least would only make you think it does, though abstractions that are leaky are arguably worse 	KronisLV	12.689555	-6.6315026	comment	4.0	12.0	1634578360	10.25197
28924785	It's funny to hear someone say so ma	It's funny to hear someone say so many nice things about Akka.I work with Akka streams, actors and http every day and and while I agree that Akka is really well documented, incredibly powerful and as you say polished, it is also the bane of my existence. It has made what could have been a simple application a rather painful experience for newcomers and even very senior engineers. The complexity of a framework like Akka is a huge barrier of entry for engineers and hinders development more often than it helps.This is all obviously very subjective.	binwiederhier	12.338898	-7.422871	comment	4.0	25.0	1634684271	12.727129
28943095	This dubious 78% statistic has been 	"This dubious 78% statistic has been discussed to death in https://news.ycombinator.com/item?id=28510520.The submitted title is badly editorialized and leaves out the actual point of the article: only ""1% on PHP 8"" despite a whopping 78% total, if we take the dubious statistic at face value.For the record, the submitted title is ""78% of the Web Powered by PHP"" at the time of this comment."	zmw	12.781296	-6.6322026	comment	4.0	12.0	1634816987	10.339065
28966416	It is. I'm working on a distributed 	It is. I'm working on a distributed IOT project (think 40 raspberries talking to each other).From my superficial understanding, this would be an ideal use case for Erlang. I guess an Erlang environment would naturally lead to a much more elegant solution.The problem is, that nobody really speaks it here or has any experience with it. That's why we chickened out and used Go and C++ instead.I guess a lot of developers have the same problem. Erlang is intriguing, but other languages are the safe choice.	zeroc8	12.557732	-7.494494	comment	4.0	17.0	1634973824	12.866965
28966874	I fell in love with Erlang. I always	I fell in love with Erlang. I always prefer languages where the syntax is very simple because you don't need to know that much when reading the code.In fact, Erlang was so simple I was able to read it before I even knew what it was. I learned it by digging into the RabbitMQ source code.Pattern matching with function branching and case really changed the way I develop in every language. Just have a linear instruction flow, no more multiple returns, no more if/else, just read the code and when you're at the end of the function, you know what it returns.Then, I fell in love with Elixir. The only language where macros aren't just C's #define to replace text. You're working directly with the AST, and that's just obvious to me now it should be done like that. Mix is also a game changer for the E	linkdd	12.626362	-7.486141	comment	4.0	26.0	1634980713	12.9240675
28967681	I have no idea how people solve cons	I have no idea how people solve constraint problems without prolog and clpfd/z. these types of problems seem to be everywhere, and yet prolog still has a very small user base, how come?	oolonthegreat	13.147338	-7.293542	comment	4.0	19.0	1634991220	-12.4915905
28970834	It really should have Typescript as 	It really should have Typescript as well (optionally, that is)	anarchy8	12.34484	-6.786674	comment	4.0	15.0	1635012281	-10.468475
28981504	"""Get a Product Job (May 2020 - May 2"	"""Get a Product Job (May 2020 - May 2021)
This time the main objective was to learn something new by doing. I chose Ruby on Rails. It's a great framework to build websites quickly.""Choosing Roby on Rails in 2020 as a ""new framework"" for web development ... sheesh."	mfollert	12.73472	-6.8502545	comment	4.0	21.0	1635106922	12.342532
28996418	I think other than Rails, it is also	"I think other than Rails, it is also worth considering the other full-stack frameworks: Laravel, Django, and Phoenix.I've spent the past year or so on and off building things in Phoenix. Elixir is an amazing programming language, and LiveView is pretty cool. If you are building something complex, I think Elixir and Phoenix solve a bunch of tough
things for you out of the box, thanks to the BEAM. However, I find that the sort of websites I like to make are not complex and pretty much are content-based with a tiny bit of CRUD.Because of this, I've lately been exploring Laravel. PHP is pretty much _the_ language for content-oriented sites, and it isn't going away anytime soon. I've been looking into CMSes like Statamic and CraftCMS and of course Wordpress. Laravel seems to have as big of a co"	throwlar2	12.729506	-6.577727	comment	4.0	17.0	1635222673	10.301185
29016175	Ex-Facebooker here.Hack isn't going 	"Ex-Facebooker here.Hack isn't going away. Ever.It's actually quite pleasant to develop in. The tooling now revolves around VS Code, which I personally don't like. I wish they'd based this on a Jetbrains core.One thing I learned to love with the Hack type system is that nullability is a distinct type (eg you can assign a T to a ?T but not a ?T to a T; ? here means ""nullable""). The static type checking is smart enough to figure out here:    function foo(?Foo $foo): void {
      if ($foo is nonnull) {
        bar(foo);
      }
    }

    function bar(Foo $foo): void {
      ...
    }

that the null check changes the type from ?T to T within that block.There's literally no reason to justify the massive investment a complete rewrite would be, like literally none. It's not even close.HHVM and Ha"	cletus	12.543803	-6.767976	comment	4.0	39.0	1635355159	-8.974533
29016201	Wow, that's almost the same thing th	Wow, that's almost the same thing that Typescript is to Javascript. Is all of that openly available to outsiders? If it is, I think I might to rethink my stance of php that I had for the last 15 years.	golergka	12.386614	-6.716116	comment	4.0	13.0	1635355268	-10.377248
29032816	Deno Deploy Beta 3	Deno Deploy Beta 3	amadeuspagel	12.524237	-6.4557986	story	4.0	16.0	1635459906	-11.051782
29058645	Just don’t forget to install the cor	Just don’t forget to install the correct Ruby version, of course keeping the system’s Ruby intact, so better use RVM for that, and of course you shouldn’t install random gems globally, so better do the whole thing via Bundler, and of course don’t forget to check in the Gemfile.lock too.Or you can just use bash and keep your sanity.	aaaaaaaaaaab	12.620907	-6.9498672	comment	4.0	21.0	1635701484	12.3042
29099759	Wow. More impressive work by the Typ	Wow. More impressive work by the Typescript team!AFAICT this will have the most impact on folks using Typescript with Redux stores and similar dispatchers.I know I would have liked having this feature back when I was doing that work.	maxfurman	12.552858	-6.6653037	comment	4.0	14.0	1635970844	8.490757
29100076	> PHP + MySQL + a bunch of shell scr	> PHP + MySQL + a bunch of shell scriptsThat's a typical 2010-era stack.We're almost in 2022, things have evolved.	ur-whale	12.810999	-6.4932227	comment	4.0	17.0	1635972539	10.243839
29116057	On the future of Akka and Lightbend	On the future of Akka and Lightbend	yiksanchan	12.338346	-7.4252977	story	4.0	89.0	1636093603	12.693526
29140507	Keep in mind TypeScript is just type	Keep in mind TypeScript is just types, an added compile step, and branding.The ECMAScript spec will probably supersede TypeScript in the near future anyway. This has happened historically with other dead Javascript dialects (example: when classes were included in ES6).	geenat	12.357989	-6.7975264	comment	4.0	13.0	1636300708	-10.436067
29162462	I'd like to see Ruby deprecate some 	I'd like to see Ruby deprecate some of the rarely used standard library items.For example, does Rinda and GDBM need to be in the standard lib? Maybe they're better suited as stand-alone gems?Similarly, I think it should stop bundling some gems.I see they are moving some gems from 'default' to 'bundled', which I guess is some sort of deprecation or demotion -- that's great!**I'd also like to see them move development onto Github, that should make it easier for more people to participate.	sandstrom	12.659737	-7.0004067	comment	4.0	13.0	1636469442	12.362945
29166355	Deno 1.16 Release Notes	Deno 1.16 Release Notes	exists	12.519718	-6.4463797	story	4.0	51.0	1636486581	-11.048899
29171472	PHP Is Killing Python	PHP Is Killing Python	pelasaco	12.641064	-6.687698	story	4.0	4.0	1636522979	10.3478
29178232	A History of the Rubinius Ruby JIT	A History of the Rubinius Ruby JIT	chrisseaton	12.601229	-7.0519195	story	4.0	133.0	1636568493	-5.3659873
29181015	Why the negativity? It’s pre-release	Why the negativity? It’s pre-release software. The landing page and invites are for people already interested in its early development, not to try to convince you to become interested.That said, there’s tons of public information about Bun on the creator’s Twitter[1], a lot of it quite interesting, if more curious folks want to find out more. And I wrote a short list of things I find compelling[2] in the related post about another of Jarred’s projects, for the Twitter-averse.1: https://twitter.com/jarredsumner?s=212: https://news.ycombinator.com/item?id=29180483	eyelidlessness	12.447174	-6.4385486	comment	4.0	26.0	1636579328	11.041931
29200109	The discussion of Ruby could use a m	The discussion of Ruby could use a mention of Enumerable.https://ruby-doc.org/core-3.0.2/Enumerable.html	DFHippie	12.481606	-7.098787	comment	4.0	33.0	1636730638	12.379554
29211479	I've been thinking about learning Cr	"I've been thinking about learning Crystal recently and using it for a personal project. However, now that I have lots of experience with Node.js, Golang and others, I'm torn between the ""use what's mature"" and ""learn a new language"" decision. Sure, I'm using Crystal now to learn a new language, but what if this becomes a serious project? Anyhow, I agree with this blog post somewhat but it's always good to expand your repertoire of tools."	dimgl	12.630573	-7.2705083	comment	4.0	14.0	1636824438	-11.25315
29255557	TypeScript needs to be compiled, rig	TypeScript needs to be compiled, right? So what use is a configuration file if I need to run it through the build pipeline?The point of having configuration is to gain the ability to configure software without rebuilding in my mind. Maybe I'm missing something.	progre	12.358014	-6.748432	comment	4.0	12.0	1637168234	-10.451661
29257512	"I was enamored with ""Things of Scien"	"I was enamored with ""Things of Science"" when I was a kid. So much so I began collecting them off eBay, scanning the little science booklet and sharing them for posterity.As such I love DIY science like this.Regarding crystals, I have scanned in and cleaned up two projects relating to crystals:http://underlandia.com/index.php/2017/09/24/things-of-scienc...http://underlandia.com/index.php/2020/08/21/things-of-scienc..."	JKCalhoun	12.639113	-7.2553205	comment	4.0	13.0	1637176391	-11.209971
29262432	"Opportunity cost.Those ""few dozen ho"	"Opportunity cost.Those ""few dozen hours"" reading PHP docs and tinkering could also be used to learn Python, Ruby, or Javascript, each of which are almost certainly better choices with broader applicability and more modern ergonomics.Python gets you web backend + ML, Javascript gets you web backend + web frontend. Ruby gets you a multi-paradigm language with nice ergonomics and cats. PHP gets you job offers customizing Drupal and Wordpress websites.If you already know a ""scripting language most popularly used for websites"", then you could choose to pick up Rust, Nim, Go, Swift, or Kotlin instead. It's much better to have a new kind of tool in your belt than a second hammer.The world is full of so many choices. PHP has a lot of incredibly compelling alternatives. Unless your job demands PHP,"	echelon	12.7146	-6.645668	comment	4.0	12.0	1637215521	10.3548565
29262942	Why would you pick any other languag	Why would you pick any other language instead of PHP for web dev?	Darmody	12.727258	-6.6421456	comment	4.0	30.0	1637220147	10.332522
29262967	The best part of PHP is the developm	The best part of PHP is the development model. You copy some files to a server, and load the page. That's it. It is really hard to beat how easy it is to iterate, even if the language is truly terrible.	nick0garvey	12.7588005	-6.633247	comment	4.0	28.0	1637220406	10.318323
29263408	I used to believe this, but...But th	I used to believe this, but...But that's just not true.All the things you mentioned are a yum/apt/nix/pacman/ install away on Linux, and probably as simple to install on macOS. I'm sure Windows has installers for these, too.So, it's no harder to develop in them than it is in PHP.You could argue it's cheaper because you don't have to pay for a shared hosting provider to host your files. However that's a bit moot since even back in the day there were LAMP stack Vagrantfiles that would automate this local setup.Also, when speaking about dev velocity or time-to-start: you forgot JavaScript, which probably has much greater development velocity than anything else.Furthermore, PHP is rarely just PHP in production. PHP also comes with various runtime modes (CGI, FPM, etc), .htaccess rules (or ngin	spoiler	12.75559	-6.597582	comment	4.0	25.0	1637224887	10.306666
29262954	Hey if you don't like PHP please don	Hey if you don't like PHP please don't use it. I 'd hate to bring the culture of tiny packages, fake compilers, transpilers and weekly trends to PHP. Personally I use php because it works well and fast and still supports my 10 year old websites, not because it's cool.	cblconfederate	12.76354	-6.636913	comment	4.0	28.0	1637220260	10.321001
29263544	As someone actually did (re)learn PH	"As someone actually did (re)learn PHP (last time I used PHP was PHP4) last year for a gig, I would probably say no.  Don't get me wrong, it is a much better language now and Laravel is a great framework. With the two you can no doubt build fantastic applications.  But I didn't feel it was 'better' in any way than anything else. With Python, Go, Rust, Elixir, TypeScript etc. I can all point to a thing they do and say ""if you are solving this sort of problem, then this language is the right choice because of X, and worth learning"". With PHP I just couldn't find that."	dagw	12.776705	-6.6435204	comment	4.0	12.0	1637226288	10.345944
29265130	I'll be honest. I really don't like 	"I'll be honest. I really don't like PHP. However when I was running a coding workshop, very frequently people would ask:""How do I make a web page talk to a database?""I'd say: Well, you know that HTML file? Rename it to become a PHP file and you're almost there!As pretty much all cheap hosting already offers support for PHP (and MySQL for that matter) this would almost always work.I would love to be able to do this with NodeJS, but imagine teaching that to an absolute beginner. The conversation would have to begin with hosting platforms / SSH / server management / reverse proxies etc...."	cjdell	12.709099	-6.555085	comment	4.0	15.0	1637242221	10.235393
29264594	If you don’t manage your own servers	If you don’t manage your own servers I don’t think you can call yourself a professional developer. “My hosting provider doesn’t let me do X” is a lame excuse with cloud servers in the $10/mo range.I do a lot of work with PHP, both legacy and new code. The number one mistake I see with PHP sites set up by amateurs or cheap hosting services is running Apache+PHP on the same server as MySQL or Postgres. Separate those and performance and stability problems go away. That’s because relational databases consume as much memory as they can get, not because PHP is inherently slow or unstable.	gregjor	12.770428	-6.5855575	comment	4.0	15.0	1637238024	10.270663
29273160	Mostly, I really want Rails in a typ	Mostly, I really want Rails in a typed language.	mwint	12.605561	-7.0241776	comment	4.0	12.0	1637289432	12.368378
29278496	It's not a pleasant experience to co	It's not a pleasant experience to come on board and deal with a typeless, styleless, inconsistent mess.  And that's what Ruby on Rails will create, unless you spend an inordinate amount of effort on adding back all the tooling you need to make functional software in large groups.Even then - there's no real path to a mature and maintainable language/framework. In my area (Atlanta) we're seeing a glut of RoR devs available because a lot of the large employers have given up and shut down the RoRs projects in favor of anything more suitable to teams in the 15 to 500 engineer range.  Usually this has been typescript/java/.net.Even within the RoR guys I know - a LOT of them are trying to get out and work with something else (several folks I know are moving to elixir)	horsawlarway	12.701801	-6.9557066	comment	4.0	14.0	1637337586	12.338761
29285024	I recently implemented a similar (si	"I recently implemented a similar (simpler) format https://baremessages.org/ in ruby.First thoughts are:ION pros:
- easy to skip around while reading a file
- no need to write a schema
- backed by amazon so major langs will have impls 
- good date support
- better concatenation, probably better suited to logging than bareION cons
- what's the text format even for?BARE pros:
- schemas keep things tightly versioned
- smaller binaries (not self describing like ion)
- simpler to implement so tons of devs have impl'ed for their favorite lang
- better suited to small messages (think REST json api)BARE cons:
- no skip read
- no date supportI might do an ion ruby implementation too, to really feel out the difference."	n8ta	12.518281	-6.803478	comment	4.0	14.0	1637374809	12.350836
29300872	I got tired reading that. How about 	"I got tired reading that. How about letting me just push php files via ftp to some outdated Debian machine. All these layers of complexity made me swear never to touch ""devops"" again."	rightbyte	12.749286	-6.571027	comment	4.0	15.0	1637537513	10.3133545
29305622	Django is good for those who have us	"Django is good for those who have used it a lot.For beginners, there are much better alternatives and, frankly, Django way of development is severely restricting.Starting off with an API backend and a React/Angular/Vue front end, allows new developers to learn better abstractions (and not merge front ends and back-ends)The very idea of ""sending UI code to the front end for every request"" is unsuitable for medium to large projects. But, if you start building smaller projects with an vertically integrated system like Django, it becomes increasingly difficult to think about larger projects."	kumarvvr	12.822527	-6.5012703	comment	4.0	13.0	1637584192	10.08446
29341482	As a JS dev it’s nice to see php imi	"As a JS dev it’s nice to see php imitate some newer js syntax like nullish coalescing, arrow function, … helps me to switch between the languages.It really needs a way to declare type of small data structures though, in a very concise way (no class boilerplate, for performance eg. going through 10000’s of entities).PS : on the other hand I’m starting to dislike how languages become ""designed by committee"", and lose the purity of the original design.( thinking of JS mostly here with its gazillion rfcs)"	NaN1352	12.607715	-6.5464926	comment	4.0	12.0	1637849419	10.221338
29344330	I haven't written PHP in years but I	I haven't written PHP in years but I get the feeling from this release that they are taking inspiration from TypeScript and JavaScript.	tarokun-io	12.652848	-6.562982	comment	4.0	17.0	1637869400	10.312761
29345265	One comment I heard at a programming	"One comment I heard at a programming meetup recently was ""I hate how frameworks like laravel have brought PHP back in to popularity when we had the chance to finally kill it off"".I do wonder if there really was value in salvaging PHP when we have a wealth of other languages and frameworks that do a perfectly fine job without any of the legacy mistakes sitting around."	Gigachad	12.776727	-6.634027	comment	4.0	57.0	1637876623	10.3257885
29346098	There isn't a language that can repl	There isn't a language that can replace php in 2021.  Javascript doesn't have the size of build-in library.  Golang is compiled and limited, blank spaces/tabs will kill a Python program.  Ruby /rails is slower.  All are harder to host.  What could you replace php with?The tales of legacy mistakes holding back php are things with no basis in reality.  What legacy mistake holds php back?  Method names/parameter ordering?When I started with php in 2001 those elite programmers at meetups were looking down at php because Java was cool.  In 2003 those elite programmers thought php should die because asp took over.  PHP kept going along quietly taking over the web until the facebook movie came out making PHP cool for a moment.  Those elite programmers decided PHP was too mainstream and the why PH	ipaddr	12.755985	-6.6406364	comment	4.0	33.0	1637883568	10.3399
29348950	Crystal Detector	Crystal Detector	ofou	12.63457	-7.2488036	story	4.0	28.0	1637922072	-11.166361
29358933	Why in 2020 should I learn Prolog?	Why in 2020 should I learn Prolog?	khaled_ismaeel	13.149351	-7.298245	story	4.0	12.0	1638006177	-12.483928
29436902	No one wants a CLI in Ruby, and if y	No one wants a CLI in Ruby, and if you look arround there is no popular CLI written in Ruby it's one of the worse language to write CLI in because no one has the Ruby runtime installed on their machine, then you have different architectures, different OS etc ... Go is way way better than Ruby on that topic.As for complex data structure, I don't understand exactly what do you mean, as if a dynamic language would model that easier than a strongly typed language.When you get a single binary for CLI it's hard to use anything else, the pain of using pip for anything python based.	Thaxll	12.41449	-7.0507016	comment	4.0	15.0	1638573696	-9.612435
29442672	"Interesting!I noticed ""It can also b"	"Interesting!I noticed ""It can also be used for annotating other kinds of text"" and wanted to experiment with being able to number specific letters in a string.More specifically, SMILES is a linear molecular structure notation. ""O"" is water, ""COO"" is ethyl alcohol, ""c1ccccc1"" is a benzene ring, and much more. (See https://en.wikipedia.org/wiki/Simplified_molecular-input_lin... .)I want to annotate atom positions in the SMILES string. I currently do this with (""pip install smiview"") text over the string, as this example using phenol.  1 23456 7
  c1ccccc1O

I wanted to try it with ruby so I used:  <ruby>
  c<rt>1</rt>1c<rt>2</rt>c<rt>3</rt>c<rt>4</rt>c<rt>5</rt>c<rt>6</rt>1
  </ruby>

The ""2"" is located over the center of ""1c"" instead of over the second ""c"" like I wanted.How do I ge"	dalke	12.369224	-7.0333304	comment	4.0	27.0	1638640458	12.364441
29443386	It can’t be emphasized enough how go	It can’t be emphasized enough how good IEx is.Maybe it’s because it is my first experience with a language like Elixir, but man, it just feels like I’m living inside the program while it’s running in a way that an IDE debugger doesn’t. It’s so cool and so powerful.	ketzo	12.674964	-7.4363623	comment	4.0	13.0	1638644660	12.927343
29443555	When I read the headline I thought i	When I read the headline I thought it's some weird new syntax for embedding Ruby code snippets in HTML.This is definitely not going to be confusing... /s	nyuszika7h	12.489312	-7.009381	comment	4.0	18.0	1638645930	12.380995
29473602	Does anyone know how Python/Django c	Does anyone know how Python/Django compares to something like Elixir/Phoenix?	marcus_cemes	12.7723675	-7.1042213	comment	4.0	12.0	1638891637	12.811613
29479157	OT, but considering the audience...I	OT, but considering the audience...I have a side project / website that I want to work on. I have over a decade experience with PHP and JS in various forms, but am willing to try something new.The idea of compiled languages don't appeal to me, so am not really interested in Go, Rust or Dart. It looks like either Django, Elixir, or PHP - but am open to other ideas.Anyone with enough experience to tell me confidently that it is worth Django or Elixir? Anyone can give a five line overview of the differences vs PHP or Node?And along the way, am I the only one who is confused by what seems too many environments and package managers? (from venv/virtualenv[1] to pip/easy_install to wheels/eggs)[1]: https://stackoverflow.com/q/41573587/87520	sam_goody	12.713506	-6.634477	comment	4.0	12.0	1638916864	10.289064
29531392	Never thought I'd see the day where 	Never thought I'd see the day where anyone was advocating using Perl for cryptocurrency purposes, let alone cryptography.I know, I know, it's not Perl anymore, but still. Life is stranger than fiction.	xyzzy_plugh	12.330034	-7.030593	comment	4.0	18.0	1639329393	13.174432
29540813	Hi fellow readers of HN,I am Josef, 	Hi fellow readers of HN,I am Josef, a full-stack developer, a formal Ruby Linux packager at Red Hat, and an author of Deployment from Scratch (which is this post about!).After working at Red Hat and technically leading a start-up (of which I was the primary production engineer), I decided to write down a resource I felt was missing on the market:A book that gives you the confidence to deploy your first application focused on fundamental, transferable, and long-lasting skills rather than tools of the day:* You'll learn about networking, Linux, systemd, deployment strategies, web servers, application servers, databases, and containers.* You'll be able to deploy Rails or Django applications (or anything really) together with production PostgreSQL and Redis databases.  All automated with just 	strzibny	12.771345	-6.484426	comment	4.0	21.0	1639411572	12.245675
29541337	Types in TypeScript are great but if	Types in TypeScript are great but if JavaScript ever wants to add types it has to be something like a real programming language types in which you can use types in runtime as well. Like in a catch clause I can assert the type of the error and do things with it once that assertion is done. Many other useful things when types space and runtime space are not totally separate.ES4 was the first shot at adding types to JavaScript which failed due to how big the ambitions were. I'm not sure if there is any more appetite for adding types to JS tho.In very very serious big applications like a 3D editor you can fall back to WebAssembly and use your favorite typed language. For smaller apps TypeScript is good enough. This way JavaScript stays simple and lean.	msoad	12.352994	-6.7774334	comment	4.0	12.0	1639414359	-10.456687
29556278	Konsole is not actually 50kb, you ne	Konsole is not actually 50kb, you need to include the libraries it imports to do an apples to apples comparison.  What is going on here is tabby is the equivalent of statically linked + a virtual machine OS called a browser, while konsole is not.  To properly compare the two, you need to compare source code size, as if you downloaded tabby and ran it an browser.  To really compare them properly, you'd also need to make the typescript compiled into equivalent JS VM assembly.  There you'll find them probably to be significantly closer in size	novok	12.332479	-6.651392	comment	4.0	14.0	1639510431	5.42302
29574712	I don’t like how they use Rails to a	I don’t like how they use Rails to advertise Hey.	Ecco	12.772211	-6.9283013	comment	4.0	14.0	1639627781	12.362582
29575319	I'm pretty experienced in Node and R	I'm pretty experienced in Node and React, and discovering Rails recently has been an absolute joy. I feel like I've made the opposite journey from everyone else on HN, because I joined the programming community _after_ the big RoR hype and during the Node/React hype.Trying out rails, I understand how much magic is involved here. Because I've had to build all this crap myself - many, many times over. Complicated things become simple, and tasks that usually make me sigh (add a new data point and add it right through Knex, Hapi models, routes, redux actions, redux store, dispatch/selector and template) turns into a SINGLE COMMAND. Sold :)Very excited about this new release!Edit: I wrote a blog about this a while ago btw, but there are many others pieces out there like it: https://nikodunk.com	nikodunk	12.791582	-6.6947074	comment	4.0	20.0	1639633113	12.30021
29575734	I’m with you. Writing and testing Ru	I’m with you. Writing and testing Ruby is a blast, and it’s so easy to write clean, readable code with it. Performance isn’t great, but it’s just so nice. Rails adds a lot of nice magic on top that makes it even better.JavaScript (even with TypeScript) and frontend frameworks are…quite a journey by comparison.	nunez	12.692561	-6.951859	comment	4.0	15.0	1639637598	12.347359
29577046	If you're doing user-supplied CSVs, 	If you're doing user-supplied CSVs, definitely... but if you are ingesting CSVs from a known source with known format (<insert audible sigh here>) it can definitely make sense to use a high-speed optimized ingester.One might wonder if it might be worth the time to look into optimising the runtimes of various languages. I took a look, all operate on naive byte-by-byte scanning, and all sans PHP are written in the respective language which means any form of SIMD optimization is right off the table (okay, maybe something could be done in Java, but it seems incredibly complex, see https://www.morling.dev/blog/fizzbuzz-simd-style/):- PHP isn't optimized anywhere, but at least it's C: https://github.com/php/php-src/blob/1c0e613cf1a24cdc159861e4...- Python's C implementation is the same: <a href=	mschuster91	12.567227	-6.662047	comment	4.0	17.0	1639652311	-8.867457
29578330	There are many tradeoffs. The good n	"There are many tradeoffs. The good news is that hardly any projects and startups will hit those. Or, when they do, they have the resources and funds to transition.Anyway:Ruby is slow. Terribly so. Rails even more. The optimisation is on speed of development and that comes (a.o.) at the cost of runtime speed. Memory usage is terrible too. Easily solvable by bigger or more VMS though.Ruby, with its runtime, is complex and hard to build and deploy and host. Heroku et al take that away from you, but ""getting it running on your laptop"" alone is a sysyphian task. I've worked at and managed teams where this remained a timesink: where devs spend significant time ""Debugging their environments"".Rails is simple MVC with loads and loads of magic. Opinionated patterns such as their own take on ActiveRe"	berkes	12.710086	-6.938275	comment	4.0	21.0	1639664338	12.303086
29578737	My takeaway from this is that it’s e	My takeaway from this is that it’s extraordinarily important to try different tech stacks.I’ve primarily worked as a Java dev for the past 20 years, but I’ve got significant time doing python and one non-trivial Rails app.The funny thing is I’m most comfortable and I believe most productive in the Java ecosystem, but only because of the time spent working in other languages.  Coming back to Java after python, one gets a better feel for what’s essential and what’s cruft. Similarly, when Rails first came out, it can’t be understated how revolutionary it was with respect to web development. Coming from the J2EE universe it was like the true essence of web development had been hidden from us with servlets, JSPs, wars and ears.That being said - I’m happy being a Java - well JVM at least - devel	JackFr	12.629113	-6.936409	comment	4.0	19.0	1639666579	12.339177
29579506	I get that for sure. I've been avoid	"I get that for sure. I've been avoiding learning React because I keep waiting for the space to settle down. I was very interested to see how the Rails folks are talking about their latest version: https://rubyonrails.org/2021/12/15/Rails-7-fulfilling-a-visi...In particular there's a theme of JS being totally optional: ""Rails 7 takes advantage of all of these advances to deliver a no-Node default approach to the front end – without sacrificing neither access to npm packages nor modern JavaScript in the process."" ""The same approach is taken with CSS bundlers that rely on Node. [...] If you’re willing to accept the complexity of a Node dependency, you can pre-configure your new Rails app to use any of them""That seems like a smart goal. They're not trying to go it alone, but they're clearly tr"	wpietri	12.771952	-6.7763486	comment	4.0	32.0	1639670424	12.288615
29580430	I am looking into learning app devel	I am looking into learning app development with no programming experience. Should I learn Node.js or Ruby on Rails? I hear opinions like Ruby on Rails is obsolete and then other people say it's better because it's more traditional. If it really is obsolete then how are people still using it? But then is Node.js easier and more useful?	mikotodomo	12.600883	-6.7594643	comment	4.0	12.0	1639673947	12.278769
29581229	I have been doing this for upwards o	I have been doing this for upwards of 10 Ruby projects for over a decade.It is not simple. Python or Node.Js suffer the same issues, though.Compared to dropping a go-binary or rust build somewhere and firing that up, Rails/Ruby (Rack, Sintra, Rails etc) are a mess.In no particular order, the issues I had to deal with in the last three months:* asset pipelines crashed randomly; turned out the ~2GB build VPS had too little memory to run the asset pipeline.* puma and unicorn and phusion cannot be ran and configgured easily on one server.* rbenv builds are hard to manage.* getting the correct gems on your server is a mess. There is bundler, rbenv, vendored, rubygems.org, gem, Gemfile, Gemfile.lock, ruby-version in gemfile, ruby version .ruby-version, all of which can -and will- conflict at som	berkes	12.681658	-6.953814	comment	4.0	23.0	1639676887	12.351166
29582505	I never really understood the critic	"I never really understood the criticism about ""magic"" in Rails.We are surrounded by magic (which only means things we can not realistically be bothered to take the time to really understand, in contrast to things which are incomprehensible). I have no real clue why the terminal works. I have no real clue why my OS works. I have no real idea how TCP/IP does its thing. Sure, I can use them – but I couldn't really explain and much less recreate them.What I need in all the above is replicability. I do x, and I know y is going to happen. Get x, do y. This is true in Rails.If I really wanna know more Rails is open and easily explorable. No one is preventing me from finding out how any piece of the ""magic"" works.""Magic"" class inheritance is a thing in JS as much as it is in Rails.What is so speci"	jstummbillig	12.735035	-6.9541187	comment	4.0	31.0	1639682154	12.395331
29582549	Elixir is kinda nice. I like their m	Elixir is kinda nice. I like their macros, db querying layer and mix and low latency.But I feel no typesystem would bite me in bigger project.	machiaweliczny	12.6666	-7.387582	comment	4.0	16.0	1639682393	12.879031
29604985	I don't program in Ruby but every ti	I don't program in Ruby but every time I look at it I see something different depending on who wrote the code and what their personal style is.  It seems like it has every syntax in there somewhere.	VWWHFSfQ	12.519355	-7.0643134	comment	4.0	18.0	1639840102	12.381467
29619621	Ask HN: Learning Python for job inte	Ask HN: Learning Python for job interviews if I already know Ruby?	nimbleplum40	12.470448	-6.912544	story	4.0	2.0	1639956173	12.336342
29620776	This got me thinking:I regularly rea	This got me thinking:I regularly read source. And one of my pet peeves with TypeScript is that I will click on a type and have to walk half a dozen types deep to understand what it is. Because the library has sensibly abstracted types to be DRY and whatnot.What I want is a type flattener that I can point at a type and it basically links it all so I see a raw type in all its verbose but complete glory.	Waterluvian	12.335709	-6.889371	comment	4.0	20.0	1639965552	-10.4300375
29625765	Take Rails 7 with Turbo.  Start with	Take Rails 7 with Turbo.  Start with the Jumpstart Pro template.  You’ll feel like a god.https://jumpstartrails.com/Finally, all of the boilerplate and over-engineered components are gone.You’re finally free to solve the just business problems. And you’ll be fighting integration issues a whole lot less.I have no idea why any saas based startup, whether it’s one person or VC backed, would start with anything less.The day will come when a small team IPOs with this stack.  It's just that productive.	aantix	12.740962	-6.8287883	comment	4.0	20.0	1640013271	12.327475
29665809	I'm genuinely curious: why would I u	I'm genuinely curious: why would I use this over something like Crystal, which is pretty much Ruby, but native?https://crystal-lang.org/	netule	12.612751	-7.215795	comment	4.0	19.0	1640289524	-11.199433
34134706	> Is it really much of an issue?Yes,	"> Is it really much of an issue?Yes, because I don't want to wait seconds every time I change a typescript file and I don't want to world of complexity to make it have the same performance every other compiler has out of the box. My ""solution"" for this is to not use typescript. I'd like to, but it's just too painful."	Beltalowda	12.355559	-6.778249	comment	4.0	24.0	1672030226	-10.4509325
34137725	I don’t have a ton of love for Pytho	I don’t have a ton of love for Python now that I’ve moved on to static typing but it’s hard for me to see myself choosing Ruby over Python for anything.Python has gotten significantly faster, has static typing built in with an ecosystem of static typecheckers, and async is an ergonomic first class language feature - sure async can have rough edges but the 99.9% case is dead simple with no surprises.Obviously packaging for Python is still a pain but I don’t see Ruby being better	skrtskrt	12.477893	-7.0323944	comment	4.0	23.0	1672063966	12.399818
34155013	Ask HN: Has anyone tried to rewrite 	Ask HN: Has anyone tried to rewrite a law in Prolog?	mrtie	13.109148	-7.278042	story	4.0	6.0	1672181953	-4.3939095
34189567	People using Phoenix Liveview -- how	People using Phoenix Liveview -- how do you serve native apps relying on the same backend?	oDot	12.890396	-6.8691936	comment	4.0	13.0	1672431601	12.712436
34190734	Can someone _please_ get around to b	Can someone _please_ get around to building a framework for Gleam[0] so that I can finally get over my hesitance to dive into a BEAM language over erlang's/elixir's dynamic typing?[0] https://gleam.run/cheatsheets/gleam-for-rust-users/	davidatbu	12.524854	-7.45834	comment	4.0	16.0	1672438587	-12.334784
34191540	What situations would face possible 	What situations would face possible issues with the persistent-socket-per-view approach? A sprawling app with hundreds of distinct views that over-use LiveView? Would there also be multiple persistent sockets for each particular page?I can't imagine the type of site that would need that sort of structure. Typically you'd have your highly-interactive primary subset of your app, about <10-25% of the routes/views which gets 75-90% of your traffic. While the other 75%+ of routes are just simple static-y/REST CRUD/server-rendered pages.	dmix	12.907407	-6.7516356	comment	4.0	16.0	1672443874	12.698154
34191918	What's the best way to get started w	What's the best way to get started with Phoenix 1.7, for someone with no Elixir experience?Should I learn some Elixir before diving into the Phoenix docs?	rahimnathwani	12.757927	-7.3055162	comment	4.0	17.0	1672447045	12.841589
34192159	> Elixir is a very nice language to 	> Elixir is a very nice language to write distributed systems in. Functional in all the right places plus it has OTP.This is the biggest blocker for introducing Elixir to any company I work at. I don't want to become / hire experts in the OTP and the Erlang VM.I'm ignorant about it in general, but my feeling is it's not only a new language, it's built on abstractions that I'm not sure I'm comfortable owning or operating. Is that wrong and how did you handle the tradeoffs for your company?	ctvo	12.662753	-7.458643	comment	4.0	22.0	1672448882	12.892383
34243578	> the other comparatively-unpleasant	"> the other comparatively-unpleasant language> one that lacks the elegance and consistencyupvoted for perfectly concise description of that language.it is even more sad knowing that high quality alternatives for the most popular libraries exist, but inertia is simply too high.@work I've tried to introduce Ruby to my colleagues that are very bad at programming, but good at science. They ditched it with reasons like ""I don't like it"" or ""it's too slow"" without even measuring (it is not! Shopify would have died by now). I'm still using it without them knowing and it's the reason why I'm 10x faster than everybody else to build solutions.The other language it's the only one they ""learned"" at uni and keep using it for everything, even when it's the worst possible choice, management doesn't care "	peoplefromibiza	12.541971	-7.028675	comment	4.0	35.0	1672823457	12.361495
34244088	I'm sorry, I agree it is a beautiful	I'm sorry, I agree it is a beautiful language.But Ruby is slow. Performance matters. In a world when everything seems to run in cloud servers, efficiency matters.If you can have 20 times more simultaneous users in the same cloud server by using a different tech stack, there's no reason to keep using Ruby.For the record, I also think Python is generally slow, but it has improved in the latest version, and the important libraries for Python are written in C++.	Shorel	12.591909	-7.0363765	comment	4.0	18.0	1672828644	12.352507
34247571	"So basically PHP, but in Go?
I love "	"So basically PHP, but in Go?
I love Go, but I honestly hope this doesn't become as widespread as PHP. There is a reason why we switched away from template-based frontends (à la PHP).On the other side, it's also true that some frontend frameworks are partially moving back to SSR..."	denysvitali	12.728416	-6.5337777	comment	4.0	22.0	1672849479	10.18661
34249549	You call out PHP in both the blog po	You call out PHP in both the blog post and this comment, which is interesting, because persistent pooling has been a part of PHP (and advised) for years.Which leaves serverless and scripts (your other example from the blog post). Which, let’s be honest, are both edge cases at this point in time. Maybe that’ll change, but today it’s true.Twenty year SRE here backing up the person you’re dismissing: you’re optimizing an edge case. Literally step one of operationalizing every system in existence is burying your DB behind a pooler. 100ms off a connect call in a script is not useful. The serverless improvement has some potential, but one would be forgiven for asking why you’d use an environment which doesn’t let you speak network protocols you’d like to speak.	tookledoodle	12.824035	-6.4482174	comment	4.0	15.0	1672857480	9.994869
34251993	When it comes to traditional web fra	When it comes to traditional web frameworks, the most important part is handling regular HTML forms. Reason being, a form is the only native mechanism your customers have to use to interact with your service. Forms are important. Specifically, validation and error handling. I think Laravel does it really well. It's been a while, but Laravel has a wrapper around HTML forms. This wrapper does everything you need: server-side form validation, form generation, flexible error handling that takes care of client error messages, placeholders, input values, css classes for invalid states, you name it.Does Pushup help engineers with HTML forms?	andreygrehov	12.778042	-6.5722885	comment	4.0	14.0	1672867777	10.329956
34267649	Elixir’s testing library uses meta p	"Elixir’s testing library uses meta programming to show the code that fails and what the values were at both sides of a comparison.IE    a = 1; b = 2
    assert a == b

Will fail with error like:    Assertion failed,
    a == b
    Left is 1
    Right is 2

So you don’t have a bunch of assert-functions; you just assert anything and it will spit out a decent error."	tobyhinloopen	12.4342165	-7.4421725	comment	4.0	12.0	1672957001	12.9076185
34301613	Absolutely both.But...the issue is p	Absolutely both.But...the issue is packaging/distributing a CLI built with Elixir.  Comparatively to building a CLI in something like Rust, there is a lot of overhead that comes with a VM-based language and framework.  Especially if you want to target multiple OS and processor architectures (or distributions).  Not to say that it is impossible, just maybe not as simple.  It is one thing to run Mix tasks, or access the Owl API from REPL, it is another to run an Owl-based app on macOS, Linux and Windows and get it there.	kitplummer	12.587857	-7.4512477	comment	4.0	15.0	1673202289	-9.974682
34321570	Although the article is about the en	Although the article is about the entire software industry of Japan, and not about the efforts of one individual, I feel like it does a great disservice to not mention Yukihiro Matsumoto, aka Matz, the inventor of Ruby? Since 1995. How many startups have been launched with that platform as their basis?	jimmcslim	12.650017	-7.0250244	comment	4.0	12.0	1673335121	12.40451
34334003	... and is pretty much single-handed	... and is pretty much single-handedly keeping PHP alive!	skrowl	12.767866	-6.640537	comment	4.0	12.0	1673401365	10.314268
34354599	"What do you mean by ""heavyweight""? A"	"What do you mean by ""heavyweight""? Also why is it a problem that something is ""heavyweight""?What problem are you trying to solve by asking these questions? What context is this question for? Are you curious how many people use a non-rails solutions for enterprise apps? Cloud apps? Personal projects? Apps you want users to pay for? A blog?I'd suggest stating what problem you'd like to solve by asking this question so you can receive more detailed feedback. For example, if your company is spinning up a new app and you're evaluating choices, someone may respond that they used sinatra but found themselves reinventing rails so they wish they would have used rails. I'd say this is more insightful than ""yea, we use sinatra"". Alternatively, maybe someone used sinatra for a personal project and fou"	quest88	12.759448	-6.9148912	comment	4.0	29.0	1673536207	12.311343
34360935	> Sure, dealing with TypeScript can 	> Sure, dealing with TypeScript can be a hassle, but it is less hassle than dealing with broken software.Can you think of examples where it's prevented broken software? I would prefer to spend more time writing good unit test coverage which in my experience would catch anything that TypeScript would have caught. I have seen it be more useful for autocomplete and self-documenting code, which I could get using JSDoc or something similar.	roberttod	12.372161	-6.8457704	comment	4.0	12.0	1673561271	-10.485498
34363680	Regarding #1: this is not true alway	Regarding #1: this is not true always. Libraries publish types and their type definitions could use new TypeScript features that could force an update.	jupp0r	12.353019	-6.849466	comment	4.0	14.0	1673581151	-10.456153
34364179	I feel like TypeScript is definitely	"I feel like TypeScript is definitely worth it BUT it seems to be getting ever more powerful but not in a good way, in complex way.Too much time is spend fighting TypeScript as opposed to writing application code.I have a question for the language experts out there .... why is TypeScript getting so complex? Are other strongly typed languages this complex?  Or does the complexity arise from trying to overlay typing on JavaScript which is an incredibly dynamic language?And if it is the case that TypeScript's complexity keeps going up because essentially ""strongly typed JavaScript"" is a hack, then should we all be moving to a much simpler strongly typed language that compiles to WASM, and yet still richly interfaces with the DOM and browser APIs?Does TypeScript just have to keep getting ever a"	andrewstuart	12.352499	-6.832812	comment	4.0	17.0	1673586495	-10.460413
34401058	"My first thought was ""this better be"	"My first thought was ""this better be WSGI!!!"" and sure enough it is. If you're doing Python web development and you have no idea what WSGI or ASGI are, you really ought to learn more about them. ASGI is the Async equivalent / answer to WSGI. It is one of the main ways to deploy any web application in Python. Every major web framework supports it OOTB and heck, even one of the fastest web frameworks for Python (FastAPI) uses it exclusively.Thanks to WSGI you can have projects like this that focus on scaling out your Python web all to the fullest extent possible."	giancarlostoro	12.342306	-6.521913	comment	4.0	42.0	1673879952	9.83296
34411786	I'm on PHP 8 and I feel the same as 	I'm on PHP 8 and I feel the same as parent.Sure, there's been a lot of progress since the PHP 5 days, but the core of the language has been left mostly untouched by design, and we haven't seen the kind of drastic moves like JS moving to ES6 syntax.It's a matter of taste, so there's no absolutr truth. I hate PHP's function and property access syntax differenciation and wildly prefer ruby's approach or instance. And there's so much more nice things coming in languages that have been designed from the ground up to be nice to use.I understand PHP's pragmatism, but can't find it pleasant to use TBH.PS: we got arrow functions, but they stay limited to anonymous functions for instance...	makeitdouble	12.714393	-6.62944	comment	4.0	22.0	1673959587	0.87591064
34411258	"It's been 10 years since ""PHP: a fra"	"It's been 10 years since ""PHP: a fractal of bad design"" [1] was written.It's remarkable how the language evolved, and how many of the issues mentioned have been fixed and improved over the last ten years.1. https://eev.ee/blog/2012/04/09/php-a-fractal-of-bad-design/"	shaicoleman	12.815257	-6.698298	comment	4.0	24.0	1673954307	10.453033
34413614	I'm pretty sure (there isn't a lot o	I'm pretty sure (there isn't a lot of info on how to enable it in production workloads) we're running YJIT in production and didn't notice any improvement in load times, CPU usage or anything really. If any slightly higher metrics across the board.We're using Rails as API and web frontend with a pretty high number of requests per second, so I was hoping we'd see something. Does anyone have any experience rolling it out?	erikrothoff	12.657232	-7.016305	comment	4.0	27.0	1673969429	12.371293
34415583	Is there a name for this syndrome? T	Is there a name for this syndrome? The same thing happened at Github. Ruby and Rails are slow enough in production that they dedicate a specialized, long-running internal team to it. This team doesn't contribute directly to the product. They hire core Ruby and Rails maintainers, also not to contribute to the product, just to try to help improve their slow software. It's a dream job that shouldn't exist.If you tell me that Ruby and Rails scaled for Github and Shopify, be careful using that as an argument for choosing Rails for your company. Rails definitely didn't scale for Github, and doesn't appear like it scaled for Shopify, until a manager greenlit a year long JIT project unrelated to Shopify. If your company has as many resources, free cash, klout to hire core Ruby maintainers, and eno	stevebmark	12.72865	-6.9612412	comment	4.0	16.0	1673976874	12.337189
34428937	Just curious, is .pl the standard ex	Just curious, is .pl the standard extension for Prolog programs? Why would Perl and Prolog choose the same one, instead of one using e.g. .pg?	d33	13.139802	-7.285816	comment	4.0	24.0	1674059681	-12.488701
34432069	Anybody care to explain on how it ac	Anybody care to explain on how it achieve such numbers in comparison to node and deno?Why would anybody not use Bun, other than the cost of migration, given the performance improvement?Nevertheless, amazing performance. Feels refreshing to see more improvements to the JS/TS community.	thiago_fm	12.484013	-6.4421167	comment	4.0	29.0	1674071567	-10.927423
34454713	Show HN: Taggy – Open-source package	Show HN: Taggy – Open-source package to auto-tag input/text	turbosepp	12.409779	-6.728552	story	4.0	35.0	1674229937	-10.389856
34454401	I love the pipe operator in Elixir!	I love the pipe operator in Elixir!	leishman	12.60437	-7.433744	comment	4.0	23.0	1674228705	12.921886
34494632	RoR is nice, but it lacks one of the	RoR is nice, but it lacks one of the most important abstraction layer: The schema layer for HTTP. Currently the default is to mix model params with http params. It's bad default.Of course you can use dry-schema for that purpose, but i do think the framework should enforce that for the whole ecosystem to follow.	revskill	12.689218	-6.6669626	comment	4.0	31.0	1674506193	10.460149
34495995	Rails is extremely easy to get start	Rails is extremely easy to get started with but after a few years the lack of types on Ruby cripples every single Rails app I've ever worked on. You can have as many unit tests and browser automation tests as possible, but updating any gem is a dice roll despite doing as much due diligence possible. And it's always something extremely trivial like a method changing its parameters without announcing it in the change log for some reason. Something almost any other language would warn you about.I've been doing Rails dev for 7 years now but I just don't see it winning over TypeScript/nodejs frameworks. The only advantage Rails still holds is the out of the box batteries included package. But once a TS framework gets this, Rails will be in decline.	Gigachad	12.7419195	-6.905434	comment	4.0	23.0	1674512826	12.348555
34509678	Here are 3 statements that were made	Here are 3 statements that were made in this thread:- typescript is a superset of javascript- superset of objects can only have the same or fewer properties- Typescript contains all the rules of Javascript, and then adds some moreDo you see where the confusion is coming from?> that also means the language specification itself is a strict superset of JavascriptThis is where I disagree.TS as a language has more properties than JS, but less rules. I.e. you can create Javascript language out of Typescript by adding more rules (constraints).But TS as a spec has more rules than JS spec.TS as a language is a superset of JS language. TS as a spec is a rough subset of JS spec.	hbrn	12.354865	-6.829655	comment	4.0	25.0	1674591653	-10.488662
34531111	I did so last year, and I cannot be 	I did so last year, and I cannot be happier. My only regret is that I wasn't aware of htmx/hotwire at the time. I went with Vue, and I regret it immensely.Rails is the fastest development platform I've tried so far, it is predictable, well crafted, structured yet flexible. You can't go wrong with it.Every now and then I try something new on a side project or I have to work on some other codebase for my customers, and nothing so far has tempted me to move out of rails for my serious projects	lta	12.770391	-6.7293034	comment	4.0	30.0	1674738105	12.325315
34531575	I‘m trying to learn Django just for 	I‘m trying to learn Django just for this kind of MVP purposes. I also did a small mini project in RoR by following their documentation. Is there anything that is significantly easier to do in RoR vs. Django? Alternatively, is there anything, say, on a larger scale that I can do with RoR that I cannot do in Django if the project grows? These are the questions I‘ve been wrestling with quite a bit now. After learning Vue and React.js and having used and being cognizant of Next, Nuxt, Supabase, Firebase and all that other stuff, I‘m looking to become a bit of a better developer by understanding the intricacies of traditional monoliths and how problems are solved on the backend. I‘d also like to be able to serve predictions and host ML models in production. Likewise, if my MVPs catch on, I’d li	iamsanteri	12.835143	-6.5415325	comment	4.0	17.0	1674741185	-2.578754
34535530	What kills rails for me at the momen	What kills rails for me at the moment is the time it takes to start up. I'd love to be able to use on top of things like cloud run where resources ramp down to zero when there are no requests, but the startup time makes this very difficult.	iamflimflam1	12.763905	-6.9017453	comment	4.0	13.0	1674755484	12.334989
34538006	I've been a PHP programmer for most 	I've been a PHP programmer for most of my professional career and switched a few years ago. PHP has a bad name for a long time. True or not, this started weighing on me and I shared a lot of the opinions you wrote here.People will continue to roll their eyes. Whether deserved is besides the point. I was no longer interested in being a 'PHP programmer' and have to justify my worth. PHP is by all measures on it's way out. If you are looking at other ecosystems of course you're going to find things that aren't great. PHP has those too but in the 15 years you've been doing it you've created habits that perfectly avoid those. You're not going to attain those same skills immediately elsewhere, and the things that are worse from your perspective are going to stand out more than the things that ar	treve	12.771282	-6.629668	comment	4.0	17.0	1674763755	10.326316
34545812	> In 1998 Ericsson decided to ban al	> In 1998 Ericsson decided to ban all use of Erlang.Does anyone know why?	adamddev1	12.564629	-7.520209	comment	4.0	55.0	1674826696	12.897443
34549749	These days, if you have Kubernetes, 	These days, if you have Kubernetes, queues, and worker queues, does OTP still have an edge?	didip	12.575974	-7.414861	comment	4.0	12.0	1674844049	-13.437907
34552719	Can recommend taking a look at Polar	Can recommend taking a look at Polars. Kinda a successor to pandas.https://www.pola.rs/	matsemann	12.34625	-6.537522	comment	4.0	12.0	1674858387	10.162524
34559727	Can you elaborate on how are Erlang 	Can you elaborate on how are Erlang process mailboxes different than channels, please? I view them as hear-identical but I haven't thought deeply about it.	pdimitar	12.536829	-7.523971	comment	4.0	16.0	1674928220	12.891961
34579583	You-buntu vs oo-buntu,Something cowo	You-buntu vs oo-buntu,Something coworkers from years ago still like to give me grief about.	silverwasthere	12.444161	-6.463627	comment	4.0	20.0	1675086931	-10.640881
34592096	> You get a massive bug catcher for 	> You get a massive bug catcher for free with TypeScript...it tells me their philosophy/priorities are completely backward.This is a superficial take. TypeScript is not free. You are adding a compilation step that takes time, slowing down feedback in certain workflows, as well as a rather large dependency. It certainly can be worth asking why they chose JS given some of your perceived benefits of TS but not using it doesn't mean that their philosophy is backwards.	thefaux	12.370087	-6.763644	comment	4.0	20.0	1675148158	-10.476069
34594116	It's not clear to me why a subset of	"It's not clear to me why a subset of PHP with an extremely fast compiler isn't available/common. That's what it's designed for...People plug-in all sorts into python, why not  `from microphp import tpl`,  `tpl(""blah.phtml"")` etc.    <html..> 
    <? foreach($xs as $y): ?>
        <? $y; ?>
    <? endforeach; ?>
    </html>"	mjburgess	12.698292	-6.6397653	comment	4.0	15.0	1675167272	10.290334
34623874	Who exactly claims Erlang is dead? T	Who exactly claims Erlang is dead? The referenced article is SEO-infected garbage that also claims Haskell and Perl are dead.	qsort	12.577464	-7.516868	comment	4.0	17.0	1675327334	-5.248712
34625164	I've written some Erlang and found t	"I've written some Erlang and found the syntax awkward. One example of this is that variables can only be bound once. This means you end up writing:  Val = SomeFunc()
  Val1 = Func2(Val)
  Val2 = Func3(Val1)

Yes I know you can use the functional style to minimise having to do this but you still end up seeing this pattern in real code.Kubernetes has done a good job of replacing OTP.That said I think Erlang is still an interesting language to learn just because of how different it is."	loftsy	12.538058	-7.5237064	comment	4.0	17.0	1675337509	12.909226
34668926	Are you serious right now???Like... 	Are you serious right now???Like... Half the original point of TS was to add features to JS that weren't there originally.Granted, as the base language evolved the gap has become smaller, but it's still there.Interfaces being one such example.There's also things you can do in JS that TS will bitch about. For example, try using object destructuring in a class constructor to create optional named parameters for a class.Works perfectly in Vanilla JS, but TS will throw a hissy-fit.	llamaLord	12.345272	-6.713274	comment	4.0	16.0	1675628780	-10.415895
34672923	Ask HN: Next.js or Rails for a new p	Ask HN: Next.js or Rails for a new project in 2023	kentf	12.764229	-6.9132495	story	4.0	6.0	1675653805	12.354724
34677826	No viable alternative to JS/TS for w	No viable alternative to JS/TS for web (client side) unfortunately.	zikero	12.34345	-6.4768324	comment	4.0	12.0	1675694278	-10.428715
34746997	> This is FUD. For any normal web ap	"> This is FUD. For any normal web app you don't need that functionality, just use the built in ""ports"" concept to interface with JS stuff.The change was handled extremely poorly. I only knew one team using Elm in production at the time. They went from being huge proponents of Elm to recommending against it after the 0.18/0.19 changes and drama upended a lot of their work.There may have been a ""right"" way to do things under the new version, but breaking major functionality in a minor release without warning is a sign that you don't really care about your users. Changes like this require discussion, warning, and long transition periods.It was bad enough that they got it wrong, but then Evan doubled down by dedicating the opening of his next conference talk to mocking the users who were unhap"	PragmaticPulp	12.997241	-7.6790743	comment	4.0	24.0	1676068862	-12.762478
34747661	To add to the discourse here, it's w	"To add to the discourse here, it's worth considering that since Elm came about WASM has come along in huge strides, and at this point you're faced with a ""Why learn Elm when I can use <lang I already know> and compile to WASM"".See projects like Yew and Blazor."	bargainbin	12.993299	-7.686541	comment	4.0	17.0	1676072704	-12.712878
34768665	> The only big drawback of Deno is t	> The only big drawback of Deno is the languageOoft. Although TypeScript does have a bit of a learning curve, and a lot of gotchas, I still have to say it's my favorite language to use. If you combine the delicious syntax-sugar of ES6 (and beyond) with a sprinkling of tasteful types, the language leaves you full and energized without feeling bloated.	zengid	12.442803	-6.4657927	comment	4.0	33.0	1676247724	-10.89523
34769933	Typescript isn't really a class-base	Typescript isn't really a class-based language.It's a language that supports both function and OO paradigms.Also, if macros/DSLs are what you're after, then you'd probably be interested in typescript's decorators. (you can use the old experimental decorators based on the old standard from ages past, and the new *standard* decorators introduced in typescript 5 which are based on the current stage-3 ecmascript proposal).The only things typescript as a language is really lacking are:1. Pattern matching (minor issue)- +90% of pattern matching is really just a more concise switch/case syntax- the remaining -10% can be done by hand with mapping or just basic if statements2. Immutable data-structures (minor issue)- The `as const` suffix handles most of the use cases.- There is a Records/Tuples pr	spartanatreyu	12.331789	-6.8417554	comment	4.0	19.0	1676260498	-10.43563
34772230	Typescript is great compared to plai	Typescript is great compared to plain JS, but they're really deep into diminishing returns area with type system features for a couple of years now.A lot less would be a lot more, because as of now Typescript lures otherwise entirely competent programmers into writing complex 'type system puzzles' which are entirely obscure to everybody except the person who wrote that code, and it takes a lot of discipline and experience to reist the lure and keep things simple.	flohofwoe	12.3397045	-6.8074408	comment	4.0	14.0	1676286862	-10.435971
34780719	I had a similar experience working f	"I had a similar experience working for a company that had, essentially, developed their own in-house web templating language and programming system. They'd started before PHP or any of the other server-side programming languages had caught on, and while a decision to use a homebrew system may have been justifiable in the '90s, when the only real alternative was Perl/Mason, by the time I joined (2009), it was long overdue for them to have moved on to an industry-standard solution. PHP. Python/Django. Ruby/Rails. Even classic ASP would have been preferable to the mess of C++ and XML they were using.Frankly, I think the article, like a lot of Joel Spolsky's writing, has aged like milk. For example:    If you’re developing a computer game where the plot is your competitive
    advantage, it’s "	quanticle	12.525805	-6.564568	comment	4.0	14.0	1676323249	10.3619585
34799673	"IMO Ruby on Rails remains the ""uncom"	"IMO Ruby on Rails remains the ""uncomplicated"" standard for building full-stack apps. Especially notion-like CRUD apps. It's fast, uncomplicated (convention over configuration), and enjoyable to write apps in once you understand the basics. I still think Ruby is an incredibly fun language to write in.You mention that you get frustrated by modern web dev - I assume you mean the insane world of javascript frameworks. You can build entire rails apps without ever really worrying about JS these days.[^1] Hotwired lets you build fairly complex UIs and add a ton of interactivity without JS. But if you ever want to do more with JS on the frontend it's very easy to adapt rails to just about any frontend JS framework, including React and Svelte.That said, there's comparable full-stack frameworks in m"	dcchambers	12.720789	-6.791785	comment	4.0	19.0	1676431271	12.302315
34799800	People have continued using Fortran 	People have continued using Fortran and cobol for decades. Doesn't mean they are good or pleasant.Try refactoring 20 year old php then tell me it is pleasant. If you can't, it shouldn't be recommended to OP	hyperhopper	12.746995	-6.644049	comment	4.0	14.0	1676432265	10.337861
34834580	"""Sure, it works well enough for the "	"""Sure, it works well enough for the example shown in the article, but won't work well beyond this.""Sigh...the entire bloody point of the author is to use this for light projects, to scale the sophistication of the setup gracefully. With very obvious benefits: easy to understand, not linked to any setup so it works forever, interoperable and transferable.Typescript isn't universally important for development. It has its advantages for large projects with many developers but it's in no way essential. Most web projects don't use Typescript and the very idea that it's a must-have only a few years old and quite opinionated.Likewise, Babel isn't important either. You don't need to use some futuristic JS feature on your simple project, you can just stick to well supported ones, thus not needing B"	fleddr	12.408071	-6.630098	comment	4.0	19.0	1676641683	-10.411429
34909823	Still one of the best blog articles 	"Still one of the best blog articles ever written: ""PHP: a fractal of bad design"" https://eev.ee/blog/2012/04/09/php-a-fractal-of-bad-design/"	jupp0r	12.813936	-6.702872	comment	4.0	23.0	1677156831	10.466267
34917361	A lot. And it baffles me why hasn't 	A lot. And it baffles me why hasn't anyone realized that Kenneth Reitz was right about django over a decade ago and all his points are equally valid today.https://speakerdeck.com/kennethreitz/flasky-goodness	axegon_	12.8215475	-6.54948	comment	4.0	16.0	1677190483	10.137641
34935884	I've been using Elixir with Phoenix 	I've been using Elixir with Phoenix and Liveview at my job for the past three months as part of a small team building a non-trivial web app (https://duffel.com/links). I'm mostly a front-end developer and was brought in to handle the UX side. Prior to this project I've spent the last 5+ years in the React world.I found a lot of what the author says to be true. I'm used to the nightmare that is managing front-end dependencies, and it was refreshing to use something so 'batteries included' that comes with most of what I need.It took me a while to get my head around the Phoenix + Liveview way of doing things, but when my mental model clicked into place and I stopped trying to do things the React way I became a lot more productive. When I had an autocomplete updating live as the user typed all	shaundon	12.887792	-6.8831005	comment	4.0	17.0	1677325512	12.725444
34969029	There is also Polars [0], which is b	There is also Polars [0], which is backed by arrow and a great alternative to pandas.[0] https://www.pola.rs/	loveparade	12.33846	-6.5613093	comment	4.0	20.0	1677590898	10.141342
34998513	Over the course of a month or two th	Over the course of a month or two the time taken to compile a single .ts file in our codebase climbed from 'too small to measure' up to '7 seconds'. It eventually turned out that a single type definition in the file was causing all typechecks to become incredibly slow. Getting timing data out of build tools like rollup was brutal, and editors with tsc integration like vs code/sublime text would just lag and misbehave. This regression had occurred without anyone noticing, because we all just assumed it was normal for 'build and bundle our typescript' to take a long amount of time despite how simple our code was.	kevingadd	12.35853	-6.7882876	comment	4.0	20.0	1677777094	-10.469797
35021575	LiveView is a great pattern, but it'	LiveView is a great pattern, but it's worth noting that it is not universally useful or better. If latency of UI change is more important than the latency of data update itself, doing the UI update on the client will always make more sense and the data can slide in shortly after.There is no silver bullet, and sometimes doing a UI update on the client is still a better UX.I can foresee a future where everyone goes down the LiveView rabbit hole, only to improperly blame it for causing too much UI update latency in some cases.When it all goes well, it's very clean. If you can't make sure the server is evenly loaded amongst all your clients and close to them, it will probably feel quite poor in comparison to some client side update code.	lucasyvas	12.93493	-6.7447443	comment	4.0	15.0	1677944414	12.7070265
35038922	The game in easy/intermediate is ver	The game in easy/intermediate is very fun and satisfying! However it doesn't seem to scale too well beyond this - it feels unless you get 'lucky' with one row/column having a very low total, you end up with many many degrees of freedom for each move, which scale, I suppose, quadratically?Sudoku at the hardest difficulty also has this, but usually the errors manifest a bit more quickly.  It feels in this mode you could end up finding your error 'at the end' and have an absolutely diabolical time debugging your error?	jphoward	13.44763	-7.4075866	comment	4.0	16.0	1678093063	15.077316
35045937	For django, they should really contr	For django, they should really contribute to 2 scoops django cookie cutter program, so that you can get an out of the box django instance that can just deploy to Fly.io.	soperj	12.817077	-6.503366	comment	4.0	20.0	1678129329	10.069138
35047195	RoR enables developers to make a lot	"RoR enables developers to make a lot of progress on their app in a short amount of time... initially. Most developers have never seen a legacy Rails app, or are still in the self-deluded ""this time it'll be different"" phase. So they jump wholeheartedly into the Rails ecosystem and build their app the ""rails way"". Not knowing the pitfalls, they fall into all of them. A few years later, you have a successful Rails app with (1) slow, data-coupled tests (2) spaghetti code in your models and controllers (3) probably dockerized, relies on heavily outdated linux version and no one can update it within a sprint so it never happens. So they hire ""senior rails"" devs and throw them at the problem (after all, the initial setup speed of Rauls allowed them to be successful and have money now)."	phendrenad2	12.737588	-6.9475517	comment	4.0	19.0	1678134910	12.351474
35070312	Why would one use this over YJIT?	Why would one use this over YJIT?	rco8786	12.584249	-7.0233064	comment	4.0	22.0	1678289921	12.320674
35070603	seems strange, since most rubyist ar	seems strange, since most rubyist aren't compiler engineers. I feel like you'd still want to keep writing your compiler in Rust, and try to eek out your performance there.I'm still scratching my head, other than accessibility, Why Ruby over Rust.Note: I'm a Ruby dev, I don't know Rust. I've written few toy interpreters in Elixir and OCaml. This is my very limited understanding of compiler design, etc.	weatherlight	12.481475	-7.1489334	comment	4.0	17.0	1678291074	12.358761
35074631	Honest question, I do not know Ruby'	Honest question, I do not know Ruby's semantics well. But, as someone who has worked on many JITs in the past, how is it in these results, three different JITs failed at getting more than a 2x performance improvement? Normally, a JIT is a 10-20x improvement in performance, just from the simple fact of removing the interpreter dispatch loop. What am I missing?	titzer	12.519648	-7.0146213	comment	4.0	32.0	1678309104	-9.040952
35079063	love elixir. hate Mix.it's like usin	love elixir. hate Mix.it's like using Maven or npm all over again. but even worse because it generates a lot of code.it creates disposable projects by design. No way to keep track of what to change when mix create outputs something different next year.and now things like https://github.com/wojtekmach/mix_install_examples/blob/main... where is ecto even installed? download from where? so annoying this trend.	rftyuikdjhgvcf	12.693122	-7.451655	comment	4.0	16.0	1678347284	-8.800198
16820272	Other then here, Voat is the best ov	Other then here, Voat is the best overall. Their source is on GITHub if you want to roll your own.https://github.com/voat/voatIf you want to do your own Reddit here are some clones, largely PHP based:https://www.reddit.com/r/selfhosted/comments/77bhdx/phpbased...	randomerr	12.754642	-6.551538	comment	5.0	27.0	1523537156	10.331103
16836844	Ember.js 3.1 and 3.2 Beta Released	Ember.js 3.1 and 3.2 Beta Released	izelnakri	13.112578	-6.4459286	story	5.0	80.0	1523704349	-15.5191765
16838346	(as someone who doesn't use ember) T	(as someone who doesn't use ember) This release looks cool, and I like the general vibe of careful development and clear messaging.Is anyone here using Ember on big projects? How's it working out?I tried ember, maybe 6 or 7 years ago, and was turned off by some weird magical behaviour, but I'm curious about how ember is doing these days, and particularly the glimmer engine.	s_kilk	13.113058	-6.446387	comment	5.0	30.0	1523727219	-15.512641
16842055	Does Erlang support structural shari	Does Erlang support structural sharing between large data structures? If not, how is it possible to efficiently pass large messages between processes on the same physical machine?	amelius	12.471863	-7.4965024	comment	5.0	27.0	1523786978	12.884043
16842717	I played with Ruby like 15 years ago	"I played with Ruby like 15 years ago and loved it, but surely speed wasn't exactly a selling point, so I welcome this project.
One question though for the gurus out there: they say the compiler is written in Crystal; is it good practice to do it that soon? To me it could slow down development, if a subtle error occurs it could make harder to nail it to a bug in the compiler or in the language."	squarefoot	12.623973	-7.21736	comment	5.0	21.0	1523801995	-11.255704
16865757	This analysis is misguided because m	This analysis is misguided because many of those languages are DSLs, e.g. ABAP, Apex, F#. No one using them has the option of using a general purpose language (and they are well-paid enough not to care). Whereas Perl 6 is in direct competition with general purpose languages. And it really is time to give up on flogging that dead horse.	gaius	12.338531	-7.0507956	comment	5.0	27.0	1524041151	13.18163
16880429	Io-to: both static and dynamic type 	Io-to: both static and dynamic type checking for JSON API data in TypeScript	fanf2	12.351323	-6.766958	story	5.0	30.0	1524174182	-10.40181
16883225	Lets talk PHP	Lets talk PHP	morog	12.776004	-6.636082	story	5.0	4.0	1524214368	-1.348199
16936605	wow, lot of Flask haters here.I pers	wow, lot of Flask haters here.I personally love it and have used it for a ton of smaller projects.  For example, I just deployed this a couple days ago: http://dadjoke.info	chasedehan	12.7249365	-6.558934	comment	5.0	20.0	1524782354	10.040865
16940969	Isn't this logic programming (ala pr	Isn't this logic programming (ala prolog), not machine learning? I don't think this article reflects what people usually mean when they say AI, or am I missing something? I haven't really done any machine learning or logic programming, so could be totally off, but glancing at this was confusing based on the title.	jessep	13.121793	-7.2648587	comment	5.0	35.0	1524839244	-12.470912
16978934	My OTP 21 Highlights	My OTP 21 Highlights	mischov	12.544669	-7.493096	story	5.0	172.0	1525280442	12.763016
17005858	If it's feasible to write (most) all	If it's feasible to write (most) all of your app backend in Elixir, then I think it's a pretty great option. I feel like language context switches tend to be very expensive and error prone for developers, plus the increased hiring and on-boarding cost associated.I think the core advantages of micro-services are:1.  Polyglot applications. There often is some library in a language for a use case, but there is also often the library in a specific language - the one that has a far larger community around it, very active development, considerable battle testing, a wealth of examples and guides and support available online. If you use this library in this language, you just kind of know it will work as best and easily as possible. The trail is well trodden. You now have a new problem of API cont	nrser	12.626195	-7.4634137	comment	5.0	17.0	1525600194	12.909866
17118009	Is Elixir being used extensively out	Is Elixir being used extensively outside Silicon Valley? Can you list some well known success stories? Looking at job listings and open source projects, it doesn’t seem to be widely used. In fact, I don’t know anyone outside Silican Valley who has built anything non-trivial in Elixir.I am not saying it is bad. But I’d like to know about it before I dive in.	__sr__	12.697252	-7.4486027	comment	5.0	19.0	1526907326	12.926569
17121895	The older Lisp folks often have a Pr	The older Lisp folks often have a Prolog integrated in their system...	lispm	13.139061	-7.3027177	comment	5.0	19.0	1526937403	-12.495205
17145074	Currently using Reason. Here's what 	"Currently using Reason. Here's what they don't tell you:Pros:* Compile speed is mindblowing. As in, a big project compiles within a few seconds, and incremental compiles are instantaneous. The productivity gains of this cannot be overstated; you just don't get those moments anymore when you're waiting for webpack, your mind wanders off, lets just check HN real quick, ... no, you just stay in the flow. It's great. Elm, on the other hand, is sloooow.* Type inference works really well. 9/10 times I don't even need to annotate anything and the compiler just knows. The only runtime errors I've ever run into were related to JS externals; the peace of mind knowing ""if it compiles, it really works"" is a game-changer even compared to TS.* Error messages are (for the most part) fantastic and really "	skosch	12.890968	-7.5716505	comment	5.0	29.0	1527176444	-12.741239
17162631	Ehhh I dunno about the PHP thing. I 	Ehhh I dunno about the PHP thing. I can see what you mean, but there’s a certain negative implication to it which isn’t accurate. PHP is bad because it’s inconsistent and doesn’t really have a coherent design. You can tell that it evolves by having things bolted on to it, and there’s all sorts of weird dark corners. Go really isn’t like that at all.	jrs95	12.703702	-6.734923	comment	5.0	24.0	1527349583	10.307139
17218015	I’d say the slowness of Ruby is real	I’d say the slowness of Ruby is really over exaggerated. For most web applications it’s good enough, and the speed of development (how fast you can ship) almost always outweighs any costs from it being slow.You can always replace the endpoints that are slow with something written in a more performant language like Golang or Erlang later.I’ve worked on all sorts of applications from corporate CRUD to mobile billing gateways written in Ruby (usually Rails), and in very few cases has Ruby itself been the bottleneck.	fyfy18	12.672746	-6.9774504	comment	5.0	19.0	1528002859	12.345316
17218303	Well, here's one reason: the amount 	Well, here's one reason: the amount of time saved when standing up a webapp on Rails is absolutely insignificant compared to the life of that webapp in all situations where that webapp is anything serious.Not to say that Rails apps aren't serious!  I'm just saying that the time saved in standing up a webapp with Rails vs., say, Java, is miniscule compared to the develooment life of that application, overall.In short: you don't save any time at all, in the big picture, and now you have all the long-term disadvantages of Ruby.	naikrovek	12.738035	-6.9383597	comment	5.0	18.0	1528008977	12.3564825
17218431	In many areas of the US (the entire 	In many areas of the US (the entire west coast for example), PHP is dead - plain and simple.  Independent of whether it is good or not, selecting dead or obscure technologies for your clients is completely irresponsible and leaves them with a maintenance catastrophe just because you like php.  Yes there is a lot of hipster-ism out there in platform choice but there are plenty of mature, fast, and popular options out there. PHP is not one of them.	eagsalazar2	12.767346	-6.63377	comment	5.0	29.0	1528011986	10.334082
17223655	Is Crystal still a thing? I thought 	Is Crystal still a thing? I thought it sought to keep Ruby ease but statically for speed and to reduce bugs?	exabrial	12.635029	-7.240566	comment	5.0	34.0	1528074371	-11.281755
17224281	Any reason why existing typecheckers	Any reason why existing typecheckers for Ruby didn't make the cut? There are projects like RDL [1] which provide similar functionality. I know for certain that people from Stripe were taking a look at it last year from the issues they had raised.Disclosure: I am a grad student, recently started working on RDL.[1]: https://github.com/plum-umd/rdl	sankha93	12.515796	-7.1042604	comment	5.0	22.0	1528081868	12.385673
17245797	"""Written in PHP so literally anyone "	"""Written in PHP so literally anyone can contribute, even if they have no idea how to program."" - not exactly a cheery marketing point for PHP, not sure I'd want to use something written by people who have no idea how to program. But I guess that's why they have the blurb above..."	brobdingnagians	12.771548	-6.624359	comment	5.0	15.0	1528280294	10.338357
17281546	I've been coding since I was 9 years	I've been coding since I was 9 years old, made my first web page at 15, I'm 34 now, having been a pro web dev for 5 years. I'm no greybeard, but I'm definitely not a beginner. And I stand by my assertion. Programming languages come and go. I've been watching it happen for over a decade. Ruby's the one language that transcends the normal reasons why they do that.Other languages fit hardware or chosen domains better or worse, those are the reasons why you'd choose one or the other. Ruby's the only language that fits the mind better.	vinceguidry	12.554005	-7.02089	comment	5.0	29.0	1528688020	12.34487
17313808	Elixir is dynamically typed, just li	Elixir is dynamically typed, just like Erlang and the BEAM.  Strong typing is a most requested feature from outside the community, seldom from inside.  (EDIT correct, strong typing is not static typing.  Does anyone make weakly typed languages anymore?)	gamache	12.52156	-7.45527	comment	5.0	21.0	1528999320	12.91583
17313853	How is the library ecosystem with el	How is the library ecosystem with elixir? Currently I'm usually using Go where I have a library for anything and I'm quite apprehensive to start using elixir if there's a lack of libraries.	cube2222	12.655875	-7.439755	comment	5.0	16.0	1528999582	12.918372
17314520	As an Erlang developer for the past 	"As an Erlang developer for the past couple years now, I love seeing the adoption and excitement around Elixir and the BEAM. I will admit I always shudder when people very quickly call out on Erlang's syntax as a reason not to use it. Feels like a pretty lame excuse...All that said however, it kind of bugs me when I see posts like this (no matter the language) that go somewhere along the lines of ""I managed to introduce language X and it was all rainbows and unicorns! Everybody loves it and work is fun again"". Like, you had absolutely no problems with it? In my experience, people don't immediately grasp the actor model or how to manage processes (i.e. should I spawn a process for a short-lived task? should this monitor another process? should I link? should it need supervision?).Given that "	slezakattack	12.633418	-7.4780116	comment	5.0	44.0	1529003769	12.932214
17315139	This topic is quite subjective, but 	"This topic is quite subjective, but could you provide some example? Overall Elixir seems to me a bit easier to read, for instance:Elixir:  ""Hello,How,Are,You,Today"" |> String.split("","") |> Enum.join(""."") |> IO.puts

Erlang:  -module(tok).
  -export([start/0]).

  start() ->
     Lst = string:tokens(""Hello,How,Are,You,Today"","",""),
     io:fwrite(""~s~n"", [string:join(Lst,""."")]),
     ok."	pera	12.583098	-7.491842	comment	5.0	33.0	1529008598	12.917204
17321172	is there like Sinatra equivalent for	is there like Sinatra equivalent for Crystal? and what is the go to ORM for Postgres in Crystal?	jaequery	12.628093	-7.2304983	comment	5.0	15.0	1529080745	-11.238714
17329856	THT v0.2.0 – a language that compile	THT v0.2.0 – a language that compiles to PHP	jlesk	12.77003	-6.6517463	story	5.0	20.0	1529188572	10.327643
17332752	I don't quite get this, you are sayi	I don't quite get this, you are saying Erlang is fault tolerant? I'm confused here because fault tolerance is something that the application using a particular language needs to make sure right? Sorry if I mistaken your statement.	antoaravinth	12.515841	-7.527839	comment	5.0	16.0	1529249297	12.881991
17333383	How much should I bill for webdev?	How much should I bill for webdev?	ixacto	12.807634	-6.523155	story	5.0	14.0	1529257606	10.000975
17355581	I have a few Rails gigs listed on my	I have a few Rails gigs listed on my linkedin from years ago, and I constantly get recruiter messages looking to fill RoR positions despite not having used it for years. I've been told by the recruiters that I chat with that senior Rails positions are increasingly harder to fill with each passing year.Whether that means the Job Providers in my sample simply aren't paying enough, Rails devs are sick of maintaining legacy Rails apps, or a combination of both, it seems like everyone I know who spent years working nearly exclusively with Ruby has now moved on to Go, Elixir, or Node.	xor1	12.732045	-6.954459	comment	5.0	15.0	1529504229	12.381798
17356718	This is a complaint I hear a lot, an	"This is a complaint I hear a lot, and it's very valid. My question is: which frameworks protect against this ""behemoth of tech debt"" inevitability that comes with using rails?I've worked with large rails, django, and node apps, and none of them have felt particularly enjoyable to work with from a feature development standpoint once a certain scale is achieved. This doesn't feel like a rails-specific problem to me, but that's just based on my experience."	save_ferris	12.751295	-6.898271	comment	5.0	15.0	1529511158	12.34823
17417206	Isn't Flask simpler for REST stuff?	Isn't Flask simpler for REST stuff?	rb808	12.808622	-6.5803475	comment	5.0	18.0	1530196794	10.0650625
17424744	Crystal looks interesting although I	Crystal looks interesting although I decided to learn Golang instead. It's more mature and the WIP features described below made me cautious (i.e. what other features are immature).Anyone know when Crystal will get concurrency-a-la-golang? i.e. running concurrent processes in parallel? At the moment I think it's still single-threaded. https://crystal-lang.org/docs/guides/concurrency.htmlStill no windows support: https://github.com/crystal-lang/crystal/issues/5430	Blackstone4	12.57357	-7.308681	comment	5.0	40.0	1530282949	9.993499
17424843	Great response. [EDIT - as highlight	Great response. [EDIT - as highlighted by the replies below you can't use Rails with Crystal...my fault for misreading the parent] I didn't quite realize that I could use Rails with Crystal. That would be make it more interesting if I knew how to use Rails ^^	Blackstone4	12.636561	-7.2427883	comment	5.0	16.0	1530283915	-11.2376375
17459813	Functional Reactive Programming	Functional Reactive Programming	niutech	12.546151	-6.449155	story	5.0	79.0	1530744021	8.43813
17501216	Rails was never really a major leap 	"Rails was never really a major leap forward in anything, more so an evolution with convention-over-configuration and a strong community presence that established best practices early. It also hasn't been ""cool"" for years, it's an entrenched player that ""just works"". One could argue with all the Rubyists going to Elixir that's part of the cycle, but for many people that's been a net positive.And then there's those altogether dropping Elixir for Go..."	Dirlewanger	12.732963	-6.9928484	comment	5.0	15.0	1531250079	12.414501
17613322	Disclaimer: I'm a maintainer but the	Disclaimer: I'm a maintainer but the next Dialyxir release makes a major improvement on this, thanks to contributions from Andrew Summers. He wrote a parser for the Erlangified term strings and uses the Elixir (1.6) pretty printer to print all the terms the way Elixir would. We're still fine-tuning the error messages and explanations but there is an RC on hex[0] - give it a spin if you haven't yet.[0] https://hex.pm/packages/dialyxir/1.0.0-rc.3	jeremyjh	12.588821	-7.493123	comment	5.0	15.0	1532556166	12.926079
17613466	I used to be really bullish on Elixi	I used to be really bullish on Elixir, but having used it in production for over a year (and having worked on libraries since '13), I think people are overselling the daily experience.The language itself is good, the tooling is pretty excellent, but there are issues for things like deployment, ops, and frankly a general excitement about neat things instead of focusing on bread-and-butter stuff like, say, timezones and timestamp formatting (something coming in a couple of releases, allegedly, but which was always an obvious absence).	angersock	12.672823	-7.4553423	comment	5.0	26.0	1532557385	12.920721
17613533	You don’t except if management are d	You don’t except if management are devs themselves. From a business perspective, Elixir is a terrible choice.Ive worker on Elixir over a year and it is great, but there are 0 devs and learning it is hard for newbies	tobyhinloopen	12.70959	-7.4423833	comment	5.0	35.0	1532557934	12.930382
17613899	Along the lines of comments below...	Along the lines of comments below... what are the sweet spots people are finding for Elixir?  I've used Erlang a lot in the past and like it, and would love to have an opportunity to use Elixir for some projects, but it seems that for regular old CRUD kinds of stuff, I'm not sure it's a win compared to Rails.	davidw	12.673556	-7.417597	comment	5.0	18.0	1532561815	12.875925
17650809	The main page doesn't do a great job	"The main page doesn't do a great job of showing what's interesting about Grain vs. JavaScript. The only hint is this: ""No runtime exceptions, ever. Every bit of Grain you write is thoroughly sifted for type errors, with no need for any type annotations.""Maybe show some examples of errors Grain would catch that JavaScript wouldn't, like Elm does: http://elm-lang.org/"	tlrobinson	12.741368	-7.2608314	comment	5.0	55.0	1533015859	12.176848
17664399	There are not currently many well-kn	There are not currently many well-known products that use it. (Bitbucket cloud being the exception.)That's not the best of reasons; just because Django is not used by Google doesn't mean it isn't the perfect tool for you.	paulddraper	12.837147	-6.516735	comment	5.0	15.0	1533142798	10.085632
17671478	A Brief History of the BEAM Compiler	A Brief History of the BEAM Compiler	jxub	12.369161	-7.3381457	story	5.0	326.0	1533219016	-8.717982
17715521	HHVM JIT: A profile-guided, region-b	HHVM JIT: A profile-guided, region-based compiler for PHP and Hack	matt_d	12.575896	-6.674446	story	5.0	38.0	1533733335	-8.980803
17753367	Crystal 0.26.0 released	Crystal 0.26.0 released	parvenu74	12.649905	-7.268509	story	5.0	102.0	1534192197	10.465879
17842812	I'm torn about this. I'm rooting for	I'm torn about this. I'm rooting for Elm and I think it currently might be the best frontend solution. I really like Evan's focus on developer UX and simplicity. This means removing things, making the language smaller and simpler. And to do that you need to maintain a certain amount of control.However this seems to have backfired. Too many in the community want this or that and/or don't feel their opinion is heard. Then they switch to something else. Unfortunatley I think something like ReasonML will win in the end. JS interoperability and just enough Algol syntax to staisfy the masses.Evan is between a rock and a hard place here and it's due to the current sentiment in frontend dev.	erokar	12.926612	-7.656226	comment	5.0	21.0	1535234382	-12.760485
17851385	Building a Tetris Game using TypeScr	Building a Tetris Game using TypeScript and Angular (2017)	ivailop	12.430651	-6.742269	story	5.0	51.0	1535376815	-10.44104
17856738	> your list of 30 random npm package	"> your list of 30 random npm packages does not satisfy the requirementI like Rails, but to be fair, doesn't Rails also require a list of 30 random gems? Unless things have changed, authorization and authentication aren't even built-in, so people have to navigate random third party gems, and remember, you don't want CanCan, but you want the fork, CanCanCan. Again, I like Rails, and maybe it's still the nearest to an all-in-one framework, but I think somebody who took the next step and created a truly all-in-one framework would win big.My current project:  $ grep -c ^gem Gemfile
  75"	schizoidboy	12.619949	-6.929038	comment	5.0	20.0	1535434320	12.347861
17857895	Rails really nailed the problems of 	Rails really nailed the problems of web development as it was 10 years ago by (rightly) pointing out that 97.2% of web projects were all about making an application server talk nicely to a relational database and then generating a front end that reflected the data model and that had javascript that Just Worked (everywhere).Web dev is in a different place now. Developers don't generally install and maintain application servers from the ground up. Scriptalicious was superceded by jQuery, which in turn was supplanted by vanilla js actually becoming useful. Relational databases are not quite as dead as some people would lead you to believe, but other types of DB are much more common now (key-value stores, search indexes, etc).Rails was probably one of the last truly open source projects (Most 	fergie	12.756119	-6.8274417	comment	5.0	30.0	1535454930	12.33263
18942260	Future of TypeScript on ESLint	Future of TypeScript on ESLint	ingve	12.378859	-6.651955	story	5.0	233.0	1547840450	-10.413752
18963163	">> How does TypeScript make your ""pr"	">> How does TypeScript make your ""productivity drop enormously- Slow debug cycle due to increased compile time. If using TDD, it takes longer to run tests. The delays adds up - Especially on large projects and especially if you're not used to having a build step during development.- Sporadic source mapping issues/bugs which makes it hard to fix things (I had an issue with Mocha tests last week where it was always telling me that the issue was on line 1). I've worked with TypeScript on multiple projects across different companies but every single time, there has been source mapping or configuration issues of some kind.- Type definitions from DefinitelyTyped are often out of date or have missing properties/methods. It means that I can't use the latest version of a library.- Third party libra"	cryptica	12.370658	-6.80848	comment	5.0	19.0	1548101190	-10.447599
18968583	Where does the Pharo runtime run? To	Where does the Pharo runtime run? To which platforms can I bring its solutions? are these standalone binaries or can I create libraries or code which play well with other languages and systems?Every time I look at a programming language, and at the HN it is every second day, I think about what kind of problems can it solve, and for what kind of platforms these compile/run their runtimes.. and surprisingly not many programming languages inform properly about the most basic feature, and prefer to go deeper into their.	nudpiedo	12.331009	-7.2541385	comment	5.0	95.0	1548168547	7.0897202
18972546	> Ruby was optimized for the develop	"> Ruby was optimized for the developer, not for running it in production,"" says Sid. ""For the things that get hit a lot and have to be very performant or that, for example, have to wait very long on a system IO, we rewrite those in GoSince they prefer the language patterns of Ruby but want better performance for concurrent processes, it seems like this would be a perfect use case for Elixir with Phoenix. I wonder if they considered it."	vaer-k	12.729607	-7.2491074	comment	5.0	42.0	1548191670	12.752739
18973149	Or Elixir, or Rust, or Node. Having 	Or Elixir, or Rust, or Node. Having spent time with all of these options, Rails is still really really good for a lot of use cases. Go comes nowhere near Ruby's readability for me (but I like the lack of surprise).Personally I'd love something typed, performant, and as readable as Ruby with a convention focused platform like Rails. Elixir + Phoenix is probably the closest I can find, but not a perfect fit. Maybe close enough though.	rapind	12.607824	-7.060521	comment	5.0	17.0	1548195353	12.360875
18990229	The JS ecosystem has its flaws, but 	The JS ecosystem has its flaws, but one has to appreciate the speed at which momentum shifts, making clear winners obvious.The move towards TypeScript 'winning' has been fast, and to everyone's benefit.	yaseer	12.367192	-6.6786795	comment	5.0	87.0	1548348025	-10.455748
19096177	Runtime verification in Erlang by us	Runtime verification in Erlang by using contracts	lainon	12.469261	-7.5025377	story	5.0	138.0	1549468874	-9.326027
19107505	First, I really like the idea behind	"First, I really like the idea behind this. All the babel rollup typescript stuff is a big mess when trying to publish a package.That said, I feel like the authors made some choices that make their lives easier at the cost of having shipped a virtually useless tool. For example:    - The standard typescript builder can only generate ES2018
    - The web bundler can only generate ES modules

These two together means that your package won't work on anywhere but the most modern browsers and Node versions, except if your package's users somehow configure their Webpack (or whatever) to run your module through Babel (totally beating the purpose of all this). This is exactly the kind of complication I'd want tools like these to solve for me.Sure, there's a place for the ""this will only work on cut"	skrebbel	12.430508	-6.465388	comment	5.0	25.0	1549566148	-10.43049
19126478	The people who complain about Ruby p	The people who complain about Ruby performance are really missing the the forest for the trees, IMO. Most people are using Ruby for web development. Web development has hundreds of milliseconds of latency that there is absolutely no way to get rid of (in the form of transit to the server and back to the client). Then you're doing a bunch of I/O. The actual amount of time spent executing Ruby is just not significant in all of that. Ruby could be 2x faster than it is now and it would probably make a sub-10% difference in response time for most of the endpoints in most of the Ruby/Rails apps I've encountered.	toasterlovin	12.685091	-6.968862	comment	5.0	27.0	1549776019	12.33714
19166756	I'm curious if Crystal was considere	I'm curious if Crystal was considered given its speed and similarity to Ruby.	joemccall86	12.6314745	-7.2415123	comment	5.0	24.0	1550183903	-11.249503
19207823	I fundamentally disagree with your p	I fundamentally disagree with your premise, despite seeing how you came to that conclusion. Elixir/Erlang are particularly optimized for the operations you're speaking about, but Elixir is very Lisp-ey under the hood. Macros are a game changer. Combine that with a strong standard library, many of which is delegated down to the Erlang calls anyway, and the the pure developer joy that comes from coding in Elixir in both the small and the large, increased debuggability from having highly readable, functional code.But the real power comes from the BEAM. Turns out modern servers map very strongly to phone switches of the past, and the distributed system primitives given by the BEAM keep on ticking, 30 years later. Modeling a web server as a single process per request, the supervision model, and	_asummers	12.561107	-7.4999285	comment	5.0	42.0	1550671307	12.888636
19226705	This wouldn't really be Hacker News 	"This wouldn't really be Hacker News unless an arrogant Lisp devotee shows up and claims that Lisp does everything better, so I'll now try to be that arrogant Lisp devotee.Sean Johnson has given a fantastic talk about pattern matching in Clojure:https://www.youtube.com/watch?v=n7aE6k8o_BUHe offers some interesting comparisons between Clojure and Erlang.Going even further, I recently discovered Dynamatch:https://github.com/metasoarous/dynamatch""Dynamatch addresses these challenges by enforcing a certain structure in our ordering of match clauses such that many of the incidental complexities of order dependence in a dynamically extensible pattern matching system become more manageable.""Sometimes it seems like Erlang or Haskell has the last word in Pattern Matching, but I'm not aware of anythi"	lkrubner	12.421458	-7.6556535	comment	5.0	23.0	1550853667	-11.03962
19239626	> Sending messages between Erlang pr	> Sending messages between Erlang processes was not as cheap as we expected, and the reduction cost — Erlang unit of work used for process scheduling — was also quite high.This is really surprising to me, and definitely something the elixir team should look at optimizing. Sending messages should be extremely fast.	dev_dull	12.600133	-7.4866595	comment	5.0	16.0	1551030807	12.913704
19240154	Loglisp: An Alternative to Prolog (1	Loglisp: An Alternative to Prolog (1982)	grzm	13.136935	-7.293372	story	5.0	79.0	1551037148	-12.485797
19240074	Sure !Think about how prinf / consol	Sure !Think about how prinf / console.log / print .... works in traditional settings.- How would you make it so that printf doesn't crash your entire program if the console hangs.- how would you isolate a single codebase's IO operations ?- How would writing to console work in a multi threaded environment ? multi server ? 100 servers ?Haskell sort of tries to answer these questions but I am not sure how its going go work out for them, in Erlang's process based universe all those questions have been answered already !	wrong_variable	12.348011	-7.528867	comment	5.0	31.0	1551035912	-9.270091
19247982	It took me a while to figure out whe	"It took me a while to figure out whether this is an HTTP client library or a server library. Turns out it is the former. Nice! I like that it's in-process. I wish more Elixir libraries would default to such a design.(EDIT: I had accidentally written ""latter"" instead of ""former"" above, causing a bunch of people to correct me, thanks for that)"	skrebbel	12.688751	-7.4577065	comment	5.0	15.0	1551119006	12.95322
19248231	A lightweight serverside Elixir fram	A lightweight serverside Elixir framework like this is exactly what I was looking for earlier this week. Phoenix is really clunky in my opinion and pretty foreign (Ruby/Rails-like) coming from a lightweight Flask/Express/Go background.	KhoomeiK	12.784519	-7.1040926	comment	5.0	16.0	1551120620	12.738483
19268180	(I'm no expert but..) I recently got	"(I'm no expert but..) I recently got into Prolog, and Alloy sounds very similar. So I was asking ""How is it different?"" Strangely, in the FAQ, no mention of Prolog. I found just this:>How does the Alloy Analyzer differ from theorem provers?>The Alloy Analyzer's analysis is fully automatic, and when an assertion is found to be false, the Alloy Analyzer generates a counterexample. It's a ""refuter"" rather than a ""prover"".(i.e. where Prolog would just write ""no"" if nothing found.) In the Alloy* paper also, no mention of Prolog. To find a counterexample, couldn't you set Prolog to find one?"	yesenadam	13.147944	-7.2970076	comment	5.0	18.0	1551314797	-12.487556
19279088	""" they said that for those who use P"	""" they said that for those who use Prolog in production it is a real competitive advantage that they don't want to announce to the world;""with due respect to prolog (which is a mindbending language), the proponents of every niche language say the same thing. ""it is so powerful that users don't talk about it and that is why you don't hear about it""I've heard many variants of this with respect to Forth, for example.The reality is that devs can't stop talking about the languages, tools, and frameworks they use.The simpler explanation is that next to no one actually uses prolog in productions, because it is, well, a niche language (which doesn't take away from its coolness)Color me skeptical about ""secret weapons""."	plinkplonk	13.1491995	-7.294628	comment	5.0	19.0	1551433174	-12.480428
19300675	I'm curious what Elm offers that can	I'm curious what Elm offers that cannot be done in TypeScript.	mikece	12.957355	-7.648973	comment	5.0	16.0	1551702091	-12.705854
19327504	Having some more context would be ni	Having some more context would be nice, but here's some tips as a web developer.* Don't save files on the desktop.* Create a Projects or Dev folder in your home directory and make a folder for each project. (For Web development, I use Laravel Valet which automatically makes a foldername.test vhost inside ~/Dev.)* My Downloads folder is very messy. I could probably set up a job to delete files older than 6 months, but I have plenty of space, so no need (yet).	fredsted	12.77259	-6.5706344	comment	5.0	18.0	1551962396	10.331605
19346790	Elixir is one of those languages tha	Elixir is one of those languages that changes you. I realize its a ruby flavored wrapper on top of erlang but I don't care. Coming from an OOP/C based language background, it took me a while to get it. Implicit returns? Immutable data? Pipes?? No inheritance??? No for loops????? And all thats just if you use the phoenix framework which maps pretty analogously back to a standard web server flow. Once you start digging into Supervisors and umbrella projects, the top of your head will get blown clean off. It's a hell of a drug.I am glad to hear there are more companies out there giving it a try. Any time I see a job posting for a company that uses it, I give them a hard look. It tells me that they are a) hiring people who are of a certain mindset (see the python paradox[0]) and b) they unders	vikingcaffiene	12.658353	-7.441479	comment	5.0	67.0	1552148210	12.92573
19416614	Sounds more like what many people wo	Sounds more like what many people would call event-drive architecture, these days.People tell me Ruby is message passing, but it doesn't seem to match your description at all.	chrisseaton	12.404012	-7.1595798	comment	5.0	29.0	1552856850	-12.075398
19428545	Does any free web framework have som	Does any free web framework have something more thorough than rails' Active Admin?Django admin seems pretty unfinished by comparison. Haven't seen anything actually better.	etaioinshrdlu	12.845119	-6.5450225	comment	5.0	18.0	1552976928	10.103288
19430922	I spent a couple of years dreaming o	I spent a couple of years dreaming of getting paid to work in Ruby and Rails and about 7 years doing so. There are many things I loved about Ruby, and Rails brought a ton of good ideas to web development, as this post describes (though I don't agree with all the highlights).I've since moved to using Elixir and Phoenix, and then even more recently, done some consulting on a Rails project. So the contrasts are on my mind.My perspective now is that the advantages Ruby/Rails have over Elixir/Phoenix (community size and number of libraries) are circumstantial, and the advantages Elixir/Phoenix have (fault tolerance, concurrency, speed, less requirement for external tools) are inherent in the VM.Yes, speed of development and maintainability matter. And yes, you can write good or bad code in any 	nathan_long	12.7345085	-7.039067	comment	5.0	29.0	1553004590	12.601975
19451838	I think link should be changed to ht	"I think link should be changed to https://w3techs.com/technologies/details/pl-php/all/all, because it points to more actual results. On that page, we can see a diagram that shows many websites has not been updated to work with latest PHP 7+, which I'd say is quite shameful and/or method used by authors of this report to check PHP version is not adequate (I guess it is now a common standard to hide version of the used interpreter in a HTTP header, while it wasn't obvious todo task when only 5.x was available). Additionally, I found it is quite wrong to putting equal mark between PHP and Hack (HHVM) in section of ""Popular sites using PHP"".Edit: Fixed some language errors and typos."	piotrkubisa	12.781495	-6.642761	comment	5.0	57.0	1553173746	-2.7085037
19452997	honest,sincere question:i don't unde	honest,sincere question:i don't understand why people do this - build these frameworks. it's hundreds of independent labor hours and forgoes the key value prop of python (or whatever language they're reimplementing the wheel in): the existing ecosystem. i would never use this over flask or django because the community around each of those frameworks. that includes plugins, docs, blog posts, SO posts, etc. further more i'm not going to trust that one shop will exist forever and maintain this framework to the same extent that django is maintained. so in effect by adopting this framework i take on the maintenance responsibility. but why would i ever do that? it's not interesting work (very little groundbreaking research left in the http server space i think), it's thankless, and it's just com	mlevental	12.748258	-6.5328646	comment	5.0	20.0	1553180066	10.054093
19461556	> that shows many websites has not b	> that shows many websites has not been updated to work with latest PHP 7+, which I'd say is quite shamefulSpeaking as an ex-hoster here who had to look after a fleet of shared servers running PHP (000's of sites) for 15 years, sadly life is not that simple in the trenches. The major problem with PHP is breaking changes. Even within the 5.x releases there were enough breaking changes such that upgrading from say 5.3 to 5.6 could break a site. The jump from 5.6 to 7.x has enough breaking changes to make you cry. I think there should have been a commitment to maintain 5.6 for the next ten years, if only for security fixes.Now I'm not suggesting that developers shouldn't go back and fix stuff that breaks because the PHP folks removed/altered that functionality (with the good intentions of enc	teh_klev	12.775825	-6.644161	comment	5.0	44.0	1553254677	10.3273535
19478735	The author switched to kotlin from c	The author switched to kotlin from clojure, kotlin's interop with java is leagues ahead of clojure.	Scarbutt	12.392641	-7.6710005	comment	5.0	22.0	1553461037	-11.301613
19498732	Ask HN: Datalog as the only language	Ask HN: Datalog as the only language for web programming, logic and database	truth_seeker	13.198732	-7.022416	story	5.0	21.0	1553671770	-12.420679
19517689	Why miss it, come on back, the water	"Why miss it, come on back, the water's still warm and the dev is still as fast as ever in Rails. Honestly, the JS stacks all seem vastly more annoying on so many levels.It seems like the JS ecosystem changes so fast because it knows better is possible, so it just tries to reinvent itself over and over.The JavaScript world starts with this weird prototype based language with a syntax that looks like it might be something more class based. From there it goes to dependency bundling hell, callback hell and Christmas tree code indenting, no standard implementation, and a library required for everything under the sun (Left-pad!) And somehow this is what the cool kids are into? I never liked Rails because it was ""cool"" I liked it because I love getting stuff done, fast."	ericb	12.718789	-6.693859	comment	5.0	48.0	1553815833	12.319933
19518231	Rails is FANTASTIC!I work on a hybri	"Rails is FANTASTIC!I work on a hybrid React-on-Rails application and working on the React portions is so. fucking. painful. Seriously the shit people come up with with this ""tool"" makes corporate-hack Java programmers look good. I am always taking the backend Rails-y tickets if I have the chance"	tomc1985	12.79286	-6.7052293	comment	5.0	78.0	1553821330	12.298319
19518025	Here's how i replace Rails with the 	"Here's how i replace Rails with the ""modern stack"":- Compile Graphql schema into Typescript typings + Fragments for ""Active Record""- React Hooks as controllers action.- React Suspense for HTML rendering.- Apollo for graphql caching- ExpressJS for middlewares.- @reach/router for routing.- @loadable/component for code splitting.- Serverless for API.I missed Rails, too. But i found that the ""modern stack"" is not bad at all. It just needs more time to investigate to find out the best way to reuse features."	revskill	12.790409	-6.753632	comment	5.0	27.0	1553819203	12.3209095
19520620	Ask HN: Is the need for SPA only a q	Ask HN: Is the need for SPA only a question of team size?	polote	12.823426	-6.447349	story	5.0	7.0	1553858240	10.223356
19530757	I haven't written anything in TypeSc	I haven't written anything in TypeScript, though I have some friends that love the language; I got annoyed at having to supply bindings for obscure languages.If you can get past the initial hurdle, is TypeScript worth it for Node.JS stuff?	tombert	12.368862	-6.7685704	comment	5.0	17.0	1553968528	-10.43034
19541741	Modern Prolog Implemented in Rust	Modern Prolog Implemented in Rust	xvilka	13.084686	-7.3268943	story	5.0	93.0	1554111305	-12.471339
19543850	With Python you get:- The best-gover	With Python you get:- The best-governed language in all of software, and the best-governed web framework- A huge ecosystem of libraries for everything from data science to email processing, that are (mostly) easy to read and modify and free from systemic security issues. And pretty much every major company with an API has an official Python library for that API.- The standard language taught at most of the top CS programs around the world- A web framework that's had almost no major security issues over the 10+ years its been aroundWhat exactly would you get in terms of benefits from switching to Ruby? I'm not saying Ruby or Rails are bad tools, I just don't get why someone who already knew Python and Django would switch.I get that if you run a dev shop it might be a better choice for just 	Alex3917	12.589449	-6.9066195	comment	5.0	23.0	1554130412	12.279801
19544066	> The people behind Django are one o	> The people behind Django are one of the sharpest set of developers out there.That may be, but it doesn't really matter to me if they put their political views into their code. It can literally be the best framework out there, built by the sharpest minds in the world and I would still use another framework even if it would hurt me economically.	ecmascript	12.803429	-6.5146976	comment	5.0	30.0	1554131379	10.077678
19556795	I don't understand why Peter Bright 	I don't understand why Peter Bright reports on MS at Ars? He obviously doesn't like their tech (calling TypeScript a variant of js?) and doesn't bother to check facts (no Python in VS is not a novelty, PTVS supported VS 2013 already and IronPython is old as rocks.). Who wants to read 3 paragraph rant about releases and versioning?	yread	12.367502	-6.717386	comment	5.0	26.0	1554227645	-10.444652
19561031	Basic HTTP Authentication in Elixir/	Basic HTTP Authentication in Elixir/Phoenix	pplonski86	12.821941	-7.1183786	story	5.0	36.0	1554269885	12.748745
19600490	> TypeScript over C#TypeScript is a 	> TypeScript over C#TypeScript is a transpiler for JS. C# is a server side language. Can you please clarify how former is the replacement for latter?	mandeepj	12.354928	-6.7730885	comment	5.0	15.0	1554677847	-10.412234
19600696	The amount of fanboyism in these com	"The amount of fanboyism in these comments is astounding.TypeScript is a great tool.At the same time, people have written apps with vanilla JavaScript for a very long time now, and it works just fine.  If types are really that big a deal that you have a hard time writing an application without a compiler checking your types, you should reevaluate what you're doing.  It's not ""dangerous"" to use plain ol' JavaScript, and implying that others are foolish for not using it reeks of software snobbery.Whoa, you mean people really still use plain JavaScript, bruh?    I mean, don't you need like punchcards for that?  That's how grandpas program, bruh.  You can't even, like, scale an app without type-checking.  An app written without TypeScript is like a house of cards, dude."	ravenstine	12.343844	-6.776186	comment	5.0	21.0	1554680233	-10.428243
19690688	The philosophies of software languag	The philosophies of software languages, from Go to Elixir	UkiahSmith	12.610468	-7.472951	story	5.0	26.0	1555592874	12.92152
19697483	It looks like they've conflated type	It looks like they've conflated type with class. If so, that's the antithesis of duck typing. The impedence mismatch to Ruby seems to me an overwhelming contraindication.	inopinatus	12.395038	-7.151176	comment	5.0	17.0	1555655275	12.342176
19697699	My concern about all of this is that	"My concern about all of this is that it might lead to basically two ruby communities; Rails and Rails devs will mostly keep writing type free code (dhh has always indicated he's not a fan of types), but a lot of other rubyists will gradually introduce types into their code. This could create two different ecosystems with different gems, best practices, blogs etc etc etc. 
We will see how it plays out but I'm quite conflicted about this one. The good thing is that it's optional."	joelbluminator	12.60241	-7.0337358	comment	5.0	20.0	1555658718	12.379655
19707399	Joe Armstrong on Elixir (2018)	Joe Armstrong on Elixir (2018)	tosh	12.683249	-7.4604554	story	5.0	140.0	1555777770	3.3879862
19714794	Ask HN: How to learn front-end devel	Ask HN: How to learn front-end development as a back-end web developer?	lichtenberger	12.326332	-6.650031	story	5.0	19.0	1555883588	-11.365646
19714970	I've just been trying to get back in	"I've just been trying to get back into elixir recently, myself. I'd done some basic crud 'helloworld' stuff when I first tried about a year into professional development.I've since had the Fortune to spend time learning about cloud native apps, distributed service patterns, and supporting infrastructure (spring cloud, pcf, vanilla k8s, gcp) and now returning to elixir having at least better understanding of what erlang and OTP offers.I'm super excited to see I'm not alone in finding this sort of stack is worth fiddling with(although, I tend to pick Vue when not using angular for work).Thanks for posting this!!For those interested in what resources I'm leaning on:
The Manning 'Elixir in Action' and the Pragmatic Programmer's graphql texts along with exercism.Anybody else have any preferred "	em_jones	12.673229	-7.440359	comment	5.0	19.0	1555885553	12.909513
19727047	Inside Erlang – Joe Armstrong tells 	Inside Erlang – Joe Armstrong tells his story (2014)	lelf	12.557608	-7.5117292	story	5.0	209.0	1556013957	12.908525
19853994	Love the concept, love the push. But	Love the concept, love the push. But to be sincere, won't touch it with a pole because of Dart. However,...Why o why is this thing not written with/for TypeScript?	otobrglez	12.333821	-6.876798	comment	5.0	15.0	1557267777	-13.819928
19882521	"Prolog is a terrible ""programming la"	"Prolog is a terrible ""programming language"" - and I would never try to use it as such.  But it is (at least conceptually) an excellent query language.  In that regard, it is much closer to SQL, as is its domain of reasonably applicable problems.Clarification: I dont actually think prolog is terrible (I credit it as the most exciting language I have ever learned), I just mean its not intuitive to ""program"" with in the imperative sense of telling a computer what to do.  What I mean by it is excellent as a query language is - given a set of data, it is great for drawing conclusions from that data (but not in the same way as a ""traditional"" query language like SQL)."	gavanwoolery	13.154221	-7.2644577	comment	5.0	25.0	1557524544	-12.482658
19918158	There are comparable things with oth	There are comparable things with other frameworks too.For example I wrote a course on building a SAAS app with Flask. It's available at: https://buildasaasappwithflask.com/It covers everything about user registration, profiles, subscription billing, 1 time billing, invoicing, and about 50 other things you would likely want to do in a SAAS app or any application really.The course comes with the source code along with 15+ hours of video explaining every line of code in stages, life time free updates and life time support for close to half the price of what Spark charges just for the source code for 1 site license (with the Flask course you can use the code in however many projects you want).Spark's business model seems interesting though. I don't use it personally but do you just get the sou	nickjj	12.713558	-6.4488974	comment	5.0	27.0	1557917900	7.2096043
19918679	"> ven assuming that ""modern"" PHP man"	"> ven assuming that ""modern"" PHP managed to come up with better ways to deal with all of this, I assume that these obsolete functions and operators still linger for backward compatibility? If so how do you avoid them?I think the ""path of least resistance"" is important: developers are time-constrained, understanding-constrained, lazy (if they're virtuous), etc. There's a big incentive to do whatever is easiest/quickest.When I last used PHP, about 5 years ago, there were OOP APIs cropping up to replace many of the standard global functions; namespaces had just been introduced; closures had become useful; frameworks like Symfony (and Drupal 8) were becoming established, rather than the old ""plugin"" approach of throwing around arbitrary code and hoping for the best; dependencies were being man"	chriswarbo	12.746439	-6.642404	comment	5.0	24.0	1557923048	10.331683
19920759	Often when there is a post about PHP	"Often when there is a post about PHP I read over these treads sort of subtly trying to figure out how a language with such a large user base has remained basically invisible to me. And I don't think I live in the HN bubble, though I do use a lot of Python, in my consulting work I've also done plenty of work with .NET, JVM to a lesser extent and other ""boring"" tech.But PHP has literally never come up, even as a suggestion or as a tool that is a small part of the company stack or whatever. It feels like I'm looking into a strange parallel universe of software development reading through these threads. PHP devs, where are you?"	cbdumas	12.760408	-6.639067	comment	5.0	24.0	1557936351	10.36534
37595986	I cannot support much in terms of mo	"I cannot support much in terms of money or time currently, but somehow I'd wish there are ways to speed this up.Sure, sponsoring from big corps comes with their own problems, but maybe that would be an option? There are quite some that use Elixir (or BEAM in general) out there...Idk what would be the best approach.But I am very convinced that Elixir and the wider ecosystem (not only phoenix liveview) is (or could be) the very best ""default"" web app stack we have right now in general. It solves _so many_ problems of other comparable tech stacks right out of the box, one way or the other, and is the only one I've noticed a sentiment of pure joy from seasoned devs that also lasts well after the novelty wears off.At this point it looks ""only"" like a number problem to become mainstream (again a"	anonyfox	12.701659	-7.3591876	comment	5.0	36.0	1695294861	12.875365
37597645	As someone who's enough of an early 	As someone who's enough of an early adopter to have been running Rust in production since ~2016, and who takes a good look at Elixir every few years, there are two major things holding me back:1. Lack of strong typing. Dynamic typing is great on 10,000 line projects with two developers. Once you reach 50,000 lines and have a little developer turnover, it stops being fun. And dynamic typing also usually means far less IDE support. I'm spoiled; I want auto-complete.2. Elixir is amazing for UIs like Discord, where your users interact in real time. If each of your users lives in their own little world, Elixir's greatest strengths have less chance to shine.Right now, TypeScript is a no-brainer, because React is the dominant choice for UIs, and using the same language on both client and server i	ekidd	12.503558	-7.435003	comment	5.0	17.0	1695304459	-10.407979
37622632	Coding Guidelines for Prolog (2011)	Coding Guidelines for Prolog (2011)	tosh	13.138541	-7.3000865	story	5.0	126.0	1695471642	-12.497637
37637684	Are there no typed languages on BEAM	Are there no typed languages on BEAM?Or some Typescript style front for Elixir?	actionfromafar	12.512887	-7.4252386	comment	5.0	22.0	1695593669	-9.172035
37737337	Ask HN / TypeScripters: How Choose J	Ask HN / TypeScripters: How Choose JavaScript?	tipiirai	12.385885	-6.7421775	story	5.0	2.0	1696250512	-10.476806
37764654	Is typescript strong typing though?I	Is typescript strong typing though?I’ve been through several typescript projects where ‘as unknown as any’ makes me wish we didn’t even have typescript in the first place.If you can’t trust the type system it’s worse than not having one :/	dartos	12.327529	-6.8805327	comment	5.0	21.0	1696425426	-10.422845
37787254	> Rails is great when you stick with	> Rails is great when you stick with the defaults and a land of pain as soon as you leave them.You just described every framework. Frameworks are great if your application is fairly simple and aligns with its way of doing things. Libraries are where to look if you need a more complex, flexible setup.	eikenberry	12.738585	-6.8076296	comment	5.0	20.0	1696568465	12.307834
37804005	How are PHP haters doing now? :)	How are PHP haters doing now? :)	minroot	12.775412	-6.632238	comment	5.0	20.0	1696701619	10.347802
37925167	As a newcomer to Javascript and its 	As a newcomer to Javascript and its tooling, I would like to know how people use ESLint. So please share your config.	whinvik	12.355674	-6.4829884	comment	5.0	17.0	1697607401	-10.387459
37926508	I think we need to stop with all thi	I think we need to stop with all this PHP hate.Sure, 10-20 years ago the language was more hacky than anything, but nowadays its a solid choice for backend stuff, with lots of activity, new innovations, good, proven frameworks (Symfony, Laravel) and also lots of people who have experience in it.I have a few projects running a PHP API with a JS frontend (Vue in my case) and it works pretty nicely. Best of both worlds!	tacker2000	12.741889	-6.563727	comment	5.0	37.0	1697621385	10.307637
37959084	I'm looking forward to this series. 	"I'm looking forward to this series. I feel like I'm getting ""grumpy old man"" syndrome with Ruby. I've been using Ruby for long time and I feel like a lot of the changes we get now are more ""wouldn't it be cool if..."" instead of ""this is a really solid, useful addition"" changesThat said, I do really like how Elixir does some things."	phaedryx	12.706977	-7.304182	comment	5.0	21.0	1697823280	12.779587
37959065	Ruby is not a bad language, but I wo	Ruby is not a bad language, but I would not invest in it unless:1. I am Shopify or another huge Ruby shop with a lot of existing engineering knowledge, libraries, team members etc.2. I am interested in building something with RailsOtherwise I cannot think of a compelling reason to choose Ruby.The red flag here is that you dislike Python and JS for personal reasons which makes me think that any reasonable advice will not be important to you.	whalesalad	12.628294	-6.9919877	comment	5.0	42.0	1697823219	12.349983
37965633	I feel like the Erlang/OTP would be 	I feel like the Erlang/OTP would be perfect for the MMO use case. It’s what I’d try first if building from scratch.	nvarsj	12.582599	-7.5155187	comment	5.0	25.0	1697884562	12.906246
37997549	I built my startup in Rails. I event	I built my startup in Rails. I eventually re-wrote the entire application in Go as a monolith. In my experience, Go is just as productive if not more productive due to fewer errors at runtime. My day to day life is a lot better with Go-- no more exception emails, firefighting, etc.I really liked Rails and used it for several years, but Go came when Rails was making things difficult.. Ruby's heap memory kept growing and not being released or released too slowly. My server was using 12 GB of RAM and could hardly handle 300 concurrent users.The Go version uses 25 MB of RAM and can handle many thousands of concurrent users.edit:I understand the memory/concurrency issues are not Rails' fault entirely. It's likely ActiveRecord and Ruby as a VM that caused most issues, but it's part of the Rails 	mortallywounded	12.687878	-6.97503	comment	5.0	31.0	1698147037	12.31545
38037574	"""Useless Ruby sugar"": Pattern matchi"	"""Useless Ruby sugar"": Pattern matching (Pt. 2)"	amalinovic	12.441897	-7.0655155	story	5.0	53.0	1698409812	12.38009
38053053	I heard he even considered casting P	I heard he even considered casting Perl before swine	bdcravens	12.345057	-7.028042	comment	5.0	17.0	1698524548	13.180793
38053241	Love Elixir and Phoenix, but the las	Love Elixir and Phoenix, but the last time I checked (granted, two years ago), the major lack was learning material for people who weren't coming from Ruby experience.	yewenjie	12.73039	-7.3176823	comment	5.0	15.0	1698526249	12.811545
38168032	Don’t bring TypeScript into this. It	Don’t bring TypeScript into this. It is very possible to write sub 100ms procedures in TS, but an inelegant algorithm will be slow in any language, eventually.	explaininjs	12.364114	-6.805788	comment	5.0	26.0	1699300709	-10.443591
38184461	Looks decent. I somehow missed the p	Looks decent. I somehow missed the previous thousand discussions.I’d love to hear from anyone running it in production.I have always been BEAM-curious, but never felt comfortable running it in production, as it feels like a big black box, and I’m not confident that I’d be able to diagnose problems as readily as I can in .NET, Go, or Node. I’m not sure why I feel that way about BEAM.	christophilus	12.412801	-7.3547716	comment	5.0	27.0	1699399010	2.0764673
38197428	This article doesn’t make good on it	This article doesn’t make good on its claim to explain why this “Rails convention” is bad. It’s probably actually good. I wouldn’t have clicked on it otherwise. Rude, IMO.	wilg	12.764816	-6.921818	comment	5.0	25.0	1699479329	12.356355
38215065	Coming from F# and only dabbled in E	Coming from F# and only dabbled in Elixir, I find the language unfortunately a bit confusing. For instance, the signature of a function only reveals the name and number of the parameters but not type, so in a big library, it’s quite hard to recognize (mentally) what goes into what and one can only see one plugged the wrong parameters after one had ran and debugged the code. In strict-type language like F#, such issues would be detected right away during coding, thus it helps to reduce the time and effort immensely.So my question is what are the main selling points of Elixir besides the Erlang environment?	sinuhe69	12.623817	-7.4820027	comment	5.0	16.0	1699590701	12.930766
38249605	>if you open up any Rails applicatio	>if you open up any Rails application, it looks basically the same in structure whether it is the biggest Rails app there is or a new oneI've never worked with Rails, but this sounds amazing. One of the things I really hate about the Node.js ecosystem is that there are no clear conventions, the structure is always different even when the same framework is used. It's a mess. The exception is probably Next.js but it's more frontend-y.	brap	12.771657	-6.8365593	comment	5.0	47.0	1699880162	12.322307
38250611	Is there a comparable framework that	Is there a comparable framework that does what Rails does but is somehow 10x faster? I wouldn't use Rails for everything but the fact that plenty of companies like Shopify are serving millions of requests per second with it shows that it's probably acceptably fast for mega scale apps.	DoesntMatter22	12.73691	-6.920096	comment	5.0	26.0	1699886520	12.340774
38331065	Ask HN: Are you happy you chose Fast	Ask HN: Are you happy you chose FastAPI over Flask/Django/Sanic/etc.?	networked	12.50264	-6.6428127	story	5.0	16.0	1700387995	-9.3194685
38361864	I’ve found TSX to be a better altern	I’ve found TSX to be a better alternative to ts-node. It seems to have more sensible defaults in 2023. https://github.com/privatenumber/tsx	rickcarlino	12.371751	-6.5783834	comment	5.0	25.0	1700562888	-10.398629
38403420	At that point, I ask myself whether 	At that point, I ask myself whether it's possible to interface strongly-typed PHP with Java. Like, either a PHP frontend for JVMs (just like Kotlin and whatnot), or run Java code inside PHP in a run-and-throw-away model.Almost everything but async/threads that I use in Java stuff has an 1:1 mapping.	mschuster91	12.728986	-6.645976	comment	5.0	21.0	1700829962	10.3012
38406318	This is from 2021. I'd be curious if	This is from 2021. I'd be curious if Elixir is still in use, or has expanded at all.Side note: Pablo's blog posts are always quite good.	sb8244	12.698552	-7.457652	comment	5.0	27.0	1700847831	12.949018
38407011	As a lifelong rubyist, this is defin	"As a lifelong rubyist, this is definitely what I would say ""useless"".  Maybe it's just because I've been stuck in Ruby 2.6 ~~hell~~ land for so long but I remember seeing a colleagues leetcode challenge for a job interview that used Ruby 3.1 and he used a bunch of these new syntax sugars and I was really rubbed the wrong way by them.  Code the omits arguments is neither more readable (what exactly is getting passed around here?) or maintable (what happens when you have  some condition that may apply to one of the arguments, then you just need to unwrap all the ""nice"" things and do it more traditionally).The elipsis ... especially rubs me the wrong way because multiple periods either .. or ... denotes range types, but now we have a special case where ... is something completely different.  "	thowaway91234	12.426787	-7.0812364	comment	5.0	18.0	1700852420	12.384787
38446444	Ask HN: Interactive tutorials for le	Ask HN: Interactive tutorials for learning basics of terminal?	sarupbanskota	12.5996475	-6.994923	story	5.0	8.0	1701183659	12.355363
38455442	Would love to see the infrastructure	Would love to see the infrastructure bill. Anything is possible if you throw enough $$$ at it.I’m not a ruby hater, but the average joe can’t accomplish this. If you consider each store an individual instance with an isolated/shard of a db it makes sense. But the underlying foundation is immense.Partitions are usually the key to scale.I’d imagine parts of their infrastructure would be better served by different runtimes. They’d save a lot of money.But if your entire team is hyper focused on ruby there is something to be said for a huge monolith.	whalesalad	12.685706	-6.9914947	comment	5.0	27.0	1701230838	12.335883
38455727	Maybe you haven't worked on a large 	Maybe you haven't worked on a large production Rails app? Rails takes 3-4x the infrastructure hosting costs as other languages/frameworks. Not to mention the insane testing costs from Ruby test bloat.	stevebmark	12.730307	-6.947749	comment	5.0	33.0	1701233667	12.331442
38462370	Show HN: Custom GPTs for Developers	Show HN: Custom GPTs for Developers	timurcatakli	12.3825655	-6.763878	story	5.0	24.0	1701279387	-10.493283
33103783	> If you have a team of erlang devel	> If you have a team of erlang developers do it in erlang (or whatever). Who cares about the marketAs an IC, I care about the market.  I go to work exclusively to exchange my labor for money to support my addiction to food and shelter.  When it was time to change jobs as your bog standard enterprise dev, it was much easier to throw my  resume in the air and get a job offer by being an experienced C# developer than it would have been if I had spent three years writing software in Erlang.And most job interviews outside of tech companies  where most developers work are not going to be language agnostic nor are they going to have you reversing binary trees on the whiteboard while juggling bowling balls and riding a unicycle on a tightrope.As a reformed former dev lead,  why would I hire an Erl	scarface74	12.574718	-7.521138	comment	5.0	118.0	1665024658	12.8951645
33118640	Not the GP, but I think in general t	Not the GP, but I think in general the “guess and check” strategy frowned-upon by the Sudoku community. Ideally you should be able to make progress by making some logical observation (a trivial example: the numbers 1-8 are present in this column, therefore the remaining cell in this column is a 9). Humans can carry this out to complex patterns (the “swordfish” involves looking at 6 cells in 3 different rows/columns and inferring that cells visible to those cannot take on particular values), but it is seems reasonable to say that patterns will reach complexity that humans can’t hold in their heads. Obviously, any such classification would be subjective, but there’s probably a “reasonable” limit to solvability. (Without guess and check)	CGamesPlay	13.448126	-7.408964	comment	5.0	33.0	1665130716	15.079687
33165682	i'm always surprised that PureScript	i'm always surprised that PureScript doesn't get as much attention as Elm, despite being frequently-updated by a large set of contributors (https://github.com/purescript/purescript), awesome docs (https://book.purescript.org/, https://github.com/JordanMartinez/purescript-jordans-referen...), and a pretty large package catalog (https://pursuit.purescript.org/).	dimator	12.982562	-7.6566877	comment	5.0	17.0	1665507206	-12.725866
33172591	You can hire any senior dev and give	You can hire any senior dev and give them the elixir book and a week to read it. You can also pick up someone junior who hasn’t learned anything wrong and coach them for a few months. I’ve successfully done both. The org I work in was one of the Elixir lang case studies and we still love using it, and have very little trouble hiring. It would be different if we had to hire 50 devs in less than 6 months, but we just don’t need to do that.	ch4s3	12.700105	-7.4432263	comment	5.0	26.0	1665546564	12.925702
33187472	I'm experiencing this with Laravel. 	I'm experiencing this with Laravel. I'm stuck on 5.2 while they're on v9 now because the author thought it would be a good idea to arbitrarily change some method signatures because he regretted his decisions earlier, while not providing any additional value and I don't have the time to hunt all these down and refactor everything, and I feel unmotivated when he's made it clear he's a bad steward. He refused semver for the longest time, not sure if they're using it now but even if so, 4 more major breaks is not encouraging	8n4vidtmkvmk	12.798621	-6.6342077	comment	5.0	17.0	1665637601	10.373254
33197885	I wish that was the case, but my exp	I wish that was the case, but my experience is that there are fewer PHP jobs.Switching a stack won't help cos places want years of experience.	Raydovsky	12.766061	-6.6300917	comment	5.0	16.0	1665704279	10.311647
33329895	Wasn't it Typescript that made Coffe	Wasn't it Typescript that made CoffeeScript obsolete? Not better JS	ajkjk	12.414642	-6.618353	comment	5.0	20.0	1666702929	-10.515418
33356132	I'm not sure why nobody is talking a	I'm not sure why nobody is talking about TypeScript? If browsers were to natively support it, that would be a game changer. We could phase out quirky features of JS and mark them as obsolete in IDEs. More use of the Map class for example would avoid some quirks of using objects.	edg5000	12.333593	-6.740791	comment	5.0	21.0	1666871115	-10.417467
33358975	I don't understand what's wrong with	I don't understand what's wrong with breaking changes. Do they not happen in php major versions anyway? Why not fix the parameter ordering and built in function names whilst you're at it? Seems odd to me.	fatboy	12.696908	-6.6405935	comment	5.0	17.0	1666884291	10.29583
33429944	Am I wrong, or does it feel like Eli	Am I wrong, or does it feel like Elixir has lost momentum over the last couple of years? I'd like to spend more time becoming proficient with the language and platform, but it seems increasingly hard to justify professionally over something like Go, which usually does concurrency well enough when required. Are people having success finding Elixir jobs in 2022?	symfoniq	12.699464	-7.460885	comment	5.0	17.0	1667349438	12.938318
33434566	That quote is absurd because the vas	That quote is absurd because the vast majority of applications on the planet are not written in Erlang and work just fine. Working and fault tolerance are in no way related. Being generous the majority of applications with very high uptime are also not written in Erlang.	throwaway1492	12.517789	-7.5385327	comment	5.0	17.0	1667391749	12.902567
33441717	I absolutely hate how with Typescrip	"I absolutely hate how with Typescript and ES Modules, if you have a fileutils/foo.tsyou have to import it asimport Foo from ""utils/foo.js""Even though there is no .js file on disk, and you might be running ts-node or whatever that doesn't build a .js file.Importing a file that ""doesn't exist"" is so counterintuitive.In addition all code breaks because you have to change all your imports, and /index.ts or /index.js won't work either."	redox99	12.384848	-6.565992	comment	5.0	41.0	1667417720	-10.468467
33441838	Every TypeScript project I have work	Every TypeScript project I have worked on either:1) enforces no extension, e.g. “utils/foo”, or2) allows TS extensions, e.g. “utils/foo.ts”I have never imported a TS file using a JS extension. Maybe your woes could be fixed with a configuration change?	bigyikes	12.359821	-6.7402115	comment	5.0	33.0	1667418162	-10.428423
33535058	This is the problem I have with Erla	This is the problem I have with Erlang developers. They only want to work on Erlang. Pragmatism be damned. It is never about the product or the company. It is only about which of the remaining 20 Erlang expert personalities in the world do they get to work alongside with. If there needs to be a special library, all other existing ones are garbage unless written by one of the 20 above, so they will just write their own. I hate to stereotype here, but I would never ever (again) bet my company on Erlang. It is insanely difficult to recruit for. They are truly some of the best developers in the world, but lack pragmatism for problems and every one problem can only be solved with functional programming using Erlang. In my experience, Erlang developers are Zealots for the language and nothing el	onebot	12.567827	-7.522295	comment	5.0	20.0	1668015506	12.930979
33651585	Ruby is well known as the “bad parts	Ruby is well known as the “bad parts of Perl” so there’s a beautiful horror here. It’s also funny that Ruby is the slowest of the dynamic languages, and that Perl is much faster. They created a magnificent mind bending nightmare.	stevebmark	12.443237	-7.0374503	comment	5.0	20.0	1668757473	12.931823
33727545	Sigh. As an old Rails hand myself - 	Sigh. As an old Rails hand myself - hell, I credit Rails for much of my tech career - I think I now have to disagree. Rails is great, indeed the best, for its use case, which is CRUD apps. That might still be enough. But what is expected of applications has changed over the years and Rails isn't really capable of meeting some of these new expectations, not alone anyway, and developers trying to implement them find themselves reaching for ever more kludges and workarounds and 3rd party software trying to fit, essentially, a square peg into a round hole.Applications these days - well, a large number of them - need to be realtime. Server push. Websockets. Push notifications. Scheduled jobs. Long running background jobs. Calls into other services. Presence awareness.  The list just goes on and	sho	12.765619	-6.8857303	comment	5.0	37.0	1669260831	12.321501
33773426	Meh. Choosing to write something in 	Meh. Choosing to write something in JavaScript that is wildly supported on every platform via browsers without having to deal with transpilation doesn't seem that foolish to me. TypeScript solves a small sub-section of problems that can be solved in other ways too, like extensive unit tests, but that also comes with tradeoffs, just like using TypeScript comes with tradeoffs.Assuming everyone should use TypeScript just because you happen to like it over JavaScript seems crazy. But I guess that makes me seem crazy to you, so here we are in a circle...TypeScript seems to have entered the same hype cycle as Rust (if it didn't do it before Rust) where people seem to think that everything written in X should actually be written in Y instead (C/C++ => Rust and JavaScript/Any compile to JS => Type	capableweb	12.349816	-6.7491865	comment	5.0	65.0	1669642432	-10.467133
33797713	Yeah, I do not even get why people h	Yeah, I do not even get why people hate Ruby so much. They do rarely even attack the actual weaknesses of Ruby but instead goes on about Rails specific stuff, the slow performance (a Ruby < 1.9 issue, these days it is as fast as Python if not faster) or just imagined stuff which has never been true.Ruby is a flawed language (I especially dislike the lack of real namespaces) but the hate it gets is often not based in reality.	jeltz	12.589963	-7.053762	comment	5.0	20.0	1669790739	12.35624
33801233	We keep on making fun of php, but it	We keep on making fun of php, but it had this problem solved in the 90s. Hit F5 in the browser, get the latest version of your software. No waiting 30s for a rebuild, no stale versions in caches, no headaches.	nikanj	12.775066	-6.6320395	comment	5.0	20.0	1669818746	10.3080635
33851311	> Why should this be changed? Is it 	> Why should this be changed? Is it broken? Is it something that 1 second on google can’t answer?Pretty sure every year there's thousands of unnecessary search requests for this nonsense.Programming languages are tools. Make it as easy and straightforward as possible so that its users can build whatever it is they were building with the least amount of friction.> There are two reasons this term will stay. It is a tip of the hat to the amount of PHP work that came out of IsraelFunny because PHP — particularly theearlier versions — isn't exactly considered an example of good language design (though it has vastly improved recently).> but you google it once in your life and then you ‘forget’ about it.Negative. I had forgotten what it meant. All I remembered was that I've seen it years ago and 	2143	12.754256	-6.6455355	comment	5.0	22.0	1670137136	10.357192
33893977	Database Performance Optimization an	Database Performance Optimization and Scaling in Rails	Liriel	12.823379	-6.8092957	story	5.0	83.0	1670418987	12.286147
33897246	Show HN: I built a decentralized Cas	Show HN: I built a decentralized CashApp crypto alternative	azakharov	12.594205	-7.4018574	story	5.0	16.0	1670434094	12.868249
33907713	What's the standard way to install p	What's the standard way to install php, by using `brew install php` ? Is there a version manager for php itself to have multiple versions of php in the system ?	revskill	12.625135	-6.586685	comment	5.0	18.0	1670506582	10.288363
33907781	PHP 8.2 will get official security u	PHP 8.2 will get official security updates until December 8, 2025, how much longer do you need?	Y-bar	12.791537	-6.6372457	comment	5.0	17.0	1670506898	10.299537
33908078	I write PHP every day and I don't mi	I write PHP every day and I don't mind the language at all. It's not exciting per-say, but it's a good tool for the job. My real complaint is about how it's served via Apache and my real problem there is that Apache just depends on a lot of things being in the right place and it can suck for updates since it's harder to keep all things config in your repo. Docker is probably a fix for that, but there's an internal political battle there that I'd rather not touch.I know this is contradictory to what some people love about PHP, but having a directory where everything is isolated and I just run npm start or my go binary or whatever is much easier to reason about for me, rather than also have to think about Apache's end.	jjice	12.736116	-6.6158185	comment	5.0	15.0	1670509040	10.246487
33910722	Learn SugarCRM which is built on PHP	Learn SugarCRM which is built on PHP; SugarCRM devs are rare, in high demand, and very highly paid (I just hired a full remote sr php dev at 145k with full benes/10% starting bonus).We’re always looking btw.	evo_9	12.780392	-6.618694	comment	5.0	24.0	1670521258	10.312646
33962944	My experience with DragonRuby was re	My experience with DragonRuby was really poor. I was dismayed how restrictive it was (e.g. with libraries). Images were particularly painful and I was annoyed that the toolkit couldn't dynamically resize them for me (nor could I pull in ImageMagick). Perhaps it was trying to deal with sprite sheets and having to hardcode pixel offsets. Yes, it uses Ruby syntactically, but it doesn't feel like Ruby to me as far as ecosystem and productivity go. This was a few years ago - maybe this has changed. I probably wouldn't give it another go, but I'd love to see something built in DragonRuby hosted online to see what it can do.Godot, while not perfect, fit my expectations better. I found myself simply using the prebuilt abstractions I was already building by hand in DragonRuby. Things mostly work. W	jb3689	12.636937	-6.973558	comment	5.0	19.0	1670892399	12.248097
33968619	I know this will sound like an echo 	"I know this will sound like an echo chamber:But PHP is on the decline. Its only hanging on barely because of wordpress.Let me explain.The web changed. The web evolved. Too fast for PHP to catch up, and fundamentally the web today is not compatible with the PHP way of exec + die immediately.The web is more and more real time, all sorts of events fired thru sockets, work queues, and state is stored both on the client and on the server. PHP is not up for this task. This is why people have been moving away from PHP for the last decade, and this will only increase as time goes by.Finally, please dont even start with that ""nodejs clone in PHP"" as its just a hack. If you use a node-js clone (there are many options) built in PHP you cant use any of the core stdlib, as its all blocking by nature, s"	phplovesong	12.700828	-6.549952	comment	5.0	21.0	1670938617	10.2473755
34001641	I think RoR is a viable and smart ch	I think RoR is a viable and smart choice in a lot of circumstances, but this article did nothing to inform that opinion.> Ruby serves for functional programming and web development, while Python has found application in different branches of AI and academic programming.> Ruby is 100% OOP language, while in Python these principles are implemented only partially.> Principles of declaring variables and working with them differ.Well, jeez, if I have to work with the variables differently, then...Who wrote this? The bookkeeper?	ibejoeb	12.663077	-6.9267325	comment	5.0	15.0	1671120624	12.348354
34016892	Is there a guide on how to use the n	Is there a guide on how to use the new constructs? The link to the 5.0 docs was broken on the site, and after manually fixing the URL all I found was some type annotations in the `Effects` module.	lilactown	12.375108	-6.789297	comment	5.0	19.0	1671209740	-10.483076
35166314	Can you use Django with those optimi	Can you use Django with those optimisations or are they good mainly for scientific computing?	DeathArrow	12.837194	-6.5061717	comment	5.0	23.0	1678877812	10.031725
35207053	PHP 8.2.4	PHP 8.2.4	ms7892	12.777535	-6.6510086	story	5.0	70.0	1679125746	10.325823
35220154	That's basically a side-effect of Pe	That's basically a side-effect of Perl being a dead language, frozen because Perl 6 will never happen. It's surprisingly hard to eradicate, however.	fmajid	12.3309555	-7.050933	comment	5.0	15.0	1679240837	13.189821
35234212	"In your tsconfig.json [0]:   ""module"	"In your tsconfig.json [0]:   ""moduleResolution"": ""node16""

In your TS files, even if the import is a file with the extension .ts (tsc will handle):   import { test } from './importMe.js';

[0]: https://www.typescriptlang.org/tsconfig#moduleResolution"	gnabgib	12.377363	-6.6315312	comment	5.0	17.0	1679330159	-10.489306
35479114	Is that two millions LOC for a singl	Is that two millions LOC for a single Rails application or across various Rails applications?	Scarbutt	12.710403	-6.8857803	comment	5.0	17.0	1680852762	12.341115
35479281	meanwhile, i have to work on a rails	meanwhile, i have to work on a rails 3.2 app with ruby 2.2	MiraiY	12.673918	-7.0114155	comment	5.0	20.0	1680854173	12.392574
35496218	I'm not surprised Elm is not viable 	"I'm not surprised Elm is not viable anymore at a medium or large company, despite continuing to use it every day myself for side projects. The creator has deliberately shunned publicity or popularity for it in the last few years so adoption and therefore hiring has slowed to a crawl. We still have a vibrant and passionate small community, but the emphasis is on ""small"". No matter how superior it is to e.g. React it will lose out at a company level if you have pay the price of retraining all your frontend devs to ""think in elm"" to continue using it.I'm mainly sad that we'll be losing the chance of any future Kevin Yank videos about Elm. I really love the videos of his I've seen on youtube, including non-Elm ones such as the one about how to use VoiceOver for devs [0].[0] https://www.youtube"	savanaly	13.004046	-7.6871104	comment	5.0	64.0	1680978888	-12.801181
35496234	TL;DR: they bridged Elm with React, 	TL;DR: they bridged Elm with React, and when they started using Web Components there was an impedance mismatch between the bridges between Elm/React and WebComponents and the bridge between Elm and React, so they had to pick one of Elm and React.	cwzwarich	12.992003	-7.5574465	comment	5.0	17.0	1680978970	-12.753917
28008564	> different php versionsHow do you d	> different php versionsHow do you do that one? Last time I tried (granted, a long time ago), apache-mod-php was hardcoded into a single php version, and you couldn't have different versions of it on apache either.I always classified php as one of the most problematic languages that need containment. There's not only that hard dependency on the version, but the language also has a global configuration storage that, last time I used it, can not be overloaded.	marcosdumay	12.770281	-6.6510744	comment	5.0	15.0	1627656494	10.3382635
28043523	Agreed. I also wish fewer libraries 	Agreed. I also wish fewer libraries started their own supervision tree, and instead gave you a child spec to drop into your supervision tree. There's definitely use-cases where shipping libraries as an application makes sense, but oftentimes that sort of design causes problems for me, because it means not being able to start multiple copies of the dependency with different configurations.I think Phoenix PubSub is a perfect example of how libraries should be structured, in that you just need to drop the module + options into your supervision tree, and you have the freedom of starting multiple independent copies of the tree, in different contexts, and with their own configurations: https://hexdocs.pm/phoenix_pubsub/Phoenix.PubSub.html#module...	QuinnWilton	12.467238	-7.154745	comment	5.0	22.0	1627943591	-9.182451
28057668	But nobody (as far as I know) who ha	But nobody (as far as I know) who has used TypeScript wants to go back to vanilla JavaScript. I find that fairly telling.	willbudd	12.3858	-6.726481	comment	5.0	15.0	1628056548	-10.451049
28180405	This makes me wonder what did cause 	This makes me wonder what did cause Python's / Ruby's rise in popularity if there weren't any huge changes to the languages themselves in that time. I guess maybe the emergence of Rails in Ruby's case? And for Python, I don't know, Django? Numpy?	yissp	12.460173	-6.988594	comment	5.0	18.0	1628947348	12.377033
28180721	You don't seem to know anything abou	"You don't seem to know anything about the ""web people"" you're criticizing here. PHP skills learned two decades ago are still very relevant today. It's the Java of the web world."	5e92cb50239222b	12.769946	-6.639901	comment	5.0	19.0	1628949835	10.420539
28225377	A seasoned small Elm team will proba	"A seasoned small Elm team will probably scale to higher complexity heights than a small JS team in my experience. Same goes for Haskell and the like.The freaking out about ""oh no I gotta write a small library myself"" is absurdly overblown here. Most of the time I see it, it's people flipping out at the very sight of there not being something available off-the-shelf. The actual cost is much lower than the panic implies.In general, people see ANY time spent in an FP language to solve FP problems as ""a waste of time"" but they're blind to the wastes of time people treat as ""real code"" in mainstream languages.But yeah if you're a software efficiency bean counter, maybe you won't like FP. Fair point.My opinion is the long-term technical & cultural benefits and opportunities pay off. And as a dev"	whateveracct	12.947962	-7.6633606	comment	5.0	32.0	1629311862	-12.745319
28227511	What are Elm users using on the back	What are Elm users using on the back end? FP or mainstream languages?	fulafel	13.000825	-7.6870046	comment	5.0	16.0	1629322713	-12.760682
28276574	> TypesThere are so many better opti	> TypesThere are so many better options if you want a good type system (Elm, PureScript, Rescript, GHCjs, Scala.js, and many more). TypeScript is unsound, and necessarily by it's design, it has to take on weird issues to maintain compatibility with JavaScript (null/undefined, can run effect anywhere, a lot of codebases are filled with any types). Heck, TypeScript doesn't even come with ADTs and proper pattern matching.	toastal	12.348888	-6.9044476	comment	5.0	17.0	1629730044	-10.447785
28295823	Cool project!Just wanted to mention 	"Cool project!Just wanted to mention that you emphasize ""optimized for FastAPI"" but it looks like it does nothing to do with FastAPI.Do you have any reason to narrow down the scope to FastAPI when other frameworks like Flask are still more widely used?Specifically mentioning only one framework causes loosing interest of people who use other frameworks."	kbumsik	12.434976	-6.6112404	comment	5.0	16.0	1629844441	-9.272014
28324393	Can someone help me understand why a	"Can someone help me understand why anyone would ever rely on monkeypatching in non-test code?Python is just as dynamic as Ruby in a lot of ways. But in Python, overwriting an existing and important/fundamental/ubiquitous method would be an absolute last resort when all other sensible approaches have failed. And in that case you would at least have the sense to save the original method somewhere under a different name.What makes such a horrifying idea so apparently not-horrifying in Ruby? The ability to ""reopen"" class?None of the examples in the blog post seemed like such dire circumstances as to require it. Maybe replacing a buggy method while you wait for a PR and new release is a valid use case. But the failure mode is also particularly nasty."	nerdponx	12.4655075	-7.0494604	comment	5.0	56.0	1630039531	1.5391726
28338869	I resonate with this. The churn I fi	I resonate with this. The churn I find most demoralizing is in the library/module/component space.I’ve been pushing myself to learn elixir these last few months. This is, by the comments of many, more of a niche language. I like the language’s novelty and it has caused me to think in new ways. So Paul is righ in this pint.But when I want to send an http request, there must be at least 10 choices on hex to choose from. The one that is a hit this year will be passe’ next year. When I watch the traffic in the Phoenix slack channel, the “stack” of libraries combined seems overwhelming. The same goes for people talking about front end apps.	travisgriggs	12.6925335	-7.446842	comment	5.0	21.0	1630165017	12.938847
28374736	Erlang does not allow structural sha	Erlang does not allow structural sharing. Sending large data structures to other processes always means serialization penalties, even if those processes run on the same CPU.Also, was the Erlang VM written in Erlang? Probably not. So I'm skeptical about the universality claims of the language.	amelius	12.504057	-7.5284925	comment	5.0	22.0	1630451440	12.85174
28374890	Is Erlang good for regular web appli	Is Erlang good for regular web application building? If so, what's the recommended way of doing so?	Zababa	12.56389	-7.5126147	comment	5.0	22.0	1630452809	12.906782
28383145	Have folks been using Deno? What are	Have folks been using Deno? What are the sharp edges?	macrael	12.497218	-6.437917	comment	5.0	26.0	1630518209	-10.998875
28391922	I still get a real kick out of Ruby'	"I still get a real kick out of Ruby's elegant and powerful metaprogramming, which is something other languages don't often compare to.    class String

      def colorize(color_code)
        ""\e[#{color_code}m#{self}\e[0m""
      end
    end

The general advice is to avoid confusing others though, so changing base classes like this is not really a business-safe idea."	nixpulvis	12.509699	-7.0748043	comment	5.0	25.0	1630590417	12.352249
28392177	The company I work for re-implemente	The company I work for re-implemented out entire platform with Ruby on Rails. Even though it's not super new, everyone has really fallen in love with ruby. The gem ecosystem and the community are great. Ruby is an absolute joy to program in.	FigurativeVoid	12.716462	-6.961666	comment	5.0	36.0	1630591602	12.3512335
28501661	Rather tangential, however Ruby seem	Rather tangential, however Ruby seems to exist entirely on the backs of Shopify now [1], and every Ruby-related post on here goes back to a Shopify employee. Did the founder of Shopify start with Ruby so now they’re wed to it culturally? Each of these Ruby posts has a gross mismatch between engagement and score.I apologize for the digression, but Shopify today reminds me of some Delphi/object pascal shops I’d engaged with earlier in my career. Where the tooling became the primary focus and identity of the staff rather than the solutions (a sort of cargo culting off of that initial business success), and that focus meant the firm ended up being staffed with what could best be described as big fish in little ponds (e.g. the “Delphi expert” who was the guy who stuck with Delphi after everyone	defaultname	12.727691	-6.9706197	comment	5.0	17.0	1631458229	-2.492642
28502580	Elixir shops are learning quickly th	Elixir shops are learning quickly that the best bet is probably to hire a senior dev that wants to learn and just give them a couple of weeks to learn.As for the surge in interest, I can’t speak for everybody but when I dove into the language I realized it addressed virtually every short term and long term problem that I’ve experienced in my programming career. The rules it sets out force things to be done in such a way that many issues are avoided as a by product.I find it balances all of my concerns better than anything else (productivity, performance, maintainability, scalability, learning curve, concurrency, stack simplification, capability, refactorability).	brightball	12.690306	-7.4408636	comment	5.0	16.0	1631464367	12.924286
28502766	I would love to get into erlang and 	I would love to get into erlang and beam. As far as I know, Beam must be a great tool for servers and webservers in general. But can I use the language in other scenarios, too? For example commandline tools, desktop Gui's or games?	zubspace	12.523135	-7.4851365	comment	5.0	15.0	1631465711	12.912363
28510835	I tell people all the time about how	I tell people all the time about how good the Ruby job market is. Lots of opportunities and not a ton of people to fill them for some reason.People from other languages don’t seem to want to believe it.	brightball	12.676087	-7.019536	comment	5.0	18.0	1631537371	12.381807
28510851	PHP is a great fit for most web proj	"PHP is a great fit for most web projects. It is battle tested with great backwards compatibility, fast, offers the best deployment story and combines the advantages of dynamic and static typing with it's gradual typing system (Think Typescript without the complexity of Typescript.)The next version is even going to improve on its weakest point, concurrency, with Fibers:
https://php.watch/versions/8.1/fibersSure we all remember the bad old times and the horrible legacy projects that are still around but let's no forget PHP allowed the average Joe to hack up his own dynamic websites without jumping any hurdles. It helped democratize the internet for a while.I really don't get why PHP is not more liked in hacker circles. Probably needs some new languages with slightly different syntax that tra"	cardanome	12.750175	-6.641022	comment	5.0	22.0	1631537430	10.316668
28584266	Aino, an experimental HTTP framework	Aino, an experimental HTTP framework for Elixir	clessg	12.689211	-7.424606	story	5.0	97.0	1632059038	12.908164
12538140	Immutable.js (https://facebook.githu	Immutable.js (https://facebook.github.io/immutable-js/) doesn't have the greatest typescript type annotations. Due to limitations of TypeScript, there is no way to write types for immutable.js heterogenous maps (homogenous Maps and Vectors are fine though). Since immutable.js collections are recommended to be used with redux, and no one wants to bother using IMJS records instead of just maps, the types end up being kinda useless.A nice typescript-friendly alternative to redux+immutablejs is MobX (https://mobxjs.github.io/mobx/getting-started.html). It does go a bit against the latest cool and hip trends (immutability, functional programming), but IMO its quite brilliant	spion	12.431213	-6.804001	comment	5.0	25.0	1474362838	-10.399964
12538459	Please don't bury this comment compl	Please don't bury this comment completely.  I am going to be honest and tell you that I believe TypeScript is pure embrace, extend, extinguish from Microsoft.  And I am amazed honestly that so many web developers are eating it up.	ilaksh	12.380178	-6.7564354	comment	5.0	22.0	1474368343	-10.439614
12551565	I would suggest a three part method 	"I would suggest a three part method to success.First, know what you do know and don't chase after everything you don't know. If you are good at php, use it. If you understand rails, use it. If you are a master of all things RDBMS, use one. When you are looking to tackle a problem, don't look for a new technology, language, or paradigm to solve the problem. Use what you already know, and solve the problem.Second, solve the problem. Also, don't pick a technology and then try to shoe horn that into the solution. In other words, when you have a new project, or an existing project that needs improvement, don't say, ""Well I am going to need a, b, c, and d because every good project needs those!"" Instead say, ""What is the problem I am trying to solve? How do I define the problem? What value am I "	trcollinson	12.736106	-6.9012303	comment	5.0	17.0	1474487057	12.357287
12558760	I really wish that MS would release 	I really wish that MS would release typescript as a collection of plugins for babel that would handle only one thing at a time (eg, the type system). Having my production build, es6 transpiler, type system, JSX compiler and so on (including a bunch of features I would rather didn't exist at all) all in one package feels like a failure of separation of concerns.I understand that people find Babel's plugin ecosystem confusing and intimidating (it is), but I don't think a separate monolithic typescript that reimplements popular babel functionality is the answer.	easong	12.389651	-6.6075373	comment	5.0	26.0	1474567298	-10.429599
12628868	ES6, CoffeeScript, and TypeScript al	"ES6, CoffeeScript, and TypeScript all have near-perfect awareness, which surprised me since TypeScript isn’t quite as popular as the other two yet.I take issue with that statement.  Just anecdotal, but I think these days Typescript is much more ""popular"" than CoffeeScript"	FrancoDiaz	12.403603	-6.5902715	comment	5.0	17.0	1475512229	-10.5277405
12631864	I suspect that we didn't get enough 	I suspect that we didn't get enough Ember responders, because I do think they have a reasonable sized community. 9k responses is likely not enough to draw a reasonable conclusion that it isn't popular. I wish we could have paired up npm downloads or some other stat besides some of this data...	joshowens	13.114033	-6.4482265	comment	5.0	15.0	1475533383	-15.495103
12668954	Gem in the Linux source code	Gem in the Linux source code	setra	12.564138	-7.0451584	story	5.0	24.0	1475964787	12.369045
12673949	My main reason, as funny as it may s	My main reason, as funny as it may sound, is that it has one static binary.I do use Jekyll, but given that a site will live for a few years at least, babysitting a ruby app isn't something I look forward to. Maybe my server has a different ruby version from my desktop, maybe some ruby gems are installed by my distribution and some others I have to install manually via gem leading to an inconsistent system state, every now and then something breaks, some functionality is provided by a gem I have to install manually and oops, I forgot to ssh to my server and install it there too. Oh, some gems can't be build because my server is hardened. Maybe jekyll got a new version and this leads to new ruby adventures.Hugo has some other niceties too, like a built-in server with live reload and some cle	andmarios	12.669042	-6.961014	comment	5.0	28.0	1476052564	12.359024
12704104	> So what's the catch?About 2-3 orde	> So what's the catch?About 2-3 orders of magnitude in performance. That’s the catch.And it’s the reason why even with PHP you use things as opcaches, cache database results in external daemons, you use process pools with fastcgi instead of actually creating new processes, etc.And hacking those things on top of PHP make your program even worse to reason about than just using a daemonized system with actor framework.	kuschku	12.731158	-6.611485	comment	5.0	25.0	1476393427	10.261903
12704314	The downside is literally exactly th	The downside is literally exactly the same as the upside: you have to bootstrap from literally nothing for every single request. Think about how ActiveRecord in Rails reads from the DB schema to generate it's magic methods, etc. This is usually done on startup or at least cached in memory once it's loaded. This is something that you have to manage more carefully with a PHP app since you can't have anything initialized before a request starts. Code paths, auto-loaders, database connections, config files, etc. All that has to happen over and over for each request. You can cache that stuff, but it's still overhead that isn't central to handling a request.There's actually work being done to build PHP frameworks that get around this with ReactPHP, ZeroMQ, Photon, etc. Essentially this is what H	mikey_p	12.741296	-6.588779	comment	5.0	25.0	1476395078	10.318882
12704197	Unless you're writing in pure hand-o	Unless you're writing in pure hand-optimized assembly language, 3 orders of magnitude in performance is way more than you could claim. PHP web requests commonly execute in hundreds of ms (of course, here I generalize mercilessly, but that covers most of cases I know of and that's what most sites aim for). So you say your non-PHP requests which would do the same thing would finish in hundreds of microseconds? I have very hard time believing it.> And it’s the reason why even with PHP you use things as opcaches, cache database results in external daemonsYou make it sound as if the idea of caching was invented by PHP programmers to address language deficiencies. Nothing can be further from the truth. Everybody uses caches, because it's faster. If you don't use DB cache, there's no way in the u	smsm42	12.729747	-6.5628605	comment	5.0	16.0	1476394127	10.176007
12706136	But program managers and CTOs and ot	"But program managers and CTOs and other non-engineers at a company care about scalability, performance, technical debt and quality, right? Let's not pretend that these don't matter once you've gone past the ""users actually care about our app"" phase, because they do and they affect the bottom line of a company. And IMHO PHP falters in these regards."	ddw	12.766876	-6.614823	comment	5.0	63.0	1476419239	10.390447
12708340	Performance? You need to update your	Performance? You need to update your act. PHP7 is 3x faster than python and now faster than Java 8 .  The only people that can call php slow are masochistic c++ web hacks.https://blog.famzah.net/2016/02/09/cpp-vs-python-vs-perl-vs-...	ransom1538	12.626853	-6.672552	comment	5.0	27.0	1476455907	10.274095
12718159	PHP, Java, and C will probably stay 	PHP, Java, and C will probably stay around as long as their isn't a huge shift in software development, e.g. by having AI doing the development for you.JS as a backend is more of a joke, though. It has heartful followers, true. But it doesn't bring anything valuable to the table. I may be wrong (and happy to be corrected) but this was developed by people who learned the JS frontend stuff first and then didn't want to learn another language for the backend just as well. So they decided to make the language they already know available in the backend as well. But that's it.Think about competitions in the backend/desktop area. For instance Go. It aims to combine the advantages you have in the most popular programming languages, while also providing stuff as core elements (e.g. packaging) that 	erikb	12.651689	-6.5329165	comment	5.0	27.0	1476617649	10.271301
12754516	For people who are unfamiliar, there	For people who are unfamiliar, there is also Tastypie.I find it's Model centric approach a whole lot nicer to work with then Django-Rest .	Illniyar	12.821618	-6.52969	comment	5.0	20.0	1476985950	10.062057
12795371	Ask HN: Which Go web framework shoul	Ask HN: Which Go web framework should i use in 2016?	Mooty	12.739164	-6.66314	story	5.0	3.0	1477478294	10.263719
12798470	> the Linux subsystem for Windows is	> the Linux subsystem for Windows is really appealingIn theory. To anyone who feels that way, please try it out for yourself before making a leap. I thought it would let me develop Ruby on Rails under Windows like I could do on Linux or macOS. I discovered a whole bunch of unimplemented features that prevented this. After a couple of months of commenting on bug reports and watching and trying, I gave up. I'll check back later. YMMV.	TheRealDunkirk	12.609799	-6.928662	comment	5.0	25.0	1477502748	-9.24293
12883264	Online PHP Coding Standards Fixer	Online PHP Coding Standards Fixer	dannie2	12.730909	-6.6461854	story	5.0	30.0	1478401711	10.371002
12889421	I think the Perl community had a lot	"I think the Perl community had a lot to do with Perl falling off in popularity. The standard reply to questions posted the ""Beginners Perl"" mailing list was ""RTFM dumbass"".The ""Learning Perl"" book sucked hugely. CPAN is pretty cool but too many modules have poor documentation and almost no example code.Web app frameworks got convoluted and didn't make things easier and tended to lock you into doing things their way.Despite that, I still liked perl because it did let me do things my way. I waited and waited for Perl 6, and then quit caring.This year I finally rewrote a perl/cgi web app in Javascript. What little server side I code I needed I used Perl 5 but there was very little."	oblib	12.337865	-6.9133773	comment	5.0	23.0	1478502400	13.142077
12971121	Thanks for an interesting writeup. S	"Thanks for an interesting writeup. Something I'm curious about for devs who've used ember on projects that had a maintenance period of 1-2 years: how do you feel about it as your app grows and changes over time?With most kitchen-sink or CoC frameworks, this is kind of the achilles' heel. patterns get codified because they're easy and ""good enough"" but they DO NOT age well. How does Ember deal with this? Also, what about the ecosystem? Is Ember work driven almost entirely by the core framework, or is there a plugin ecosystem that attempts to have an answer for every problem? (yes Rails, I'm looking at you.)"	karmajunkie	13.107616	-6.4440193	comment	5.0	16.0	1479327916	-15.512943
13024145	> and a nightmare to work around whe	> and a nightmare to work around when you need to do something it doesn't easily support.Can you elaborate more on this? And also for what kind of apps one should avoid Django?	avinassh	12.847419	-6.487622	comment	5.0	31.0	1479922362	10.059728
13099856	PHP has always been easy to pick up,	PHP has always been easy to pick up, so it's always going to have amateurs. These questions riddled with vulnerabilities are usually asked by people that don't understand what they are doing nor want to learn; it's not really representative of the sector of developers that make a living with PHP.	Mahn	12.773334	-6.6093607	comment	5.0	30.0	1480857047	10.350122
13142463	Show HN: Scala-ts – Scala to TypeScr	Show HN: Scala-ts – Scala to TypeScript compiler	miloszpp	12.444342	-6.587179	story	5.0	66.0	1481322961	11.774955
13212552	Ask HN: Do you think PHP has improve	Ask HN: Do you think PHP has improved with PHP 7?	jamesmp98	12.773202	-6.640378	story	5.0	7.0	1482165300	10.324757
13216371	I really want to love Elixir, but ma	I really want to love Elixir, but man, it fundamentally hasn't succeeded in producing a readable, expressive language.  Look at his implementations!  They're a mess of gobbledegook just like Erlang, plus a bunch of weird magic on top that's not very intuitive.Syntax aside, the final implementation of this feels like, okay, well, you have access to an in-memory store that's outside of the GC and which works well for your use case here.  I'd actually be more interested in further optimizations of the first approach, in-GC, which seem like they'd be more generalizable to other tasks.	aetherson	12.620424	-7.4720044	comment	5.0	27.0	1482194572	12.939409
13252540	PHP.  It's just too easy to do it wr	PHP.  It's just too easy to do it wrong in PHP.	Animats	12.741249	-6.634854	comment	5.0	20.0	1482632477	10.306479
13252935	I'm very likely older than you are, 	I'm very likely older than you are, so... no.It was very good at the time. Not so much today. We've learned a lot in language design and Ruby feels very antiquated (mostly because it's dynamically typed).	hota_mazi	12.642084	-7.016371	comment	5.0	17.0	1482640425	12.375249
13283878	If I'm already using, say, OCaml, wh	If I'm already using, say, OCaml, why would I want to switch to Crystal? (assuming that multicore takes the same amount of time to arrive in each). Whenever I've read about Crystal it sounds like a broadly sensible language, but it doesn't sound like it brings anything new to the table - in which case I'll favour the more mature language with the bigger library/tool ecosystem.	lmm	12.606022	-7.27108	comment	5.0	26.0	1483098061	-11.245073
13306725	Is CoffeScript still used much? I us	Is CoffeScript still used much? I used it a bit a few years back when I was more interested in webdev and I liked it a lot, but I haven't really heard anything about it for a while. The only CoffeScript code I've seen lately is when I looked into finding the cause of a bug in a package for Atom several months backend back; I don't think I know of anything besides the Atom ecosystem that uses it nowadays, although I might just not be aware of other projects using it.	saghm	12.418091	-6.5947356	comment	5.0	20.0	1483417685	-10.476864
13310937	I recently got into TypeScript, if t	I recently got into TypeScript, if that counts. I'm really enjoying it so far, but I'm running into some annoying things as a beginner:* For many third-party libraries, needing to write `import * as Something from 'some-package'` instead of `import Something from 'some-package`.* Not being able to import non-TypeScript files, further fragmenting my import style by needing to write stuff like `const styles = require('./something.scss')`.* Module resolution in general seems to be close enough to ES6 that I'm usually okay, but different enough that I sometimes get really confused about why something doesn't work.* There are tons of incorrect type definitions in the DefinitelyTyped repository. A common thing for me to do is: 1) `npm install --save-dev @types/some-package` 2) notice that my app	grardb	12.383969	-6.57861	comment	5.0	16.0	1483464905	-10.437953
13322747	So Tom Dale is one of the creators o	So Tom Dale is one of the creators of Ember. Now he is joining LinkedIn to work with Ember. I think this is a little sad. I can't stop imagining that he thinks that something like React is better than Ember in all situations, but since he has such high Ember credentials and somehow LinkedIn decided to go with Ember then he feels he must accept that job.	fiatjaf	13.121858	-6.4421	comment	5.0	21.0	1483569215	-15.516028
13323993	My favorite part about Elixir is tha	"My favorite part about Elixir is that it doesn't try to reinvent the wheel. It's not an untested, trendy new paradigm or tool. It's based on decades of Erlang/BEAM/OTP experience and Ruby/Rails/last 10~ years of programming ergonomics. The only things that are added are those that actually add to the experience.An example: A large part of the Erlang standard library is not translated in Elixir. Instead, you call Erlang methods with a seamless interop. José & co. understand that there's no need to reinvent the wheel and no benefit in another abstraction. I like that.My least favorite part about Elixir is that it has become a ""trendy"" language among the web crowd. While the community is overall great, there's always a loud minority of ""beginner experts"" both claiming it's the best thing ever"	sotojuan	12.673734	-7.4492016	comment	5.0	20.0	1483580716	12.923397
13324111	> [Kernel] Deprecate support for mak	> [Kernel] Deprecate support for making private functions overridable. Overridable functions must always be public as they must be contractsJust lost interest. I thought Elixir was supposed to learn from Ruby.	transfire	12.670345	-7.457244	comment	5.0	25.0	1483582125	12.947941
13324531	Will Erlang/Elixir ever be able to a	Will Erlang/Elixir ever be able to attain the raw performance speed of Go?I'm not talking about concurrency, etc. Just raw computational speed.	tiffanyh	12.564946	-7.479873	comment	5.0	19.0	1483587787	12.89539
13367840	After using Elm and the elm-format p	After using Elm and the elm-format package in Emacs for the last few weeks I can say that not having to format the source and just letting your editor do it for you on save or via a command is so very nice.This is a trend that I feel is going to catch on across any language that can support it. It makes trivial decisions and arguments about formatting a thing of the past.	Dangeranger	13.005065	-7.684587	comment	5.0	30.0	1484075111	-12.765417
13435795	>Python 2 is slowly being EOL'd and 	>Python 2 is slowly being EOL'd and if you're starting a brand new Django project there's no reason on earth you should choose Python 2 anymore.Except that there are still some critical packages that aren't on Python 3 yet. Not to mention a lot of functionality breaks even if the libraries do exist, which means you have to code things up quite differently sometimes.	IndianAstronaut	12.54842	-6.6615877	comment	5.0	27.0	1484834621	9.921345
13439446	As a Ruby programmer trying to take 	"As a Ruby programmer trying to take a look at Elxir, i still find it hard to read. Maybe functional languages take time to get used to but it doesn't seem as ""clear"" as procedure or oop style. I know the added benefit of speed and concurrency, but for most apps we build it is not needed for now.Do any Ruby programmer find Elxir easier to write or read? Im genuinely curious to hear about this because a lot of Ruby devs are writing Elixir."	rebelidealist	12.683075	-7.4129925	comment	5.0	22.0	1484859645	12.875279
13447163	I love Elixir as much as the next gu	I love Elixir as much as the next guy, probably more, but I want to temper your enthusiasm a bit:> it is modern, with modern tooling around the language (e.g. mix, edeliver)Sort of.  Mix is a nice package manager.  Edeliver is a series of hacks on deliver, a five-year-old Capistrano clone.  But don't expect Elixir to fit into 2015-class deployment systems just yet.> stack traces are clean, readable, and point you in the right direction most timesOther times, the error happened in another process, all you see is a timeout, and it takes some spelunking.  Not uncommon in my experience.But I'll also add a couple of points:- the docs system is fantastic, in particular the automatic generation of handsome docs websites, and the `doctest` system which allows example code in your docs to double as	gamache	12.683602	-7.449648	comment	5.0	28.0	1484948238	12.925089
13448009	Elixir looks interesting, but coming	Elixir looks interesting, but coming from many years of using Ruby, another dynamically duck-typed language is the last thing I need, and (in my humble opinion!) the last thing I think anyone should need in this day and age.I have been using Go almost exclusively on the backend for the last 18 months or so, and it's a huge safety net. Go is nothing new, of course (it's basically Borland Pascal/Delphi -- which I also used for many years -- with GC), but it brings to the table a strictness that is very much needed (not to mention very good single-core performance).Almost all the problems I encounter in large-scale Ruby programs have to do with wrong types or wrong shapes of data being passed around. It's an antipattern, but we have a lot of code lying around that uses Ruby hashes (dictionari	atombender	12.574239	-7.1179876	comment	5.0	48.0	1484957583	-11.235962
13455128	HTML parsing in Elixir with leex and	HTML parsing in Elixir with leex and yecc	eellson	12.648507	-7.406035	story	5.0	67.0	1485092253	-10.354246
13475076	I've always thought that Erlang woul	"I've always thought that Erlang would be more successful if it had a better deployment story, along the lines of Go or Rust: e.g. if you had the option of baking an Erlang runtime into a static binary. As it stands, software like ejabberd and rabbitmq are pretty ugly in OS package form (because distro maintainers think such packages need to rely on a common, usually very old, Erlang runtime, instead of allowing them to vendor it in as you're supposed to.)Now that I think of it, Canonical's push toward ""snaps"" (sandboxed and vendored—but not fully containerized—software bundles, as a package format) might bring a flourishing of Erlang-based application software, given that it's much more compatible with Erlang's style of release-management."	derefr	12.566514	-7.5146837	comment	5.0	32.0	1485289190	12.889495
13476738	>> Your Erlang program should just r	>> Your Erlang program should just run N times faster on an N core processor> But only if your program is embarrassingly parallel with at least N times available parallelism in the first place! If you have one of those it's already trivial to write a version that runs N times faster on N cores in C, Java, multi-process Python, whatever.You've made two claims, one irrelevant and one false:1. only if your program is embarrassingly parallel is irrelevant, because a almost every program is embarrassingly parallel in Erlang. The language is built around concurrency to the point that parts which wouldn't be obviously parallel in another language are in Erlang. Further, slow hashes in crypto have taught us that is actually quite difficult to make something which can't be parallelized.2. it's triv	devishard	12.452293	-7.504988	comment	5.0	30.0	1485299942	12.924654
13477095	Node is like walking into a Home Dep	Node is like walking into a Home Depot when you want a house. Technically you can build one out of the bits they can provide, but it's a ton of work.The thing is Node could offer the Rails out-of-the-box experience through a package that provided sane defaults. There's nothing preventing people from doing this but cultural resistance.	astrodust	12.757164	-6.8548245	comment	5.0	21.0	1485302871	12.330775
13538573	I'm a bit curious here. Do you think	I'm a bit curious here. Do you think that your issues with scalability and reliability have to do with your tech choice (I think it was Ruby on Rails)? Don't want to bash Rails, I'm just genuinely curious, since I come from a Rails background as well and have seen issues similar to yours in the past.	iagooar	12.770189	-6.917742	comment	5.0	27.0	1485927734	12.346308
13580924	To a large degree, the ongoing utili	"To a large degree, the ongoing utility of Perl 6 depends upon the continued vibrancy of the CPAN community. IMHO, CPAN is anything but vibrant by today's standards.While CPAN hosts a vast archive of nearly 35,000 modules[1], many are aging. Fewer than 800 modules are known to exist for Perl 6.[2][1] http://www.modulecounts.com/
[2] https://modules.perl6.org/"	bashcoder	12.336996	-7.040833	comment	5.0	18.0	1486398159	13.1816845
13606394	Funny thing is that I have yet to se	Funny thing is that I have yet to see the other side of argument - when people had a bad experience with Elixir. It seems so nicely fit into its problem domain that basically everybody that starts doing it is happy with results. I guess that says something.	d3ckard	12.69546	-7.4578567	comment	5.0	44.0	1486642799	12.940394
13607803	Elixir deployments on AWS	Elixir deployments on AWS	eellson	12.68827	-7.446347	story	5.0	87.0	1486655988	12.933385
13610633	NIFs are the fastest method to call 	NIFs are the fastest method to call external code from Erlang/Elixir, as far as I understand. But I wonder how high the actual overhead is.My understanding is that if I still want to ensure that the Beam VM can continue to schedule all processes efficiently, these NIFs shouldn't calculate forever, but return quickly to avoid blocking all other processes. So the straightforward way to ensure this for longer calculations would be to split the calculation in smaller, parallelizable jobs, if that is possible. But then the overhead of calling NIFs might actually matter, if you split them into chunks that are too small.I've no idea how big the overhead actually is, I'd be interested in a rough estimate. Is it small enough that I can just ignore it entirely?	fabian2k	12.502896	-7.5215464	comment	5.0	22.0	1486672224	12.882324
27537415	This is the prompt I got running php	"This is the prompt I got running php in macOS11:  $ php --version
  WARNING: PHP is not recommended
  PHP is included in macOS for compatibility with legacy software.
  Future versions of macOS will not include PHP.
  PHP 7.3.24-(to be removed in future macOS) (cli) ( NTS )
  Copyright (c) 1997-2018 The PHP Group
  Zend Engine v3.3.24, Copyright (c) 1998-2018 Zend Technologies"	j16sdiz	12.742969	-6.6301956	comment	5.0	25.0	1623919203	10.305566
27544847	> How is PHP remotely comparable to 	> How is PHP remotely comparable to PythonFaster.> PerlMore readable and writeable, and probably more popular in the past fifteen years.> RubyAgain faster.	aasasd	12.700431	-6.683448	comment	5.0	25.0	1623966732	10.284335
27592898	The local-reasoning properties of El	The local-reasoning properties of Elixir (and any other functional language with emphasis on immutability for that matter) make it soooooo much easier to onboard. Meanwhile over in a Rails/Laravel/node-framework-flavor-of-the-month you can get lost in the monkey patching and mutation. It’s nice to be able to look at a single function and know what it does, without having to reason about what might happen beyond getting a return value if you call another function.	ashton314	12.628953	-7.4198427	comment	5.0	31.0	1624375710	12.886939
27605259	I'm a big Django fan and a former (u	I'm a big Django fan and a former (unsuccessful) startup founder. I only took a quick look at this but wanted to leave a comment for anyone else sifting through new. My initial impression:1. There's a bunch of things a I disagree with in here.2. This is very well written.3. It's well organized.4. It's both concrete and high-level.5. There's a ton of info here.I'm so burnt out on shallow content, it's really refreshing to see something well argued, whether I agree with every conclusion or not.	travisjungroth	12.824661	-6.536576	comment	5.0	37.0	1624460155	10.096213
27606036	Last time I checked on Elixir, it se	Last time I checked on Elixir, it seemed like people used Phoenix to pretty much do anything useful with it. Is that still the case?	xwdv	12.746481	-7.326951	comment	5.0	20.0	1624463978	12.875313
27683560	Erlang/Elixir were designed for tele	Erlang/Elixir were designed for telecommunication programs. If what you are doing is even vaguely like this Erlang/Elixir are going to be perhaps the best language you could pick. If you need to make a GUI or handle a CRUD app it may well be the worst language you could pick.Elixir is a lot more forgiving, but with Erlang you can tell it was made for telecom switches.	R0b0t1	12.604868	-7.482866	comment	5.0	25.0	1625013064	12.920604
27683614	I'm running an elixir startuppros:- 	I'm running an elixir startuppros:- web-socket story is the goat (and I used to write nodejs)- ecto database library is amazing- productivity is on par with django/rails- performance is comparable to go. sub 100ms response times are normalcons- not many drop in libraries.- hiring engineers is a pain but plenty are interested in learning- libraries are not as used so you're more likely to run into a big in edge libraries.- deployment is more complex if you want to use the mesh featuresSo far, I'm happy with it. There are certain features specific to my startup that would elixir/otp made easy to create. We're getting traction and elixir's strengths are a huge part of that.	cultofmetatron	12.684123	-7.397814	comment	5.0	22.0	1625013546	12.861545
27685870	Folks who have used Elixir in a team	Folks who have used Elixir in a team environment (as opposed to for personal use), is the lack of types an issue in navigating big/unfamiliar codebases?	jatins	12.621534	-7.449972	comment	5.0	15.0	1625037744	12.922767
27756592	Personally, I’m not a huge fan of Ty	Personally, I’m not a huge fan of TypeScript. I feel it’s unnecessarily verbose at times. I used ReasonML for a while, and I absolutely LOVED it. I’m just bummed about the uncertainty of the projects future and adoption and the lack of alternatives that seem to make TypeScript the defacto standard.	koprulusector	12.385742	-7.0364523	comment	5.0	23.0	1625623514	-10.503084
27953710	So what's the actual way of doing th	So what's the actual way of doing this in PHP?	Zababa	12.73348	-6.6440616	comment	5.0	15.0	1627253700	10.304317
27954224	If there's anything more annoying th	"If there's anything more annoying than the lingering bad examples of PHP code online, it's people lying about what PHP ""recommends"", like you do.Common database drivers like PGSQL, MySQL, SQLite etc. don't accept arrays of values for parameterized queries. This is at C level, in their own client libraries, and their own communication protocols.This means there's nothing specific to PHP about this problem. Many higher level libraries, including for PHP, abstract over this problem and do offer arrays by binding per query.So where are statements like yours coming from? Probably just being eager to say something bad about PHP without checking your facts too much."	yourenotsmart	12.758003	-6.54953	comment	5.0	29.0	1627259333	10.116681
27955462	It shows the culture in PHP. They wo	It shows the culture in PHP. They would rather keep a function around that doesn't work properly just so existing code still works instead of making everyone test that the new function works.	SilverRed	12.640072	-6.720189	comment	5.0	26.0	1627271703	10.405493
27979815	wtf they want people who know coffee	wtf they want people who know coffeescript https://bubble.io/job?jid=4377554002	animalgonzales	12.425511	-6.592568	comment	5.0	26.0	1627440635	-10.5167265
12012492	I feel bad for Sean Griffin. He spen	"I feel bad for Sean Griffin. He spent over a year overhauling the internals of ActiveRecord to add this attributes API. His work dramatically improves coercion and type enforcement for ActiveRecord users. Seems weird for this to only get a non-descriptive bullet point in ""other highlights.""Here are the docs if anyone is interested: http://edgeapi.rubyonrails.org/classes/ActiveRecord/Attribut..."	jbackus	12.904054	-6.6661863	comment	5.0	18.0	1467327304	12.414594
12033989	An Erlang WAT-story about guards and	An Erlang WAT-story about guards and guards	elbrujohalcon	12.5481	-7.52633	story	5.0	52.0	1467683882	12.909287
12043028	Finding an erlang programmer availab	Finding an erlang programmer available on site within 1-2 months is the hardest part of deciding to go with erlang. With go you can take a C++/python programmer and have them writing production code pretty soon, i think this is what inhibits functional programming in general, the learning curve bundled with the amount of work around prevents people jumping onboard also willingness of some employers to hire someone without a ton of exp. with erlang makes it difficult for a senior programmer to switch.	woodcut	12.568115	-7.5174522	comment	5.0	22.0	1467813038	12.935277
12062040	There is a fine line between short c	"There is a fine line between short code and readability, which is, by far, one of the most important factors of code quality. Say you have a code:  $this->executeAfter(5);

This is a short code, but it's not readable. What the hell is 5 here? Let's improve it a little bit.  class Time {
    
    protected $seconds;

    private function __construct($seconds)
    {
      $this->seconds = $seconds;
    }

    public static function inSeconds($seconds)
    {
      return new self($seconds);
    }

  }

  $this->executeAfter(Time::inSeconds(5));

I've just added ~10 lines of code, but the readability of executeAfter is way better. In addition, the executeAfter method is more flexible, since it can manipulate the Time object now.This is a very basic example to illustrate what I meant when drawi"	andreygrehov	12.700857	-6.6586957	comment	5.0	17.0	1468081817	10.331981
12073622	I really like the look of Elm --- to	I really like the look of Elm --- to me it seems to hit the sweet spot of being enough like Haskell to be awesome while also being understandable by humans. It also fixes some of the rougher edges of the Haskell syntax; I vastly prefer Elm's record syntax to Haskell's, for example, which apart from being much cleaner and obvious also avoids some of the more common Haskell namespace traps.The one piece I'm really looking for is server-side Elm, though. I've love the ability to write both my client and my server in Elm. I know there are some projects to allow Elm via node.js but they're still quite rough.(Is anyone looking into transpiling Elm to Standard ML, so that it can be compiled to fast native code with MLton? Because that'd be, like, really cool.)	david-given	12.963353	-7.6704907	comment	5.0	53.0	1468265123	-12.792281
12094365	I was just always dissuaded from the	I was just always dissuaded from the size of Django, Flask is mininal, and gets up and running quicker for me. Coming from a lot of Express work, it just made more sense to me, but I'll be definitely diving into DRF for my new project.	overcast	12.772795	-6.547909	comment	5.0	18.0	1468508292	10.048349
12150494	I Accidentally Some Machine Learning	I Accidentally Some Machine Learning – My Story of a Month of Learning Elixir	fredwu	12.688261	-7.451017	story	5.0	102.0	1469298992	12.93717
12151892	I wanted to use TypeScript with a ne	I wanted to use TypeScript with a new React project, but the biggest problem I had (which eventually lead me away from using it) was that typings were so hard to get ahold of. Built something in JS? Sorry, you have to provide what is essentially a source map in order to get it to work with TypeScript. That should be a non-starter for anyone who is doing more than a hello world app. Figure out a way for me to use TS without having to create a bunch of extra type garbage in my app and I'll upgrade my code base immediately.	iLoch	12.417415	-6.754052	comment	5.0	30.0	1469326244	-10.43557
12157772	That cup of coffee in the logo sugge	That cup of coffee in the logo suggests they are compiling to the Java JVM. If true, this makes me wonder why aren't they using Erlang itself as a target?	amelius	12.513422	-7.478936	comment	5.0	26.0	1469444164	12.917427
12160056	It already has, unfortunately it's n	It already has, unfortunately it's not too popular.  This is why Prolog gives most folks a case of headache. My moment of enlightenment while studying Prolog happened when I realized that I wasn't logical, but trying to solve the problem in Von Neumann style.  I was humbled to see simple logic solutions in place of my overly complicated solutions.   This has made me such a better developer, I keep my code as declarative as possible.	segmondy	13.139649	-7.289152	comment	5.0	25.0	1469466896	-12.493127
12191799	TypeScript is, in fact, awesome. 2.0	TypeScript is, in fact, awesome. 2.0 adds still more awesomeness, and 2.1 has async/await compiled down to ES3/ES5, which I will be very happy to see.The only thing that I don't understand is why TypeScript isn't just considered a required client (or Node) Best Practice at this point.There are other languages that I prefer for specific domains, of course. But if you're writing code that needs to run on a web client and/or that needs to run in Node, TypeScript is the only way to go.	SomeCallMeTim	12.383114	-6.669238	comment	5.0	51.0	1469857548	-10.474526
12192289	TypeScript is the one technology I w	TypeScript is the one technology I would discard last of the entire web stack.Using TypeScript instead of JavaScript is such a productivity boost for a team developing a sizeable single page application, any other technical decision (which Framework, tooling decisions) is almost irrelevant relative to this major improvement.TypeScript has ALL the properties that should make adoption a no-brainer:1) Increases developer productivity, especially over long term maintenance timeframes. (My non-scientific, ymmv estimate is at least 30%)2) Reduces production exception rate significantly3) Can be adopted gradually4) Full JavaScript ecosystem still at disposalPeople seem to massively underestimate the benefit of a typed language in a frontend codebase. At gunpoint, I would rather have the backend i	Retozi	12.340406	-6.848877	comment	5.0	26.0	1469870862	-10.4360075
12193694	Prolog.c: a simple Prolog interprete	Prolog.c: a simple Prolog interpreter written in 200 LOC of C++ (2000)	adamnemecek	13.132484	-7.297045	story	5.0	109.0	1469897639	-12.466301
12205391	Shame about Channels, but I see the 	Shame about Channels, but I see the logic in not including it. Django is pretty awesome as a backend, and while it's not a 'cool' framework anymore (I feel old!) it's amazing for writing back-office applications.I use it as an API backend with Django-rest-framework. The advantage is you get ridiculous amounts of packages that all integrate with Django that does pretty much anything you want. Also the ORM doesn't suck now so that's a bonus.	orf	12.831949	-6.525956	comment	5.0	48.0	1470081313	10.073836
12207416	If there are any Django masters in t	If there are any Django masters in the building: If you were starting a project today would you use 1.10 or stick with the LTS release (1.8)? I have a fairly mature django project using 1.6 that I would be borrowing a bit from, and my experience not upgrading off 1.6 due to pain makes it feel like an LTS path might be a good choice?	encoderer	12.826802	-6.546761	comment	5.0	19.0	1470103565	10.0878725
12218894	The difference in difficulty between	The difference in difficulty between Python/Django and WordPress is massive.To do Django you have to know Python, which is a big assumption. For Wordpress you need basically zero programming knowledge.Also compared to Flask, Django is much more complicated by making you adhere to their MVT (Model-View-Template).	rampage101	12.777418	-6.531858	comment	5.0	28.0	1470239996	10.023185
12219042	Do you mean WordPress? Sure, of cour	Do you mean WordPress? Sure, of course it shouldn't escape critical scrutiny, but people actually sneer at it (and PHP generally, and worse, at PHP programmers).There's a lot to learn from WordPress and PHP.	DanieleProcida	12.772242	-6.6247206	comment	5.0	64.0	1470240854	10.321857
12219344	Well, in fairness the WP codebase is	Well, in fairness the WP codebase is horrific. I used to write everything in PHP, and once thought it a good idea to build a system in WP because it was user friendly. I needed some custom auth plugins and a custom theme.Having fought with a poorly documented, inconsistent and generally badly-designed codebase for a few months, I'm not sure I'd agree that WP is undeserving of some sneering. It is one of the worst made things I have ever seen.PS: I no longer develop in PHP, and haven't seen the WP codebase in about three years so perhaps it has improved.	gtf21	12.766362	-6.629685	comment	5.0	43.0	1470242773	10.329577
12223614	Elixir is not a fast language. Not e	Elixir is not a fast language. Not even close. Yes, it handles concurrency and parallelism beautifully which in turn enable distributed applications to perform quite well. But the language itself is significantly slower than Crystal / Rust / Go / Swift. It's not in the same category at all.That said, it's a great language worth recommending.	acangiano	12.632974	-7.4575005	comment	5.0	41.0	1470289013	12.914309
12223518	"The claim is ""fast as C"", so I was s"	"The claim is ""fast as C"", so I was surprised that the performance comparison was with Ruby, not with C.  On my machine, the Ruby Fibonacci program executes in 47.5s, while a corresponding C program executes in 0.88s - that's a factor 54 difference, while the article reports a factor 35 for Crystal.  That's good, but what causes the difference?  This benchmark is pretty much all function call overhead, so I doubt it's representative of real performance-sensitive code.The Crystal website itself makes a more modest claim than ""fast as C"" under its language goals: ""Compile to efficient native code"", which it clearly does."	Athas	12.340128	-7.214171	comment	5.0	60.0	1470287644	12.004298
12260018	Interactive Sudoku Zero-Knowledge Pr	Interactive Sudoku Zero-Knowledge Proof	Manishearth	13.449869	-7.4098806	story	5.0	68.0	1470813470	15.08054
12319615	>>> The wrong way: Always use a fram	>>> The wrong way: Always use a framework on top of PHPI haven't been actively working with PHP for quite some time but... From what I've seen, I wish many people didn't take this advice (including the teenager me).It's similar to ORM. Often, if you don't use one, you end up building one, a very poor one. Yes yes I know there are exceptions and all but, in general, that's truth. Same with frameworks. If you don't use one, you end up writing a poor one, unless all you need is a page that outputs a result of a single SQL query, or something equally trivial.I've seen plenty of 10k+ LoC applications with home made frameworks, poorly replicating open source ones, just because.>>> In the world of Python and Ruby building websites from the ground up is tiresome because neither Python nor Ruby was	gedrap	12.770156	-6.621709	comment	5.0	24.0	1471610915	10.32632
12396420	My favorite Erlang Program (2013)	My favorite Erlang Program (2013)	Tomte	12.562759	-7.525918	story	5.0	189.0	1472626093	12.919144
12400753	I'm on the Facebook Reason team, and	I'm on the Facebook Reason team, and we're using BuckleScript to compile OCaml into the best compiler output I've ever seen. People didn't recognize that my React components were generated, not hand-written.BuckleScript's author (hongbo_zhang here) has been incredibly responsive and welcoming.We'll be publishing the React.js binding on HN in a few days. Stay tuned! We (including Hongbo) are all sitting in irc #reasonml and https://gitter.im/facebook/reason	chenglou	12.330024	-7.6198874	comment	5.0	23.0	1472671196	10.360297
12441031	The README of the gem that the artic	"The README of the gem that the article recommends (""sysrandom"") provides a good explanation [1].And here is the contentious Ruby issue wherein the Ruby core developers insist on cargo culting according to an outdated man page despite comprehensive refutation from a number of experienced security engineers [2].That said, the arguments against OpenSSL seem to be largely theoretical at this point (""has been a source of vulnerabilities in Ruby ...""), so the misgivings about `SecureRandom` may be slightly exaggerated.[1] https://github.com/cryptosphere/sysrandom#why[2] https://bugs.ruby-lang.org/issues/9569"	brandur	12.578379	-6.9702125	comment	5.0	25.0	1473223879	-8.978154
12443316	> It's just a wordpress website. You	> It's just a wordpress website. You don't need nothing fancy to be successful.I've observed similar products myself, often ones that are more successful versions of my own creations. I've seen stuff built with spaghetti PHP code, yet it was marketed well and more people were paying money to use it than my own. Yet when I looked at it, the first thing I saw was an SQL injection vulnerability that would allow me to drop the entire database.It makes me wonder though, if instead of looking at entrepreneurship from the software development side of things, maybe instead I should be trying to build a marketing and advertising agency that builds software. These types of companies seem to make more money than I do.Yet at the same time, in the marketing companies that come to my mind, the weaknesse	joshaidan	12.7828865	-6.6008363	comment	5.0	58.0	1473256137	10.350411
12468824	Mittsu – 3D Graphics Library for Rub	Mittsu – 3D Graphics Library for Ruby	jellymann	12.617967	-7.0573454	story	5.0	56.0	1473509378	12.375272
28609188	Django 4.0 alpha 1 released	Django 4.0 alpha 1 released	sandes	12.826981	-6.559799	story	5.0	109.0	1632254209	10.134892
28624038	For those unaware: Aaron Patterson, 	For those unaware: Aaron Patterson, aka tenderlove, is an influential and longstanding personality in the ruby community who’s made many significant contributions to Ruby and Ruby on Rails over the years.He’s also a fantastic writer with a quirky style, highly recommend perusing his technical writing: http://tenderlovemaking.com/	d4mi3n	12.6191225	-7.0590277	comment	5.0	22.0	1632358679	12.368236
28647530	Ask HN: Which would you choose? Elix	Ask HN: Which would you choose? Elixir/Phoenix or Crystal/Lucky?	akudha	12.74944	-7.2250576	story	5.0	7.0	1632516010	12.820282
22304194	are there any other implementations 	are there any other implementations in other languages? (preferably c++).I use libgit2, but the code is a bit difficult to read and hack. I know there is a ruby book implementing from scratch.I want to understand the git internals.	billconan	12.496872	-7.0410247	comment	5.0	17.0	1581464487	-11.766519
22341891	Compiling PHP's Eval() to .NET	Compiling PHP's Eval() to .NET	pchp	12.568404	-6.661064	story	5.0	73.0	1581866128	10.219107
22382239	LiveUSB builder with ROS (Robot Oper	LiveUSB builder with ROS (Robot Operating System) installed	fudekun	12.708546	-6.8364077	story	5.0	36.0	1582282070	12.194904
22538955	Is there a plan for how backend jobs	"Is there a plan for how backend jobs would work in this ""Rails for the Javascript age""?I find that JAMstack is great until the need for recurring or out-of-band processes comes up. In Rails of course there are jobs that can be backed by Sidekiq or what have you, and additionally on a VM one can always set up a cron job to invoke some Rails tasks.For JAMstack there is no clear alternative, as far as I can see. Manually setting up a recurring lambda function (granted, I have not yet done it) seems to be annoying enough that I would rather just deal with a VM instead."	gnalck	12.772175	-6.844975	comment	5.0	16.0	1583869976	12.321868
22755673	I went ahead and skimmed the sample 	I went ahead and skimmed the sample output C++ files for their test sources, but I have not yet seen everything in the project. I can not find an import for a garbage collector, so does this compile Typescript to non-GC’ed C++?	throwaway17_17	12.328117	-6.817506	comment	5.0	19.0	1585794159	-10.449626
22789237	I'm studying DS and Algorithms, I am	I'm studying DS and Algorithms, I am a self taught developer and I'm trying to fill some gaps in my general CS knowledge.There's a project I want to work on but I feel a bit overwhelmed and don't know where I should start, I'd appreciate some advice here.I want to create shogi(Japanese chess) server, similar to lichess, the thing is that I've never done anything similar to this, I've been reading about web sockets, this seems like a good place to start. I plan to use elixir for the backend, is this a good choice? Lichess uses scala, should I   use this instead?	sunsetSamurai	12.660226	-6.996661	comment	5.0	18.0	1586125349	12.70223
22816808	Note that Stripe is working on a typ	Note that Stripe is working on a type checker for Ruby: https://sorbet.org/I second the sentiment though. I wouldn't choose to use plain JavaScript over TypeScript for any significant project.You might ask why I wouldn't just use a more fully typed language like Java. My main response is that I love having the flexibility to choose how strict the types should be. Sometimes, typing something out fully is not worth the trouble. Having escape hatches lets me make that choice. While I enjoy using types to turn runtime bugs into compile time errors as much as possible, it's not the right thing to do 100% of the time.	dguo	12.3588085	-6.9283724	comment	5.0	57.0	1586378234	-10.383551
22818642	has anyone here ever used prolog in 	has anyone here ever used prolog in production - like real world, making money, production?    How about in real world research where it produced no-kidding actual value?   From what I can tell it is only useful these days as a academic example of an alternative type of language.   Is there something else that has carried the torch forward?	vpribish	13.151968	-7.2979794	comment	5.0	15.0	1586392004	-12.494613
22822651	We had a pretty similar experience w	"We had a pretty similar experience with elm around cookies. The elm-lang/cookie repo README starts with ""Cookies are an ancient mistake of web browsers. They make a bunch of security problems quite easy, so consider this an expert library."" However, they never address reading cookies, so if you're using a framework that does CSRF protection with cookies, you have to use ports, which adds quite a bit of complexity for something as simple as making an API request.Elm looks great on the surface, but once you start digging in you really start to realize it's ""there"" way or else. It's too bad, the ideas have a lot of promise, but we pivoted away quickly after running into the ""core arrogance"" a couple of times and went with Typescript/React/Redux."	beh9540	12.99277	-7.617377	comment	5.0	17.0	1586441259	-12.7541685
22824985	This came at an awkward time. I just	"This came at an awkward time. I just bought Richard Feldman's book ""Elm in Action"" a few days ago and was working through the first 2 chapters. This has made me reconsider my intention use Elm in my startup.Having features randomly fail on me and having to rewrite an entire library in elm vs calling out to js means less time creating features that matter to my customers! I was drawn to elm as a way of spending less time debugging my own code in production. Part of that overall strategy means pulling in tested, working code whether it's also elm or js.Some of what I see here could easily relegate elm to being a toy language; a damn shame considering how good it is as far as strongly typed functional languages to js go."	cultofmetatron	12.988954	-7.6770663	comment	5.0	22.0	1586453292	-12.755267
22825553	After reading a large number of the 	After reading a large number of the responses here, I feel like I've noticed a pattern - two types of comments:1) I've used the language and agree with the conclusions of the post even if I don't necessarily agree with every point.2) I haven't used the language, but I believe open source projects must be maintained by their maintainers as they see fit.I actually agree with both of these positions, but, having used Elm in the past for a hobby project with an eye towards using it in production, I probably won't ever use it. I loved the original promise. Evan's ideas about the Elm Architecture are worth reading and learning for anyone. But, as many others have pointed out, if one has to maintain a project over the years, the breaking changes in the language would have caused great bouts of te	bwanab	13.002066	-7.6830697	comment	5.0	29.0	1586456189	-12.759698
22894000	Is Erlang's BEAM VM really slow comp	Is Erlang's BEAM VM really slow compared to other virtual machines, or is it Phoenix? It seems to be a bit of a laggard on benchmarks [1] and there's been this thread going on for years [2] which hasn't reached a conclusion.[1] https://www.techempower.com/benchmarks/#section=data-r18&hw=...[2] https://elixirforum.com/t/techempower-benchmarks/171EDIT: Thanks everyone for the responses.	taspeotis	12.499719	-7.405908	comment	5.0	35.0	1587074392	12.853079
22907133	So is Perl never going to go past ve	So is Perl never going to go past version 5 now?	xupybd	12.350473	-7.046784	comment	5.0	26.0	1587211503	13.185279
22948074	I have been watching Phoenix/Elixir 	I have been watching Phoenix/Elixir for a while and wondering if it has gained a lot more traction compared to say 2 years ago ? My choice of full web app framwork is Symfony/Laravel (PHP) or Python (Flask/Django) but I really like what Phoenix has to offer.However, does it have a mature ecosystem now ? What about deployments and tools around it ? Does it work with generic web servers like Nginx or does it run its own http server ?	codegeek	12.770088	-7.2445426	comment	5.0	20.0	1587576894	12.769592
22948506	Are there any good tutorials to get 	Are there any good tutorials to get started? What major sites are currently using Elixir?	perseusprime11	12.689581	-7.425468	comment	5.0	18.0	1587579237	12.928394
22952403	Lack of built in user authentication	Lack of built in user authentication kills this project for me, that's just something I don't want to deal with building my own anymore after django.	overcast	12.857361	-6.502903	comment	5.0	15.0	1587610247	10.057969
22993795	Aaaaaaaand ofc there is nothing abou	Aaaaaaaand ofc there is nothing about the tools thst are in the main runtime built around distributed systems.Their explanation on tracing show they have never played with an erlang system.As someone that build distributed systems everyday, i would really like all of our industry to play more with production erlang systems. That would answer a lot of these explorations instead of badly reinventing the wheel over and over again.	di4na	12.555338	-7.5020127	comment	5.0	26.0	1587973628	12.901058
22996500	IMO, we've traded the complexity of 	IMO, we've traded the complexity of `this` with the complexity of hooks. Maybe I'm weird, but I never really wrote JS that caused scoping issues, so I never found `this` to be a problem. At the very least it's a complexity that is internal to the language itself. Hooks just feel so weird and alien to JS. I find them very, very difficult to reason about.- difficult to reason about except for a few simple use cases. The developer experience is nice if what you're doing is basic. But if, for example, you're aiming for 100% code coverage, unit testing hooks is an absolute nightmare.	tenaciousDaniel	12.490202	-6.559059	comment	5.0	37.0	1587999894	8.632767
23002649	How to Create Your First Web Applica	How to Create Your First Web Application with TypeScript	matthewhartmans	12.392205	-6.793081	story	5.0	17.0	1588040345	-10.457289
23003914	It seems that I fundamentally misund	"It seems that I fundamentally misunderstand the benefits of TypeScript. 
I found myself spending hours and hours on reading the type errors stacktraces and adding types for libraries. Writing TS code takes 2x time than simple JS... and it is extremely painful experience. 
In comparison to many old plain JS projects I did - it simply doesn’t make any sense, the TS solves problems which I haven’t experienced at all."	stgewehr	12.374771	-6.814642	comment	5.0	31.0	1588053778	-10.452732
23027666	From what I can tell yes. It’s inten	From what I can tell yes. It’s intended to imply something more.See bubble for example - https://bubble.io . It’s basically “visual” Rails. The intention is to allow users to build complex, interactive software visually, without having to write code.Webflow has a ton of plugins that can get you something similar. You can have a user model (memberstack.io) with authentication and even the ability to create user specific content. I was able to create a fairly complex user dashboard that had real time charts pulled from an Airtable database that was synced automatically with user interaction using Zapier....but, here’s the issue. You just can’t do enough. I made it about a week before I abandon the idea and went back to Rails.I’m still bullish on the idea of no code though. The tools are ther	ryanSrich	12.800894	-6.7590613	comment	5.0	33.0	1588223929	12.36768
23066293	Lessons Learnt Failing to Monetize M	Lessons Learnt Failing to Monetize My Ruby Gem	rogem002	12.685077	-6.987045	story	5.0	55.0	1588587194	12.366828
23078651	Where to begin indeed!> - No proper 	"Where to begin indeed!> - No proper connection pooling with circuit breakers.PHP has had a ""shared nothing"" architecture since the very beginning, that includes DB connections.  It helps it to scale (think micro-services being stateless in a modern context): nothing is shared between requests, again including connections, by design.> - No proper multithreading (that works in web environment) or parallelism in general.I once asked Rasmus about this face-to-face, during one of his presentations, specifically his thoughts about the pThread extension (https://www.php.net/manual/en/intro.pthreads.php), and he responded that it was not required in a web context, as web servers already have threads per request so its a mute point.> - Almost everything blocks (even `new PDO('mysql:...')` can block"	alphadevx	12.721348	-6.587095	comment	5.0	24.0	1588676445	10.0314045
23141392	The Power of Prolog [video]	The Power of Prolog [video]	lelf	13.150841	-7.3056097	story	5.0	131.0	1589200518	-12.337533
23144342	Does anyone have any stories of how 	Does anyone have any stories of how they used Prolog in production to solve an interesting business problem ?	thewarrior	13.150257	-7.2957816	comment	5.0	17.0	1589216611	-12.49529
23173144	Does Deno have some built in way to 	Does Deno have some built in way to vendor / download the imports pre-execution? I don't want my production service to fail to launch because some random repo is offline.	Saaster	12.461033	-6.4463243	comment	5.0	23.0	1589412815	-10.901592
23173560	As a functional developer who doesn'	"As a functional developer who doesn't care for TypeScript in any way, it's frustrating to see Deno has it ""built-in"".As a node developer writing pure none-compiled JavaScript, my run time is extremely fast from changing code to seeing its results. It takes milliseconds for me to run brand new code in my terminal.If I make an index.ts file simply adding two numbers together (with no TypeScript), there is a 1 to 2 second delay while it ""compiles"" my ""TypeScript"". (Again I don't write TypeScript so I don't need this feature). I should note, subsequent runs will be faster, but as I'm developing I don't want delays between my runs.Since it's not even native TypeScript, it's just embedded the tsc which builds and caches the compiled code, why not let TypeScript developers add their bundling pipe"	turblety	12.331941	-6.75744	comment	5.0	26.0	1589415779	-10.452576
23180885	https://cronitor.io is built with Dj	https://cronitor.io is built with Django.It was a side project from March 2014 to March 2020, but as of last month it’s now my full-time job!	augustflanagan	12.808466	-6.473222	comment	5.0	18.0	1589471039	10.052431
23221171	Glad to see Flask surpass Django, it	Glad to see Flask surpass Django, it's always been my favorite web framework regardless of language and forces users to learn their style of software architecture. I personally prefer MVC: https://github.com/esteininger/flask-mvc-boilerplate	Beefin	12.729437	-6.5437927	comment	5.0	22.0	1589802690	-5.7117667
23234198	I think Prolog and logic programming	I think Prolog and logic programming will have a second renaissance. I think at the very least a general artificial intelligence would require a logical inference engine similar to Prolog.	TheUndead96	13.116287	-7.2730246	comment	5.0	35.0	1589892164	-12.418714
23250188	Elixir is decent and I've worked wit	"Elixir is decent and I've worked with it a fair amount in production systems... Mostly Rubyists seem to really click with it. And ruby idioms are all over it - you can taste its history and proximity to ruby's ecosystem.
As a scala dev that ended up working with elixir for a couple years, my opinion is that a typesafe elixir-like language would really bring BEAM back into the mainstream. Akka is alright but it's shoehorned onto the JVM. BEAM is good as long as you don't need to do heavy computation, but lack of type-safety (need to use dialyzer?) means that shit breaks in prod that the compiler would have caught. And yes, you can mitigate this with boatloads of testing and data-validations with ecto or whatever. But every time we broke shit that a compiler would have caught I cringed.It's "	ninjakeyboard	12.626443	-7.4384317	comment	5.0	40.0	1589999728	12.8860035
23251233	PHP being awful annoys me so much mo	PHP being awful annoys me so much more than javascript being awful.At least for the latter the use became mostly unintentional. For PHP, the problem is that it came about at just the right time to be picked up by WordPress and Facebook, hence encrusting itself in most of the web we see.I dislike WordPress the same way I came to dislike Visual Studio or any other monstrosity. It's a slow, massive, lumbering mess but it's also by the most mature tool for the job it does.There's no reason to pick up PHP for a new project. Except, I guess if you're just doing simple CRUD and PHP is what you know.Languages don't matter that much for simple CRUD apps and PHP is a sub par, annoying, inconsistent language that will get the job done.	VHRanger	12.713322	-6.5794086	comment	5.0	20.0	1590005671	10.314204
23251273	I didn't, skimmed.> PHP is the most 	I didn't, skimmed.> PHP is the most widely used language in the world for websites.Being served does not equate to being used to develop new things.Is there really that many new websites, website features being authored in PHP? Sure there is maintenance work and some popular platforms are written in it. But beyond that? I haven't seen a job posting in long time.	njharman	12.797226	-6.6297545	comment	5.0	18.0	1590005921	10.344518
23251715	Interesting. I really like Python an	Interesting. I really like Python and SqlAlchemy. Changing objects in the database via changesets and applying them on top of eachother feels kinda alien, when I can't do object.property = something.The thing that confuses me most about Phoenix and Elixir is how do I actually deploy the application to production? I have my own server where I can run whatever I want (running Ubuntu), so what do I have to do to get my Phoenix application working there? How do I get my code running as a systemd service?	skeletal88	12.767674	-7.2753596	comment	5.0	20.0	1590008316	12.832676
23284980	I work for a Ruby on Rails shop and 	"I work for a Ruby on Rails shop and we used Elixir for two projects about a year or two ago when
it was getting a lot of good press.The first project was an API that was intended to serve as a middleman between a few legacy services.
Basically the company that hired us was building a new JSON API but didn't want to rewrite all their old code
and our job was to consume the output from their ugly legacy APIs and produce nice JSON.Elixir/Phoenix worked for the first service, but after that we ran into problem after problem.
One of the legacy services used HMAC authentication and Phoenix (at the time?) didn't really support that. We were eventually able to hack around it without too much pain.
Another service used XML and we had a lot of trouble finding XML libraries.
There were some but nothi"	alex55	12.77842	-7.187079	comment	5.0	17.0	1590256805	12.74195
23285784	Why not get your existing engineers 	Why not get your existing engineers to learn erlang if you have such a need?	nicoburns	12.569642	-7.513615	comment	5.0	52.0	1590263272	12.926321
23286252	Dedicating a third of my time to a l	"Dedicating a third of my time to a language I had no previous intention of learning is going to be a hard sell, even if you label it as ""broadening.""If I'm a python developer, I'm now spending less time on my core competency, giving other python developers an edge. Seems like you're actually narrowing my career, unless I wish to apply for jobs seeking mediocre Erlang programmers..."	mrlatinos	12.549643	-7.4859757	comment	5.0	27.0	1590266698	-4.9460025
23358775	I wrote my first web app with Django	"I wrote my first web app with Django. And then Rails. These frameworks taught me how a web app should be structured (models, views, controllers, services, migrations, middleware).Now, if I wanted to, I could build my own application without Django or Rails, as long as I had something to accept incoming HTTP requests, make responses, and a library to make DB calls.But I wouldn't have gotten to this point had I not learned Django and Rails first.I think using a framework turns many ""unknown unknowns"" into ""known unknowns"".I can read my framework's documentation and learn it has built in logging, so logging is something I need to think about when building a web app. It lets you filter sensitive data from logs, so that's something I need to think about.This is why I was building a type of appl"	veeralpatel979	12.8249235	-6.495331	comment	5.0	40.0	1590817147	-13.801119
34068674	I love Rails and how simple and bori	I love Rails and how simple and boring[0] it is, and appreciate how it keeps evolving and growing. I've dabbled with some Javascript frameworks and Elixir/Phoenix, but always come back to Rails and forget just how fast and productive I can be. A lot of people complain about it, but I feel like Active Record just can't be beat, and helps me feel so productive. Add Stimulus and Turbo and the level of UI fidelity possible is impressive.[0] https://boringrails.com/	mike1o1	12.766274	-6.9080586	comment	5.0	21.0	1671555625	12.35831
26521777	I always fancied a database that wor	I always fancied a database that worked like a dynamic version of prolog, with facts that could be added over time, queries that can use inference etc. I couldn't really find anything that worked like that though, everything seemed to either have a fixed set of facts or didn't support inference.  Looking for something like that is what first got me interested in differential dataflow.The fact that this is bottom up makes me think that you probably can't go crazy with the number of rules.	kybernetikos	13.138657	-7.1691847	comment	5.0	35.0	1616231761	-12.439768
26535812	>Messages are always copied before b	">Messages are always copied before being inserted into the queue. As wasteful as this may sound it greatly reduces garbage collection (GC) latency as the GC never has to look beyond a single process. Non-copying implementations have been tried in the past, but they turned out to be a bad fit as low latency is more important than sheer throughput for the kind of soft-realtime systems that Erlang is designed to build.I do so wish there was a reference or link around ""tried in the past""."	javajosh	12.475705	-7.502372	comment	5.0	25.0	1616376157	12.86344
26546026	Crystal is a beautiful language, how	Crystal is a beautiful language, however compiling times is something that put off most people who try it. How comes and they don't allow you to optionally provide types in your function/class signatures so you can help the compiler and speed up the whole process ? I mean global type inference is nice, but giving the option to specify types and speeding up the compiling time would be even more nice.	vasilakisfil	12.58497	-7.277095	comment	5.0	19.0	1616443170	-11.252809
26546226	Congrats on the release!The biggest 	Congrats on the release!The biggest factor drawing me to experiment a little with Crystal is that it is one of very few languages providing what otherwise has been pretty unique to Go: Lightweight threads+Channels+M:N concurrency (automatically multiplexing the lightweight threads onto a smaller number of OS threads).Also it does it with a very readable and clean syntax.Wrote a little about it, with code comparisons, before:https://rillabs.com/posts/crystal-concurrency-easier-syntax-...	samuell	12.615183	-7.265889	comment	5.0	26.0	1616443915	-11.224406
26546360	"They ""why"" is basically having a lan"	"They ""why"" is basically having a language with the aesthetics and usability of Ruby, but fully statically typed with global type inference, and impressive performance.The downside being a relatively slow compiler. It's the necessary trade-off for the type inference."	Trasmatta	12.514412	-7.08826	comment	5.0	40.0	1616444435	12.384113
26594643	As someone learning Ruby and Rails a	As someone learning Ruby and Rails at the moment, and who likes to learn things from the fundamentals, is there a good book or blog series that takes you through it?Because I’m helping on a Rails app I’m learning a lot of magic, which is awesome for productivity, but I feel like I’m missing some important concepts that tie things together.	j4yav	12.738296	-6.956625	comment	5.0	17.0	1616779385	12.37891
26620378	Happy to see Deno get some financial	Happy to see Deno get some financial backing!I've been building my new multiplayer games website [1] with Deno over the last 4 months and apart from some minor growing pains, it's been a joy to use.The lack of unnecessary package management, and the TypeScript-by-default approach makes Web dev much nicer. We're also using TypeScript on the client-side, relying on VSCode for error reporting. We use sucrase to strip the types just as we're serving the script files, so that there is no extra build time, it feels like TypeScript is Web-native and we can share typed code with the server.[1] Not yet launched but we ran a preview past weekend with hundreds of players over WebSockets: https://twitter.com/MasterOfTheGrid/status/13757583007179735... - https://sparks.land	elisee	12.459276	-6.4882216	comment	5.0	27.0	1617019637	-10.905136
26648707	Has anyone here extensively worked w	Has anyone here extensively worked with Rails and then gone on to work heavily with Node/Express, or vice versa? Would love to hear your overall experience and thoughts between the two.	blizkreeg	12.76128	-6.8293004	comment	5.0	23.0	1617205463	12.325314
26659783	Why not start out by using the Djang	Why not start out by using the Django Admin features?That allows you to start with next to no code, but you can easily add a little business logic anywhere you need it eventually, and it provides a way to long term transition to a true application if the need arises.	jeffasinger	12.83949	-6.498011	comment	5.0	27.0	1617281357	10.078711
26703926	Oh no same crap of mixing hash symbo	Oh no same crap of mixing hash symbol and string keys as in ruby? You didnt have to borrow that Elixir! Does Elixir also have HashWithIndifferentAccess?	joelbluminator	12.666666	-7.3963604	comment	5.0	18.0	1617653097	12.831224
26711529	It's a shame that Django's templates	It's a shame that Django's templates are still so bad.You can't just import and call some arbitrary python function. You most likely need to write a template filter or tag [0]. Maybe there's a good reason for this but it just feels like I'm working around a weird issue in the framework.Also, I can't use parentheses inside if statements in a template. It's a strange restriction.I know that Jinja2 -- which is good -- is supported. But it's a second choice, requires some setup and it's not the usual way of doing things.Don't get me wrong. I like Django and it's still far, far ahead of most other web frameworks. But, because of these issues and also because the frontend story in Django is not that great I find myself reaching for Rails, these days.[0] https://docs.djangoproject.com/en/3.1/howt	vmsp	12.78852	-6.473035	comment	5.0	20.0	1617715980	10.005687
26715181	A couple thoughts on django as a lon	A couple thoughts on django as a long time user.  First, the good:- Django was the first framework i learned when learning to code.  It's documentation was amazing, and it made conceptualizing an MVC framework really easy.- Django's ORM is phenomenal for managing migrations of a relational database, especially postgres with stuff like jsonb.   I've even included it in non-python projects, just to handle table migrations/rollbacks.- The huge ecosystem is amazing.  Great for rapid prototyping.  Plugins for all kinds of crazy stuff.Now the bad:- In some ways it feels like a relic of an earlier stage of python.  It's support of asyncio is spotty at best (running the orm in a thread executor not a good work around).- It's support for type enforcement with mypy is not great.   This is maybe my b	buffalobuffalo	12.871069	-6.451168	comment	5.0	20.0	1617731972	10.049578
26719594	> This is not the same Ruby you'd us	> This is not the same Ruby you'd use for building web apps with Rails (far from it).> DragonRuby is powered by highly optimized C code written by Ryan C. Gordon.This feels like a liability for the long term. The community is now depending on Ryan to maintain this custom Ruby implementation, if I'm reading correctly.	Pfhreak	12.691504	-6.9605947	comment	5.0	28.0	1617759434	12.323009
26723224	If I understand correctly (from a qu	"If I understand correctly (from a quick browse of the docs) this is Ruby _without_ anything remotely like Rails. That makes it interesting.I did a Rails job once. I kept thinking that I liked the language as a kind of modern OO language in the spirit of Python (and also Lua a bit) but I really disliked the ecosystem around Rails. For instance, the project I worked on had to maintain two separate versions of Ruby because different gems worked with different Ruby versions (it's been a while so I don't remember details).Another thing that bothered me is that everytime I searched online for help to do something slightly more advanced in Ruby my search results were inundated with ""hello world"" style posts from aspiring Rails devs eager to advertise their passionf or Rails. I could never find th"	YeGoblynQueenne	12.681254	-6.986185	comment	5.0	19.0	1617794327	12.363117
26746880	You might get a kick out of this: ht	You might get a kick out of this: https://liveview-counter.fly.dev/It's a multi region Phoenix app using libcluster to power LiveView. We have some fun ideas for Elixir, we just need to speed up builds.	mrkurt	12.911415	-6.9207463	comment	5.0	19.0	1617944284	12.749374
26828190	I know PHP is really great (and alwa	I know PHP is really great (and always has been).But sh*t, there is soooo much bad, no, really really bad PHP code that lives out there.Isn't it?	eric4smith	12.771394	-6.643136	comment	5.0	18.0	1618535573	10.333182
26828656	FastAPI is just a rip off of Starlet	FastAPI is just a rip off of Starlette, it's obvious when you look at the code (https://github.com/tiangolo/fastapi/blob/master/fastapi/temp..., https://github.com/tiangolo/fastapi/blob/master/fastapi/test..., etc). Hopefully this change will kill FastAPI and force people to use the original project that is Starlette (https://www.starlette.io/)As to why people used FastAPI instead of Starlette in the first place, it comes down to hype and great marketing.	atxbcp	12.327502	-6.604862	comment	5.0	17.0	1618539787	-9.204172
26830370	You mean simply running Discourse (a	You mean simply running Discourse (a Rails app) is so complicated no one wants to do it? And if it was simply PHP boom business would have been booming ? I find that a bit hard to believe.	joelbluminator	12.761827	-6.8623624	comment	5.0	37.0	1618555075	12.323557
26831244	You can also do it in one golang fil	You can also do it in one golang file. Or one python file. Or one nodejs file.With PHP you have more moving parts, Apache/Nginx with their configuration and then the PHP script. With golang/rust/python/nodejs you have direct access to the webserver and more control, but the same simplicity.	lnenad	12.697908	-6.6550145	comment	5.0	18.0	1618562474	10.266749
26831833	Laravel docs are virtually non exist	"Laravel docs are virtually non existent. The code comments are meh.Their upgrades are frequent but are not backwards compatible. Many times after an upgrade we spent hours finding something that broke and was not documented in the upgrade guide.Their code quality leaves much to be desired, and it very significantly will slow down every part of the site.It is hard to call this a ""extremely high quality framework"" or even a ""acceptable low quality framework"". It may be possible to say this is unfortunately the best we've got in PHP."	sam_goody	12.809598	-6.634618	comment	5.0	16.0	1618567114	10.382047
26857721	Hi,If you ever want to talk about ho	"Hi,If you ever want to talk about how you build and deploy your app along with your tech stack in detail let me know. I've love to have you on the https://runninginproduction.com podcast.There's 14 Phoenix episodes at https://runninginproduction.com/tags/phoenix but the more the merrier since every story is unique.If you wanted to come on the show click the ""become a guest"" button on the top right to get the ball rolling."	nickjj	12.852547	-7.019172	comment	5.0	16.0	1618789662	12.750252
26862329	Is anyone even still using Flow? Alm	Is anyone even still using Flow? Almost every React project I see is in either vanilla JS or TypeScript.	jakelazaroff	12.519366	-6.57748	comment	5.0	19.0	1618837736	-10.491411
26862768	AFAIK laravel 8 -- the latest -- is 	"AFAIK laravel 8 -- the latest -- is the only stack to provide auth out of the boxAs inThey give you a login screenWhen you install an app 'starter kit'Breeze -- the simplest -- in this exampleDownside is you get stuck w vue and tailwindcss as defaults  curl -s https://laravel.build/example-app | bash

  cd example-app

  php artisan migrate

  composer require laravel/breeze --dev

  php artisan breeze:install

  npm install

  npm run dev

  php artisan migrate"	readonthegoapp	12.805101	-6.6361003	comment	5.0	17.0	1618840432	10.35258
26889453	In 2021, I think it's safe to start 	In 2021, I think it's safe to start a TypeScript project with Deno.	mark_and_sweep	12.4712	-6.5021715	comment	5.0	29.0	1619012012	-10.870836
26889048	Beam VM Wisdoms (2019)	Beam VM Wisdoms (2019)	Tomte	12.409438	-7.3756604	story	5.0	247.0	1619009929	12.7974
26896014	What I would really like to see is a	What I would really like to see is a statically typed language on top of the Erlang VM (dialyzer was not amazing last time I checked it, which was admittedly years ago).	uh_uh	12.506306	-7.480828	comment	5.0	17.0	1619042678	12.919916
26943212	Building a Component Library in Rail	Building a Component Library in Rails with Storybook	phacks	12.763792	-6.8542867	story	5.0	10.0	1619449277	-15.521578
26983426	Ask HN: Nine years after, how much o	Ask HN: Nine years after, how much of this is still true about PHP?	p5v	12.794502	-6.68277	story	5.0	9.0	1619714683	10.439214
26990107	There are no Elixir jobs where I liv	There are no Elixir jobs where I live, waste of time.	joelbluminator	12.701244	-7.4600987	comment	5.0	19.0	1619760781	12.947449
26989940	The thing we do that's (maybe) inter	The thing we do that's (maybe) interesting is run processes all over the world. It's helpful for liveview because it minimizes latency to end users. Here's an example Liveview cluster running in 17 regions, if you scroll down you'll see the round trip time to the server you're connected to: https://liveview-counter.fly.dev/Liveview is crazy powerful if you can keep the latency down.	mrkurt	12.913708	-6.7903237	comment	5.0	30.0	1619758501	12.716017
26999014	It's a funny Tweet, but Rails is muc	It's a funny Tweet, but Rails is much, much bigger than Basecamp now. There's enough money invested in the Rails ecosystem at enough large and medium sized companies that Basecamp could go away entirely and Rails would continue to persist.(I realize that there's always the possibility that this post could age like milk, and everyone might be pointing at laughing at me in 5 years. But that's also pretty much true for any piece of technology, and not unique to Rails' current situation.)	Trasmatta	12.77501	-6.940174	comment	5.0	21.0	1619815293	12.361888
27099601	I always found it a bit useless to b	"I always found it a bit useless to be fussing over phrasing like this. What does it matter if we call itexpect(x).to(equal(y))orx.should_be(y)orassert_eq(x, y)These are just different ways of saying the same thing. The first two aren't really better than the last at conveying what's going on.Although I like Ruby and Rspec, this desire for ""beautiful code"" and ""making the code read like English"" never rhymed with me."	colonwqbang	12.383796	-7.082115	comment	5.0	21.0	1620593442	-1.7096435
27131684	Slightly off-topic from someone who 	Slightly off-topic from someone who hasn't touched Erlang in almost 20 years: if my app is distributed with Erlang/Elixir, I kind of feel like my choice of database should be something with excellent horizontal scaling too. Can someone offer some insight into the trends in 3rd-party tools like databases for Erlang applications?	mrslave	12.581813	-7.496575	comment	5.0	19.0	1620834465	12.850627
27132999	Flask 2.0	Flask 2.0	avyfain	12.709321	-6.5648756	story	5.0	202.0	1620841127	10.052582
27193921	Probably there's no one in the Elixi	Probably there's no one in the Elixir community with enough know how to build a Devise-alike lib, it's what it is.	hnedeotes	12.686444	-7.4203267	comment	5.0	18.0	1621342524	12.91065
27240982	It basically did for simple web prog	It basically did for simple web programming what visual basic did for Windows desktop toys: allowed you to throw some UI together (drag & drop components in the VB case, any old HTML with links or forms for PHP) then start stringing bit of code in haphazardly to link it together. No need to learn a more complex compiler or other build tools, worry about configuring CGI or other web server tech (unless running PHP yourself), ...Great for prototyping, or just to encourage new programmers (as they can see results almost immediately).Though PHP was essentially thrown together initially so had a massively inconsistent standard library, had some insanely unsafe defaults for a few major versions, and other issues that it is very valid to complain about. It was also closely associated with mysql w	dspillett	12.653825	-6.538402	comment	5.0	35.0	1621637825	10.396949
27242639	This ignores the monstrous complexit	This ignores the monstrous complexity of setting up PHP (and php-fpm) on a host machine. I prefer fully contained targeted binaries these days.	dimitrios1	12.750965	-6.6001925	comment	5.0	19.0	1621649580	10.300947
27365816	Did you find better alternatives? I'	"Did you find better alternatives? I'm currently trying to learn a bit of Elm. So far it's basically the only ""Javascript framework"" that I've been able to get up and running, while still understanding how things actually work."	mrweasel	12.985989	-7.639018	comment	5.0	17.0	1622617547	-12.7585
27382949	As someone who has mostly been an ou	As someone who has mostly been an outside observer to Erlang, you have succinctly described why I have not felt the need to use it.It's amazing at what it does - If you had lots of physical nodes and needed to build a robust, fixed-size system at any moment in time, it's an incredible option.But with container orchestrators, you get the ability to design a polyglot with more fluidity in your design. The admission that different languages are best suited to different tasks throws a monkey wrench into the Erlang ecosystem, because now I all of a sudden can't use Erlang for everything.It does sound like an excellent choice for a control plane in many cases, however. I think it's phenomenal at what it does, but I think you have provided excellent context regarding its ideal use case.	lucasyvas	12.530798	-7.5234275	comment	5.0	15.0	1622734658	12.898142
27388134	Elixir at Ramp	Elixir at Ramp	clessg	12.689915	-7.460981	story	5.0	126.0	1622758524	12.94808
27398019	My experience with phx_gen_auth was 	My experience with phx_gen_auth was like this:1. Install Phoenix, expect the command to be available because everyone is raving about it.2. Missing command.3. Dig through docs.4. Pull the development branch of Phoenix because phx_gen_auth is only available there.5. Run the generator within the Phoenix git repo because it won't allow me to run it elsewhere using a development version.6. Use the generator.7. Never figure things out because the phx_gen_auth command is barely documented and now I've got files everywhere that I don't understand.I tried implementing API authentication as well and while I got it working, it was less pleasant than my usual Django stack.Another example. The colossal amount of docs referring to a missing Phoenix plugin for Guardian that got removed in a random updat	sergiomattei	12.824953	-6.9895477	comment	5.0	17.0	1622834949	12.686649
27438478	Exploring Deno Land with Ryan Dahl [	Exploring Deno Land with Ryan Dahl [audio]	binarynate	12.529553	-6.4496865	story	5.0	52.0	1623174505	-11.002892
27461076	Ask HN: What's a good TS codebase to	Ask HN: What's a good TS codebase to learn from?	jcuenod	12.367218	-6.798103	story	5.0	10.0	1623334730	-10.497577
14712409	Why is PHP a terrible language? It p	Why is PHP a terrible language? It powers a vast part of the internet including sites huge, tiny, and everything in between.It's in vogue to hate on PHP especially here on HN. Language hate based on some sort of popularity contest is silly and language snobbery wont be tolerated at any company worth its salt (read: NOT most startups)	mattacular	12.759774	-6.648563	comment	5.0	23.0	1499364193	10.313991
14712502	Right; Facebook, Wikipedia, OpenStre	Right; Facebook, Wikipedia, OpenStreetMap - all serious tech stacks that started and (in the case of the last two) continue to use PHP.Reminds me of: https://slack.engineering/taking-php-seriously-cf7a60065329	jackweirdy	12.766256	-6.6094246	comment	5.0	21.0	1499364743	3.1131475
14746234	No.How about this: understand what t	"No.How about this: understand what the hell you're doing.For 99% of the web, 531 requests a second is beyond what you need.  Not everything on the web needs to respond to 7000+ requests a second.  In fact most of it doesn't.  Heck, most of it doesn't need to respond faster than 1 second.  In my experience, most of the poor performance in Ruby web applications is caused by trying to shove too many operations into the same process and making all data ""first class"".  This is probably in part because Rails for years didn't include a built-in jobs system.The only thing ""web-scale"" means is that something serves HTTP requests through the web in a way that people find useful.  If so, then any language that can create sockets is potentially web-scale, including COBOL.  Beyond that requirement, the"	ravenstine	12.712416	-6.9350357	comment	5.0	23.0	1499795186	12.339218
14756598	Pharo – Quuve	Pharo – Quuve	mpweiher	12.354186	-7.2613707	story	5.0	34.0	1499892919	7.127899
14763714	The problem is all the shitty broken	The problem is all the shitty broken parts of PHP are still there, and (many, many) people will use them.The only secure PHP is no PHP.	TylerE	12.777143	-6.598957	comment	5.0	52.0	1499969587	10.323054
14765201	I also scored 14/15 - got PHP wrong 	I also scored 14/15 - got PHP wrong I thought it was Perl which is slightly embarrassing as I've never used PHP but I have used Perl.	arethuza	12.646397	-6.718429	comment	5.0	18.0	1499979738	13.0969925
14796125	I'm honestly surprised to see so man	I'm honestly surprised to see so many rails jobs on there	chipgap98	12.759675	-6.9360905	comment	5.0	15.0	1500382583	12.371779
14799893	It's pretty wild having seen CoffeeS	It's pretty wild having seen CoffeeScript spread like a wildfire in the early 2010s, only to be discarded nearly as fast a couple years later.	Dirlewanger	12.425886	-6.6016383	comment	5.0	31.0	1500410553	-10.524945
14847223	I wonder how the popularity trend of	I wonder how the popularity trend of Elixir has been lately. I know you can try to see it through GitHub or Google Trends, but as many members of the Elixir community use Slack I don't know if it's the best way to do it. One thing I'd like to see would be the evolution of downloads of the language and on Hex.	raphy	12.689736	-7.4531727	comment	5.0	40.0	1500986370	12.962219
14848670	Can anyone doing Phoenix in producti	Can anyone doing Phoenix in production share their typical HTTP response times?I built a small Phoenix project about a year ago, and compared to Rails it wasn't quite as fluent but still pretty nice. But ever since then, I've been trying to decide if the extra development time is worth it for the performance gains. I get that Elixir is more scalable, and I love how the RAM requirements compared to Rails are tiny, but what I still haven't been able to really answer is the latency improvement. According to these benchmarks it is about as fast as Django:https://www.techempower.com/benchmarks/#section=data-r14&hw=...Is that really the best I can hope for?	pjungwir	12.7561865	-7.0415893	comment	5.0	27.0	1500997844	12.621876
14850079	Is Elixir being used exclusively for	Is Elixir being used exclusively for web development?  If not, what else are people using it for?	logingone	12.686166	-7.428044	comment	5.0	15.0	1501004910	12.897135
14855781	I hate perl6.  I hate it because I t	I hate perl6.  I hate it because I tried to get involved in the project early on, and it led me down the Haskell rathole.  I don't know what Haskell looks like today, but a decade or more ago it was the hardest language to pick up that I had ever experienced.  It was as if I had a solid background in latin languages and I was trying to pick up Chinese based on a handful of tutorials written by a tourist on the back of a napkin.But it has been a decade and I am truly impressed with what it has turned into.  Unfortunately, it has to re-gain mindshare as if it was starting from scratch.  It might be a little bit harder actually, because there are a variety of scripting languages these days that are easy to learn, and there are still more than a few people who actively don't like Perl.I really	Steeeve	12.332125	-7.042344	comment	5.0	51.0	1501073889	13.1319895
14865944	Ruby on Rails.Because for 95% of my 	Ruby on Rails.Because for 95% of my projects, personal and professional, thats the tool to solve it. I don't have to reinvent anything, or worry about gaping security holes common to web applications - i just need to work on the problem domain.I can focus on good modeling and good front-end UI/UX. And there is flexibility in delivering desktop/mobile applications quickly, using what i've already built in rails.As a one man band, I can't think of a better instrument to play.	meesterdude	12.7058935	-6.679771	comment	5.0	42.0	1501167860	12.224058
14866983	Elixir and PhoenixIt's incredibly pr	Elixir and PhoenixIt's incredibly productive, you get the benefits of microservices with the development and deployment style of monoliths thanks to umbrella apps and there's not a single performance based concern I can think of that it can't handle.Plus it simplifies infrastructure significantly by removing the need for much outside of Postgres.	brightball	12.687412	-7.307125	comment	5.0	23.0	1501173764	-13.790993
14872511	"The ""our way is the right way"" menta"	"The ""our way is the right way"" mentality that is common in the Elm community is really the larger issue here, and it has been a bit of a turn off for me.  There is a lot about Elm to really like, but it is a rather closed off development culture without a lot of appreciation for hearing ideas and experiences from others.If Elm could open up and allow developers to experiment with other architectures, like pretty much every other language, and not be so restrictive in forcing everyone into the exact same pattern, I think it would be very successful, because the language itself is nice.  If someone wants to use Elm as it currently is, that should be one simple option available to everyone. But you should be able to easily discard that if you want to, and do other things, including making a c"	hellofunk	12.992045	-7.6806417	comment	5.0	47.0	1501225421	-12.759956
14876657	Ivy looks great.  That said, every t	"Ivy looks great.  That said, every time I see a new SSG in Python, I get all excited about it for a minute.  Then I remember this bit of advice: ""Just use Jekyll"".> Jekyll is not better than the rest for any fundamental design reason; it’s better because it’s enormously popular and therefore excels in the long tail of details.> ...> If, like me, you secretly believe that everything is better if it’s written in Python, I still suggest you start with Jekyll (which is done in Ruby). In my experience, using Jekyll does not require writing or reading a single line of Ruby.http://www.cs.cornell.edu/~asampson/blog/jekyll.htmlThis matches my own experience pretty well."	cvwright	12.502653	-6.9948554	comment	5.0	20.0	1501268703	12.362058
14876907	I'm a django guy. I have no experien	I'm a django guy. I have no experience with functional programming.What would a transition to phoenix + elixir look like for me?	dopeboy	12.761897	-7.214716	comment	5.0	34.0	1501270776	12.839902
14877580	Phoenix is great! I only wish there 	Phoenix is great! I only wish there was one recommended way for authentication and authorization - there are so many [1] different libraries that I got stuck in researching the options - I am confused, do not know which one to use. What is your preferred way? I would like to avoid to implement every little detail on my own - to get security done right was the main reason for me using open source libraries.It would be great if there was one official way to make it easier to implement app security with the framework. I feel that this is the only missing part in phoenix - but it is a very important one.BTW: does anybody know some tool that generates a phoenix api from a json-schema? Thanks![0] https://github.com/h4cc/awesome-elixir#authentication	softwarelimits	12.818919	-7.069434	comment	5.0	28.0	1501276014	12.69364
14884492	Pretty independent of recent improve	"Pretty independent of recent improvements, but one thing I feel people are forgetting about PHP these days is that, when given to a good hosting provider, PHP is essentially ""serverless"" programming, but without the vendor lock-in stuff like AWS Lambda give you. (and without the hype)Admittedly, even on a good host it won't scale as ridiculously well as a lambda function does, but I'd wager scling from 1 to 1 million req/s in an hour and then back again is a pretty marginal use of Lambda. All the other advantages boil down to not having to manage your own server. Just deploy the code, and that's it.Well, PHP has had this for decades. And I believe that people should really consider this when choosing a language. I don't know of any other language that you can code a backend in without thin"	skrebbel	12.77883	-6.5824146	comment	5.0	20.0	1501390419	10.217678
14884721	Long time PHP dev here. Note: These 	"Long time PHP dev here. Note: These are my personal observation and opinion.The usage you see are mostly from people already invested in PHP. However, I'm starting to see fewer new PHP devs. Some of the talented devs I know of have migrated to other ""cool"" languages. There are fewer PHP jobs than they use to be. I also observed less activity in PHP related subreddits.  Its position as the #1 web server language has already been taken over by nodejs, and the remaining chunk eaten by Go, Python, C# (as ms tech goes open-source) and other languages. I dont see PHP going away anytime soon, but I dont see it gaining more users over time."	vatotemking	12.765685	-6.6421227	comment	5.0	26.0	1501396901	10.307677
14889974	I'm really looking forward to the da	I'm really looking forward to the day when all these new-to-Elm people start hitting the complexity ceiling of their language and convince the maintainers to add just a little more power. Example: Haskell's typeclasses have a high power-to-weight ratio, and Elm has to work around their absence (e.g., writing a fresh map function for each data type). Once there's a critical mass of frontend types who understand the power of FP, convincing people to try FP won't be the difficult step any more, and Elm won't need to try so hard to be un-intimidating.	endgame	12.975784	-7.6766806	comment	5.0	110.0	1501484114	-12.752906
14891364	> I've been programming a long time,	> I've been programming a long time, and elm shattered my views of the relationship between a coder and his/her compiler.I love Elm as much as the next guy, but be aware that you can get many, if not most, of these same benefits while working in JS if you use Flow.js or Typescript.  I prefer Flow because the community is more oriented toward functional programming vs OOP in Typescript, but they're both capable static analyzers for JS.	jnbiche	12.963186	-7.6762896	comment	5.0	25.0	1501504986	-12.729847
14892321	I read through this a little while a	I read through this a little while ago when trying to decide if I should try out Elixir for a side project. The language is really intriguing, but I don't want to start a project without grokking how a more complicated project is laid out. Can anyone provide an open source example of a relatively complex project?	jeffrand	12.689167	-7.4354553	comment	5.0	15.0	1501511548	12.931645
14895210	I've certainly enjoyed Elixir as an 	I've certainly enjoyed Elixir as an nth programming language and the idea of Elixir as a 1st programming language is really interesting.I know I've seen at least one educator in the community speculate that Elixir (or FP languages in general) could potentially make great 1st programming languages because they're often conceptually easier than OOP languages and in many ways the difficulties people associate with learning them come from the difficulty of unlearning some of the things they already know.	adamkittelson	12.665639	-7.45589	comment	5.0	23.0	1501529844	12.922843
14935577	Given the extent of coverage on HN I	Given the extent of coverage on HN I would say there are very few devs. on HN who haven't heard of Elixir.	qaq	12.695417	-7.4474926	comment	5.0	23.0	1501939941	12.965847
14985057	What are the best programming langua	What are the best programming language tutorials?	CamelCaseName	12.729645	-6.95587	story	5.0	7.0	1502405066	12.384617
15004944	Its been endlessly stated but naming	Its been endlessly stated but naming it 'Perl 6' was a huge mistake. Perl 5 has an enduring reputation for crufty, unmaintainable code written by graybeard sysadmins. I wrote a lot myself that I wouldn't want to ever deal with again. I think they would have benefitted from a clean break from a marketing perspective, especially considering it's completely different.	pram	12.337637	-7.047461	comment	5.0	46.0	1502658469	13.18957
15005933	Lately, I've been seeing more pots o	Lately, I've been seeing more pots on Perl.  Is it just confirmation bias?  or is Perl making a comeback?	pascalxus	12.332763	-7.034592	comment	5.0	15.0	1502671448	13.185635
15007609	Can anyone compare this to other bac	"Can anyone compare this to other backend frameworks like Django and Rails?
Are non-Windows operating systems well supported as development platforms? I did some quick searches and the standard Visual Studio popped out a lot inside documentation, doesn't seem like a good sign.
How would you compare it to Elixir and Phoenix?"	esistgut	12.661135	-6.704882	comment	5.0	25.0	1502705361	-8.728471
15036540	All of my pet projects are run on El	All of my pet projects are run on Elixir/Phoenix. If there is a language/framework to learn, this would be it. As approachable as Rails with the benefits of handling real time applications (chats are trivial with Channels) and faster runtimes than Rails (by orders of magnitude).Happy to help anyone out if they're interested in learning!	acconrad	12.754225	-7.090036	comment	5.0	85.0	1502976447	12.574397
15044767	100% This.The use cases for OTP are 	"100% This.The use cases for OTP are actually quite narrow, despite what Erlang/Elixir evangelists tell you.Discord is a fantastic use for OTP.
Writing a CRUD app with a couple of reactive/interactive pages for comments on videos and few thousand users, OTP is overkill.If you have an app that needs the scale and safety of OTP, then which language you pick makes no difference.Phoenix is a really cool project, written by great developers and the community is probably the nicest and most helpful you will ever meet.
But how many companies/projects need the performance and redundancy of Phoenix/OTP in their web application at the cost of not being able to hire developers?"	Southy	12.654638	-7.4401507	comment	5.0	20.0	1503048836	12.915296
15052022	I know I am basically dangeling meat	I know I am basically dangeling meat into lions den with this question; How has PHP7 done in regards to the Modules section or modularity he speaks of?I am interested in genuine and objective replies of course.(Yes your joke is probably very funny and I am sure it's a novel and exciting quip about the state of affairs in 2006 when wordpress was the flagship product)	ehnto	12.769294	-6.631741	comment	5.0	17.0	1503124739	-11.721677
15113336	Hi, the main author of BuckleScript 	"Hi, the main author of BuckleScript here, below is a simple comparison with TypeScript (it may be biased):- Pros of TypeScript  - Designed for JS, easy inter-operate with JS
  - A much larger community
  - Nice integration with VSCode

- Cons of TypeScript  - Compiler slow (not scalable for FB/Google scale)
  - Verbose, very limited type inference
  - Start up time slow (very hard to build traditional build tools)
  - Types are only used for tooling - soundness is not the design goal, not very reliable
  - Only JS backend, no code optimizations

- Pros of BuckleScript  - No legacy of JS (clean slate) while great story in inter-operation
  - Compiles much faster, scales much better
    10% perf is a nice enhancement, 10x faster is an invaluable feature
  - An arguably much better language
 "	hongbo_zhang	12.376837	-6.82274	comment	5.0	27.0	1503875702	-10.376979
15163703	One of the things I've hated about m	"One of the things I've hated about maintaining PHP web apps is how reliant on the web interface they usually are; this has thankfully started to change. Drupal (finally) has decent CLI tools. MediaWiki is among the few to have had CLI tools for many years.But, the thing that struck me about this project and the examples is just how verbose PHP has gotten over the years. It is strikingly similar to old Java, in terms of class definitions and the like. I know PHP has also gotten faster and lot of ""grown up"" language features in that time, too, but some of its charm as a language with strong ""whipuptitude"" is lost. I'm certain it's a better language than it was a decade or two ago, and it was, frankly, awful by many measures back then. But, it sure does take a lot of typing.So, I like that th"	SwellJoe	12.705454	-6.6242533	comment	5.0	27.0	1504470579	10.3512535
15181622	Even more: why WSGI ?We need a djang	Even more: why WSGI ?We need a django of the async world. We need something in Python to compete with nodejs, or even meteor, with async/await as primary tool. And maybe a aWSGI support.But WSGI ? We have everything we need. They are proven tools. They work. Have great ecosystems and documentations. They do the job perfectly for non real time oriented web site. We don't need another one.	sametmax	12.397746	-6.575302	comment	5.0	31.0	1504679129	9.868671
15187279	I do mostly Ruby professionally and 	I do mostly Ruby professionally and dabble in Python, and I agree with heydonovan. Pip works fine for installing things, but near as I can tell, Python has no equivalent of bundler - a tool to install specific versions of a bunch of libraries, generate a lockfile ensuring that your production server and all of the devs are all running it with the same version of everything, and letting you have as many versions of a gem installed as you want, and still running a project with specific versions other than the latest.	ufmace	12.37689	-6.8551073	comment	5.0	19.0	1504733424	-9.303397
15203460	As someone who is finally getting in	As someone who is finally getting into Python development (via Django) after following tons of tutorials over several years: should I be using pew, virtualenvwrapper, or something else? This article is from 2015, how relevant is it today?	rye-neat	12.653155	-6.5240498	comment	5.0	17.0	1504900666	10.01627
15209904	> external get_internal : map 'a 'b 	"> external get_internal : map 'a 'b => 'a => Js.undefined 'b = ""get"" [@@bs.send];I like languages that are readable. This is starting to look like codegolf. https://github.com/reasonml-community/reason-react-hacker-ne..."	Xeoncross	12.816663	-6.44485	comment	5.0	36.0	1505004531	8.581972
15235947	We faced a similar situation in our 	We faced a similar situation in our project and went with Flow instead. We found a TS + Webpack setup too unreliable. There are couple of popular Webpack loaders (ts-loader and at-loader), and both kept crashing the Node process every other build. Build times were pretty high. We could not find any documentation on how to fix these problems, except for a few open GitHub issues.We then tried Flow. Oh dear god, has it been a blessing.Pros:* It's seamless to integrate with Webpack, ESLint & Babel.* It's crazy fast* Has great support for React* Fits in perfectly with Redux* Dead easy for beginners to learn* Has an amazing Type system. My major experience with types has been Java, and Flowtype just blew my mind with - non-nullable types, subtyping and type refining.* Documentation is great* Com	pcx	12.575968	-6.4395113	comment	5.0	24.0	1505283214	-10.492584
15278423	This is honestly the first time I ha	This is honestly the first time I have looked close at CoffeeScript. At a passing glance, it looks really close to Python with javascript elements added in. Is that a correct assessment? If it is, this might be for me.My other question is: how nice does coffee script play with other libraries? We (unfortunately) use jQuery a lot. I have also been using underscore and lodash as well. Are those two even needed when writing coffee script? I'm kind of assuming not, since they're both largely just adding methods/functions.	no_wizard	12.401539	-6.5414987	comment	5.0	28.0	1505760398	-10.534763
15278175	As much as I love CoffeeScript (beca	As much as I love CoffeeScript (because I love Python), I think over time the project is loosing it's value due to ES6 (Frankly I believe even TypeScript is going to suffer the same plague soon). One possible incentive for me might be the toolkit and the pre-built stuff that I can get out of box from such transpilers (JSX is a good addition for example, however I am surprised why something like PUG, or HAML was not adopted instead of JSX from syntax perspective). None the less I greatly appreciate the hard work team is doing and look forward for stuff like pattern patching and some functional inspirations.	maxpert	12.415479	-6.5625963	comment	5.0	16.0	1505758533	-10.5202
15280160	I think that these changes mean the 	I think that these changes mean the death knell for PHP in any version, for small companies. There is still a place for Hack or PHP7 in very large operations, but startups, and businesses that run at smaller scale, really should walk away from PHP entirely as soon as possible.Two reasonable directions to choose are Python Three with a framework like Flask (lighweight) or Django (heavy duty). Or go to the JVM with something like Grails framework (heavy duty) on the Groovy language. Ratpack is a lightweight framework for Groovy and there is also an interesting option to use Vaadin 8 which lets you put your GUI code into the main app rather than writing separate Javascript code.When making your decision, be sure to consider the huge JVM ecosystem that integrates quite easily with Groovy inclu	memracom	12.689782	-6.6337533	comment	5.0	15.0	1505772934	10.294296
15280509	Out of curiousity when someone says 	"Out of curiousity when someone says ""awesome for web development"" I would generally expect Python or Ruby to be in the following sentence. Maybe even js/node (if that's your cup of tea).I can understand the plus points are an enviably simple deployment story and ease of recruiting developers. Is there anything else that you would argue makes PHP especially suited to the web over other competing languages?"	andybak	12.700616	-6.6535892	comment	5.0	19.0	1505776371	10.343417
15284476	I feel there should be a counter-art	"I feel there should be a counter-article along the lines of ""Unit testing and static code analysis conservatively prevent 80% of the bugs"". I've used both Flow and Typescript and imho they're both frequently more trouble than they're worth. They catch the simplest of newbie bugs that are rare in modular, linted, unit-tested codebases. There are static code analyzers (eg. tern.js) that provide hinting without requiring a transpiler. With Flow and Typescript you have transpiler overhead, but when it comes to places you might need them the most - checking and sanitizing data interchange that's so common in modular, service-oriented architecture - they fall flat. Flow or Typescript could have been more useful if the annotations truly were annotations in the form of comments, unfortunately they"	drderidder	12.4437275	-6.758286	comment	5.0	26.0	1505828512	-10.465813
15320558	How a rails/ruby buy should start wi	How a rails/ruby buy should start with python/django?	claudiug	12.805818	-6.6874566	comment	5.0	32.0	1506185575	10.3017645
15320775	Can someone recommend a learning pat	Can someone recommend a learning path for building Django sites/apps to someone who has no web dev experience but uses python for scripting and workstation utilities? In particular, I use python for VFX/CGI scripting.	gt_	12.747364	-6.534169	comment	5.0	20.0	1506188373	10.075207
15363332	Visualizing Your Ruby Heap	Visualizing Your Ruby Heap	geospeck	12.50398	-7.0255194	story	5.0	132.0	1506668447	-11.2228
15388788	I don't want my family and friends t	I don't want my family and friends to be ashamed of me. If I get the job, will people know I use PHP?	alansmitheebk	12.777436	-6.634975	comment	5.0	15.0	1506986335	10.489002
15423695	"This is off-topic, but ""no php""?"	"This is off-topic, but ""no php""?"	rebelde	12.762437	-6.625121	comment	5.0	24.0	1507383182	10.32631
15458272	Is there still some new features com	Is there still some new features coming to Ruby? It seems the language is not this cutting edge technology it was once. I mean we see more changes in Java and PHP than Ruby these days.	sunseb	12.643709	-7.009516	comment	5.0	17.0	1507819167	12.370054
15458325	I always get tempted to switch to Ru	"I always get tempted to switch to Ruby * whenever i remember that Matz intended to make programmers happy. However, I don't think i'd feel comfortable with a language that only allows object-oriented programming, and moreover OOP of the old way (a method must be tied to only one object. This is what prevents me from going to Smalltalk, btw.)Additionally, the MRI is perhaps the slowest implementation of a dynamic language out there (besides ""R""). I know there are alternative implementations; is there any implementation that is significantly faster (at least as fast as Google V8 for ECMAScript) and that supports the full Ruby language without compatibility issues?* in place of Python"	flavio81	12.531121	-7.0679364	comment	5.0	24.0	1507819491	12.351615
15458265	16 years ago, but just 6 years after	16 years ago, but just 6 years after the language was released, and 4 years before Rails came on the scene.In retrospect, I'm not sure how successful Matz has been in upholding the principle of least surprise. In many ways, Ruby is one of the worst offenders.	norswap	12.642036	-7.017554	comment	5.0	24.0	1507819107	12.400266
15474278	Show HN: Tic Tac Toe Implemented in 	Show HN: Tic Tac Toe Implemented in Elm	vishaltelangre	12.998698	-7.6899543	story	5.0	27.0	1508014802	-12.747929
15496548	Why does anyone write web apps in Py	Why does anyone write web apps in Python? PHP? Ruby?First: Because squeezing every last nanosecond's worth of performance out of your web app is actually an extremely rare problem to have. And if you truly cared about performance over programmer convenience, you'd practice what you preach and build your web apps in hand-rolled assembly, but I'd bet a lot of money that you don't do that.The typical web application -- I'd be willing to bet over 99.999% of all deployed production web applications serving requests today -- has a bottleneck at the database and the network that dwarfs any overhead from language performance.I remember a bit over ten years ago when there was debate in the Python web world about which templating engine to use to generate HTML. And people argued endlessly over micro	ubernostrum	12.476118	-6.647509	comment	5.0	17.0	1508295090	10.031292
15508857	I have to say I don't really underst	"I have to say I don't really understand the point of these projects. Faced with the problem of generating a static part for my website, I just used Django to ""print"" the static part. I'm not saying you need to use Django (although in my case it has clear advantages, namely that you write everything using a single tool), but.... left pad, anyone?"	seertaak	12.7950325	-6.4787493	comment	5.0	20.0	1508427757	10.048576
15567946	The difficulty is finding good Dev t	The difficulty is finding good Dev teams building Elixir as Elixir and not second rate Ruby on Rails refugees looking for a faster Rails a-la Phoenix.	dontlikeitupem	12.717579	-7.338835	comment	5.0	15.0	1509110108	12.844777
15585512	So I've been working on a python fla	So I've been working on a python flask web app in part time/spare time for my business for almost two years (in addition to running a company doing several million USD in sales over that time without the app.) In that two years, I've tracked my programming time with wakatime and I'm at >1000hrs now, more than 25 full-time 40hr work weeks of actual coding time. I'm running the app on a dedicated GPU server, as part of the apps function is to evaluate 3D CAD files. Time spent managing and running a dedicated server is not even counted in the 1000hrs. Of course, I've also had to learn to be a Postgres database admin and dozens of support libraries. And, certainly must have at least some javascript/jquery. Libraries like flask-admin and flask-security are great. But, when you need them customi	bobjordan	12.764999	-6.5092325	comment	5.0	22.0	1509376207	9.941068
15593807	We're moving away from a Ruby codeba	We're moving away from a Ruby codebase now. Everytime I have to grep the codebase to find where a method magically came from, I die a little on the inside.I won't say it is a bad language, but it allows and seems to encourage some bad habits.	eximius	12.473346	-7.065237	comment	5.0	20.0	1509462844	12.365465
15599188	I'm really surprised to see Ruby so 	I'm really surprised to see Ruby so high on the list.  I have limited experience with it myself, but I had the impression it was a generally well-liked language.	luhn	12.6078	-7.0375743	comment	5.0	20.0	1509517904	12.367852
28691208	Aren't PHP and JS also single-thread	Aren't PHP and JS also single-threaded in the exact same way?  Regardless, if you look at the history of Python it was supposed to be a teaching language and to be used for very simple, user-written scripts. Using it for actual production code makes about as much sense as writing production stuff in bash, you can do it but you're just making things harder on yourself for no good reason. Even Ruby is a bit better, but these days there's no reason not to use Go or Rust.	zozbot234	12.458431	-6.790856	comment	5.0	20.0	1632901216	10.249687
28718582	The change indicated in the title[1]	The change indicated in the title[1] was made on foot of trolling by the user @hmdneIt's really a remarkable failure of communication. It doesn't appear anyone read what he was saying carefully. They just looked at the first two lines of his proposal and assumed they understood his intent. And then when encouraged he actually made the change. And they actually merged it.It's amazing that people who are apparently paying such close attention to textual significance, don't appear to have the ability to read his statements with any care.[1] https://github.com/ruby/www.ruby-lang.org/pull/2690#issuecom...	scandox	12.5759735	-7.0503683	comment	5.0	15.0	1633097201	12.378943
28774957	https://jumpstartrails.com/It's very	https://jumpstartrails.com/It's very polished. Kept up to date. Follows best practices for RoR. The author is one of the most active RoR community members.https://excid3.com/edit:If you like PHP then https://spark.laravel.com/ is an official Laravel project. I haven't used it but I've seen discussions where folks recommend it.	nerdywordy	12.795222	-6.6367936	comment	5.0	16.0	1633537370	10.364372
28800560	Python has one giant plus over prett	"Python has one giant plus over pretty much every other popular language:    The syntax

I was reluctant to to meaningful whitespace for a long time. But after doing some projects in Python I have to admit the code looks so much better than C style languages with all the {, } and ;sAnd it has one giant plus over PHP:    The module system

PHP went down the wrong road (of insanity) by deciding that the way to avoid naming conflicts is to use longer classnames. Because that is what namespaces in PHP are. Comfort tools to make your class names longer.There is still one giant benefit of PHP over Python:    Performance

Currently, PHP is about 6x faster than Python.Let's hope that the Python devs will focus on performance so we get the best of all worlds at one point!"	TekMol	12.575286	-6.689341	comment	5.0	47.0	1633708103	10.323678
28838628	Utility Types[0] will help you get t	Utility Types[0] will help you get to the next level on Typescript. It's important to know them and know how and when to use them.[0] https://www.typescriptlang.org/docs/handbook/utility-types.h...	skywal_l	12.342848	-6.8582644	comment	5.0	52.0	1634039640	-10.441503
28849802	As a Laravel user, I still avoid Liv	As a Laravel user, I still avoid Livewire like the plague. Way too much 'magic' and it's not solving any of my real problems. I don't want to waste time learning Livewire because I really don't need to. Same goes for Laravel Breeze, Jetstream, Inertia, i'm sure they're great but I don't need any of it and they are becoming a thing that gets in the way more and more..	dncornholio	12.830258	-6.6755114	comment	5.0	26.0	1634114996	10.405899
28874673	PHP initially came on the scene when	PHP initially came on the scene when Windows was very popular and important. This might explain why PHP provided good support for Windows.In the ensuing decades:- VMs for development have become more popular. You can run Windows but then easily develop on Linux using VirtualBox. Virtualization is very popular now when compared to the late 1990s/early 2000s. You also have WSL and WSL2 and cygwin- Windows sadly is no longer the development platform of choice. Production runs mainly on Linux. Since deployment is on Linux, its a good idea that development happens on Linux to iron out any subtle platform issues and also get good support for native extensions in languages like Ruby, Python, PHP etc. Some server software/middleware (message brokers, databases, caches etc.) have much better suppor	sidkshatriya	12.686547	-6.5593147	comment	5.0	37.0	1634276307	10.206258
28892864	PHP+MySQL still hasn’t figured this 	PHP+MySQL still hasn’t figured this stuff out? I remember fighting mojibake in FogBugz 6 for Linux/Mac, fifteen years ago!	krallja	12.827116	-6.513525	comment	5.0	17.0	1634430426	10.21432
28919140	> Python is such a joy to writeTry o	> Python is such a joy to writeTry out Ruby: so many Python syntax decisions make no sense after you see the Ruby way.	satyanash	12.390381	-7.042968	comment	5.0	19.0	1634657177	12.382896
28940337	Adopting Erlang	Adopting Erlang	ecliptik	12.566703	-7.5155497	story	5.0	210.0	1634791222	12.912648
28943360	I don't care what anyone says— I abs	"I don't care what anyone says— I absolutely love PHP.I automated my home theatre with it as seen here:
https://www.youtube.com/watch?v=Cc8K6lg7Ag8I built a website just for me so I can stream my movie collection anywhere I go, but it also has a button to start playing an automated show in my theatre.I call it the Phantom. When you start a show, it plays a Dolby ad, a dancing hot dog-style vintage drive-in ad, and several random trailers in the same genre before the feature.The Phantom PHP code controls the lights, projector, curtain, and sound system.The lights come up for the credits and the whole room goes to sleep 30 minutes after the presentation.I've only shared it once here before and someone, I'm guessing a PHP hater, gave it a thumbs down on YouTube.PHP is extremely powerful in my "	thrusong	12.752826	-6.6132474	comment	5.0	34.0	1634818920	10.371079
28943406	Static compilation, real type system	Static compilation, real type system, real runtime, static analysis, higher quality IDEs (IDEA, VS), higher quality libraries (Spring and ASP.NET).They are in a completely different class to PHP.That is like saying a Honda Civic is the same as an Ferrari F1 car.	jpgvm	12.754424	-6.6390324	comment	5.0	24.0	1634819179	10.332434
28943591	I think there is nothing wrong with 	"I think there is nothing wrong with PHP if you are using it for what it was built for and you aren't pretending it's something it's not.It's the people saying ""PHP is the best language for building web apps in 2021"" that are problematic.No. It's simply not. We have come a long way since then and that view point can only be held out of ignorance.That isn't to say you can't build awesome stuff in PHP, you can and in your case did.But to say PHP > Java/C#/Rust/Elixir/etc is just being an edgelord for the sake of it. Language tech improved, PHP didn't come with it. That is fine, C didn't come with it either but it still has it's place.Right tool right job, PHP can still be the right choice for lots of things if you have experience with it and can use it to make the thing you want."	jpgvm	12.753455	-6.6418357	comment	5.0	19.0	1634820238	10.335569
29002521	The big innovation here seems to be 	The big innovation here seems to be https://swc.rs/If it works as advertised this is going to be great for a ton of JS/TS projects. Particularly having a 20x typescript compiler boost when running large test suites would be great. Maintaining 5-8 different babel related projects in packages.json is also annoying and often buggy.Looking forward to see where else this gets adopted and it's stability.	dmix	12.382646	-6.5903134	comment	5.0	30.0	1635266073	-10.443448
29050378	This seems huge.Does anyone know pla	This seems huge.Does anyone know plans around how this will be implemented into Rails?	rememberlenny	12.778201	-6.8975554	comment	5.0	30.0	1635613734	12.343574
29101139	As somebody who never worked with Fl	As somebody who never worked with Flow but loves TS, what does Flow offer that the latter can’t do?	gherkinnn	12.412064	-6.6224556	comment	5.0	27.0	1635977930	-10.456956
29140378	Typescript doesn't necessarily make 	Typescript doesn't necessarily make your code any more stable than equivalent vanilla JavaScript that validates function arguments properly. However, it does make the code more terse and the types more apparent. It adds some build time complexity and also requires (depending on how you configure it) that you define types for every little thing (e.g. argument objects passed into functions). In IDEs, you tend to get better autocomplete on Typescript than JavaScript. That said, I still prefer JavaScript.	hliyan	12.3313875	-6.8387218	comment	5.0	22.0	1636299974	-10.45863
29141576	We are already there. Machine learni	We are already there. Machine learning is the flavor of A.I. that keeps business barriers of entry high. If we had invested in symbolic A.I., things would be different. A similar thing happens with programming language flavors. PHP lowers barriers of entry so it is discredited by the incumbents.	iamcurious	12.7525215	-6.6429634	comment	5.0	46.0	1636306725	10.331324
29145100	I find Ruby gives me multiple patter	I find Ruby gives me multiple patterns to solve problems in, each of which feel easy.Even when it becomes evident doing it another way would have been better, usually it is still readable and consise, and quick to develop.My biggest disappointment in this profession is that ruby isn't used much more outside of rails. My team use it for everything except low level driver stuff, and it feels like we have this huge unfair advantage over our competitors.	fortysixdegrees	12.657066	-7.00419	comment	5.0	22.0	1636332465	12.379286
29171717	This is a beautiful feat showcasing 	This is a beautiful feat showcasing Ruby's expressive power, don't know of any other language that could be molded to accomplish the same feat.As a non Ruby programmer I still appreciate its culture whose community best seems to explore code as art. One of Ruby's contributors @mame (also a talented #1 IOCCC winner) does this a lot who's famous for quine-relay [1] but has lots of other interesting art code projects in their repos.[1] https://github.com/mame/quine-relay	mythz	12.551936	-7.0844584	comment	5.0	27.0	1636525806	12.376624
29171654	This takes my least favorite parts o	This takes my least favorite parts of Ruby, method_missing,  module_eval, runtime constant name generation, the parts that make it such a painful language to use and scale, and uses them to load a language that supports static analysis. The cognitive dissonance is palpable. I would have guessed a post like this would be satire!	stevebmark	12.576279	-7.0524316	comment	5.0	16.0	1636525191	12.376473
29202882	> blocks -- syntactic support in the	> blocks -- syntactic support in the language for cleanly passing a single in-line defined lambda/closure object as an argument -- are possibly the thing that are most special to ruby.Too bad ruby stopped short of doing the trivial obvious thing and just making blocks be regular values. Instead the language is complicated by special syntax and functions for sending and receiving blocks, and bizarrely limited by the inability to do anything with a block literal other than send it.Blocks were so close to being good. They managed the triple flip with a double twist, but they couldn't stick the landing. It's not quite a faceplant at the end, but it clearly shows how much better they could have been.	chowells	12.45759	-7.098794	comment	5.0	23.0	1636742014	12.425244
29262338	A very pragmatic reason exists: depl	A very pragmatic reason exists: deployment is dead simple for users with very little technical skill. Deploying PHP software is as easy as subscribing to a shared web host (expensive or not, but most will make your life easy), connecting using FTP/SFTP, and extracting a ZIP file into the main directory. Some hosts even skip the last couple of steps and let you apply a template with a well-known PHP CMS to get you started. Hey presto, you have a functioning web shop, business website, charity home page, or whatever other thing you want. There's a (PHP) app for that.In comparison, other programming languages are hard to figure out. Python, Ruby, Java etc all need some kind of a package manager to install dependencies (PHP apps are self-contained) and need to have the correct runtime version 	selfhoster11	12.749016	-6.5915666	comment	5.0	33.0	1637214373	10.3084345
29264225	I don't think any JS code can be wor	"I don't think any JS code can be worse than old PHP code. I've had to deal with legacy software written with PHP4. I was to port it to PHP7 since it was not compatible with PHP5.4+. The code used ""register globals"", meaning that variables were created on the fly from the parameters in the URL, the POST form data, and the cookies.Requesting `index.php?something=X` implied `$something = ""X"";` in the global scope at the beginning of ""index.php"". And since the global scope was not limited to a file, tracing a variable through files and side effects was a nightmare. Even understanding the code intent was often hard!Before PHP7, there were many elements of the language that were meant to simplify its usage, but had awful consequences in many cases. Even more because it bent the PHP community tow"	idoubtit	12.62989	-6.5056667	comment	5.0	16.0	1637234198	10.276649
29262357	Elicit	Elicit	apsec112	12.67547	-7.4263377	story	5.0	109.0	1637214612	12.9461155
29264542	My favorite thing about PHP is the e	"My favorite thing about PHP is the execution model. Every single request is brand new and runs the whole program start to finish.IMO that's extremely powerful in its simplicity and while you can get it in other languages, it feels like like a ""core competency"" for PHP (just like how async code is easier in javascript than in python, because JS kind of had it from day 1)"	Klathmon	12.735334	-6.6160374	comment	5.0	35.0	1637237500	10.317949
29274456	Ruby's dispatch is Smalltalk-like, n	Ruby's dispatch is Smalltalk-like, not Java-like; it is (very) late-bound.  The consequences for interface design are dramatic, the natural style being one in which objects notify each other, rather than telling each other what to do, and the result is loose coupling and ease of composition.People trying to write Java-like OO in Ruby end up confused and frustrated.	inopinatus	12.4146595	-7.120271	comment	5.0	28.0	1637303932	12.34332
29297525	They have missed out Perl CGI script	They have missed out Perl CGI scripts from “Matts Script Archive”[0]!I remember much difficulty as a 13YO trying to get his “guest book” Perl script to work for the first time (with all its famous security holes).Oh, and “CGI Proxy”! Hosting that somewhere on a personal site so that we could get passed the filter on the schools internet. Anyone who knew how to host that had great power in the IT rooms!Edit: wow cgi proxy has been updated as recently at 2019! [1]0: https://web.archive.org/web/19980709151514/http://scriptarch...1: https://jmarshall.com/tools/cgiproxy/	samwillis	12.426102	-6.56931	comment	5.0	15.0	1637512623	13.11763
29304400	There are cooler frameworks, there a	"There are cooler frameworks, there are more minimal frameworks, there are more ""modern"" frameworks. Whatever that means. Yes I would like to work with FastAPI, it is great. But...Django gets the shit done. There are plenty of developers to find for it. Lots of good quality plugins. Every problem you have, infrastructure wise, is often already solved and there is a blog post of it.Its good parts and its bad parts are widely written about. And if that is not enough: the documentation is great.Great framework to get your product to market, it allows me to focus on building products. I dont want to think about routing forms processing, or project layout again. I want to write code for the product, not for the framework. Django is just good enough. Forms, URL routing and models are not what del"	BozeWolf	12.750194	-6.4980655	comment	5.0	37.0	1637572338	10.041106
29315205	Sheldon: The Erlang Spell Checker	Sheldon: The Erlang Spell Checker	elbrujohalcon	12.552145	-7.5041804	story	5.0	58.0	1637650191	12.912812
29341356	Having used PHP since version 4 (20 	Having used PHP since version 4 (20 years ago), I can say with confidence that its had its peak. Everything new added since 7.4 is just fluff or bloat. Fixing long standing bugs and performance improvements is fine, of course. But everything new they introduce adds to the pile of warts that's PHP. I highly regard those that try to improve it, but with the current direction it'll remain the colloquial example of how not to design a programming language.	pdenton	12.759802	-6.643904	comment	5.0	17.0	1637848384	10.33051
29347897	Hello World in PHP is literally    H	"Hello World in PHP is literally    Hello World

I know no other language that elegant."	donatj	12.611758	-6.5743823	comment	5.0	17.0	1637907331	10.318164
29442577	After seeing Elixir pop up so many t	After seeing Elixir pop up so many times on Hacker News these last few months, I deicded to give it a go for the Advent of Code.It's been pretty amazing actually, it takes a little getting used to, but it really feels like a language that was designed in every way possible to be ergonomic and productive. I'm still not sure whether it's easier to read purely functional code over a few mutable variables and simple loops, especially with a lot of filter, reduce, scan, zip, etc.It's been pretty amazing so far, I haven't gotten further than IO.inspect()ing yet. The language server is still leagues even behind something like Rust analyzer (even renaming symbols is still a work in progress), but it's amazing that such a language already has one of the leading web frameworks (Phoenix), and despite	marcus_cemes	12.561239	-7.39401	comment	5.0	18.0	1638639795	12.86126
29472566	Where are we on the whole Django ver	Where are we on the whole Django versus Rails debate?(Not cannonfodder, I am genuinely curious)	unixhero	12.8100395	-6.6757026	comment	5.0	31.0	1638886028	10.315659
29531808	Ask HN: Membership Management System	Ask HN: Membership Management System	palidanx	12.77679	-6.8692718	story	5.0	5.0	1639331778	12.42096
29570497	Learn Django Web Framework	Learn Django Web Framework	happy-go-lucky	12.803632	-6.52795	story	5.0	70.0	1639596551	10.070246
29577111	I am 100% not interested in ops. Dep	"I am 100% not interested in ops. Deploying is handled by other way more qualified than I.
I never expect a JS expert to build elixir, I don't expect an elixir expert to write bash, and I don't expect a bash expert to know about switches and cabling. 
I don't understand where you draw the line.. 
Should the designer who also crafts the css do ops too?I think high quality comes from specialists. Sharp knives in the hands of pro's"	baash05	12.671175	-7.386657	comment	5.0	17.0	1639653114	12.941485
29582465	Just to throw my hat in the ring, Cu	Just to throw my hat in the ring, Currently CTO /founding engineer of health tech company that runs a Rails backend that serves about 150QPS.I hear over and over that rails doesn’t “scale”.Performance wise, we have never had a problem scaling rails itself. The issues were always at the database level. Most slow endpoints (1.5s+) are 10% Ruby, 90% Postgres.Even if Ruby was magically infinitely fast, these endpoints would go from 1.5s -> 1.35s.Optimizing data infrastructure gets 10x returns compared to the application code.Maintenance wise, it’s a bit harder, Rails loves to put everything in the global namespace. This comes down to your team being conscious of properly namespacing different logical parts of your app.	czhu12	12.757923	-6.91149	comment	5.0	17.0	1639681960	12.34413
29602630	Rails was done by a product guy to s	"Rails was done by a product guy to solve one need. Most of the ""the new rails"" challengers are made by engineers.Rails took a need: creating a blog engine; and make everything needed to have the simplest and most understandable way of doing it. Going through that example was like: -""Ahh  makes sense."". Features were secondary and the focus was on the solution. It was about solving one specific use case and grow from there.So far, any framework I saw that claims to be the new rails, is speaking about features and the million things you can do.It feels like Rails was done by a product guy, and all alternatives were done by engineers.From reading the article, remix feels like the best way to deploy to edge. An engineering problem. Not a user one."	cientifico	12.761264	-6.9205236	comment	5.0	26.0	1639813630	12.340913
25497422	I see a lot of Elixir lovers but I j	I see a lot of Elixir lovers but I just can't wrap my head around a lot of the idioms. Is it bad I much prefer loops to reduce? Also modelling complex domains things just flow better in my brain with OOP, whenever I go to draw things I put them in boxes with as little state as I can.I would love love love to see two people approach the same exact problem with OOP and FP and see the rewards of both.However I really love pattern matching from Elixir real game changer of a idea, excited to see it come to Java and Ruby soon and the lightweight threading models come to both of those languages also.I always preferred Brian Gotez's argument that you should be functional within objects. https://www.youtube.com/watch?v=8GWZE2Y2O9E	bestinterest	12.599885	-7.462615	comment	5.0	17.0	1608573453	12.912001
25534762	I owe my career and livelihood to Ru	"I owe my career and livelihood to Ruby, Rails and the community. When I started learning programming I was overwhelmed because of c, c++ and JavaScript. Tried a bit of Python too. 
I thought I would never get a hold of any programming language ever. One day I tried this mysterious language from Japan(That's how I knew Ruby at the time) on tryruby.org. Ruby was breath of a fresh air. Code read like English. I was making small CLIs which required so much work in every other language. That was enough to get me hooked. Then I learned about Rails and never looked back.
Happy to see this language making new strides with this release. This is a thank you note to Matz and the community."	pvsukale3	12.596327	-7.040375	comment	5.0	22.0	1608878742	12.366096
25535030	What are your thoughts about it bein	What are your thoughts about it being the 7th most dreaded language on Stack Overflow's 2020 developer survey? I've never programmed in Ruby, but it seems attractive to me.	will_pseudonym	12.581011	-7.039328	comment	5.0	30.0	1608883519	12.384469
25543788	Top 102 most downloaded Django packa	Top 102 most downloaded Django packages in 2020	kmmbvnr_	12.816528	-6.556257	story	5.0	57.0	1608994237	10.1375885
25652643	I wonder... is it still justified to	I wonder... is it still justified to learn Prolog now? Aren't there better alternatives for logic programming in many other common programming languages? I mean http://minikanren.org/	qart	13.141252	-7.2906585	comment	5.0	18.0	1609888851	-12.507599
25690212	Ruby 3, Concurrency and the Ecosyste	Ruby 3, Concurrency and the Ecosystem	ksec	12.584552	-7.0109696	story	5.0	237.0	1610138689	12.3415985
25693254	I've a hard time seeing how this cou	"I've a hard time seeing how this could work out. Admittedly it's been some time since I did ruby but as I recall there was a shocking amount of mutability going on in the core language and throughout the ecosystem. Mutable lists, tables and strings everywhere, even the ""constants"" of ruby were mutable by default which bit me more than once.I'm just not convinced that good parallellism is something you can successfully bolt on to a language 25 years down the road. The languages I've seen do a really good job all embraced parallelism as an important problem from the start and had a strong policy of immutability by default and good persistent data structures. Such a clear  commitment permeates the ecosystem and you get libraries with clear parallelism stories .Hopefully I'm wrong and this wil"	colonwqbang	12.560069	-7.047787	comment	5.0	41.0	1610151916	12.34542
25767667	Erlang's VM is great, Erlang the lan	Erlang's VM is great, Erlang the language isn't imo. Elixir just did it better imo and this person seemingly can't stand that people seem to like it more. Let people like the things they like :P I'm really not sure this needed a blog post.	Grimm1	12.611531	-7.49613	comment	5.0	29.0	1610570376	12.931173
25767947	From the perspective of someone comi	From the perspective of someone coming the other direction (a developer working almost entirely with Elixir that needed to jump to Erlang docs occasionally), it's interesting to see the note on docs, and honestly the vibe I get from this blog post feels related to my personal overall gripe with the Erlang community.To be blunt, I really dreaded needing to jump to the Erlang documentation, largely because of a perceived gap in developer empathy. Elixir documentation feels like it's written in a way that wants you to be successful and enjoy the process, while Erlang documentation feels very perfunctory. Where Elixir documentation is rife with examples and hints, Erlang documentation almost makes you feel like an idiot for wanting to see similar examples.I wonder how much of that vibe is more	mmcclure	12.635612	-7.486427	comment	5.0	32.0	1610571901	12.932777
25768516	As someone who came to erlang at lea	As someone who came to erlang at least in part because i hated ruby (and also rails/phoenix like frameworks) i can partially sympathise. I would however put pipe operators clearly on the pro side of elixir and also add the string handling to that list (no pun intended).I am ultimately really happy about Elixir giving BEAM some new popularity in otherwise unreachable audiences, even though i had really hoped for something more akin to erlang2 or similar to an erlangish coffeescript.But in the end even joe approved of elixir and i don't remember significant effort on erlang2 after initial experiments.But the problem seems not to be syntax but more culture. I see many ruby/rails people coming into the BEAM ecosystem who bring their poisonous way to think about systems with them, even when the	jFriedensreich	12.63667	-7.4568	comment	5.0	31.0	1610575206	12.908361
25777070	I'm going to shamelessly take advant	I'm going to shamelessly take advantage of your being here with a question if that's ok. Do you have any recommendations for reading material that covers Phoenix as it's used today?Back in the early 0.x days I read the Phoenix book, which was a great introduction to building an application and using Ecto, but trying to pick it up again recently I found that nothing really seems to cover using Contexts in the real world.	jon-wood	12.772854	-7.1549153	comment	5.0	28.0	1610636549	12.737549
25888090	Have you ever tried to customize or 	Have you ever tried to customize or add functionality to Wordpress? Because if it’s anything like Drupal or other PHP based tech of a certain era, it’s hell	pmarreck	12.735498	-6.572409	comment	5.0	25.0	1611452370	10.260882
25889583	>Simplicity? Perhaps in its use, but	">Simplicity? Perhaps in its use, but not the code.Nobody but other devs cares about the simplicity of the code if the code works.>The code and hosting requirements are, frankly, Frankenstein's monster levels of frightening.Huh? Wordpress/PHP hosting requirements are the easiest to meet in the industry. Not to mention the most widely available...>~~You have to~~ WP expect you to install it such that it can modify its install folders - all of them. Security-fucking-nightmare.Yeah, so? It's self-updatable. Use a dedicated user/group.>It falls apart under any kind of load, both because of unoptimized DB queries, and because of PHP.Absolutely not ""because of PHP"". If anything PHP is faster than both Ruby and Python, two other common choices.>You have to put a cache in front of it to be able to "	coldtea	12.722811	-6.629292	comment	5.0	51.0	1611466225	10.305358
25930509	My bi-weekly newsletter on all thing	My bi-weekly newsletter on all things Elixir and Erlang	p5v	12.639128	-7.479053	story	5.0	35.0	1611766528	12.929922
25962454	I remain living happily in the old d	I remain living happily in the old days of PHP, somehow making functioning applications and being paid well. Life is easy and good.	colecut	12.811196	-6.6189065	comment	5.0	42.0	1611953892	10.350373
25962609	> array_is_listThis is a stupid solu	> array_is_listThis is a stupid solution to a stupid problem. Defaulting to weak typing has enough problems, but changing the behavior of your data structure based on its contents is next-level pain. I used PHP for a few years at a student dev job and I can’t count how many times this conflation wasted my time and introduced various bugs.If PHP wants to become more respectable as a PL, it has got to break that out into real arrays (a linked list might be acceptable under certain circumstances) and maps.	ashton314	12.345407	-6.7138987	comment	5.0	23.0	1611954790	10.158414
25964576	One thing I still love about PHP is 	One thing I still love about PHP is that it's so easy to deploy.No need for fancy Amazon Web Shmervices, no need for Jamstack jumping through the hoops.Just find any host that supports PHP, upload your file, and done.	bouncycastle	12.774957	-6.5530562	comment	5.0	27.0	1611965338	10.311056
26006094	Good stuff.I don't get the example f	"Good stuff.I don't get the example for #3. I understand using ""unknown"" instead of ""any"", but both examples look effectively the same in terms of type safety.I also don't get the example for #4. Side effects are the inherit ""blind spot"" of TypeScript. If you're really worried about your API changing on you, it seems like you'd be better off modeling it in something like JSON schema. Unless maybe your API is trivial."	deepfriedrice	12.335095	-6.867573	comment	5.0	24.0	1612297327	-10.446427
26078649	I am almost convinced to go all in w	I am almost convinced to go all in with the elixir ecosystem. Having been a victim of a similar type of thinking, however, I am not sure this is the best thing to do so I am skeptical.Remember, Java and the JVM essentially have this today: front end frameworks, back end frameworks, data pipelines, big data processing, entire databases, etc.In your opinion, what will make the Elixir flavor of this situation different?	dimitrios1	12.673791	-7.4384336	comment	5.0	55.0	1612884940	12.920854
26125467	I wish these types of projects would	I wish these types of projects would identify themselves as koans in the README or something. Makes it much easier to surface exercises like this when googling.I think this is the best way to learn languages.Does anyone know of any for TypeScript?	leetrout	12.355335	-6.78089	comment	5.0	21.0	1613240758	-10.460186
26151654	> the language designs are so simila	> the language designs are so similar that I could just as well imagine a world where Python is the web development lingua franca, and Ruby has all the machine learning libraries.Well aside from the startling implication that Ruby is a web development “lingua Franca.”...the latter statement is reasonable, as it turns out language design isn’t actually that important here. But the former is pretty far off the mark. I mean, Ruby doesn’t even have first class functions and is very strongly smalltalkish in its OO purism, it has mutable strings a-la Perl. The async story is obviously quite different. Python has a much more complicated interpreter, which has contributed to it being more difficult to get even simple optimizations that are done in Ruby. They’re really only similar in the most supe	dialamac	12.5213785	-7.043298	comment	5.0	56.0	1613459548	12.366524
26185690	Gleam 0.14 – Type-safe language for 	Gleam 0.14 – Type-safe language for the Erlang VM	lpil	12.537191	-7.463822	story	5.0	280.0	1613683005	-12.322365
26201237	Embracing Functional Programming in 	Embracing Functional Programming in Ruby (2017)	mooreds	12.400749	-7.1545863	story	5.0	34.0	1613791823	12.37475
26217421	> Crystal’s build times are reasonab	"> Crystal’s build times are reasonable. Compiling my project Azula takes ~16s with the release flag. Compiling our barebones project above takes ~8s.8s to compile a hello world is ""reasonable""? Am I missing something?"	shric	12.479206	-7.2343025	comment	5.0	15.0	1613943046	-11.082765
26226709	Not a ruby developer here: that soun	Not a ruby developer here: that sounds terrifying! Does it make it harder to have a proper mental model of the language (note: not the libraries) or is this mainly because of flexibility (too many ways to skin one cat)?	ComputerGuru	12.563437	-7.064517	comment	5.0	16.0	1614012808	12.35973
26315301	I don't think I've ever heard of any	I don't think I've ever heard of any in-production, large apps in Coffeescript, even from when it was at its peak. I know of a handful of companies that tried it and even enjoyed it quite a bit but none of it was for mass consumption.Typescript, meanwhile, is used for hugely popular apps, is used by very large companies, has Microsoft's full backing, etc.The two are not comparable.Edit: Clearly I'm misremembering its popularity.	scrollaway	12.420528	-6.584532	comment	5.0	22.0	1614693190	-10.536869
26325760	Hi HN! Great feedback here, as alway	Hi HN! Great feedback here, as always.I can talk about the commit, and I can talk about the article.We were getting crushed with scaling from 3M to 30M visits a month, and every day was a 16 hour day. The site was falling over on a daily basis, and the performance of the home feed was atrocious. The APM traces were full of loops. The muting and blocking features were incurring tons of additional queries. As I remember it, one night I decided to write a SQL query to replace it. I believe I thought the values were already being sanitized, but I have no problem agreeing that I should've looked into that further and made sure. I'm not a rails dev, and I'm generally negative towards rails and ActiveRecord.  I wrote SQL for many years in the past, and as the folks who went through my stackoverfl	gfosco	13.077754	-6.4658217	comment	5.0	19.0	1614757468	12.238864
13691780	I love this blog, but I'm not sure t	I love this blog, but I'm not sure that I agree with this:> In my mind, I’d just rather not have a reject! at all, and callers who need to mutate an array in-place can figure out how to do safely with respect to their own use cases.We ought to have a standard version of the reject! code precisely because it's so difficult to get right. Saying application developers should solve the problem themselves just sounds like some sort of political move: 'sure they may get the edge cases wrong, but then it will be their fault not ours'.One of the best things about Ruby is that having helper methods for every kind of possible operation frees application developers from re-solving these edge-case problems and allows them to just write their business logic.	drodgers	12.482808	-7.116779	comment	5.0	73.0	1487631254	-1.7634734
13844559	Serious question... should I spend t	"Serious question... should I spend time in 2017 on Prolog? It seems like another case of ""everything old is new again""..."	deegles	13.148701	-7.299685	comment	5.0	19.0	1489214873	-12.4915695
13899149	Someone just brought this up to me, 	Someone just brought this up to me, but I don't see the use if you're already using Flynn to deploy Rails apps.Anyone actually know where this product would fall in the development pipeline? It sounds amazing.Edit: Okay, got it, it's a configuration management application which only applies if you're manually handling your AWS containers.	AtheistOfFail	12.752717	-6.8201923	comment	5.0	18.0	1489796802	12.354055
13945979	I'm actually really excited about An	"I'm actually really excited about Angular ""2+"" for something you've expressed here. I know that a React developer won't see this the same way, but I really feel like it's come down (for me at least) to either Angular ""2+"" or React - and whatever the reason someone is going to be on one side of the fence or the other. I've written smallish to largish programs in Vue, React, Ember, Polymer - and in all of those cases tried, wherever possible to do so in RXJS and Typescript. When everything else shakes out, I'm finding that nothing is coming close to the RXJS and Typescript combination ""sweet spot"". There have been various attempts to make a lot of the other frameworks ""typescript friendly"" but it's just nowhere near.So why is Rx and Typescript so important to me? Well specifically those two "	coding123	12.586243	-6.4830394	comment	5.0	24.0	1490321008	-10.456359
13949353	From Ruby to Crystal: A Quick Look	From Ruby to Crystal: A Quick Look	sdogruyol	12.60617	-7.2008595	story	5.0	100.0	1490367837	12.373344
13950689	I wish Facebook would drop FlowTypw 	I wish Facebook would drop FlowTypw at this point.  It's been a nice contribution and spurred some competition.  But there is no real vision for how it's going to add a lot of value above and beyond TS.One immediate benefit would be better support for react.  Yes it works but not always as seamlessly as Angular/TypeScript.	WhitneyLand	12.620103	-6.533371	comment	5.0	34.0	1490377240	8.288917
13979554	I used Ember for about 2 years and t	I used Ember for about 2 years and thought so too.Now I'm using React and I think it's approach is much better.The API is tiny compared to Ember and there aren't much concepts, still it accomplishes everything Ember did.I feel bad to say this, but in the modular, library heavy, NPM based JS world of today, React (and other component frameworks like Cyclejs or hyperapp) fits just in. While Ember feels like a anachronism of the big framework days of Rails. :/	k__	13.078008	-6.4514484	comment	5.0	33.0	1490727580	-15.512985
14034963	They seem to be moving towards saner	They seem to be moving towards saner form rendering [0], which is nice. And they fixed at least one of their numerous footguns [1]. But I still think Django has too many footguns to be used for important projects [2].[0] https://docs.djangoproject.com/en/1.11/ref/forms/renderers/[1] https://docs.djangoproject.com/en/1.11/releases/1.11/#querys...[2] https://alexcbecker.net/blog.html#django-is-terrible	alexbecker	12.838116	-6.4734135	comment	5.0	16.0	1491325730	10.081798
14069414	I wish someone would port Python to 	I wish someone would port Python to BEAM. I'm actually surprised there isn't a project out there, except some really old stale project called beam.py I found on github, which hasn't been worked on since 2010.	thecity2	12.424043	-7.349421	comment	5.0	28.0	1491690487	-8.963137
14071670	> That's why I now develop in ruby. 	> That's why I now develop in ruby. I'll take developer productivity over performance any day.In my experience, dynamically typed languages don't do well for developer productivity.	hasenj	12.413186	-7.108662	comment	5.0	33.0	1491735962	12.390734
14092340	Although I don't use TypeScript (I'm	Although I don't use TypeScript (I'm looking at Flow more and more recently instead) I have to acknowledge Microsoft's huge contribution to the JS scene (and not only) with TS and VSCode, truly exceptional products.What's more interesting to me is that everyone who converts their code into Flow or TS immediately finds at least N bugs (albeit small).It's also quite amusing that this article came out today where HN's top article for a few hours was a bashing against Electron (and Slack specifically).	vmasto	12.42435	-6.7021203	comment	5.0	95.0	1491944086	-10.480361
14121749	What I want is a language over C++, 	What I want is a language over C++, as typescript is over JavaScript, that keeps compatibility with C and C++ code (Qt, boost...) and provides a clear syntax and some advanced features (as reflection) even paying a price for it. This is it, no more zero cost abstraction.	dasloop	12.334866	-6.7871437	comment	5.0	17.0	1492277587	-10.429162
14170511	What I've come to realize is that wh	"What I've come to realize is that what we need is a language that lets you manage your level of technical debt, as in ""langc mysource.lang --technical-debt=5"". You generally want to start out writing PHP in the beginning of a project. However, at some point the technical debt will force you to enter maintenance mode. At that point it would be nice if you could turn down the compiler's tolerance from PHP-level to Rust-level, via Python and Java. Simultaneously you usually start caring about performance, so you need to move from interpretation to non-GC'd binary. Wouldn't it be nice if you could scale the strictness and compiledness of the language according to how messy and performance-critical your module or program has become? Granted, we'd need several backends for the same language and "	tormeh	12.735137	-6.666154	comment	5.0	20.0	1492821543	10.332981
14191130	Don't use Ruby if performance counts	Don't use Ruby if performance counts. It's that simple.	ahoka	12.623025	-7.010196	comment	5.0	21.0	1493100048	12.344878
14214287	Since 2.1 ts is becoming a de-facto 	Since 2.1 ts is becoming a de-facto default choice for any serious JS projects I'd say. In conjunction with VSCode it really shines and makes JS sometimes even enjoyable...But there is an issue that quirks our team almost daily: the bolted-on typesystem provides a false sense of safety. You can look at an API response, write an interface for the data structure, build functionality ontop of it, and when the API response structure changes in subtle ways over time, everything may break without notice. There is no way to enforce an interface through casting anywhere, not even via some code generation or sth like that.	anonyfox	12.437871	-6.722617	comment	5.0	18.0	1493323891	-10.473464
14386723	The Ruby Module Builder Pattern	The Ruby Module Builder Pattern	shioyama	12.523115	-7.0694485	story	5.0	94.0	1495365093	12.39132
14392171	From what I gathered, it's popular f	From what I gathered, it's popular for Rails developers who want something that feels like Rails, but with (much) better performances and concurrency.For me coming from Scala, I feel like the lack of typesystem would be a step back.	eloisant	12.704532	-6.957924	comment	5.0	23.0	1495445748	12.422101
14434457	Learn Datalog Today	Learn Datalog Today	tosh	13.1813965	-7.0263057	story	5.0	88.0	1495981313	5.7857
14441957	When I tried to use SWI prolog for a	"When I tried to use SWI prolog for a toy-task, it failed miserably when dealing with facts that contained numeric expressions. I think if a variant of Prolog was paired with an SMT solver (e.g. Z3) it would be much more relevant today.For example, when dealing with bitemporal data (common in finance) you might have a set of facts with two date range attributes. Lets simplify by saying we have a set of facts each having a start date and end date. Here is some non-working Prolog that could work if there was such a capability.  entity('TimeWarner').
  ticker(entity('TimeWarner'), 'TWC', date(1999-01-01), date(2014-04-31)).
  ticker(entity('TimeWarner'), 'AOL', date(2014-05-01), date(9999-01-01)).
  current_at(ticker(entity(_), _, Start, End), T) :-
    T @> Start,
    End @> T.

  -- find cur"	hendzen	13.142454	-7.296159	comment	5.0	21.0	1496098545	-12.519691
14473393	Why should I be cursed with the weig	Why should I be cursed with the weight of your type system when I chose a language without types?If I wanted a typed language, I would use a typed language. JS has a lot of benefits. Being able to use JS to make native-ish apps has it's place. Being able to use typed JS to make native-ish apps probably means you should be using a different language.	vorpalhex	12.345982	-6.768611	comment	5.0	17.0	1496438322	-10.435682
14537051	There are no easy way to solve SAT a	There are no easy way to solve SAT as the size of sudoku. Modern day SAT solvers are very large and contains years of experience, containing 10s of heuristics and complex structures. If we can simplify using neural network, I think it's a great step.	likelynew	13.43989	-7.402897	comment	5.0	26.0	1497272963	15.041726
14536813	You can solve sudoku with a SAT solv	You can solve sudoku with a SAT solver. You don't need neural networks, this was an assignment in cs 251 at UIC.	brian_herman	13.44838	-7.407214	comment	5.0	34.0	1497271277	15.074851
14581786	I dunno, I think Java vs Rails is a 	I dunno, I think Java vs Rails is a great question if asked right.  There are large meaningful and practical differences between the two and every non-jr programmer should at least be able to talk about the technical and business merits of using one vs the other.There isn't a right answer, you basically just start shallow and probe until either you or the candidate can't go any deeper.  This question could lead you into exploration around the JVM, concurrency, memory management, typed vs un-typed, choosing libraries, toolchains, dependency management, strategies for persisting state(i.e ORMs),  back-of-the-envelope performance, etcI'm pretty sure I could get a full 45 minutes out of that question.	siliconc0w	12.508032	-6.9913254	comment	5.0	29.0	1497807124	12.214938
14582299	This article mentioned Rails is on t	This article mentioned Rails is on the decline in popularity. Anyone have any thoughts on the truth of that?	spo81rty	12.763108	-6.952307	comment	5.0	25.0	1497813183	12.35966
14585515	Mixed feelings about CoffeeScript, a	Mixed feelings about CoffeeScript, as ever.ES6 obviously deals with some of the issues that CoffeeScript was intended do. That's awesome. Unfortunately, it's still difficult to go back to what seems like the relatively baroque syntax of Javascript afterwards, as someone who has a bit of a vendetta against over-syntax. SO MANY BRACKETS.In particular, there was CJSX - JSX with CoffeeScript. Writing React components using it was an absolute joy in comparison, and helped eliminate a lot of noise – making it much more obvious what a component was doing.But yeah, it's been hard to convince others that it's worth the investment, when honestly it's really just a personal preference at this stage.	matthewmacleod	12.414787	-6.54083	comment	5.0	56.0	1497863189	-10.515803
14605451	Some things I like from the new rele	Some things I like from the new release:* Dirty schedulers: This allows easy integration of blocking C-based libraries. So for example can wrap something like RocksDb and make it available to the rest of the VM easier. Or libcurl and others.* DTLS : This lets it talk to WebRTC clients* Erlang literals are no longer copied when sending messages : This is kinda of a sneaky one. By default (with exception of large binaries) Erlang VM usually copies data when it sends messages. However, in this case module literals (constants, strings, etc) will be another thing that's not copied. There is a hack to dynamically compile configuration values or other tables of constants as a module at runtime. So if you use that hack, you'd get a nice performance boost.* code_change, terminate and handle_info ca	rdtsc	12.553574	-7.497694	comment	5.0	35.0	1498063639	12.943444
23432795	What’s the elevator pitch on Crystal	What’s the elevator pitch on Crystal? Seems like typed Ruby with performance considerations.	jimbob45	12.629954	-7.2420893	comment	5.0	31.0	1591385326	-11.21683
23442657	what is this obsession with terse la	what is this obsession with terse languages that look like a composition of random characters, didn't we learn from Perl	cheez	12.32708	-7.041424	comment	5.0	22.0	1591481133	13.179169
23465128	A Peek Inside the Erlang Compiler (2	A Peek Inside the Erlang Compiler (2012)	Tomte	12.537877	-7.5098805	story	5.0	72.0	1591695437	12.905065
23476175	"""Smarty released. The best-known tem"	"""Smarty released. The best-known templating engine for PHP.Rasmus realized that he had done something wrong when people started writing template engines for his template engine in his template engine"":D"	wiradikusuma	12.770331	-6.6256285	comment	5.0	17.0	1591790960	10.305548
23476465	The biggest advantages of PHP over J	"The biggest advantages of PHP over Java are build and deploy times, so coding a php app is much more rapid. You can test your app right away, even after a single line change and get immediate feedback on the screen, which I think is important in web dev because a lot of it is visual. 
The other advantage is the run-time. Java has a slow startup time and when you redeploy then you need to stop/start your entire app. With php you can fix / update one part of your app without the need for a server restart.
Another advantage is that php runs each request with a clean state, that means all the variables get destroyed after the request, helping to avoiding memory leaks, and possibly issues with concurrency which Java exposes. Types are great, but sometimes they can get in the way too and slow yo"	bouncycastle	12.725348	-6.6349897	comment	5.0	28.0	1591793354	10.311905
23476630	If you were starting a project now, 	If you were starting a project now, would you choose PHP or Hack?	elchin	12.752936	-6.628862	comment	5.0	15.0	1591794933	10.318634
23536742	I never personally used Turbolinks b	I never personally used Turbolinks but I heard rather unflattering opinions about it. Basecamp/37signals has a long history with Rails so probably they know its ins and outs.Is it feasible to work as - let's say - solo developer in the startup?	xlii	12.789303	-6.57247	comment	5.0	15.0	1592292388	7.64953
23592927	10K is a lot of code.As a maintainer	10K is a lot of code.As a maintainer of a popular 3k LOC typescript library, even at 1k LOC you start running into frequent type-related bugs with JavaScript	chmln	12.364575	-6.7300935	comment	5.0	30.0	1592756460	-10.430468
23595701	I don't know prolog at all. Does any	I don't know prolog at all. Does anybody have a TLDR to what its pros & cons are and why it isn't mainstream?	sktrdie	13.150069	-7.290495	comment	5.0	24.0	1592776251	-12.493922
23595777	I've been trying to push myself to l	"I've been trying to push myself to learn Prolog, using this book, because Prolog seems like a very elegant way of modeling the interactions between business rules, compared to the bespoke functions I typically write during web app jobs.I have no complaints about the book, but I've been struggling to figure out an easy setup for ""Prolog as a web app backend."" Typical Prolog implementations are not designed to be used as concurrently-accessed databases. Datalog seems to be a nearby technology that is more pointed towards that use case, but even then, there seem to be scant few implementations of Datalog databases with transaction support, and near zero that are open source.RDF/OWL databases seem to be another conceptually-near possibility, but they also seem to have few implementations that "	throwaway2380	13.153714	-7.2466483	comment	5.0	15.0	1592777130	-12.471799
23616256	Is there any web framework for it, l	Is there any web framework for it, like rails? That's really the main reason I use ruby is because as a single developer it's amazingly fast to set up new apps (admin panels, reporting panels, sales funnels, etc). The out-of-the-box functionality of rails makes this super painless. I'd LOVE to use something faster but I don't really want to have to custom write a lot of things (CSRF, sessions, cookies, blah blah).Also, how do you handle jobs with Crystal? Sidekiq being the common one for ruby.	Exuma	12.734878	-6.9021845	comment	5.0	20.0	1592929902	12.312151
23649551	Is php really that bad? People keep 	Is php really that bad? People keep telling me it's insecure by default.	xiaodai	12.784349	-6.575074	comment	5.0	60.0	1593155743	10.31934
23715730	Semantic Web[1] reborn (after allege	Semantic Web[1] reborn (after alleged[2] death)? Also I wonder how helpful Prolog infrastructure could be since they provided some useful frameworks [3][4] for that.[1] https://www.w3.org/standards/semanticweb/[2] https://twobithistory.org/2018/05/27/semantic-web.html[3] https://www.swi-prolog.org/web/[4] https://www.swi-prolog.org/pldoc/doc_for?object=section(%27p...	xvilka	13.150775	-7.2723265	comment	5.0	23.0	1593711025	-12.502536
23719355	Back in my day, BEAM was also this h	Back in my day, BEAM was also this https://en.m.wikipedia.org/wiki/BEAM_robotics	OnACoffeeBreak	12.434367	-7.340253	comment	5.0	18.0	1593733405	7.0884423
23788688	Microsoft and PHP has never been a g	Microsoft and PHP has never been a good combination, it’s like .NET on Linux	cjohansson	12.694988	-6.5950055	comment	5.0	17.0	1594361743	10.29811
23790086	Who use Microsoft build of PHP ?Back	Who use Microsoft build of PHP ?Back when I was still coding PHP on Windows, I just used the XAMPP bundle to get the entire web stack up and running in minutes. Granted, that was 10 years ago, I'm neither coding PHP nor coding on Windows now, so I'm a bit out of the loop.	dikei	12.713166	-6.598266	comment	5.0	19.0	1594377742	10.351732
23831890	BMG: A Production Ready Relational A	BMG: A Production Ready Relational Algebra in Ruby	iovrthoughtthis	12.645925	-6.88722	story	5.0	80.0	1594734479	12.316051
23836090	What is unnecessarily complex about 	What is unnecessarily complex about TypeScript? It's JavaScript, with static typing plus type inference, and pretty nice generics. The ecosystem of modern JS surrounding it is horribly complex but TypeScript itself seems like a fairly straightforward programming language.	flatline	12.336608	-6.8566713	comment	5.0	49.0	1594752820	-10.470842
23861547	Homemade Analytics with Ecto and Eli	Homemade Analytics with Ecto and Elixir	lobo_tuerto	12.730589	-7.391273	story	5.0	90.0	1594921401	12.857334
23873021	Is PHP still hated on a lot these da	"Is PHP still hated on a lot these days?Isn't it just not that popular an option anymore to start new projects with? Most people are aware of the language having changed a lot since its heydays.And honestly, from the article I'm not quite sure why I should consider using PHP. Sure, it has a lot of modern bells and whistles now that it didn't when I last used it 2005-ish, but what makes it stand out? I know a number of people that are super happy and productive with modern PHP, but those are all people that have been using it continuously since forever so it makes a lot of sense for them. But why switch to it from another stack?E.g. the supposed best database integration of any language with ""PHP Database Objects"". At least the examples given are the absolute bare minimum I'd expect to get f"	smoe	12.767834	-6.646928	comment	5.0	17.0	1595006738	10.312424
23890791	The Erlang ecosystem (including my p	The Erlang ecosystem (including my personal favorite BEAM language, Elixir) has been kind of a secret weapon for a lot of companies for years. There are a handful of freelancers in the community who have had the experience of going to work for a company doing Erlang/Elixir, only to be told they can never reveal the company’s identity because they consider the language a competitive advantage. One big corp went so far as to say they use Java in all their public-facing info (including hiring).	s3cur3	12.583463	-7.5100117	comment	5.0	24.0	1595179058	12.947081
23894715	To me, the only point on this list t	"To me, the only point on this list that hasn't improved much is ""Ruby on Rails needs to more or less work in ANY environment"".Ruby's install/user story for Windows is still Not Great, and Ruby version wrangling on any operating system is a question that you still get 100 answers to (""use asdf/rvm/rbenv/chruby blah blah blah"").For the rest:1) It's certainly Fast Enough now. More important webperf issues are happening on the frontend side nowadays. Who cares if your backend takes 500ms to respond when it takes 5 _seconds_ to compile the JS on the client.3) Solved since Rails 4.0 IMO.4) Discourse has more or less proven this can be done, with some hard work. Also, Heroku more or less standardized the 512MB VPS size, and nowadays 1GB is pretty cheap and becoming more common, so Rails doesn't s"	nateberkopec	12.725056	-6.8961744	comment	5.0	23.0	1595220275	12.319859
23895407	I think Ruby on Rails should be more	I think Ruby on Rails should be more asynchronous. Doing a http request or a sql query blocks everything until it finishes. The solution is to spawn many instances, but it uses a lot of memory and a slow http service may block all rails instances very quickly.	speedgoose	12.708656	-6.9277472	comment	5.0	27.0	1595228830	12.323887
23910475	It's really telling that, for every 	It's really telling that, for every big project that does not support TypeScript, the number 1 feature request is TypeScript support. (And consequently, that there are fewer and fewer such projects.)	Vinnl	12.344277	-6.814935	comment	5.0	47.0	1595362268	-10.459264
23963071	> There's a tension in PHP-land betw	> There's a tension in PHP-land between [...] hobbyist-hacker [vs] enterprise-scaleIMO the same tension exists in Python. The hobbyist-hackers are using the language to write small-ish scripts, and the enterprise-scale developers are working on million-line codebases.Unfortunately for the hobbyist-hackers, at some point (perhaps when the BDFL started working at Dropbox), the focus of the language shifted from the first group to the second. That's why, for example, Python now has a complex type system - that many developers never use.	pansa2	12.665205	-6.678766	comment	5.0	21.0	1595836786	10.292274
23990944	I'm really puzzled by the decision t	"I'm really puzzled by the decision to use a separate file for this. The stated justification (""it doesn't require changing Ruby code"") doesn't make sense, and my personal experience with languages with external type specifications is strongly negative. It's an unbelievable pain to keep multiple interface files in sync over time.`.h` files are not something to emulate! External interfaces should be generated by tools where needed."	setpatchaddress	12.478303	-7.068012	comment	5.0	42.0	1596052902	12.371226
23991156	I haven't used Ruby in ages but this	"I haven't used Ruby in ages but this seems like a really odd way to incorporate type hints in the language.I much prefer the Python 3+ approach of type annotations in source code.I can't imagine having to look at a separate file just to figure out what the type of something is. You may say ""tooling will fix this"" but it's just far less overhead for everyone at the end of the day to just make annotations in source.My more existential question is, is there really an advantage to doing static type checking in Ruby?When I was doing Ruby, the way you can change objects on the fly, add methods on the fly, the vast amounts of metaprogramming, are types at ""compile"" (I know, not really) time really the same as types at runtime?Like, it might be nice to get some autocomplete, but AFAIK tools alread"	swagonomixxx	12.344207	-7.1609697	comment	5.0	21.0	1596054167	12.378652
24020570	Something’s gotta change though. The	Something’s gotta change though. The path perl5 is on ends in dead language. It’s not attracting young talent, the last really high profile project that sticks out in my mind is Perl Dancer which was released in 2011, and modules on cpan are getting dusty/losing maintainers.I also created and maintain a large Perl stack and in my opinion, the things that made Perl great 10-15 years ago, other languages have adopted and did better. Now for lack of want of updating the language, it’s just languished. I just don’t see a compelling reason to start a Perl project in 2020.	chomp	12.333159	-7.03022	comment	5.0	50.0	1596291327	13.1844845
24048148	Cool, they've implemented async view	"Cool, they've implemented async views.ASGI has kinda passed me by. 
For some small project's I use Gunicorn.What's the setup for ASGI that's popular?"	Jonnax	12.426555	-6.656199	comment	5.0	15.0	1596532597	9.90327
24060218	> At least if folks use something li	> At least if folks use something like Symfony or Laravel it's harder for them to shoot their foot offI'd like to consider giving Symfony or Laravel a try, but at work we run Debian and stay with a given release until it is near the end of extended long term support.Laravel's oldest release that is still supported is 5.5 LTS, which requires PHP >= 7.0.0. The next oldest still supported is 6 LTS, requiring at least 7.2.0.We're on Debian 8, Jessie, which is on extended long term support until 2022. It has PHP 5.6.29, so no Laravel for us. Even if we were on 9, Stretch, which has PHP 7.0 and so could use Laravel 5.5 now, Stretch is on long term support until 2022 and will be on extended LTS for probably a couple years after that, we'd run past Laravel's LTS.Heck, even if we were on the curren	tzs	12.793333	-6.6669717	comment	5.0	20.0	1596631793	10.342408
24061863	May I suggest changing the name from	May I suggest changing the name from 'Typescript Playground' to something like 'Typescript Sandbox'? I found myself on a very nsfw website at work after clicking on a link shown in the results of a search using the strings 'TS' and 'Playground'.	pouting	12.366063	-6.816317	comment	5.0	25.0	1596641202	-10.479182
24124587	> “ I prefer to use languages in the	> “ I prefer to use languages in the domains they were designed for”So for web development, do you use PHP?Because neither Python, nor Ruby nor even JavaScript itself was designed for web development.	tiffanyh	12.57308	-6.5948644	comment	5.0	21.0	1597173151	10.306549
24155215	My prediction is that Annotations wi	"My prediction is that Annotations will be a game changer for PHP-based frameworks. Finally people will get something like in JAXR in Java, just being able to write @@Path(""/users"") over their listUsers function to have it be called when someone accesses the URL ""/users"" on the host.Having to setup routing the cumbersome way has been the bane of being productive in Laravel."	zaarn	12.793319	-6.6367755	comment	5.0	20.0	1597392743	10.3185
24183049	Big Sur: “Warning: PHP is not recomm	Big Sur: “Warning: PHP is not recommended”	neovive	12.787637	-6.61783	story	5.0	33.0	1597628729	-2.6281214
24224975	TypeScript versioning is a joke on S	TypeScript versioning is a joke on Semver that Daniel and team love to play. They go from 3.9 to 4.0 because as you all know 3.10 would be impossible!Every version of TypeScript is potentially a breaking change so if they wanted to be pure Semvers we would've been at TypeScript version 100 or more which could make people feel overwhelmed about being behind with their current version.As always a great release! Congratulations to the team! We love TypeScript at my team.I've never seen someone who wants to go back from TypeScript to plain JavaScript. Design decisions made about structural comparison and not much focus on correctness made TypeScript an easy forgiving type system that hold developer's hand without being a pain in the bottom. The way TypeScript interacted with the community and 	msoad	12.366216	-6.7700534	comment	5.0	32.0	1597941045	-10.459992
24236239	PHP is damn good in certain areas.It	"PHP is damn good in certain areas.It is one of the best choices (if not the best choice) for rapid prototyping of a program. Its damn fast to similar alternatives (Python, Ruby, Dart, JavaScript), and the standard library is huge.It does have footguns. I am not a fan of the loose typing, but you can take some steps to mitigate. You can do ""==="", ""strict_types"" and type hinting for function input and output. It is similar to C in that the language itself doesnt really do much to stop you from writing bad code. Also the function naming is not consistent, and even function arguments are not consistent. However PHP 8 will help with that somewhat, as you can now do named arguments.Also PHP has the best language documentation I have ever seen. I would prefer more examples, but its well above som"	svnpenn	12.669731	-6.664881	comment	5.0	18.0	1598027004	10.345626
24236394	> IMO, no. The language is still nea	"> IMO, no. The language is still near the bottom for both dynamic and ""static"" typed languages.Why do you say that? It's faster than Python and Ruby for most cases, still extremely simple to deploy, the package manager (Composer) is very predictable and easy to deal with compared to Pip or Rubygems, the documentation is good, etc.It has clean lambda functions that you can pass around easily and has for more than a decade. Type hinting has been in place for a long time, too, as have enough OOP / reflection constructs to do just about anything you'd reasonably want to do in a language aimed primarily for web development.The only downside of PHP that I can still point to is that it's sometimes hard to remember the function parameter order for some of the common string and array functions. Far"	core-questions	12.684313	-6.6819253	comment	5.0	22.0	1598027780	10.321725
24279931	The page doesn’t list the year the s	The page doesn’t list the year the startups were founded. I wonder if you’d see a good correlation to the founding year.More startups on the list use Ruby than any other language, and it accounts for over fifty percent of the valuation. It was very popular with startups ten, twelve years ago, but may since have slipped?On the other hand among younger companions es one might expect to see more Go, Node and maybe Rust?Still, an interesting analysis.	pacificmint	12.675232	-6.9962387	comment	5.0	22.0	1598425556	12.329807
24397027	The worst part about Elixir is watch	The worst part about Elixir is watching it teach all these programmers words incorrectly, and realizing how damaged they will be if they attempt to enter mainstream languages	JohnHaugeland	12.674376	-7.480373	comment	5.0	31.0	1599459538	12.931092
19978585	I'd use this as an argument that if 	I'd use this as an argument that if PHP is the gold standard for a community-driven programming language, I'd rather every popular language be backed by a large corp haha.Actually, even ignoring PHP, I'm vaguely convinced it's generally better for a language to be backed by a company. I personally feel more secure knowing that there are people whose full-time job is to take care of the language, and I trust community backlash to deal with any errant decisions. I can't imagine Google (or Microsoft, or Apple, or Facebook) making or blocking a change in a way that kills an entire programming language while they sit idly by ignoring the community response.	rococode	12.758218	-6.6486692	comment	5.0	31.0	1558508822	10.333918
19983743	Question is why? What’s better about	Question is why? What’s better about PureScript that would make other FP programmers (eg; Elm) choose over it?	jaequery	12.892399	-7.6031404	comment	5.0	21.0	1558548224	-12.739269
20041147	The lack of a type system in Elixir 	The lack of a type system in Elixir is a productivity killer though :(	bjz_	12.634535	-7.4474373	comment	5.0	15.0	1559142977	12.925416
20047434	The 2 big things missing on typescri	The 2 big things missing on typescript:1) Operator overloading2) Runtime type checking of JSON payloads (on dev env at least)Can't believe in 2019 every library has to create its own way to add 2 elements of the same class together e.g dataframe1.addTo(dataframe2) vs dataframe1 + dataframe2And the most common error that it should help catch during development is that you get a JSON and you cast it but it means nothing cause on runtime the JSON can be something completely different and nothing breaks until is somewhere else hard to debug, I get that Microsoft don't want to add runtime overhead but it should be possible at least on development mode.	mattigames	12.343089	-6.8343997	comment	5.0	23.0	1559178835	-10.464835
20184295	Oh fun another style discussion! :-)	"Oh fun another style discussion! :-)My own taste is for a ""book style"": write the code like you see in good books. I agree with most of this guide, although I'm pretty loose and case-by-case in practice. I've gradually added rubocop to lots of my projects, but then I wind up disabling tons of the rules.I'm sad all the Ruby guides I've seen ban ""and"" and ""or"". I don't find them to be such an issue, and they are nicer to type & read. For one thing you can say `foo or raise ""msg""` but need parens to say `foo || raise(""msg"")`. On team projects I sigh and go along with it, but it is a shame.Speaking of ""book style"": I have a bunch of Python books with atrocious style, e.g. no spaces between operators or even between function arguments. How can anyone read that? I even see this from high-quality"	pjungwir	12.365298	-7.088994	comment	5.0	21.0	1560529877	-9.357542
20238013	Yes, and, just to keep this clear: t	"Yes, and, just to keep this clear: that debugging (or unit-testing-for-typos) time is coming out of your prototyping budget. Your Ruby program will fail to run for stupid reasons the first time you run it, which is not the experience Java and Go and Rust programmers have. I just remember when I first picked up Go, after about 5 years writing Ruby exclusively, how amazing it was that all my Go programs ""worked"" the first time I ran them. Obviously, they had bugs. But they didn't blow up for stupid reasons.I'd been a C/C++ programmer for about 10 years! I guess I just forgot that compilers can catch typos if you let them."	tptacek	12.530339	-7.1805987	comment	5.0	26.0	1561069487	10.209737
20267079	I know nothing about Elixir/erlang b	I know nothing about Elixir/erlang besides following installs for apps.  I have used it, installed via ASDF on my Raspberry pi since dependencies weren't up to date.Can anyone provide a good place to start on where to get started with Elixir?I tend to learn by working on stuff and not just reading etc, maybe a step by step in elixir? I am going into the literature now as wellThanks in advance for any help!	KingFelix	12.652795	-7.4652066	comment	5.0	21.0	1561402510	12.913152
20271035	The Authn/Authz story of Phoenix is 	The Authn/Authz story of Phoenix is a joke though compared to Rails/Devise or Django. The framework authors refuse to ship a first party implementation and instead leave it to the community. Problem is, the ones available are mostly extremely low level (ueberauth, guardian etc.) and you have to spend ages customizing it. On Rails it's literally two commands to set up user registration, email confirmation, password reset. Despite its supposed Rails roots, Phoenix has a long way to go (the greater irony is that the company behind Devise, Platformatec, is also the company behind Elixir).If you only need basic functionality and absolutely have to use Phoenix, Pow is a good choice:https://github.com/danschultzer/pow	sansnomme	12.824458	-6.9806623	comment	5.0	17.0	1561434603	12.487783
20349170	> - No more Ruby on Rails because no	> - No more Ruby on Rails because no good way was found to scale it organizationally; almost everything is now Go microservices back + React frontUgh, I just... I keep trying to pretend I don't need to learn Go, but every highly scalable system I read about that's recently been written about seems to be using it.  Maybe I just need to stay away from systems that need to scale? Heh...	diminoten	12.701804	-6.9733515	comment	5.0	38.0	1562190382	12.323714
20359025	but have you ever had to maintain a 	but have you ever had to maintain a ruby project after the first year? The cost just goes up and up, and I think it’s because the language is so hostile to static analysis.	jes5199	12.614921	-7.036203	comment	5.0	25.0	1562287244	12.38229
20377886	The unanswered question is still how	The unanswered question is still how this `kickball` account gained control of the gem.> The gem seems to have been pulled out from under me… When I login to rubygems.org I don’t seem to have ownership now. Bogus 0.0.7 release was created 6/25/2019.The way I see it, there are a few options:1. The rubygem was transferred by ruby staff to this account.2. The maintainer's account was hijacked and then it was transferred, and could even still be compromised.3. There is some issue or attack vector with the rubygem system that allowed the attacker to gain control.Any guesses?	MrStonedOne	12.666858	-6.970968	comment	5.0	35.0	1562533966	12.368419
20378647	Would a microframework (no idea what	Would a microframework (no idea what's the equivalent of Flask or Sinatra is on PHP) help?I have no idea.  Maybe.  I've just been coding straight PHP.  With the way IDEs are these days, once your environment is set up the way you like and you have your favorite macros bound, it's not a problem.I'll look into Flask and Sinatra before I start the next site.  Any other ones you recommend?	reaperducer	12.733901	-6.649617	comment	5.0	16.0	1562541528	10.342403
20383299	Not being facetious, but could the j	Not being facetious, but could the joy resemble the fun I associate with developing with Ruby?	unixhero	12.603441	-7.0481195	comment	5.0	22.0	1562598098	12.386989
20383596	Agreed. This is actually why I think	Agreed. This is actually why I think the killer apps for the BEAM are 2 Elixir based ones.Nerves, which is already being heavily used for embedded systems and only getting stronger thanks to the likes of Scenic.And Phoenix LiveView (not released yet), which I personally think pulls the strengths of Phoenix together in a way that can truly disrupt web development. It’s very difficult to do what LiveView is doing on other tech stacks.The combination of those two will likely fuel things long term.	brightball	12.864255	-6.933278	comment	5.0	39.0	1562599973	12.744584
20388476	Why Erlang is among the few true com	Why Erlang is among the few true computer languages (2018)	foxes	12.560355	-7.5241146	story	5.0	22.0	1562638619	12.91869
20562489	In high school, I think I worked for	In high school, I think I worked for a company that has prior art on deployless software. We wrote php and perl directly on the prod server with vi through putty. No deploy necessary!What's old is new again I guess.	MrLeap	12.71738	-6.5151114	comment	5.0	17.0	1564467619	10.284866
20593568	>it is not that easy to upgrade from	>it is not that easy to upgrade from say PHP 7.0 to 7.3Is that true?	edgarvaldes	12.785443	-6.6449094	comment	5.0	16.0	1564758723	10.333537
20638524	was just about to comment along thes	was just about to comment along these lines! i never understood those eschewing frameworks... in the above example a PHP framework like Laravel is in constant development by lots of people, with security updates and refinements pushed out on a regular basis. even if u are an uber-developer, in what situation is rolling your own ever the right choice? is your project that different from everyone else's?	dpau	12.766963	-6.544553	comment	5.0	20.0	1565209302	10.33337
20661924	PHP, slooow as shit. I don't know ho	PHP, slooow as shit. I don't know how many RAM it needs to work properly.	paulcarroty	12.732602	-6.596987	comment	5.0	18.0	1565444016	10.347943
20718757	I’m considering learning rails for a	I’m considering learning rails for a new project. Also coming from a .NET background. Any good resources you can recommend?	imafish	12.739447	-6.9556694	comment	5.0	17.0	1565983475	12.391153
20722314	I’m primarily a React / Node dev, bu	I’m primarily a React / Node dev, but I’ve been thinking about picking up another language and framework for a while. I feel like Node / Express is great, but I also sometimes feel like it’s not a proper framework, in that you end up assembling a lot of code by hand (ex: auth, data modeling) and after a few projects it’s tedious. Also, Node only offers concurrency as an unnatural afterthought...I’ve dabbled in Django and it seems to solve some of those problems, but I also feel like web programming in an OO dynamic scripting language isn’t that far away from doing it in JS so I might as well learn something mind-blowingly new...I’ve been exposed to functional programming in OCaml in a rigorous college course and absolutely loved it, how would you guys rate learning Phoenix + Elixir in my c	arcturus17	12.481695	-6.655533	comment	5.0	17.0	1566020174	7.5067415
20737344	There are decades of history behind 	There are decades of history behind every criticism of PHP? Do you just want people to ignore them?PHP can be a bit of a punching bag, even when it's not topical. But it's not exactly unwarranted.	sterileopinions	12.776749	-6.643315	comment	5.0	24.0	1566219892	10.372632
20785875	TypeScript adoption has been swift a	TypeScript adoption has been swift and decisive. In 2019, the majority of js developers that take surveys use TypeScript.Edit: Mea culpa. I got my numbers mixed up, or whatever source I thought I remembered just doesn’t exist. 46% in 2018 (state of js) says nothing about 2019, and is not a majority. That 46% is also backed up by a similar survey that npm ran. It’s worth adding though, I think, that js devs benefit from ts type inferencing and IDE support even if they aren’t using it directly	IggleSniggle	12.3815565	-6.739377	comment	5.0	24.0	1566632830	-10.49622
20793504	You know how when someone quits smok	"You know how when someone quits smoking and then, sometimes, they start to go around telling everyone else how great it is and how OMG! they should quit smoking too, and generally being a kind of smug and annoying about it?I had a kind of Prolog ""conversion"" experience last summer...You guys!  Prolog is so great!  OMG!  You should really try it!  I'm seriously you guys.In all seriousness, Prolog is a simple, powerful, elegant language, with a rich history replete with amazing research and tools.  ""An elegant weapon... for a more civilized age."""	carapace	13.147393	-7.298411	comment	5.0	24.0	1566747202	-12.506383
20824570	Is anyone else using javascript + js	Is anyone else using javascript + jsdoc + .d.ts files, and using typescript as a kind of linter?I'm really enjoying this setup, I get to use tools that work on JS source code without sticking them in a build typeline. I find it easier to read as well - the function declarations are nice and short as all the type annotations are in a comment above. Also one less transpilation step.	lacampbell	12.379355	-6.7603273	comment	5.0	20.0	1567030269	-10.427737
20852564	Hi I'm Brian, one of the member of t	Hi I'm Brian, one of the member of the Lumen team. I'll try to address some of the questions I've seen in this thread:1. Why?We've seen every growing complexity in building, maintaining, extending, and debugging client side applications. There are several reasons why this is but in our opinion how JS handles concurrency (the Event Loop) is a primary factor. Erlang's concurrency model is superior (also our opinion) in how a developer reasons about concurrency. We want to bring this power to building client side web apps.2. I'm afraid of [it] being over-engineered, and hard to contribute to.Lumen itself is just the beginning of what we hope is an eco system of tooling and potential framework pieces for building web applications. When building Elixir or Erlang applications developers are not 	bcardarella	12.475589	-7.3551507	comment	5.0	27.0	1567349433	-10.168606
20857022	I'm pretty sure Erlang, Prolog and F	I'm pretty sure Erlang, Prolog and Forth would blow your mind.	samvher	12.997844	-7.3380866	comment	5.0	18.0	1567403201	-12.469101
20880047	Sudoku solvers are near and dear to 	Sudoku solvers are near and dear to my heart.They’re my go to problem when learning a new programming language because they’re just complex enough to exercise a whole bunch of different language features.I built this when I wanted to learn Swift and dip my toe into machine learning: https://twitter.com/braddwyer/status/910030265006923776?s=21	yeldarb	13.449649	-7.4096723	comment	5.0	19.0	1567621711	15.075633
20916140	Ask HN: Is Ruby on Rails dying?	Ask HN: Is Ruby on Rails dying?	anildigital	12.72708	-6.98815	story	5.0	8.0	1568016753	12.392736
20921313	It's been a long time since I've loo	It's been a long time since I've looked at Rails. Is there anything similar to Railscasts (free or paid) but up to date with latest Rails features?	antimatter	12.753299	-6.9134955	comment	5.0	15.0	1568056491	12.387039
20921880	Wow, didn't know a company this reco	Wow, didn't know a company this recognizable was still using (and embracing!) Rails. Pretty cool. Also helps explain the fact that they've stuck with a mostly server-side-rendered app, despite it being a fairly complex tool.	_bxg1	12.76832	-6.9035316	comment	5.0	16.0	1568059519	12.34854
20922299	Why does every thread about Rails on	"Why does every thread about Rails on HN devolve into a thread bashing Django? Do Rails users have some kind of ""little brother complex"" compared to Django?Every Django thread on HN usually involves a healthy amount of discussion about the pros/cons of Django, and it's really helpful. You would expect that Rails threads have a discussion about the pros/cons of Rails, right? Except instead, every Rails thread also turns into a discussion about the pros/cons of Django.If Rails is so good then why do its users feel they have to constantly defend itself against non-existent attackers?"	myalphabet	12.802223	-6.6854596	comment	5.0	26.0	1568061972	10.292604
20964396	Not only that, accusing TypeScript o	"Not only that, accusing TypeScript of being ""unsophisticated"" is just dumb.Unsound, inconsistent, overly complicated, poorly abstracted, improper paradigms.....any of those would be a more legitimate criticism than ""unsophisticated""."	paulddraper	12.353502	-6.8306737	comment	5.0	19.0	1568396460	-10.46867
20983140	T.b.h. this is the reason why I will	T.b.h. this is the reason why I will probably stay messing around with either PureScript or ReasonML but stay away from Elm.	a-saleh	12.842205	-7.637297	comment	5.0	23.0	1568634778	-12.699705
20984861	I like Elm as a language, but the co	I like Elm as a language, but the community is extremely toxic, and it's not production-ready yet (version < 1.0, one-person project). Too bad, because it's a great project.	sacado2	13.003994	-7.688542	comment	5.0	19.0	1568646759	-12.766078
14674168	I recently had to do some Node.js sc	I recently had to do some Node.js scripting. My JavaScript experience was minimal and having worked almost exclusively with typed languages I considered Typescript. I decided against it eventually because I figured you need to know JavaScript first to understand the JavaScript ecosystem even if you are writing your own code in TypeScript.Does this make sense or is it feasible to skip learning JavaScript and jump directly to TypeScript?	maxxxxx	12.365426	-6.787696	comment	5.0	18.0	1498864961	-10.455943
30822527	What technologies are more performan	What technologies are more performant for web development than Nginx and PHP?	bouldersharp	12.6802225	-6.5295534	story	5.0	2.0	1648404702	10.32421
30821391	What does a modern high performance 	What does a modern high performance php serving stack look like?	peter422	12.675458	-6.495915	comment	5.0	30.0	1648397505	10.126803
30826894	from https://phptherightway.com/#err	"from https://phptherightway.com/#errors :  $ php -a
  php > echo $foo;
  Notice: Undefined variable: foo in php shell code on line 1

> This is only a notice error, and PHP will happily carry on. This can be confusing for those coming from “exception-heavy” languages, because referencing a missing variable in Python for example will throw an exception:> The only real difference is that Python will freak out over any small thing, so that developers can be super sure any potential issue or edge-case is caught, whereas PHP will keep on processing unless something extreme happens, at which point it will throw an error and report it.This is the kind of mentality that scares me about PHP.  The author is saying that an undefined variable is just a small thing, nothing to be worried about and the "	theonething	12.6886015	-6.641502	comment	5.0	16.0	1648438676	10.284287
30918195	I think Mike’s success is awesome. S	I think Mike’s success is awesome. Sidekiq has created so much value for startups in our industry and can operate up to a scale very few companies have to actually worry about. Other folk have reproduced similar in other ecosystems to success as well (see Hangfire) and there’s another half a dozen ecosystems out there where a motivated person could capture the same value.The only downside I see is that it’s definitely led to the proliferation of commercializing OSS libs by making them slightly worse on purpose and adding a “go pro!” version. All too common these days. But again, can’t blame anybody on this path - creating good software isn’t easy and people do deserve to be paid for it.The other place ripe for opportunity is Django-admin style tools. It’s been out for a decade maintained a	bpicolo	12.762946	-6.542674	comment	5.0	21.0	1649162171	10.07049
30940251	Show HN: Codestat.dev – Stats from 2	Show HN: Codestat.dev – Stats from 2M open-source repositories	slimsag	12.991532	-7.688151	story	5.0	63.0	1649301221	-12.754714
31154502	 The last few years have brought ins	 The last few years have brought insane progress to the PHP language. I absolutely love the direction. Personally, the next feature I'd like to see the most is a great implementation of Tasks / Asynchronously, something the language always lacked, possibly because it is nearly exclusively used with web servers. I mostly get around that by extensively using queues, software like RabbitMQ, and spawning micro services. I would like to see it move towards more general purpose usability.	alex-zierhut	12.731281	-6.615711	comment	5.0	33.0	1650894080	10.306826
31159033	Ask HN: What would you use for a Pyt	Ask HN: What would you use for a Python REST API in 2022?	oblio	12.844099	-6.462177	story	5.0	3.0	1650912439	10.025897
31196204	I liked the article. I think it was 	I liked the article. I think it was really well written and these are great points. So if not Go, then what's the alternative? I too am starting to feel a bit burnt out by some of Go's deficiencies, but one of the things I really like about Go is its concurrency model. What other languages have great concurrency models? Please keep in mind that I want to keep things simple... having a single binary to deploy is incredibly efficient.I've been wanting to use Crystal. Does anyone have experience running Crystal in production? Without getting into the specifics, the Go parts of my personal project are a websocket server that upgrades when a user is authenticated and authorized, and their actions spawn jobs in a queue. I have processors (written in Golang) that take these tasks and perform some	dimgl	12.579183	-7.2868986	comment	5.0	18.0	1651170122	10.137021
31261991	It's easy; PHP is/was:  <html><body>	"It's easy; PHP is/was:  <html><body>
  <?php echo 'Hello World'; ?> 
  </body></html>

Whilst the equivalent Perl at the time would be:  #!/usr/local/bin/perl
  print ""Content-Type: text/html\r\n\r\n"";
  print ""<html><body>"";
  print ""Hello world"";
  print ""</body></html>"";

or possibly...  #!/usr/local/bin/perl
  use strict;
  use warnings; 
  use CGI;
  my $q = CGI->new;
  print $q->header('text/html');
  print $q->start_html();
  print ""Hello world"";
  print $q->end_html();

...if you were being a bit more more fancy.In other words, there was no standard templating; Template Toolkit eventually became a relatively defacto standard, but PHP had already won - and even then, TT had to be manually invoked rather than just going and freestyling <?php> tags everywhere in your HTML and ""it just"	Arathorn	12.43577	-6.7692375	comment	5.0	25.0	1651678704	13.06326
31269686	Can I PHP? – caniuse.com but for PHP	Can I PHP? – caniuse.com but for PHP features	stanislavb	12.764712	-6.6288533	story	5.0	48.0	1651726988	10.331778
31297418	Not much have changed in PHP since 2	Not much have changed in PHP since 2012, relating to his exact criticisms. I've yet to meet a good developer who likes the language, but I've met many who like it.	lbj	12.764707	-6.639193	comment	5.0	18.0	1651949744	10.352361
31358841	"Can't wait. Finally an end to ""Rails"	"Can't wait. Finally an end to ""Rails is slow""."	cutler	12.753452	-6.9282336	comment	5.0	16.0	1652382598	12.335599
31389001	I had no idea Denon was related to O	I had no idea Denon was related to Onkyo :)	agumonkey	12.527393	-6.4681816	comment	5.0	20.0	1652634730	-11.027722
31483901	> Composing datalog nativelyI'm naiv	> Composing datalog nativelyI'm naive. What does this mean and why is it important?	all2	13.187168	-7.043545	comment	5.0	18.0	1653334529	5.718464
31539943	Does anyone actually enjoy using the	"Does anyone actually enjoy using the Elm paradigm? I personally can't stand the amount of boilerplate and ""indirect thinking"" that it requires."	overlisted	13.004415	-7.6882577	comment	5.0	16.0	1653742343	-12.764992
31556918	I'm somewhat of a Flask pro but have	I'm somewhat of a Flask pro but have struggled to find a good entry on how to use it as a backend for a native iOS app (for someone who completely missed the Swift train). I guess it starts with migrating to Fastapi?	marban	12.520066	-6.6135798	comment	5.0	15.0	1653901141	10.012299
31569430	Glad to see folks actively pushing t	Glad to see folks actively pushing things in the Ruby space further. I've said it before, but I recently returned to Ruby and Rails after many years away, and my productivity has reached levels I couldn't imagine. Subjective for sure, but ruby is a beautiful fun language, and rails has everything (especially now with https://hotwired.dev) that a single founder needs.	rufugee	12.730093	-6.9649134	comment	5.0	20.0	1654004859	12.379865
31608762	It's been a long time since I wrote 	It's been a long time since I wrote any PHP in anger but back when I did, I got a ton of mileage out of CodeIgniter (https://codeigniter.com/). It looks like it's still around and being actively maintained. I can quite clearly remember a number of projects that went from being just an idea to 90% functional in the span of an evening.I write Python almost exclusively now, but still pine for something like CodeIgniter. Flask is nice because it lets you bolt on whatever you want, but you spend a lot of time choosing, prototyping, and often discarding libraries. Django does a lot of heavy lifting but has (IMO) a very steep learning curve. There doesn't seem to be anything (or at least anything I've liked) in between.	bityard	12.766077	-6.550788	comment	5.0	15.0	1654266519	10.218551
31639382	My favorite Erlang Program (2013)	My favorite Erlang Program (2013)	notamy	12.565614	-7.52404	story	5.0	122.0	1654516904	12.922533
31664163	Rather than do the typical HN thing 	"Rather than do the typical HN thing of commenting on something irrelevant (like the landing page), I'll comment on the actual thing being presented:First, I really like that this leverages Typescript to its fullest. I'm a big fan of doing things like runtime reflection of compile time types.However:```
    id: number & PrimaryKey & AutoIncrement = 0;
```One thing that seems confusing is, (presumably) -- these compile time types are being translated into runtime type behavior. (I'm guessing by your Typescript transformer?). While this is very cool and concise, I suspect it could be super ""magical"".In your case, has Deepkit felt too magical?"	marmada	12.356693	-6.8257866	comment	5.0	20.0	1654671078	-10.444011
31664967	By the way, can anyone suggest a goo	By the way, can anyone suggest a good zero-to-Elm tutorial/course/book/whatever for people with no web frontend experience (coming from desktop GUI dev) to get on board with Elm web GUI apps development quickly?	qwerty456127	12.998756	-7.6763506	comment	5.0	21.0	1654679835	-12.759081
31674190	Trying to ease development burdens &	"Trying to ease development burdens & generate more intercompatible ways of doing things, with less lift required to get going, while retaining the same benefits of types for those who want them, is 100% a superb & worthy idea.It's great to see such developer-friendly compatibility & adaptability.Top level comments so far (I have skipped two top level comments):""I don't want this."" ""I'm not sure this will help solve any of our problems."" ""Sounds like a bad idea"" ""Nahhhh lets get the [non-type related foobar] proposal to land"" ""This is a wrong assumption."" ""Just merge with Typescript already"" ""there will be a flame war""Mercy! Be happy!"	rektide	12.367897	-6.807747	comment	5.0	25.0	1654722473	-10.434925
31674478	I love this.Maybe it means that I do	I love this.Maybe it means that I don’t have to preprocess / compile TypeScript before running it. This is a genuine win for me. The TypeScript compiler can continue doing what it does best—type checking—and then I can just run the code. Running the TypeScript compiler from a cold start takes a surprisingly long amount of time.Currently, I have to figure out how to get a build system that compiles TypeScript once for bundling to the browser and once for running in Node, and the user experience around setting this up is just incredibly bad. It sucks. I make some change to how I build for browser and it turns out to be incompatible with whatever system I am using for Node. This solves part of that problem, and reduces friction. Type annotations can be just part of the JS and stripped out by 	klodolph	12.38753	-6.64363	comment	5.0	38.0	1654723628	-10.44978
31728331	> Java, PHP or RubyFunny, since for 	"> Java, PHP or RubyFunny, since for a long while, the ""correct"" way to run Ruby workloads in production was to run JRuby, therefore Java."	ElectricalUnion	12.484763	-7.003232	comment	5.0	16.0	1655139948	12.315002
31732224	Throwing the black hat on for a mome	Throwing the black hat on for a moment surely I would just move towards the subdependencies of these popular gems (which realistically is where you would be targeting anyways I imagine) and can fairly reliably expect that my malicious changes get picked up upstream in due course.Am I missing something here?	mhoad	12.628564	-6.9461136	comment	5.0	17.0	1655156948	12.360086
35552403	> which is a problem as Gemans can't	> which is a problem as Gemans can't codeWhat's the factual basis for that claim? I'm German and I can code.	jimkoen	12.528071	-7.0502377	comment	5.0	20.0	1681373051	-2.9095526
35565670	SQL only hangs around because it was	SQL only hangs around because it was the best thing available at the time when DBs first exploded into common use.  It’s pretty declarative, which is a point in its favor, but it’s not very amenable to query construction since it has AppleScript levels of “being like English.”  Have fun writing something that can generate it while handling highly-adaptive and/or customizable requirements.I’m not going to call Datalog the definitive answer, but it’s a step in the right direction.	filoeleven	13.2310295	-6.794503	comment	5.0	33.0	1681448239	-12.4198065
35593635	Better Together: Unifying Datalog an	Better Together: Unifying Datalog and Equality Saturation	luu	13.172487	-7.0367575	story	5.0	101.0	1681674481	5.8045526
35646855	IMO it's better to just use TypeScri	IMO it's better to just use TypeScript anywhere that you'd normally use Perl. The type safety helps later on when you revisit old code plus I think it's more productive overall, having used Perl many times in the past.	xyzzy4747	12.358273	-6.7933073	comment	5.0	16.0	1682027369	-10.440566
35660099	People always seem to come up with t	"People always seem to come up with the argument that you can drop an index.php in a folder and be done with it. Only nobody uses php that way since decades.Modern php code uses Frameworks, Package mangers, opcode caching, and application servers. 
It’s just that other languages don’t carry all the cruft php has in its heritage…"	9dev	12.760701	-6.637809	comment	5.0	22.0	1682110962	10.33562
35660316	The world that PHP grew up in has ch	"The world that PHP grew up in has changed. The language and community have matured, and in the process PHP has lost most of its competitive advantage: low barrier to entry.It used to be:  * Moving from static HTML to dynamic server code was a matter of changing file extension and adding PHP tags.
  * Many shared hosting services supported PHP.
  * Deploying was a matter of copying files to the server.

Projects that started from HTML + PHP tags grew and became unmaintainable messes. The PHP community learned from this and evolved in a different direction. You can still _write_ PHP code in the old way, but it's strongly discouraged and (rightfully) seen as a bad practice. You don't even use PHP as a templating language anymore. Symfony and Laravel have their own templating languages that dy"	edsrzf	12.766532	-6.6409516	comment	5.0	21.0	1682111826	10.382786
35713599	Ruby is a wonderful language, I just	Ruby is a wonderful language, I just wish I wasn't stuck with 2.6 at work because all of the improvements especially in Ruby 3.0 are just wonderful.  I keep wanting to branch out to other languages but keep coming back to Ruby as my bread and butter.	web3-is-a-scam	12.60996	-7.02791	comment	5.0	36.0	1682516870	12.350611
35723820	What's wrong with TypeScript? Last t	What's wrong with TypeScript? Last time I checked all WASM stuff was slower and much heavier than TS/JS.	Liberonostrud	12.388316	-6.7844176	comment	5.0	27.0	1682575147	-10.437653
35754642	I have been working with Rails for t	"I have been working with Rails for the last forever. I love Ruby, and I love Rails. Part of the reason why I love Rails so much is in slide 9: ""Rails is designed to have agnostic interfaces.""One of the reasons why I hate Rails is the steep learning curve. It's really easy to get something out the door with Rails. Whether or not it's maintainable long-term is what's up for debate. There are often 10 ways to get the same result: 1-5 are really bad, 6 and 7 are acceptable, 8 is good, 9 is great, 10 is perfect. Not everything has to be 10, or even 9, or even 8; the fewer 1-5s you have the better.The official ""Getting Started"" guides don't help this at all. Granted, they are indeed marketed correctly: they are for getting started. But it lends to this idea that that all Rails applications have "	joshmn	12.757413	-6.926992	comment	5.0	23.0	1682787097	12.337655
35755081	The problems with Rails are the same	"The problems with Rails are the same as with Ruby as it was with Smalltalk: just too easy to make a mess (the nature of dynamic languages), and its community suffers from a nasty case of groupthink.Notice the cliche ""Rails is so much more than a framework.""The same magic that makes one so productive at the beginning (start-up stage) is what comes back to bite you in the ass when the project grows into an actual product; unless you are careful and willing to trade off speed-to-market, which isn't what you want to do with a startup.Catch-22 because the app has gone off the rails by the time you are successful, and everyone says: ""Oh, you shouldn't have done that."""	ulizzle	12.721511	-6.926764	comment	5.0	39.0	1682789600	12.350555
35761848	While we're here, could we also plea	"While we're here, could we also please have clear separation between commands and data? Eg, I hate stuff like:    $ bin/rails generate scaffold user name email login


Which is it?    $ bin/rails --generate=scaffold --user=name --email=login

Or:    $ bin/rails --generate=scaffold --user=username --name=fullname --email=address --login=login_name

Or:    $ bin/rails --generate --scaffold=user --name=fullname --email=address --login=login_name



Or what?"	dale_glass	12.587465	-6.8823314	comment	5.0	17.0	1682856781	5.2370048
35815140	IMO the eighth ur-language is Erlang	IMO the eighth ur-language is Erlang (with cousin Elixir), which brings the ultra-scaling actor model, an abstract operating system designed for high reliability and low latency, and a bunch of nice rare features like builtin binary structuring/destructuring and pattern matching.  While it had its origins in prolog, it's now sufficiently far away from prolog's inner machinery that it only has syntactical similarity.Learning erlang made me definitely at least 10% smarter as a programmer.  Highly recommend, even if you never use it in anger.	felixgallo	13.130827	-7.307579	comment	5.0	19.0	1683207561	-12.473034
35834090	I had written a code contracts libra	I had written a code contracts library for Ruby about 10 years ago [1]. I stopped working on it, mainly because it only provided runtime type checking, and I wanted static type checking. Nowadays my main language is typescript. I miss ruby, but can't give up the static typing that typescript provides. I really wish Ruby had a type system with the same level of support. VSCode has phenomenal TS support, and there's a community adding types to projects [2]. This is something I'd like for Ruby also.> An integral part of this informality is relying on Matz’s taste and intuition for everything that affects the language’s core.I think a more defined process would mean a better future for Ruby and Ruby developers.- [1] https://github.com/egonschiele/contracts.ruby- [2] https://github.com/Definite	egonschiele	12.498781	-7.0934734	comment	5.0	41.0	1683315131	12.409306
35834799	I used to hate Ruby.Last year I spen	I used to hate Ruby.Last year I spent 10 months alone on a Rails app. I decided to buy in. Do things the Ruby/Rails way. Read books on how to think about OO in Ruby. TDD everything.I can’t quite say what changed. But now Ruby is my favourite language.It is almost encourages you to write clean code but it doesn’t force you to. It lets you make mistakes. It treats you like a grown up.TS, Java, etc. They treat you like a child who can’t be trusted to do things right.Yes, this means you can end up with some horrifying god awful Ruby code. But it also means you can end up with some truly beautiful abstractions.I think the very things that prevent you from creating unmaintainable messes are the things that prevent you from writing incredible pieces of software.That’s probably why they miss Ruby	ncphillips	12.653287	-7.007603	comment	5.0	19.0	1683318765	12.356329
35891880	For anyone who is still confused - t	For anyone who is still confused - they're still gonna be using TypeScript in that they will have a tsconfig.json, `allowJS: true, checkJS: true` but they are just writing the files in JS with JSDoc type annotations, they'll still have `.d.ts` files to allow TS developers to use it without issues.Is it contrarian - yes - is it insane - no, not really.Edit: the motivation seems to be to simplify processes - running TS files can be awkward, and cross importing is awkward. fwiw created my own tool for this (https://github.com/tbjgolden/xnr)	tbjgolden	12.359073	-6.74386	comment	5.0	18.0	1683745292	-10.475995
35894215	Ask HN: Is it still worth learning R	Ask HN: Is it still worth learning Ruby in 2023?	nassimsoftware	12.662557	-7.0093126	story	5.0	3.0	1683756930	12.376244
35899238	PHP has matured and has been a nice 	PHP has matured and has been a nice language for a decade now. But PHP developers havent. Cargo culting “good practice” and lack of creativity plagues the community. Frameworks have become so heavy that you spend more time configuring them than actually adding value. Oh and some still argue over setters and getters.	gumballindie	12.765694	-6.6284285	comment	5.0	28.0	1683792373	10.339054
35900849	> magic framework stuff that Laravel	> magic framework stuff that Laravel/Symphony provideThe magic in these frameworks is evil, and likely a big part in ruining PHP's reputation. Laravel in particular hides way too much stuff behind magic, and when it goes wrong you find yourself sifting through OOP-obfuscated layers of framework and libraries just to find out how exactly your controller is called.	jusssi	12.805856	-6.6574726	comment	5.0	36.0	1683805881	10.3708725
35902843	As a rails developer - my introducti	As a rails developer - my introduction to Pharo started with this video:https://youtu.be/HOuZyOKa91oIf you're not a ruby/rails developer you can still see how awesome it is, but for rubyists specifically it can really be quite mind blowing.	web3-is-a-scam	12.66102	-7.0365057	comment	5.0	23.0	1683816122	12.283742
35928200	Is there any effort to get browsers 	Is there any effort to get browsers to support typescript? Transpiling is great, but all the tooling required by a typescript project, from transpiling to barreling, is becoming daunting.	roqi	12.389011	-6.739001	comment	5.0	21.0	1683984828	-10.367643
35928904	> it's impossible to find talentIt's	> it's impossible to find talentIt's been 4 months and counting that I've been trying to land an Elixir freelance contract.My theory is that dev. happiness and productivity is so great in Elixir land, there is not much churn, so talent is available, jobs, not so much.	sph	12.702098	-7.4400578	comment	5.0	20.0	1683989210	12.925714
35929060	Can anyone recommend a good Elixir/P	Can anyone recommend a good Elixir/Phoenix course?	max_	12.771932	-7.289698	comment	5.0	20.0	1683990210	12.83067
35929124	I went all in on Rails a couple of y	"I went all in on Rails a couple of years ago. Although the overall feature set is amazing, code discoverability has been a frustrating stumbling block from day one.The ""magic"" (convention over configuration, autoloading, metaprogramming, etc) makes it difficult to know what methods are available to use. I end up over-relying on the official docs, which are of inconsistent quality. One example: api.rubyonrails.org lacks code examples, doesn't usually state what a given method returns, and many entries are outright blank.Editor integration could help, but feels lackluster. With TypeScript in VS Code, hints come up as I write. I can hover anything to see its type, methods, and source code. With Rails, I can poorly approximate this behavior with a collection of half-functional community extens"	Tronno	12.629945	-7.0103	comment	5.0	25.0	1683990673	12.380996
35930114	I am blown away by the suggestion to	I am blown away by the suggestion to use factories over fixtures.Factories are almost 100% responsible for excruciatingly slow test runs, since you have to rebuild the world every single test. Fixtures work perfectly fine and only need to be created once at the beginning of your test run.For that matter, rspec itself is also a thoroughly unnecessary cargo-culted dependency when Ruby and Rails already bundle perfectly-serviceable, simple test frameworks.	stouset	12.625822	-6.972745	comment	5.0	18.0	1683996311	12.356698
35932029	Question for anyone who has switched	Question for anyone who has switched to Elixir from a typesafe language: doesn't the lack of complile time type checking bother people working on Elixir? Any opinions on that?	hannofcart	12.59131	-7.453862	comment	5.0	15.0	1684007355	12.909201
35967663	Here is actually a good article comp	"Here is actually a good article comparing the JVM with the BEAM: https://www.erlang-solutions.com/blog/optimising-for-concurr...--And some of my own thoughts with a few more links:The runtime system that Erlang runs on, called the BEAM, is special in that it is engineered for distributed systems and fault tolerance in a way that the JVM isn't. Everything runs in an isolated ""process"" (the Erlang term for their special green-thread type thing). Talking to a process on another node in the cluster is exactly the same as talking to another process on the _same_ node, so it scales in a way most languages don't. Message passing and the guarantees of processes means you simply never have to worry about mutexes or race conditions in the same way you do in almost any other language.https://stackove"	japhib	12.443025	-7.4911942	comment	5.0	21.0	1684270643	12.857011
36003981	A bit odd that Pinecone is publishin	A bit odd that Pinecone is publishing this…I can understand if they identified that building with LangChain means more Pinecone usage, and a barrier to building with Langchain is its documentation and ease of getting started, but if the now well funded project isn’t producing this itself (and in my own experience the Typescript library at least doesn’t feel like it’s hitting the nail on the head and I ended up reading source code) then I think that’s a sign we’re still searching for the best way to build complex things here	benpacker	12.363293	-6.7697287	comment	5.0	15.0	1684514664	-10.407032
36069191	I'm very happy with the direction De	I'm very happy with the direction Deno is taking in its development. At the same time, I'm not sure when I would feel comfortable deploying something to production with it. Is anyone here running Deno in production?	Etheryte	12.505748	-6.4377923	comment	5.0	20.0	1685012514	-10.9651375
36155841	For me it is not even the code per s	For me it is not even the code per se but how it helps me with naming database tables and properties when I describe the broader scope.The future is more than bright, especially with a new model that is more current.Offtopic but just today I was aksing it for the most current versions it knows of right now:Python: 3.9JavaScript: ECMAScript 2021 (ES12)Java: 16C++: C++20C#: 9.0 (.NET 5.0)Ruby: 3.0.0Swift: 5.4Go: 1.16Rust: 1.51.0TypeScript: 4.3PHP: 8.0Kotlin: 1.5.0Scala: 3.0R: 4.0.5Perl: 5.32And frameworks:Python:Django: Version 3.2Flask: Version 2.0.1Pyramid: Version 2.0TensorFlow: Version 2.6.0PyTorch: Version 1.9.0JavaScript:Node.js: Version 16.9.1Express.js: Version 4.17.1React.js: Version 17.0.2Angular: Version 12.2.4Vue.js: Version 3.2.6Java:Spring Framework: Version 5.3.9Hibernate: Ver	naiv	12.815775	-6.543142	comment	5.0	21.0	1685646342	10.015613
36300924	I really want scripting in Elixir to	I really want scripting in Elixir to be better - and the addition of Mix.install() is a great step forward - but there are still a lot of awkward elements. Elixir will require you to be in a module to define a function and then respect module namespaces when calling them - which makes sense in a normal context but I find it to be annoying while scripting. Likewise I don't think dialyzer, the Elixir / Erlang static type analyzer, will run on script files.That said I think the underlying lack of data mutability really increases the potential for code reuse and scripting.	aeturnum	12.644397	-7.436363	comment	5.0	19.0	1686603171	12.923775
36310923	Looking for a job right now, not lim	"Looking for a job right now, not limited to any specific language, and I see Ruby mentioned plenty of times. Based on that, it seems the reports of Ruby's decline are not as bad as sometimes claimed.If you look at PostgreSQL then a lot of dev work comes from EnterpriseDB and a handful of companies too.The thing with Rails is that it doesn't scale terrible well to ""Twitter scale"" (if I'm not mistaken Twitter has dropped all usage of Rails) so there aren't that many well-known companies running it, but the overwhelming majority of companies are not ""Twitter scale"" and it's not really an issue for them. There's a long list of smaller outfits that are not in the ""top 50"" using Rails quite happily.People focus too much on ""What is {Twitter,Facebook,Google,Amazon,Netflix,...} doing?"" Who cares? "	arp242	12.744608	-6.934791	comment	5.0	19.0	1686667324	12.329453
36311875	The Design Principles of the Elixir 	The Design Principles of the Elixir Type System [pdf]	weatherlight	12.625632	-7.458378	story	5.0	100.0	1686670817	12.934717
36355719	I'm glad someone has written about t	I'm glad someone has written about this. I actually wanted to write this very blog post, and even made a crappier version of this flow chart.Why? Because people think they know what LiveView is, but they don't, because the pretenders out there (LiveWire, StimulusReflex and all the rest) are poor imitations.Don't sleep on LiveView.	derekkraan	12.893201	-6.800688	comment	5.0	27.0	1686919829	12.717184
36390570	Honestly typescript is fine, just gi	Honestly typescript is fine, just give me:Standard library that isn't worthless - no more npm package spam.Type knowledge in the runtime.  It doesn't have to be typed, just make it so I don't have to do crazy checks on properties before casting to a class.Imports without webpack.	bioemerl	12.364672	-6.769612	comment	5.0	30.0	1687179647	-10.434891
36398516	No, please for the love of god stop 	"No, please for the love of god stop writing services. Having random grab-bags of methods makes it infinitely harder to find what code lives where, instead of putting it into models where we have 20+ years of OO design principles (single responsibility, open to extension, liskov substitution, interface segregation, etc) to guide us. ""Fat models, skinny controllers"" is a Rails guiding principle for a reason"	nightpool	12.718618	-6.951456	comment	5.0	23.0	1687223385	12.349715
36426563	Shall we consider Ruby essentially d	Shall we consider Ruby essentially dead if two good references are 10+ yrs old?	czbond	12.669344	-7.0191803	comment	5.0	17.0	1687393064	12.387812
36427216	I haven't heard of a company using R	I haven't heard of a company using Ruby at scale that aren't actively trying to migrate off of it.	ryanmargono	12.675409	-6.9965086	comment	5.0	15.0	1687399777	12.341696
36477140	In the meantime, your PHP app had 40	In the meantime, your PHP app had 40 major security flaws, no meaningful monitoring, a DB that wasn't backed up and major data consistency problems. Also, when your box's hdd crashed, you lost all those minor changes you had vim'ed over the years. But for the rest, yeah, all is fine.	edejong	12.772604	-6.5810556	comment	5.0	58.0	1687767845	10.281438
36515959	My experience of porting Javascript 	"My experience of porting Javascript code to Typescript (or calling into Javascript from Typescript and figuring out the correct types to pass) is very similar.Thousands of files all become filled with very obvious bugs once you enable a basic type checker, which then helps brand Typescript as ""too much effort"" by those who normally write Javascript because now they need to deal with their buggy code. Luckily you can just explicitly cast all of your types without checking and hope that nobody notices!When you ask people to get their typing right, someone will use buzzwords like ""rapid prototyping"" and remind you that features are more important than fixing the existing product as long as nobody complains about the bugs, and that's that. Also, Typescript is hard, apparently.Untyped legacy co"	jeroenhd	12.3416	-6.7987957	comment	5.0	31.0	1688009088	-10.42801
29652809	My side-project relies heavily on WS	My side-project relies heavily on WS, I'm currently using Node.js and it's alright but learning Elixir is my goal during these holidays. Any resource to share to get started? I don't know much about Elixir except it's perfect for such use-cases.	Zealotux	12.688939	-7.404306	comment	5.0	16.0	1640195900	12.921113
29665814	I’m a little confused about this pro	I’m a little confused about this project. I’m trying to build the most complete list of programming languages out there (currently working on it via my favorites, it you want to have a look), and I’m trying to figure out if this qualifies.Usually it’s pretty easy to get on my list: if you call your project a language I add it to the list.But this one gives me a little pause, because it seems like this language is not distinct from Ruby at all. Rather this is a straight up Ruby -> C++.Is it fair to call this a language rather than a compiler? To me, a language is more than syntax and semantics, but includes an library ecosystem, tooling, and community. Does Natalie aim to grow a community, or will it exist fully within the Rudy ecosystem?	ModernMech	12.533023	-7.075966	comment	5.0	17.0	1640289556	12.390209
34137753	I thought Ruby 3 was supposed to be 	I thought Ruby 3 was supposed to be 3x faster than version 2?	firecall	12.604635	-7.0326834	comment	5.0	18.0	1672064253	12.377837
34138771	I've only ever known Javascript/ Typ	"I've only ever known Javascript/ Typescript. I've been thinking of picking up ruby to learn ""practical"" functional programming and maybe see what the infatuation with rails is, but I'm starting to think it might be more ""valuable"" to learn python."	foxandmouse	12.556567	-6.9880733	comment	5.0	17.0	1672070631	12.343918
34189296	 Speaking as an amateur programmer, 	 Speaking as an amateur programmer, is this like Laravel's livewire or intertiajs with inline blade component? (but in Elixir). Or is this something else?	Crazyontap	12.82491	-6.647873	comment	5.0	18.0	1672430435	10.350246
34194470	I don’t think prolog does itself any	I don’t think prolog does itself any favours by advertising as a general purpose programming language.I tried to learn it and it really screams “I’m not a general purpose programming language”.If you take away the use cases more suitable for datalog or MiniZinc the only remaining strong use case I see is recursive parsers.It’d be good to hear about how others see it.	usgroup	13.146923	-7.29442	comment	5.0	45.0	1672472439	-12.488706
34206974	> Without any programming jobs on my	"> Without any programming jobs on my CV, what is a good way to penetrate into the market?freelance work.Sign up on Upwork.com (or similar). Do a bunch of contracts. Put them on your resume.I did freelance work for years before deciding i was sick of constantly hustling for clients. Then I applied for jobs and said ""here's all the things I've done"" and they were like ""cool. interview. yup. you're hired""Also, pro-tip: make contributions to big name open source projects. Not only will it be great to be able to honestly say ""yeah, I'm a Rails contributor"" (or whatever) BUT it is also great experience for working with others. The large projects tend to have high standards and require good code and unit tests. You'll frequently get a code review and need to make some tweaks before it gets merged"	masukomi	12.750326	-6.9475026	comment	5.0	16.0	1672586506	12.358807
34244301	Before Ruby introduced filter_map:re	"Before Ruby introduced filter_map:res = (1..10).select { |x| x != 5 }.map { |x| x ** 2 }With filter_map:res = (1..10).filter_map { |x| x ** 2 if x != 5 }In both cases, I think the Ruby solution is more readable.Python list comprehensions invert the subject (data) and the verb (action).  You see what will be done before you see what the subject is.  I would argue that showing the subject first allows easier code review as you know immediately what you are working with.But beyond that, the first Ruby example tells you in English what is happening.  ""take this range"", ""select a subset"", then ""map some actions to the elements"".And the filter_map abbreviation does the same, telling you ""take this range, filter it and perform an operation on the remaining elements"".Python tells you nothing... an"	michaelteter	12.350525	-7.1236963	comment	5.0	25.0	1672830970	12.356954
34266353	Ask HN: Beginner dev wanting to lear	Ask HN: Beginner dev wanting to learn full stack	startingout	13.40523	-7.338235	story	5.0	4.0	1672951869	15.100028
34288170	I started writing my dissertation pr	I started writing my dissertation project in Perl CGI back in like 2001 or whatever it was. I moved to PHP pretty quickly when I realised I could do the same things in 5 lines that took 70 in Perl. I'd been making websites for about 6 years at that point and PHP just absolutely changed my life. It was, arguably, exactly like this post talks about CGI - put some script in a file, FTP to your host and you're good to go. Web development was simple and exciting - you could get a long way very quickly.I was talking to a friend the other day who wants to learn some web dev for fun - he had no clue where to start because there's now SO much, so many 'best practice' posts, so much 'you must learn like this'. I know the world changes (and often for the better), but it was a magic time when you coul	iamben	12.587374	-6.680432	comment	5.0	21.0	1673101267	13.066117
34300755	Oh, the P in LAMP is now Python?Haha	Oh, the P in LAMP is now Python?Haha, i have always known it to be PHP	chirau	12.653574	-6.6562185	comment	5.0	15.0	1673197252	10.289876
34301463	It seems that every ShowHN that feat	It seems that every ShowHN that features an Elixir project is well-polished, has a sensical API, and has friendly, solid documentation. Is this a function of the nature of the language, the community, or a mix of both?	shijie	12.673568	-7.4441695	comment	5.0	22.0	1673201432	12.946757
34311029	The Future of Ruby: Is It a Smart Ch	The Future of Ruby: Is It a Smart Choice for Startups?	Marciok	12.693445	-6.9662046	story	5.0	4.0	1673276369	12.361306
34360980	Hi there! I work on the TypeScript t	Hi there! I work on the TypeScript team and I respect your feedback. Of course I do think TypeScript is worth it, and I'll try to address some of the points you've raised with my thoughts.i. Dependency management is indeed frustrating. TypeScript doesn't create a new major version for every more-advanced check. In cases where inference might improve or new analyses are added, we run the risk of affecting existing builds. My best advice on this front is to lock to a specific minor version of TS.ii. My anecdotal experience is that library documentation could indeed be better; however, that's been the case with JavaScript libraries regardless of types.iii. Our error messages need to get better - I'm in full agreement with you. Often a concrete repro is a good way to get us thinking. Our error	DanRosenwasser	12.38872	-6.774862	comment	5.0	49.0	1673561505	-10.450743
34361232	Thanks for responding, and thanks fo	Thanks for responding, and thanks for your work for the community! I sometimes place myself in the shoes of devs building TypeScript, especially when I am a little frustrated, and most of the time I realize that a lot of these issues are incredibly hard to solve.> i. Dependency management is indeed frustrating. TypeScript doesn't create a new major version for every more-advanced check. In cases where inference might improve or new analyses are added, we run the risk of affecting existing builds. My best advice on this front is to lock to a specific minor version of TS.In my recent case, I needed to update Apollo Server to v4, which needs a newer version of TypeScript (see https://www.apollographql.com/docs/apollo-server/migration#t...), which in turn broke a type used from ProtobufJS. I a	roberttod	12.403943	-6.769375	comment	5.0	18.0	1673562958	4.3576083
34366179	Short answer:It is worth it if you w	"Short answer:It is worth it if you want me on the team. I refuse to work with anyone who throws out TS for JS in 2023.Slightly longer answer:I have said a number of times    ""Javascript is a simple version of Java in the same way as a bike with one wheel is a simpler version of an ordinary bike.""

The same can be said about JS and TS. If you want to do any serious work you go for the serious thing even if it means occasional adjustment of brakes and gears, or in Typescripts case, sometimes figuring out something.If anybody suggest to use Javascript today I won't take them seriously.i) I have used Typeescript since 2017. For some reason I don't have these problems and never had.ii)  Yes, some libraries are poorly documented, that is for me a reason to prove why I am a software engineer by e"	eitland	12.414687	-6.7736115	comment	5.0	28.0	1673607310	-10.4634
34386716	It is a mystery why Ruby collapsed, 	It is a mystery why Ruby collapsed, and Python came to eat its lunch.Python was there first, and took a very long time to gain its hegemony. Pandas and Jupyter could in principle have been built on Ruby: why weren't they? Python suffered massively in the 2->3 transition and has only just begun to essay thread-safety, which both should have given Ruby a leg up.Was it a core implementation group's superior openness to the needs of such projects?	moloch-hai	12.502176	-6.9951086	comment	5.0	25.0	1673756802	12.425164
34411348	Hi, curious to try new version of PH	Hi, curious to try new version of PHP. Do you know some good tutorial to setup development environment?	coderoffortune	12.766271	-6.6464705	comment	5.0	15.0	1673955239	8.042172
34411131	used php in 2015, decided that it's 	used php in 2015, decided that it's not that nice. last couple of months, I've been banging my head with php7. granted, it's a legacy project, but it is still the same php 7-8 years ago.	lemper	12.774213	-6.6428666	comment	5.0	24.0	1673953047	10.317962
34413364	PHP devs hate to admit that the only	PHP devs hate to admit that the only reason PHP is still relevant at all today is because of WordPress.If WordPress moved to a modern language tomorrow, PHP would cease to exist afterwards.	skrowl	12.772381	-6.641408	comment	5.0	18.0	1673968521	10.348557
34414207	For anyone thinking Ruby is dying or	"For anyone thinking Ruby is dying or slow, it's not the reason people like me used it and sticked with it in first place! It's about the experience when you write the code itself. It's natural, like a flow of water, and you're suddenly in Zen mode, where your thought just naturally flow without even you're aware or not.I first time learn Ruby from zero to ""hero"" in production confidently is in just under a week. And as far as i know, no other language could bring me such experience."	revskill	12.601236	-7.0438433	comment	5.0	111.0	1673971638	12.434096
34454509	The JS one does seem to have some mo	"The JS one does seem to have some more power than the Elixir one. For instance, in Elixir, if it's a bit kludgy to pipe to a second or third argument. I find this often when I want to insert into a map. You can always define more functions, but otherwise it's annoying, because you end up with something like  computation() |> &(Map.put(my_map, key, &1)).()

That said, with this less-power, you do kind of end up forced to design your functions in a way to where piping makes sense, and IMO it leads to cleaner and more consistent APIs."	ollien	12.568035	-7.433821	comment	5.0	20.0	1674229174	-5.7640605
34494218	An Overview of Ruby on Rails 7.1 Fea	An Overview of Ruby on Rails 7.1 Features. Part III	mariuz	12.740603	-6.9494147	story	5.0	92.0	1674504378	12.369841
34495461	Maybe this is a bit close-minded to 	Maybe this is a bit close-minded to say.Even with the evolution of Ruby on Rails and adding more rich feature sets, I wouldn’t recommend it as an out of the box Webapp BECAUSE upgrading to newer versions of RoR sucks.The more time I invest in trying to like RoR the more I end up having to fork gems to patch them because upgrades cannot be made smoothly.It so easily integrates ActiveRecord, and heavily encourages it, that when you want to pull out of using it it’s a huge pain.Test suite combines unit and integration testing.It’s been a net loss imho to learn and work with it over the years.I’ve been waiting to be persuaded otherwise.Edit: apparently people disagree with me but haven’t countered the points, is HN just full of Ruby fans?	flamebreath447	12.720472	-6.9326844	comment	5.0	22.0	1674510018	12.353195
34539203	What about the language do you disli	What about the language do you dislike? It's a strongly typed Ruby with generics.Edit: trait-based OO is a breath of fresh air compared to tree-style class inheritance. Super flexible without having to overthink.Immutable by default is reassuring, Option/Result are fantastic null/exception replacements.Enums and match blocks are powerful and gracefully help ensure handling of all cases, have nice syntax, and work well for a systems language.	echelon	12.5340605	-7.0923076	comment	5.0	56.0	1674769156	12.374304
34545665	The main insight is in Joe Armstrong	"The main insight is in Joe Armstrong's thesis. ""Making reliable distributed systems in the presence of software errors"" https://erlang.org/download/armstrong_thesis_2003.pdf (I think the original title was ""In the presence of hardware errors"", emphasis mine)All the other things flow from that thesis and understanding. You can recreate behaviours described in the repo doc using Erlang primitives very easily, and they are very hard to recreate in pretty much any other language.Because Erlang is very much literally about lightweight processes and message passing. Only:- every part of the system knows about lightweight processes and messages- every part of the system is engineered around them- the underlying VM is not only re-entrant in almost every single function, it's also extremely resilie"	dmitriid	12.522242	-7.5036993	comment	5.0	46.0	1674825914	12.896936
34545884	From Joe Armstrong's thesis (p. 6):>	"From Joe Armstrong's thesis (p. 6):> In February 1998 Erlang was banned for new product development within Ericsson—the main reason for the ban was that Ericsson wanted to be a consumer of sodware technologies rather than a producer.From Bjarne Däcker's thesis (2000, p. 37):> In February 1998, Erlang was banned within Ericsson Radio AB (ERA) for new product projects aimed for external customers because:
> 
> “The selection of an implementation language implies a more long-term commitment than selection of processors and OS, due to the longer life cycle of implemented products. Use of a proprietary language, implies a continued effort to maintain and further develop the support and the development environment. It further implies that we cannot easily benefit from, and find synergy with, the"	stevan	12.559158	-7.512099	comment	5.0	30.0	1674827075	12.921598
34559409	On the one hand, this framework's fr	On the one hand, this framework's front page almost undersells the biggest feature it has, which is that I believe it can function as an actual Erlang node. You can use this to join a Go system to your Erlang cluster directly. This is pretty impressive because that's nontrivial functionality.On the other hand... this is a pure an example of a transliteration as an idiomatic port as I can think of. There is simply no need, in pure Go at least, to blindly copy every last detail of the Erlang implementation for gen_server for general usage, and more than you should copy every last such thing for Javascript or Python or any other language. If you are joining to an Erlang node and working in the Erlang ecosystem, you have no real choice, but if you aren't doing that, this library is going to ad	jerf	12.423099	-7.5873876	comment	5.0	32.0	1674926356	12.892038
34591783	The code of the editor is in JavaScr	The code of the editor is in JavaScript and not in TypeScript. Which makes me wonder how hard it goes in terms of regressions when the codebase becomes progressively larger.I love vanilla JavaScript, but I always try to switch to TypeScript if the codebase becomes larger than 100-200 lines of code. Or otherwise I may regret, and I know it too well from previous experiences.	garganzol	12.374501	-6.757049	comment	5.0	30.0	1675144992	-10.427127
34623883	Erlang is designed to accommodate pr	"Erlang is designed to accommodate principles for building reliable systems in the presence of software errors, and in such capacity it is definitely a worthy instrument. It is one of the few concurrency oriented programming languages in the world.But as Joe Armstrong himself pointed out in his dissertation: ""indeed concurrent programs can be written in languages which are not themselves concurrent"". You can write concurrent programs in Python if you want. Or even shell. As soon as you can spawn a process and send it a message - you're good.And this explains why Erlang hasn't conquered the world. As soon as it has established the principles, as soon as it proved them feasible in practice, it has made itself redundant. The lessons we learned from Erlang were larger than Erlang itself."	okaleniuk	12.526012	-7.512491	comment	5.0	34.0	1675327404	12.881693
34623983	I strongly disagree that we learned 	I strongly disagree that we learned much of anything.For example: hot upgrading.  The fact that an Erlang process can tail call itself means that you can swap in a new process with the same signature at the tail call of the old process.  Nobody else does this that I know of.I can go on further.  The whole set of behaviors encoded by the OTP libraries is also something that nobody else seems to do.  Erlang's bit syntax is possibly the best out there even today.I guess pattern matching finally made it to other languages.  I would think that's probably about it from Erlang (pattern matching isn't exclusive to Erlang but it was one of the earlier languages with it).None of the other programming languages seem to have learned much of anything from Erlang--and that's kind of sad.	bsder	12.5630865	-7.523014	comment	5.0	27.0	1675328271	12.89423
34671860	This goes on to prove that PHP is st	This goes on to prove that PHP is still relevant today. No matter how many new frameworks come up, we all know PHP anyways.	nigamanth	12.764386	-6.625387	comment	5.0	52.0	1675645352	10.338536
34729596	Mostly I found Turbo Native is lacki	Mostly I found Turbo Native is lacking a good minimal walkthrough from rails to shipping on android/ios. To me, looking at it from afar, it's entirely unclear the how much native dev is required to make it even walk.	jstummbillig	12.769205	-6.576101	comment	5.0	22.0	1675970157	-6.7058554
34742253	I love the idea of Elixir, but I jus	I love the idea of Elixir, but I just can't get into it because of its weird choice of sigils. |> for pipes and <- for assignments, seriously? I seriously dislike programming languages which choose two character sigils for basic operations. I also heavily dislike |x| in Rust.	j-krieger	12.638926	-7.463504	comment	5.0	15.0	1676048103	12.896073
34802438	In the last few months the mention o	In the last few months the mention of Datalog has increased, I wondered how it differed from graph databases and found a clear answer in SO [1]. I am not an incumbent but found graph databases and clause approaches interesting.[1] https://stackoverflow.com/questions/29192927/a-graph-db-vs-a... (2015)	wslh	13.184801	-6.994567	comment	5.0	28.0	1676460288	-12.375393
34828234	How incredibly arrogant. 99% of the 	How incredibly arrogant. 99% of the time that happens because the code sucks and the tests are impossible to write any other way without significant effort to mock resources and/or just refactor the code (which of course breaks the old tests).Anyone know if this is one of the many papercuts that probably killed off ruby (poor dev culture)? I never followed the language much.	sublinear	12.56452	-7.044668	comment	5.0	29.0	1676590003	12.396838
34857456	Rails is probably the best framework	Rails is probably the best framework still. But it still feels too low-level. I don’t want to care about the mountains of Web gunk there are: JSON serialization, HTTP methods, cookies, etc. Lack of static typing really hurts the maintenance story, too.I really just want to write business logic, wire that up to endpoints in a nice DSL, and move on.Most web frameworks seem to be obsessed with the web platform to the point they feel more like glorified macros, leaking its web gunk everywhere.	mattgreenrocks	12.647838	-6.559379	comment	5.0	17.0	1676813967	12.284737
34864194	Use an actor model language -- by fa	Use an actor model language -- by far the sanest way. Message passing is intuitive to human experience.1. Elixir (Erlang)2. Scala/Akka3. Pony	mhsdef	12.34376	-7.496349	comment	5.0	18.0	1676859149	12.855049
34874221	I wouldn't recommend PHP to anyone w	I wouldn't recommend PHP to anyone who isn't already invested/emerged in the language.Wordpress for blogs or websites on a shared host with automatic updates and a few select plugins? Yes. Laravel or Symphony for applications? Ok.But just PHP has way too many footguns and doesn't provide nearly enough affordances to make them worth it IMO. Plus it's a language that breaks backwards compatibility way too often, stops support for older versions. You need some sort of protection layer that shields you from all of this. So you might end up with something that is way more complex and slow than it needs to be.	dgb23	12.7778015	-6.605889	comment	5.0	22.0	1676935086	10.304853
34927192	Of course old networks are still ope	"Of course old networks are still operated and maintained. 5G is exclusively ""cloud-native"" (i.e. microservices on Kubernetes) and most common core components are written in Java, Go and Python. So while Erlang is still being used and ran, most new code is not written in Erlang, as far as I know."	dxuh	12.558533	-7.5133643	comment	5.0	18.0	1677260294	12.91956
34935582	I've got experience in both Phoenix 	"I've got experience in both Phoenix and Django and I disagree.
In my view, Phoenix is the less clean one: Django does not generate anything through scaffolding like Phoenix. Your CRUD (and auth and forms and everything more or less) is generated by overring the built-in Django classes or the classes offered by the packages. Nothing gets thrown away in real production; you use your class hierarchy to change it to your requirements. I know that inheritance and polymorphism seems like a 90's technology but this actually is a solved problem in web frameworks and does work excellent.On the other hand, I agree with you that everything that Phoenix generates through its phx.gen generators are for demo purposes and will get thrown away eventually. This, along with the fact that everything is a fun"	spapas82	12.800522	-6.999478	comment	5.0	42.0	1677321663	12.621853
34936790	I'm trying to decide between taking 	I'm trying to decide between taking a Django job and an Elixir one. Can't decide between old and proven and new and early adopter. Any advice?	fud101	12.777155	-6.9746585	comment	5.0	16.0	1677334260	12.833551
34949553	[Laughs in pandas]I don't want to be	[Laughs in pandas]I don't want to be dismissive, this is nice work and it's clean and lightweight. But it might be good to look at existing solutions in this area - pandas was developed within the financial industry to solve exactly this sort of issue. If you need more topological flexibility there is xarray, and if you need spreadsheet type immediacy it's worth looking into Mito.Rustaceans should look into pola.rs: https://github.com/pola-rs/polars	anigbrowl	12.391637	-6.4930677	comment	5.0	27.0	1677446204	10.095704
34963789	Hello! I created Civet ask me anythi	Hello! I created Civet ask me anything.Or just curse me for keeping the dream of CoffeeScript alive :P	Yahivin	12.424456	-6.5888443	comment	5.0	18.0	1677541940	-10.52324
34969245	I learned there that if you build a 	I learned there that if you build a successful startup on Ruby, your infrastructure costs are going to be insanely high trying to make it scale and you'd be better off using a typed language with true multithreading and a solid GC.	likeabbas	12.612787	-7.0091724	comment	5.0	50.0	1677592196	12.34741
35007301	I have been a heavy Python user now 	I have been a heavy Python user now about 15 years, but for me now I'm increasingly reaching for modern JavaScript and particularly TypeScript to do the things I would have traditionally done with Python.ES modules, fat arrow expressions, and all the other nice new syntax and library features have made the language so more pleasant to use. In many ways the ergonomics of TypeScript in particular are far superior to Python now, and I find that really surprising.I haven't yet found a replacement for Django (particularly the ORM/Admin/Forms combination) it is just so incredibly productive to use. So, I don't think I will be moving off it, but it's certainly not the growth language for me anymore.	samwillis	12.385296	-6.640434	comment	5.0	21.0	1677833599	9.935977
35008786	This is timely, as I used submodules	This is timely, as I used submodules years ago and got very confused with them.But now I have an Ask HN:I'm building a ruby gem (package) that will be shared across a few of my applications.  The apps are separate and proprietary, but I want to open source the gem, so a monorepo doesn't fit.When the gem is stable, I can just publish it and then reference it in my Gemfile like any other gem - rebundling every time there's a new release.But at the moment, I'm actively developing the gem and making frequent changes to the API - so I want to reference it directly from the container app and edit both together as different edge cases arise.The standard Ruby on Rails way to do this is to stick it in /lib or /vendor - then work on it and once done, extract it and publish the gem.  But I'm working 	rahoulb	12.683163	-6.9659405	comment	5.0	17.0	1677847285	12.340168
35032324	Well that made zero sense to me. Can	Well that made zero sense to me. Can someone ELI16?	Jabrov	12.685704	-7.4311414	comment	5.0	26.0	1678040228	12.911886
35036012	Thank you all for the kind comments!	Thank you all for the kind comments! The Rails community has always been supportive to me. Even criticisms were done in a constructive manner.I will go into detail on why I stopped RailsCasts in part 3, but I will say it wasn’t because of the community. You all have been awesome.	rbates	12.7573395	-6.9397883	comment	5.0	16.0	1678063160	12.362311
35071013	Hackers and spammers too. Famously b	Hackers and spammers too. Famously bad security (which somehow got PHP got blamed for, rather than specific software) principles.	capableweb	12.782388	-6.590296	comment	5.0	15.0	1678292848	-4.273004
35074491	I work everyday with Rails.In my exp	"I work everyday with Rails.In my experience, Ruby is not super slow.In my machine, I can create 1M of empty hashs on 0.17sec.  Benchmark.measure{1000000.times{Hash.new}}
  @total = 0.1706789999999998s

It's very good for a dynamic language.But ActiveRecord (and Rails) are incredibly slow.In my machine in 0.17sec only 2000 Models can be created.  Benchmark.measure{2000.times{User.new}}
  @total = @total=0.17733399999999833.


Some SQL+Network runs in less than 10ms, in these cases Active Models creation is slower than that.Yes, Rails can be slower than database access."	zac23or	12.794355	-6.8560624	comment	5.0	44.0	1678308330	12.292508
35122531	TypeScript has the most complicated 	TypeScript has the most complicated type system ever. Don't know why Anders&Co needed to go that far.	borissk	12.343588	-6.8332887	comment	5.0	18.0	1678639892	-10.3914585
39371106	The origin story of the GEM stuff is	"The origin story of the GEM stuff is quite interesting. Lee Lorenzen was an employee at Xerox in Texas, and wanted to get some of the ideas from the Star onto commodity 8080/8086 hardware (just prior to IBM PC, still in latter stages of the CP/M era). He made a prototype, presented it, and it went nowhere. Gary Kildall (DR) then recruited him to come work for them doing basically that. He (Lorenzen) later went off to spin up his own company -- which created Ventura Publisher, which was built on a fork of GEM.You can see Lorenzen's original pitch to Xerox of his ""LoneStar"" prototype here: https://www.youtube.com/watch?v=EMBGRZftS30I believe he has gone on since to be involved in venture investment.GEM maybe has a bad reputation as a bit of a Mac UI knockoff, but the history is actually deep"	cmrdporcupine	12.661246	-6.9776726	comment	5.0	20.0	1707925189	12.390347
39414996	Publishing and importing TypeScript 	Publishing and importing TypeScript is a huge mistake.Packages should just compile TypeScript to JS and publish that as they do now.	spankalee	12.397741	-6.680815	comment	5.0	18.0	1708217288	-10.4684925
39421579	Apache HTTPd Server Developers Consi	Apache HTTPd Server Developers Considered Harmful	joesuf4	12.365971	-6.943625	story	5.0	18.0	1708280731	13.146643
39513557	Ruby is better than Python for Unix-	Ruby is better than Python for Unix-like system administration	thunderbong	12.538778	-7.0199656	story	5.0	12.0	1708966162	12.333539
39538618	Leaving Everything Behind For Elixir	Leaving Everything Behind For Elixir [video]	thibaut_barrere	12.689085	-7.4707956	story	5.0	25.0	1709131669	12.94754
39590246	Gleam v1.0.0 Released	Gleam v1.0.0 Released	lpil	12.517853	-7.458832	story	5.0	70.0	1709559127	-12.330688
39603338	I don't understand. What is the atta	I don't understand. What is the attack there, and what does Django catch? In my experience with Rails and Phoenix, I'd expect that to just 404.But it looks like maybe you're implying the double curly braces allows someone to inject some sort of eval block. Is that a Django thing?	losvedir	12.834408	-6.490451	comment	5.0	15.0	1709646391	10.0782995
39629851	This is my favorite book about JS, a	This is my favorite book about JS, and I always recommend it to people. It occurs to me for the first time that the lack of TypeScript might be a problem, because if I’m making recommendations to someone learning, I am definitely going to recommend they write TS instead of JS. On the other hand it may actually be helpful to learn the concepts in this book without the additional syntax overhead of type annotations, plus the more webby content doesn’t really have much to do with types anyway.	dcre	12.371944	-6.7007265	comment	5.0	54.0	1709823456	-10.480987
39630087	Because TypeScript is the de facto s	Because TypeScript is the de facto standard way of writing JavaScript for most of the industry and it has killed all of the other compile-to-js languages.The chances of it going out of favour are very slim, there's a giant ecosystem built on it and the language is very well loved by devs (should be second only to Rust).Microsoft has 50 people on payroll working only on TS. Any competitor needs a gargantuan investment.	epolanski	12.356152	-6.740182	comment	5.0	24.0	1709824541	-10.483988
39633944	Ask HN: What does the day to day loo	Ask HN: What does the day to day look like for software engineers working on AI	aicurious	12.585928	-7.0282702	story	5.0	11.0	1709841780	12.353717
39645982	Unpacking Elixir: Phoenix	Unpacking Elixir: Phoenix	lawik	12.729603	-7.3746047	story	5.0	43.0	1709929694	12.822181
39652062	Crystal is close to being my ideal l	"Crystal is close to being my ideal language, but the compile times are really, really bad.Because of how the type inference works, the compiler cannot (effectively) compile incrementally, which means that any change causes a full compilation. This includes dependencies.The final straw for me was when the (unofficial) LSP paused some ~30 seconds on every keystroke in a tiny project with one large dependency (Lucky), and the response on the forums was ""don't use Crystal for large projects"", ""I don't think the compiler is slow"" and a couple of really good technical explanations of how improving the compile times is almost a pipe dream outside of a major redesign.I'm salty because the feel-in-hand of Crystal is best in class, but the DX is worst in class and I get the impression that that's no"	fredrikholm	12.599173	-7.211868	comment	5.0	29.0	1709996962	-11.230143
38599293	Ruby 3.3.0-Rc1 Released	Ruby 3.3.0-Rc1 Released	amalinovic	12.646698	-7.032367	story	5.0	40.0	1702290633	12.405888
38619348	Don't write web apps in anything oth	Don't write web apps in anything other than TypeScript	gablg1	12.374867	-6.7475824	story	5.0	9.0	1702418810	-10.424746
38626663	The Plane codebase is a good read. I	The Plane codebase is a good read. If you want to see a well put together Django + Nextjs project you should check it out. There has been a lot of talk recently about what open source means. To completely side-step that discussion, I have plane starred on github because I learned a lot looking at their code without ever having run it or ever using the product.	notlive	12.816282	-6.5065207	comment	5.0	27.0	1702472213	10.083018
38654118	75 minutes to generate a bunch of mo	"75 minutes to generate a bunch of mostly irrelevant nitpicks.What a colossal waste of compute resources. (1)IME if you’re using TypeScript then ESlint’s real value mostly approaches zero. For pure JS projects it’s useful for finding nullref type bugs.(1)
> Our previous linting setup took 75 minutes to run, so we were fanning it out across 40+ workers in CIThis. Is. Insane."	davedx	12.327847	-6.4987803	comment	5.0	19.0	1702648001	-10.390842
38751161	I really wish ruby would have become	I really wish ruby would have become the biggest scripting language rather than python.	stjohnswarts	12.454227	-7.030133	comment	5.0	60.0	1703392513	12.394348
38760633	I hope Ruby 4.0 could allow explicit	I hope Ruby 4.0 could allow explicit import and avoid implicit, global namespace gem import mechanism like nowsdays.	revskill	12.496293	-7.021044	comment	5.0	23.0	1703490231	-8.811434
38763663	Having tried to use Ruby for text pr	Having tried to use Ruby for text processing specifically, I'm not sure I agree it beats Python at that particular task. Maybe I'm just used to the Python way of doing things, but I found it difficult to work with the lack of first-class functions and iterators/generators, as well as the general iteration protocol.	nerdponx	12.3772335	-6.989949	comment	5.0	21.0	1703520228	12.385011
38783709	FWIW, I've seen stronger performance	"FWIW, I've seen stronger performance from gpt-4-1106-preview when I use `response_format: { type: ""json_object"" },` (providing a target typescript interface in context), vs the ""tools"" API.More flexible, and (evaluating non-scientifically!) qualitatively better answers & instruction following -- particularly for deeply nested or complex schemas, which typescript expresses very clearly and succinctly.Example from a hack week project earlier this month (using a TS-ish schema description that's copy/pasted from healthcare's FHIR standard): https://github.com/microsoft-healthcare-madison/hackweek-202...Or a more complex example with one model call to invent a TS schema on-the-fly and another call to abstract clinical data into it: <a href=""https://github.com/microsoft-healthcare-madison/hackwe"	JoshMandel	12.378772	-6.685347	comment	5.0	20.0	1703695353	-10.428339
38911470	Short Ruby News – Edition #73	Short Ruby News – Edition #73	darkbot	12.651557	-7.040137	story	5.0	2.0	1704719851	12.379452
38914989	Is it possible to work with Phoenix 	Is it possible to work with Phoenix in Lisp Flavoured Erlang (LFE) [0], or any of the other Erlang based languages, instead of Elixir?[0] https://lfe.io/	nanna	12.660706	-7.4319444	comment	5.0	15.0	1704733749	12.903146
38923601	Ritchie Vink (the creator of Polars)	"Ritchie Vink (the creator of Polars) deliberately decided not to write a book so that he (and his team) can focus full time on Polars itself.Thijs Nieuwdorp and I are currently working on the O'Reilly book ""Python Polars: The Definitive Guide"" [1]. It'll be a while before it gets released, but the Early Release version on the O'Reilly platform gets updated regularly. We also post draft chapters on the Polars Discord server [2].The Discord server is also a great place to ask questions and interact with the Polars team.[1] More information about the book: https://jeroenjanssens.com/pp/[2] Polars Discord server: https://discord.gg/fngBqDry"	jeroenjanssens	12.354439	-6.5087953	comment	5.0	34.0	1704787756	10.154022
32531609	I'm using django for more than 10 ye	"I'm using django for more than 10 years, phoenix for like 4. I consider myself experienced in both frameworks. I wanted to write some blog post about my experience with them, but never found the time.In any case, Phoenix is a fine (niche) framework but can't really be compared to a masterpiece like Django:* Phoenix, probably because of its influences from the ruby world is using some concept called ""generators"". Using the generator it will generate (sometimes a lot) source code files that will implement some functionality. For example, let's suppose you create a new schema (similar to the django model concept). You can use the generator so it will automagically create code for the schema file, its migratinons, some crud forms and even tests. This works fine until you need add another field"	spapas82	12.835337	-6.9094267	comment	5.0	23.0	1660999283	12.622832
32597855	> Use Absolute Paths for Importing C	"> Use Absolute Paths for Importing Code Blocks    import { FormType } from '../../../../types/form';
    import { DateType }   from '../../../../types/date';
    
    // This is considered bad practice

Disagree on this one. Beauty of typescript is giving you auto-import autocompletion in your editor, and not having to worry about relative paths any more. I don't think I've manually written an import statement in years."	madeofpalk	12.381667	-6.8188996	comment	5.0	20.0	1661451786	-10.485897
32624124	"I learned web development through ""R"	"I learned web development through ""Ruby on Rails Tutorial"" by Michael Hartl. The book is a project-based tutorial where you create a Twitter clone complete with a basic authentication system.The book had you host your app on the free version of Heroku. I imagine this book has taught a lot of people, and influenced a lot of people to use Heroku.Not anymore I guess."	tmpz22	12.73505	-6.9189363	comment	5.0	19.0	1661641505	-12.572067
15641735	I don't really see how this would be	"I don't really see how this would be much more different from language to language. The being 'sick of' part, not so much the specific irritations. Every languages has its issues and from all the languages I have tried I have found Ruby to be the most pleasant to work with, but I am sure this is different from person to person.One of the struggles that the writer seems to have is that programming applications is not science, but he seems to think it is. DHH has a great keynote on this phenomenon: ""Writing Software by David Heinemeier Hansson""https://www.youtube.com/watch?v=9LfmrkyP81MAs mentioned in the comments of the article you will run into issues with any programming language. One of the tricks is to not hold on so tightly to 'rules'. Like (take from the article) 'break functionality "	mosselman	12.545787	-7.0596647	comment	5.0	31.0	1510042660	12.349994
15659069	I used both Flow and TypeScript exte	I used both Flow and TypeScript extensively at my last job (coda.io), and through a series of thoughtful discussions and debates, we chose to migrate to TypeScript, even though we had already started using Flow in parts of our codebase.Microsoft did a really good job putting resources behind TypeScript, making sure tooling and IDE integrations are good, and generally getting a ton of momentum going.  TypeScript is fast-moving, with bugs fixed and features added at a high rate, and the quality of discussion on the issue tracker is high.  Flow, in comparison, was not evolving as fast.Flow touts global inference, which I think means better types when you don't necessarily have annotations on module boundaries, but I mostly care about what's possible in a greenfield or well-annotated codebase.	dgreensp	12.456565	-6.7554607	comment	5.0	19.0	1510192167	-10.489907
15680824	I am so confused, What should I lear	I am so confused, What should I learn Django or Ruby on Rails?	Kishy-nivas	12.779252	-6.7013	story	5.0	1.0	1510494295	10.319836
15781637	After 10 yrs of Rails I have some hi	After 10 yrs of Rails I have some high expectations and miss information about Elexir's incarnation of rubygems. Is there anything like RSpec?	TomK32	12.654632	-6.9799085	comment	5.0	15.0	1511714343	12.340366
15783455	Phoenix is way overhyped, particular	Phoenix is way overhyped, particularly on HN. This is the same as what happened with  Golang and then with Rust.A few years ago, I remember that all these articles kept popping up about people switching from Node.js to Go.Now it's funny because fairly recently I read a well thought out article on HN encouraging developers to dump Go for Node.js... These days you hardly read anything about Go at all. Not that there is anything wrong with it, but reality caught up with the hype and it's no longer pretending to be a silver bullet.Right now Phoenix is pretending to be a silver bullet, but it's really not.	jondubois	12.681332	-7.1583934	comment	5.0	17.0	1511735498	10.220897
15787125	Ask HN: Rails Resources?	Ask HN: Rails Resources?	methochris	12.727396	-6.953406	story	5.0	9.0	1511789506	12.386066
15814802	Ruby vs. JavaScript as a first progr	Ruby vs. JavaScript as a first programming language	dmitri1981	12.595546	-6.9526715	story	5.0	14.0	1512038547	12.354383
15820795	Can someone more familiar with Erlan	Can someone more familiar with Erlang/Elixir say some drawbacks of BEAM? I'm learning Elixir now and as I become more familiar it seems very difficult to write buggy code.If only it were typed, ah... (no, dialyzer doesn't count).	tabeth	12.5668545	-7.447824	comment	5.0	19.0	1512086385	12.908485
15832940	Django forces you to declare everyth	Django forces you to declare everything. Lots of manual boilerplate. Example, you must define every bit of a model in order for it to work. Rails is the opposite. ActiveRecord will ‘just work’ with the database. You can run rails on an existing db for example if it follows what are widely used conventions such as lowercase model name is the table, foreign keys are foo_id, etc...This is where people fear the “magic” of things like pluralization of models to table name and introspection... but it’s all just code! You can read it and look at it and understand it. No magic here. Just convenience and a smaller mental model as an end developer.Also... resources as a first clsss citizen is the biggest reason and the reason it defeats Django for this use case. You define ‘resources’ in your routin	whalesalad	12.826746	-6.601008	comment	5.0	15.0	1512235873	10.218968
15832874	I really dread upgrading Django. We 	"I really dread upgrading Django. We have a codebase that has been with us since the 1.3 days and each time there's an upgrade, someone on the team sets about one month aside to deal with all of the breakage. You could say that this is our fault for ""doing it wrong"" but we just wanna get stuff done. Sometimes the only way to do it that we could figure out was by doing something that Django later decided we shouldn't have done.Going to Python 3 is going to be the biggest annoyance yet."	jordigh	12.781204	-6.592535	comment	5.0	24.0	1512235279	10.098471
15837160	Is this worth getting? I would like 	Is this worth getting? I would like to spend a little time with Phoenix, but I'm not sure if this content is up to date or if it's well written.	jamra	12.79384	-7.103248	comment	5.0	25.0	1512301051	12.765687
15879346	Honestly, as a Rails dev, this just 	Honestly, as a Rails dev, this just seems more complicated than creating a Rails app in API mode and using #{React||Vue||Ember}} for the front-end.It's extremely easy to get started with a front-end app using vue-cli. This article spends a lot of time changing Rails' default functionality to achieve behavior similar to what vue-cli gives you by typing `vue init webpack` and answering a few questions.I understand that getting up to speed with a front-end framework takes time, but in my case, it was time well-spent (I used Maximilian Schwarzmüller's Vue.js course on Udemy). There's no shame in just using Rails for the API.	symfoniq	12.897609	-6.4741263	comment	5.0	44.0	1512747209	12.25054
15903016	I've actually been using this to tak	I've actually been using this to take a break from Node and start learning Django. It's been fantastic thus far. It was even enjoyable reading how they described fundamental concepts  like the client server relationship.Well done, Mozilla.	joecasson	12.826095	-6.497246	comment	5.0	21.0	1513053179	10.077867
15954880	Ruby can't tell how much memory it i	Ruby can't tell how much memory it is using from within the process, the only way to is shell out and scrape the output of ps.  I would love to be wrong about this, I did a fair amount of research and all the profiling libraries I read used this method.  One thing I've done instead is use object allocation, which is available from the builtin benchmarker, as a proxy for memory usage.  I don't have a good sense of how accurate that is, but anecdotally it seemed useful and correlated to stuff like page load times.(Edit: ^happily I am wrong about this, though I believe the copy on write thing below is still correct, see further discussion)Copy on write does definitely help here, only for Ruby > 2.0.	wdewind	12.510317	-7.013623	comment	5.0	21.0	1513627025	-11.24857
15959913	You're baffled because the author ha	You're baffled because the author has no idea what they're talking about. TypeScript is a superset of JS, it makes no sense to compile it to a platform designed for AoT-compiled systems programming languages.	TazeTSchnitzel	12.335102	-6.8083363	comment	5.0	19.0	1513689028	-10.442693
15998892	Ruby 2.0 Works Hard So You Can Be La	Ruby 2.0 Works Hard So You Can Be Lazy (2013)	thibaut_barrere	12.602767	-7.040162	story	5.0	63.0	1514110115	12.382566
16004504	See, expressive I totally get. Absol	See, expressive I totally get. Absolutely. But elegance? Don’t understand that one.Ruby is a cluster of inelegant and over concise cludges in the name of expressivity. The fact that it was once most famous for one of the most inelegant hacks - monkey patching - as a core feature speaks to that.So I totally understand that it’s quick, it’s expressive, and it’s easy to prototype in. Agreed. It’s lost a lot of it’s shine there now but it’s all still true.But elegant? It’s concise, not elegant.	abritinthebay	12.538658	-7.0895734	comment	5.0	36.0	1514217108	12.390635
16054289	I only scanned it, and it seems like	"I only scanned it, and it seems like a solid book; however, I found that PHP is an odd choice for CompSci I book. From the book:> PHP is a dirty, ugly language held together by duct tape, cracked asbestos-filled spackle
and sadness (http://phpsadness.com/).  It is the cockroach of languages:  it is invasive
and it is a survivor.  It is a hydra; rewrite one PHP app and two more pop up.  It is
much maligned and a source of ridicule.  It is the source of hundreds of bad practices,
thousands of bad programmers, millions of bugs and an infinite abyss of security holes
and vulnerabilities.  It is a language that was born in the wild and raised in the darkness
by two schizophrenic monkeys.  But its got character; and in this world, that’s enough."	johannsg	12.766363	-6.646276	comment	5.0	23.0	1514919263	10.331123
16143426	It’s a bit unfortunate that Elm will	It’s a bit unfortunate that Elm will always be left out of lists like this.Yes it’s a different language that compiles to JavaScript, but unlike other languages that do this, Elm exists solely to excel at front-end web development.Ironically, that Redux and React equivalents are some of the “batteries included” in Elm can make it harder to pitch because at first it seems like you’d have to add that stuff in.	zachrose	12.984398	-7.594772	comment	5.0	47.0	1515921004	-12.750245
16160194	Author here, ask me any questions yo	Author here, ask me any questions you might have. We used this internally to convert a few repos. It's not perfect but gives you a head start for converting to TS.I also wrote about our experience with TypeScript at Lyft if you're interested:https://eng.lyft.com/typescript-at-lyft-64f0702346ea	mohsen1	12.385462	-6.714703	comment	5.0	16.0	1516124917	-10.425425
16162796	I almost wrote a similar comment, bu	"I almost wrote a similar comment, but I figured I would be downvoted. I realize it sounds cynical, but why should this effort be made for PHP? I loved PHP back in the year 2000, and at that time it had advantages that no other language had, but those days are long gone. There are many better languages now. I wrote about this in my essay ""PHP is obsolete"" and there was a fairly good conversation about that essay on Hacker News:https://news.ycombinator.com/item?id=9598309"	lkrubner	12.76072	-6.6405506	comment	5.0	29.0	1516138012	10.34482
16197563	When I did my degree, the older stud	When I did my degree, the older students were forbidden to use any language from the Lisp, ML or Prolog families for the compiler design assignment as that would be too easy.As Java was just released by the time my class got to do the same assignment, we ended up using Java with JavaCC and JJTree.While not as easy as Lisp, ML or Prolog, it was still much easier than the Jurassic yacc/lex that still prevails in some circles.	pjmlp	13.102864	-7.2923565	comment	5.0	21.0	1516531548	-12.498939
16213278	Yeah, and they've promised to work o	Yeah, and they've promised to work on performance for ages now with almost no improvement.I run a very small installation with only a couple of projects and some hundred issues on a 4 GB machine. It eats up 2 GB (sigh!!!) - and often still feels extremely slow. I mean 2 Gigabytes!! What for? That's a multitude of all the data I have in the DB there. And then it's not even used for something useful like caching. Some pages take several seconds to load. As a developer that's totally unacceptable to me.Is ruby really such a mess that it's impossible to run an app with reasonable memory consumption?	mh-cx	12.6342125	-7.0017347	comment	5.0	29.0	1516713075	12.342576
16213308	I spent a huge amount of time in my 	"I spent a huge amount of time in my 20's writing Perl 4 & 5 scripts.  Even though I no longer use Perl, I still feel nostalgic about it.That said, I can't find any reason to pick up Perl 6 and start learning it.  With so many other useful and interesting languages out there: Python, Elixir, Elm, Rust, etc... what appeal should Perl 6 have to the masses these days?Is anyone jumping into Perl 6 like they did with Ruby a decade ago and saying, ""Wow, programming just got fun again""?I'd love to see a Perl 6 breakthrough, but honestly it feels like those attempts to keep BeOS going... too little, too late.  Its time has passed."	crusso	12.357275	-7.0321684	comment	5.0	20.0	1516713418	13.164275
16221053	Why I'm excited about Crystal in 201	Why I'm excited about Crystal in 2018	sam0x17	12.635038	-7.2708793	story	5.0	14.0	1516779576	-11.212077
16298434	Is Rails Still Popular in 2018?	Is Rails Still Popular in 2018?	joelbluminator	12.760206	-6.9374313	story	5.0	20.0	1517677930	12.348844
16316408	If you're interested in ReasonML, yo	If you're interested in ReasonML, you may also be interested in Elm http://elm-lang.org/.Coming from JavaScript / React / Redux / Flow, ReasonML initially looked more familiar, but I still found Elm easier to pick up. Elm has a more unified feel. ReasonML read to me as an assemblage of components — each of them high quality, and expertly integrated, but it still felt like more different pieces all to learn at once. YMMV.OTOH, you can't (currently) use Elm to write a native mobile app.	osteele	12.897678	-6.5185995	comment	5.0	38.0	1517927781	8.531215
16345494	Partisan: Enabling Cloud-Scale Erlan	Partisan: Enabling Cloud-Scale Erlang Applications	cmeiklejohn	12.544964	-7.507811	story	5.0	88.0	1518229704	-9.35106
16371074	I'm only 32 but that's kind of where	I'm only 32 but that's kind of where I'm at right now too.Mastered Objective-C and Mac & iOS development 10 years ago, now it's all Swift and nobody's really hiring for iOS devs in my area (Chicago suburbs), and nobody's hiring for native Mac developers anywhere, period. And all the best practices in iOS have changed drastically since then, too, in terms of both coding and UX.Learned Ruby on Rails 8 years ago, but it changed so fast that most of what I knew about it has become irrelevant, and I never was very good at Rails in the first place.All the best practices I've learned in HTML/CSS/JS/jQuery/Less/Sass are becoming outdated pretty quickly.Spent 5 years mastering Clojure but it's obviously very niche and I don't have any experience with big data or anything else Clojure is usually use	_diyu	12.646885	-6.806981	comment	5.0	34.0	1518558206	1.8623
16414368	> First, Elm has the natural predict	> First, Elm has the natural predictability of a pure functional language; when you write Elm, the compiler forces you to consider every case.I'm a beginner with functional languages, but isn't the type system completely orthogonal to the fact that Elm is a functional language?	klez	12.959253	-7.6664305	comment	5.0	25.0	1519062765	-12.753744
16414785	The communities for languages like E	"The communities for languages like Elm are definitely smaller, but they're also ""passion languages"", if that makes sense. Nobody is learning elm because they've been or feel forced to (like you might with React, eg) or because they needed to maintain a legacy codebase at an old job or something. They're learning it because they're interested/like it, etc. So when it comes time to hire you have a small(er) pool of candidates than a react position might draw but the candidates are going to be people who've played around with Elm and enjoyed it and want to get a job writing Elm.I'm kinda surprised more companies don't take the risk - its not like these are bad languages, either. There's still a huge chunk people (in terms of absolute number, not portion of total devs of course) out there play"	s4vi0r	13.000584	-7.684049	comment	5.0	44.0	1519066317	-12.77162
16436840	Could you give an example code snipp	"Could you give an example code snippet that ""reads more naturally"" in Ruby than in Python?I'm an amateur programmer (Python, JS) and I have been wondering for a long time if there is a language more readable than python."	glaberficken	12.466435	-7.034988	comment	5.0	19.0	1519298837	12.376667
16454782	Ruby 2.6.0-preview1 Released	Ruby 2.6.0-preview1 Released	petercooper	12.647189	-7.024501	story	5.0	173.0	1519500138	12.407982
16500954	Php-parser written in golang v0.3 is	Php-parser written in golang v0.3 is released	z7zmey	12.677025	-6.7310243	story	5.0	46.0	1519994391	10.291371
16507703	PHP: a fractal of bad design (2012)	PHP: a fractal of bad design (2012)	kilroy123	12.81976	-6.7067633	story	5.0	15.0	1520048280	10.457836
16526440	No need for the (2008) thing in the 	No need for the (2008) thing in the title.  This is actually a new article from February 2018.  I had an old post there, but completely re-wrote it last week, keeping only the title and URL.Thought you guys might like a programming example that I edited out of the article:Back in 2004, I wanted to be a great Ruby programmer.  I had dabbled, but wanted to accelerate my learning to the expert level.So I called Tony Robbins' company, and signed up for a personal coach.  We had a phone call once per week,  to help me stay on track achieve my goals.On the very first call, when I said I wanted to be a great Ruby programmer, he asked, “What does that look like?  How will you know you're great?”Whoa. Hmm. I had never actually defined it. He was waiting for an answer, so I picked something.  I said	sivers	12.622976	-7.054737	comment	5.0	18.0	1520303563	12.429933
16540130	Can anyone actually explain to me th	Can anyone actually explain to me the _exact_ differences between Elixir and Erlang?What does Elixir offer me that Erlang does not on a LANGUAGE level?	mabufo	12.639367	-7.495758	comment	5.0	15.0	1520458513	12.932515
16571845	Ask HN: Are programmers afraid of ne	Ask HN: Are programmers afraid of new syntax?	rs86	12.677444	-7.390873	story	5.0	9.0	1520890352	12.840425
16619277	Great screencast, Alex!The best tool	Great screencast, Alex!The best tools are the ones you don’t even notice, and Elixir is an absolute pleasure. You get to focus on the problem with little ceremony. Chat is a really interesting application of Channels, too.It’s especially interesting to me as my team and I are working on a hosted API called Chatkit that makes it equally easy to add real-time chat to your applications, no matter what technology you’re using: https://pusher.com/chatkitIn addition to basic chat data, we also manage, “Who’s online”, typing indicators, rich media... And moreI highlight those features in particular because I am especially curious what that would look like with Elixir and Pheonix? Managing chat data, especially at scale is quite a hairy problem.By the way, it simple/clean to subscribe to Elixir Ch	bookercodes	12.755359	-7.1315346	comment	5.0	15.0	1521474266	12.724017
16725988	What the.. PHP has a built-in server	What the.. PHP has a built-in server now?	lai	12.756781	-6.5620146	comment	5.0	17.0	1522542811	10.265533
16726039	Good article, and hopefully contrast	"Good article, and hopefully contrasts today's php with yesterday's php.To me, it's no worse than any other dynamically typed language now.  And arguably better than similar peers because the barrier to entry is so low.FastCGI and user space caching like apcu mitigate the old ""one process per request"" complaint.It's a true workhorse.  Sure, node.js and Golang have advantages, but so does modern php."	tyingq	12.71783	-6.631838	comment	5.0	42.0	1522543713	10.284438
16726046	What would you say are the advantage	What would you say are the advantages to php over node, python, or golang?	qudat	12.688502	-6.6704626	comment	5.0	33.0	1522543860	10.268985
16757407	I agree that it is a language worth 	I agree that it is a language worth understanding.  However the OO model of Ruby is identical.  Without the drawbacks of being an image based language.  So I'd suggest learning that instead.For those who don't know what I am talking about, there are several families of languages where the state of your program is kept within an image.  The upside of this is that you can integrate everything together in a really neat way and build neat tooling with introspection.  The downside is that you have just made what's going on not visible from the filesystem, and have to replace all of the tooling that you're used to.  You know, things like your favorite editor, command line programs, source control...If you switch languages regularly (which most developers do in my experience), being able to use y	btilly	12.579609	-7.037249	comment	5.0	30.0	1522865890	12.375223
21053366	Crystal 0.31	Crystal 0.31	ksec	12.647442	-7.2652297	story	5.0	140.0	1569271298	-11.119135
21077006	So, the affected function, in includ	"So, the affected function, in includes/vb5/frontend/controller/bbcode.php was:    function evalCode($code) {
        ob_start();
        eval($code);
        $output = ob_get_contents();
        ob_end_clean();
        return $output;
    }

... So anyone who looks at a codebase for eval would have found this. There is no doubt in my mind that when some people have claimed that this has been around for years... That it has definitely been around for years.And as the fix is:    // comment out. idk what it breaks but it's a fix for now
    //eval($code);

I don't think anyone even knows what the hell that eval was doing there in the first place."	shakna	12.57382	-6.638699	comment	5.0	15.0	1569457624	10.176805
21104327	>for a long while [PHP] was the only	">for a long while [PHP] was the only viable language for developing web applications.That is not what I remember. CGI existed before PHP (1994), and was used extensively for web apps (ebay still appears to use it to this day). Also, mod_perl and Java Servlets were introduced around the same time, circa 1996, so I don't think it's correct to say PHP had a monopoly on web apps ""for a long while""."	javajosh	12.691936	-6.5981517	comment	5.0	26.0	1569719824	10.273232
21180919	Its not dead, but how much new code 	Its not dead, but how much new code is being written in Perl? I generally measure th health of a language by how much contemporary use it gets.I used to write Perl but I do not take it out of the tool chest anymore and I see very few Perl codebases in the OSS world.	voidfunc	12.336855	-7.0255017	comment	5.0	16.0	1570457187	13.1916065
21206482	I don't doubt that you can learn Elm	"I don't doubt that you can learn Elm quickly. But how many good developers want to use what might be an obscure technology in a few years.From the Study of Programming Languages Not to Learn in 2019: ""the five languages not to learn in 2019 are Elm, CoffeeScript, Erlang, Lua, and Perl."""	vlangber	12.998346	-7.684809	comment	5.0	31.0	1570646552	-12.75546
21242204	We’re now considering switching from	We’re now considering switching from coffeescript to ES6 (or maybe also Typescript). But coffeescript is seeing a bit of a revival, and I’m starting to wonder if we should stick with it?? Tooling seems a bit behind and also lacking things like tree shaking etc (??). But coffeescript is so clean and fun...Any tips/thoughts??	gingerlime	12.414915	-6.550194	comment	5.0	21.0	1570993545	-10.526631
21282036	> Not to mention it's much faster th	> Not to mention it's much faster than Ruby or Python or PHP... In some cases it's faster than Javascript although JS and Erlang/Elixir are, on average, tied on performance.By what metric? Phoenix on Elixir doesn't perform any better than Ruby and a similarly lightweight framework like Roda: https://www.techempower.com/benchmarks/#section=data-r18&hw=...NodeJS is also much faster than Elixir in other circumstances thanks to the V8 JIT.Elixir's and Erlang's strengths over other dynamic languages aren't really performance. It's mostly just that Phoenix performs much better than Rails.	jashmatthews	12.716143	-7.2591896	comment	5.0	42.0	1571320421	12.762587
21310614	There's one very important thing tha	There's one very important thing that people miss when they mention Elm vs PureScript (or others) which bothers me.Here's my message: Elm is playing the JS world's game (obeying the rules) and it's winning it!- you can take a JS dev and they'll be productive in two weeks in Elm- the compiled code will be smaller than react's- compilation time is less than in webpack (and compiler's reaction is under 0.2 secs most of the time)- performance of your app is better- no runtime exceptionsPureScript and others, unfortunately (at least in many cases), take a different direction: they don't play the game at all, staying in their own, very different one. But hey, they have type-classes!	k_bx	12.974628	-7.6365647	comment	5.0	29.0	1571651964	-12.743196
21370288	I'm sure a lot of PHP 7.0 installati	I'm sure a lot of PHP 7.0 installations are still in production and will not receive a patch...	thesorrow	12.770873	-6.653054	comment	5.0	36.0	1572190001	10.368445
21387827	Huh, is SWI Prolog having a moment?I	Huh, is SWI Prolog having a moment?I had always heard of Prolog as being obscure and overly academic. It's popped up a little bit recently however - the last place I  heard of it in use is in the recently launched TerminusDB https://github.com/terminusdb?language=prolog	padraic7a	13.146365	-7.2941422	comment	5.0	44.0	1572360895	-12.49869
21431991	Having worked with Erlang for few ye	"Having worked with Erlang for few years. I still don't understand the new hype behind it. 
Ok, the Beam VM have a lot of good ideas. But I think that API of OTP and the language itself do not help to make concise and maintainable code. 
And you're pretty much on your own about tooling. I really think that even if you can achieve good performance/scalability in theory, in practice your team become less productive."	kiwee	12.551408	-7.49543	comment	5.0	16.0	1572752590	-8.799665
21432546	Why do people program new projects i	Why do people program new projects in Erlang as opposed to Elixir? Especially when it’s a web project and Elixir has Phoenix?	icedchocolate	12.640828	-7.4809055	comment	5.0	17.0	1572763498	12.934736
21486788	How would a Rails app be impacted by	How would a Rails app be impacted by this? How would you create one-to-many, or many-to-many relationships?I'm sorry if this question sounds silly, but I've never heard this line of reasoning before and I'm fascinated by it.	amingilani	12.83179	-6.817586	comment	5.0	18.0	1573247349	12.324816
21494151	When I started programming a few yea	"When I started programming a few years back, I was told that PHP is legacy tech and a terrible language I should avoid like a plague. After years of battling with Node.js on the backend, I took a closer look at modern PHP and the Laravel framework and I was amazed by how good the developer experience was. The language itself feels like a lite version of Java. I believe everyone starting on web development should know PHP. It's hugely deployed, it has a very mature and rich ecosystem and it's a great language to build your side project/business without spending your time on meaningless tasks. Don't be driven by FOMO like I was, there's no such thing as a ""perfect programming language"". Every language has it's quirks and that's fine. PHP might be old and boring but it helps you get things do"	yagodragon	12.729538	-6.62941	comment	5.0	57.0	1573331541	10.311817
21508679	Is it officially appropriate to talk	Is it officially appropriate to talk about Perl in the past tense?	ianai	12.32958	-7.0323906	comment	5.0	25.0	1573504961	-11.962943
21543948	Using the clpb library [0]:  solutio	"Using the clpb library [0]:  solution([A1,A2,A3,A4,A5,A6]) :-
        sat(A1 =:= A2*A3*A4*A5*A6),
        sat(A2 =:= ~(A3+A4+A5+A6)),
        sat(A3 =:= A1*A2),
        sat(A4 =:= A1+A2+A3),
        sat(A5 =:= ~(A1+A2+A3+A4)),
        sat(A6 =:= ~(A1+A2+A3+A4+A5)).

[0] https://www.metalevel.at/prolog/puzzles"	tephra	13.1283865	-7.3027906	comment	5.0	17.0	1573816214	12.9216385
21570706	Eh, that's not a great example. It c	"Eh, that's not a great example. It can be hard to appreciate the simplicity of PHP when one's fully bought into the stockholm syndrome of another language/framework :)Consider this: a hello world in PHP requires no knowledge of programming whatsoever: a file saying ""hello world"" is enough to get the text to show on a browser. Having two different pages requires no knowledge of if statements, nor of 404 handling.On top of that, PHP silently manages a lot of plumbing for you: it will also do caching and streaming out of the box and it won't crash the server due to OS ulimit errors when you have a high number of concurrent requests hitting the same file.Heck, you could stream result sets from a database to a streaming HTML document in like a dozen lines of PHP with no libraries 10 years ago. "	lhorie	12.712999	-6.537958	comment	5.0	24.0	1574138812	10.209922
21574011	Interesting that CoffeeScript was us	Interesting that CoffeeScript was used. I’m not a front end developer, but I’ve always liked its syntax. JavaScript has picked up many (if not more) features of it as of today, but I still find CoffeeScript code more readable.	haolez	12.409939	-6.5680847	comment	5.0	19.0	1574177993	-10.532167
21584200	Prolog really blows my mind.I recent	"Prolog really blows my mind.I recently released a match-burning logic puzzle app[1] based on a mensa calendar puzzle I saw and it took me a while to develop an (imperfect) solver algorithm in C#. Someone then told me that the general class of these puzzles is called ""Thermometer Puzzles"" and that there are a ton of Prolog-based solvers[2] out there.This class of puzzle is not mentioned in the article, but I'm truly amazed at how versatile Prolog is at solving logic puzzles with so little code. I'm guessing the Prolog compiler is super complex compared to, say, a C compiler to be able to give developers that much power.[1] https://play.google.com/store/apps/details?id=com.umvirate.e...[2] https://github.com/zettca/ist.lp.thermometers/blob/master/th..."	umvi	13.140109	-7.2905245	comment	5.0	30.0	1574260310	-12.452713
21633002	Ask HN: When does it make sense to c	Ask HN: When does it make sense to complete rebuild a web application?	nanope	12.757685	-6.6219497	story	5.0	7.0	1574717310	10.321636
21656772	I have been waiting for a strongly t	I have been waiting for a strongly typed mainstream high level language for a long time (TypeScript doesn't count because all type information is stripped during runtime). PHP still has a lot of cruft that prevents me from using it in my projects, but the recent updates seem like a step in the right direction. Hope that by PHP 8 the language will have deprecated more of the bad stuff.	m712	12.4931555	-6.768582	comment	5.0	36.0	1574944179	10.25896
21657689	The most interesting thing about PHP	The most interesting thing about PHP is it is, AFAIK, the most community-driven language today. Go, Python and JavaScript are all under heavy influence of Google, C#, VB.NET and TypeScript is Microsoft's turf, Java is Oracle's, Rust and WebAssembly - Mozilla's.С and С++ are holding their grounds, but they are more and more niche today. Facebook tried to domesticate PHP, but failed spectacularly. So it looks like PHP is most democratic and liberal programming language of today) I am glad it's getting steadily ahead.	SergeAx	12.747102	-6.654062	comment	5.0	38.0	1574952470	10.304815
21658280	PHP's value proposition has always b	PHP's value proposition has always been one thing - ease of deployment. Seriously, all you need is one install command, one command to start the services, one to git clone the files and one for certbot. And you have a fully functional deployment ready in a single script that can be deployed at scale.No other language can even come close.	quantummkv	12.760825	-6.6063147	comment	5.0	20.0	1574957374	10.318095
21662494	LogicBlox – Datalog REPL Tutorial	LogicBlox – Datalog REPL Tutorial	macmac	13.180983	-7.044797	story	5.0	64.0	1575008796	5.74423
21665123	We Rebuilt Fathom Analytics from the	We Rebuilt Fathom Analytics from the ground up and moved to Laravel Vapor	JackWritesCode	12.8177595	-6.6586533	story	5.0	35.0	1575043572	10.37218
21692558	Agner Krarup Erlang	Agner Krarup Erlang	brudgers	12.516764	-7.4711766	story	5.0	69.0	1575383929	12.915778
21738454	That's a very justified question!In 	That's a very justified question!In my opinion, Datalog or — more generally — Prolog is where many querying APIs will eventually arrive, because this syntax has many nice advantages: It is very convenient, expressive and readable, programs and queries can be easily parsed and analyzed with Prolog's built-in mechanisms, there is an ISO standard for it etc.When semantic web formalisms were discussed, Prolog was sometimes mentioned. However, it is so far not very widely used as a querying or modeling language even for semantic web applications. Recent advances in Prolog implementations may increase the uptake of this syntax.Also, public perception of Datalog and Prolog lags somewhat behind recent developments in these areas and what these technologies can actually do or what they even are. Fo	triska	13.164529	-7.1857	comment	5.0	38.0	1575840540	-12.4570265
39074903	PHP: A fractal of bad design (2012)	PHP: A fractal of bad design (2012)	nateb2022	12.820923	-6.704909	story	5.0	16.0	1705804022	10.492453
39083736	Gem adds support for creating state 	Gem adds support for creating state machines for attributes on any Ruby class	mooreds	12.524313	-6.984107	story	5.0	53.0	1705876157	12.308359
39100367	Well, if you're using Ruby in the fi	Well, if you're using Ruby in the first place, you're probably not the kind of person who cares very much about how much the tooling can help you, because even the best-in-class tools are primitive compared to what you get for other languages.	emodendroket	12.601074	-7.030314	comment	5.0	30.0	1705993029	12.375572
39127598	Deno Deploy dropped from 35 regions 	Deno Deploy dropped from 35 regions to just 12	cetinsert	12.528652	-6.460695	story	5.0	27.0	1706173162	-11.002865
39208450	As a Sega nerd and a Prolog nerd, th	As a Sega nerd and a Prolog nerd, this is insanely cool to me. Even if it seems like the Prolog relationship might be some kind of marketing gimmick - it's not clear to me to what extent the games really are written in Prolog.	wk_end	13.15097	-7.297506	comment	5.0	35.0	1706730649	-12.4917965
39286669	This very much depends on what you a	This very much depends on what you are building and how experienced you are.If you just want a few pages, no need for background workers or database migrations, PHP is still the king. You download one of many single-executable LAMP servers, and start writing your index.php. Deploy? Just copy files to server. Zero downtime deploy? Copy files to server and use symlink to atomically switch versions. Dependencies? Composer (package manager) is a single-file script, you can place it wherever. Pain only begins when you want to break away from file-based routing, or need custom .htaccess and nginx.conf, or want to isolate components, or need Redis and cron for background jobs.On NextJS side, I knew a few people who wanted to start their career with it and the experience wasn't smooth. You install	pzmarzly	12.645605	-6.5146356	comment	5.0	36.0	1707300572	10.242349
39301348	I will work for free on your Ruby pr	I will work for free on your Ruby project	dushan01	12.638378	-7.039263	story	5.0	9.0	1707396674	12.36435
39309559	Disclaimer: Elixir is extremely prod	"Disclaimer: Elixir is extremely productive, Phoenix is outstanding, the community is world-class, and as a result of the Erlang VM / OTP / Beam you can remove whole parts of your traditional webstack. If you haven't tried it I cannot recommend it enough.But!As a long-time Elixir Developer who has gladly used it to bootstrap many applications and companies, I have to say I think this article is actively harmful to the community.It's an extremely thinly veiled sales pitch for their ""Petal Pro"" paid boilerplate.At the same time, it does nothing to address the tradeoffs of certain features like Live View. Which for the record is a poor fit if your app suffers from client-side latency or requires any kind of offline-enabled features."	bnchrch	12.785486	-7.2044773	comment	5.0	18.0	1707437020	-10.896333
39325248	Ruby on the Apple II (2019) [video]	Ruby on the Apple II (2019) [video]	nf3	12.652804	-7.034259	story	5.0	68.0	1707562968	12.348798
17891571	Every time - every single time - I h	Every time - every single time - I have started building an application using Sinatra I have regretted not building it in Rails from the start.I totally understand the desire for a minimal and clean codebase. If I’m not going to use 80% of Rails, why would include it, right?But in practice, I have found there is basically zero cost to using Rails instead.	matthewmacleod	12.748356	-6.9286556	comment	5.0	21.0	1535805662	12.355059
17891785	Disclaimer: I've worked with but dis	Disclaimer: I've worked with but dislike ruby and rails in comparison to other choices (whether language or ruby framework).IMO people are still using rails because a bunch of orgs moved to it from Java years ago, or started with it after some successful hackathon. It's in wide demand because a large number of orgs mindlessly (or mindfully) chose it long ago. Basically all enterprise/large company apps I've seen have been in either Java or Rails. Some places are still using COBOL. Some places are still maintaining/starting codebases in COBOL. I assume that people will be able to make this same argument about NodeJS in ~2-5 years.Also, the the point about micro-frameworks being bad being made in the comments because you eventually re-implement rails seems to be wrong or badly articulated --	hardwaresofton	12.716528	-6.859773	comment	5.0	25.0	1535809252	12.328156
17895819	As somebody migrating a React codeba	As somebody migrating a React codebase from JS to TS, I can't believe how popular TS is.It seems like something that only exists due to the popularity of Angular, where I can only assume the experience is significantly better than with React.The type system is frankly disappointing, and the errors the compiler spits out at you (besides the most obvious ones) are almost always useless or gibberish and at times even more harmful than helpful.It's better than nothing I guess, but I can't help but feel extremely underwhelmed with it given how many people use it. Are all of the people in this thread Angular developers or something?	s4vi0r	12.562595	-6.5557218	comment	5.0	19.0	1535867920	8.3119955
17906058	Erlang is a very ugly language with 	Erlang is a very ugly language with brutalist, esoteric syntax. If Erlang adopted a C-like syntax (like nearly every other successfuly language in the world) it would see much wider adoption.	debacle	12.558409	-7.5285954	comment	5.0	15.0	1536025781	12.931566
17976932	This is really interesting, I've see	This is really interesting, I've seen this pattern somewhere. IMHO, CoffeeScript had a really similar effect on the development of JavaScript / EcmaScript, but then, it quickly started going extinct. Same with IO.js vs. Node.JS, which was eventually re-integrated into the main line.It's interesting how apparently sometimes you just need to step aside to break old conventions and demonstrate new capabilities, but eventually, you'll need the support of the community to pull it through: Plus, it's always a gamble. Python barely made it over to v3 after 10 years. I'm not sure if Perl will ever cross the gap or if Perl 6 fragmented the community for good.Just some random thoughts though on the dynamics of open source, I'm glad for the experience of PHP at the beginning of my career, but I would	endymi0n	12.391322	-6.676315	comment	5.0	17.0	1536826891	13.11251
18025788	Here's how I interpret the author's 	"Here's how I interpret the author's points:1. Rails isn't cool.2. If you spend enough time hunting around, you can find Node libraries that, collectively, do everything Rails does out of the box.3. Node is ""cool.""4. A third party product which has nothing to do with Rails for building native iOS apps in Ruby is no longer actively maintained.5. Write once run anywhere, but this time it'll really work!"	aaronbrethorst	12.739668	-6.921481	comment	5.0	21.0	1537377251	12.35795
18025764	Maybe they can improve the awful per	"Maybe they can improve the awful performance. They keep denying it's due to their site being in Ruby, but I don't buy it.
Rewrite it in Go already."	devstevedev	12.621358	-7.0406065	comment	5.0	16.0	1537377105	12.3610325
18072028	When did you learn rails? Would you 	When did you learn rails? Would you recommend learning it today?	peacetreefrog	12.738328	-6.952722	comment	5.0	21.0	1537926213	12.35149
18118349	Sorry. We needed to prioritize to ge	"Sorry. We needed to prioritize to get this release out because it's already been snowballing for about a year.We actually did have ""TypeScript support"" on a nice-to-have list for this two week sprint but unfortunately didn't get to it:https://i.imgur.com/l0CpdZy.png (I promise I'm not making this up :-)I'm confident we'll ship it by the end of this year though."	danabramov	12.380977	-6.8097363	comment	5.0	28.0	1538446741	-10.484665
18154307	I recently used prolog for a complic	I recently used prolog for a complicated binary reverse-engineering task: bit packing. Likewise prolog is perfect for compilation.https://savannah.gnu.org/forum/forum.php?forum_id=9203In fact it's a better prolog, picat, which also allows pretty straightforward statements, like loops, and has solver support.http://picat-lang.org/	rurban	13.144926	-7.2958617	comment	5.0	18.0	1538818578	-12.481431
18206227	...but what on earth is it?The post 	...but what on earth is it?The post says nothing about what it is.The linked page says nothing about what it is.I work full time in the Ruby ecosystem and I have no idea what your project is.How can people forget to say what their project is at all?	chrisseaton	12.719836	-6.9408484	comment	5.0	19.0	1539400943	12.359013
18213832	Congrats on the release. As someone 	Congrats on the release. As someone whose day job is elixir but whose side project passion right now is rust, a high performance, strongly typed, actor model language like Pony is right up my alley.My one hang up right now is the other half of the elixir magic: OTP. In particular supervision trees and genservers.While Pony has an actor model and message passing for concurrency, I wasn't able to find anything OTP-like. What's more, I read some things that it was even impossible to express in the language since there's no mechanism to block and wait for a message. Is this true? Are there any plans down the line for support of this?	losvedir	12.502315	-7.4929247	comment	5.0	23.0	1539536435	12.91721
18214205	I hear a lot of hype about superviso	I hear a lot of hype about supervisor trees from Erlang folks, but very little description about what they do or why they’re useful. Are they applicable to other languages? Could someone point me to a good resource for someone who doesn’t know Erlang or Elixir?	weberc2	12.538868	-7.5171967	comment	5.0	15.0	1539540777	12.87731
18214639	I am extremely skeptical of the sour	I am extremely skeptical of the source this article cites, which claims that 79% of the top 10 million sites use PHP. See https://w3techs.com/technologies/overview/programming_langua....This is completely out of line with my experience, job listings, and all other sources I can find. See https://en.wikipedia.org/wiki/Programming_languages_used_in_... and https://www.codingdojo.com/blog/7-most-in-demand-programming...  and https://www.tiobe.com/tiobe-index/	ashelmire	12.755898	-6.641084	comment	5.0	17.0	1539544981	10.34413
18226002	I miss DabbleDB greatly.I once made 	"I miss DabbleDB greatly.I once made a real meals-and-visits schedule signup sheet app for a sick relative (dozens of folks signing up for slots over days, etc.) in about 20 minutes, including learning a bunch about the tool.Ultimately it ""just"" made CRUD apps, but it made the process amazingly fast.  The equivalent of updating a Django model and view was usually a click or two with no waiting, and the only typing was to name things."	jcdreads	12.830873	-6.51104	comment	5.0	15.0	1539658151	10.11037
18229182	One intuition I’ve had while learnin	One intuition I’ve had while learning Elm is that it’s a fundamentally simpler language with a smaller number of concepts to learn than JavaScript.In this list of 33 JavaScript concepts, I count 11 that either do not exist in Elm or, like Object.assign, do not have an alternative to worry about:No reference typesNo type coercionNo == vs ===, although typeof has a simpler equivalentBasically all expressions and no statementsNo hoisting as suchNo prototypical inheritance or prototype chainNo Object.create, no destructive alternative to Object.assignNo factories or classes as suchNo inheritance or polymorphismNo design patterns as such, though you could argue that abstract algebra or category theory are the replacementsNo this, call, bind, or applyThe finer points of these are somewhat debata	zachrose	12.955772	-7.647653	comment	5.0	19.0	1539696778	-12.71848
18233373	Lisprolog – Interpreter for a Simple	Lisprolog – Interpreter for a Simple Lisp, Written in Prolog	YeGoblynQueenne	13.137912	-7.3015265	story	5.0	52.0	1539724787	-12.482052
18279685	BTW, anyone here used ReastReason, B	BTW, anyone here used ReastReason, BuckleScript is it? I've been meaning to look into it but don't have a sense of the payoff. I read that it can coexist which is a great feature. Wonder how it compares to a TypeScript workflow.	karmakaze	12.366372	-6.797069	comment	5.0	17.0	1540252807	-10.502168
18310557	- Ecto is still a climbing hill for 	- Ecto is still a climbing hill for me. In fact I'm currently trying to warp my head around changesets and associations.- Same for GenStage. I wanted to use them for workers pulling from an episodic queue but the docs with the emphasis on consumers pulling multiple events at once from a never ending stream didn't really speak to me. Tailoring to my usage looked verbose: storing demand etc. I'll have to revisit when I'm better at Elixir.- I still think caching should be part of Ecto in some way, at least in the docs.- I would still like more straightforward template inheritance in Phoenix (think Jinja2, Twig).Excited for the future releases of Phoenix 1.4 and Ecto 3.	conradfr	12.608672	-7.202171	comment	5.0	15.0	1540570278	12.79631
18373692	> After a brief exposure, however, m	"> After a brief exposure, however, many programmers fail to appreciate its full breadth and never use it again.Yeah.  That was me.  A friend of mine tried to clue me in to Prolog about twenty years ago and I didn't ""get it"".Recently I revisited it and realized that about 1/3 of my working career was wasted by not using Prolog.My strong suggestion to any programmers reading this: learn and use Prolog."	carapace	13.1476965	-7.2938395	comment	5.0	49.0	1541297808	-12.482537
18461574	I think going deep on something is t	"I think going deep on something is the key. It lets you keep learning without getting bored and needing to jump ship. One of my pet peeves is how programmers think ""keep learning"" means ""learn another programming language"". Not that that's bad, but after the twentieth or so, . . . instead try learning something ""adjacent"" to what you enjoy & do well. For example for a Ruby+JS web developer: read some HTTP RFCs, play around with SSL certificates, learn some admin/devops skills, get really familiar with some part of modern JS/HTML like your framework or build system or HTML5 canvas or video, read the Rails Github issues list and fix a couple bugs, try writing your own gem, try writing your own gem with some C/Rust implementation, go fix all the n+1 query problems in your app, learn how to us"	pjungwir	12.73289	-6.9162493	comment	5.0	17.0	1542304826	12.364999
18537836	A great way to look into the future 	A great way to look into the future of languages is checking how many people is learning it now compared to the last few years, a great tool for that is google trends and things don't look good for PHP: https://trends.google.com/trends/explore?date=all&geo=US&q=p...	mattigames	12.737605	-6.6516294	comment	5.0	22.0	1543275307	10.373503
18538190	Facebook forked PHP to make Hack to 	Facebook forked PHP to make Hack to try and make PHP usable.Yahoo is yahoo.Wikipedia wouldn't have the resources to change anything.Google has a wiki page for their developers telling them to never ever use PHP for any google project.	baroffoos	12.783547	-6.613469	comment	5.0	27.0	1543278737	2.951792
18558527	Agree with the sentiment behind a lo	Agree with the sentiment behind a lot of the comments above. Elixir/Erlang are awesome and there is a lot of vitality in those communities at the moment (more in Elixir perhaps).Elixir is definitely a darling of HN but there are some areas where there are some shortcomings in my point of view:- A lot of people seem to love Elixir macros but I actually think that they result in a lot of compile time magic and make the code difficult to debug/read. Macros make code easy to write but supremely difficult to behind-the-scenes-understand and debug. The code that you write is transformed into something very different when you run it! Also every major Elixir library brings its own special macros which is a pain. Erlang OTOH does not use user defined code transformations (i.e. macros) so much so th	sidkshatriya	12.61985	-7.479949	comment	5.0	21.0	1543473623	12.927419
18559492	Honestly, if you use PHP you should 	Honestly, if you use PHP you should expect sadness	lbj	12.7723675	-6.6440954	comment	5.0	20.0	1543491322	10.343309
18562655	> In addition to those, I found I re	"> In addition to those, I found I really missed a REPL console and moreso something like byebug that RoR has. For those that aren't familiar, byebug lets you put the command ""byebug"" anywhere in your code that opens an in context REPL. It's enormously helpful for hard to figure out bugs.This is like comparing apples and oranges, or at least, like comparing apples and apple-orange hybrids :)Just saying that Rails (RoR) has a command like byebug that opens an in-context REPL, seems to ignore the fact that compiled languages like Go catch many errors earlier, at compile time, so you don't even need an in-context REPL or a debugger to find those.Not saying that features like byebug have no use at all, of course."	vram22	12.609604	-7.0007067	comment	5.0	23.0	1543517182	12.349903
18627285	Are they ditching php? Webhosts have	Are they ditching php? Webhosts have the most to gain financially from a switch to node.js powered WordPress.	vezycash	12.700235	-6.5360603	comment	5.0	15.0	1544187775	10.273115
18633989	So, I sort of took that away from it	So, I sort of took that away from it, but there's stuff in the gist page like:> The default gist method in Mu re-dispatches to the perl method for defined invocants, and returns the type name in parenthesis for type object invocants. Many built-in classes override the case of instances to something more specific that may truncate output.And I have no idea how anyone that isn't already fluent in Perl 6 is expected to read that.EDIT: My point is mostly that it just seems... weird. Like, I get the animating idea of Haskell, even if I don't understand all of the concepts. Perl 6 just seems... alien. It's incredibly funky.	cwyers	12.326179	-7.059901	comment	5.0	21.0	1544244465	13.199362
18748913	PHP and WordpressHad to start over a	PHP and WordpressHad to start over at the bottom after alcohol addiction destroyed me.Landed a job working with WordPress and started having quite a bit of with it. Naturally I just HAD to start tinkering and learned PHP to write plugins and manipulate the hell out of it.PHP isn't all that bad and is actually pretty easy to pick up. My only gripe with it is that quite a bit of the libraries aren't on par with other languages I've used. For instance, PDF generation libraries aren't nearly as good as Ruby, .Net, heck even ColdFusion is better.Great thing about Wordpress is that thr plugin eco system makes stitching websites together a breeze. There is a plugin for almost anything.	thrownaway954	12.775316	-6.5712934	comment	5.0	18.0	1545605421	10.257625
18752826	This will be fun. I’m glad we now ha	This will be fun. I’m glad we now have some performance improvements to some common methods. For those considering playing with Ruby, you should! One thing I’m surprised not many has mentioned what makes ruby unique and awesome, BLOCKS!	stevev	12.606731	-7.031974	comment	5.0	22.0	1545669001	12.3825245
18778749	I'm a hardcore Ruby fan who moved to	I'm a hardcore Ruby fan who moved to Elixir and rarely writes/maintains Ruby code. The language grows on you and once you master it, there's nothing quite like it.You could argue this for other languages - But, I am an experienced programmer who has written production applications in quite a handful of major languages and frameworks out there. I've tried almost everything that trended on HN in the past years - Scala, NodeJS, Ruby, Python, GoLang, R, PHP, Java, and a handful more and I can tell you this - there's nothing quite like Elixir for me till date.These days, even for my consulting work, I use Elixir. It's almost as if I just push code and forget. (Except for watching out for security vulnerabilities, other regular audits). Everything isn't as green since it's a fairly new language,	neya	12.677206	-7.3780847	comment	5.0	47.0	1546024192	12.858564
18779004	Have you tried python/ Django?I have	Have you tried python/ Django?I haven't used elixir but I my productivity with Django is much bigger than when compared with other solutions like php, node, java/spring, c#.net etc.I am talking about good ol' traditional web apps, no fancy spa stuff where I can use Django in all its glory: cbvs, forms, admin, auth and the huge package ecosystem.Give it a try if you haven't, even just the Django tutorial should give you a hint of the productivity enchantment you'll have!	spapas82	12.688659	-7.42482	comment	5.0	26.0	1546026903	12.915204
18831740	> Now, I've barely tested Django, bu	"> Now, I've barely tested Django, but I would not go the python way unless you have a good (other) reason. Rails seems to have a much more developed web development community.Having used both Django and Rails extensively recently, I disagree. Maybe 5 years ago, yes.For two examples I ran into yesterday, check out https://github.com/rails/rails/issues/32790 and 
https://github.com/rails/rails/issues/31419which feature Rails Core simply taking a dump on widely requested features that some people need for more modern architectures. And a popular note from the second issue:> Django has had a mechanism like this for years, and it's a delight to work with — it feels like the right balance of indirection and simplicity."	arcticfox	12.786318	-6.645836	comment	5.0	16.0	1546698112	10.292744
18831372	> just use Django (or Rails)What do 	"> just use Django (or Rails)What do you mean by ""just use""? The OP seems to have a long experience and having had used Rails recently myself as a 20 years experience web developer, all I can say is stay away if you know the way web works and not doing it as a medium team size.You need to learn everything the rails way even if you know every moving parts of what makes a web site which can often get in the way and I can't live without googling every 30 minutes and I assume Django is similar.Why not recommend something like Koa which is for node.js but more modern than Express, even by the same author, and with TS and async/await it works well which is my main framework these days.You seem to like fat frameworks and ORM but those experience only work while you work with it and any rails speci"	h1d	12.776593	-6.523694	comment	5.0	18.0	1546692571	10.1322975
18839240	> Elixir is VERY fault-tolerant. DB 	> Elixir is VERY fault-tolerant. DB connection crashing? Ah well, reconnects immediately, while still serving the static parts of the application. PDF generation wonky? Same thing.I still don't understand this.I don't think I've ever built a web server in any language where this wasn't true unless I specifically wanted hard failure.The amount of fault tolerance would be a per-app design goal rather than something that seems to be a language feature. I've worked in apps in all languages that range from any failure being a hard failure to being impossible to crash, and this is due to business requirement.For example, regarding your examples, just about every web server I can think of will automatically turn uncaught exceptions into 500 responses unless you opt otherwise.	hombre_fatal	12.582476	-7.477782	comment	5.0	24.0	1546794196	12.897834
18849098	Very nice points here. I've always b	Very nice points here. I've always been struck at how the JavaScript community never really adopted the Rails ideas of convention over configuration and optimizing for developer happiness. While it's easy to roll one's eyes at the marketing lingo, these principles do truly make Rails a charm to use. Right now, even setting up the most simple Webpack-Babel-Node config requires writing a whole lot of config and set up for very little gain.	_hardwaregeek	12.751945	-6.838086	comment	5.0	28.0	1546889754	12.329004
18874827	So, I'm old, and have done lots of s	"So, I'm old, and have done lots of stuff in lots of languages in frameworks. For about a dozen years, Rails was my go-to toolkit. I've written a couple dozen production applications with it. Unfortunately, Rails has really fallen out of favor lately. Even a Rails-specialty shop I worked for briefly has pivoted to using ASP.NET. I've played around in that stack, and found it lacking. (EF just doesn't compete as an ORM.) However, they've moved on to bigger corporate customers, and those places just don't use Rails.Recently, and because of this same we-don't-""do""-Rails sentiment, I was forced into using Java for a web application. So I prototyped a site with Spring and Angular 6, thinking this -- arguably -- represents the ""state of the art"" when doing a Java web app. Out of frustration, I al"	TheRealDunkirk	12.741259	-6.8835855	comment	5.0	42.0	1547136362	12.345706
18906594	This is wrong: (from the article)  f	"This is wrong: (from the article)  function f(leaves: Array<Leaf>, aggregators: Array<Aggregator>): Array<MemsqlNode> {
    // The next line errors because you cannot concat aggregators to leaves.
    return leaves.concat(aggregators);
  }

That's just wrong, of course you can't concat aggregators and leaves! and Typescript is OK to not accept it. If you want that to be ok, you could do something like  [].concat(leaves, aggregators)"	funkaster	12.353452	-6.8578596	comment	5.0	28.0	1547500698	-10.484849
18908472	Maybe a better link: https://elixir-	"Maybe a better link: https://elixir-lang.org/blog/2019/01/14/elixir-v1-8-0-releas... . One thing about that blog post that really caught my eye:> There is only one last major feature planned for upcoming Elixir versions, which is the addition of mix release to Elixir itself, streamlining the experience provided by packages like distillery.Aside from having native support for releases, which would be killer, I was really struck by the idea that the language will be basically ""finished"". You rarely see that in software these days, but I think there's a lot to be said for trying to get to that point."	losvedir	12.6851015	-7.4595723	comment	5.0	20.0	1547519887	12.932745
18908759	Congrats on continuous progress of t	Congrats on continuous progress of the team.But I have a question. I took an online Erlang class and I actually ended up really liking the Erlang syntax once I got used to it. To me now, Erlang is now far more readable than Elixir.I understand Elixir is designed for the Rubyist, but I'm curious how is the experience of others who have looked at both Erlang and Elixir.	salimmadjd	12.6283655	-7.486089	comment	5.0	17.0	1547524547	12.932215
29685366	What a coincidence, I just started l	What a coincidence, I just started learning a bit of Ruby with an interpreter I'm writing a couple of nights ago.I will take the opportunity to ask; does anyone have a good introduction to creating Ruby (not Rails) projects? I'm a bit confused between rake, bundle, testing frameworks, how to debug a program or structure a project and I can't seem to find a good up to date resource on that.	dysoco	12.666088	-6.9977922	comment	5.0	16.0	1640455614	12.368687
29806834	I find it pretty hilarious that he's	"I find it pretty hilarious that he's picking Perl as a prototypical example of ""today's"" technology and the article is also blatantly advertising Perl books."	gyulai	12.3438225	-7.0405993	comment	5.0	25.0	1641373982	13.185909
29825720	What's the goal here? It seems like 	What's the goal here? It seems like they want to make elixir the new AI language, but why should I go from python to Elixir? I know it seems a dumb question but I can't find in the link any reason why. I really like python but at the same time I would like to have something faster but also with pandas, numpy, statsmodel and so on	anton_ai	12.665964	-7.440485	comment	5.0	29.0	1641486825	12.877311
29834626	It's funny how we hear so much about	It's funny how we hear so much about Ruby's decline yet 3 of the highest-valued startups - Stripe, Shopify and AirBnB - are up there making fortunes with it whilst contributing to Ruby's vibrant ecosystem.	cutler	12.70327	-6.9885406	comment	5.0	42.0	1641527737	12.384564
29876840	I like that the Ruby community has e	I like that the Ruby community has embraced the fact it is no longer cool.I recently interviewed for a ruby/rails job where the dev team had come from a previous start up that tried to port an existing Rails app to a React/Microservices one with disastrous results. For this job they were relishing coming back to a monolithic Rails app. I hope this trend continues!	jack_riminton	12.741995	-6.9331784	comment	5.0	27.0	1641830598	12.334061
29888958	So you need to read a whole book to 	So you need to read a whole book to deploy Elixir, people say Elixir is easy and straightforward but I think they are downplaying the amount of overhead BEAM/OTP/deploying brings to the table.	weatherlite	12.672409	-7.4574437	comment	5.0	19.0	1641889453	12.938082
29890756	> Why would I choose PHP when starti	> Why would I choose PHP when starting a greenfield project?Because you don't know better. If all you have is a hammer, everything looks like a nail.Ruby + Rails is miles ahead of PHP + Laravel. If you want more static typing (which I currently believe is a good thing) I really like Kotlin (+ KTor or + Javalin). If you are okay without OO and like static typing Haskell + IHP is pretty complete. If you are okay with learning about low-level stuff, Rust + Actix is really nice.All of this may require learning new things, and coming from PHP that's a good thing. PHP and JavaScript are not languages that help you become a better programmer. They are messy and lack important features (sum-types).	cies	12.74261	-6.665368	comment	5.0	28.0	1641904408	10.33727
29891371	In a world where everything is fast 	In a world where everything is fast becoming a JavaScript front end with “some” backend and with the improvements PHP has seen in recent years I don’t see why you’d consider yourself a “lowly” php developer.I’m mainly a C# guy myself as far as the backend goes, but I don’t view PHP as being bad in 2022. I think people who do are stuck in the past to be perfectly honest.It’s sort of like disliking JavaScript because it really sucked the soul out of you before typescript eventually made it nice to work with.But being mad at any programming language is sort of silly isn’t it? If it works it works.	kodemager	12.642853	-6.5018544	comment	5.0	25.0	1641908811	10.289696
29904094	A couple of strange things:* the use	A couple of strange things:* the use of decorators in even the most basic example* no async/await. You fall back to Promise.{then,resolve}. The example given is not that clear to me.* You can't have two files with the same name in different folders??And in general, for me, the ability to be a little less strict at times makes Typescript way more easier to deal with. It's a 80/20 thing. Most of the time I want type enforced but in some situation, I know it's OK and I just want to move on with my day.	skywal_l	12.35123	-6.7983274	comment	5.0	58.0	1641979087	-10.402081
29904925	> It's easy to just strip the TS met	"> It's easy to just strip the TS metadata and you're left with working JS.Compared to what? JSDoc made it even easier, you didn't even need to strip anything, as the ""types"" were just comments. This comes with its own problems, who want to program with comments? But it didn't require any changes to use for us who want nothing to do with TS."	capableweb	12.363768	-6.7622995	comment	5.0	20.0	1641986688	-10.455959
29917261	The general ideas are fine, but the 	The general ideas are fine, but the examples are pretty outdated. For modern SPA, CSS naming has become largely obsolete. A lot of the JS code shows the principles it is supposed to well but sadly includes other cruft.Here's a guide I would recommend instead: https://github.com/labs42io/clean-code-typescript	graup	12.326599	-6.6281238	comment	5.0	18.0	1642052564	-10.482835
29966238	DuckDB and Polars are my bets in the	DuckDB and Polars are my bets in the Python data-wrangling space. I grew tired of Pandas' weird-ass API.	mgradowski	12.351948	-6.5465684	comment	5.0	29.0	1642425541	10.102633
30004527	PHP Is Killing Python. Why PHP Is Mo	PHP Is Killing Python. Why PHP Is More Popular and More Hated	TriNetra	12.666585	-6.67101	story	5.0	6.0	1642652137	10.268403
30018596	Fly is great.They’ve got Chris McCor	Fly is great.They’ve got Chris McCord there, who has already improved their Elixir deployment story. I tweeted a few weeks ago about improving the default Rails deployment experience to not require DB provisioning and configuration of env vars like SECRET_BASE_KEY and they said it would likely ship within the next 3 months.My hot take is they’re setting themselves up to ride the server-side rendered HTML renaissance we are experiencing with LiveView and Hotwire. It will become much more important to deploy applications geographically closer to customers to lower latency, which Fly makes sane for the rest of us.	bradgessler	12.7819605	-6.962717	comment	5.0	22.0	1642733364	-13.508637
30048021	Can't speak for Python/Django but I'	Can't speak for Python/Django but I'm in the Rails world and the fact is on most Rails apps (even huge ones) the Ruby code isn't the bottleneck.  IO and database operations are.  You don't need a fast language for the things Python (and Ruby, PHP, Perl, etc..) does.	Mikeb85	12.646537	-6.741953	comment	5.0	35.0	1642958465	10.188844
30079799	Ask HN: What languages deploy and ar	Ask HN: What languages deploy and are also themselves standalone executables?	PinkMilkshake	12.514329	-6.452928	story	5.0	4.0	1643154563	-11.025262
30105471	"""Not Another Framework"" ... is anoth"	"""Not Another Framework"" ... is another framework. And from the look of it, it's the javascript equivalent of Ruby's Sinatra or Python's Flask. It's cool, but I think it promises way too much.These frameworks aren't so much frameworks, as they are framework builders. For small projects, they get out of your way. For larger projects, their lack of defaults and structure slowly becomes their own undoing. Eventually you get a bad reimplementation of one framework or another with absolutely abysmal security.Case in point: every Sinatra site I've ended up dealing with has turned into a bad version of Rails. (
Hand-rolled authentication, unsafe session handling, no CSRF protection, buggy form validation...)A field of infinite possibilities seems like a great idea, but you quickly realize it's act"	kayodelycaon	12.698873	-6.6907115	comment	5.0	25.0	1643313180	12.30301
30207151	I mostly work in Rails, but when I h	I mostly work in Rails, but when I have to hop into a node project, it feels like I'm stepping back into PHP in terms of sheer madness.Barely any convention, lots of repetition and configuration - all things Rails specifically set out to solve.	katzgrau	12.763326	-6.7512417	comment	5.0	46.0	1643985085	10.4186125
30207384	PHP hasn't been madness for a long t	PHP hasn't been madness for a long time. One could argue Laravel (a RoR inspired framework) has become better than RoR.	pearjuice	12.788472	-6.6564393	comment	5.0	24.0	1643986112	10.359002
30225474	While a better interface is welcome,	While a better interface is welcome, relying too much on Django admin panel is a path best avoided.Great for small stuff, but far too often one end up using it for too much. Extending it with more widgets, custom logic, fine grained access. Quick in the beginning, very hard to maintain in the end compared to a custom made view.	matsemann	12.871944	-6.507713	comment	5.0	28.0	1644092451	10.07067
30225711	You may not like it but the regular 	You may not like it but the regular Django admin is what peak UI design looks like.	tkainrad	12.865434	-6.506517	comment	5.0	17.0	1644093535	10.081258
30234499	I have over 500 commits in Rails and	I have over 500 commits in Rails and I failed the Shopify coding interview	mooreds	12.737668	-6.948409	story	5.0	47.0	1644167785	12.371843
30242099	In the mid-00s the main selling poin	In the mid-00s the main selling point of PHP were shared hostings with mod_php which was a cheap way to host your own web site and database.Now with the cloud that advantage is utterly gone.	thriftwy	12.77933	-6.5830064	comment	5.0	24.0	1644224496	10.281181
30242130	Why do PHP developers insist on call	Why do PHP developers insist on calling themselves artisans?Give me a call when PHP ditches backwards compatibility and cleans out all the shit from the standard library - 5845 global functions always available, most of which you are just supposed to know are shit... Just a nightmare.	awestroke	12.775959	-6.6464143	comment	5.0	25.0	1644224725	10.341479
30242675	What server language today except PH	What server language today except PHP (and its forks) is actually designed for the web and works as the web was intended?The implication of the question is that there's something designed into PHP that makes it better for working with web things. Why does the language need to be designed to work with the web? That part of any language can be filled out with a framework quite easily, and arguably that means it's much easier to change how the language is used. That seems to be the case with every major PHP application anyway - most use Laravel or Cake or Symphony or something. Just as most Ruby web projects use Rails, and most backend JS projects use Express, and Rust web projects use Poem, and so on.I don't think there's a good reason to design a language specifically for web projects. If t	onion2k	12.716176	-6.615307	comment	5.0	23.0	1644228765	10.376184
30243667	The fair comparison: PHP/Laravel to 	The fair comparison: PHP/Laravel to Ruby/Rails...How is PHP/Laravel better? I'm of the opinion it loses hard in every aspect.	cies	12.781692	-6.667909	comment	5.0	20.0	1644235645	10.392807
30245786	imho, they should have expected that	imho, they should have expected that, since Shopify is a known Ruby shopedit: this wasn't meant to insult OP, sorry	ushakov	12.755207	-6.936286	comment	5.0	17.0	1644246374	12.348478
30262325	Laravel definitely is everything, bu	Laravel definitely is everything, but light-weight. It's the slowest of the large names in PHP.see http://www.phpbenchmarks.com/en/comparator/framework or https://www.techempower.com/benchmarks/#section=data-r20&hw=...	TimWolla	12.823215	-6.665971	comment	5.0	17.0	1644344769	10.34341
30262443	But what if the app is a simple mono	"But what if the app is a simple monolith that exposes some API routes and processes/reads/stores data in a database?Is something like this really harder to understand for a new developer than a Laravel project?    .htaccess
    dbconfig.php
    /api
       /users
         create.php
         get.php
         getAll.php
         delete.php
       /products
         create.php
         get.php
         delete.php

And where each file does something like (simplified)    // /api/users/getAll.php  
    include 'dbconfig.php';
    checkPermissions(ROLE_ADMIN);
    $res = $db->exec(""SELECT * from users"");
    echo json_encode($res);"	XCSme	12.813538	-6.549483	comment	5.0	37.0	1644345220	10.31527
30264404	I'm just now learning (week 2) Larav	I'm just now learning (week 2) Laravel after coming from using other custom frameworks for years. For the record I have my own framework with a fully featured ORM of it's own and 99% unit test coverage for said ORM which is a fork of one my friend started 15 years ago and I have contributed to for several years. We started it before Laravel existed and in many ways it's exactly like Laravel. [https://github.com/Divergence/framework]But anyway.....So far what I like:- Migrations- The ORM is pretty good- Query writer is aight- Blade- Mixx- built in CLISo far what I don't like:- All routes defined in one single file instead of procedurally in each controller (performance wise this is terrible cause you're running a bunch of regular expressions on each and every request. augh)- File structure 	hparadiz	12.813138	-6.642222	comment	5.0	20.0	1644353095	10.356977
30307559	I've found these differences make it	"I've found these differences make it tough to use Deno on large or important projects. Deno does a lot of novel things. On the surface they're all things I agree with, but in practice they're too novel to understand the implications of.For instance, bundling typescript. I like typescript and hate setting up the build toolchain so this sounds like a good idea. But not every typescript upgrade is backwards compatible (even if unintentional when not), and I'd hate to be stuck not upgrading V8 because it's bundled with typescript.Or the import system. Importing from HTTP is useful, it ensures things ""just work"".  I like it, on first sight. But is it manageable? Let's say I isolate all my external dependencies into files that just re-export them, or whatever the standard is nowadays. Is the too"	tinalumfoil	12.472777	-6.443524	comment	5.0	30.0	1644617054	-10.904889
30333417	> Dango Views CheatsheetsI think you	> Dango Views CheatsheetsI think you mean Django.	0xbadc0de5	12.82409	-6.513812	comment	5.0	17.0	1644853745	10.073389
30385042	PHP Is Dead	PHP Is Dead	brtkdotse	12.762553	-6.624762	story	5.0	7.0	1645188325	10.327053
30395314	PHP-centric, not mentioned in the ti	"PHP-centric, not mentioned in the title. Most of it is relevant to everybody, but it is jarring to run into stuff about PHP. Isn't that dead yet?Of greater moment is that the article keeps talking about ""characters"", which is an undefined term in Unicode. Unicode offers you code points, code units, graphemes, grapheme clusters, and ... other things, none of which maps to the grouping of dots you see on your screen (and probably cannot imagine how to type in).""Character"" has outlived its sell-by date. Let it be retired and buried with dignity, but with a good thick slab of concrete on top.It also fails to mention ""expanded form"" and ""canonical form"", and other ways that two completely different sequences of bits mean, at some level, the same text. Different forms are convenient for differen"	ncmncm	12.753407	-6.6418867	comment	5.0	17.0	1645258380	10.357588
30454985	I really hope some sanity comes back	I really hope some sanity comes back to this industry. Rails and Laravel are the best tools by far to build like... 90% of what we build on the internet (Other 10% being offline first apps and stuff like figma, etc).It just hurts to see how my team, and previous teams I worked with struggle with all the SPAs and microservices, and Go backends and GraphQL nonsense when what we're doing are just fancy crud forms with maybe one or two really interactive widgets overall.So much time and money wasted just for following fashion.	midrus	12.766619	-6.588273	comment	5.0	94.0	1645712421	12.270085
30482712	Self-obfuscating value objects in PH	Self-obfuscating value objects in PHP	eamann	12.698616	-6.4615407	story	5.0	37.0	1645915438	10.240004
30482727	I did the licensing server for Lunar	I did the licensing server for Lunar (https://lunar.fyi/) in Crystal.It’s been a joy to work with it! The standard library for working with strings, JSON, YAML and XML is top notch. Type safe and extremely fast, very important characteristics for a licensing server that is queried hundreds of times a second.I used the super simple Kemal HTTP server library which I like for APIs where most of the logic happens on the backend.I have 8 years of experience as a Python developer and 5 as a Swift developer but after all that time I still like the terseness and type inference of Crystal.	alin23	12.603768	-7.258648	comment	5.0	24.0	1645915578	-11.189599
30533712	Totally agree.We built a product in 	Totally agree.We built a product in ~5 months with real-time collaboration, extensive interactivity, Oauth, Stripe and Gmail integrations with a standard Ruby on Rails stack.It's rock-solid, performant, dead-simple and extremely productive to work with.Why're we throwing away years of learning to build unstable, complex and inaccessible applications?	finniananderson	12.7443285	-6.928531	comment	5.0	25.0	1646257978	12.355034
30582229	Prolog appeals to me a lot. In my co	Prolog appeals to me a lot. In my company we work a lot from written requirements (if X does this, then Y needs to be that). I feel Prolog could fit well with  this.	spaetzleesser	13.131693	-7.281717	comment	5.0	15.0	1646608344	-12.510986
30627034	As someone who doesn't really work w	"As someone who doesn't really work with neither JS or TS, the proposed JS type system looks superficially very similar to TS.Is this ""backporting"" TS to JS or is there something else I'm missing?"	rvieira	12.354337	-6.7385654	comment	5.0	20.0	1646921375	-10.480327
30627425	I disagree that TypeScript comes wit	I disagree that TypeScript comes with only a marginal upside. In my experience TypeScript projects are much more approachable for contributors.For example, I once was debugging an issue in a JS framework and while I knew what was wrong and where I could fix it I didn’t have any idea what existing tools I had available in that context to fix it. Having type definitions would have made that work much simpler by increasing the accessibility of the code base.It’s experiences like this that have convinced me that if I’m writing code that any one will possibly read or need to modify later (including if it is just me) then I should be writing TypeScript instead of JavaScript. Or, more generally, that it should be typed.	keawade	12.359184	-6.8261576	comment	5.0	20.0	1646923267	-10.468505
30627524	Everyone keeps saying variations of 	"Everyone keeps saying variations of ""It would become possible to program (e.g.) TypeScript without compiling the source code."" but that's not true. This proposal is only a subset of TypeScript, meaning that all of the existing TS infrastructure would remain and still be used. All this does is further bloat the ECAMScript for no gain."	wolfadex	12.370044	-6.758879	comment	5.0	16.0	1646923787	-10.447649
30681195	Part of the genius of FAANG is being	Part of the genius of FAANG is being big enough to do it all yourself. Want to make your aging PHP codebase faster? Just write your own PHP JIT (twice!!). Want to do RPC? Just invent your own protocol. Want servers? Just design your own chips. The list goes on and on. If you aren't FAANG, you suffer what you must at the hands of the open-source ecosystem. (Note that most things that FAANG invents are never open-sourced, or someone open-sources a knockoff of it, such as Google's Borg vs Kubernetes).	phendrenad2	12.768987	-6.6133547	comment	5.0	22.0	1647312551	10.382789
30699070	I've been following Bunny (BunnyCDN/	"I've been following Bunny (BunnyCDN/Bunny.net) for a while and love what they are doing. Couple of suggestions:• Every code snippet should be copy/pasteable (and work well), that article might be the entry point to what many are doing.• I have this feeling this is following Cloudflare's Workers style of `addEventListener('fetch', eventHandler);`. I need to write a 500-word essay on that, but the short version is that I strongly believe that it'd be way better for their clients if the client could just do `export default async function handleDns(event) { ... }` instead of having a global (what?) context where there's a function unattached called `addEventListener` and you need to know it's for `""dns""` (is there even other possibility here?) and that the respondWith() only accepts a promise,"	franciscop	12.588123	-6.463157	comment	5.0	18.0	1647439892	-2.0940433
32687071	Huge props for the Crystal lang team	Huge props for the Crystal lang team.Crystal powers 90% of the Kagi search backend (reminder being Python). Highlights are great performance and concurency handling. Biggest downsides at this moment are compilation speed (does not take advantage of multi CPU cores) and debugging tools.Overall our experience has been fantastic (we adopted it while still in beta) and the pace the language is developing is great.	freediver	12.631593	-7.2677765	comment	5.0	22.0	1662097944	-11.217281
32763974	Please don't design bit/byte string 	Please don't design bit/byte string libraries until you understand how Erlang handles them, because that language has by far the best support.  https://www.erlang.org/doc/programming_examples/bit_syntax.h...Here's my OCaml library influenced heavily by Erlang: https://bitstring.software/examples/	rwmj	12.392795	-7.488765	comment	5.0	28.0	1662635990	12.857356
32823007	That code is so bad. Who does this?!	"That code is so bad. Who does this?!    return ($this->head === 0 && $this->tail === $this->size - 1) || $this->head === $this->tail + 1;

Or this?     $return = $this->next?->resetPrevious();


Or this!!!    $this->tail =
            $this->tail?->setNext(new Node($this->tail, null, $value))->next
            ?? $this->head = new Node(null, null, $value);


Or leaves typos in their code?    elseif ($this->tail === $this->size - 1) {
            $this->tail = 0;just a tiny
        }



I get that PHP has a bad rep but this ain't helping."	pluc	12.4596815	-6.7389493	comment	5.0	24.0	1663069181	10.266497
32877389	I like the BEAM and philosophy of El	I like the BEAM and philosophy of Elixir, but there's just...no static typing. As someone coming from TypeScript and Rust, this makes it a very hard sell when I can write web servers with either language just fine and have the compiler catch the many errors I've made. I suppose there is Gleam but the more esoteric the language (or technology in general), the harder it is to debug, so I don't want to be stuck with that kind of situation for a production environment.	cercatrova	12.522762	-7.4713798	comment	5.0	16.0	1663421424	-12.325536
32878360	Ask HN: Akka fork – who would be wil	Ask HN: Akka fork – who would be willing to contribute?	sebaz6r	12.3867855	-7.3625093	story	5.0	8.0	1663429018	12.67024
32897685	TypeScript is now the most-used lang	TypeScript is now the most-used language by CircleCI users	isaacfrond	12.355605	-6.7585793	story	5.0	18.0	1663592124	-10.453726
32953443	On a related note: Is there anyone w	On a related note: Is there anyone working on a faster tsc? I know there's esbuild and swc, but those only transpile, they don't type-check.	juancampa	12.346373	-6.7272024	comment	5.0	25.0	1663947731	-10.44869
36570765	My father worked at Ericsson for a l	"My father worked at Ericsson for a long time back then, and while he wasn't involved in any of the AXE-N or Erlang stuff, he did hear water-cooler talk about the ongoing political battles. So this is like 3 layers removed from the people who were actually involved in it all, but anyway:There was a huge push to move on from the in-house PLEX to industry standard software engineering. Object orientation, component architecture, UML, design patterns, etc.; think of a software engineering kool-aid from that time period, they were drinking it. And C++ was the industrial strength vehicle to deliver all of this.AXE-N wasn't just a project that flopped, it was the crown jewel of this giant effort to switch to the new ""industry standard"" way to write telephony software. So the failure was a giant c"	jabl	12.531891	-7.5052867	comment	5.0	18.0	1688377439	12.97938
36605952	Ruby (and earlier, Perl) formalised 	Ruby (and earlier, Perl) formalised this with the __END__ section: https://www.honeybadger.io/blog/data-and-end-in-ruby/	jjgreen	12.444544	-7.0223513	comment	5.0	18.0	1688585848	12.403607
36619484	You mean the company that had to cre	You mean the company that had to create their two PHP implementations and a translator to C++, to actually scale?	pjmlp	12.719823	-6.6451144	comment	5.0	85.0	1688664128	10.2967825
36619794	While that is technically correct, t	"While that is technically correct, they haven't been running vanilla PHP for quite some time - it's jitted into x86 and run natively on the machine. It's also pretty extensively optimized. And the VM that does the jitting is all C++. Their MySQL deployment is also an internal fork that's been heavily modified for scalability (storage/compute separation, sharding, RocksDB based storage engine instead of InnoDB, Raft for synchronous replication, etc.). Lots of really fantastic engineering work has gone into making their backend infra scale.Some worthwhile references:[1] https://engineering.fb.com/2016/08/31/core-data/myrocks-a-sp...[2] https://research.facebook.com/file/529018501538081/hhvm-jit-...[3] <a href=""https://re"	anayak	12.763544	-6.6014934	comment	5.0	33.0	1688665170	10.163726
36636767	I seem to remember multiple incident	I seem to remember multiple incidents where Rails programmers complained that everyone at the conference they went to was playing Werewolf instead of sticking to the topic. It made me wonder what kind of community would lead to that.As for _why, there is nothing special about him. If you need an overly precious twee white guy, we have a natural source of them called the city of Portland. You can go find another ten of them there. They have waxed mustaches and are running combination coffee bars and thrift stores.	astrange	12.722	-6.9781046	comment	5.0	21.0	1688756414	-11.626429
36637753	The thing I find weird about Erlang'	The thing I find weird about Erlang's design is that actor mailboxes have no backpressure mechanism, which seems like a pretty big footgun. Go channels have their own quirks, but requiring them to be bounded was a good design choice.	vore	12.442705	-7.568864	comment	5.0	15.0	1688761132	12.867674
36678324	The time (some years back now, it wa	The time (some years back now, it was a 5.10 patch and a 5.8 rpm) they mis-backported a perl patch to work around a bug in a deprecated CPAN module for one of their enterprise customers and in the process caused a 2x-30x slowdown of lots of other newer code (including the library that had replaced it in the majority of production environments by that point) was 'fun'.Took me a couple years to get together a coalition of commercial support customers to apply sufficient pressure that they'd listen when I got the original author of the patch to break out the small words and crayon drawings and explain what they'd done wrong and how to backport it properly.Happily, they now generally snapshot Fedora's perl builds pretty directly and the current Fedora team have been fantastic to work with as a	mst	12.339789	-7.011483	comment	5.0	21.0	1689066837	13.179838
36698542	Performant database tree traversal w	Performant database tree traversal with Rails	samlambert	12.947173	-6.5821786	story	5.0	53.0	1689183671	12.273916
36728838	Want to like this tool, but every ti	Want to like this tool, but every time I need to use it I’ve gotta relearn the idiosyncratic syntax it uses. Lately I just use Ruby plus a couple of gems instead	LispSporks22	12.57125	-7.041256	comment	5.0	15.0	1689363185	12.378876
36821538	PHP in 2023 is a great language, I a	"PHP in 2023 is a great language, I always scoff when somebody tries to imply that Python or JS are ""clearly superior"" languages to PHP (which, to me, is a clear sign of illiteracy). But I am also kind of ""the right tool for the job"" proponent. Now is PHP the right tool to build Desktop Apps?- It is cumbersome to distribute. Rarely people have PHP installed outside of a docker container, and given quite short development lifecycle chances are their version of PHP is already outdated.- Concurrency support in PHP is still very poor. That seems quite a big deal for a desktop app.- NativePHP is anything but native. It relies on Electron, which is somewhat questionable on its own (even though very common nowadays).- …And, since it pretty much is just Electron, why do I need a Laravel app underne"	krick	12.736761	-6.6053443	comment	5.0	21.0	1689982996	10.325183
36821797	Yeah, super disingenuous. Especially	"Yeah, super disingenuous. Especially considering PHP is already native (unless you mean specifically compiled code). It also has direct bindings to GTK:http://gtk.php.net/And other native libraries.This project seems to conflate ""native"" with ""has its own window"" (versus running in a browser). While I would argue the more common understanding is ""native"" meaning ""running outside of a sandbox/closed environment and directly on the OS"". Ironically, using the latter definition, this project is less native than just coding PHP directly."	deaddodo	12.734643	-6.581033	comment	5.0	29.0	1689984852	10.350364
36860385	I wish there wouldn’t be such a song	I wish there wouldn’t be such a song and dance about “moving away from Python”. There’s nothing wrong with creating ML tools in Elixir, but it’s always Python is slow, Python has no concurrency support, blah blah	matt_daemon	12.667825	-7.438411	comment	5.0	50.0	1690281466	12.903595
36860295	Instead of moving to Elixir I believ	Instead of moving to Elixir I believe it makes more sense to wait/move to Mojo when it's ready:https://www.modular.com/mojo	madspindel	12.68369	-7.4302354	comment	5.0	21.0	1690280547	-6.1034355
36860838	I use Elixir for a long time and wou	I use Elixir for a long time and wouldn't recommend it for ML over Python. Yes, maybe Elixir has some advantages and solutions for pain points because of VM architecture and other subjective reasons but doesn't come close to what Python offers in terms of tooling, support, community. Also, if you juggle more complex data in Elixir, it's something that you need to get used to coming from Python, it will be much much different and therefore harder to grok for someone not used to the style.You can always make Elixir app talk to Python ML backend and get the best of both worlds if you desire.	pawelduda	12.673715	-7.4440084	comment	5.0	18.0	1690285112	12.93204
36876645	Strong opinion: DO NOT break up your	Strong opinion: DO NOT break up your project into apps.Make 1 app called core or common of whatever and replace models.py with models/<namespace_or_domain>.py and import those into models/__init__.pyEveryone jumps into apps with foreign keys across app boundaries and it makes a mess of things from the start that doesnt buy you anything.1 app. 1 set of migrations. Turn models, views, etc into a package instead of the single file module.Its the one thing I wish the docs would prescribe and demonstrate for new project advice. .	leetrout	12.862737	-6.4739013	comment	5.0	19.0	1690375124	10.024711
36903426	As most other commenters have simila	"As most other commenters have similarly said, this blog post should be a single word: ""Don't"".The book ""Eloquent Ruby"" has several chapters on how to use ""method_missing"". None of those chapters say the only valid use of method_missing: ""Never use it.""Lots of languages have deep flaws. Javascript, Python, Java, Perl, C obviously, all let you do some pretty horrific stuff if you really want to. Ruby is the only language where the horror is embraced by the ecosystem and its users.There's a reason most engineers are adamant you shouldn't use this. It's why learning Ruby as your first language is probably a bad idea, since it normalizes what every other language has agreed is bad practice.Don't!"	stevebmark	12.586761	-7.050835	comment	5.0	17.0	1690522889	12.350511
36905224	Ruby websites like GitHub generally 	Ruby websites like GitHub generally seem nicer and more elegant that Python/Django ones like python.org or Instagram. The latter are clunky.I wonder if the language influences the aesthetics. Python is boring and clunky as well.Some people here criticize meta-programming. I was one of them until I read the gorgeous Homebrew configuration files. Of course, don't overdo it.	lprtyc	12.541381	-7.0256042	comment	5.0	18.0	1690542490	12.372224
36987368	That's a pretty good write up.There'	That's a pretty good write up.There's a fine line between making things easier and more readable and having less boilerplate code, and pouring a bit too much magic and macros into things.I'm always curious to see what people do with Elixir. The BEAM environment offers a lot in terms of a platform, but if you're just using it to serve web dynamic web pages, Rails is going to be a better pick in some circumstances because of the huge number of libraries, people who know it, documentation, hosting and the rest of the ecosystem.	davidw	12.7168045	-7.3534565	comment	5.0	42.0	1691077151	12.851652
36987731	Yep.  The only problem with elixir m	Yep.  The only problem with elixir macros is that people look at the macros that are in core++ (exunit, plug, phoenix, ecto) and decide it's a good idea to dsl-up everything.The biggest offenders IMO are commanded, Tesla, absinthe, exmachina and now most recently ash.  Then there's tons of tiny libraries that litter hex.pm with macro-heavy nonsense.At least the core++ libraries make macros whose syntax/keywords matches something outside elixirland that you'd have to know anyways (e.g. 'get' from plug, all of SQL from ecto), but the big offenders list are making up clever names for things, which adds mental overhead to literally everything you do, building crazy complicated compilation pathways (especially for overeagerly lazy stuff) or writing function names from whole cloth that make refa	throwawaymaths	12.647619	-7.449293	comment	5.0	80.0	1691078679	12.924038
36990231	Things I like about Elixir:- concurr	"Things I like about Elixir:- concurrency is intuitive!- Elixir is a two-for-one language.  You can reach into Erlang std library as easily as you can that of Elixir.  So, depending on your work, you get a chance to discover a wide range of goodies that come for ""free"".  Examples include gen_tcp, gb_tree, etc.- You can remote into a running virtual machine in production, pod or whatever, and have access to a repl that let's you inspect state, manage ""processes"", and manually invoke commands to troubleshoot issues.  The observer, and tui counterpart, are quite useful too.- everyone in the community writing libraries uses the standard approach to emitting telemetry, saving time and effort for users to take what is available- fast compile times- hardest working BDFL (although this presents ris"	Dowwie	12.613114	-7.4409094	comment	5.0	24.0	1691089324	12.895319
37144894	On to Elixir	On to Elixir	ahmaman	12.687903	-7.4567795	story	5.0	76.0	1692180265	12.944126
37172015	    There was a question from Shanno	"    There was a question from Shannon about """"what people think is a
    acceptable slowdown for single-threaded code"""" ... he had estimated
    an impact ""in the 15-20% range""

Horror!To me, the acceptable slowdown is exactly zero.I can already use multiple cores by running multiple Python processes.Any slowdown of single-process performance would be a terrible step backwards.Python is already slow. It should look at PHP and see what it can take out of their book. PHP 7, which had no JIT, was already about 6x faster than Python. PHP 8 is even faster for some workloads. I'm not sure if the overhead of a JIT makes sense though. But PHP 7 is a good place to look for a performance benchmark."	TekMol	12.547024	-6.6631737	comment	5.0	18.0	1692340479	-9.113964
37259809	Unlike javascript, elixir makes you 	"Unlike javascript, elixir makes you write synchronous code, e.g.    def process_items(items) do
        items
        |> Task.async_stream(&Processor.process/1, max_concurrency: 2, timeout: 7000, on_timeout: :kill_task)
        |> Enum.to_list()
    end

Semantics of regular and concurrent code is the same"	out_of_protocol	12.595905	-7.4738226	comment	5.0	21.0	1692956553	12.910262
37261121	Disckaimer: I have never used Elixir	Disckaimer: I have never used Elixir in any serious capacity, but I have done a good chunk of Erlang.Concurrency in Erlang sort of frustrates me...not because it's bad, but because when I use it I start getting pissed at how annoying concurrency is in nearly every other language.  So much of distributed systems tooling in 2023 is basically just there to port over Erlang constructs to more mainstream languages.Obviously you can get a working distributed system by gluing together caches and queues and busses and RPC, but Erlang gives you all that out of the box, and it all works.	tombert	12.626125	-7.4745817	comment	5.0	54.0	1692967859	12.907618
37278421	I could care less about faster, but 	I could care less about faster, but I would sure love to switch from Jekyll to something that builds from a statically linked binary.I only put our blog posts a couple times per year, but it seems that the Jekyll dependencies move beneath my feet and break routinely. This is especially a pain because Jekyll and homebrew are the only ruby projects I work with frequently, and so  I'm always at a loss for how to fix things -- rbenv, updating gemfiles, do I need to gem or rake or bundler something, architecture-specific problems with C dependencies, yuck.For now I just put everything into nix which seems ok, but I think I may make a third attempt at switching to Hugo soon, or maybe this, or maybe cobalt.	n8henrie	12.615446	-6.9467373	comment	5.0	17.0	1693098240	12.362409
37305266	Elixir is slower than plain PHP acco	Elixir is slower than plain PHP according to the techempower benchmarks. I'm not even sure how that's possible but it is. By like a factor of 2 iirc. I'm not sure how elixir is that slow since it's compiled.	DoesntMatter22	12.678659	-7.3847833	comment	5.0	26.0	1693301724	12.890936
37305969	Elixir is a functional language for 	Elixir is a functional language for the Erlang VM. Most C++/Java/Rust/... programmers wpuld have hard time understanding it.But if you are in a bubble where everyone uses Haskell and talks about Monads, then OPs statement may be valid	kramerger	12.610401	-7.477236	comment	5.0	23.0	1693307415	12.924093
37306523	There is a reason: the BEAM is almos	There is a reason: the BEAM is almost not prone to huge GC pauses. Bigger load results in every actor responding very slightly slower. Nothing else.Many other systems don't have this property. They fall down under pressure.Gosh, a huge chunk of HN is always so dismissive. At least read up a bit beforehand, man. The criticisms should be informed and benefit the readers, not only express a generic skepticism.	pdimitar	12.340679	-7.377921	comment	5.0	58.0	1693311050	12.816717
37313204	> Ruby relied only on web developmen	> Ruby relied only on web developmentChef, Puppet, Vagrant, Logstash, etc are not web development.Ruby dominated (dominates?) DevOps tooling.	paulddraper	12.667027	-6.988481	comment	5.0	17.0	1693339666	12.3786335
37313413	Ruby was never similar in popularity	Ruby was never similar in popularity to Python. It was just a fad in webdev circles. I've rarely seen ruby before RoR and I've seen python all over.Python was popular as a teaching language, how it gained a foothold in academia.I remember 20 years ago when I was starting out it was popular for game scripting (Lua was more embeddable but python was also used). plenty of first class interfacing methods to native code (still remember c++ boost shipping python binding generator).Many tools shipped python as an embedded scripting language.Python was used for creating build systems.Not to mention any distro out there ships python, it replaced perl in that regard. Batteries included and being available helped it become the norm for random scripting.Python was big before numpy/ML.	moonchrome	12.356594	-6.982772	comment	5.0	41.0	1693340512	12.390847
37314477	There are just too many ways to do t	There are just too many ways to do things in Ruby. How many forms for an if-else or for loopin can you name in Ruby? Just as the simplest example.Monkeypatching is also awful for readability.Explicit imports are way more readable than things appearing into current namespace implicit kind of stuff like it happens with Ruby	skeletal88	12.426745	-7.073031	comment	5.0	17.0	1693345019	12.406018
37407376	My least favourite thing about vanil	My least favourite thing about vanilla JS is finding out at runtime that I made a typo. That's an annoying thing that TS completely solves, among many others. I really don't see how you could use TS for any amount of time and wish to revert back.>Things that should be easy become hard, and things that are hard become `any`. No thanks!Denouncing a type system because you refuse to use it correctly seems short sighted to me, but I am of course biased as a TS fan.	bil7	12.35057	-6.8344707	comment	5.0	26.0	1694017466	-10.451146
37411468	> Fully recognize that TypeScript of	> Fully recognize that TypeScript offers some people some advantages, but to my eyes, the benefits are evident in this PR. The code not only reads much better, it's also freed of the type wrangling and gymnastics needed to please the TS compiler.This is such a terrible take. The same could be said about removing tests. It does simplify things, and not having to please the damn test suite is indeed a boon for productivity. You get to drive at full speed towards the cliff.Strong typing is a hill I'm willing to die on, and at Svix we encode everything we humanly can in the type system. Let the compiler catch our mistakes...	tasn	12.347106	-6.824305	comment	5.0	17.0	1694035147	-10.412081
37436040	This problem is very old at this poi	"This problem is very old at this point. I'm doubtful that Bun has ""solved it"" any more than other tools. They've just selected a different set of trade-offs that will result in a different set of packages not working. Is there a reason to think they've cracked some code that other tools were unable to?"	Touche	12.432925	-6.4383597	comment	5.0	32.0	1694191616	4.054227
37439613	I think the version is actually clos	I think the version is actually closer to `1.0.0-beta` than to `1.0.0`. I just installed v 1.0.0 and run `bun repl` and it failed with exit status code 1, it turns out the repl wants to use port 3000, which was used in my case already. There are probably a lot of other small things like that, look on reported bugs in github. So, I also should be 'skeptical' about all claims they did.Nevertheless I am super impressed with their speed and exited with the result. Didn't expect this project to grow so quickly to this state, I though it will take them much more time. For comparison, deno was started way earlier and now they are miles behind (personal feeling). I am considering to use it for my pet projects	vasergen	12.527942	-6.4546986	comment	5.0	19.0	1694208188	-11.019238
37443346	php runs securely in 5minutes in any	php runs securely in 5minutes in any web server 3-10$/month.Every other tech, it's complicated servers or complicated billing, not to mention depencies and build tools.thats why php	anonymous344	12.780096	-6.60044	comment	5.0	37.0	1694248388	10.293089
37443828	PHP has its fair share of snobbery a	PHP has its fair share of snobbery as well. Non-framework devs look down on Symfony, who in turn look down on Laravel devs, and everybody looks down on WordPress devs.	blowski	12.764486	-6.596681	comment	5.0	17.0	1694254769	10.313521
37444426	Unfortunately, the current maintaine	"Unfortunately, the current maintainers of PHP have not learned from the success of it. And are driving PHP into the direction of having the rigid structure that Java has.It is so successful because people who build new things are different from people who are paid to maintain old things. That is why WordPress, Wikipedia and countless other successful internet projects have been created using PHP and not using Java.People who build new things like simplicity and elegance and tools that empower them. While people who are paid to maintain old things like a rigid structre which gives you the feeling of ""nothing can go wrong"".Also, people who build and run things do not like breaking changes of their stack. While people who are paid to maintain old things don't care about breaking changes in th"	JonathanBeuys	12.732017	-6.6501727	comment	5.0	18.0	1694261588	10.290755
37444462	Ironically enough, if people actuall	Ironically enough, if people actually tried PHP, many would be amazed, especially at the quality frameworks. Productivity is very high in something like Laravel, and compared to JavaScript frameworks PHP frameworks are much more feature complete and well though out.I'm a big fan of trying out different stacks, and I think a lot of people would love Laravel if they tried it. Give it a shot using PHPStorm and Laravel IDEA (free trials for both), and see what you think. Can't hurt.	NorwegianDude	12.783847	-6.623213	comment	5.0	23.0	1694261868	10.3341
37454119	Tested this with a moderately comple	Tested this with a moderately complex PHP Laravel app and got a 40% speed improvement. Very useful to be able to run multiple apps each using different lang runtimes/versions without needing separate docker containers.	Dachande663	12.731399	-6.636609	comment	5.0	17.0	1694336179	10.2391205
37479520	Elixir and Phoenix are interesting t	"Elixir and Phoenix are interesting technologies.
I have a good friend that changed from Rails to Phoenix and is very happy with it. I stayed in the Rails ecosystem and am quite happy too and added Go to my toolbelt when I need something with more concurrency.
How is the Elixir ecosystem nowadays? Anyone that is active in both ecosystems (Elixir, Ruby) can compare?"	hit8run	12.736492	-7.3071647	comment	5.0	16.0	1694518660	12.782578
37481420	Interesting. My own biggest gripe wi	"Interesting. My own biggest gripe with rails is, by far and large, that any project that even so much as lightly touched the js ecosystem will become unbuildable within about 2 months if you don't tweak things. And for Rails, a huge driver of this is the sass compiler, which (afaict) will download a hosted binary component for recent enough versions but will fall back to building it if it's too old. And ""too old"" appears to be measured in months. But it's far from the only thing that breaks it."	atomicnumber3	12.739409	-6.886938	comment	5.0	18.0	1694527247	12.33862
37484192	This is great and showcases Django's	This is great and showcases Django's talent for basic CRUD apps with handy admin interfaces.One catch: I like to deploy static sites to GitHub Pages. It turns out the Django ecosystem has an answer for that in the form of Django Distill [1]. Distill adds a new management command that generates static content by repeatedly invoking your views.I've used Distill to build quite a few static sites. It's great to be able to deploy to Pages but use Django's admin UI locally. Typically, for these sites, I check in my 'production' SQLite database directly to my git repo.(Combine this pattern with GitHub actions and you can do a lot with a little. For instance, here's a toy I built to summarize upcoming Seattle city council meetings [2].)[1] https://github.com/meeb/django-distill[2] https://scc.fron	davepeck	12.837393	-6.493278	comment	5.0	29.0	1694537828	10.054649
37499054	Do you know of any that use JavaScri	Do you know of any that use JavaScript/typescript?	phero_cnstrcts	12.326307	-6.54902	comment	5.0	18.0	1694625130	-10.436697
37529598	I've noticed in a few examples that 	I've noticed in a few examples that the people who dislike TypeScript and use pure JavaScript generally are really good at keeping track of things in their head so they can go fast when they write. I'm not good at doing the housekeeping in my head, so I appreciate tools like TypeScript. I go slower, but it saves me time in the long run.edit: right -> write	labrador	12.356802	-6.790524	comment	5.0	20.0	1694815147	-10.438735
37530567	Deno by Example	Deno by Example	mdwalters	12.524801	-6.450759	story	5.0	125.0	1694822729	-11.02207
37532634	> Deno is a simple, modern and secur	> Deno is a simple, modern and secure runtime for JavaScript and TypeScript that uses V8 and is built in Rust.Still don’t fully understand what ‘runtime’ means in this context. It’s not the parser, interpreter, VM, GC I think, because that is the V8 part. It’s not a runtime compiled into an executable like Haskell or Go.Is it the term used here for a set of standard libraries? Or maybe in interaction layer with the operating system underneath, or the package/build system? Or an umbrella term for all of this?I’ve been doing all kinds of JavaScript and TypeScript for a long time now without a runtime (I think) so pretty curious.	sfvisser	12.45054	-6.5134783	comment	5.0	18.0	1694847901	7.4914727
24442337	Modern Ruby Serializers	Modern Ruby Serializers	todsacerdoti	12.528022	-6.941792	story	5.0	39.0	1599829691	12.279693
24443456	Most large companies typically have 	Most large companies typically have a bunch of primary languages/frameworks, so IMO there's never really such a thing as going all in. Unless you're FB and you're stuck with PHP/Hack.	jagtesh	12.613898	-6.6330233	comment	5.0	16.0	1599835943	-7.6608973
24503285	In .NET we have a very similar tool 	"In .NET we have a very similar tool for creating such packed binaries, dotnet-warp. I used it in one of my projects and quite liked it, since it's also quite easy to cross compile (cross-pack?) for the 3 major operating systems.I like the general idea, your independent of the system wide framework version and it still has this ""one-click"" install procedure (dropping the binary in your path). However, I guess this is also the negativ Part. Users don't expect that a single binary extracts itself to somewhere --> uninstalling the binary leaves traces on the system.Definitely looking forward to try it out for elixir, wondering how fast the erlang/elixir startup really is."	jdellinger	12.614129	-7.4269266	comment	5.0	18.0	1600341846	12.921171
24503700	As a more or less elixir beginner, e	As a more or less elixir beginner, elixir/mix releases remain confusing to me.First of all, it took me way longer than it should be to figure out how to set the entrypoint of my application.More importantly the resulting releases are kinda confusing, at least to me. Why does it need to contain 17 (13 .exe + 4 .bat) executables? Why are there 55 c-header files in the directory of the erts? Why are there so many configuration files?I'm sure that they are there for a good reason, but the current solution is daunting, such that it lowers my enjoyment with the otherwise very elegant language.IMO there should be a release approach that is very simple + compact, and extendable. This would allow people like me to hit the compile button and distribute my application in very manageable parts. Though	zapnuk	12.679393	-7.4624753	comment	5.0	27.0	1600345232	12.932486
24512729	Don't put the logic in activerecord 	"Don't put the logic in activerecord models at all. Not even the data.
Use activerecord uniquely as a querying mechanism (read or write), don't use relationships and don't put validations in there.Create objects (aka behavioral objects, aka servoce objects) for the logic and create entities (plain ruby objects) when you need to pass around the data.Yes, you are essentially eliminating the entirety of activerecord.After 10 years of rails, you realize that is the only safe way to use that library.By the wayUser
User::SignUp
Are related. The behavior doesn't need to be in the same object, the namespace takes care of that already."	Fire-Dragon-DoL	12.983931	-6.5913143	comment	5.0	25.0	1600400304	12.251741
24552096	Nah, it's the PHP of the Java world:	Nah, it's the PHP of the Java world: easy to spin up something quick with, but impossible to maintain.	lmm	12.689458	-6.653168	comment	5.0	25.0	1600762020	10.309958
24606232	How does one avoid type errors in Er	How does one avoid type errors in Erlang applications? If the answer is 'testing' then types are indeed an obvious gap in the language. If it's something else, I'm genuinely interested to know. What makes Erlang so special that a lack of types actually aids (or at least does not at all hinder) in long-term maintenance/refactoring or enforcing type-level constraints on values?	giantDinosaur	12.3743725	-7.4875693	comment	5.0	28.0	1601210722	-8.855645
24605967	What is it about Erlang's AST, that 	What is it about Erlang's AST, that attracts so many language designers?	dynamite-ready	12.569728	-7.5325203	comment	5.0	15.0	1601207863	12.920952
24607854	Ruby's `open` accepts urls. I can't 	Ruby's `open` accepts urls. I can't say I've ever used this functionality.	monadic2	12.561215	-6.9739857	comment	5.0	15.0	1601224274	12.34333
24653525	I'd just like to point out that whil	I'd just like to point out that while knowledge of OTP is a good thing for an Elixir developer, it isn't really needed for most application development. There are excellent libraries and frameworks that leverage OTP to provide a lot of value to their users, and most of us who use Elixir in industry just use those libraries.	jeremyjh	12.668841	-7.4635057	comment	5.0	18.0	1601572476	12.913982
24771056	A Better Crystal Ball?	A Better Crystal Ball?	howsilly	12.651226	-7.2495713	story	5.0	17.0	1602628234	-11.226278
24778920	Read-Only Mode for Better Rails Down	Read-Only Mode for Better Rails Downtime	christoomey	12.754581	-6.9254384	story	5.0	86.0	1602695023	12.340464
24822919	I have to disagree on this point.For	"I have to disagree on this point.Formatting could be beneficial, but it gets abused so fast that it becomes a problem.First thing, no one challenges the choices made by the formatter, which is a problem in the long term. 
The other thing is how far the formatter goes. Rubocop in ruby is a clear example of this, they went way too far with it and producing a readable rspec test is impossible without violating at least one of the rules.A few days ago, I ended up writing something along these lines:```def something
  err, obj1 = dependency1.call(someargs) 
  return err, obj1 if err.nil?  err, obj2 = dependency2.call(obj1) 
  return err, obj2 if err.nil?

  err, obj3 = dependency3.call(obj2) 
  return err, obj3 if err.nil?

  err, obj4 = dependency4.call(obj3) 
  return err, obj4 if err.nil?

 "	Fire-Dragon-DoL	12.499794	-7.079779	comment	5.0	21.0	1603075482	12.392039
24866767	So php tries so hard to be Java. Wel	So php tries so hard to be Java. Well, just stick with Spring and get the job done professionally. Learning PHP these days is a waste of time.	JekLod10	12.709801	-6.652639	comment	5.0	37.0	1603436811	10.297051
24866981	> It's becoming kind of an Enterpris	> It's becoming kind of an Enterprise languageIt tried for decades to be one with Doctrine, Symonfy and co, trying to copy the worst of Java EE with every single possible design pattern implemented in these frameworks, XML configuration files and co...  The problem is no generics, no private packages makes PHP OO a horrible mess compared to Java (or C#).	throw_m239339	12.721542	-6.6485443	comment	5.0	39.0	1603439190	10.325127
24916822	I built a state monitor using Flask	I built a state monitor using Flask	gravesli	12.7225485	-6.564493	story	5.0	2.0	1603877083	-7.619098
24926439	Not to be confused with the Ruby on 	Not to be confused with the Ruby on Rails SaaS template Bullet Train: https://bullettrain.co/	hbcondo714	12.76856	-6.9175	comment	5.0	15.0	1603938524	12.318259
24936187	> It's definitely noticeable when yo	> It's definitely noticeable when you try to learn a newer framework with a much smaller community and less opinions. You could end up Googling for what you might think is a common thing to solve only to find zero answers in sightI have felt this exact way when I'm Googling for problems running Rails in modern cloud environments. It seems like there are loads of problems that are largely unsolved in the community at large when you want to go beyond Heroku and stand your app up in containers against cloud components using best practices. As a Rails newbie it has been downright painful and there have been many cases where I wish I was still writing a language like C# or Java where containers and modern cloud architectures have been embraced instead of shunned.	mdoms	12.756076	-6.8912873	comment	5.0	22.0	1604007116	12.34498
24937874	I'm a back end C++/rust type and I s	"I'm a back end C++/rust type and I script with Python.  
If I wanted to build a front end, is there any reason I'd use Ruby/Rails over Django?  I'm not familiar with Rails but I'm curious if it's worthwhile to pick up."	lubesGordi	12.786969	-6.664117	comment	5.0	15.0	1604018374	10.343083
24952329	I suspect this is driven by the fact	I suspect this is driven by the fact that a boatload of small companies suddenly had to get their businesses online in a hurry. By number of websites and e-commcerce platforms for small businesses, PHP is massive. By amount of use in +$1M ARR established tech companies, it's miniscule. Covid no doubt drove a lot more of the former this year.	iainctduncan	12.788721	-6.63611	comment	5.0	45.0	1604159019	10.329729
24952430	PHP earned its reputation. Whether t	PHP earned its reputation. Whether the reputation earned by previous versions is relevant to the current version is a different question.I'm going to assume it's a decent modern language now, but what's the argument for using it instead of another mature dynamic language like Ruby or Python?	Zak	12.738557	-6.6526284	comment	5.0	33.0	1604159541	10.323617
24952408	This is silly. Lots of large compani	This is silly. Lots of large companies use php for their internal applications. I built a php based backend for one of the largest sellers on amazon, in php. That company is approaching $1B in annual revenue.Php allowed my team to move amazingly fast and deliver what the business needed very quickly. In e-commerce and dealing with Amazon specificity, rules and methods change monthly and you always have to be able to quickly pivot to remain competitive and I think php was a big factor in allowing this to happen.	AaronNewcomer	12.781828	-6.6226535	comment	5.0	32.0	1604159432	10.310767
24953308	What does 'profoundly bad language' 	What does 'profoundly bad language' mean exactly?When PHP was first released it was dramatically better than the alternatives for it's intended purpose.There were plenty of things to complain about, but none of them stopped you from doing useful things with it. It was never slow or inefficient compared to other scripting languages, it didn't lack functionality.Over the decades the most popular complaints have been addressed as the language has matured.That it's remained in active development for 25 years with no signs of that changing in the future is one of it's biggest selling points.I don't blame people for having issues with aspects of PHP based on their personal preferences and experiences, I get that, but that doesn't make it a 'bad' language.There's nothing wrong with purist perspec	post_below	12.758712	-6.6531	comment	5.0	43.0	1604165054	10.33188
24998235	I went from Rails to a Node-based st	I went from Rails to a Node-based stack with a job change recently and the backend libs we're using feel comparitively like pushing boulders uphill, which I didn't expect. (There may be more/better options than what we're using of course.)	Glyptodon	12.769769	-6.8812366	comment	5.0	25.0	1604584795	12.325593
25088015	Why the Release of Ruby 3 Will Be Mo	Why the Release of Ruby 3 Will Be Monumental	tomashertus	12.636472	-7.0411263	story	5.0	18.0	1605304677	12.3860445
25160700	Erlang/OTP inspired actor systems th	"Erlang/OTP inspired actor systems that run Webassembly code are a brilliant (and potentially way superior) alternative to microservice madness.Until now adopting Erlang or Akka meant restricting yourself to a single language ecosystem, but Webassembly maturing and more and more languages gaining support means that you can still use a heterogeneous ecosystem while benefiting from   easy sandboxing and isolation, almost instant startup, actor snapshotting/migrations, a unified way of inter-service communication ...All while avoiding the  complexities of grpc, building Docker images, Kubernetes, service meshes, ""serverless"" frameworks, ...WASM running in the browser  pushes languages to adopt it. Even Microsoft is really investing into dotnet support via Blazor [5].Also check out wascc [1] [2"	the_duke	12.4142885	-7.3169255	comment	5.0	25.0	1605882524	12.832556
25163754	Isn't crystal lang trying to do the 	Isn't crystal lang trying to do the same thing? Why not join forces?	exabrial	12.626407	-7.2640185	comment	5.0	23.0	1605899346	-11.226031
25166237	Ruby doesn't.Python, until recently,	Ruby doesn't.Python, until recently, didn't.	t-writescode	12.428735	-7.044686	comment	5.0	18.0	1605913817	12.374925
25174094	Ruby's flexibility makes it great fo	Ruby's flexibility makes it great for going fast and hacking things, but oh my god can it lead to monolithic spaghetti.Magical eager backfills, mysterious action at a distance method_missing dispatch, crazy class hierarchies and transclusion, endpoints with reflective behavior, nonsensical tests with horrific abuse of rspec, ...I've spent engineering years tearing down Ruby crud others have built, and it's led me to have a distaste for the language like no other.	echelon	12.595224	-7.046401	comment	5.0	20.0	1606008556	12.382366
25220977	Php was my first language I learned 	Php was my first language I learned 15 years ago. On that way I really started to hate it because of all it's quirks. Many of those have been fixed and nowadays I really enjoy it again and it's my goto language for any web project.It really hits a pragmatic sweetspot. It's really easy to deploy and frameworks like symfony give you all the power like rails but without the magic.	laszlokorte	12.753493	-6.6405478	comment	5.0	41.0	1606405745	10.348448
25221311	Does PHP still has that weird flow w	Does PHP still has that weird flow where each request is its own process? afair PHP never had an http server baked in, I remember nginx with php etc ...	Thaxll	12.728847	-6.601372	comment	5.0	22.0	1606408078	10.232654
25282666	Long live PHP.15 years of PHP dev wo	Long live PHP.15 years of PHP dev work. Games, mobile apps, health care, etc. I have been unemployed for 2 days in 15 years. PHP runs %80 of the internet.  Talk to anyone at facebook that wears a suit on friday -- they code PHP (and it seems to scale for them). I think I will be 90 years old hacking on PHP.If you really don't like how the arguments are passed just use an IDE. Or get stuck with real problems like a transition from python2 to 3.  (wtf)	ransom1538	12.75589	-6.6339693	comment	5.0	22.0	1606948527	10.311169
25282824	Somewhat unrelated comment, but the 	Somewhat unrelated comment, but the fact that PHP got so good and most people are still not willing to give it a second chance goes to show how hard it is for a language to regain market share after people left for greener pastures.	latenightcoding	12.779193	-6.6516905	comment	5.0	23.0	1606949424	10.357668
25367214	Hey, Bartek from deno.land here.I'll	Hey, Bartek from deno.land here.I'll be more than happy to answer your questions about Deno and its development.	bartlomieju	12.52916	-6.448704	comment	5.0	77.0	1607557507	-11.034127
25390952	I'm trying to figure out what ROS2 i	"I'm trying to figure out what ROS2 is -- judging by the docs and tutorials it seems like a very low level and abstract piece of complex software but I'm struggling to understand its practicality.Can someone provide an ELI5 or like a few sentences of a ""pitch"" style overview?"	lxe	12.696509	-6.85698	comment	5.0	17.0	1607720628	12.224388
25427126	Are there any good examples of open 	Are there any good examples of open source projects written with ReScript?I was searching for this recently and came up short... Is it mainly being used inside Facebook?Kind of a shame as the ideas look good.  I would like something like Elm, but Elm doesn't interoperate with JS.	chubot	12.393122	-6.753864	comment	5.0	27.0	1608007836	-10.46333
25427609	I want to write my front end and bac	I want to write my front end and back end in the same language - Reason - and compile the backend to native code. So, ReScript doesn’t work for me? Are people still using or working on Reason, or is it dead?I feel like this fork might make sense inside Bloomberg, but it’s killed my enthusiasm for this language family.	jitl	12.386941	-7.4876056	comment	5.0	16.0	1608013712	10.322418
33049919	I like the idea of typescript.I trie	I like the idea of typescript.I tried to port a vanilla js browser game to typescript and I found it introduced a lot of complexity to the project. It sucked me into the npm ecosystem and forced me to rewrite every file to use js modules import/export syntax and a bundler like webpack to resolve all the modules business for browsers when none of those were needed before.Of course I could set TS modules to none but then I lose access to typing of any third party libraries I'm using like PixiJS.And my CI pipelines are like 10x slower now because I need npm to install and compile and bundle stuff which is really slow compared to my previous CI pipeline which simply concatenated the js files together with `cat`.Does this sound right or an I missing something? What I want:To be able to just typ	umvi	12.3998165	-6.5220013	comment	5.0	20.0	1664656870	-10.445071
33049700	This seems like a great time to anno	This seems like a great time to announce my successor to CoffeeScript: Civet, a language that transpiles to TypeScript.https://github.com/DanielXMoore/Civet	Yahivin	12.376163	-6.6812267	comment	5.0	17.0	1664655491	-10.478071
31794340	This reminds me of the studies done 	This reminds me of the studies done related to traffic lights and stop signs.Removing traffic lights and stop signs actually reduces accidents because drivers are more careful when driving through intersections which reduces speeds and drivers become more alert.Developers will adapt to their toolset.  If you have a statically typed language, you trust it will deal with type related issues and you become more lax with testing things related to types.  When you develop in non-typed languages like Ruby, you tend to write more tests and not trust your compiler (because you don't have one).  This is why you will find most Ruby developers are really good at writing tests and embracing TDD.	drujensen	12.355757	-7.091567	comment	5.0	22.0	1655591028	-13.296149
31794485	It is not evident to me. Having used	It is not evident to me. Having used both statically typed and dynamically typed languages my experience is that I can't remember ever seeing a bug in our fairly large rails app that a type system would catch. Nobody's passing strings where hashes are expected, or Widget instances where User instances are expected. The thing to pass to the function is nearly always self evident. If you did it would immediately be caught when a test runs anyway.However, refactoring code in C# is much easier than refactoring ruby because you can lean on the type system there. However writing new code in C# is often much harder to do in C# because of the constraints of the type system. So really, it ends up being a wash for me.	jacobsenscott	12.358813	-7.1559267	comment	5.0	28.0	1655592372	12.41949
31828297	I'm not deep in Node world but I use	I'm not deep in Node world but I use it and see it being used, who is using Deno out there? Have there been some notable/major ship jumps? Or is it not that kind of situation (perception from when it came on the scene is that's exactly what it is, constantly trying to woo Node devs over). And also there's alot of recognizable brand competition out there from things like Cloudflare, Netlify (but they're an investor in this?), Vercel on fire the last year or two, and not to mention the big FAANG types. Again, who's using this?	ChrisArchitect	12.51087	-6.4684587	comment	5.0	21.0	1655840876	-10.938103
31830312	Deno is only possible because V8 is 	Deno is only possible because V8 is so hyper-optimized. If you think about it, V8 has to compile/interpret and then run javascript code on the fly after downloading it in the browser. That's how good V8 is. That puts javascript in a unique position to enable something like DenoSo if there was a compiler/interpreter for another language that was close to being as good as V8, then something like this could exist for other languages.Also, it looks like wasm works on Deno, so that gives some other languages.	spencerchubb	12.470058	-6.452714	comment	5.0	22.0	1655854103	-10.907859
31854617	A lot of the comments here are rails	A lot of the comments here are rails oriented and anti state machine. In the context of rails that may make sense, but I do a lot of non rails ruby, and non object oriented Dev style, and state machines are a great way to write solid systems where the allowed state and transitions are explicit and easy to reason with.	fortysixdegrees	12.513251	-6.8240395	comment	5.0	18.0	1656015415	12.267714
31920122	Ruby remains in relatively high dema	"Ruby remains in relatively high demand, despite a decade of once a month blog posts claiming ""Ruby is dead"""	Trasmatta	12.685939	-7.0033827	comment	5.0	22.0	1656510863	12.385456
31920165	No mention of Elixir at all, which w	"No mention of Elixir at all, which was one of the ""most loved"" language in SO survey. Not sure what to make of it."	rockyj	12.672998	-7.4619236	comment	5.0	15.0	1656511073	12.929091
31928583	There's 3 languages in the same clas	There's 3 languages in the same class. Julia, Nim and Crystal.I'm specifically curious about Crystal vs. Nim. Benchmarks show that crystal is pretty much faster, but I'd also like to know the advantages of why someone would choose Nim over Crystal I'm looking for reasoning that is deeper then just superficial language syntax differences.Has anyone extensively used both? I would like an unbiased view from someone who has used both as opposed to someone who's only used one.	deltaonefour	12.481914	-7.2885594	comment	5.0	22.0	1656561319	-10.964932
31954015	Does the lack of async still make Fl	Does the lack of async still make Flask a good choice for non-hobby web projects?	socialist_coder	12.600534	-6.6108556	comment	5.0	24.0	1656715686	9.859146
32006074	To wit, a personal anecdote:My tiny 	To wit, a personal anecdote:My tiny company is torn between throwing out our ruby code and trying to hire more ruby developers. Our senior ruby guy is leaving, and the one senior candidate we had accepted, then later rejected, our offer. Of the other interviews we have had, candidates were asking for too much (i.e. over $200k base salary) and often barely qualified as a senior, or were simply too inexperienced to replace the person who was leaving.I'm about one more round of interviews from throwing in the towel and doing a hulkamania hackathon in a new language. The existing code really isn't great either (deprecated gems, lots of accidental complexity, etc) so it is almost tempting to think it would work.	zdragnar	12.661422	-7.012104	comment	5.0	21.0	1657137826	12.37529
32043460	My favorite Erlang container	My favorite Erlang container	eproxus	12.548788	-7.5365844	story	5.0	137.0	1657449293	12.936668
32116399	There are thousands of little things	"There are thousands of little things that make Ruby nice. They all add up to a more enjoyable experience. I'll give you one tiny example:Python:    from datetime import date
    if date.today().weekday() == 5:
      print(""It's Saturday"")

Ruby:    require 'date'
    puts ""It's Saturday"" if Date.today.saturday?"	shaicoleman	12.649507	-6.9954805	comment	5.0	67.0	1657963220	1.5522305
32116505	as someone who has used ruby for yea	"as someone who has used ruby for years, and more recently got a job working in python, I think the most significant difference between the two languages is how they handle imports.in python every file is also a module, and all imported symbols are namespaced within that module (unless you deliberately use ""import *"" to bring them into the current module's namespace). so you can define function foo in module bar and use it via ""import  bar; foo.bar()"".in ruby, modules/namespaces and files are two entirely orthogonal concepts; you define a module by enclosing code in a ""module Foo; ...; end"" block, and any file can open up the same module and add stuff to it. when you import a file it adds everything within it to the current global namespace, which makes it really hard to read a piece of rub"	zem	12.416044	-7.0442004	comment	5.0	39.0	1657964642	12.381787
32117939	I tried for many years to be happy w	I tried for many years to be happy with Ruby.Ended up leaving it behind because more often than not, when I revisited a Ruby codebase after a while, Bundler would complain and tell me that I’m supposed to run `bundle install` something, and sure enough, doing just that sent me into a rabbit hole of errors.	Hackbraten	12.556935	-6.914429	comment	5.0	29.0	1657978695	-9.25132
32120104	> Anyway, Ruby was designed to make 	> Anyway, Ruby was designed to make programmers happy, and it is a big success at that.I switched to golang from ruby and I definitely don't miss the ctrl+f hunts to figure out the source code of functions in ruby programs. its even worse when dynamic programming is used to create 'helper' methods (e.g. `{attribute_name}_changed?`) that you have to read through lines and lines of code to find anything.	itake	12.524973	-7.0921426	comment	5.0	32.0	1657992674	12.374243
32128827	Is there a way to make TST look nice	Is there a way to make TST look nicer? I’m sure a lot of people appreciate its UI, but it really stands out to me in a negative way.	appletrotter	12.33318	-6.7662582	comment	5.0	15.0	1658078339	-8.429763
32179663	IMHO: Companies that make a profit a	"IMHO: Companies that make a profit are in php and rails (rarely in python). Companies that do not make a profit or have no intention to are in elixir, rust, typescript, go and node.  I don't think this has anything to do with the language used - it's the attitude of the founders: ""let's use easy boring tech""- that type of thinking extends into the business. The founders are focused on solving a business problem - not some hipster js framework.  I don't want to code php, but after year 20 i am confident there is no escape."	ransom1538	12.743145	-6.6690016	comment	5.0	16.0	1658412858	10.378764
32221469	While hardware accelerators in robot	"While hardware accelerators in robotics are very cool, and needed.
The fact that the entire workflow is ROS2 centric is a bummer.
FPGA and Accelerator Programming is already a huge PITA, and despite it's success ROS is really one of the worst frameworks I've ever used in terms of DX.
It makes an already hard problem, needlessly harder.I wouldn't be surprised if they developed their own FPGA programming environment based on C++ and CMake, and all kinds of other custom language and tool shenanigans."	j-pb	12.645682	-6.855687	comment	5.0	29.0	1658733816	12.196565
32279359	Dogelog player is a Prolog system fo	Dogelog player is a Prolog system for the JavaScript and the Python platform	bryanrasmussen	13.140539	-7.290836	story	5.0	54.0	1659114103	-12.491874
32326789	> I feel like PHP documentation is v	"> I feel like PHP documentation is very undervaluedPHP is documentation done right because of the comments, essentially ""Stack Overflow"" for PHP before stackoverflow.com was a thing.I've found an example of documentation done wrong recently with Microsoft .NET 6.0. Apparently, Microsoft has decided that code samples are no longer important"	labrador	12.759198	-6.626721	comment	5.0	17.0	1659492191	10.297656
32329990	The most anticipated Django release 	The most anticipated Django release for me personally. Async ORM access is a massive quality of life improvememt, same for async CBV. The later is also a blocker for Django Rest Framework going async.Sure most CRUD applications work perfectly fine using WSGI, but for anyone using other protocols like WS or MQTT in their app this is kind of a big deal.	WhatsName	12.598611	-6.6565557	comment	5.0	60.0	1659523695	9.962244
32413871	Sure, but Ruby could've been a playe	Sure, but Ruby could've been a player in data science as well. But for some reason Python won handily in that space. Was it all down to numpy, scipy, etc?	UncleOxidant	12.504616	-7.027378	comment	5.0	18.0	1660146139	12.401489
32468126	Desktop Apps with Deno	Desktop Apps with Deno	modinfo	12.504721	-6.4432507	story	5.0	72.0	1660561218	-11.008114
32502412	Honestly I will always be saddened b	Honestly I will always be saddened by the fact in this reality Python won out over Ruby in the readable scripting language wars. Writing Ruby feels elegant, it feels fluid, it feels like creating.Working with Python always leaves me with a sour taste in my mouth and frustration after having to try and figure out how to make modern concepts work well, and giving up and going back to old imperative styles of coding.	buscoquadnary	12.498049	-7.0325623	comment	5.0	25.0	1660774609	12.369619
22058541	IMO, Yes (usually).Let me elaborate.	IMO, Yes (usually).Let me elaborate.If you are starting a new project, yes use typescript over JS. And configure it with all strict options.This doesn't magically give you well architected and well-tested code, it still takes a good engineer to do that. But what it does allow is for the engineer to refactor the code to support new functionality with more speed and confidence, rather than shoehorning it in in fear of breaking something or it taking too long. Furthermore, as people join your team, it will be a lot easier for them to figure out where some piece of data is coming from and how the code flows from one spot to the next.If you have a massive JS project and you want to convert it to typescript. The answer might be no. Oftentimes when people port a JS project to TS, they end up usin	sethc2	12.37937	-6.7976656	comment	5.0	24.0	1579122234	-10.471296
22058935	So is Shopify the biggest fish still	"So is Shopify the biggest fish still on the Ruby stack? 
Nice article detailing how they did an upgrade to openId connect to allow SSO on multiple shops within a client company."	ivankolev	12.755375	-6.941871	comment	5.0	51.0	1579124102	12.381369
22073943	Senior here, 20 years experience, st	"Senior here, 20 years experience, started out with C++ projects where the only quality gate was the build server failing and currently working on a project where commits fail because of lint rules including things like imports being alphabetized.IME the best approach is a ""balanced"" one. Let devs push their branches from local to the repo without passing tests or lint rules. (e.g. git push --no-verify). Try and keep your tests fast so devs want to run them locally. (Carrot, not stick). But prevent a merge request from being merged to your trunk branch until everything is green.Personally I find ""linters"" horrible. They're like someone with OCD leaning over your shoulder while you code. I think VS Code actually runs a LOT slower when the linter is integrated, which can do more harm than goo"	davedx	12.367438	-6.78321	comment	5.0	18.0	1579262632	-10.454303
22091418	Ruby could use a proper module syste	Ruby could use a proper module system as well. Ruby's require evaluates Ruby code and changes global interpreter state. Python's modules are so much better. Javascript's require is so simple: a function that returns a module object.	matheusmoreira	12.485405	-7.034061	comment	5.0	23.0	1579441957	12.375004
22091854	> It's readable...when you start to 	> It's readable...when you start to learn a new programming language, you look up what people are doing. ruby let programmers write incomprehensible and unfriendly code. my experience is that it has been a huge turn off for beginners. there was a rush to make popular websites in the rails era, but that ended quickly.as another example, cpp used to be a cool language to read and write in. they even taught it as first programming language. since then, they added some crazy stuff that made the language very unfriendly when put in the hands of some people. it is now very beginner unfriendly.the syntax of python will remain a great inspiration for readability if they don't make the same mistakes. it always amazes me to see people from all levels read python the first time and get it.	blondin	12.367106	-7.001198	comment	5.0	18.0	1579447308	12.382326
22092069	If you want No Code solution, AirTab	If you want No Code solution, AirTable and Coda. On one hand I sort of wish more business knew about it as it would likely simplify most of their work load. On the other hand I dont want that to happen as it gives current businesses advantage.For Coding Solution, ( Incoming Unpopular opinion ) if you dont mind modern PHP, ( which is a lot better than old PHP) Laravel [1] is to my mind undoubtedly the king of CRUD framework.  The whole ecosystem is, and continue to be outpacing and growing faster than Rails ecosystem. Which makes me very envy.If you dont like PHP, then Ruby Rails.[1] https://laravel.com	ksec	12.786807	-6.6497498	comment	5.0	21.0	1579449666	10.366313
22112303	PHP is, and always has been a practi	PHP is, and always has been a practical language.7.4 has been especially exciting with the introduction of FFI. Few other languages even have runtime FFI, and in most cases you have to do the binding stuff in C.I even ported a terminal-mode text editor (which uses FFI somewhat) from C to PHP: https://git.timshomepage.net/timw4mail/php-kiloI would guess most of the PHP haters got stuck working on Wordpress, or someone's old business app, or they just hate PHP because it's popular to do so.	timw4mail	12.747348	-6.645902	comment	5.0	21.0	1579645240	10.348029
22115572	The thing about PHP is that the lang	"The thing about PHP is that the language has built-ins for almost everything you need for classic web development.Want to use a relational database?  You don't need to install a library (often one that requires a C extension in a language like Python or Ruby).  It's just part of the language.  Just do `$mysqli = new mysqli(""localhost"", ""my_user"", ""my_password"", ""world""); $result = $mysqli->query(""SELECT * FROM x"");`.Want to get things out of the HTTP request?  PHP has already parsed everything into the `$_REQUEST` associative-array (map/dictionary).  You don't need something like Flask or Node to deal with decoding the request.Cookies, response writing, uploaded files, GET/POST vars, sessions, and many more things for web development are built-in.  Heck, PHP even simplifies templating beca"	mdasen	12.75059	-6.5906463	comment	5.0	34.0	1579680153	10.317691
22115933	I don't doubt that PHP is becoming (	"I don't doubt that PHP is becoming (has become?) a decent language. Especially with frameworks such as laravel which are mature and clean.But PHP has a legacy, lots of bad PHP code exists already, bad practices are usually the first result on google and very ""lazy"" developers who never learned anything else exist and this muddies the waters very much when talking to people who prefer to build new things in PHP.There's also the nitpicky fact that the old way of running PHP was that every page request runs the code from scratch, meaning you have to build state each time which is profoundly expensive and inefficient, although I believe people rarely do this anymore it's still definitely the default for most PHP projects I've seen. (both FOSS and proprietary).I don't like your overgeneralisati"	dijit	12.774749	-6.6561313	comment	5.0	19.0	1579684915	10.367428
22138516	This won't be hard to search for at 	This won't be hard to search for at all. https://lumen.laravel.com/	evilduck	12.813812	-6.6376405	comment	5.0	31.0	1579876013	10.372706
22151707	I was very interested in reasonml an	I was very interested in reasonml and had high hopes it would gain a lot of traction, but for an outsider, there doesn't seem to be a lot of activity on reasonml itself, the last release is from 18 months ago and if I'm not mistaken, there's no public repo of reasonml itself.  Despite this you see projects like onivim 2 and esy using it, making me wonder if I'm missing something. Anyone here knowing what the state of reasonml development is?	raphinou	12.351573	-7.5837564	comment	5.0	23.0	1580040932	10.312146
22159505	This makes me not want to learn elix	"This makes me not want to learn elixir. Learning one language and becoming masterful at it is hard enough. There's too many ""learn this language, but also this other language and platform""'s in my life (JVM-based work, and anything in the front-end JavaScript world it feels like these days).  It just feels like you are telling people ""Here, learn this language, but also learn the assembly instruction set for your architecture as well"" -- that's not the reason I choose to use higher level language."	alharith	12.662752	-7.4563384	comment	5.0	15.0	1580135326	12.928722
22190817	The Let It Crash Philosophy Outside 	The Let It Crash Philosophy Outside Erlang	Stratus3D	12.45869	-7.484542	story	5.0	93.0	1580386636	12.904259
22195241	This is my biggest criticism of Java	This is my biggest criticism of JavaScript: it fails silently quite often. `{}.foo` returning `undefined` is the most common culprit, but there are many other possible causes.Django templates also do this, which causes all sorts of debugging problems.	kerkeslager	12.638782	-6.448176	comment	5.0	23.0	1580416410	9.960823
22207104	How does TypeScript ensure encapsula	"How does TypeScript ensure encapsulation if it doesn't have nominal types?Edit: The article says ""magical hidden properties""."	aratakareigen	12.326192	-6.9333444	comment	5.0	19.0	1580513682	-10.418807
22220704	Given how much PHP is used, having a	Given how much PHP is used, having a JIT will probably save a meaningful amount of electricity	piinbinary	12.629185	-6.6591535	comment	5.0	25.0	1580693025	-9.11998
22221035	Honestly php seems like the common c	Honestly php seems like the common cold... an annoyance that is everywhere and treated with little seriousness. However every evolution it gets better and stronger and adapts other learnings from other languages. It really shouldnt be treated as a joke any more.Ps: I love php and jquery...  not for any real saas systems but no other tool set allows me to spin up and prototype full web app prototypes  in sub 90 min. As a senior tech manager php and Jquery allow me to show functional prototypes quickly and easily get buy in from other department stake holders.	mharroun	12.745135	-6.6254673	comment	5.0	61.0	1580698279	10.353751
39355787	Shell scripting in Elixir is like le	Shell scripting in Elixir is like leaf-blowing your driveway with a helicopter.	hresvelgr	12.682481	-7.447605	comment	6.0	30.0	1707813787	12.943885
39363895	If you don't know what a dataframe i	If you don't know what a dataframe is, it doesn't matter what Polars is then, not for you.	dist-epoch	12.348113	-6.546715	comment	6.0	36.0	1707864329	10.139626
39379273	Anonymous Block Forwarding in Ruby	Anonymous Block Forwarding in Ruby	thunderbong	12.40213	-7.078205	story	6.0	27.0	1707973082	12.365337
39404825	Yeah. I recently worked on a small w	Yeah. I recently worked on a small web project being developed at a university. The project is written in flask, and it presents a reasonably simple UI on top of some data living in a mysql database.When I started on the project, page loads often took 10 seconds or more. The web application is used by about 20 people and that was enough to bring their single beefy server to its knees. Someone in NY tried scraping the site the other week and the site became completely unresponsive. They resorted to banning the IP to keep the website up. The reasons it was slow were all the usual culprits - a misused ORM being the main one.It’s a nice language, but I really felt like I’d been transported back in time a few decades working in it. It feels like I’m using a computer from the 90s where performan	josephg	12.742577	-6.56962	comment	6.0	23.0	1708129213	10.2536545
39435262	Building a hybrid native application	Building a hybrid native application with Gleam and Tauri	wezm	12.532415	-7.4088573	story	6.0	101.0	1708379479	-12.371261
39455800	Wow, I didn't realize there's a Ruby	Wow, I didn't realize there's a Ruby on Rails podcast that's been running for 15 years. That's seriously impressive.Sometimes I wish I was programming during the RoR hay days. It just seems like a damn fine framework and it's got a real cult (in a good way) following.	jjice	12.736661	-6.9497647	comment	6.0	27.0	1708532638	12.362377
39456659	I was programming Rails during the H	"I was programming Rails during the Heyday.I don't miss it one bit. Yes, you can build things quickly, ""rails g scaffold"" was quite a tool.But the level of discipline required to keep a large Rails codebase from turning into spaghetti is not to be underestimated. Plus, because of Ruby's flexibility, a bunch of functionality is sort of ""magic pudding"" and happens via extension and meta-method sort of things.This makes things like Ctrl+Click being the source of truth and being able to generate some sort of ERD-diagram in your IDE of everything that touches another thing difficult to implement.I also don't miss dynamic types in the slightest.Nowadays, I would rather look at Laravel with Livewire and Alpine.js if you want something Rails-esque. PHP is godawful though."	gavinray	12.743093	-6.8930116	comment	6.0	18.0	1708536152	12.254216
39629890	I very much concur that it is better	"I very much concur that it is better NOT to introduce TS when explaining JS fundamentals. I've seen smart engineers with a C++ background get tripped up on and very confused working with TS, because it's not clear to them what concepts are ""language fundamentals"" and what concepts are ""the TS transpiler"".(Like expecting that just because you declared something as type X, that it guarantees at runtime it will always be type X, but it won't. You may get data from an API that _says_ it returns type X but the contents don't match. That can be valid code that compiles and has weird runtime behavior)"	OmarShehata	12.3442955	-6.829935	comment	6.0	26.0	1709823640	-10.453
36570482	Because PHP (heavily inspired by Per	Because PHP (heavily inspired by Perl, but not as well thought out) came with all the glue to directly use it to generate web pages. Then came Ruby (also inspired by Perl, but with a more mainstream syntax, and nicer in some ways), and Ruby on Rails conquered that space even more. Also, Python came along which is indeed a bit more suitable for larger projects needing structure.Meanwhile, Perl was being badmouthed by people who couldn't handle its flexibility and thought it was unreadable and unmaintainable. But that wasn't the main issue, after all PHP was worse in those two respects, yet it flourished.	gpvos	12.594019	-6.681995	comment	6.0	32.0	1688374885	12.917579
36576352	I hereby officially announce the Eli	I hereby officially announce the Elixir type system effort is into development	sergiotapia	12.688227	-7.454916	story	6.0	64.0	1688406059	12.930207
36598346	If the Typescript team got carte bla	"If the Typescript team got carte blanche to create their own language, it would likely be... C#.TS is complicated and chaotic because the language it compiles down to is. TS' aim is to model the behaviour seen in JS in a flexible, user-friendly type system. Good luck!What doesn't make sense to me is when teams (like mine) have a blank slate and the choice of any mainstream backend language, and then opt in to that ecosystem anyway. TS is good when you're coming from JS sure, but some of us have used more ""sane"" languages like C# and Go :("	sk0g	12.3628845	-6.7620177	comment	6.0	29.0	1688553002	-10.4407425
36619653	They ended up compiling PHP to assem	They ended up compiling PHP to assembly! Facebook is a company that will go to ridiculous lengths to avoid rewrites.	disgruntledphd2	12.795971	-6.5570846	comment	6.0	27.0	1688664694	2.8842597
36638163	> In some cases, for pure data valid	> In some cases, for pure data validation and processing, you can get performance improvements of 20x or more. This means 2,000% or more.Amazing! Excited to try it out.Slightly OT: But what are some use-cases where you'd still use Flask over FastAPI? I really like FastAPI's devEx and don't see myself going back to Flask anytime soon. Curious to hear what others think.	krat0sprakhar	12.537125	-6.592738	comment	6.0	34.0	1688763249	-9.416262
36852231	Elixir is still safe	Elixir is still safe	manusachi	12.684103	-7.459459	story	6.0	237.0	1690222957	12.947134
36876012	Customize Django Admin Interface	Customize Django Admin Interface	appliku	12.865109	-6.4992976	story	6.0	61.0	1690371465	10.10531
37123178	For those of you who are interested 	For those of you who are interested by Elixir but find the lack of static typing an issue here are somethings to be aware of:1. Static Typing is planned and currently the top priority of the teamhttps://elixir-lang.org/blog/2022/10/05/my-future-with-elixi...2. There is a type checking toolhttps://github.com/jeremyjh/dialyxir3. You can go a long way with pattern matching and guides in the meantime and have alot more guarantees that a typical dynamic typed language.	bnchrch	12.4541645	-7.426519	comment	6.0	62.0	1692031521	12.893304
23397813	I rewrote a codebase for a major sto	I rewrote a codebase for a major stock exchange in about four months. It was originally in Ruby, which is my most proficient language, and my implementation was in Python, my second most proficient language.The original Ruby codebase had been worked on for years and was a complete mess. Not because of Ruby, but because the people that developed it were a little sloppy or junior or time pressured. Who knows?It's totally possible to do a rewrite and to do it well. The advantage of having a pre-existing implementation is that it's far, far easier to write tests before you implement because most edge-cases are covered in the existing implementation. Make sure you do a feature freeze before you start, then once you're ready for production do both shadow testing and canary testing and things wil	3pt14159	12.649145	-7.00121	comment	6.0	20.0	1591140891	12.357091
23433236	Crystal and Ruby do not even remotel	Crystal and Ruby do not even remotely have the same semantics. They look similar but the similarity is extremely superficial. The extra semantics that Ruby has have a massive impact on performance, for even the most optimising implementations. This is not a reasonable comparison if you do not consider the 'slick as Ruby' part. No runtime metaprogramming! The entire Ruby ecosystem is built on runtime metaprogramming!(Crystal is a fine language and compiler - but it's nothing to do with Ruby.)	chrisseaton	12.624685	-7.2318473	comment	6.0	64.0	1591387192	-11.25837
23448986	About 5 years ago I attended a local	"About 5 years ago I attended a local code meetup and someone gave a presentation about this new TypeScript thing. He basically just explained the basic syntax, concepts. etc. A bit boring, but not the worst I've seen.Then in the Q&A someone asked a ""In our experience, we've had problems with X, what's your take?"" (I've forgotten what X was specifically), and the guy replied with ""well, actually, we haven't really used it yet, we're just looking at it"".So ... he basically just read the TypeScript ""getting started"" tutorial, transformed it to a presentation, and had no real knowledge of TypeScript.The entire talk seemed pretty useless to me. I don't even know how accurate that presentation was, because there's much more to using a language effectively than the basic syntax learned from a gla"	Carpetsmoker	12.351748	-6.799857	comment	6.0	34.0	1591551113	-10.449328
23642769	Idk,I actually don't understand the 	Idk,I actually don't understand the obsession of many with Tech Stack or predicting the doom of a language. Because Facebook uses PHP for their service, Would you still use PHP? A lot of people despise PHP. But there's PH maker Mubs, most of his indie products LAMP stack. The main lesson I get from any of these is that pick the one that you're comfortable with and deliver the project than looking for what's the best tool in 2020	amrrs	12.733199	-6.666784	comment	6.0	42.0	1593104332	10.333929
23777936	I’ve worked on several large Ruby co	I’ve worked on several large Ruby codebases, and the thing is, the same qualities that make it easy to get a Ruby project up and working quickly make it a complete nightmare to maintain later. Its expressiveness and malleability mean that you can never really be sure that you understand how code is being used, and the complexity that emerges from a few years of that is incredibly overwhelming. Nowadays I would much rather slog through ten times as much Java boilerplate, because later I’d expect that I could still refactor code without fearing that the whole thing would collapse around me	jes5199	12.61124	-7.029946	comment	6.0	36.0	1594281152	12.357718
23891365	I have the feeling that Erlang is gr	I have the feeling that Erlang is great, but only if you are working in a very specific problem domain.For example, I wondered if there is a GUI library for Erlang, and the response with the most votes here [1] is that people don't write GUIs in Erlang.The other answers point to wrappers around libraries written in other languages.I think that is suspicious for a language that has been around for such a long time now.[1] https://stackoverflow.com/questions/97508/what-libraries-can...	amelius	12.55203	-7.5161824	comment	6.0	22.0	1595183765	12.92183
23912301	I am a (very) hobbyist web dev, almo	I am a (very) hobbyist web dev, almost always working with vanilla HTML+JS. I seeing a while lot of people here who are saying that Typescript is an absolute must.As someone who has no clue, and with all do respect, why would TypeScript be worth moving from just hitting save to introducing a build system and dependencies?	jedimastert	12.374132	-6.7694564	comment	6.0	21.0	1595376034	-10.458804
24020328	I think most people using Perl for a	I think most people using Perl for anything non trivial (eg, large web app with Catalyst) are unlikely to be changing their version of Perl without a good reason, and very few people are starting large Perl projects now days. My day job is working on a fairly complex app running 5.28.1, we have no desire to change the Perl version without a very good reason to do so.I find this post a little unsettling. It seems like even the Perl community is unsure why they are doing this.At least for me, Perl === Perl 5 (and probably always will). It works, and it's ecosystem is very mature.	lmiller1990	12.337898	-7.0510178	comment	6.0	78.0	1596288927	13.176946
24058923	I've seen this quote a few times ove	I've seen this quote a few times over the years:> All general purpose PHP frameworks suck!>  – Rasmus LerdorfRasmus said this an awfully long time ago - 2013 or earlier?Truth of the statement (then or now) aside, Rasmus was a C programmer long before he was a PHP programmer, which presumably strongly informed this position.	Jedd	12.764934	-6.624993	comment	6.0	21.0	1596620930	10.374417
24091096	Formulog: ML + Datalog + SMT	Formulog: ML + Datalog + SMT	matt_d	13.175919	-7.0325513	story	6.0	129.0	1596889430	5.8259735
24094533	Elixir is a super fun language but s	Elixir is a super fun language but suffers (at least in my opinion) from a serious lack of remote jobs. And I suspect it’s because of the nature of Elixir jobs in general: load-heavy and systems-heavy tasks for critical roles (fintech etc), which means it’s tricky to hire someone thousands of miles away to do the work.	bnt	12.696966	-7.458683	comment	6.0	19.0	1596915693	12.937871
24121160	waiting for a rails like framework t	waiting for a rails like framework that would let me use only one language full-stack.	boltzmann_	12.647478	-6.984253	comment	6.0	22.0	1597158909	12.368499
24153335	The thing I love most about PHP is t	The thing I love most about PHP is that regardless of the new features they seldom break backward compatibility. I have a site created with PHP 5 that runs absolutely fine with PHP 7.0 and I don't remember we had to ever update anything in that huge codebase.It's a pretty big achievement and avoids a lot of hassle for users as you don't have to maintain different versions of programming languages on a server.	superasn	12.771225	-6.643388	comment	6.0	27.0	1597378873	10.311355
24160424	ReScript (previously BuckleScript an	ReScript (previously BuckleScript and Reason)	ccapndave	12.346657	-7.403633	story	6.0	22.0	1597424761	-10.472126
24174864	Article piqued my interest, but also	"Article piqued my interest, but also left me scratching my head a bit - everything mentioned is kinda vague / abstract.Elixir/BEAM are ""better"" but better than what? Curious the author's prior language experience.What's he developing with it exactly? Native apps? Web stuff? Or just learning / experimenting?Didn't really understand how the Elixir / BEAM approach is different from typical threads, OS processes, or async programming models - maybe asking too much from a short post :). But still would be interesting to have some specific examples of how Elixir/BEAM is better."	QuadrupleA	12.635034	-7.4585276	comment	6.0	23.0	1597549591	12.911757
24179086	Another problem I've found for me wi	Another problem I've found for me with Nim and Crystal is the lack of editor support compared to other statically typed languages like Java and C++.Arguably a really nice benefit of these languages is the inline error highlighting, which speeds up development. I've found for Nim and Crystal I have to run the compiler in the terminal, look where the errors were, and then find those lines in my editor.LSP support is minimal ( especially when a language is starting out ). My ideal editor for Nim would be Pycharm-like ( open source edition ) with an LSP backend.	Naac	12.469075	-7.283601	comment	6.0	32.0	1597595396	-10.772427
24224855	TypeScript 4.0	TypeScript 4.0	macote	12.388225	-6.8416934	story	6.0	128.0	1597940468	-10.457168
24396201	I find this quite funny because it's	I find this quite funny because it's my first time hearing I was supposed to be thinking of Elixir as a Ruby thing. I actually learnt about it from a concurrent computing class and it was always an Erlang thing, and now I know it as the magic sauce behind Discord that I always want to try and never find a good reason to.	phreack	12.6957035	-7.396364	comment	6.0	47.0	1599446272	12.888156
24399697	Every time I think about using Phoen	Every time I think about using Phoenix, I get scared off by warnings about how not knowing BEAM can result in serious problems. I’m not sure if that conclusion is justified but it’s where I end up every time. It’s odd and unfortunate that Elixir and especially Phoenix seem to have invested heavily in being approachable but the rest of the ecosystem seems to have warning signs posted all over the place.Is this a fair impression? Or is it possible to run Phoenix in production and gradually learn more about the BEAM, leveling up as you encounter new challenges?	sickcodebruh	12.765853	-7.204128	comment	6.0	18.0	1599489437	12.796163
20040260	Among my peers (undergrads in colleg	Among my peers (undergrads in college) Rails has largely lost mindshare to python and Node (and even PHP!). At the 3 hackathons I went to this semester I could not find a single other person who knew Rails (so I always have to switch to node or python). If you take a look at devpost, Rails is increasingly losing popularity: https://devpost.com/software/built-with/ruby-on-railsMy plea to the Rails community and Rails senior devs:1) Fully embrace SPAs as an option, React and Vue are ubiquitous among my peers. I've seriously seen people who have difficulty understanding a for loop that know how to use react at a basic level.2) Increase your outreach to hackathons and universities, I'd love to see more Rails companies coming out to the big hackathons and mentoring students. At the biggest hack	faizshah	12.746577	-6.9332914	comment	6.0	29.0	1559138487	12.359712
20041397	I love Ruby/Rails and owe my career 	I love Ruby/Rails and owe my career to it, but I don't see the advantage of choosing this stack in 2019 over Elixir/Phoenix for greenfield projects. Elixir tooling and libraries are now up to par and I'd argue have surpassed RoR.At this point, it's just as productive (perhaps even more as you don't have to glue on a bunch of additional components) and joyful to work with like RoR but massively scalable out of the box thanks to the Erlang VM.	cpursley	12.714287	-7.250658	comment	6.0	28.0	1559144194	12.735919
20106848	Seems like they're just doing associ	Seems like they're just doing associations, and not controlling for a lot of factors. For example, you can come up with some narratives to explain a lot of these findings:* Python, JS, PHP, Java, C++ are all very common first languages; I'd imagine the average experience level for these is dragged down a bit compared to others like Golang, Haskell, or Scala. One of the recent Stack Overflow Developer surveys found Golang use to be strongly correlated with age, and since I'm assuming bug count would negatively correlate with age you'd see a confounding factor here.* Ruby's community has an obsessive culture towards unit testing, that could impact bug levels.* The trade-offs that make C and C++ attractive such as memory performance are double-edged swords and will naturally correlate with mo	robbrit	12.343577	-7.139355	comment	6.0	41.0	1559755632	3.0277624
20110569	I think you read more into my questi	I think you read more into my question than what I meant. I  was asking literally about the best way to install it was without a system level ruby. Once you have homebrew, you can install ruby; but what about before that? Download and install ruby from ruby-lang.org, install homebrew and a brewed ruby, then uninstall the one from ruby-lang.org?	ihuman	12.561164	-6.97441	comment	6.0	28.0	1559782340	-9.253989
20150090	Thank you very much for the publicit	Thank you very much for the publicity, I greatly appreciate your interest!Prolog is extremely well-suited for solving combinatorial tasks like Sudoku puzzles, and also for tough practical challenges such such as timetabling, scheduling and allocation tasks on an industrial scale.The key feature that makes Prolog so efficient and frequently used for such tasks is constraint propagation, provided via libraries or as a built-in feature in many Prolog system. Fast and efficient constraint propagation is often an important reason for buying a commercial Prolog system.In this example, I am using CLP(FD/ℤ), constraint logic programming over finite domains/integers, the amalgamation of constraint programming (CP) and logic programming (LP), which blend especially seamlessly. I have uploaded a shor	triska	13.14703	-7.290975	comment	6.0	32.0	1560196009	-12.49103
20220342	Why would I use this over elixir?	Why would I use this over elixir?	tanzbaer	12.680544	-7.462258	comment	6.0	35.0	1560911397	12.931035
18929396	I really enjoy articles like this. I	I really enjoy articles like this. In fact if anyone know some high quality resources of modern PHP, please give me some pointers. I am somewhat proficient in programming, and a recent project requires me to work in PHP. I know people in the industry likes to make fun of php's design flaws and quirks, but a few weeks in, I feel it is alright. The community around it are making solid improvements. The only frustrator is that once too often when I search something the top results are all W3C school tutorials from 2004.	tonysickpony	12.779145	-6.6353884	comment	6.0	36.0	1547716026	10.3446
18929886	PHP community did an exceptionally e	PHP community did an exceptionally excellent job to improve standards in the past few years. A lot of features has been added to the language itself as well as huge performance improvement.Many complain about PHP is from the past. Still a lot of developers just hacking around but it is not hard to find decent PHP developers anymore.	stunt	12.770626	-6.6405525	comment	6.0	26.0	1547723268	10.339681
18934153	dbg! looks neat. It made me wonder i	"dbg! looks neat. It made me wonder if any of the statically typed compiled languages have an equivalent of Ruby's binding.pry or JS's debugger call? That is, something like  x = foo();
  invoke_debugger(); // An interactive console appears here.
  y = bar(x)"	ainar-g	12.369411	-7.0748615	comment	6.0	25.0	1547755973	9.041281
18942585	Have you used flow at all in the pas	Have you used flow at all in the past? If so what would you say the major differences are/how difficult was any process to convert over? I'm a huge fan of having the types defined just from a documentation perspective nevermind bug catching and debugging and all that. I feel relatively agnostic about the particular thing we use to do it so I'm curious as to what the differences are.But yeah it really has improved my day to day immensely and I really feel the difference when I'm working in legacy portions of our apps that pre-date the flow adoption.	celestialjeu	12.418836	-6.611954	comment	6.0	34.0	1547842379	-10.40558
18989811	"Does anyone know of any ""third choic"	"Does anyone know of any ""third choice"" around typing JavaScript? I would love to add types to my code, but I want to write ""real"" JavaScript: so the code I input is the code that is executed by the browser. I just want the compile step to strip away the type annotations.There was initially talk of Flow using comments to actually work without touching the source code at all, but I don't think anything came of that... is there anything else on the horizon?[Edit: Nevermind: I went looking for the github issue about adding types as comments, and it turns out it's already supported by flow: https://flow.org/en/docs/types/comments/ - is there anything like this for TypeScript?]"	mrspeaker	12.364235	-6.807608	comment	6.0	32.0	1548345857	-10.438088
18990522	This sucks because, in the first few	This sucks because, in the first few years, flow had much better soundness and typescript had some serious issues.  I'm a little disappointed and feel as though, similar with Kube vs Swarmkit, the worse technology is winning.	tonyhb	12.460535	-6.6957355	comment	6.0	24.0	1548349619	-10.510036
19062595	TyX: Serverless Back-End Framework i	TyX: Serverless Back-End Framework in TypeScript for Lambda	macstr1k3r	12.411157	-6.64982	story	6.0	49.0	1549109651	-10.486686
19112220	You can create a mess of code, open 	You can create a mess of code, open security holes, and/or be hit with ‘gotchas’ in any web framework. PHP is much less complex than most.	trixie_	12.774269	-6.5726504	comment	6.0	62.0	1549611144	10.316815
19125592	Why would anybody want to learn Ruby	Why would anybody want to learn Ruby over say... node.js/Typescript these days?	MuffinFlavored	12.626304	-6.9794793	comment	6.0	26.0	1549757798	12.34993
19216349	From Sudoku Solver to Program Synthe	From Sudoku Solver to Program Synthesis	saurabh20n	13.440183	-7.405948	story	6.0	48.0	1550752258	15.076903
19313940	Is Elixir/Erlang considered superior	Is Elixir/Erlang considered superior to Go for writing high concurrency web servers?	confounded	12.604182	-7.4778976	comment	6.0	33.0	1551817863	12.903072
19346845	Erlang's niche is distributed system	Erlang's niche is distributed systems anyway, an area where static typing is at odds more often than not. I mean, you can guarantee the executable you are working on is exempt of typing errors, but it's just a small component of the overall architecture. What about data you are receiving? What if some remote client is using an older version of your software? What if the web service you are calling changed its API recently?I use Elm, which is as statically-typed as possible for a client webapp, but I know I can never guarantee that JSON data I receive from remote servers is of the expected type.	sacado2	12.484868	-7.493553	comment	6.0	29.0	1552148807	12.919818
19347085	I've read an equal number of horror 	I've read an equal number of horror stories to success for Erlang / Elixir.  That isn't to say it's not good or useful, but that it isn't some magic bullet that solves every problem for you.Edit - I guess my point is that it's not good enough to keep a secret. :)	FunnyLookinHat	12.630508	-7.4912233	comment	6.0	20.0	1552150893	12.924776
19398779	Phoenix: LiveView	Phoenix: LiveView	tosh	12.906051	-6.8895545	story	6.0	85.0	1552650706	12.726728
19428380	Show HN: Indian Rupee formatting and	Show HN: Indian Rupee formatting and word conversion for Ruby	sudhirj	12.497044	-6.9947605	story	6.0	10.0	1552974284	12.354753
19478347	The problem with end user programmin	The problem with end user programming is that no matter how much easier you try to make the interface to use, programming requires some ability to think logically and understand systems and anybody who can do that is going to get frustrated by guard rails and just want to do ‘real’ programming eventually.  There’s never going to be the magic interface that unlocks coding for everyone because most people just don’t think that way and the people that do, don’t need a more intuitive interface.Which isn’t to say that quality of life improvements aren’t important, I just don’t think they’ll turn non-programmers to programmers in any great number.	empath75	12.730785	-6.957317	comment	6.0	24.0	1553456567	12.355523
19536179	This is the RFC with more technical 	This is the RFC with more technical details https://wiki.php.net/rfc/jit.I believe their plan is to emit low-level code directly via DynAsm, without their own intermediate representation.This kind of approach has been tried again and again and again  and every project doing this either not got the results they wanted and given up or has had to go back and add a proper intermediate representation.Examples include Rust adding MIR before emitting LLVM, Rubinius trying to emit LLVM directly from Ruby and not getting good results so giving up, JRuby adding an IR before emitting Java byte code, Dropbox's Pyston implementation of Python that emitted LLVM directly where they gave up entirely, etc, etc, etc.Low level backends are not going to do the kind of key optimisations such as scalar replacem	chrisseaton	12.671985	-6.661279	comment	6.0	50.0	1554047361	10.297241
19543682	Django is still by far the best web 	Django is still by far the best web framework as far as I can tell. Every couple years I check what's out there for GoLang, Rust, Nodejs, and Swift, and it seems like it will be a decade or more before anything else comes even close.Even though a lot of people don't like Django's ORM, at least it does almost everything you would want to do with Postgres. (And if you want more you can always use SqlAlchemy.)  Most of the other ecosystems don't even have anything near the baseline functionality built into Django.	Alex3917	12.73093	-6.4866524	comment	6.0	49.0	1554129531	10.054718
19543892	Django/Jupyter/pandas is an ecosyste	"Django/Jupyter/pandas is an ecosystem that's hard to beat.If you're not already using it, check out `django-extensions`. You can use `./manage.py shell_plus --notebook` to launch a Django-friendly Jupyter notebook.From there you can prototype with extreme ease and confidence.I have also built a trivial custom model Manager so I can do stuff like:    User.objects.all().to_dataframe(""first_name"", ""last_name"", ""email"")

Honestly I can't see myself being even slightly tempted to move to something else unless I can replicate this workflow."	fredley	12.810146	-6.5096903	comment	6.0	29.0	1554130676	10.071575
19544918	Whenever I see people still praising	"Whenever I see people still praising Django in 2019, I immediately know that their technical understanding of the current backend and ops technologies is years behind. Django is still okay for small and amateur projects but nothing more than that. It is a curse for a fast moving business.EDIT:
even though I stopped writing Django for 3 years now but here are some of my reasons as far as I can remember:1. mediocre routing (no nesting, all routes have to be declared in one place)2. mediocre middleware (middleware is global)3. mediocre ORM (easy only for very easy stuff, more pain in the ass than writing raw SQL itself when it comes to complex aggregations and joins) not to mention some of the famous ORM bugs that have been open for like a decade4. custom user model? good luck fighting with D"	trpc	12.883255	-6.4854016	comment	6.0	30.0	1554135403	10.038516
19560566	Moving on from Rails and What’s Next	Moving on from Rails and What’s Next	Perceptes	12.764633	-6.9268484	story	6.0	146.0	1554263451	12.343538
19562406	Allowing @1 and @2 instead of |a, b|	Allowing @1 and @2 instead of |a, b| is a horrible change to Ruby. In the ruby tracker Matz himself states this is a compromise. So now Ruby is getting half-baked compromises that look out of place, all to appease some people making requests.If the requested functionality is so pertinent, then a proper solution should be made, in line with Ruby's style. Not cryptic sigil soup with @ and .:, etc.If a feature exists, it will get abused down the line. I do not want to read Ruby codebases that have @1, @2, @3, etc instead of named variables. We all know that temporary code is permanent. Just making this syntax possible is terrible.I have to say I'm disappointed. I have enjoyed using Ruby for the last ~5 years but I disagree strongly with this syntax change.	intertextuality	12.404475	-7.066097	comment	6.0	59.0	1554289970	12.36676
19564613	I'll come to the defense of &. - for	I'll come to the defense of &. - for better or worse Ruby is mostly used for building database backed web applications where nils are simply unavoidable without some extreme over engineering or awkward idioms.  `user&.address&.street` is at least safer than `try` - `user.try(:adress).try(:street)` - will not raise an error that `adress` is not a method. You could try and apply the null object pattern, but then `user.address.present?` is quite a rabbit hole - and frankly nil is the right return value for a user with no address on file.	jacobsenscott	12.394038	-7.0877733	comment	6.0	29.0	1554308135	12.350444
19576832	I miss Perl. Why did PHP win again, 	I miss Perl. Why did PHP win again, in the late 90s? (though I'm mostly Python these days and shan't complain, there was a good 10 year stretch of PHP there I'm not proud of).	telesilla	12.522998	-6.80778	comment	6.0	36.0	1554410145	13.056658
19709475	Erlang: The Movie [video]	Erlang: The Movie [video]	pg_bot	12.5634985	-7.534486	story	6.0	209.0	1555801378	12.927634
19715320	Good read. Curious about Elixir. Why	Good read. Curious about Elixir. Why would one use this over ‘plain old’ Erlang / OTP apart from the Rubyesque syntax, which might appeal to RoR devs?	hestefisk	12.65695	-7.4493723	comment	6.0	24.0	1555891047	12.900389
19715452	Does anyone here who is working with	"Does anyone here who is working with elixir professionally have a sense of what kind of mastery is needed to jump into an elixir dev role?  I've used it on and off for ~4 years at this point and in a few side projects (most recent one using everything in the title, weirdly enough) but can't really tell if I'm ""qualified"" to look for a job in it.  It's this weird loop of ""I've only done something as a hobby so I'm not qualified to do it professionally"" vs ""If I don't use it professionally I'll never be qualified to do so"".Same goes for react."	sugarpile	12.7033825	-7.452154	comment	6.0	21.0	1555892864	12.922525
19732268	When you think about how dynamic PHP	When you think about how dynamic PHP is wouldn't you pretty much end up with the source code and a PHP Interpreter baked together into a binary?	maxxxxx	12.685033	-6.641979	comment	6.0	54.0	1556049574	10.298384
19772574	Long time, Dimi..It's a favorite pet	Long time, Dimi..It's a favorite pet peeve of mine too that people often try to rationalize either their lack of experience with a platform or a broken architecture as a problem with the language in question. Though sometimes it's done because it helps paper over internal politics (e.g. lack of clout to be perceived to criticize past decisions) by blaming something external like a language or framework to justify architectural changes, so it's not always that these teams don't know what the actual problem is.(Twitter's transition from Rails back in the day, always springs to mind as my goto example of this, because as much as the transition might well have been appropriate, as much as they claimed otherwise, the real problem was never Rails, but the fact they'd written a monolith instead o	vidarh	12.68096	-6.9902563	comment	6.0	27.0	1556474346	12.375087
19792288	"From the article:""When you work with"	"From the article:""When you work with servers, the developer workflow is quite tedious. You have to run a process, find the port, then make your changes, then kill the process (usually with Control+C)...""I don't know what web servers they are using but in development that's not the case at all in Python, Ruby and Elixir.With most modern web servers you can run them in some type of development / debug mode where on code change, your code gets reloaded without having to do that manually, and you'll get sub 100ms updates. This has been available for many many many years now. Even with PHP development from 10+ years ago you had a way to see code changes without having to restart Apache."	nickjj	12.714183	-6.6009183	comment	6.0	49.0	1556660674	10.345921
19918133	Maybe it isn't, but other languages/	"Maybe it isn't, but other languages/frameworks have improved the past ten years as well. I don't see the selling point in building something in PHP in 2019 when you have similar if not better/more mature languages/frameworks at your disposal.Won't your prototyping be faster in Go/Python/Node/Ruby anyway, with a more stable surface to build upon it? I really fail to see where PHP has its place in 2019. For your ""build a minimally viable product fast"", the above win.
For enterprise stuff, the good old Java/C# win."	coblers	12.7835655	-6.682112	comment	6.0	22.0	1557917566	10.321305
19921279	My issue with modern PHP is that it'	My issue with modern PHP is that it's essentially becoming Java. And with the JVM and the Java ecosystem, what is the compelling reason to not just pick Java at this point? With Java you are basically writing exactly what you would be writing with PHP, except with more language features and the ability to opt into other languages on the JVM like Kotlin and Scala.The modern additions are fantastic for projects and teams that have a specific need to stay on PHP. I still work on projects with PHP and am thankful it has so many improvements. But in its current form and direction, I'm not sure how it has not become simply a little bit worse version of Java.	momokoko	12.733296	-6.6638217	comment	6.0	39.0	1557939013	10.329546
15762956	Not just Ruby, Python too.Was doing 	Not just Ruby, Python too.Was doing some work of converting [0,1] signals to 16-bit PCM data with 550Hz tone in numpy.Python version took ~15 minutes to generate 5,000 4 second files. Broke out the inner loop into Rust with FFI via ctypes and cut that time to ~10 seconds with nearly identical code.	vvanders	12.414075	-7.0580006	comment	6.0	32.0	1511414085	12.365464
15781635	So, I've used Rails (ruby), Django (	So, I've used Rails (ruby), Django (python), Flask (python) Revel (go), Spring (java), Node.js (javascript), and even have used C, php and Go to roll my own website from scratch[1].The thing is, I've always scaled my website(s) to thousands or tens of thousands of requests and hour; with one website even getting close to a million an hour... all with no problem. In the case of Rails (as is discussed in the article), my bottleneck (from a usability perspective) is always bandwidth. Most applications (I build anyway), require a hefty amount of data. Waiting 200ms for the database + an additional 20ms for rendering, the 20ms is not noticeable. Scaling Rails (or any modern web app) is as easy as just launching another instance and load balancing.Given that, I really don't see any advantage tow	lettergram	12.771999	-6.968885	comment	6.0	52.0	1511714335	12.460301
15815712	I use Hack now (I work for Facebook)	I use Hack now (I work for Facebook) and i kinda like it, at least in comparison to any untyped languages.So, serious question... Is there really any reason to use PHP over Have?	cletus	12.764518	-6.6363955	comment	6.0	19.0	1512050405	10.280778
15832675	I am learning Python right now and w	"I am learning Python right now and want to build a website using this programming language. Django and Flask seem to be the best frameworks for this purpose. I understand that Django has steeper learning curve and comes with ""everything"", whereas Flask is more modular and compositional.If I were to use Flask, is there anything that I could not do but that Django could?"	edshiro	12.736131	-6.5229506	comment	6.0	35.0	1512232924	9.940351
16023521	Why would anyone use Babel instead o	Why would anyone use Babel instead of TypeScript's compiler these days?	JeremyBanks	12.39091	-6.564468	comment	6.0	25.0	1514483211	-10.459951
16030951	Ask HN: Is Ruby/Rails over?	Ask HN: Is Ruby/Rails over?	ausrname1	12.749311	-6.9277554	story	6.0	8.0	1514572014	12.35174
16161671	I think it would be better to write 	I think it would be better to write a plugin for various PHP IDEs that contain fingerprints of bad code which is used to yell at the programmer if they are using these old, insecure code snippets.  Heck, you could add a feature or note to the developer to down-vote the source of said code.It would be a lot of work, but I think it's easier than trying to get authors of defunked blogs to take down 10 year old answers.As a side-effect, this increases awareness among developers that you can't blindly accept what's on SO.  If developers begin to lose trust in SO, then SO is going to be incentivized to do something about, or go the way of expertsexchange.	mywittyname	12.693337	-6.4912004	comment	6.0	21.0	1516132288	2.23563
17891401	Rails has a problem most are aware o	Rails has a problem most are aware of, When i started rails few yrs back, they said skinny controllers fat models, but in a few months our Models became 3000 lines, so they said external loading libraries, then came concerns, then they took concern back because it doesnt work. Then another solution came in the form of gems, people thought lets make more gems we have tried so many different ways to do this. If that is not all there is a problem in rails that exist purely because of the way the framework works. The mass assignment problem, this problem literally doesnt exist in any other framework. What we do with this is a patch to restrict an action, but it really exist because of the nature of the framework. This is a code smell if your program due to its very nature creates problems that	pankajdoharey	12.745263	-6.934918	comment	6.0	35.0	1535802625	12.368677
17895491	 Have you spent any real time with F	 Have you spent any real time with Flow?As I’m starting to get into the modern front end world… I do want the safety of a stronger type system but it doesn’t look like the React ecosystem has really decided which way to go.TypeScript is popular. But flow was developed by Facebook and so it’s obviously heavily used by some of the top people.I’ve only been reading about them, I haven’t chosen to use one yet. But I’ve been leaning on flow since it’s developed by the React team at Facebook.	MBCook	12.511054	-6.6315413	comment	6.0	37.0	1535861493	-10.49364
17910085	What is the most effective way to ge	What is the most effective way to get into TypeScript for programmer with pretty solid Java background? Are there any canonical books, educational OSS projects or perhaps another references?Thanks in advance!	vick18	12.371952	-6.766476	comment	6.0	19.0	1536077581	-10.528514
17933404	I tried ReasonML an year ago.It was 	"I tried ReasonML an year ago.It was __very__ amusing to play with Variants, Pattern Matching and Units. If programm compiles - it almost always just works.
It's an indispensable tool to play around and get more ideas how to write a better programs.And it was disastrous in __everything__ else. 
Installation and compiler bugs. Terrible tooling. Terrible code packaging. Terrible Javascript interop. Painfully archaic syntax. Sometimes extremely esoteric compiler errors.After a week i thrown out all the code and rewritten it using Typescript. Won't ever use new languages on projects with deadlines, no matter how sweet evangilists talks are."	garkin	12.401445	-7.551761	comment	6.0	42.0	1536319268	10.32111
18091840	I'd be interested to see how Elixir 	I'd be interested to see how Elixir does with an OTP-optimised redo. Probably still not great, but I feel like the example isn't playing to its strengths.	midgetjones	12.67146	-7.46257	comment	6.0	19.0	1538123786	12.936664
18188663	As long as you know that Prolog is j	As long as you know that Prolog is just a fancy wrapper around a brute force search, then sure.	ggggtez	13.1408825	-7.2983365	comment	6.0	19.0	1539204092	-12.5164
18235139	I'd argue that python needs an async	I'd argue that python needs an async django, which will hopefully be django in a few releases.	m_ke	12.502709	-6.6779237	comment	6.0	29.0	1539741036	9.963517
18255915	Interesting that the article mention	Interesting that the article mentions Shopify supporting over 600,000 users with a Rails monolith.At my day job, one of the justifications for us adopting microservices is that we want to horizontally scale.We have fewer than 8,000 users.Hubris, eh?	yakshaving_jgt	12.749622	-6.9268866	comment	6.0	21.0	1539948847	12.357483
18264710	Erlang/OTP by Example	Erlang/OTP by Example	jxub	12.57569	-7.510422	story	6.0	218.0	1540060460	12.912396
18269540	Pretty cool, but why would anyone ne	Pretty cool, but why would anyone new want to invest in Perl when it has the language problem of Perl 5 or Perl 6 ?Imho they should just fork Perl 6 and continue developing Perl 5.	platinium	12.339404	-7.0482793	comment	6.0	45.0	1540148568	13.185702
18269807	I really don't blame the author here	"I really don't blame the author here, sure there was an issue with the sample code - but come on it was sample code. If someone is implementing user uploads they should really do the due diligence and understand what the sample code does.To be honest I'm not really that surprised that the vulnerability stayed hidden for so long; many PHP users are hobbyists or come from a more traditional ""webmaster"" background. This is not to say that there aren't good PHP programmers, just that there is a large group of novices."	willeh	12.80945	-6.5693417	comment	6.0	25.0	1540151672	10.2798
18288626	Perl5 is a great language. For inter	Perl5 is a great language. For internet and system related tasks it is great! It was created long time ago and evolved over the years.One thing is true, it had a lot of advantage over other languages for a lot of years. However, now in 2018, other languages have also evolved and gained a lot of traction. One example is javascript/node which is now being used more and more. For a lot of time, a lot of frontend focused developers didnt really want to try backend development... specially because backend development was usually done in another language which was not javascript. So some never really attempted to do backend development. However when node was released, that opened a lot of new opportunities for the front end developers.There are a lot of languages these days and many of them are 	nopacience	12.388666	-6.9338937	comment	6.0	55.0	1540340287	13.181018
18311658	So, just to speak about the BEAM, wh	So, just to speak about the BEAM, which is the part of Elixir I am familiar with, I don't think any BEAM language will ever be a good goto language. The BEAM isn't good at general purpose computing. It's not particularly efficient at performing calculations or using memory. It's good at reliably performing as you increase memory pressure on your system (via message passing). You can scale a business to a decent size on a smaller number of fatter nodes (high RAM machines). Connections will keep pouring in and you'll get a consistent ms.That said, you'll run into issues once you hit a certain level of scale. I've had to make patches to the BEAM just to keep us scaling, and I've never seen someone get away with stock dist. You pretty much have to rewrite pieces of OTP.Now is Elixir ok for a C	ilovecaching	12.617431	-7.456062	comment	6.0	27.0	1540578364	12.894632
18331736	Maintaining 65k open connections in 	Maintaining 65k open connections in a single Ruby process	WJW	12.721392	-6.9243193	story	6.0	58.0	1540848869	12.26376
18365689	I failed to get a single project on 	I failed to get a single project on upwork despite one year of bidding as a JS, Rails dev etc.  I've also watched youtube videos and read endless blogs how to get your first project.So -1 here if you've included me.	diminish	12.732206	-6.845464	comment	6.0	24.0	1541184995	12.338377
18373401	Prolog Under the Hood: An Honest Loo	Prolog Under the Hood: An Honest Look (1992)	networked	13.15344	-7.30338	story	6.0	60.0	1541293206	-12.493459
18404310	I wonder what the biggest deployment	I wonder what the biggest deployment of Phoenix is at this point.I've written a few cowboy apps, but my professional Erlang experience has only been with chat servers that do not use HTTP. I'm not sure if I'd choose Erlang to build web services in. Cowboy is a single maintainer project, and Go has had HTTP2 support for ages now.	ilovecaching	12.670661	-7.387012	comment	6.0	26.0	1541651064	12.869536
18535357	It's because they've been making som	It's because they've been making some great decisions lately.I've been using Typescript in an Electron project I've been working on (https://getpolarized.io/) which is a doc manager for PDF and web content.Typescript is awesome.  It's basically Java 8/9 in terms of language design. Supports interfaces, generics, etc.If you add VS code and their github acquisition they're going to be in front of a lot of developers in the next 2-5 years.	burtonator	12.369245	-6.711345	comment	6.0	24.0	1543255171	-10.472764
18537958	> PHP is a nice language but is havi	"> PHP is a nice language but is having trouble keeping up with modern languagesIt's only ""having trouble"" because it can't change its API from month to month to match whatever's in vogue. A majority of the web still runs on some variant of PHP, and that guarantees that it's not dying anytime soon.More broadly, it seems the author wants to create a version of PHP that's not focussed on web requests, which is sort of the entire point of PHP."	muglug	12.760142	-6.639218	comment	6.0	54.0	1543276745	10.342408
18662585	Phoenix.LiveView: Interactive, Real-	Phoenix.LiveView: Interactive, Real-Time Apps. No Need to Write JavaScript	pawelduda	12.89511	-6.862967	story	6.0	75.0	1544607945	12.719493
18751792	Solving murder with Prolog	Solving murder with Prolog	yarapavan	13.182605	-7.333583	story	6.0	133.0	1545653534	-12.491792
18752451	I am always happy to unwrap my Chris	I am always happy to unwrap my Christmas present from the Ruby team! Some questions about this release:- Are there any benchmarks for the new JIT?- Why was `(Date.today..(Date.today + 1)) === DateTime.now #=> true` false in Ruby 2.5? It seems correct that right now is between today and tomorrow. Is it because one is a Date and the other a DateTime?	maxfurman	12.64152	-7.021954	comment	6.0	21.0	1545664348	12.37621
18756205	More generally:A process (P) fails. 	"More generally:A process (P) fails. Its supervisor (S1) restarts it. If (P) fails 3 times in 5 seconds (configurable,but no backoffs) then (S1) will fail. S1's parent supervisor (S2) will now restart S1, which will restart (P) which might still fail. If P fails quickly enough, you'll cascade your ""restart max of X times in Y seconds"" all the way up to the application, the ultimate supervisor, which itself will shut down after 3 failures.For DBs specifically, DBConnection relies on trapping exit and reconnecting with a backoff (it does not rely on supervisors), but how YOUR code deals with (or, doesn't deal with) a failure can  result in a cascade:    defmodule MyProcess do
      use GenServer

      ...

      def something(data) do
         GenServer.cast(__MODULE__, {:something, data})
 "	latch	12.482494	-7.384487	comment	6.0	24.0	1545717931	12.854051
18756676	Ruby 2.6.0 Released	Ruby 2.6.0 Released	sahin-boydas	12.627986	-7.0285754	story	6.0	69.0	1545729008	12.366562
18765807	I've been learning Elixir, which is 	"I've been learning Elixir, which is really good for creating concurrent and scalable systems. Concurrency has always been something that has fascinated me and I see in Elixir a chance to make very concurrent code without having to deal with locks, race conditions, and all the other icky low-level stuff. Elixir is also a functional language, making this is the first functional language I've learned, which is another reason I'm enjoying it.Over the past couple years, I've heard from developers who were very satisfied with Elixir, so I finally sat down and started to learn it.As I've been learning Elixir, I've been writing a series called ""Learn with Me: Elixir"" at https://inquisitivedeveloper.com. The idea is that anyone else who's also interested in Elixir can follow along as I learn it and"	Maultasche	12.653196	-7.457921	comment	6.0	23.0	1545867205	12.925792
18838754	Elixir is a niche (that's the truth)	"Elixir is a niche (that's the truth). Also in the article it is written 'Relatively difficult to ""recruit"" developers with existing experience in Elixir'.Why would a SW company invest in niche languages where the resources (software developers) are really expensive and really hard to get? Technologically it's all great but economically that's a nightmare."	therealmarv	12.692398	-7.4634986	comment	6.0	24.0	1546788568	12.935466
18871762	This inspired me to look up the Elm 	"This inspired me to look up the Elm docs, and came across this gem:  view model =
    div []
      [ button [ onClick Decrement ] [ text ""-"" ]
      , div [] [ text (String.fromInt model) ]
      , button [ onClick Increment ] [ text ""+"" ]
      ]

The html elements themselves are Elm functions. Code looks like data. Nice. Now considering Elm to be potentially useful tool to know."	i_feel_great	12.987626	-7.6668134	comment	6.0	30.0	1547098488	-12.75658
18909454	Lots of love here for TS. I'd like t	"Lots of love here for TS. I'd like to share my personal experience with it: I went from ""fast and convenient"" with JS to constantly fighting against the TS compiler and linter above cryptic type errors. Man, was it frustrating and JS felt suddenly crippled because it was hard to use its dynamics. TS catched a mistake here and there - true - but that did not equal out the hours burned by writing and debbugging type structures. In the end I removed every bit of TS from my projects and continued happily without it. I found out that using JSdoc comments and relying on the linting abilities of my IDE plus writing unit tests gave me stable code as well, without pulling my hair out. I was there before TS and just went back to it.I get that TS may be a good idea if you deal with teams of mediocre "	chris_engel	12.368894	-6.7408595	comment	6.0	21.0	1547538679	-10.456737
29835700	PHP has to be the worst offender wit	PHP has to be the worst offender with its pseudo-Java boilerplate enshrined in its PSRs. PHP is a perfectly fine procedural language but version 5 was like the Second Coming of Christ with its religious devotion to all things OOP. I don't know about shepherding - with PHP it's more like being beaten over the head with a club.	cutler	12.7326975	-6.6405444	comment	6.0	25.0	1641536702	10.347185
29849384	This exact problem could have happen	This exact problem could have happened in any language. Literally zero of it has to do with Ruby or the ecosystem.	stouset	12.5422	-7.0548553	comment	6.0	30.0	1641625930	12.388277
29890790	PHP's garbage collector is ARC, unli	PHP's garbage collector is ARC, unlike any other dynamic language that I know of.ARC is more performant but can introduce memory leaks via circular references, which is probably not a big problem for short-lived scripts anyway.	mojuba	12.705376	-6.6448126	comment	6.0	21.0	1641904716	10.299433
29890905	Hating on PHP almost feels like raci	Hating on PHP almost feels like racism. All the arguments are biased or false. I always get sad after clicking on PHP articles on HN.	dncornholio	12.774572	-6.6417274	comment	6.0	27.0	1641905550	10.347516
29904312	> TypeScript's type system is over-c	"> TypeScript's type system is over-complex since it tries to be a superset of JS.This is exactly why it got so popular, and TypeScript support in the JS ecosystem is so good. It's easy to just strip the TS metadata and you're left with working JS. This is why projects like esbuild managed to ship TS support so quickly (without type-checking).
Good luck doing that with a new language.I for one am ""all in"" on TypeScript, with all its shortcomings it's just the best of both worlds, and so easy to get on board."	dsnr	12.356965	-6.8160653	comment	6.0	62.0	1641981072	-10.452129
29971515	Who Watches Watchmen? – Integrating 	Who Watches Watchmen? – Integrating Elixir Applications with Systemd	todsacerdoti	12.653983	-7.44039	story	6.0	188.0	1642452311	12.901854
29982820	Our Rails test suite runs in 1 minut	Our Rails test suite runs in 1 minute on Buildkite	mschoening	12.636602	-6.9528933	story	6.0	57.0	1642528047	12.286951
29984040	This is because RoR projects do not 	"This is because RoR projects do not do unit testing, they do integration testing with a real DB.This approach is terrible and causes the poor performance.There are whole sets of testing ""tools"" for RoR projects that promote this mechanism of testing - if you're testing an API you need to use an external tool to properly hit that API.If you're writing unit tests, write unit tests with mocked dependencies."	pskinner	12.718993	-6.9080677	comment	6.0	18.0	1642532499	12.313893
30021089	So be it!Until XyZ is the new WebAss	So be it!Until XyZ is the new WebAssembly and @!# is the new XyZ!As long as my Django backend works and browsers support my HTML/CSS/JS frontend, I am fine.I have the same LAMP (Linux, Apache, MariaDB, Python) SAAS project running for decades now, paying all my bills, letting me live a free life.As long as nobody touches that, you can do all you want. Invent new fancy stacks every other year, make courses for it, migrations to it, a religion of it - I don't mind.	FreeHugs	12.74857	-6.4741273	comment	6.0	35.0	1642756687	10.012911
30075686	tsc relies in shared state and is sl	tsc relies in shared state and is slow, so they port it to a language that allows shared state.Strange reasoning.	k__	12.347799	-6.6988525	comment	6.0	23.0	1643134814	-10.442444
30111578	Nova – Erlang Web Framework	Nova – Erlang Web Framework	taure	12.592472	-7.4975	story	6.0	129.0	1643354030	-9.507754
30129693	Are there real world use cases of Pr	Are there real world use cases of Prolog outside of purely theoretical or academic areas? Logic programming is often named together with the other major programming paradigms like functional, object-oriented or imperative, but I have never seen the use of Prolog in any actual project. Introductions rarely go beyond some primitive examples of filling a Prolog interpreter with data and running some deductions on it.	elcapitan	13.152627	-7.2971487	comment	6.0	22.0	1643485514	-12.494924
30149492	What about between 2 boring technolo	What about between 2 boring technologies?For example I’m debating between Eleventy and Hugo (because I know both JS and Go, but not Ruby so I will skip Jekyll)	mrkentutbabi	12.595144	-6.947617	comment	6.0	24.0	1643645006	12.36752
30179694	Phoenix / LiveBeats author here – ha	"Phoenix / LiveBeats author here – happy to answer any questions about Phoenix, LiveBeats, or Fly.io. We had a ton of fun building this. It's way more fun to see where folks are connecting to and what kind of pings they get than I would have thought. I also just put out a screencast showing how easy it is to deploy a new phoenix instance on another continent and watch it cluster together with the rest automatically:
https://www.youtube.com/watch?v=JrqBudJd2YM&feature=youtu.be"	chrismccord	12.91208	-6.908732	comment	6.0	27.0	1643819004	12.724867
30207260	I used to write Rails professionally	I used to write Rails professionally for many yearsThis comparison isn't a good one. Rails is an all-encompasing framework.If you compare Rails to something like Nest.js, there's not much you're missing. Nest is one of the best application frameworks I've used in any language, and it comes with all this stuff you say JS doesn't have.---EDIT: To clarify (because it is confusingly named), NestJS is a framework modeled after Spring Boot for TypeScript + Node:https://nestjs.com/Not to be confused with Next.js, which is a framework for building SSR React apps.	gavinray	12.74752	-6.773093	comment	6.0	48.0	1643985530	12.32101
30207311	I think the author went too deep int	I think the author went too deep into details here, as this crowd is full of people who are going to be able to rip pieces of this article to shreds. But doing so both misses the larger point and in the process proves it - Rails gave them a set of answers that are good enough so they don't need to delve deeper and can just focus on their app.Rails is not the only choice that does so. And people with broader skill sets can assemble their own solutions and might not want that anyway. But this author just wanted to pick a platform and move on, and yep, Rails works for that.	codingdave	12.761776	-6.921389	comment	6.0	102.0	1643985788	12.358551
30212100	I've skimmed the guides. They never 	I've skimmed the guides. They never contain anything useful. They're just a bunch of recipes. They don't actually document a darned thing.Programming is not regurgitating recipes without understanding. Copilot can do that. Programming is actually understanding both the problem domain and the solution space, and knowing how to find some permutation of elements in the solution space to address anything in the problem domain.The rails guides document about 10% of the problem domain. That's mostly ok, because the problem domain exists in the wider world, and there's lots of documentation elsewhere. The problem is that the rails guides document about 1% of the solution space. And that's an issue, because rails claims to be the solution space.Rails routing is done by passing a block into the fra	chowells	12.733476	-6.9465737	comment	6.0	20.0	1644004543	12.376917
30226073	The demo screen is a dealbreaker. It	The demo screen is a dealbreaker. It's an admin tool. The new interface shows 8 models. The old one has space for at least twice as much. Imagine if Excel had that amount of padding. A 8x4 grid would fill the screen. A 1x2 grid on a phone.To all designers reading this: We are not printing those screens to frame them.  We're using admin tools to do real work and we want to see lots of information there to be fast. Maybe we created those models ourselves. We know what to look for. I'm sure that Django admin could be made to look better and some UX could be improved. It's in part theming and in part redesigning the control flow. Taking on the latter would be really interesting.Edit: actually a problem with the home page of Django admin is that it doesn't show enough information. A full screen	pmontra	12.869394	-6.507971	comment	6.0	18.0	1644095350	10.067859
30242082	But what's the point?The beauty of p	But what's the point?The beauty of perl scripts, and later php templates, was in their BASIC-like simplicity. They were not secure or structured in any way, but very accessible.Once you add these frameworks, you realize you could have started with Python or Java in the first place and get more mature infrastructure and better language along the way.	thriftwy	12.380937	-6.9380198	comment	6.0	43.0	1644224424	13.091722
30242471	> But, really, I suggest using other	> But, really, I suggest using other tools. We have nicer tools now.Debatable really. Within the web development space the options are rather limited in my opinion.Options:* Spring based apps - Downside JVM is a Resource hog* Python, Ruby, etc - The web frameworks are in my opinion not as full featured. Same with CMS systems. Also requires more resources. Also have limited OO features.* Go, Rust, etc - Really good choices for APIs but their web frameworks are also really lacking.The tooling around PHP is really good and stable. The language itself, the downsides are very limited and the main one that remains valid is inconsistency of function parameters. The issues with bad code are generally the same ones that can be done in another langauge.	that_guy_iain	12.721476	-6.604285	comment	6.0	43.0	1644227222	10.310055
30242716	"Why do you presume this is ""hearsay "	"Why do you presume this is ""hearsay PHP hatred""?I (not parent) have PHP hatred. It is fuelled by decades of PHP development and -exposure. My hatred is based on failing projects, missed deadlines, burnouts, money stolen, severe downtime, and companies going bankrupt. PHP had a role (not the primary, mind you!) in all of them."	berkes	12.784133	-6.6423807	comment	6.0	38.0	1644229065	10.349442
30246758	Personally I think quitting somethin	Personally I think quitting something that is amazing in so many ways but doesn't fulfil your front end needs after only 5m is something you may come to regret.Did you ask for a change of team / change of work focus? Did you bring up your issues with a manager? If you were on my team and an attrition risk due to not working in the tech you were hired for I'd have made sure that was changed.Five months is just about enough time to find your feet in a large org's codebase, I think having exposure to the Rails side is to your benefit, and given a bit more time you could have worked to resolve the other gripes. Shopify is a huge, profitable organization, with many, many, many opportunities for developers to do their best work. I find it hard to believe there isn't something fascinating there f	monkeynotes	12.766931	-6.918897	comment	6.0	25.0	1644250371	12.355132
30261552	Laravel and Drupal 7+ frankly ruined	Laravel and Drupal 7+ frankly ruined PHP for me.PHP as a platform is KISS and elegant, and I still admire some of its features such as built in templating, filesystem based routing, etc.But whenever I look back at Laravel, I remember how dangerous overly complex fluff with a nice logo is to a platform.	geenat	12.7999735	-6.6445355	comment	6.0	41.0	1644341852	10.353804
30261801	Could somebody say, if you are plann	"Could somebody say, if you are planning to embark on a new Laravel project and you have no experience, how to begin?I bought a subscription to Laracasts, and there is a ""What's New in Laravel 9"" series. But ""Laravel from Scratch"" is still on 8."	daveaiello	12.807821	-6.639408	comment	6.0	21.0	1644342770	10.355575
30334003	I have been a faithful follower of C	I have been a faithful follower of Class Based Views for years just until recently when I got completely immersed into the FBV way of thinking thanks to Luke Plant's excellent write up about Django Views - The Right Way:https://spookylukey.github.io/django-views-the-right-way/	julianwachholz	12.860946	-6.510225	comment	6.0	19.0	1644856373	10.068226
30400886	Is Datalog a good language for autho	Is Datalog a good language for authorization?	triska	13.177314	-7.097631	story	6.0	68.0	1645307603	-12.418429
30454043	Rails adds support for Fiber-safe Ac	Rails adds support for Fiber-safe ActiveRecord ConnectionPools	ksec	12.766715	-6.90551	story	6.0	196.0	1645707031	12.323904
30454613	What people think about active recor	What people think about active record outside of Ruby, I find that strange to couple the storage interface to the entities that you manipulate.Is active record patern popular outside of Rails?	Thaxll	13.112646	-6.460494	comment	6.0	19.0	1645710611	12.230766
30455307	"Calling it ""fashion"" is disingenuous"	"Calling it ""fashion"" is disingenuous.I ran Rails in production years back and swore it off then. We had constant memory leaks that seemingly came from Rails itself, and the only solution we had was ""just restart the server."" We also had no typing then, so every bug was a runtime bug. Hopefully it's improved in the years since...I've been happily running Go backends for the past 7 years now, and they're stable and fast and easy to refactor."	hellcow	12.732507	-6.9438195	comment	6.0	39.0	1645714009	12.359521
30541345	No RailsConf	No RailsConf	johnny_reilly	12.767756	-6.9247975	story	6.0	68.0	1646317307	12.353109
30600422	I don’t know what’s going on and, at	I don’t know what’s going on and, at this point, I don’t really want to.In the past I mostly used Rails for quick proof of concept apps and also for teaching younger kids about web development at one point.Rails itself has been fine, but there’s something about the community and atmosphere around it that is always steeped in unnecessary drama. This was especially problematic when I was introducing younger people to web dev and their first exposure was full of Twitter drama and the DHH controversy of the month. By now, I’m just so tired of it that I want nothing to do with Rails. It’s unfortunate.I have no doubt that these individuals who resigned did great things and will be extremely valuable wherever they end up. I also don’t doubt that they had valid reasons to resign. I hope they find 	PragmaticPulp	12.757325	-6.939043	comment	6.0	32.0	1646750711	12.350098
30622705	What would convince you?* top compan	What would convince you?* top companies using it? (shopify, github, stripe)* number of stars on github for projects? https://github.com/rails/rails has 50k stars* place in the Redmonk language rankings? https://redmonk.com/sogrady/2021/08/05/language-rankings-6-2... shows it at #9* ability to get a good paying job?  https://marketing.dice.com/pdf/2020/Dice_2020_Tech_Salary_Re... has the ruby salary at 114k, more than typescript/javascriptI am an active member of the ruby community so am definitely biased, but I'd love to know. Sorry if that's combative, but I always wonder how folks choose languages based on popularity. If there's anything folks can point at, or if it is more of a gut feel. (Unless it is javascript or C, which are always go	mooreds	12.596451	-7.0323663	comment	6.0	45.0	1646880785	12.36218
30654549	Dumb question incoming… Why not form	Dumb question incoming… Why not formalize TypeScript into the ECMAScript spec?	sergiomattei	12.344884	-6.8311014	comment	6.0	24.0	1647116433	-10.393816
30704371	I'm sorry but all those examples and	I'm sorry but all those examples and Deno's documentation in general should be in JavaScript. I respect the devs right to choose which ever language they want, but Deno seems to want to be the standard bearer for the power of scripting and web standards [1]. If that's the case, then they are causing more harm than good by focusing exclusively on TypeScript, which isn't a language as much as a set of macros on top of JS. TS should remain a niche for those projects that can benefit from type safety, not promoted as some sort of better alternative to JavaScript, because it's really not.1. https://deno.com/blog/v1	russellbeattie	12.470163	-6.480267	comment	6.0	37.0	1647466343	-10.876975
16478953	Abusing python can really save your 	"Abusing python can really save your life sometimes. I think my favorite recent hack has been accessing and MODIFYING callers variable, due to inability to get it passed through the Django module to the callback.  def invite_accepted(sender, email, **kwargs):
      import sys
      caller = sys._getframe(2)
      request = caller.f_locals['request']
      request.session['invite_accepted'] = True"	Demiurge	12.571784	-6.531761	comment	6.0	81.0	1519772771	9.688593
16494888	I am aware this is not contributing 	"I am aware this is not contributing to the thread but... the only way I can summarize my feelings on that is 'holy fuck'. I just spent a minute just muttering 'holy fuck' to myself.They are running the good old php shell of ""<%= system(%_REQUEST['cmd']) %>"". As root. As a security company.This entire company is just blowing my mind at the moment. What's next, are they running their services on a notebook in the office?"	tetha	12.758891	-6.5403185	comment	6.0	32.0	1519930206	-5.9544296
16520943	I'm a big fan of Elixir, but the com	"I'm a big fan of Elixir, but the community gravitation toward Elm has always struck me as a bit weird.The two languages have nothing in common beyond both being functional, and it kinda feels like someone posted a ""Elixir and Elm"" blog post in the early days and it all just snowballed arbitrarily from there."	s_kilk	12.988766	-7.676054	comment	6.0	33.0	1520257378	-12.763457
16531384	If you're learning a programming lan	"If you're learning a programming language, your decision about which language to learn should not be driven by whether or not the language is preinstalled and you need to go to the trouble of installing one piece of software.""I decided to become a Prolog programmer because it was the only thing installed on my machine."""	andrewstuart	13.147985	-7.2972164	comment	6.0	31.0	1520365035	-12.48995
16537125	Ruby 2.6.0 with JIT now 6x faster th	Ruby 2.6.0 with JIT now 6x faster than Ruby 2.0.0	olivierlacan	12.569157	-7.0252438	story	6.0	54.0	1520437444	12.353718
16552141	I've been doing Rails development fo	I've been doing Rails development for ~10 years and maybe it's just a sign that I'm getting older, but for me the biggest problem isn't Rails, it's Ruby.In the past year or so I've done a lot of more modern JS development (with Babel and Flow) and toyed around with Elixir and ReasonML. Ruby hasn't seen much change in the past couple of years (granted it's much more mature than Elixir/Reason) and while it was a boon to developer productivity and happiness compared to the languages of the time, I think we've probably found a better balance in type systems these days than Ruby and the like did at the time.Maybe it's just legacy codebases, but manually reasoning about types is huge time sink and are one of our leading causes of production errors. Explicit typing also informs better design (I'v	martingordon	12.581068	-7.0814996	comment	6.0	33.0	1520607602	12.373601
16555688	This looks pretty cool, congrats!As 	This looks pretty cool, congrats!As an aside, does anyone know of a language that is as easy as PHP for programming beginners to jump into Web programming, but isn't PHP?	news_to_me	12.735447	-6.6273413	comment	6.0	18.0	1520635392	10.335885
16562938	I started programming (mainly web de	I started programming (mainly web development) about 20 years ago.I think the lack of current day productivity is due to there being so much more input available. 15-20 years ago you were forced to get into the mix of things and try things out because there weren't 800 blog posts and 227 youtube videos on the topic you're trying to learn.Nowadays it's too easy to research yourself to death without trying anything because you're making decisions based on no experience, but instead experiences of others.In attempts to find the perfect solution, you often do nothing. Always remember that you can get a lot done without it being perfect.I look back at some old PHP projects I did in the early 2000s. Projects that have 7,500 line PHP files with mixed in HTML, JS, PHP, SQL, etc., but the funny thi	nickjj	12.759773	-6.605968	comment	6.0	28.0	1520775680	10.330817
16638837	"In the ""things learned from Ruby"" se"	"In the ""things learned from Ruby"" section:  Focus on strong object oriented programming

What I've learned from Ruby is to favor functional programming concepts - minimize side effects, isolate state mutation, etc.  Ruby is definitely OO, but when my Ruby code is more functional it's less buggy, easier to understand and move around, and generally less convoluted."	tcopeland	12.441062	-7.140341	comment	6.0	48.0	1521645896	12.3714285
16640343	I've tried a lot of different langua	I've tried a lot of different languages over the years including Ruby, Go, Scala, and Haskell.Ruby actually isn't too bad if you don't use Rails.  Between Rails and stuff like Spring over in Java-land I've developed a strong hatred of huge frameworks :)Clojure, however, is the one language that just 'clicked' for me almost immediately.  In fact, I'm pretty certain I'll be sticking to Lisps as much as possible from here on out.  That is, when I have the choice:  I work in a Java shop during the day like everyone else :O	jcadam	12.4734125	-7.6358027	comment	6.0	28.0	1521652934	-10.812782
16726031	Anyway, if this is how people use PH	Anyway, if this is how people use PHP these days, why not just use Java? I guess deployment is different (PHP is not compiled), but code/concepts seem pretty much the same at this point if you want to use this style of programming.	megous	12.724016	-6.6296735	comment	6.0	33.0	1522543634	10.290863
16732061	Spring as a framework has come a lon	Spring as a framework has come a long way since the year 2006 when it required multiple XML files for configuration to the now Spring Boot which requires virtually zero configuration. Now it is easier to develop MVP web app using Spring Boot than Rails. With the framework such as Angular 2, people withe server side programming experience are finding it easier to develop client side app with much ease. I have found Angular 2 and Spring Boot a great combination for client server app development.	royalghost	12.634709	-6.709547	comment	6.0	64.0	1522639288	8.489909
16842654	Crystal looks really cool but if spe	Crystal looks really cool but if speed is what its after, i think it misses the target for most people.because for most apps, you will be bottlenecked by the database server. it is the slowest hanging fruit on the tech stack, be it postgres , mysql, or mongo. so unless you are working on number crunching tasks that do not involve any db queries, i fail to see the benefit of a language like Crystal.i wait for the day until the day Crystal becomes a 100% drop in replacement ready for Ruby apps.until then, Sinatra is more than fast enough for most things.	jaequery	12.626234	-7.2508335	comment	6.0	25.0	1523801054	-11.246995
16876236	I prefer homework to timed, monitore	I prefer homework to timed, monitored programming sessions. But the task should never be a big task.When i interviewed for a backend development position, the task was to set up flask with two routes, connect to a dB and retrieve a couple of rows when user visited the routes.It was not hard even though I never worked with flask before, and it wasn't supposed to be hard either. It was a test if I had basic programming skills and that was it.	some_account	12.735231	-6.51721	comment	6.0	33.0	1524148706	9.986078
16911016	I have been using PHP professionally	I have been using PHP professionally for 7 years now and I absolutely love it. The community grew up from the old days when I started playing with it (almost 15 years ago). There are incredible pieces of software built with it, and nowadays the language is unrecognisable from the state it was in when it gained the bad reputation. i think Symfony 4 is a wonderful framework and it allows us to use PHP to build things that most would think it's impossible in the language of spaghetti code.Yes, there are still a lot o people out there that hack some very questionable code together in PHP but we shouldn't dismiss it like this. I've tried multiple languages (C#, Java, javascript) and I have to say PHP is my favourite so far (you guys can comment on this as much as you like, I still like it a lot	RutZap	12.767044	-6.6362333	comment	6.0	25.0	1524560276	10.344152
16915631	What makes elixir/erlang good fit fo	What makes elixir/erlang good fit for rpi? When compared to let's say rust or lua. Serious question, no offense.	cztomsik	12.608056	-7.5049505	comment	6.0	60.0	1524596969	12.957874
16936972	In my experience, Django is less sui	In my experience, Django is less suitable for large projects than Flask.The nature of Django encourages tight coupling between unrelated parts of the system - Models intertwine database operations and business logic, ModelViews intertwine db operations, business logic and the interface layer.This is manageable in the small, but when you hit scale, this tight coupling adds a whole bunch of unnecessary complexity to your system. Good luck trying to tune your database when any template can trigger hundreds of db calls!	yen223	12.824976	-6.523155	comment	6.0	30.0	1524785386	10.018921
17015064	A Crash-Course in PHP Namespaces for	A Crash-Course in PHP Namespaces for WordPress Developers	eamann	12.503271	-6.653815	story	6.0	56.0	1525717265	6.7411656
17086992	We are starting up a new web project	We are starting up a new web project. I have worked with typed languages my whole career so I am not really fond of JavaScript. We are mostly C# guys so Typescript feels very familiar. What do people think of TypeScript? Is it a good alternative to JavaScript? Our first tests look really good but I wonder if there are any downfalls.	maxxxxx	12.382652	-6.766145	comment	6.0	27.0	1526509915	-10.465963
17100626	The Zen of Erlang (2016)	The Zen of Erlang (2016)	jxub	12.562164	-7.5193086	story	6.0	236.0	1526643984	12.954602
17144101	I really want to use ReasonML in one	"I really want to use ReasonML in one of my next projects but I always come back to two main questions.How much is it easy to use JS components like the Calendar of Airbnb for instance? And is it really easy to use BuckleScript? The ""[%bs.raw ..."" and others look hard to read/use. Is it the case or just a feeling?Is there someone who already tried it enough to know the answers?"	nazka	12.429143	-7.4382772	comment	6.0	34.0	1527171001	10.344818
17239274	To the rest of the posters... __READ	To the rest of the posters... __READ__ what he is writing.. He want total control and a low budget. Have any of you even tried Shopify ? It's low control and it's expensive as hell.Ok, so i'm actually running a pretty large store on Django Oscar. But i would say that it really depends on what you are buildingThe only reason i choose Django oscar over something like shopify is that we sell a highly customizable product and needed total freedom to try out different ways of giving discounts and creating vouchers. If you just sell standard products then don't bother.I will give credit to the creators of Django Oscar for building a highly customizable framework and if you know your way around Django, the overhead of using it shouldn't be too large.	Galaxeblaffer	12.8150215	-6.517086	comment	6.0	37.0	1528216027	10.056221
17244477	"""type hell"" seems to be far worse th"	"""type hell"" seems to be far worse than ""dependency hell,"" where the open source type definitions you use can have minor inconsistencies with each other, many of which are out of your control, causing lots of useless type errors in any project with even medium complexity. This forces engineers to ignore type errors, defeating the purpose of Typescript entirely.Has anyone had a truly pleasant experience with Typescript in a medium to large project?"	stevebmark	12.368928	-6.7932806	comment	6.0	23.0	1528261393	-10.435953
17247965	My head can't wrap itself around:imp	"My head can't wrap itself around:import { test } from ""https://unpkg.com/deno_testing@0.0.5/testing.ts""There is so many issues with that I don't even no where to begin."	sametmax	12.449911	-6.4522457	comment	6.0	42.0	1528299275	-10.852761
17281297	It's just me, but I view the lack of	"It's just me, but I view the lack of OO features in Elixir as a really good thing.  You still have structs and some other OOish type stuff, but the emphasis on composition and modularity has really made Elixir programs a joy to read and understand.The lack of a single binary isn't a fully fair criticism.  While technically it is true, it doesn't describe the shipping experience.  You will need Erlang installed on the target machine, but using escript you basically ship a ""single binary/file"" and it includes everything it needs to run.  It's quite elegant, and erlang is super easy to install on basically all *nix systems."	freedomben	12.643645	-7.469899	comment	6.0	19.0	1528683996	12.91832
17320506	I'm confused about the state of thre	I'm confused about the state of threading in Crystal. See the last message in : https://github.com/crystal-lang/crystal/issues/1967#issuecom...I'm hoping to see more languages with light-weight threads automatically mapped (multiplexed) to physical threads, like in Go. So far, based on the crowd-sourced table I started working on, it is otherwise only Ada, Haskell and Pony (in addition to Go) that seems to meet these criteria:https://docs.google.com/spreadsheets/d/1BAiJR026ih1U8HoRw__n...	samuell	12.562828	-7.294851	comment	6.0	39.0	1529076941	9.736495
17355912	I have mixed feelings about RoR, hav	"I have mixed feelings about RoR, having seen both sides: the incredible speed of development as a startup bootstraps its MVP, and later as a mature company where the codebase becomes an immense behemoth of tech debt that's almost impossible to refactor. Don't believe the people who handwave and say you can avoid the latter by just ""designing it right at the beginning"". That's a lie, even the best engineers will build an unmaintainable monolith in RoR given enough time and if the business requirements are complex.At this point I have a strong aversion to starting any product using a dynamically-typed language (regardless of framework). The initial speed and ease of development is repaid 10x later on in sheer engineering pain (if you're lucky enough to be successful, that is)."	yobroprogram	12.694074	-6.9495564	comment	6.0	26.0	1529506280	12.267589
17356823	For curious onlookers: true, one can	"For curious onlookers: true, one can ""can whip together apps so quickly"", as long as:* Your code is empirically around ~1 KLOC* You won't have to maintain it in the futureSo yeah: if you're going to make a one-off-deploy-once-never-touch-again message board/blog app with Google Maps integration, choose Rails. Otherwise: don't bother.Making Ruby/Rails maintainable at scale is a sisyphean task: it's possible, but at an enormous cost. This is why there are several attempts to bolt a type system onto Ruby, the most recent one being developed by Stripe [0].I've no hard numbers, but the narrative ""without Ruby my startup wouldn't last long enough to worry about engineering it the right way"" sounds very very suspicious to me when talking about even remotely complex problem domains. Your speed wil"	pka	12.714444	-6.936237	comment	6.0	32.0	1529511861	12.337852
17357177	Erlang OTP 21.0 is Released	Erlang OTP 21.0 is Released	out_of_protocol	12.585604	-7.5105104	story	6.0	228.0	1529514160	12.9000225
17379566	Were you under the impression that R	Were you under the impression that Rails has a functioning dev community?I am very familiar with the rubyverse, and boy do I got news for you.Rails is to Ruby as the Big Dig is to Boston.But it's hard to get Rails devs to admit it. They know it, of course. They live it. They breathe bad code, they exist as extensions of a philosophy that has failed it's way to the top.I used to think Zed was a dramatic weenie. Then I got a bit deeper in Rails to learn how to pursue better exploits. And deeper. And deeper. And finally I just hit a point where I just wasn't willing to work on RoR-related gigs.Convention over configuration is one of those ideas that goes great on paper. And then you start in on some buzzwords and fancy lingo, it's the bread and butter of selling to project managers. But there	qop	12.73199	-6.947584	comment	6.0	32.0	1529728599	12.358049
17424700	Anyone using Crystal in production? 	Anyone using Crystal in production? What do you use it for?	sergiotapia	12.644704	-7.2639184	comment	6.0	64.0	1530282485	-11.23888
17424857	What drew you to Crystal?If you'll f	What drew you to Crystal?If you'll forgive the snark, you've moved from one obscure language, to an even more obscure language that even fewer developers know.What is it about Crystal that outweighs the very boring practical downsides of production use of obscure and immature languages?	MaxBarraclough	12.620732	-7.2718554	comment	6.0	29.0	1530284036	-11.241281
17425033	Comparison of Erlang Runtime System 	Comparison of Erlang Runtime System and Java Virtual Machine [pdf]	curtas	12.526052	-7.504069	story	6.0	65.0	1530285833	12.909237
17427191	Flask-ask makes it pretty easy.https	Flask-ask makes it pretty easy.https://github.com/johnwheeler/flask-ask	chishaku	12.71324	-6.5343566	comment	6.0	18.0	1530301309	9.9910755
17597279	A lot of people are commenting that 	A lot of people are commenting that SemVer doesn't work, because it's still at the mercy of humans choosing good version numbers.Elm's package manager, elm-package, actually tries to remove humans from the equation, by automatically choosing the next version number, based on a diff of the API and the exported types of a package: https://github.com/elm-lang/elm-package#publishing-updatesIt's not perfect, but it's better than anything else I've seen.	QuinnWilton	12.954937	-7.6193547	comment	6.0	75.0	1532393307	9.980648
17614219	Is there any hope that Elixir can be	Is there any hope that Elixir can be used for client side programs, with GUI windows?Or will Elixir only be used for server-side programs, that don't require a graphical user interface?I would like to program video games with Elixir.  But the examples I see online are rather immature.And it doesn't seem like anyone is interested in using Elixir to program desktop GUI programs.	blackrock	12.675765	-7.4524703	comment	6.0	19.0	1532565388	12.922855
17615654	Elixir Erlang/OTP are indeed a joy. 	Elixir Erlang/OTP are indeed a joy. Everything seems so organically put together and integrated! I love the OS-like feel of the platform.However, I'm curious: does the lack of types (both Elixir and Erlang are dynamically typed as you know) affect long term productivity on the platform? The lack of proper static typing does make large codebases very difficult to build and maintain, don't you think?People have mentioned dialyzer a lot in reference to Elixir/Erlang but how good/practical is it?Sometimes I wonder: how fault tolerant can the OTP platform be anyways if your process can crash due to an unmatched pattern? A type checker should tell you at compile time that you've not tested all possible combinations and this should not happen at runtime. For a process to crash on an unmatched mes	sidkshatriya	12.519943	-7.4764686	comment	6.0	34.0	1532589425	12.905421
17645702	I spent about 10 years in a niche: m	I spent about 10 years in a niche: maintaining legacy PHP software. I have been down some very deep rabbitholes of PHP black magic. I have written 10+ medium-to-large applications from scratch in PHP, 4 of which are still running in production more than 8 years later.I feel qualified to say the following:- Java will not kill your startup. Bad coding MIGHT. But it also might not.- PHP will not save your startup. Good coding MIGHT. But it also might not.- You can write good/bad software in Java. I've seen both.- You can write bad software in PHP. I've never seen good software in PHP (including my own). At this point, it's becoming hard to believe it is possible to write good software in PHP.Mostly this is a problem with the awful design of the language. Adding better typing is helping, but a	smt88	12.76909	-6.599729	comment	6.0	32.0	1532968360	10.339098
17646419	More and more projects are adding Ty	"More and more projects are adding TypeScript definition files for us, and many are even being written (or rewritten) using TypeScript directly! I honestly think TypeScript is the future of JavaScript. In fact, I can't help but wonder what Microsoft's long term goal is with TS. They're making such blazingly fast progress with it, that I can't help but wonder if this is the ""incubation"" period of the language, and when it's finally ""ready to hatch"", they're going to do something big. Almost like this phase of TypeScript's life would traditionally be done inside MS privately, but they wanted to benefit from giving back to the community, from trust building within the community, and from being able to say ""we provided the most advances to the JavaScript language out of any contributors by far"""	sbjs	12.352274	-6.7691917	comment	6.0	76.0	1532972928	-10.459063
17664041	For anyone thinking about picking up	For anyone thinking about picking up Django and is worried about the framework being obsolete I encourage you to take a look.Django is fantastic. I've worked with it for a number of years now and it can really help in the early stages of prototyping.Things I especially like about Django:* The built in admin letting you edit and view objects easily.* Being able to use it without using the views. Add django rest framework and you can model your domain with good REST practices.* Migrations and works well with postgres.* That the team has thought a lot about web security and how to implement it. Things like XSS, CSRF, CORS, session timeouts, authentication are all there in Django. Other frameworks I need to pull in a library for each and pray that they work well together. I found this especial	jtchang	12.790025	-6.4775724	comment	6.0	53.0	1533140915	10.02439
17684881	I think you're shooting yourself in 	I think you're shooting yourself in the foot looking for 'web developer' jobs in the homeland of hipsters. Of course all the postings are going to be for trendy technologies.Look for more boring jobs that require web development skills, unless you're really stuck on the title.You know PHP. I did too, once. I made the mistake of taking on a Magento project a decade ago, suffered through it, and I still get hounded by recruiters desperate for PHP developers who know Magento. That fucking platform still powers 99% of the entire e-commerce space; version 2 was released recently and by many accounts it's even worse than v1, which means people who made the mistake of using it are going to need support for it. The demand for PHP developers is still very much there.You know Python. You can get job	jstarfish	12.765121	-6.626496	comment	6.0	39.0	1533345883	10.320065
17718628	Not only is the content great on tha	Not only is the content great on that site, the performance of it is absolutely spectacular. It's amazing how much people will jump to new fangled solutions when this site is a great example of what a well tuned Rails app can pull off from a UX perspective.	dchuk	12.761956	-6.9249434	comment	6.0	22.0	1533755979	12.37696
17826432	That 60+ hour week job ad is a bit w	"That 60+ hour week job ad is a bit weird- surely anyone good who reads it would immediately be put off? Why would you include that?Then I read the CEOs reply after being called out for it on Twitter: https://twitter.com/larbysamirouche/status/10314168074526351... If you don't want to look at twitter:""Update: @dhh Nobody @GitHub cares about your tweets. The post expired. Focus on your irrelevant development framework, failed career as a race car driver, or Basecamp, which as you know, has no future and has been replaced by much better alternatives that are highly innovative.""@dhh created Ruby On RailsNo wonder their website is still ""under construction"". Who funds these kind of narcissistic idiots?"	fabricexpert	12.75851	-6.936166	comment	6.0	18.0	1535025288	12.284475
17835332	Other than fixing the Django  source	Other than fixing the Django  source code ,  is there any OS level mitigation techniques that can detect and prevent such security vulnerabilities?I am thinking something like selinux, docker or chroot - a bit like internal firewall for Django (or any other webapp).Any suggestions on the links to latest best practices?	srcmap	12.808676	-6.5047655	comment	6.0	26.0	1535122871	10.085171
17856735	I mean... Let's pause for a minute a	I mean... Let's pause for a minute and remove the year, and remove the language / framework. What are we trying to accomplish?If we know something really well and there are enough developers to support an ecosystem and the talent pool in your <however you decide your region> is big enough just use whatever you want.PHP in 2018? SURE.C++ in 2018? SURE (You masochist)Rails in 2018? Youre damn right I would.GO in 2018? OK. Fine. Whatever.This is highly opinionated, but our jobs are to make stuff that works in a predictable, less risky way. Do that.	thinkingkong	12.751785	-6.82873	comment	6.0	98.0	1535434230	12.208555
21133672	TypeScript 3.7 Beta	TypeScript 3.7 Beta	sebazzz	12.389303	-6.845659	story	6.0	117.0	1569994816	8.148019
21230735	Is ruby that slow? I always understo	Is ruby that slow? I always understood it was comparable to python?Plus if it is performant enough for Shopify and Github it seems like it would be performant for 90%+ of use cases? The speed of development and the flexibility of development is much greater than most stacks once you add rails.	pcmoney	12.689709	-6.9635105	comment	6.0	24.0	1570855376	12.352422
21241834	I was looking at some of my old repo	I was looking at some of my old repos today. Enjoyed the nostalgia. Lots of CoffeeScript there. I had to switch to ES and then TypeScript because CoffeeScript was abandoned at the time and I was stretched over other projects to be able to help maintain it.Reading my old code, I was surprised by how clean it looks. How easy it is to digest. There is a certain sense of calm when your brain doesn't have to process all the visual clutter of a C-style syntax. I miss that.I wish I didn't have to choose between CoffeeScript and TypeScript.TypeScript first and foremost is about type safety and tooling. Its architecture is largely syntax-agnostic. It operates on the AST, so the parser and code generator can be swapped for a different syntax.CoffeeScript is all about syntax and does not (and should 	AriaMinaei	12.410108	-6.614147	comment	6.0	33.0	1570990430	-10.510151
21252303	Amazon uses Ruby a lot? I've never s	Amazon uses Ruby a lot? I've never seen them talk about anything with Ruby at all. Can you give any pointers?	chrisseaton	12.703602	-6.993554	comment	6.0	31.0	1571083898	12.364842
21256646	As far as prominent products, beside	As far as prominent products, besides WordPress, Facebook, and Wikipedia, Slack and Mailchimp are (were?) also PHP. (I googled and apparently a prominent '-hub' site uses it too.)The PHP hate never made sense to me in the context of the rise of Node.js:* In PHP I've never accidentally combined 2 + 0.3 into 20.3* I dislike the cowboy-ish over-use of ternary operators and short-circuiting by JS devs (random example from StackOverflow: var bar = data.bar !== undefined ? data.bar : 'default'; )I appreciate that JS has functional-programming aspects that make it appealing though.It's interesting that when PHP alternatives like Rails came around I saw a lot of anti-Java sentiment online, but now when Rails-based companies have to scale they end up using Java or JVM-based infrastructure. So trend	firasd	12.598549	-6.4479465	comment	6.0	22.0	1571129054	10.308268
21280971	I know it's been said by many, but I	I know it's been said by many, but I will repeat once again.Elixir is a very cool and powerful language for building web apps.Having built my first product (https://retrochat.xyz) in Elixir, I can wholeheartedly recommend it to anyone who is not happy with their current backend language(Ruby, Python, Js, etc).Docs, functional programming, OTP, ecosystem(Phoenix, Ecto, Mix) are really top notch. In my opinion, you will be able to reach much higher productivity (especially long term) in Elixir than in Ruby, which is known for it's high level of productivity. Sounds like a fairy tale, right? Well, that fairy tale can become a reality with Elixir.The only thing that is a bit of pain is a good release support, but that has been changing for better.	adamzapasnik	12.690942	-7.4190445	comment	6.0	78.0	1571312729	12.888478
21483703	On one hand, yes.  On the other hand	"On one hand, yes.  On the other hand, the standard Ruby ""json"" gem can be made to overflow on just 202 bytes of valid JSON input."	LukeShu	12.585643	-6.6877503	comment	6.0	26.0	1573230242	12.270565
21658061	Having followed and at times heavily	Having followed and at times heavily used PHP since the 4.x times, its story seems to be that of slowly (and begrudginly?) accepting modern language features like classes, exceptions, lambdas, GC, static typing, etc., sometimes getting things wrong on the first try but still mostly converging towards modernness.That begs the question, what's PHP's value proposition for new projects? If PHP mostly chases feature parity with Java/.NET/TypeScript and doesn't attempt to do anything better/different (like Elm/Haskell/Rust/Go/Erlang arguably do), then why choose it?	mpartel	12.771313	-6.643143	comment	6.0	36.0	1574955828	10.337693
21682151	In my experience most people creatin	In my experience most people creating CRUD websites with Django will hit a CPU bottleneck.	sojmq	12.797663	-6.4837246	comment	6.0	34.0	1575293756	9.997546
39080793	Datalog in 100 lines of JavaScript (	Datalog in 100 lines of JavaScript (2022)	stopachka	13.17485	-6.9892235	story	6.0	59.0	1705859812	-12.388774
39080451	It's a shame that there doesn't seem	It's a shame that there doesn't seem to be any decent open-source implementation of Datalog. If you go for full Prolog instead of Datalog, there are several (Scryer Prolog being my personal favourite).	FreeFull	13.179942	-7.0515513	comment	6.0	43.0	1705857926	-12.41218
39100186	> textual requires and module system	> textual requires and module system could’ve been much cleanerThis irritated me a lot when I was a ruby programmer. Ruby's require is analogous to C's #include: modules are just files that get evaluated in order to add stuff to a global interpreter state.It got to the point I went around asking people on IRC what they thought the perfect module system looked like. Studied long forgotten languages to see how they did it. To this day I'm obsessed with this. I feel like it's one of those things you just have to get right since day one because it's gonna be impossible to change it later.	matheusmoreira	12.444804	-7.0276856	comment	6.0	56.0	1705990805	-8.155891
39138096	I've never done load testing before,	I've never done load testing before, but would it be hard to write a script in pure ruby (maybe with a few libraries) that makes a lot of concurrent requests to whatever endpoints and using whatever params you like?	nomilk	12.641973	-6.8905187	comment	6.0	22.0	1706234451	6.289469
12538872	Programs that rewrite Ruby programs	Programs that rewrite Ruby programs	tcopeland	12.582604	-7.062133	story	6.0	77.0	1474373612	12.395248
12704415	I'll offer an alternate hypothesis.S	I'll offer an alternate hypothesis.Some companies are succeeding in spite of php. There are many, many users of php, and we'd expect that there would be considerable variance, with some users doing awful (no traction, buggy sites, etc) and some hitting home runs (facebook). Because it's such a popular language, it will have users across this entire spectrum.It's easy to cherry-pick the winners and miss all of the tremendous losers who picked php and got nothing for it.	brian-armstrong	12.773491	-6.638887	comment	6.0	172.0	1476395954	10.384044
12753894	Elm 1+2: can't download X	Elm 1+2: can't download X	darfs	13.014654	-7.689107	story	6.0	54.0	1476981737	-12.773141
12761187	Because nobody has yet invented a co	Because nobody has yet invented a compelling way to write JavaScript applications, so people keep trying. We're still waiting for the Ruby on Rails of frontend development.I'm not saying Ruby on Rails is the best backend framework (I don't use it anymore), but when it came around everybody understood that it was getting something right. It popularized a new model for server-side web development that all other communities started to follow and improve. When it came out, most developers who were already working with the web could see that it would be very useful, it solved real-world problems they had, it just made sense.This is much less clear with JavaScript frameworks. They usually have a tough learning curve and the benefits are not always coming as expected. So people keep trying to fin	rhizome31	12.682285	-6.6209483	comment	6.0	26.0	1477063616	12.286178
12849820	I loved this video because I got all	I loved this video because I got all the references.I sit on the Ruby on Rails facebook group, and its flooded with people from India trying to learn ruby. What I find unusual is they publish tutorials when there are plenty of good sources such as Railscasts, but its like the last 10 years doesn't exist to them and they rehash tutorials.Ruby was great before javascript frameworks. I haven't gotten around to using turbolinks but its strongly makes me question whether I should I stop using js frameworks all together and go full on into turbolinks and go back to a simpler time of rapid development.All of sudden everything in web-development requires you to be an engineer. I think there is a large influx of Uni CS graduates running startups and the only solution in a complex solution such as R	andrew_wc_brown	12.75384	-6.900083	comment	6.0	25.0	1478032722	12.345141
12881607	Anyone know why Erlang doesn't run w	Anyone know why Erlang doesn't run well on containerized Docker?	pmarreck	12.5493	-7.51894	comment	6.0	21.0	1478376255	12.871805
12915412	> Would also be nice to know how the	"> Would also be nice to know how they deal with boilerplate, which is a big annoyance with Elm in my opinion when you come from, eg, Haskell.We have over 55,000 lines of Elm code in production at http://noredink.com and it's now the majority of our front-end. Students use our site to answer millions of questions per day, and they've answered over 2 billion questions total. I think this qualifies us as a ""big project."" ;)Our Elm code is about as DRY as our JavaScript code, and adding language features to squeeze even more DRYness out of it is way down my priority list. When I think about ways I want Elm to improve, I'm thinking about better support for server-side rendering and asset management (e.g. code splitting), not wanting to add type system features.I'm always a bit confused by ""I tr"	rtfeldman	12.96181	-7.6687694	comment	6.0	51.0	1478730697	-12.754591
12922024	That's quite a performance improveme	That's quite a performance improvement. I'm curious if this was directly related to just switching to PHP7, or something under the Tumblr hood, that they improved upon as well. While reviewing their own code.	overcast	12.738817	-6.658092	comment	6.0	19.0	1478796982	10.330056
12925837	I see no reason to not just move to 	I see no reason to not just move to Elixir at this point for 10-20x performance increase and the tools to build distributed systems at your fingertips.	andy_ppp	12.669994	-7.439634	comment	6.0	28.0	1478821581	12.898762
13024136	Django REST Framework is Django's ki	Django REST Framework is Django's killer app (as Django is Python's killer app). If you need an API, it's a great batteries-included way to build one.	wahnfrieden	12.815713	-6.5094733	comment	6.0	23.0	1479922244	10.066982
13098860	Ask HN: Is it still worth it to lear	Ask HN: Is it still worth it to learn RoR?	PaulBGD_	12.724553	-6.890858	story	6.0	18.0	1480827771	12.363794
13107880	Most of those postings seem like Rub	Most of those postings seem like Ruby shops that have pipe dreams of doing Elixir stuff, some day. I'm skeptical many will get there, which is a shame because Elixir is the most fun I've had writing software.	sjtgraham	12.695051	-7.3860736	comment	6.0	25.0	1480962670	12.836377
13119288	Ask HN: What server side language/fr	Ask HN: What server side language/framework did you choose and why?	avitzurel	12.730889	-6.9014807	story	6.0	4.0	1481068090	12.32051
13119091	Major changes in WordPress 4.7	Major changes in WordPress 4.7	davidbhayes	12.7064	-6.531484	story	6.0	38.0	1481065854	-11.019835
13124447	If you still haven't given TypeScrip	If you still haven't given TypeScript a go as a Javascripter, now is a great time to do so.Whether you end up adopting it or not, it's interesting to get the types out of your mind and into the code. The first time you feel the speed/confidence of refactoring with accurate 'Find usages', you'll decide if the undeniable overhead of types is worth it.	timruffles	12.350896	-6.829146	comment	6.0	51.0	1481132732	-10.498002
13124622	Feels like Typescript is building (o	Feels like Typescript is building (or has built up?) more momentum than Flow.	jasonallen	12.446116	-6.723391	comment	6.0	25.0	1481133896	-10.466908
13125100	Can anyone weigh in on TypeScript vs	Can anyone weigh in on TypeScript vs Elm?	ryanSrich	12.968976	-7.656675	comment	6.0	20.0	1481136867	-12.727905
13137424	Isn't Prolog the better language for	Isn't Prolog the better language for this? Don't get me wrong I love clojure, and one of the best things about dialects of lisp is that they are pretty much always multi-paradigm, but...Pretty sure this is exactly what you would use Prolog for.	hardwaresofton	13.055498	-7.3871574	comment	6.0	24.0	1481271190	-12.42865
13209712	Try searching the web to see if/how 	Try searching the web to see if/how it works with Gems. Go on, I dare you... 'ruby crystal gem', 'crystal gem', ...For that matter, crystal vs elixr.Kind of wishing all these projects just had made up names.	qume	12.63083	-7.2437844	comment	6.0	24.0	1482126799	-11.231772
13227095	> IMHO these fixes address dozens of	> IMHO these fixes address dozens of bugs that could cause major puzzlement for a typical Rails developer.That has been the reason I always avoid huge frameworks like RoR.If I was to hit a bug like this, I wouldn't know where to start debugging. How do people deal with obscure bugs in the framework with something like RoR?	sfilargi	12.7311125	-6.950445	comment	6.0	30.0	1482299711	12.355705
13322937	"Is this concerning?
 https://www.goo"	"Is this concerning?
 https://www.google.com/trends/explore?q=ember.js,react.jsIn any case congrats on the new gig Tom."	WhitneyLand	13.112381	-6.4437294	comment	6.0	23.0	1483570869	-15.5120735
13434713	"When you say ""Django is not RoR"", ar"	"When you say ""Django is not RoR"", are you saying Django doesn't break backwards compatibility but Ruby on Rails does?If so, I have to very strongly disagree. It's almost mind boggling to me how much they break backwards compatibility as a framework. They usually warn users with a deprecation warning in one version and then they make the backwards incompatible change in the next version, but the sheer amount of these kind of changes makes upgrading an infuriating process. Especially when upgrading a large codebase."	surouaue	12.786129	-6.6613812	comment	6.0	30.0	1484822634	10.242996
13448974	"""BuckleScript is one of the very few"	"""BuckleScript is one of the very few compilers which compiles an existing typed language to readable JavaScript.""Elm (type inference) is sort of. While there is a lot of OS type projects used, having bloomberg use it is a plus. Interesting that FB have build system ^Reason^ (build system) doing something similar (OCaml backend->JS) ~ http://facebook.github.io/reason/"	bootload	12.368156	-6.928993	comment	6.0	39.0	1484976596	-10.623872
13474999	Dave Thomas has described Elixir as 	"Dave Thomas has described Elixir as follows: ""Elixir took the Erlang virtual machine, BEAM, and put a sensible face on it. It gives you all the power of Erlang plus a powerful macro system.""[1][1] https://startlearningelixir.com/elixir-for-rubyists"	slashdotdash	12.624223	-7.4592476	comment	6.0	46.0	1485288588	12.925577
13478337	I think it would be interesting to h	"I think it would be interesting to have an init system and/or package manager configured using a logic programming language, such as a Prolog dialect.For instance, one could write ""is_installed(X11) :- is_installed (KDE)"" to specify that X11 must be installed if KDE is installed."	jasonhansel	13.118396	-7.278244	comment	6.0	25.0	1485316449	-12.475133
13551404	Introducing PureScript Erlang back e	Introducing PureScript Erlang back end	pka	12.533858	-7.498943	story	6.0	174.0	1486051102	12.925868
13581493	Perhaps you should look at this two 	Perhaps you should look at this two presentations first:https://media.ccc.de/v/31c3_-_6243_-_en_-_saal_1_-_201412292...https://media.ccc.de/v/32c3-7130-the_perl_jam_2	bebna	12.340832	-7.0300646	comment	6.0	22.0	1486400833	13.193127
27607580	Does anyone else find django-rest re	Does anyone else find django-rest really confusing?	SilurianWenlock	12.841523	-6.5050807	comment	6.0	26.0	1624470499	10.060718
27682827	I really wish there were more remote	I really wish there were more remote Elixir job offers. Seems like such a great productive language to use, and Phoenix with LiveView is just great.	masijo	12.813331	-7.132497	comment	6.0	23.0	1625007322	12.802145
27683151	I run a growing agency and we run pr	I run a growing agency and we run primarily on React + Django, but I really want to give Elixir a shot at some point.I find its concurrency features, purported developer productivity, and it’s positioning as a “niche but popular” tech (these can be nice to acquire technical clients) very appealing.Does anyone have any experience running an Elixir consultancy / agency / software house? Or freelancing? How is the market  and your general experience?	arcturus17	12.7059965	-7.449324	comment	6.0	54.0	1625009625	12.925162
27706626	Designing a Dataflow Editor with Typ	Designing a Dataflow Editor with TypeScript and React	joelg	12.552961	-6.6168594	story	6.0	75.0	1625185845	-10.485624
27808823	Noob question: does it worth, for a 	Noob question: does it worth, for a beginner, to start with Haskell instead of Elm or Purescript?	galfarragem	12.765779	-7.636161	comment	6.0	19.0	1626085078	10.405167
27904512	So I am currently making an api serv	So I am currently making an api server in Crystal and I adore this language. I would add some pros/cons for folks who are interested in trying it out;Pros:- Elegant syntax. Crystal is highly inspired by Ruby and it has a lovely elegant syntax. Syntax is important to me and the clutter of symbols and the busy syntax is why i struggle with Rust.- gorgeous type system. F# is the only other language I can think of which has this lovely and complete a type system. The way Crystal handles Nil (its a type) just feels great in practice.- Perf wise, Crystal is blazing fast. It seems to be marginably faster than most compiled languages like Go, Nim etc in the benchmarks. Though at that level the difference isn't much.- batteries included stdlib- decent documentation. It could be better but imo its g	rishav_sharan	12.573665	-7.252154	comment	6.0	28.0	1626863978	-11.199838
27956452	In defense of PHP, this is probably 	"In defense of PHP, this is probably due to simplicity.  PHP got many people started with server side web development, and docs were supposed to be ""simple"".  The thinking back then probably was ""if we make the example more complicated, we will loose people"", which was probably even true for the target audience."	mlang23	12.744451	-6.6767745	comment	6.0	38.0	1627282268	10.348433
27985833	Well echoing what the author wrote -	Well echoing what the author wrote - it’s quite easy to learn Elixir.We have a new guy who started a bit less than a month ago.He’s now already writing functional Elixir (no pun intended) and contributing to big code base.One of the first things I told him is that “there is no magic in elixir”. What you see is what you get.If you understand that everything is literally a function - life is easy and using the language becomes fun.	eric4smith	12.656922	-7.445154	comment	6.0	30.0	1627490458	12.925994
12012310	Looks like a solid and and relativel	Looks like a solid and and relatively straightforward upgrade from Rails 4.2. It's hard not to feel Rails has become a bit of a slow-moving behemoth though, with this release four years after 4.0. I've still got a couple clients using 3.2 from 2012 and things aren't that different.Smart money at this point seems like a significant portion of the Rails community could begin moving to Elixir/Phoenix over the coming years. The advantages from a language/VM level just look impossible for Ruby to overcome, along with a blub effect kicking in.	themgt	12.756835	-7.007264	comment	6.0	32.0	1467325422	12.43231
12012399	We've moved all of our backend offer	We've moved all of our backend offerings from Rails to Elixir/Phoenix. Despite some questioning the value of anything below 100ms response times there is a lot of data backing up the idea that Elixir/Phoenix can lead to a more maintainable and more economical solution. I spoke about this recently at RailsConf: https://www.youtube.com/watch?v=OxhTQdcieQEDon't get me wrong, I think Rails is an amazing technology but it doesn't fit the use cases and demands our clients have today.	bcardarella	12.765234	-7.113135	comment	6.0	61.0	1467326394	12.6509695
12012429	Looks like now's a good time to ment	Looks like now's a good time to mention that the Ruby on Rails Tutorial book has already been updated for Rails 5:http://railstutorial.org/bookSales actually just launched on Tuesday (announcement here: https://news.learnenough.com/rails-5-edition-of-rails-tutori...), and you can pick up your copy of the new 4th edition here:http://railstutorial.org/code/launchThat link includes a 20% launch discount, which expires tonight at midnight PDT.As with previous versions, the new edition focuses on the core principles of web development, so there isn't much Rails 5–specific material in the update, but I am planning standalone Learn Enough tutorials on things like Action Cable and Rails API (http://learnenough.com/).	mhartl	12.733614	-6.951246	comment	6.0	20.0	1467326676	12.388284
12012659	I would love to see someone take a d	"I would love to see someone take a deep dive into why their Phoenix thing is ""so much faster"" than with Rails.  I mean really look at the whole stack from the VM, to different pieces of the framework like views and DB interaction.  Erlang definitely does concurrency well, but it is not that much faster than Ruby in terms of ""raw speed"".  I'd be fascinated to see someone actually do the work and look at where Phoenix is eking out those gains."	davidw	12.745469	-7.180326	comment	6.0	28.0	1467328886	12.724519
12072292	Can someone explain why I should use	"Can someone explain why I should use Elixir instead of Erlang? I haven't used either, but from a very high level it seems that Elixir has a ""magic"" syntax like Ruby, where as much as possible is hidden from the user, whereas Erlang has a much clearer and more concrete syntax. Even though Erlang's syntax is not standard or traditional, as someone who's used neither neither language, I find it much easier to read and understand exactly what's happening."	nilkn	12.641421	-7.4734707	comment	6.0	20.0	1468255540	12.934671
12073763	Why not just use Haskell for the bac	Why not just use Haskell for the backend? It's really not much harder than Elm, and it's considerably more flexible and general. Of course, it's lazy, not strict, and you're totally right that records in Haskell suck. But my understanding is that strictness for Elm was chosen mainly to overcome issues with FRP, which it's now abandoned. So I'm not sure if that difference matters anymore.	nilkn	12.933993	-7.6636915	comment	6.0	42.0	1468266149	-12.758435
12075365	I think I would have preferred this 	I think I would have preferred this to be some type of plugin/add-on to Flask rather than a full replacement that now locks me to AWS and is a brand new project without any docs :(If it was a cli with decorators or something that uses Flask I would feel more comfortable and give it a shot.	cdnsteve	12.735112	-6.5657725	comment	6.0	20.0	1468276733	9.992257
12094397	I love Python but I've never used Dj	I love Python but I've never used Django -- I've always used Ruby on Rails since that's what I'm familiar with.  Do you know of any resources I could use to get more comfortable with DRF (i.e. more complex than just the Quickstart tutorial [0])?[0] http://www.django-rest-framework.org/tutorial/quickstart/	Abundnce10	12.826778	-6.533096	comment	6.0	22.0	1468508455	10.074914
12150532	Why did Python get a bunch of mschin	Why did Python get a bunch of mschine learning frameworks but ruby has little or nothing ? Was it because scientists just started to use Python more ?	zitterbewegung	12.440988	-7.014434	comment	6.0	25.0	1469299745	12.356764
12151943	Cycles...It doesn't seem too long ag	Cycles...It doesn't seem too long ago when Java Developers rushed to Ruby because it wasn't statically typed.Now, TypeScript is better than JavaScript because of the opposite reason...I've seen this sort of pendulum swing a few times in my career.	reboog711	12.368488	-6.813368	comment	6.0	24.0	1469327483	-10.441499
12205904	Huh. Your argument in favor of Djang	"Huh. Your argument in favor of Django is basically ""it may not be cool, but it's got a lot of libraries written for it."" Which is basically the same thing people used to say (and still say) about Java, compared to something ""cool"" and ""new"" like, say, Django or Rails (at the time). In other words, Django used to be picked because it was the hot new thing, but since then it's no longer hot or new, but since enough people adopted it, they wrote enough libraries for it to make it worth continuing to use on new projects."	sdegutis	12.755088	-6.5954103	comment	6.0	20.0	1470085137	10.091301
12337738	What I wish to see in these blog pos	What I wish to see in these blog posts are real-world examples. My day job is coding an MVC app in Rails / Ember. Fine, I won't be able to get past Chapter 11 in a book, but what am I REALLY missing out on? Are these solutions meant for a different problem set, or would I be able to use these concepts in my day-to-day (assuming we were written in a Scala, Haskell, etc.)?	chowes	12.814964	-6.8283715	comment	6.0	48.0	1471885639	12.352115
12352428	Credo: Static code analysis for Elix	Credo: Static code analysis for Elixir with a focus on consistency and teaching	rrrene	12.573162	-7.4099436	story	6.0	137.0	1472050203	12.941476
12463695	Channels adopted as an official Djan	Channels adopted as an official Django project	AtroxDev	12.817055	-6.5684977	story	6.0	159.0	1473438368	10.080046
12523200	Ha, Same thing happened to me with t	Ha, Same thing happened to me with the SAME contributor!! Benjamin Bach is an awesome dude. He helped me maintain django-dbbackup for quite some time then we found a third contributor, Anthony Monthe, who is also very interested in the project and I would say owns it now. It's been maintained by those two for quite some time now. I wish there was a way for me to buy them both a bunch of rounds of beer. :D	mjs7231	12.819211	-6.538019	comment	6.0	21.0	1474157196	10.078892
35233429	TypeScript cannot emit valid ES modu	TypeScript cannot emit valid ES modules due to file extension issue (2020)	new_user_final	12.374675	-6.672955	story	6.0	29.0	1679327582	-10.490935
35385656	Which pretty much sums up today's wo	"Which pretty much sums up today's work culture. I was just talking about this same exact thing, yesterday.That's absolutely heartbreaking.In the old days, we would have a team, that would compete, as a team, against other corporations. Our team would stick together, work together, and, quite often, function as a unit; leveraging each others' strengths, and compensating for each others' weaknesses.Nowadays, we look at our team members as ""the competition."" In fact, we may actually be making plans to move to the other team.But I have written programs in C, that were still in use, 25 years later. I have written programs in PHP, that were still (are still) in use, 15 years later.There'll always be room for the classics.That said, I'm quite looking forward to seeing what I can do with the new A"	ChrisMarshallNY	12.751614	-6.645918	comment	6.0	24.0	1680263617	10.3429165
35428225	Django 4.2 Released	Django 4.2 Released	petr25102018	12.829205	-6.562686	story	6.0	158.0	1680544065	10.104145
35482768	And as I have said before but worth 	And as I have said before but worth repeating again, Rails is perhaps the only open source framework that is being battle tested in development at scale. It may not be the fastest ( or in fact quite slow ), but I dont think you could find similar testing being done and Deployed at the scale of Github on any other framework.I wonder if Eileen Uchitelle will bring this practice to Shopify as well? Edit: It seems [1] Shopify is also running on latest Ruby and Rails version as well.[1] https://news.ycombinator.com/item?id=35481352	ksec	12.740784	-6.938508	comment	6.0	25.0	1680881879	12.3541975
28106912	If you want to have to read 5,000 po	If you want to have to read 5,000 poorly written error riddled works to find a single gem I guess it's okay. Unfortunately, I'm not an immortal	SQueeeeeL	12.6170025	-7.030603	comment	6.0	18.0	1628432567	12.3858185
28168213	The Perl Foundation faces more depar	The Perl Foundation faces more departures	keutoi	12.337973	-7.0350385	story	6.0	44.0	1628858937	13.191735
28324494	My favorite ActiveSupport monkey pat	My favorite ActiveSupport monkey patching is on number classes. Things like 2.weeks.from_now are just too useful to scorn monkey patching on some programming ideological reasons.	eloisius	12.3441925	-7.018444	comment	6.0	44.0	1630041045	-8.521884
28326912	Phoenix creator here – I'm happy to 	Phoenix creator here – I'm happy to answer any questions about elixir, phoenix, or this release!	chrismccord	12.753109	-7.309452	comment	6.0	53.0	1630067172	12.864001
28383699	So the Deno runtime is written in Ru	So the Deno runtime is written in Rust and so is all the Deno tooling... So why would you use Deno if it is not good enough for itself?	rana1-31	12.49188	-6.4415307	comment	6.0	40.0	1630520517	-10.971402
28391776	Ruby occupies a similar space to Gol	"Ruby occupies a similar space to Golang in my mind, where it is ""just"" a solid business oriented language that gets out of your way. It will never wow you like Rust or Haskell and that is fine, because that is not what it is aiming for. Rails is one of best DSLs for writing simple SAAS apps, too.That said, different usecases require different languages. I would never use Ruby for a compiler project."	WJW	12.579346	-7.0592313	comment	6.0	61.0	1630589599	12.306519
28392716	> Ruby is an absolute joy to program	> Ruby is an absolute joy to program in.Really? At my company it seems like 90% of the tests are catching things that would be caught automatically if we had used a proper language with strong types/compiler.IMO Ruby is slow, not particularly beautiful (yes, this is subjective), and seems optimized for shoving crappy REST endpoints out the door as quickly as possible.	zionic	12.590403	-7.0520396	comment	6.0	31.0	1630594058	12.361739
28476654	The Future Shape of Ruby Objects	The Future Shape of Ruby Objects	chrisseaton	12.587835	-7.071236	story	6.0	153.0	1631236245	12.360238
28510624	I'm curious how this changes if you 	I'm curious how this changes if you remove PHP being used for WordPress (where the people using it probably didn't choose it). Do lots of companies still choose PHP for brand new projects? I know Facebook has a dialect they still use, but you don't hear much about it anymore.	easton	12.7773485	-6.631256	comment	6.0	37.0	1631536252	10.328063
28510692	How did Ruby increase that much late	How did Ruby increase that much lately?Also, I'm surprised Python isn't more popular. 1% is (comparatively) tiny for a language that popular.	qsort	12.493639	-7.0161657	comment	6.0	22.0	1631536606	-4.381474
28552825	I tried out Deno last weekend for a 	I tried out Deno last weekend for a fun little hack project (syncing a local Markdown file to a formatted Google Doc), and it was awesome.Writing TypeScript code for Deno feels a lot like writing Go (which is a very good thing to me):- opinionated build/fmt/deps- well-designed stdlib- no need for scaffolding files (.eslintrc, babel.config.js, jest.config.js, mocha.opts, etc.)If that sounds good to you, try Deno!	sqs	12.466185	-6.476678	comment	6.0	28.0	1631805173	-10.895517
28560266	This is a bit off topic but I wanted	This is a bit off topic but I wanted to say I’m really glad there are still people out there hacking on some ruby + Postgres projects and writing about it. I feel that ruby is an excellent language and dread the demise of it.	gscho	12.646825	-7.0225134	comment	6.0	64.0	1631843409	12.386413
28609855	Given new entrants into the backend 	Given new entrants into the backend space, like Supabase (for a Firebase-like open source alternative), Hasura (open source GraphQL on Postgres), etc, how viable is Django and similar technologies like Rails these days? It seems like the former are PaaS which you can simply drop into your app but the latter are more so full on backends that let you control everything.	satvikpendem	12.824861	-6.567381	comment	6.0	24.0	1632257929	10.080311
28623927	Since I'm a persistence person and n	Since I'm a persistence person and not a UI person, I am more interested in what is on the other side of the Phoenix/Elixir/BEAM VM server cluster: the database/persistence. I understand that currently apps mostly talk to PostgreSQL, like a Rails/Django app would?Then, if something modifies the data in the database not by using the Phoenix app, the Phoenix app would not find out until it loaded the values from the database. And what would prompt it to do that?But if your entire active state can fit in RAM in a cluster of BEAM VMs, you might turn the BEAM VM cluster itself into a distributed database, in which the only way to modify the data is by talking to the Phoenix app (using Liveview, regular REST HTTP API or something else, maybe even postgresql protocol). If this is the case, the ap	wolf550e	12.842336	-6.9840956	comment	6.0	23.0	1632357687	12.756575
22358303	In my opinion RuboCop is too strict.	In my opinion RuboCop is too strict. Every code standard analyzer takes some tweaking to get it set up for a particular project and team standards, but RuboCop needs changing of a ton of rules to make it even usable in a reasonable fashion.I love it because it brings some order to a meta-everything world, but it'd be nice if it came with a reasonable set of rules by default	StaticRedux	12.4321375	-7.066802	comment	6.0	60.0	1582048686	-10.906141
22360184	There's a ton of these little php CM	There's a ton of these little php CMSs but it feels like inheritating the entire attack surface of LAMP or even just an apache + php stack is insane these days.Use a static site generator. Maybe have a nice UI around it. Publish the whole thing to S3 or whatever CDN fronted storage solution you like. Almost no attack surface, mindlessly easy, very cheap.	vorpalhex	12.778133	-6.510438	comment	6.0	44.0	1582058614	10.22761
22626294	"I'm not a myth.
Some of us started J"	"I'm not a myth.
Some of us started JS programming over a decade ago, with no strong typing and IDE to hold our hand and tell us every time you make a mistake. The key is just discipline, good design patterns and a good linter.I see TypesScript as a VERY opinionated linter that affects how you think and write JS. JS is a dynamically typed language, which means you loose a lot of its power and flexability by shoe-horning it into strongly typed languange patterns. Yes, I get it, many programmers think best and are most productive using strongly typed languages, but for those of us that can think dynamic or both, TS just gets in the way.>> Do they just magically decipher what interface an argument conforms to?This is a good example of the object oriented, strongly typed way of thinking. Explor"	orange8	12.3364525	-6.7725015	comment	6.0	54.0	1584615256	-10.416499
22692058	Expecting to see Perl in an article 	Expecting to see Perl in an article like this in 5 to 10 years. Wasn't the first language I learned, but there's a fond place in my heart for it.  At the time, it was the (only) less painful way to get at sockets, libc calls like getpwnam(), etc.  I know the TIOBE index is flawed, but...ouch: https://www.tiobe.com/tiobe-index/perl/	tyingq	12.332688	-7.026507	comment	6.0	54.0	1585217065	13.175661
22768220	Personally, I don't think developers	Personally, I don't think developers should be mimicking Elm or React when they have the opportunity to build a custom gui library from scratch. Elm/React are helpful for overcoming the inherent problems in the html component development, but that requires them to be more ineffecient then typical native gui frameworks. Simple views are easy enough to handle, but these functional style guis don't tend to deal with complex views very well.	seanalltogether	12.975798	-7.6354814	comment	6.0	26.0	1585914565	-12.753803
22784815	> Typescript. You pretty much need t	> Typescript. You pretty much need that on any reasonable size project unless you are happy to spend your life tracking down runtime bugsI'd say it depends on your teams skill set and level of disciple. The best defence against a buggy codebase isn't a programming language or framework, its good all fashioned discipline.	orange8	12.369467	-6.788633	comment	6.0	57.0	1586080898	-10.43972
22800139	Crystal 0.34	Crystal 0.34	fells	12.637319	-7.2539124	story	6.0	82.0	1586230475	10.40533
22816557	Prolog look like it would be the cor	Prolog look like it would be the correct tool for the job for a certain class of problems, I wish I had time to learn it. I always wonder why it doesn't get more attention.	collyw	13.146915	-7.2926474	comment	6.0	39.0	1586376623	-12.484768
22822395	> For example, if there is a bug in 	> For example, if there is a bug in any core library, or something missing, you just have to wait for the core team to fix it, rather than being able to fix it yourself. You might need a performance fix, which can be done using Javascript but not in Elm (lack of destructive updates makes some things very hard to implement efficiently), and again you will be stuck having to explain to your boss “I know this is possible in Javascript, but we chose Elm and it makes it very hard”.Hard pass on Elm if this is true. This is an incredibly damaging accusation, is this consistent with other people's experience using Elm?	save_ferris	13.006377	-7.6886125	comment	6.0	35.0	1586439497	-12.758264
22823980	I've been recently wondering why som	I've been recently wondering why something like Javascript/Typescript could not grow into the role.* Ubiquitous.* Not owned by a single corporation.* Fairly performant runtime characteristics, with multiple implementations.* Optional typing for quick explorations.* Quite pleasant to use in its 2020 incarnation.* The community has a proven process, tooling and track record of incrementally improving a language and its ecosystem.Please don't shoot, I'm interested in constructive criticism.	pacala	12.352079	-6.510645	comment	6.0	18.0	1586448959	-10.443087
22853365	"""Reagent is the recommended approach"	"""Reagent is the recommended approach for building ClojureScript applications with Luminus.""Reagent is nice, but if you want global state management, re-frame adds most familiar concepts from redux but without as much boilerplate: https://github.com/day8/re-frame"	vga805	12.880439	-6.7486253	comment	6.0	30.0	1586754886	8.638009
22894718	LiveView is such a game changer for 	LiveView is such a game changer for Phoenix (and thus Elixir). From being “just another web framework” (albeit a very nice one), LiveView enables a whole different paradigm for web applications. As a developer, it’s like having superpowers. What would have taken days to build with an SPA or similar “fat client” JavaScript can be done in hours with LiveView.	mikl	12.904669	-6.8654113	comment	6.0	34.0	1587080450	12.711983
22903210	Hi! I'm the author of Gleam!Original	Hi! I'm the author of Gleam!Originally Gleam had a more Haskell-like (or rather a more OCaml-like) syntax. Over time people generally expressed a preference for a more familiar C-like syntax, citing the unfamiliar syntax making it seem unapproachable.Originally I thought these thoughts on syntax were unimportant (after all, syntax doesn't really matter) but after looking at the success of ReasonML (an alternative syntax for OCaml) and how it brought FP to a much wider audience, I decided that it would make sense to use this more C style syntax.Gleam aims to be very accessible and welcoming to as many people as possible, so in this area we've gone for something I personally prefer less as it it may help others more.	lpil	12.4341755	-7.4987774	comment	6.0	26.0	1587159379	-12.32031
22934095	It makes me feel nostalgic to read a	It makes me feel nostalgic to read about the times when people still tried to understand the hardware and make things work amazingly well despite harsh resource limits.Nowadays, even simplistic programs take ages on a device 1000 times more powerful. I had time to read this article because restarting our ruby development server is so excruciatingly slow.It seems the craftsmanship aspect of computer programming is getting lost, and all that remains is the large leverage that one can use to drive profits with software.	fxtentacle	12.657745	-6.9392605	comment	6.0	40.0	1587470230	12.367041
22948356	I've been following this project for	I've been following this project for 5 years now, and I've really hoped it would take off. However, part of what made (and to some extent, still makes) the Rails framework so great is the surrounding ecosystem of well supported gems that makes building tedious things a breeze.I built a few things in Phoenix in the past, and while the core framework is very simple and elegant to use, I recall having to write my own file uploading library because the one that existed had almost no documentation. This made me really hesitant to adopt Elixir / Phoenix stack for any projects I'm serious about.I was hoping there was a world where most of the old rails community moved onto phoenix, but in the time this project has been around, it seems the backend web stack has really fragmented into a multitude 	chriszhu12	12.782686	-7.1174664	comment	6.0	23.0	1587578428	12.709752
22948904	> When I say perfect, I mean, there 	"> When I say perfect, I mean, there has been never once in my career where I hit a roadblock due to the language's limitation or complexity or flawed assumption. I faced this with other languages, but not Elixir.This is pretty amazing praise! Are many of the other languages you've used strongly typed? That's the thing that gives me pause - I feel like I rely on the compiler a lot in languages where it can do a lot for me, and that I'd be really frustrated managing a large project without it.I'm not sure what other languages you have a lot of experience with, but does anything in Elixir stand out to you as the reason dynamic typing works well there? I think dynamic typing is the main reason I nod along with ""horrible programming languages like Javascript"", for instance."	mcintyre1994	12.510677	-7.4406314	comment	6.0	58.0	1587581530	12.917788
23007155	I've never increased my productivity	I've never increased my productivity by using Typescript, although I really tried very hard to like it. It just keeps bugging me. It's a constant stream of interruptions that force me to please the TS compiler, compared to having a rare type issue a once in a while in plain JS.Besides that, I've never been a Microsoft fanboy(to say the least) and it's worrying me that almost the entire JS eco system falls in the hands of that company; Github, VSCode, Typescript, NPM, etc.. Am I alone in this?There is so much good stuff in the JS world, but we seem to adhere to a few companies and a few systems more and more. Being a 'Javascript' developer today only has very little to do with Javascript. It's about React, Redux, Hooks, ESLint, Prettier, Typescript, etc.. Oh, and don't forget to do it Agile	conmigo	12.379597	-6.662883	comment	6.0	20.0	1588083233	-10.435531
23018904	I've been considering the jump into 	I've been considering the jump into TS, but I don't want to end up in a coffeescript situation (i.e. language is dead, but code lingers on and has to be converted back to JS at some point, rather painfully). Do you think it's worth it?	tenaciousDaniel	12.406209	-6.6900377	comment	6.0	26.0	1588167318	-10.472508
23023826	I wholeheartedly agree, to a point. 	"I wholeheartedly agree, to a point. Sometimes hideously complex things look so easy because really smart people came up with a particularly elegant solution, so any rando off the street sees it and figures they could reproduce the thing.However, I worked for a company who had a whole team of engineers and QA people working for months on what was basically a Django CMS, but with a large dose of ""not invented here""-driven writing of everything from scratch. I'd finally gotten tired of it, so I spent a weekend at home implementing it in Django and being done with it.I did learn two very important lessons, though:- The other stakeholders really did not like someone demonstrating a working prototype of something they'd been doing unsuccessfully for months, and I got a thorough chewing out for d"	kstrauser	12.79271	-6.533662	comment	6.0	27.0	1588192055	10.114488
23031745	A new Erlang VM with just replicated	A new Erlang VM with just replicated functionality is a fairly hard sell to the Erlang/Elixir community, who brag with the industrial track record of the BEAM.I believe you'd get much more interest if there was some ambitious new promise for this new VM, such as 10x sequential performance etc.	hopia	12.551377	-7.4871254	comment	6.0	49.0	1588259799	-8.990865
23113465	Show HN: New PHP router wich is 50 t	Show HN: New PHP router wich is 50 times faster then Laravel	gdever	12.7973585	-6.6374335	story	6.0	24.0	1588936329	10.3826885
23133411	> Even a simple thing like concatena	"> Even a simple thing like concatenation of two lists, that in Prolog it could be done purely declaratively, without expressing how it needs to be performed, seems levels more magical than how it is done in lisps.Not to argue with the claim—Prolog does feel magic sometimes—and maybe I'm not sufficiently idiomatic in Prolog, but I would express them similarly:  something like    concat([], Bs, Bs).
    concat([A|As], Bs, [A|Cs]) :- concat(As, Bs, Cs).

I don't have Lisp code at my fingertips, but that's quite like how I'd do it in Haskell:    concat [] bs = bs
    concat (a:as) bs = a:(concat as bs)

(I just looked up a Scheme primer to refresh myself, and I think there I'd do    (define (concat as bs)
        (if (null? as)
            bs
            (cons (car as) (concat (cdr as) bs))))
"	JadeNB	13.120859	-7.2970576	comment	6.0	24.0	1589124856	-12.4513035
23168795	I never understood why people rave s	"I never understood why people rave so much about functional programming wrt Erlang/Elixir, when its functional programming is clearly only a means to an end (fast and safe message passing requires immutable data, which requires FP) and not a driving design goal in its own right.I mean, unlike in typical hard FP languages like Haskell or Elm, mutable state is rampant in your average Elixir app, it's just spread out across many (global singleton) little processes. Only inside a process you're doing ""true"" FP but given how small the average process is in scope, in practice the only real big difference is that you can't to an `i++` style for loop. Oh no!But once you leave the process boundary, and often even before it, all bets are off. The amount of Elixir forum messages I've read that go ""yo"	skrebbel	12.597218	-7.4761724	comment	6.0	57.0	1589388334	12.920957
23172053	Awesome! Question, say you use TypeS	Awesome! Question, say you use TypeScript already, what are the biggest tangible gains in terms of safety (measured by fewer bugs in production) you think can be achieved by using Reason?	parhamn	12.365607	-7.008323	comment	6.0	36.0	1589405364	-10.441771
23172988	If you're getting into Deno and want	If you're getting into Deno and want to keep up with new stuff from the ecosystem on a regular basis, we're now publishing https://denoweekly.com/ .. issue 2 just went out minutes after the 1.0 release. I've been doing JavaScript Weekly for 487 issues now, so this is not a flash in the pan or anything :-DOf course, Deno has an official Twitter account as well at https://twitter.com/deno_land :-)	petercooper	12.499095	-6.4505525	comment	6.0	24.0	1589411765	-10.983301
23176696	> TSC must be ported to Rust. If you	> TSC must be ported to Rust. If you're interested in collaborating on this problem, please get in touch.This is a massive undertaking. TSC is a moving target. I occasionally contribute to it. It’s a fairly complex project. Even the checker + binder (which is the core of TS) is pretty complex.One idea that comes to mind is to work with Typescript team that they are only using a subset of JS such that tsc can be compiled down web assembly and have llvm spit out a highly optimized binary. This not only benefits demo, but the rest of the internet.TSC has done some great architectural changes in the past like doing mostly functional code, rather than lots of classes.The target we should be aiming for is a powerful typed language like typescript that complies very quickly to webasshmbly that ca	nojvek	12.333407	-6.8082423	comment	6.0	24.0	1589442892	-10.416089
23186342	I wonder what would be more efficien	I wonder what would be more efficient, constantly trying to eke out some performance out of a inherently slow language? Or writing/rewriting new/critical paths of the codebase in a faster language.Ruby used to be able to say we sacrifice performance for developer productivity.I don’t think this is any longer true, there’s plenty of languages out there that developers can be just as productive with, while producing wildly more performant code.	praveenperera	12.438469	-7.025403	comment	6.0	45.0	1589495333	12.352308
23221308	>(async is mature)is Django or Flask	>(async is mature)is Django or Flask async yet?	nojito	12.523351	-6.664102	comment	6.0	20.0	1589803807	9.904207
23244469	I almost didn’t watch that’s because	I almost didn’t watch that’s because who cares about someone solving a sudoku puzzle, but that was brilliant.That’s one happy solver; it was worth it just for the absolute joy he gets from it. Amazingly quick solving too. Good to watch him develop extra strategies during the process.	aidos	13.449747	-7.4085054	comment	6.0	31.0	1589962063	15.074357
23250498	The older I get the grumpier runtime	The older I get the grumpier runtime errors make me.I want ReasonML (language!) and Erlang (OTP!) to have a baby, and I want it birthed by the Go runtime. (Go? Yeah, Go. I don't love the language, but I am a lover of low latency and garbage collection, what can I say?) Yes, there's Gleam, but if something's based on BEAM, the throughput generally won't impress. :-( Would seem a shame to do all that static typing, and then not reap the speed benefits.Relatedly, I think there's a sweet spot for a language that accepts mutability inside of actors, but only allows immutable objects to be sent as messages, with an escape hatch available if needed. (Pony explored this space, would love to see it evolve.) Combine that with OTP for happy-path programming, and an ML so you catch most of your errors	Scramblejams	12.507247	-7.4729176	comment	6.0	33.0	1590001483	-12.383873
23251386	> Most developers who hate PHP hate 	"> Most developers who hate PHP hate it out of elitism or ignorance. Either way it’s dumb. You have to choose a technology based on what you need. PHP is highly useful and powerful in many scenarios. And taking it out of the equation just because of its reputation is not a good idea.When I conduct hiring interviews, one of the questions I like to ask regardless of the language for the position, is the developer opinion on PHP.It's not uncommon for some to start massive rant based on outdated or outright wrong statements about PHP. Most of them never even used PHP.It's a nice question to filter out elitists. The best candidates usually answer either ""can't say because I have never used PHP"" or state pros and cons of PHP based on their experience.edit: quick -3 downvotes. I suspect I hit a ne"	hu3	12.774636	-6.645059	comment	6.0	43.0	1590006547	10.33662
23286318	> The cases were Erlang shines are v	> The cases were Erlang shines are very hard to replicate in these languages.I'm just beginning to get interested in the Erlang ecosystem. Could you please add more color to this and give some examples where Erlang shines? IIRC, Whatsapp backend used to be on Erlang.	nell	12.578719	-7.515002	comment	6.0	24.0	1590267104	12.905781
23287206	This, twice.Back in the day people w	"This, twice.Back in the day people would balk at hiring Python programmers saying, ""there are so many more Java programmers"", and I used to say, ""Why would you hire a Java programmer who was unwilling or unable to learn Python?""Same logic applies here: Why would you hire a Python programmer who was unwilling or unable to learn Erlang?  (Especially if you're going to pay them to do it!)If you can't switch languages you're a kind of technician not a programmer.FWIW, having done it professionally for ~15 years I'll never write another large project in Python again.  Erlang's runtime is so much better than Python's it's just ridiculous.  I feel stupid for not realizing this sooner."	carapace	12.555393	-7.5126987	comment	6.0	36.0	1590273490	12.923238
33096995	My Future with Elixir: set-theoretic	My Future with Elixir: set-theoretic types	rukenshia	12.420691	-7.417714	story	6.0	102.0	1664984459	12.932207
33118590	> Even if we did do that, I've done 	"> Even if we did do that, I've done some research on measuring difficulty of Sudoku -- many Sudoku grids are unsolvable by humans -- they are far too hard.> A different, and interesting, question would be how many Sudoku are there which can be considered human-solvable. That's an even more open problem (we'd have to exactly define human-solvable to start).What does it mean for a sudoku to be non solvable by human? I wrote a sudoku solver once and thought humans solving harder sudokus is basically exactly what a computer would do: guessing number and trying to solve it further, backtracking on failure. Or do you mean non-human solvable as ""it would take a lot of time for a human to solve it""?"	AlbertVAustin	13.449483	-7.4098926	comment	6.0	45.0	1665130096	15.078678
33134609	PHP.Use PHP, it’s so crazy easy for 	PHP.Use PHP, it’s so crazy easy for web development.- No compiling,- no middleware,- no state (which also means no memory leaks),- just drop a file on web server and it works (no crazy CI pipeline),- the documentation is fantastic,- it’s extremely fast, and- no surprises because it’s tried and true.PHP is so under appreciated.	alberth	12.747111	-6.5832148	comment	6.0	31.0	1665253083	10.302212
33139403	The post mentions one of the most im	The post mentions one of the most important factors in TypeScript’s adoption: it launched, from the start, with good tooling.	moomin	12.375042	-6.751196	comment	6.0	61.0	1665308123	-10.463633
33143298	I'm sure I'll get downvoted for this	I'm sure I'll get downvoted for this one but quite frankly it's where the PHP developers all slithered off to. It was inevitable.I avoid to the point of refuse to work with any JavaScript platform at all. They are a universal shit show.Edit: honestly I stand by this comment. I literally have spent hours this year dealing with fucked up messes in nodejs, package security issues after repos were hacked and code made it into NPM that displayed banners on commercial sites. My comment is toxic yes but quite frankly both communities are as well (PHP and NodeJS) and utterly earned that ire and discontent. The fact people lean on the stack and produce stuff that handles critical aspects of people's lives is utterly frightening. So yeah toxic, I don't care. Feel free to be annoyed. It's still a tur	gw99	12.676962	-6.5375047	comment	6.0	34.0	1665336318	10.304029
33181936	I’m still surprised that we haven’t 	I’m still surprised that we haven’t seen much larger improvements in Ruby performance over the last decade given the large number of major tech companies using Rails.Yes, I'm aware of 3x3 but for the most common usage of Ruby which if for Rails apps - there hasn't been anything like the gains PHP saw from 5.x to 7.x.Especially from Microsoft, who has deep compiler/language expertise, and who owns GitHub (large Rails app).	tiffanyh	12.66314	-7.0138836	comment	6.0	29.0	1665603361	12.365701
33182571	I have now worked at several signifi	I have now worked at several significantly-sized companies that ripped Ruby out of everything as they scaled, usually replaced with Go, though none as large as Shopify.I wonder what that financial calculus looks like between these options for a large organization:1. trying to basically reinvent the workings of an entire programming language and migrate your Ruby apps to these new tools/runtimes/typecheckers/whatever2. incrementally rewriting critical paths to something more performant (Go/Rust) & just throwing more servers at the Ruby stuff you haven't managed to replace yet.	skrtskrt	12.698112	-6.984615	comment	6.0	26.0	1665606292	12.327439
33208359	PHP-FPM can be so unreliable too. It	PHP-FPM can be so unreliable too. It'll just go down randomly without any warning or logs at all. As you said, it's impossible to debug what happens there and all you can really do is setup monitoring to detect it went down and automatically restart it.	apocalyptic0n3	12.746035	-6.616491	comment	6.0	22.0	1665778657	10.375046
33323574	Civet: The CoffeeScript of TypeScrip	Civet: The CoffeeScript of TypeScript	Yahivin	12.41643	-6.638722	story	6.0	20.0	1666651150	-10.489579
33332041	Why did Python win the war with Ruby	Why did Python win the war with Ruby? Was it purely the math community deciding this is where we throw our weight and left Ruby the runt of the litter?	sergiotapia	12.508605	-7.0409074	comment	6.0	32.0	1666712235	12.395586
33334082	I am wondering if Rails moved to esb	I am wondering if Rails moved to esbuild a little too early.	ksec	12.758131	-6.9302425	comment	6.0	21.0	1666720960	12.360547
33358726	PHP is improving, slowly, but it is 	PHP is improving, slowly, but it is still way better than the PHP 5.x days. If your last memory of PHP is from 5.x, it's a very different language now - even if it still has oddities, quirks, inconsistencies, and footguns, but PHP is still not the king of footguns - C++ is.I would ask though that if any PHP developers are reading this, I would love a feature called `modern_syntax` or similar which represents a major break in backwards compatibility in exchange for modern language conventions (i.e. no `$` prefix on variables, no `;` ending lines, perhaps some renamed core functions for consistency - we can have a debate about this). Kind of like how we have `strict_types`. Or, perhaps it could be invokable on a per-file basis, by using `<?phpmodern` instead of `<?php`. Then you could have y	gjsman-1000	12.744159	-6.6467757	comment	6.0	40.0	1666883442	10.335082
33427570	> ... [I]n my experience it is rarel	> ... [I]n my experience it is rarely necessary to refactor Erlang code in the same way the object-oriented code needs refactoring from time to time.That... depends. If you work with only highly disciplined people who want to do the right thing always, then yeah, I agree. But if you work with people who have deadlines or need to get stuff done _now_, you could see functions that take unnecessary arguments, or excessively large records, and those sorts of things are hard to work with.I think this person is an excellent engineer who loves to code and is really good at it, but hasn't worked with Erlang in a professional capacity. Which...> I have spent a large chunk of my free time programming in Erlangding ding ding	distortedsignal	12.541497	-7.4993067	comment	6.0	41.0	1667337318	12.880751
33427802	>> Erlang does not use a contiguous 	>> Erlang does not use a contiguous chunk of memory to represent a sequence of bytes. Instead, it something called an “I/O list” — a nested list of non-contiguous chunks of memory.is this cpu cache-friendly ?	latenightcoding	12.465067	-7.512172	comment	6.0	18.0	1667338253	12.864216
33430742	I discovered Evan Miller at the same	"I discovered Evan Miller at the same time I started using Erlang, around 2009/2010. I used Chicago boss, his Erlang framework, in three projects.The third project was a complete rewrite of a really badly created dating website written in PHP that would crash at least once a day and would be unbereablly slow, built by 5 people for a full year.
We rewrote everything in 3 months, with two developers, while adding features that were impossible to do otherwise.
One lighting bulb moment is when we realize we could use ejabberd and the xmpp protocol for way more than messages and chats, but also to handle our news feed. 
Once we launched the rewrite, the website became extremely fast and stable.
Since then, the BEAM has always been my go-to platform, even if now I use elixir.There is no platform/"	julienmarie	12.629161	-7.4725432	comment	6.0	21.0	1667355739	12.933389
33495370	Great post! I feel like Ruby can mak	Great post! I feel like Ruby can make a comeback if a lot more people use it for more than just Rails	faraaz98	12.744675	-6.944308	comment	6.0	43.0	1667758028	12.366358
33506695	Not sure about the timtam example. C	"Not sure about the timtam example. Couldn't this:  const flow = (...fns) => x0 => fns.reduce(
    (x, f) => f(x),
    x0
  );

  function slamTimTamsUsingFlow(timtams) {
    return timtams
        .slice(0, MAX_TIMTAMS)
        .map(flow(
            biteArbitraryCorner,
            biteOppositeCorner,
            insertInBeverage,
            drawLiquid,
            insertIntoMouth));
  }

Just be written as:  const slamTimTams = timtams => 
     timtams
        .slice(0, MAX_TIMTAMS)
        .map(timtam => timtam.biteArbitraryCorner()
            .biteOppositeCorner()
            .insertInBeverage()
            .drawLiquid()
            .insertIntoMouth());

Feels much more concise and readable than the flow example"	drawfloat	12.332636	-6.6891093	comment	6.0	23.0	1667833458	-10.3446
33527511	Phoenix with LiveView is an antidote	Phoenix with LiveView is an antidote to the pernicious Web we weave. Massive concurrency, hydration, and that ever elusive stateful single page app experience, are all handled at the framework level instead of in the application. You write the app and it Just Works. If React or the JavaScript du jour isn’t already your horse in the race, Elixir is well worth a weekend test drive.	ipnon	12.884188	-6.8785954	comment	6.0	67.0	1667967961	12.710162
33535027	The generalist view is that nobody i	The generalist view is that nobody is using Erlang for modern telco workloads anymore.(yes, there are exceptions. Bear with me)I learned Erlang when we were programming Ericsson voice switches some twenty years ago, and even though Nokia also adopted OTP and did some pretty amazing things with it (including a Hadoop analogue that used Erlang to coordinate Python workers across nodes), I have only come across Erlang when looking at legacy workloads that needed to be moved to the cloud.NFV and CNF efforts (i.e., virtualized and containerized network functions) I've come across over the past few years seem to be mostly Go or C++. Jaeger is a common tool. I see a lot of Postgres. I also see really weird CNI approaches (check out multus, because telcos still can't get over having dedicated netw	rcarmo	12.551819	-7.498914	comment	6.0	24.0	1668015427	12.937587
33773698	I certainly wouldn't take a job in a	"I certainly wouldn't take a job in a place where they default to using TypeScript without thinking about the tradeoffs first. Cargo-culting never ends well, and there are no silver-bullets. I'm more afraid of those two ""concepts"" being a part of ""company culture"" than having to use JavaScript without TypeScript."	capableweb	12.388273	-6.760821	comment	6.0	54.0	1669643918	-10.453026
33785341	> What’s awesome about Ruby?> Dynami	> What’s awesome about Ruby?> Dynamically typedAs someone who has experienced the joy and at least some feeling of safety from moving to typescript from javascript, I would seriously question that dynamic typing is awesome.	azangru	12.403943	-7.0790796	comment	6.0	31.0	1669713274	12.371741
33800446	I'm Bernard, the creator of lunatic.	I'm Bernard, the creator of lunatic. Great to see us back on HN and happy to answer any questions!We have been busy pushing out a lot of new stuff. Recently we released a web framework [0] for Rust building on top of lunatic, and a live-view library [1] for crating full stack apps in Rust without JS. For now we are staying close to the Phoenix LiveView implementation, where everything is rendered on the backend and just a diff is sent over websockets to the frontend. But a big advantage of Wasm is that it runs in the browser too, so we hope to leverage this part to move some of the logic directly into the browser, like form checking, or offer a way to create offline-first experiences with the backend running as PWA in a service worker.[0]: https://github.com/lunatic-solutions/submillisecon	bkolobara	12.776724	-6.562127	comment	6.0	28.0	1669815252	12.66688
33845350	     Seriously, since everything I w	"     Seriously, since everything I work in is 
     denoted as ""cents"" from backend to frontend,
     I personally had never understood the need

This matches my experience.Obviously actual strict typing has its benefits, but as far as developer ergonomics are concerned, IME you can get about 95% of the benefits just by following a convention of including unit names in identifier names.It's easy to see why this Ruby code might fail:    def launch_rocket(distance)
      # what units are we expecting?
    end

    launch_rocket(42)

But this is virtually impossible to screw up, and reduces developer cognitive load:    def launch_rocket(distance_km:)
      # blahblahblah
    end

    # not happening unless developer consumes a large number
    # of drugs
    distance_miles = 42
    launch_roc"	JohnBooty	12.342889	-7.05117	comment	6.0	32.0	1670089282	12.359785
33907703	Is it really that bad to use older v	"Is it really that bad to use older version of PHP for longer?The plugin/theme developers usually develop with older versions of PHP in mind, lot's of plugins still work even with 5.x versions...For my WP sites I just stick with ""two major versions behind"" workflow and I don't encounter many problems.Am I doing it wrong?"	debesyla	12.759476	-6.639967	comment	6.0	22.0	1670506516	10.3126545
33933047	Elixir-style pipelines in Ruby	Elixir-style pipelines in Ruby	gregnavis	12.647576	-7.380968	story	6.0	63.0	1670683678	12.867178
34087525	Django makes it easier to build bett	Django makes it easier to build better web apps more quickly and with less code	doener	12.806225	-6.51604	story	6.0	50.0	1671663577	9.967387
26492043	I am convinced (through experience) 	I am convinced (through experience) that overuse of the Django ORM (and Django REST Framework, which is tightly coupled to the ORM) is a pattern that leads to intractable ball-of-mud apps.There's so much stuff available for Django out of the box like auth, http/REST, CSRF, etc that it makes it really hard to justify not using Django at the start of a project. But the recommended/accepted Django patterns lead to pure misery down the road due to how coupled the app becomes.You can make a well-architected Django app, it just requires ignoring almost every common or recommended Django pattern.	skrtskrt	12.855873	-6.49039	comment	6.0	28.0	1615992727	10.027136
26545927	Huh - what's the last language that 	Huh - what's the last language that got mainstream adoption without backing from a large company? It almost seems impossible these days.Ruby?	johnfn	12.560058	-7.041766	comment	6.0	26.0	1616442776	12.372565
26545793	Would a developer looking a Zig/C++/	Would a developer looking a Zig/C++/Rust really also consider Crystal?I figured Crystal was for Ruby developers who want a good static type system.	genuine_smiles	12.6054	-7.2622027	comment	6.0	51.0	1616442258	-11.232233
26565567	I once loved Perl, it was the first 	I once loved Perl, it was the first language I learned, but reading through the comments and link I don’t see how you turn it into a modern, well loved and well used language (or even stop the decline) through small improvements but no grand vision, or by stepping away from the past in a meaningful and painful way.I wish them nothing but success, and sincerely hope their plan works, but I personally didn’t read anything there that made me think “oh wow, I’ll have to give Perl a try again when they deliver on their vision.”	j4yav	12.330589	-7.027516	comment	6.0	61.0	1616582965	13.173315
26583204	My first code for CGI was all done i	My first code for CGI was all done in C.  When I found Perl, there was no looking back, never used C for CGI again.While I haven't written any significant Perl in a long time, I will always appreciate how much it improved things for me back then.	josephscott	12.438505	-6.719387	comment	6.0	19.0	1616694353	13.1248255
26710396	Before Django the gold standard for 	Before Django the gold standard for Python web apps was Zope.  What a tremendous achievement by the Django team!	pantulis	12.775083	-6.5623617	comment	6.0	28.0	1617706844	10.07865
26803838	Why does TypeScript use javascript a	Why does TypeScript use javascript as a compile target and not web assembly?	fergie	12.339448	-6.710554	comment	6.0	33.0	1618383456	7.1045046
26830287	Look at the abject failure of Discou	"Look at the abject failure of Discourse. If it had been written in PHP then it would have completely replaced all current forum software. But the devs there hate PHP and went for a modern stack which is all but impossible to install except for tech professionals.In other words, they chose a tech stack which suited them as developers, and not which suited the end users of the software.End users love PHP because you copy the files into a folder. That's why it's so popular. That fact that you are talking about architectural ""elegance"" shows how removed you are from understanding the needs of the end user."	JamesDeepDown	12.767747	-6.63592	comment	6.0	50.0	1618554361	10.351302
26857393	As someone who isn't a software deve	As someone who isn't a software developer by trade, how did you decide on the software stack?I hadn't even heard of Phoenix (I am not a web dev by trade, so maybe that's why!), so I am a bit surprised to see something less mainstream as a 'goto'.	koyote	12.748173	-7.1562114	comment	6.0	21.0	1618787188	-5.950909
26861979	Ok, exaggerations about elm's safety	Ok, exaggerations about elm's safety aside, there's the huge issue of it's readiness for production.It's not just a fledgling project, it's a project that's being carried by one person for a very broad scope, and it's been going for a very long time now. Contrast that with something like vue, where Evan You has a fair amount of corporate sponsorship, has a much smaller scope (i.e. not an entire new language), big following, and has other frameworks to develop in tandem with (i.e. get inspired by react). Not to mention that it's very similar to other frameworks, so it's easy to pick up, so easy to hire for.I would shitting bricks if I had 200k lines of code in a completely different language with a heavily different paradigm, that's not really battle tested.	preommr	12.998793	-7.676944	comment	6.0	46.0	1618835402	-12.795752
26862280	Elm as a language is really nice, an	Elm as a language is really nice, and I do like the goals of the project.  I tried it out a bit, its a mind-bending paradigm for someone coming from OOP/prototype (Python, Java, JS) and I enjoyed the challenge.The community, on the other hand, is what turned me off.  It does seem very unfriendly to newcomers. In addition,  https://lukeplant.me.uk/blog/posts/why-im-leaving-elm/ amongst others, is an entire turnoff.  And seems like this perception isn't isolated and has been discussed at https://news.ycombinator.com/item?id=22821447I hope things work out well for you in this project with Elm, now and in the future.  But it doesn't seem like any of the issues with the community have been even attempted at being addressed, so I don't think I will give Elm another try.	dd82	12.999425	-7.6843543	comment	6.0	32.0	1618837438	-12.759201
26891665	I guess the first and foremost for a	"I guess the first and foremost for an ELI5 is WTF is BEAM VM?The ""BEAM VM ELI5"" page doesn't explain what it is specifically, and how it's not a Hypervisor VM, but as a bytecode interpreter in Erlang. When I see 'VM' I think first of a hypervisor virtual machine.Maybe I'm a bit of a curmudgeon, but I'd like to think an ELI5 would at least bring in the basics.http://beam-wisdoms.clau.se/en/latest/eli5-vm.html"	Severian	12.538427	-7.480168	comment	6.0	20.0	1619021974	12.89421
26903406	It hurts seeing Ruby listed as a dre	It hurts seeing Ruby listed as a dreaded language. I think what is actually dreaded is Rails, and the terrible, awful, no-good things PM's forced it to do in the 2010's.I'm a Python developer now, but I still miss the ease of writing code in Ruby. I find it a cushy, intuitive activity, and I wish it was used for something other than hulking, poorly scaled/planned out web apps of yesterdecade.	Rooster61	12.607822	-7.025804	comment	6.0	24.0	1619102990	12.388476
26922905	Wow. The article is easy to read des	Wow. The article is easy to read despite dealing with a complicated topic. And the idea looks quite innovative - definitely something that attracts researchers.Still, after 4 years, this article has 1 citation, which is a self-citation [1]. Is this a definitive proof that Prolog is dead?[1] https://scholar.google.com/scholar?cites=4818730189048705347...	radomir_cernoch	13.155611	-7.2990875	comment	6.0	26.0	1619248102	-12.506602
27125428	I've moved most of my Flask projects	I've moved most of my Flask projects to Express and NodeJS.Flask was just a PITA to deploy properly in a way that it could handle lots of concurrent connections without a massive memory footprint, and async in Python is a mess.The JS ecosystem has on the other hand moved to async and Promises as the standand/default way to implement things, which makes things much easier.Express middleware is also just easier to write than Flask middleware.	dheera	12.442912	-6.491647	comment	6.0	26.0	1620780678	9.752642
27172483	Definitive Guide to Ruby's C API	Definitive Guide to Ruby's C API	Lammy	12.584804	-7.0404162	story	6.0	171.0	1621158167	12.355207
27173890	Learn Datalog Today	Learn Datalog Today	cube2222	13.181036	-7.023606	story	6.0	141.0	1621174870	5.752927
27193134	"It's not argument ""against"" selectin"	"It's not argument ""against"" selecting it (it's a free world, and mileage vary), but a couple of scar-earned advice:- Be careful about libraries. If you know that your system has to interact with X, don't assume that there is a running, idiomatic, maintained libary for X on `hex.pm`.
Do a bit of due diligence. 
We had experience ranging from `meeh` (oauth2, graphql, http) to `pretty bad` (mqtt, swagger.)But as other say, if you're doing vanilla Phoenix/Plug/Ecto with exactly the right kind of DB, you'll should be ok.- Give a little though about how you'll be deploying and operating. `releases` and `configuration` haved changed in pretty big ways in the past (https://elixir-lang.org/blog/2019/06/24/elixir-v1-9-0-releas...), the ecosystem is constantly in flux (`config.exs` vs `Application.ge"	phtrivier	12.744646	-7.297998	comment	6.0	23.0	1621335541	12.827448
27195000	"""Also, I've read some comments where"	"""Also, I've read some comments where people mention ""we don't need redis"", ""we don't need workers"" everything is so much easier. That was our thinking at first. But then you realize on deployments you will lose your cache, or your background jobs, etc. So you have to persist them either in mnesia or in the database. At that point you're just reinventing your crappy undocumented and untested version of delayed_job... Most of what you get from elixir in terms of redundancy, high availability, etc you can have that anyway from kubernetes, heroku or any PaaS.... you will need more than 1 server anyway, so...""I used Erlang for 5-6 years in a production environment in a deployment that wasn't the world's biggest, but did seriously need clustering because we needed more than one machine to handle"	jerf	12.631148	-7.46942	comment	6.0	36.0	1621348035	12.908798
27225552	I used to teach web development and 	I used to teach web development and was always frustrated with just how much effort went into setting up a machine. It would be really nice if a developer could just include a script tag in their project that setup a TypeScript compiler inside service worker. I managed to get the basics down, even fixing relative import statements. Requests like localhost:3000/main.tsx would compile and cache on the fly.There were a few native file system issues I encountered that this would be perfect for!	throwaway284534	12.377585	-6.742973	comment	6.0	27.0	1621537146	-10.447312
27231926	Metaprogramming in Elixir	Metaprogramming in Elixir	vroccolli	12.606229	-7.4519434	story	6.0	125.0	1621588540	12.905819
27235936	JIT doesn’t seem like the big optimi	JIT doesn’t seem like the big optimization that Rails needs. Rails has low throughput because you have to run multiple full-fat instances of rails to handle requests in parallel or multiple beefy threads to handle requests concurrently. Either way you’re spending a huge amount of ram to add a small amount of throughput.JIT only adds a marginal improvement to this current setup.A true async backend like Falcon adds a huge amount of concurrent throughput if tuned correctly and ractors could provide a big parallelism boost if they shared more memory.	sosodev	12.61105	-6.9838634	comment	6.0	64.0	1621613562	12.338788
27236894	Sorry I used to work for Amazon and 	"Sorry I used to work for Amazon and we did not allow Rails to be exposed to external customers for performance reasons. I think what you classify as high performance is very different what I classify as high performance.Btw. I haven't seen Rails or Ruby on this list in the top 50% for a while:https://www.techempower.com/benchmarks/I would prefer hard data as opposed to ""this is a legend"".UPDATE:Rails is number 399 out of 439, having 0.3% performance of the top frameworks in a plain text task.I know, facts hurt."	StreamBright	12.737214	-6.9475446	comment	6.0	27.0	1621617228	12.345583
27240836	As somebody who loves PHP, some PHP 	As somebody who loves PHP, some PHP mockery is deserved. The standard function naming and argument ordering is inconsistent and stupid. It throws errors written in Hebrew. There were fundamental decisions made that harmed web security for years. Unicode wasn’t in PHP for a long time. Getting decent performance and/or scaling was/is a major challenge. The comparison tables are questionable at best. Etc.The language is bad, but... you can still write great code in a bad language. And you don’t need a good language, or even good code to build a great website. Facebook has made more money with questionable PHP code than any site built with elegant pearl webscripts that I know of. Wikipedia is PHP. So was Digg (RIP). Your users don’t give a darn how good your language or code is so long as it u	542458	12.757071	-6.64529	comment	6.0	26.0	1621636660	10.341367
27250619	My Road to Erlang (2008)	My Road to Erlang (2008)	todsacerdoti	12.56663	-7.5200667	story	6.0	152.0	1621720612	12.920587
27311625	> unloved, unpopular, uncool things 	> unloved, unpopular, uncool things like Django, Rails, LaravelOh they're loved all right, it's just that they're (all three) very mature, packed with features, easy to pick up and people who work with them don't have a reason to sit around and discuss the tools.I work for a smaller Rails shop and the atmosphere is just so nice there. We work on small (think $20k) projects for different niche customers, we absolutely reject SPAs (for what we do), we host the apps on cheap VMs, we don't worry about scaling at all, we talk to the clients a lot, we prototype fast and it's all just so easy and even brings good money.Rails is the no-bullshit way, and definitely the human way.	Toutouxc	12.76567	-6.8020086	comment	6.0	21.0	1622174774	12.336387
27322900	If you want fast Ruby it seems Cryst	If you want fast Ruby it seems Crystal is your only option. Ruby is an interpreted language released in 1996 for scripting. Why are we surprised when attempts to shoe-horn it into something else (Ruby 3.0, JRuby, Truffle Ruby) fall flat?	cutler	12.602251	-7.145343	comment	6.0	33.0	1622260364	-11.272807
27323348	Here's the summary: Ruby like most o	Here's the summary: Ruby like most of all other Linux applications from that age was written to run in multi-process mode for parallelism, instead of being multi threaded.But running multi-process is heavy on the JVM as it has to load the virtual machine and JIT for every process start, special when the processes are short lived.Java solves it by encouraging running things as multi-threaded instead of multi-processed.But Ruby wasn't built to run multi-threaded. And CRuby even if can run threads, does it by implementing a global thread lock. Aka, only one thread can run in a process at a time. The other threads have to wait until it finishes.It looks like the multi-process implementation is good enough for CRuby and JRuby's attempt to turn it into multi threaded application didn't improve t	habibur	12.593645	-6.9915667	comment	6.0	20.0	1622267876	12.299067
27430806	Bakeware: Compile any Elixir applica	Bakeware: Compile any Elixir application into a single binary	sergiomattei	12.64131	-7.435355	story	6.0	147.0	1623128509	12.93908
37594525	Erlang/OTP 26.1 Released	Erlang/OTP 26.1 Released	amalinovic	12.583659	-7.509401	story	6.0	221.0	1695282974	12.898999
37595241	This is a good place as any to ask: 	This is a good place as any to ask: I'm an experienced Elixir dev so I know my way around Supervisors, GenServers, Registries, etc. but I feel there is more to OTP, the myriad of erlang modules for fault tolerance, which are not immediately visible unless you spend a lot of time reading the erlang docs.Is there a good book that is focused on advanced OTP? On the internals of the BEAM and the hairier parts of the Erlang ecosystem? I can only find basic to intermediate introductory material. Perhaps I should just spend time reading the erlang website back-to-front...---1: I'm taking a small break from writing a parallel, distributed website crawler with homegrown HTTP client. Quite fun, very fast, to replace my first, rough prototype written in Rust. The hard part is accepting that most HTTP	sph	12.619523	-7.4791174	comment	6.0	20.0	1695288407	12.910914
37595908	I think what you're seeing here is a	I think what you're seeing here is a difference in age and general approach to programming. I learned how to program in the 70's and early 80's. Back then anything that didn't require punch cards and line editors was considered an amazing luxury. I never really grokked IDE's (though: TurboC and TurboC++ got pretty close on Windows) and I tend to remember the bits of a language and eco-system that I need.Erlang was made by and for that generation, with the tools that were there at the time and so it 'speaks to me' in a way that I'm familiar with. Going on the assumption that you've learned to program a little later, by the time that eco systems were more fully featured, IDEs were commonplace and things like test libraries and namespaces were common I can totally understand why something lik	jacquesm	12.592412	-7.504056	comment	6.0	30.0	1695294128	12.933035
37787417	Would anyone start a new project wit	Would anyone start a new project with Rails today?If someone suggested using Rails for a new project to me today, I would show them the door.There are so many more mature frameworks in more robust and performant languages.IMO the only reason to use Rails today is if you’re too uncurious to learn something better.	crystaln	12.749207	-6.9083047	comment	6.0	36.0	1696570728	12.344193
37939669	Learned that by coding with a friend	Learned that by coding with a friend I considered a terrible coder.I worked with him on a lot of fun projects, because we get along well, and he really doesn't know what he is doing, copy / pasting all other the place, no archi, no design, bad naming... Half of the time he's not sure what the code is really doing.And it works.I noticed how in the end he accomplished more than I did. He didn't sweat the small stuff, he worked more, way more, as well. He didn't write unit tests, but he always tested everything manually again and again by playing with the result like a kid.In the end I embraced the idea.I wanted to code a contact software because all the ones I tried didn't do what I wanted. I didn't, I just used django-admin and called it a day instead of trying to craft some slick UI. I've 	BiteCode_dev	12.757043	-6.541198	comment	6.0	25.0	1697700862	10.080815
37940842	AtomVM: Erlang virtual machine for I	AtomVM: Erlang virtual machine for IoT devices	rapnie	12.553176	-7.5095925	story	6.0	151.0	1697710921	12.899144
37997267	Can someone explain in concrete term	Can someone explain in concrete terms this sense that ROR let’s people be highly productive?It’s hard for me to imagine what could be so much more productive than any number of other languages//frameworks.What does ROR actually have that the next technology doesn’t?	andrewstuart	12.703331	-6.9896946	comment	6.0	28.0	1698145226	12.357459
37997698	> The productivity of Rails absolute	> The productivity of Rails absolutely trounces JS-framework-de-jour in my experience. It’s almost certainly the framework I would be recommending for a CRUD app, which covers the vast majority of business software.Rails is certainly productive in the early days of building something, because so much of what you need is already built. But as time goes on that productivity edge vanishes.It's far easier to build slick modern UIs in other frameworks, and there are now Typescript frameworks (e.g. Remix) where you can use the same types (and get type safety, IDE auto-completion, IDE warnings, etc.) across the entire stack (it's amazing!) The fact you don't need import statements to use code across a Rails app feels like a blessing at the start, but as the codebase grows, it can become a nightma	adriand	12.741191	-6.8907776	comment	6.0	21.0	1698147817	12.332698
38011609	“Any sufficiently complicated concur	"“Any sufficiently complicated concurrent program in another language contains an ad hoc informally-specified bug-ridden slow implementation of half of
Erlang.” – Virding’s first rule of programming"	whalesalad	12.505865	-7.5096536	comment	6.0	34.0	1698232865	12.868487
38053509	Elixir is not strongly typed. You ca	Elixir is not strongly typed. You can bind any data type to a variable at any time.	loloquwowndueo	12.598624	-7.4799724	comment	6.0	23.0	1698528285	12.916205
38144124	C++ Sudoku Solver by Singapore PM Le	C++ Sudoku Solver by Singapore PM Lee Hsien Loong	georgehill	13.450017	-7.4098153	story	6.0	74.0	1699124835	15.078141
38215055	Which companies have used Elixir in 	Which companies have used Elixir in production, I know Brex used to use Elixir but now used Kotlin and also the Bleacher Report.Are there any more?	colesantiago	12.688131	-7.4648457	comment	6.0	18.0	1699590652	12.933963
38251813	I tried to like ruby and rails, but 	I tried to like ruby and rails, but when I tried to grok the language, I found it more difficult to follow than python + js (my daily drivers).Did anyone else feel the same way? I kind of want to give it another chance bc I have some side projects that I want to try out, but I find django/python and next/react easier to grok. Maybe I should try harder?FWIW, I also want to pick up good practices when it comes to engineering a back end, and the good ex-rails engineers I know tend to be really good in general.	game_the0ry	12.643965	-6.956732	comment	6.0	24.0	1699891823	12.373194
38404835	Elixir at Ramp	Elixir at Ramp	judicious	12.692302	-7.4600844	story	6.0	175.0	1700839232	12.921005
38436975	The official Rails job board is live	The official Rails job board is live	riffraff	12.753674	-6.940265	story	6.0	36.0	1701113278	12.3852415
38461357	hey, andy from the deno team here. w	hey, andy from the deno team here. we're really excited to land this. happy to answer any questions or pass questions along to the team!	lambtron	12.525881	-6.4467244	comment	6.0	27.0	1701274812	-11.035246
38488389	Just 12 years full time with Ruby he	"Just 12 years full time with Ruby here, I'm a noob. But when I see that I could replace  def initialize(text)
    @text = text
  end

  def inspect
    ""#<#{self.class} #{text}>""
  end

  def ==(other)
    other.is_a?(Word) && text == other.text
  end

with  def initialize(text) = @text = text
  def inspect = ""#<#{self.class} #{text}>""
  def ==(other) = other.is_a?(Word) && text == other.text

I start drooling a little. That's 3 lines to replace 11. We have a soft limit on class length of 100 lines, and I like the extra conciseness this allows.You can also do it like  define_method(:inspect) { |text| ""#<#{self.class} #{text}>"" }

and we do that in some places, but that extra verbosity makes for more lines."	progne	12.461315	-7.076245	comment	6.0	26.0	1701447318	12.401248
38518680	Sadly I don't use Django anymore at 	Sadly I don't use Django anymore at work but it still has a special place in my heart. The ORM model is the best I've ever worked with and any other always feels clunky with sharp edges to cut you when you hold it wrong.In recent years Django had multiple major releases, I still remember it as being in 1.x forever. Does somebody know what changed within the Django Community that they break backward compatibility more often?	h4kor	12.81225	-6.548459	comment	6.0	50.0	1701704822	10.084205
38519158	My app is a Django backend and a Vue	My app is a Django backend and a Vue frontend. There are large swathes of Django that I ignore, but to me the core of Django — its ORM, routing and middleware system, and admin interface — are worth their weight in gold. The migration from DRF to Django-Ninja (which is, roughly, FastAPI + Django) has also been a great improvement in terms of productivity and performance.Not a lot of whizbang features in 5.0, but GeneratedField looks like a very nice addition, and reason enough to migrate.	jmduke	12.830355	-6.528468	comment	6.0	26.0	1701706813	10.080537
14748524	Anyone know if Phoenix/Elixir have s	Anyone know if Phoenix/Elixir have something similar to Ruby's bettererror gem? I see Phoenix has a built-in error stack trace page which looks like a clone of bettererror but it doesn't have the real-time console inside of it.Also, I wish they had a ORM like Sequel. These two are really what is holding me back from going full in on Elixir. Anyone can care to comment on this?	jaequery	12.715271	-7.3398213	comment	6.0	20.0	1499811047	12.811832
14748723	> I see a bright future for Elixir, 	> I see a bright future for Elixir, and a breath of fresh air for Erlang.Is Erlang really that much of a barrier?  Erlang was a touch odd, but I didn't find the language itself that mind-bending.  Wrapping my head around the proper way to structure things and the proper use of the OTP libraries was much more time-consuming.  That level of architectural thought doesn't magically go away because you changed the language.About the only thing I found irritating was a lack of language support for mutable hash tables, but I thought they fixed that at some point.And Erlang's bit packing/unpacking borders on magical in terms of expressiveness and speed.  I wish other languages would adopt it.	bsder	12.61291	-7.495274	comment	6.0	35.0	1499813161	12.926594
14798873	Good PHP code tends to look like wel	Good PHP code tends to look like well structured Java code, but with a rash of $ characters in it. I have to wonder why you don't just write Java and be able to leverage what the JVM ecosystem provides.	astrodust	12.717738	-6.644615	comment	6.0	36.0	1500402244	10.304063
14833646	Problem is, none of the frameworks a	Problem is, none of the frameworks allows you to get up and running as quickly as Rails. Even Django doesn't come close in matching the sheer amount of magic in the Rails. There are gems available for everything under the sun; it's fun and all to play around with new frameworks but having to reinvent the wheel gets tiresome really quickly. Debugging can be a bit tricky and it's not the most performant framework out there but the overall productivity still outweighs everything else on the long term. Nothing else (except perhaps MS Access and their RAD tools) comes close to the speed at which one can get a CRUD app up and running and CRUD apps are pretty much 80% of all web apps.	Immortalin	12.758795	-6.8284206	comment	6.0	29.0	1500834525	12.287919
14846787	Elixir is truly an under-appreciated	Elixir is truly an under-appreciated language. I've only toyed with it, and I'm really impressed with the whole ecosystem. Elixir, Phoenix, Ecto, Hex, etc all make a great ecosystem, and the awesomeness that is BEAM/OTP is just amazing. I loved the hot code deploys, and updating a system while it's running is something I've never seen before in action. Also Rustler is a great way to write CPU intensive NIF code too.	FlyingSnake	12.629594	-7.417923	comment	6.0	62.0	1500981268	12.882417
14855350	Can anyone recommend a good book on 	Can anyone recommend a good book on Perl 6? Are there any (even bad ones)?Right now I feel the major reason that keeps me from investing time in Perl 6 - besides adoption by distros - is the lack of a good book, like the Lama and the Camel book for Perl 5. It's kind of frustrating after having waited so long.	krylon	12.346809	-7.050893	comment	6.0	23.0	1501069598	13.196793
14863819	I have been working for more than 6 	I have been working for more than 6 years with Ruby on Rails, and I can definitely tell you, there is waning interest.Many of the core team members of Rails have long moved on to other technologies.Companies don't see Rails as something that will give them an edge anymore. Yes, it is quick to develop a prototype in, yet the ongoing performance optimizing burden and the mess it becomes at large scale are not worth it anymore.Competition has been catching up, and many modern frameworks have taken the best out of Rails, while ditching the not-so-good parts.The job market for Rails devs seems to be pretty dry. Many Rails devs I know, including myself, do not get even 10% of Rails job offers anymore, as it used to be until a couple of years ago.Ruby, as a language, is completely stuck and stale	iagooar	12.738439	-6.946481	comment	6.0	29.0	1501148713	12.360417
14874183	Peachpie – Open Source PHP Compiler 	Peachpie – Open Source PHP Compiler to .NET and WordPress under ASP.NET Core	pchp	12.682919	-6.605838	story	6.0	86.0	1501249259	10.311436
14877145	Thanks for the link. One thing I hat	Thanks for the link. One thing I hated about Rails when I tried it was the level of magic involved. Does Phoenix suffer from that at all?	dopeboy	12.792281	-7.070469	comment	6.0	19.0	1501272669	12.651781
14877826	For anyone curious about Phoenix and	"For anyone curious about Phoenix and Elixir, I can sincerely recommend the following resources to get you started:- Programming Phoenix by Chris McCord, Bruce Tate, and José Valim [1]- The Little Elixir & OTP Guidebook by Benjamin Tan Wei Hao [2]- Elixir in Action by Saša Jurić [3]Phoenix initially attracted me to Elixir, I've stuck around for that and the OTP platform: pattern matching, process based concurrency (actor model), supervision, immutability, macros, and more.""Elixir took the Erlang virtual machine, BEAM, and put a sensible face on it. It gives you all the power of Erlang plus a powerful macro system."" – Dave Thomas[1] https://startlearningelixir.com/r/programming-phoenix[2] https://startlearningelixir.com/r/the-little-elixir-and-otp-...[3] https://startlearningelixi"	slashdotdash	12.6402855	-7.452934	comment	6.0	29.0	1501278182	12.915511
14884334	PHP7 has improved life when dealing 	PHP7 has improved life when dealing with legacy systems, but I think all in all you're better off not building new stuff in it. There are almost always better tools for the job than PHP, like Django, Rails, Go's net/http, etc. depending on the kind of thing you're writing.	jchw	12.765816	-6.6369414	comment	6.0	32.0	1501386169	10.317013
14885189	I don't think PHP's main problem is 	"I don't think PHP's main problem is speed. It's generally used for websites, and a few milliseconds aren't going to make a difference when pages are so bloated by JavaScript libraries to often be 5-10MB.PHP's problem IMHO is that I wouldn't be able to use it if it wasn't for autocomplete: inconsistent function names, inconsistent parameter order.The ecosystem is fine, there's Composer, PSR, Laravel. The problem is PHP's legacy.I wish someone created a PHP class one could use to namespace sane function names and parameter order:    \PHP\html_entities()
    \PHP\url_encode()

EDIT:...and here it is: https://github.com/nkkollaw/php, discussion here: https://news.ycombinator.com/item?id=14885226.Pull requests welcome :-)"	nkkollaw	12.716115	-6.6494184	comment	6.0	47.0	1501407070	10.336649
14896378	While I applaud creating documentati	While I applaud creating documentation, books, and guides for those new to the language, there's still a significant accessibility gap in resources. I already know the language, I've already done some basic stuff in phoenix, I've even made my own HTTP API wrapper as its own library. But when it comes to architecting backend systems that aren't tied to phoenix or playing around with IEx, I really feel like I am on my own.There are erlang books, of which I am reading, though it feels like there's always emphasis on history for backwards compatibility and the other warts that Erlang has with its age. I'd like to design reliable systems that operate outside of the classic HTTP -> Elixir -> Database pattern. Things that involve working in memory, processing queues, managing sessions and state, 	cordite	12.622264	-7.4670863	comment	6.0	31.0	1501539554	12.900663
14906677	I wish it was worth a lot to be good	"I wish it was worth a lot to be good at systems programming these days. It seems like the huge salaries are for rails senior devs. I spent like ten years getting really good at this stuff (the (low + high)/2 line jumped right out at me) but nowadays it feels like being really good at trivial pursuit.It's interesting how much things have changed in the last decade. I wonder what next decade's ""Rails"" will be? Could it be possible to predict?"	sillysaurus3	12.750012	-6.9415393	comment	6.0	42.0	1501632299	12.359461
14933500	How is the debug experience in elixi	How is the debug experience in elixir compared to go ?	abledon	12.625894	-7.471734	comment	6.0	29.0	1501892795	12.9119835
15036678	I would love to use Elixir, I find t	I would love to use Elixir, I find the language to be the natural successor to Ruby, given the trends in languages today. However, everything I've read says that it's pretty hard to deploy. That the cloud options are limited (or take away the advantages of Erlang VM like code hot swapping). Any progress on this front?	Touche	12.674745	-7.3997035	comment	6.0	31.0	1502977420	-8.884135
15111907	There is a specific niche that Buckl	There is a specific niche that BuckleScript and Reason can fill, and that is the sort of front-end projects that use React+Redux+ImmutableJS+TypeScript/Flow.Instead of bolting on typing into Javascript (Flow and TS both do a good job of it btw), you could simply use a language that was designed with it. There is a huge difference in native adoption of such a core language feature vs using a transpiler that ultimately leak Javascript semantics.If you're using immutable values through ImmutableJS-like libraries, or by just being careful to not mutate stuff - then you should try working in a language that has immutability baked in. Having confidence that you've been careful to not mutate anything in your code vs using a language that simply disallows it in the normal course of programming bri	jasim	12.737299	-6.5771017	comment	6.0	37.0	1503857786	-10.457363
15128482	Multiple vulnerabilities in RubyGems	Multiple vulnerabilities in RubyGems	omarish	12.5746765	-7.0132947	story	6.0	189.0	1504049084	-9.306777
15128817	would you have to go out of your way	would you have to go out of your way to find a malicious gem though? Its not like any of the popular gems would try to overwrite files, right?	devmunchies	12.645148	-6.9716754	comment	6.0	18.0	1504053620	12.364474
15189474	I agree that Python works well for j	I agree that Python works well for just about everything but wish there was a framework between Django & Flask.	pbreit	12.734298	-6.5394053	comment	6.0	19.0	1504764511	10.021353
15229405	Ask HN: What is better than TypeScri	Ask HN: What is better than TypeScript	prmph	12.351973	-6.762968	story	6.0	3.0	1505237976	-10.43824
15262981	Taking PHP Seriously	Taking PHP Seriously	Mahn	12.779394	-6.63132	story	6.0	17.0	1505538156	10.3169985
15278581	Given HHVM is already being dropped 	Given HHVM is already being dropped from PHP packages because of its lagging compatibility, announcing that they're not targeting PHP compatibility any more might be the nail in the coffin for HHVM (and thus Hack) as a viable “upgrade” from PHP for existing codebases.I mean, it's great that Hack will work for new Hack code and existing Hack codebases, but there aren't a lot of those. It makes sense for Facebook — why waste your efforts on maintaining part of your runtime that you don't need? — but I wonder if this will consign HHVM to irrelevance in the long term. Maybe Hack is a compelling platform for new code, but then, why use this obscure proprietary Facebook thing that's a bit better than PHP when you could use any of the numerous other languages out there that are also better than P	TazeTSchnitzel	12.774402	-6.636652	comment	6.0	30.0	1505761552	10.321395
15278351	This is fascinating. It's a well-wri	This is fascinating. It's a well-written post and their plan makes sense to me, but I imagine there's a tough choice ahead for framework authors (the Laravels and Drupals of the world) about whether they want to fork their communities, stay with PHP7, or try to target both with the same codebase (in the near term or long term)?At any rate at least the fact that the HHVM folks are communicating the strategy effectively and transparently should help everyone involved make reasonable decisions.	rrdharan	12.781946	-6.6475105	comment	6.0	35.0	1505759854	10.354189
15278491	How is Hack? Has anyone built anythi	"How is Hack? Has anyone built anything with it and would like to share their thoughts? How's the HHVM community?I've always thought that PHP was an underrated language that got a bad rep due to whacky design choices and PHP developers being seen as ""less skilled"" (a stereotype I know, but it is prominent) than others. Object Oriented PHP and frameworks like Laravel were a nice change of pace in my opinion, and there's plenty of good PHP coders out there if they had the right experience and stuck to a good coding guideline.Alas, I confess I stepped away from PHP due the stereotypes against it, but HHVM always seemed promising. I haven't heard much about it over the years though.What's the toolchain for HHVM?"	bepotts	12.770746	-6.643725	comment	6.0	29.0	1505760940	10.294809
15372226	SideNote:There isn't much love left 	SideNote:There isn't much love left for Ruby in HN anymore.RubyKaigi, Ruby 3x3 and Method JIT, Nothing Ruby lands on the HN front page anymore. Voting are also very low.It was Rails that brought Ruby into mainstream and popularity, it was also Rails that people left Ruby.	ksec	12.745141	-6.919671	comment	6.0	20.0	1506768142	12.3894
15437966	This story supports my growing theor	This story supports my growing theory that you should put as much of your app's rules in the database as you can.There were three problems with having the rule in Rails:1. The need for an index was easily overlooked.2. The rule would be bypassed if a different app used the same database.3. The rule wasn't even foolproof. Only a database constraint would guarantee uniqueness when two users are saving at the same instant.The problem is, SQL is hard. We should not forget how much a programmer must learn. For example: Ruby, Rails, Linux command line, HTML, CSS, JavaScript, vi, how to exit vi, etc. Each of these takes years to master.SQL is especially SQuirreLy. However, it can't possibly be worse than learning the myriad JavaScript frameworks and complicated server-build tools that are complet	combatentropy	12.982025	-6.5997486	comment	6.0	29.0	1507588240	12.237237
15455950	An Interview with the Creator of Rub	An Interview with the Creator of Ruby (2001)	jpelecanos	12.636496	-7.0419993	story	6.0	57.0	1507787872	12.370735
15568983	I'm so excited about Elixir these da	"I'm so excited about Elixir these days. I would love to see more cookbook examples of using Elixir but NOT as a Ruby/Rails replacement.While the concept is not new to me, I have recently become totally infatuated with the concept of green threads, actor models, etc... for dealing with concurrent processing. This is literally what Erlang was designed to do, and Elixir makes it user friendly.The real beauty of Elixir/Erlang is being able to run hundreds of thousands of concurrent ""threads"" (co-operative in userspace, not OS-level).Anyway I do not mean to detract from the post here -- just feel like a todo list is not a shining-star example of Elixir and would love to see some more hackers post their concurrency work here."	whalesalad	12.588704	-7.463097	comment	6.0	29.0	1509116216	12.911991
15593949	Earlier in my career we moved to Rub	"Earlier in my career we moved to Ruby over PHP because Ruby was ""cool"" and PHP was not. Now it is interesting to see them lumped in the same group. Incidentally, PHP has improved greatly because of the rivalry with Ruby because the competition inspired PHP and PHP Frameworks to step up their game in the early 2000s / 2010s.Python's continued popularity surprises me. While I like Python and it is good for data science I don't understand why people use it for websites. The PHP and Ruby ecosystems are far more mature if you consider ease of use and if you are going for performance, Go and Java based frameworks are better. Even in the data world, I kind of like R over Python.I'm also glad to see Javascript highly ranked. I was under the impression that Node.js in particular was going the way o"	throwaway2016a	12.629026	-6.725046	comment	6.0	27.0	1509463897	10.28315
15641741	Never used Ruby really, apart from s	Never used Ruby really, apart from some Rails programming here and there, but I completely agree: dynamic typing + side effect + OO patterns => technical debt.On the other hand I think pure languages, like Haskell, take it too far.My ideal language would be something like Haskell + limited side effect support(for IO) + ecosystem of something like Python or Java or Golang.	noncoml	12.565421	-7.0725245	comment	6.0	26.0	1510042733	12.382097
15654932	Cocreator of Django here.The very fi	Cocreator of Django here.The very first thing I did was a presentation of Django at the Chicago Python Users Group. There were enough people in attendance that it led to a few early users. A few of those people blogged about it, and so on.Django was open-sourced in 2005, and the world was very different back then. No GitHub/Bitbucket and people had very low standards/expectations for the design of an open-source project’s website. The best “marketing” thing we did was to work with our excellent designer (Wilson Miner) on making a beautiful site. Again, I think expectations have shifted here — it’s much more common for OSS projects to have nice-looking sites — but nice design still helps.That was also before the days of Twitter, and blogging was big. I recall spending tons of time posting c	adrianh	12.806059	-6.52988	comment	6.0	19.0	1510163759	10.089939
20236172	Excellent work! I wonder if somebody	Excellent work! I wonder if somebody already tried to run it against Rails codebase.	imhoguy	12.763447	-6.9274807	comment	6.0	22.0	1561057623	12.356575
20237387	The murky business of crystal mining	The murky business of crystal mining	laurex	12.641906	-7.2582407	story	6.0	39.0	1561064763	-11.215891
20266481	Wait, what? I wrote an Elixir/Phoeni	Wait, what? I wrote an Elixir/Phoenix webapp around 2015 and one of the major selling points was the ability to hot-upgrade code that was inherited from Erlang. What changed?	superdisk	12.598299	-7.493361	comment	6.0	36.0	1561399476	12.926879
20319902	Me too.  I keep asking people about 	Me too.  I keep asking people about the business value of Elm vs JS.  Why isn't Elm-lang wildly popular?(I think I know the answer, but even so I'm interested in what other people think.)	carapace	12.998962	-7.690534	comment	6.0	43.0	1561922104	-12.762104
20334786	If you work on a Node backend with J	"If you work on a Node backend with Javascript, Where does the idea of switching to Typescript fall into this discussion? Is it a boring technology, or a shiny new technology? It is still using the same tech in Node, which you already know the benefits and pitfalls for, but it isn't like there is no overhead to start consuming Typescript if you haven't used it before.My hope is for those who agree with the author's premise, that it is still using the same ""boring"" technology and more people switch to it, because over the last two years when we switched to use Typescript, it has gotten significantly more valuable as more and more people have used it because now a majority of the dependencies I take on have type definitions provided via DefinitelyTyped, or are included with the package."	sethc2	12.38343	-6.7363	comment	6.0	22.0	1562074500	-10.464571
20374832	Oh man.  I don't know what to say.  	"Oh man.  I don't know what to say.  In the process of trying to bust myths, this confirmed every practical concern that the ""myths"" actually express.Perhaps the worst was: ""Myth: Perl 6 will never be finished""The author of this actually tried to argue against that ""myth"" by saying, ""Perl 6 is defined as a set of test cases."" and goes on to say that since the tests were written long ago Perl 6 is done, and has been since like, forever.If that's the level of ""Well, actually..."" that this community uses, you can see why they've become irrelevant.I LOVED Perl."	jannotti	12.341221	-7.054224	comment	6.0	77.0	1562503669	13.184539
20378702	The author essentially states that h	"The author essentially states that he just wants to build a website and ""be done with it"" and never have to touch it again. He seems to acquiesce that security updates are necessary, and I suppose his greatest complaint is that old versions of software (eg python 2, django 1.11) are no longer receiving security updates, which necessitates him to update to python3 and django 2.I feel that. But on the other hand, without trying to sound too mean: what exactly does he expect? Is he also complaining that ""Windows's goals are not our goals"" because Microsoft stopped supporting Windows XP? Does he complain that Ubuntu version 11 is no longer getting updates? Java SE 9?For better or for worse, this is simply how software works. Things have to be updated. Unless you want to eschew security updates"	txcwpalpha	12.783382	-6.4977875	comment	6.0	35.0	1562542107	10.060836
20492309	This makes me nostalgic. Spent inord	This makes me nostalgic. Spent inordinate amounts of time writing terrible, unmaintainable Perl scripts and FTPing them to cgi-bin on free 5MB hosting plans on F2S and Netfirms. Most hosts wouldn't provide error logs, so there was nothing more than a 500 page from httpd to tell you that something had gone wrong. Debugging anything was an endeavor. Then of course, PHP came along and killed cgi-bin.If I had to pick one thing to represent the CGI era, it would be Matt's FormMail [1].[1] https://www.scriptarchive.com/formmail.html	knadh	12.510222	-6.632062	comment	6.0	25.0	1563728729	13.071811
20492465	Written as if it's a 25 year old tec	"Written as if it's a 25 year old tech no one uses now?I still use cgi scripts. Though these aren't ""scripts"", rather compiled binaries written in C.That made some of the pages with heaviest calculations, load in under a second, which were taking more than 10 seconds in PHP."	z92	12.599591	-6.5511684	comment	6.0	32.0	1563730210	9.512013
20582192	Consider this: Perl codebase is reac	Consider this: Perl codebase is reaching perfection and no longer needs releases. After this, we get eternal Perl ;)	_rrnv	12.329102	-7.0279565	comment	6.0	42.0	1564649513	13.186486
20672474	Yeah.. not sure why the love for Rub	Yeah.. not sure why the love for Ruby faded in startup-world	jbverschoor	12.645123	-7.039521	comment	6.0	34.0	1565584896	12.379288
20718329	Apparently reports of Rails' death a	Apparently reports of Rails' death are greatly exaggerated.	hirundo	12.733139	-6.97568	comment	6.0	45.0	1565981383	12.365431
20737242	Would people please stop shitting on	Would people please stop shitting on php. It's no better nor worse than let's say, ruby. It gets shit done. It is a valid tool very widely used in the wild.	arpa	12.771376	-6.670861	comment	6.0	35.0	1566218940	10.371109
20755640	20 years later, and still nobody's e	20 years later, and still nobody's even come close to PHP's ease of deployment	ga-vu	12.768114	-6.60814	story	6.0	17.0	1566378871	10.33726
20767513	I am a backed developer 90% of the t	"I am a backed developer 90% of the time, but I currently have to work on a Typescript / React application that an agency did for us - cleaning up the bugs.Is there a good resource to demonstrate how to get around the problems you get with typing? At the moment I am using @ts-ignore to get things done. (Saying ""you are probably doing it wrong"" isn't really very helpful)."	collyw	12.357485	-6.8122964	comment	6.0	24.0	1566478764	-10.427185
20829751	If Perl 6 is renamed, Perl 5 could s	If Perl 6 is renamed, Perl 5 could skip to Perl 7 in the next version to avoid confusion.	goto11	12.352224	-7.055564	comment	6.0	19.0	1567088665	13.1954
20875542	> Make a language that is only the T	> Make a language that is only the TypeScript extensions to JS, and drop all the JS parts.So? Is there a reason left then to use Typescript instead of C or C++? I cannot think of one. Especially for education you better use a real language that will stay for more than 10 years at least. Microsoft is doing a great job taking over the Javascript community, and now this.., would love to see their hidden agenda.IMAO Typescript is only interesting as a (painful) intermediate solution for large Javascript code bases until there is a serious replacement for Javascript through WebAssembly. I'd never choose Typescript as a language, even stronger, I recently moved away from full-stack web development partly because of it. Back to C++, what a relief..	siempreb	12.353606	-6.73353	comment	6.0	30.0	1567590730	-10.455259
20880954	Hmm it's weird. I tried my solver on	Hmm it's weird. I tried my solver on it and it tells me that it can't find a solution (in 13 seconds). My solver is pretty well tested  (on some very difficult sudokus as well). Maybe this guy's solver is bugged?	mxz3000	13.444171	-7.40776	comment	6.0	25.0	1567628033	15.079296
20916894	Not a TypeScript user, but what real	Not a TypeScript user, but what really stood out to me is that Google are using a monorepo.	psv1	12.371104	-6.7950983	comment	6.0	33.0	1568025526	13.842376
20921731	Is rails really that good? I feel so	Is rails really that good? I feel so confused and paralyzed trying to find a modern backend framework. I've almost settled to Python+Django because it enforces good practices,has great tools like Django Rest Framework and Python is a language with huge application field. On the other hand, laravel and rails have so strong communities and feel more modern (for example, integration with front end frameworks). Django just seems left behind. So the question boils down to this: Should I invest my time learning django in 2019?	yagodragon	12.788706	-6.6916137	comment	6.0	32.0	1568058656	10.246337
20926283	Like others have mentioned, this is 	Like others have mentioned, this is an apple vs orange comparison. Ruby & Rails is not the same as NodeJS. A popular framework which you probably used with NodeJS is Express, that as its documentation states tries to be a minimal framework for creating NodeJS servers. I agree that something like Rails has its own benefits, but I can't really take seriously this type of complaining when it's directed at the wrong thing. You're complaining about frameworks, not NodeJS the runtime. And NodeJS is not fixed to some specific framework that forces you to do things in one way. And thank god for that.There was some initial burden I admit with NodeJS but I have at least got to the productive plateau (with TypeScript). Once you figure out the pattern that works for you, it gets simpler. The inventing	tekkk	12.738743	-6.782621	comment	6.0	25.0	1568105767	12.339065
20982760	Are mere users still not allowed to 	Are mere users still not allowed to interface with JS from Elm? I lost all interest when that came down.	kryptiskt	13.000461	-7.682589	comment	6.0	20.0	1568630698	-12.753553
13708130	Avoid vendor locking. Someday in nea	Avoid vendor locking. Someday in near future if you don't like flow anymore, you can just strip all type annotations with Babel and move on. You are not risking ending up like coffeescript.	MehdiHK	12.455758	-6.7429733	comment	6.0	29.0	1487789833	-10.458316
13719141	These release notes really let Rails	These release notes really let Rails down. Crowing on about the number of commits and rationalising decisions is a waste of my time, just explain how it's going to make or ruin my day. Links you'd expect to explain features just take you to source files, not documentation. And a HUGE amount of the changes are actually scattered around in sub-project changelogs.They should look at Django for some inspiration. Here's their latest beta release notes [1]. It's concise, everything links to relevant documentation with examples, and the entire project's changes are handled on the one page. There's even a list of things to check if you're upgrading.[1]: https://docs.djangoproject.com/en/dev/releases/1.11/	oliwarner	12.817964	-6.592331	comment	6.0	20.0	1487893833	10.083344
13753926	I think you might be the first case 	I think you might be the first case I've heard of of someone wanting to go from .NET to PHP.	emodendroket	12.665631	-6.6111007	comment	6.0	58.0	1488292137	10.3122015
13790291	While action fallback sounds pretty 	While action fallback sounds pretty useful, it feels like a framework solution to a language problem. The language just doesn't handle nested if statements very well.Also writing elixir always feels like the lines of code are longer than the width of my IDE. It is so much text...My Elixir (and phoenix) experience so far, has been far from amazing contrary to all the hype on hn all the time.	tchow	12.649085	-7.4601793	comment	6.0	33.0	1488623933	12.92976
13900970	I love Paradigms of Artificial Intel	I love Paradigms of Artificial Intelligence by Peter Norvig much more than AIMA, which I found excessively encyclopedic and shallow.While some will argue it is dated, I think it presents many timeless ideas that will get in vogue soon with little tweaks to their inference schemes.Same for The Art of Prolog.	nextos	13.148423	-7.291629	comment	6.0	23.0	1489839850	-12.493162
13945591	Building a Command-Line Application 	Building a Command-Line Application with Crystal	willlll	12.626352	-7.265111	story	6.0	99.0	1490315226	-11.26784
13948645	What's been your experience with bro	What's been your experience with browser-side debugging? The one thing that scares me about typescript is you end up debugging something you didn't write.	alttab	12.353731	-6.663046	comment	6.0	25.0	1490360976	-10.427395
13981380	This is the way not to design a land	"This is the way not to design a landing page.1) Ui components for what?2) ""Attention to detail of ember"" - is that a quality comparison, or is it only for ember framework?3) UI project without a single screenshot?4) Doesn't mention one actual feature or component5) GitHub link doesn't go to a repo.  Instead it's a list of repos that you have to click around in to find the main project.6) API docs link goes to a page that is blank except for another link to the actual API docs.7) Add a few points back because at least they didn't name it CockroachUI (I still have hope the CockroachDB guys will change their name).Just a guess - rhis was done by someone who has not agonized over bounce rates in google analytics."	WhitneyLand	13.111134	-6.444439	comment	6.0	22.0	1490740020	-15.5139475
14024727	You should care. PHP7 cared about sp	You should care. PHP7 cared about speed and it was a success.Python 3 cared pretty much everything else except for speed and now 10 years had passed it didn't go anywhere.	est	12.609059	-6.6919594	comment	6.0	23.0	1491239393	10.22102
14047071	i have always trouble understaing pr	"i have always trouble understaing prolog, lot of guide online seem to just tackle the syntax or assume you already know a lot of logic programming, for example the first example in the link (https://www.metalevel.at/prolog/facets):        list_length([], 0).
        list_length([_|Ls], N) :-
                N #> 0,
                N #= N0 + 1,
                list_length(Ls, N0).

i don't undestand it, i read the segment describing it multiple time but i still don't get it, and is not the syntax i don't undestand how it should work, a tried reading the next few chapter but i feel i'm missing something!
is there a ""prolog for dummies"" out there?"	hexmiles	13.146751	-7.2961416	comment	6.0	40.0	1491440174	-12.500117
14129324	It's always pleasant to see PHP occa	It's always pleasant to see PHP occasionally get a positive moment in the limelight on HN. It's oft scorned yet powers a very large chunk of the web. With the work done on 7 it's also one of the fastest scripting languages around and deserves a little more credit if I'm honest.	donatj	12.773821	-6.650376	comment	6.0	111.0	1492405936	-1.5211328
14128813	PHP 7 Virtual Machine	PHP 7 Virtual Machine	lvht	12.780974	-6.646188	story	6.0	365.0	1492395111	10.3239975
14128578	Question for those of you who are ga	Question for those of you who are game programmers. Is the message passing of erlang slower than shared memory threads in c++?	bobajeff	12.501151	-7.5114565	comment	6.0	23.0	1492391082	12.879539
14132757	RubyMotion Moving Forward Under New 	RubyMotion Moving Forward Under New Leadership	artellectual	12.647679	-7.039809	story	6.0	75.0	1492450115	12.378663
14294363	One thing I don't see addressed here	"One thing I don't see addressed here is the biggest ""Why Not Elm"": you have to learn Elm. Elm is a beautiful language and in the last year or two the ecosystem has gotten much better. However I don't think I'll ever make progress adopting it at my day job. For all of it's flaws JavaScript is still quick, scrappy, and easy to pick up. Convincing a curmudgeonly back-end developer that React and webpack will make his life easier is hard enough. Convincing him to learn a seemingly esoteric functional language too is basically a non-starter."	ng12	12.991727	-7.665883	comment	6.0	31.0	1494269066	-12.759226
14294715	I am surprized Elm gets talked about	I am surprized Elm gets talked about so much more than Purescript. Although Purescript is more of a general-purpose language and feels like Haskell that compiles to Javascript, and Elm is something that relies on its specific runtime to work.	azangru	12.937085	-7.658561	comment	6.0	19.0	1494271318	-12.742104
14349428	"""The app itself is powered by Larave"	"""The app itself is powered by Laravel, Vue.js, Socket.io, and Node""Is there another Laravel other than the php one?  Seems odd to roll out with both php and node.js.  I don't know why you would need both.Edit: Yes, I see each has it's strengths.  But that has to drive a lot of doing the same thing twice, in two languages...they both interact with the same data.  I would guess time-to-market is important at launch to react to things you missed.  I would have settled on one or the other.  Feels like premature optimization."	tyingq	12.774568	-6.5890875	comment	6.0	27.0	1494941859	10.320872
14373399	They should finally acknowledge the 	They should finally acknowledge the existence of typescript and not push everyone to their flow. Second of all: reduce the size of this starter kit. Other than that I really like the features.	oyvey	12.378954	-6.744253	comment	6.0	45.0	1495175125	-10.50138
14379209	Considering PHP7, Java8/Kotlin, Go, 	Considering PHP7, Java8/Kotlin, Go, C++17, Python3, Javascript/ES6 etc these days, how will Rudy be doing in the long run? any reason for new comers to pick up Ruby instead of the mentioned list? I just started using PHP myself.	ausjke	12.646251	-6.952661	comment	6.0	22.0	1495226710	12.393058
14419690	Is Ruby supposed to be an example of	"Is Ruby supposed to be an example of ""not dying"" language? Because it has certainly passed its glory days as well.Also Common Lisp is better in every way ;) There's even a JVM implementation (ABCL) for people who like that sort of stuff."	Grue3	12.594023	-7.0417256	comment	6.0	22.0	1495742050	-5.4123964
14472810	Flowtype is seeming more and more li	Flowtype is seeming more and more like the Mercurial to Typescript's git.(That is, in terms of inertia, it seems like the community has decided on a winner)	habitue	12.433313	-6.7471313	comment	6.0	68.0	1496432894	-10.454626
14483900	Ask HN: Django vs Flask	Ask HN: Django vs Flask	rochak	12.781952	-6.53507	story	6.0	16.0	1496614276	10.005216
14514040	That's actually a relatively nice, R	That's actually a relatively nice, Rails-magic-style approach to solving this sort of thing. Of course, if you were building a more interactive application, you'd already have a JS framework in place that would negate these benefits – but I'm still convinced there's a nice middle-ground for server-rendered Rails apps that avoids the various problems of SPAs.It would be nice if it worked without JavaScript though – an increasing pain-in-the-arse about the web generally. If only it were possible to have <iframe>s adjust to their content size, then we wouldn't need JavaScript at all!	matthewmacleod	12.72914	-6.4909987	comment	6.0	29.0	1496928878	12.291519
14526484	All of the examples are far better t	"All of the examples are far better than the code I normally deal with.That being said, the most tiresome code is this kind of step-by-step error checking.  if (! is_numeric($id)) {
    exit('The ID is not a number.');
  }

  $db = open_database();
  if (! $db) {
     exit('There was an error connecting to the database.');
  }

  $query = db_query($db, 'select * from widgets where id = $1', $id);
  if (! $query) {
     $db_error = get_db_error_msg($db);
     exit('There was something wrong with the query: ' . $db_error);
  }

Zzzzzzz. It triples the code size. One third is the normal code path. Two thirds is all the error checking. I'm sorry, I just don't write it:  $db = open_database();
  $query = db_query($db, 'select * from widgets where id = $1', $id);

I let errors bubble up to some g"	combatentropy	12.733359	-6.552471	comment	6.0	20.0	1497079510	6.2542024
14536857	I find it interesting that when the 	I find it interesting that when the NN fails to complete the whole puzzle, it seems to fail spectacularly (github.com/Kyubyong/sudoku#results) -- that is, there aren't a lot of good-partial attempts (90% or above). Does anyone know why this might be the case? Does the first wrong placement of a number in a gap essentially ruin the rest of the guesses?	sarabande	13.451451	-7.4107847	comment	6.0	18.0	1497271638	15.078253
14567984	"""PHP used to crash relatively often."	"""PHP used to crash relatively often."" ?In 15 years of hosting hundreds of PHP site, I've never seen a single coredump. Is it just me ?"	Xoros	12.77171	-6.634642	comment	6.0	24.0	1497611682	10.320005
14576077	RTL MJIT – Register transfer languag	RTL MJIT – Register transfer language VM and JIT for Ruby	claudiug	12.553076	-7.0453267	story	6.0	85.0	1497710388	12.385191
14582964	So thankfully, it would appear that 	"So thankfully, it would appear that Ruby is kept alive by the Japanese.I have never really understood the craze for Python . I am by no means a guru, but I consider Ruby a far superior language; ( yes, I recognize that the numerous scientific and ML libraries of python make it a logical choice for many projects, but this is sort of like a self fulfilling prophesy)My love for Ruby declared, I have on occasion wished that we had a ""strict"" feature in the language similar to ES5 that would permit only the use of Ruby's more straightforward features and also exclude deprecated methods and techniques. This might give the language a deserved boost.Does anyone know what the most utilized language in Japan is ?
And what framework they use there for web projects, if not Rails ?"	Lordarminius	12.59431	-7.042807	comment	6.0	66.0	1497820297	12.404576
14584609	I don't understand the trend to move	I don't understand the trend to move from Coffeescript to ES6.  I like both, but I write Coffeescript for its concision.  I have no issue compiling Coffeescript to ES6 as a separate build step, but I'm not going to write ES6 myself.  That said, I'm sure a project like Decaffeinate has brought a lot of beloved Coffeescript projects into the hands of ES6 developers who wanted to contribute.	blitmap	12.435622	-6.5494413	comment	6.0	99.0	1497845980	-10.531387
14584856	Typescript is a fantastic language w	"Typescript is a fantastic language with an absolutely horrid, bug-ridden configuration, tooling and ecosystem integration side. I say this after working with TS on a project for over a year now.In particular, attempting to use it with npm modules is an exercise in tedium, as its module resolution constantly breaks and bizarre, undefined behavior does not stop happening. I've found dozens, maybe hundreds of similar reports online, with no solutions offered. There are all sorts of arbitrary gotchas with its configuration as pertains to this and other things. ""Oh, don't use outDir and it'll work.""While it has great and straightforward integration with VS Code, it has disastrous integration with Visual Studio 2015 and 2017, the latter of which does not even support updating the bundled TS vers"	theprotocol	12.382595	-6.6916866	comment	6.0	47.0	1497852171	-10.451089
14605792	Also the docs got a facelift: http:/	"Also the docs got a facelift: http://erlang.org/doc/Now that we are talking Erlang:What's missing in Erlang that would be valuable to you?What are the biggest pain points right now on the Erlang 
ecosystem that makes it harder for you to try it/adopt it?"	marianoguerra	12.564343	-7.5160203	comment	6.0	21.0	1498065286	12.917808
14659415	> Its application code is still deve	> Its application code is still developed using PHPThis is surprising since 1) Facebook is most likely using Hack and 2) it could save a lot of money by moving to Go.>  Facebook’s entire site runs on HHVM (desktop, API and mobile)Isn't Facebook running mostly on React? I'm guessing HHVM only really powers the API, business logic, etc.	pier25	12.849373	-6.50029	comment	6.0	37.0	1498691723	2.9424732
14664189	No article about TDD, particularly o	No article about TDD, particularly one that shouts out to the respected Ron Jeffries http://ronjeffries.com/, is complete without mentioning the TDD Sudoku Fiasco :)Ravi has a nice summary: http://ravimohan.blogspot.se/2007/04/learning-from-sudoku-so...Peter Norvig's old-fashioned approach is excellent counterbalance: http://norvig.com/sudoku.html	willvarfar	13.4394655	-7.4066963	comment	6.0	35.0	1498751241	15.079328
14676045	I've worked with TypeScript on and o	I've worked with TypeScript on and off for a couple of years now. I don't like it.The compilation step is a major pain. Even after using it for several months straight, I feel like I'm in a constant battle with the compiler. It's slow and difficult/annoying configuration problems keep coming up from time to time. It slows down my debug cycle and the compilation delay makes me lose my train of thought. I used to love using console.log() to quickly test an assumption in JavaScript; you cannot do this with TypeScript (it's not practical given the 5 to 20 seconds compile time); you have to use the debugger every time and step through stuff (even when you have a very good idea about which specific variable you want to check) - It's extremely cumbersome.I have gone back and forth from dynamicall	jondubois	12.337594	-6.835808	comment	6.0	28.0	1498897704	-10.482883
30818324	My problem with this is that it’s ab	My problem with this is that it’s absolutely unclear to me how to even get started. The whole Java landscape is full of magic to me.Getting started with node is a matter of downloading a single binary, writing one js file, and executing it with said binary.Upgrading that to Typescript is a matter of downloading another binary, and running the two in sequence.Conversely, Java feels like I have to develop a whole program just to get my program to run.	Aeolun	12.362953	-6.5232716	comment	6.0	27.0	1648364345	-10.380833
30820904	Also a good read in the same vein: h	Also a good read in the same vein: https://eev.ee/blog/2012/04/09/php-a-fractal-of-bad-design/	lbj	12.82544	-6.696758	comment	6.0	24.0	1648394393	10.452113
30821346	The only thing stopping me from usin	The only thing stopping me from using PHP is just I’ve been burned in the past by massive breaking changes going up in major and even minor versions. Granted they are major releases, but the amount of work to bring existing code up to “code” is a gargantuan amount of work. I’ve dealt with similar issues in Ruby as well as Rails, but it wasn’t too hard to fix and even older syntax is happily accepted without deprecation messages. With PHP, I’ve had to cleanup very verbose code (often from older open-source packages or software) and spent hours and hours cleaning up breaking changes.	jasonjei	12.756978	-6.670182	comment	6.0	18.0	1648397227	10.350502
30919369	Who's using Pharo in production? Eve	Who's using Pharo in production? Every time Smalltalk comes up, it's almost like it's this Loch Ness monster that everyone claims to be enamored with but doesn't actually exist. I want to love Pharo so much, I just can't think of a single thing it would be useful for.	ramesh31	12.335664	-7.26787	comment	6.0	32.0	1649168607	7.096567
30976508	Xah Lee’s tips on elisp were super u	Xah Lee’s tips on elisp were super useful to me. A relic of the usenet era (an infamous troll on comp.lang.lisp), but someone who has added a lot of value to a lot of livesLong love ergomacs!	math-dev	12.64972	-7.469581	comment	6.0	32.0	1649594804	-10.458878
30989440	I have been running a product since 	"I have been running a product since 2015 and I feel the author's pain. The original tech I used was Ruby on Rails, and it was great (back in Rails 5). However, with Rails 7 and all the other changes since 2015, the debt was pretty overwhelming. Updating dependencies became difficult. Deploying a new server felt impossible. It felt like it was held together with toothpicks and glue. Afraid to update X because Y would break. I couldn't update Y or Z would break.Unlike the author, my product was making actual money ($XXX,000). I ended up completely rewriting the product from scratch (took ~3 months). I just swapped the old Rails service out for the new service on April 1st.I stuck to ""simple and boring"" tech for the new stack. No more Rails, etc."	nullbytesmatter	12.766241	-6.9145885	comment	6.0	23.0	1649688089	-9.792343
31045467	Ruby is awesome, but it's insanely p	"Ruby is awesome, but it's insanely powerful.For example: I mean, you can monkeypatch anything (including _Object_) at runtime. You can use this to make 1 + 1 = 3, if you desired, or to add a method to all instances of any class currently instantiated. Want your database to respond to .fuckoff(), no problem..This kind of stuff is also how rspec (used to?) actually run tests.It's cool, but also pretty insane.    irb(main):001:0> class Object
    irb(main):002:1> def fuckoff
    irb(main):003:2>  ""lol""
    irb(main):004:2> end
    irb(main):005:1> end
    => :fuckoff
    irb(main):006:0> 5.fuckoff
    => ""lol""
    irb(main):007:0> ""Hello World"".fuckoff
    => ""lol""
    irb(main):008:0>"	cyberpunk	12.496843	-7.107395	comment	6.0	21.0	1650054712	12.3855295
31095357	Was looking for the same thing, what	Was looking for the same thing, what does this mean for Ruby performance?	tmikaeld	12.608723	-7.024879	comment	6.0	21.0	1650454333	-11.176817
31282360	PHP has a strange identity problem. 	PHP has a strange identity problem. For a language that most would agree is used due to past popularity, it has a lot of breaking changes. But while syntax gets deprecated and function signatures changed, the stdlib is still a mess. The original randomly long functions are still there with no replacement in sight. To make my point, there's still no reasonable int parsing function!I'm not against change, but PHP devs should decide if they want to make code maintenance easier, or make PHP an actually good language. Right now, it's in a weird in-between state. I'm not a fan of coming across old PHP code and having to make a bunch of small changes to port it to supported PHP.	dvdkon	12.69352	-6.666565	comment	6.0	47.0	1651822120	10.364042
31284651	How to profile your PHP applications	How to profile your PHP applications with Xdebug	mooreds	12.670471	-6.616245	story	6.0	61.0	1651842438	10.302577
31314607	> What about people who've tried eli	"> What about people who've tried elixir and moved on?I've tried it three times and it offered me nothing Erlang didn't.  Erlang, on the other hand, offers me much that Elixir does not.In truth, I've never met anyone who likes Elixir except people who were already Ruby programmers.What's particularly weird is your attempt to dig at the Erlang docs.  They're extracted the exact same way the Elixir ones are; it's just a different CSS theme.C'mon, dude.  This is very much a ""coffeescript is held back by javascript"" post.  Yes, we know, Kotlin is really burnt by its Java roots, etc, etc.The base language always lives.  The descended language rarely does."	JohnHaugeland	12.6367445	-7.478072	comment	6.0	23.0	1652107243	12.926868
31391849	At one point (a very long time ago n	At one point (a very long time ago now) it was declared that Dogwood was the future and as a result Go would be the language of choice at Heroku and Erlang would be no more.Trouble is that Erlang ran all the important Cedar code (it might still today) and the Erlang engineers didn't particularly like the news that Erlang code was essentially deprecated so they left and nobody knew how to maintain the stack. This definitely wasn't the only problem we had but it was a big one.What do fellow Herokai think? Was Dogwood a fool's errand? Or did we just not get enough staff to build it properly?	hthrowaway5	12.569673	-7.5149455	comment	6.0	27.0	1652654359	12.915538
31426585	Deno 1.22	Deno 1.22	0xedb	12.528282	-6.457632	story	6.0	138.0	1652901680	-10.981794
31484368	Port it to a modern language so PHP 	Port it to a modern language so PHP can finally die, add support for PostgreSQL and MS SQL	skrowl	12.7950535	-6.602488	comment	6.0	20.0	1653337391	10.288186
31578110	I'm copy pasting my usual comment ab	I'm copy pasting my usual comment about types in Ruby: if I'd want static types I'd be using one of the many static typed languages out there. One among the many reasons I like Ruby and Elixir is that they are dynamically typed.I'm happy to see that the official type annotation system for Ruby is basically hiding them under the carpet by writing them into a separate optional file where they hopefully go to die in the dark. The @spec line in Elixir is just not DRY and inconvenient. Sometimes you fail to match it to the actual function definition because typos happen.I add an anecdote from the largest Elixir project I've been working on. One of the original developers added @specs to all the modules he developed. The other two of us did that too for many reasons. We're all senior developers 	pmontra	12.357001	-7.191902	comment	6.0	32.0	1654058027	12.439913
31665280	Can anyone more knowledgeable on Elm	"Can anyone more knowledgeable on Elm comment on the ""statelessness"" as there still is a state. There isn't an explicit type alias for the state nor is there an explicit update though. Maybe ""implicit state"" would be a more fitting name here.Also, given that they write about web technologies, then their static site returns a blank page when js is not enabled.."	kreetx	12.978096	-7.6053925	comment	6.0	21.0	1654683022	-12.758614
31689320	Ask HN: How have you used GitHub Cop	Ask HN: How have you used GitHub Copilot so far?	raunak	12.7638445	-6.515053	story	6.0	7.0	1654828282	10.075231
31727484	Also problematic is that gitlab real	Also problematic is that gitlab really really cares what programming languages you've worked in before. I've applied and they've turned me down because I didn't have enough Ruby experience, nevermind that I have plenty of years of experience in development and learning another language isn't that big of a deal.Ruby has had it's heyday. It's 15 minutes of fame was a decade ago. If they persist in using Ruby and only hiring people with extensive Ruby experience, they're going to run out of talent AND have to pay over market rate to get people in their specialization. Like all the banks and governments forking over loads of cash for COBOL and Coldfusion consultants because the refused to modernize.	malfist	12.656537	-7.020945	comment	6.0	33.0	1655136636	12.377798
25502490	Crystal Ball	Crystal Ball	luu	12.635393	-7.247091	story	6.0	17.0	1608607207	-11.192012
25508292	This is the Ruby on Rails version of	This is the Ruby on Rails version of what Elixir Phoenix Live View and .NET Blazor do.For those not familiar, rather than using a standard web framework where a lot of processing is done client side, these frameworks allow html buttons etc to call native Ruby, C#, or Elixir functions on the server rather than using some sort of post/get request to do that. Every UI interaction goes over the wire, which is where performance can be hurt.Having used Blazor in production for nearly a year, it speeds up development, but your server is doing a lot more processing and will not be able to handle an equivalent amount of users that a normal web app would because it’s keeping a copy of the clients DOM in memory. It’s updates the dom on the server then streams that update through websockets to the cli	elamje	12.5764	-6.492819	comment	6.0	28.0	1608655959	12.352408
25508861	This all seems super cool, but mega 	This all seems super cool, but mega complicated. I'm not in the Rails ecosystem at all, so would love someone's assessment.Is this a new, giant complexity or a nice add-on?  A huge mental/development shift or a nicely paved new path to something better?	saltcod	12.785134	-6.9232264	comment	6.0	18.0	1608658572	12.346646
25527897	I'm gonna go back a short bit and sa	I'm gonna go back a short bit and say, for me? Ruby on Rails.In 2007 I was plugging away at PHP with whatever frameworks were around at the time -- the vast majority of web dev that I saw then was pure procedural scripting down the page, maybe some `include` statements to pull in database functions. Especially in PHP, which encouraged mixing logic and HTML. The consultancy I was with had built custom stuff on top of Zend framework, and it helped a lot.But around summer of 2007 is when I started hearing folks crow about Ruby on Rails, this hot new web framework written by a Dane in a Japanese programming language. It had been out for a few years and it was the hot topic in web dev circles, and so I decided to see what the fuss was about one weekend.Instantly stuff I'd always had to do by ha	generalk	12.762887	-6.678661	comment	6.0	41.0	1608821466	12.23012
25534766	"""Often people, especially computer e"	"""Often people, especially computer engineers, focus on the machines. They think, ""By doing this, the machine will run faster. By doing this, the machine will run more effectively. By doing this, the machine will something something something."" They are focusing on machines. But in fact we need to focus on humans, on how humans care about doing programming or operating the application of the machines. We are the masters. They are the slaves.""Matz 2003https://www.artima.com/intv/ruby.html"	pkdpic_y9k	12.603259	-7.0788746	comment	6.0	137.0	1608878835	12.414563
25754311	The Smalltalk Zoo	The Smalltalk Zoo	gjvc	12.3528385	-7.350399	story	6.0	78.0	1610488048	6.9747715
25779112	What turned me off about elixir was 	"What turned me off about elixir was not the syntax, it was the flexibility in designing new syntax. It felt like each library had its own idioms and syntax rules, which just adds a huge amount of variety and difficulty in a codebase. It was hard to have consistent architectural patterns across a team. I've seen an elixir/phoenix backend rewritten completely in python/django and it was a big improvement in developer productivity. I think elixir may work better for small teams. The learning curve and the ""consistency enforcement"" of languages really does make a difference on big teams."	Areading314	12.681802	-7.441707	comment	6.0	22.0	1610644811	12.915572
25871283	Ask HN: Necessary Skills for a Junio	Ask HN: Necessary Skills for a Junior Dev	imperistan	12.788615	-6.6264076	story	6.0	12.0	1611320331	1.7710375
25961805	I do not think PHP is a good languag	I do not think PHP is a good language to use in a project.- dev recruitment is hard.- dev retention is hard.- hard to find people that write clean, modern, performant PHP- it is PHP, with everything that it entails. It does not enjoy the best reputation as a language.	29athrowaway	12.76007	-6.638042	comment	6.0	35.0	1611951263	10.334543
26022407	As a Ruby and Python developer I oft	As a Ruby and Python developer I often wonder why Ruby doesn't need a virtual env. What did Ruby get right that Python didn't?	cutler	12.432019	-6.9918146	comment	6.0	29.0	1612411046	-9.456114
26070058	As someone who uses Django which has	As someone who uses Django which has user management out of the box, why would I use a service like this?	yuppiepuppie	12.847337	-6.538039	comment	6.0	26.0	1612818116	10.090734
26126509	This looks really neat for the ruby 	"This looks really neat for the ruby community. It being modular I imagine the target is for
Embedding when you know you only need X features of ruby so you get smaller and hopefully more performing builds? At least if I understand this correctly.As an aside: is ruby easier to implement than other languages? It’s syntax and features seems more complex than say Python but I’ve heard from others that implementing a new Python distribution in say Rust is a real PITA"	no_wizard	12.541954	-7.0357804	comment	6.0	23.0	1613248063	12.378967
26151627	I still think Ruby on Rails is the #	I still think Ruby on Rails is the #1 choice for launching a non-static web project in 2021. The lifecycle I've seen with the 4 companies I've built on Rails:1. Pure vanilla rails2. Then the front end grows into an SPA as functionality becomes more complex3. More microservices like search emerge into their own thingBy step 3, I've got a dozen engineers and things are still as  smooth as one engineer. Engineering is never the bottleneck. The tech debt is super easy to spot. It's incredibly simple to know how to scale horizontally to many more engineers.Rails can get you very very far. It's not sexy, but it gets me to market faster than anything out there.	buf	12.745064	-6.9253306	comment	6.0	66.0	1613459123	12.351922
26217324	The biggest selling point of Crystal	The biggest selling point of Crystal is being a very high level language, but at the same time very performant. Think of a Ruby variant with Go speed.I would like to have something similar for Python.	tutfbhuf	12.592622	-7.259965	comment	6.0	29.0	1613942448	-11.2340355
26220458	Despite new language fatigue, this d	Despite new language fatigue, this does look interesting.A few things that stand out:1. use of Exceptions. These get so much hate these days, but the articulation here of the reasons for allowing them is better than most of the Hacker News comment threads about them. I might just link to this section of Passerine's docs the next time somebody tries to tell me how Result<> is the only thing any programming language needs.2. The use of fibers/coroutines as built-in error boundaries. This is such a pleasant natural extension to the Erlang proposal I find myself wondering why so few of the languages I'm familiar with have taken the same approach. Presumably I need to get out more.3. Not sure what to think about the left-associativity of function calls, nor the lack of explicit call syntax. One	ledauphin	12.589823	-7.245007	comment	6.0	42.0	1613963827	12.565846
26315314	Typescript is not accepted. How Angu	"Typescript is not accepted. How AngularJS stuck on 1.* is the best proof, and an illustration for the problem. Pretty serious people are working in Angular community, it's immensely popular in the enterprise webapp space, so I will not take the ""Ah, it's just amateurs who are stuck there.""It adds to countless attempts of other transpiled *scripts to extend Javascript.They, and Coffeescript in particular, are good historical references to what will happen to TS in a few years."	baybal2	12.370219	-6.7946973	comment	6.0	27.0	1614693298	-10.487647
26321635	> “Sadly Rails documentation doesn't	"> “Sadly Rails documentation doesn't warn you about this pitfall, [...]"" said Dmitry Borodaenko, a former production engineer at Facebook who brought the commit to my attention wrote in an email.This is completely and utterly untrue.https://guides.rubyonrails.org/security.html#sql-injection shows examples that are exactly like the code in question in that commitBound parameters were a new thing like 15 years ago."	tomc1985	12.970262	-6.5464387	comment	6.0	33.0	1614722721	12.279047
26322158	This is bad code and it's a little s	This is bad code and it's a little surprising to me that a former Facebook engineer wrote it (and subsequently became the CTO).It's been a while since I wrote any Rails but the offenses that jump out just from a cursory inspection:- large raw SQL query which could almost certainly be accomplished in a more idiomatic way with AREL or ActiveRecord- no user input sanitizing- using a regular string literal for a large text block instead of a Ruby here document- leaving a mess of commented-out code at the bottom of the methodApparently Gab isn't exactly hiring the best and brightest.	abvdasker	13.039141	-6.512923	comment	6.0	36.0	1614725051	12.234882
26359901	I loved working with the Beam VM and	I loved working with the Beam VM and Elixir. I just wish it had a stronger presence in the Data/ML/AI fields. As scalable and trivially parallizable as Elixir is with a fast SciPy/NumPy/Pandas type of eco-system and you'd have a fantastic environment for data heavy apps IMO.	jaegerpicker	12.645265	-7.4448757	comment	6.0	18.0	1614967700	12.892743
26444598	No Us Without You: elifdef and elifn	No Us Without You: elifdef and elifndef	ingve	12.661674	-7.383347	story	6.0	48.0	1615618302	12.956125
35569022	I guess Matsumoto should have charge	I guess Matsumoto should have charged for Ruby. I'm sure Mike Perham and Derek Kraan would have been glad to pay for that and that the Ruby community would be in a strong and healthy shape.	john_fushi	12.620565	-7.0297065	comment	6.0	49.0	1681476938	-9.698333
35624554	I don’t think those are the problems	I don’t think those are the problems since all sorts of solvers ship with prolog and it’s still a better way to write down a problem.I think it’s biggest headwind is that you have to be significantly more intelligent than the average developer to think in Prolog.Prolog requires you to think about code as the implication of constraints — you just have to keep a lot more in your head. Prolog also requires you to understand the execution model before you can do much of anything.	usgroup	13.146014	-7.291909	comment	6.0	31.0	1681881925	-12.491336
35685431	One often finds derogatory remarks a	"One often finds derogatory remarks about PHP, or that the popularity of the language is declining. Interestingly, the concept of PHP prevents exactly such problems, as a monolith written in PHP only ever executes the code paths that are necessary for the respective workload. The failure that the Rails app experienced in the post simply wouldn't have happened with PHP. Especially for web applications, PHP's concept of ""One Request = One freshly started process"" is absolutely brilliant.So, OP is right, write more monoliths, and I would add: write them in languages that fit the stateless nature of http requests."	ahofmann	12.764921	-6.7823524	comment	6.0	24.0	1682328940	10.435658
35688045	Is Ruby on Rails still widely used?	Is Ruby on Rails still widely used?	yankoff	12.732742	-6.946085	comment	6.0	23.0	1682346284	12.355043
35688625	Wow, hi everyone! Was just about to 	"Wow, hi everyone! Was just about to walk over for the first day of RailsConf when a friend let me know we were #1 here! Honored!I'm the original creator of Bullet Train, although a number of people now work on it. It's been a fun journey to this point!When I first started building Bullet Train, it was a relatively unique offering. There weren't that many full-featured ""SaaS starter kits"" out there, although there was some prior art. The biggest inspiration for Bullet Train was what Laravel Spark was at the time. In fact, one of the guys who had got me into Rails in the first place had started building his next product on Laravel so they could take advantage of Spark!These days there are an abundance of SaaS starter kits available in most ecosystems. I've had the pleasure of meeting and int"	aculver	12.763606	-6.871677	comment	6.0	22.0	1682349182	12.326976
35689900	This might be a good place for a Jav	This might be a good place for a Java programmer to say thank you to the Rails community for your relentless mocking of Spring and Enterprise Java back in the days.Java is wonderful these days, and seriously I think you guys are a one of the major reasons why Java is so great today.	skinkestek	12.618194	-6.9503856	comment	6.0	27.0	1682354348	12.329019
35713514	Ruby is going through some kind of r	Ruby is going through some kind of renascence age, I'm seeing allot of Ruby articles lately.	MrVitaliy	12.6741085	-7.0097647	comment	6.0	20.0	1682516493	12.372154
35803856	No Clojure.  No Julia.  No Haskell. 	No Clojure.  No Julia.  No Haskell.  No Racket.  No Scheme. No Common Lisp.  No OCaml. And, as much as I despise Microsoft, No C#.  No F#.  No Swift.  No Objective-C. No Perl. No Datalog. A glaringly lacking choice of languages.	waffletower	12.368248	-7.6726413	comment	6.0	20.0	1683129069	-11.021245
35855036	Were those startups that went out of	"Were those startups that went out of business did so because of their stacks/architecture, or are you confusing correlation with causation? And, there is a good reason people shy away from PHP, and it has nothing to do with trying to be ""flashy."" There should be a name for this kind of fallacy."	goodrubyist	12.774804	-6.627485	comment	6.0	48.0	1683489401	10.3383045
35856708	How about the fact that most of us a	How about the fact that most of us are experienced and can attest that PHP is the worst language we've ever used in our careers?	proxyon	12.757443	-6.6390886	comment	6.0	29.0	1683503413	10.3501625
35897699	Any programmers here who've used PHP	Any programmers here who've used PHP to build command line tools in PHP? What is the experience like compared to, let's say Python or node.js? How good are the facilities? What are the limitations?	mekoka	12.731706	-6.6172748	comment	6.0	18.0	1683780876	10.336365
35928561	Elixir is great! BEAM and friends is	Elixir is great! BEAM and friends is amazing.I think Elixir/Phoenix could use a little bit of Javascript (and modern PHP) enthusiasm to help with adoption - this all seems a bit…dry.	fideloper	12.720526	-7.28463	comment	6.0	31.0	1683987006	12.785519
35930830	Using Node.js again instead of my us	"Using Node.js again instead of my usual Elixir and all I can think is ""Y'all live like this?"".I feel for anyone using a Node.js backend. Y'all really don't know what you're missing.Also dealing with bugs is infinitely harder. Try catch is infinitely more wordy and messy. And you lose out on so so many valuable CI steps the Elixir community has from sobelow to credo.And then there's writing tests. In the Node.js community it is an actual joke. It is so hard to write tests and I have yet to see any framework create a nice sandboxed test environment that just works.All of this stuff in Elixir is free.And like someone else said, the best ORM is Ecto and it's hard to disagree with that.Making a reliable and organized Node.js application is actually so difficult.If my pet project was in Node.js "	hmmokidk	12.669613	-7.3081794	comment	6.0	48.0	1684000397	12.886847
35939216	Did the author mention C++?Also, as 	Did the author mention C++?Also, as a user of intelliJ, I would prefer it be written in C++. It's dog-slow.> Facebook is originally PHPI doubt it's success was based on its tech, but the fact it was rewritten tells a tale in itself, no?	Chris2048	12.773751	-6.620525	comment	6.0	20.0	1684082322	2.9910896
36211112	Forget about production, how did thi	Forget about production, how did this make it into python? This is so unbelievably stupid it makes PHP look like a sensible language.	ohgodplsno	12.604779	-6.6814575	comment	6.0	20.0	1686051138	10.294441
36273650	Elm is pretty much dead at this poin	"Elm is pretty much dead at this point. The last substantial commits in the Elm repositories are about 2 years old.I liked Elm before, and was a great fit for internal corporate applications. Something like an admin control panel or a monitoring tool.Are there any similar projects that are in the ""more alive"" state?"	cyberax	13.005147	-7.6849566	comment	6.0	33.0	1686423026	-12.770622
36290633	Friends don’t let friends use Perl.	Friends don’t let friends use Perl.	andrewstuart	12.330761	-7.025411	comment	6.0	22.0	1686562078	13.180787
36294046	On the subject of Perl: I've seen HN	"On the subject of Perl: I've seen HN'ers vehemently beat down any comparison between ""serverless"" and the old world of /cgi-bin perl scripts. But I've yet to see a reason why. Why, exactly, aren't people using simple and straight-forward run-once cgi-bin scripts? They seem super suitable to so many use cases, even in 2023."	Solvency	12.509523	-6.46484	comment	6.0	23.0	1686580103	8.957807
36330541	Phoenix LiveView: Async Assign Patte	Phoenix LiveView: Async Assign Pattern	gnutrino	12.901561	-6.863913	story	6.0	146.0	1686767869	12.723015
36345700	Do you think writing backend with Py	Do you think writing backend with Python feels wrong?	damacaner	12.345156	-6.667756	story	6.0	12.0	1686859208	10.022805
36356858	Can a LiveView process migrate to a 	Can a LiveView process migrate to a different machine/VM? For example, there's a scheduled maintenance and I need to shut down one of the machines/containers. The main advantage of stateless architectures for me is that state is not bound to a specific machine -- so you can easily add/remove machines, state is not lost if application dies, etc.	kgeist	12.856992	-6.783389	comment	6.0	20.0	1686924682	-8.12305
36359376	Writing a chat application in Django	Writing a chat application in Django 4.2 using async StreamingHttpResponse	ipmb	12.552953	-6.5900707	story	6.0	103.0	1686932920	9.961207
36389178	Okay, now it is official, JS/TS beco	Okay, now it is official, JS/TS becomes a C# clone ;)no surprise considering the TS people	oaiey	12.3541355	-6.695844	comment	6.0	61.0	1687168253	-10.454661
36397841	Reminds me of PHP 6...For those who 	Reminds me of PHP 6...For those who don't follow PHP closely - that version was an attempted refactor of the string implementation which essentially shut down nearly all work on PHP for a decade, stagnating the language until it became pretty terrible compared to other options. They finally gave up and started work on PHP 7 which uses the (perfectly good) PHP 5 strings.Ten years of wasted time by the best internal PHP developers crippled the project - I'm amazed it survived at all.	abhibeckert	12.754885	-6.6469364	comment	6.0	41.0	1687218083	10.325793
36401431	Nah I'm about done working on rails 	Nah I'm about done working on rails codebases with 2+ hour CI cycles because developers insist on hammering a database in unit tests.	mvdtnz	12.709775	-6.947125	comment	6.0	21.0	1687251719	12.338886
36414347	I’ve been wanting to use LiveView so	I’ve been wanting to use LiveView so bad, it’s just incredibly hard to justify to a team when React is working just fine :(	lefrenchy	12.893634	-6.657233	comment	6.0	26.0	1687321150	12.720122
36458729	I agree-- in terms of it being almos	"I agree-- in terms of it being almost exclusively overhead.Personally, I hate typescript. So much redundancy. It's not insanely awful, but just awful and unnecessary enough (except large corporate projects with significant developer churn) that it's a pet peeve of mine.""Hey, let's just write the same thing 4 times so you know it's a string! Because quotation marks aren't clear enough! Yay!!""  ""I must redundantly ensure you know this number is a number! Even though you can easily convert it to one if you need to, and move on! Yay""I'm bummed that it is becoming so common and popular in the industry."	jimmychoozyx	12.343421	-6.779631	comment	6.0	25.0	1687614996	-10.425931
28691048	Proposal to Merge YJIT into Ruby	Proposal to Merge YJIT into Ruby	ciconia	12.609797	-7.0611005	story	6.0	260.0	1632899333	12.380219
28720000	Demo of a WAM Prolog Implementation 	Demo of a WAM Prolog Implementation in Python	triska	13.13807	-7.2982974	story	6.0	89.0	1633103433	-12.495611
28744765	They've been saying this since the 8	They've been saying this since the 80s. The magical world where prolog/pascal/java/NPM solves all your problems is eternally 3 years away.	swiley	13.146364	-7.293727	comment	6.0	19.0	1633340104	-12.478597
28819342	The amount of koolaid around TypeScr	The amount of koolaid around TypeScript is really something	dreyfan	12.354669	-6.8194075	comment	6.0	23.0	1633881134	-10.518575
28853675	Ask HN: Who has been unemployed for 	Ask HN: Who has been unemployed for more than 6 months?	py_or_dy	12.78407	-6.492199	story	6.0	16.0	1634139973	10.039475
28874168	It's a pain in the ass to compile Cr	It's a pain in the ass to compile Crystal programs on Windows.With Go? just download the Go compiler, nothing else, Crystal isn't first class on windows.That's why. A lot of people here don't understand that a good chunk of developers (and students) still use Windows, without any linux subsystem or VM.PHP became popular because of easyPHP on Windows. If PHP never ran on windows it would never have ever gain its popularity, it doesn't matter if it's then deployed on Linux servers.	throw_m239339	12.60291	-7.284853	comment	6.0	56.0	1634270800	10.319221
28875791	How PHP Opcache Works	How PHP Opcache Works	orangepanda	12.735443	-6.603904	story	6.0	151.0	1634288909	-8.925042
28877529	1) Documentation is too verbose2) On	1) Documentation is too verbose2) Onboarding new developers lacks IDE specific tooling for free3) Admin GUI isn't great4) Async support is still incomplete5) Static types aren't used in Django6) Django is MVC which isn't useful if you just need a light V7) People ignore other, newer tech because Django existsWhat???  4 and 5 are legit complaints, the rest is literally the nittiest of picks, in my opinion.  You don't like a framework because it's so good, people don't experiment with newer frameworks??  And that's in your article about the decline of that framework?This is a weird article, man.  I am surprised they haven't figured out async yet, and I guess if you really like static types the lack of them in Django would be annoying, but otherwise this just seems like you set a goal to writ	TameAntelope	12.830612	-6.505145	comment	6.0	33.0	1634304985	10.070605
28893122	I'm embarrassed to admit that for we	I'm embarrassed to admit that for web development, I'm afraid to try frameworks like React/Vue/Angular as well as package managers like NPM/Yarn. So I settled on writing raw (X)HTML code and using only vanilla JavaScript APIs provided by the browser (ECMAScript standard library, DOM, multimedia, etc.).Because of this, I can't bang out complicated software quickly and easily like the stereotypical front-end developer. In exchange, the techniques that I learn essentially don't go out of date and don't randomly break. I settled for only applying what I understand.I made an exception for TypeScript; I acknowledge the compiler is enormously complicated and requires Node.js to run. But static type checking has saved me from my own silly mistakes very often. And if armageddon ever comes, I can al	nayuki	12.343947	-6.4787545	comment	6.0	28.0	1634433541	-10.414923
28897119	Are we just ceding Javascript to Mic	Are we just ceding Javascript to Microsoft at this point due to the ubiquity of Typescript?	dreyfan	12.356808	-6.7023625	comment	6.0	18.0	1634484267	-10.451349
28907165	Yeah, I’d love to see some serverles	Yeah, I’d love to see some serverless php support since the language is made for that paradigm.	withinboredom	12.748323	-6.5846243	comment	6.0	19.0	1634573826	10.283351
28908012	I have to agree, I've done over 5 ye	I have to agree, I've done over 5 years of C# and then went to ruby and never looked back. Static type checking raises the floor on incompetence, but also lowers the ceiling on excellence. I have to admit I don't have experience with the extremes which would be Haskell and Clojure.The amount of cruft I had to type in C# just to get shit done... It's all implicit in ruby thank god for that.I never EVER have to check the type of a variable at runtime. I always know its type just by looking at its name. Is it enforced in ruby? Of course not. Ruby assumes I'm an adult and I know that I'm doing.	jfabre	12.3288765	-7.1823792	comment	6.0	26.0	1634577787	12.306995
28996388	I have heard this many times from ma	"I have heard this many times from many different people that I respect. However, I'm just not experiencing ""the joy"" after several attempts. Maybe it's just not how my brain is wired.It's probably not helping that I'm not starting from a greenfield project. Needing to go through and understand other people's code with an out of date Rails and its dependencies have made me spent most of the time on infrastructure. The entire test suite takes 50-60 minutes to complete with a lot of integration tests hitting the database.Do people allocate a certain amount of time just to upgrade Rails?
It seems like there's an expectation that Rails is 
1) used to start quickly with scaffolding (great for hackathons)
2) constantly running app and cared for to not diverge from the latest versionAt this point,"	jcytong	12.743627	-6.936887	comment	6.0	28.0	1635222341	12.373619
28996863	I've found that Elixir / Phoenix has	I've found that Elixir / Phoenix has given me the level of productivity / flexibility that Rails used to have. Perhaps it's not quite on the same level of productivity but long term maintainability seems to be easier in Phoenix, I think from the functional programming aspect / lack of magic.Things I love about Phoenix over Rails:- Background / periodic jobs are baked into the same runtime as the server. You can install Oban in about 5 minutes and have it generate periodic jobs without any messing around with additional Ruby processes or custom databases (i.e. Redis, although background jobs are great on Postgres these days)- Anything real-time is given to you out of the box. Rails has ActionCable but like the background jobs above, it needs to be setup as a separate process. Livepage makes	Rodeoclash	12.786556	-7.061031	comment	6.0	21.0	1635227601	12.543355
29036818	Explaining Ruby Fibers	Explaining Ruby Fibers	tekkertje	12.572183	-7.0672555	story	6.0	169.0	1635500288	12.329275
29095500	Ask HN: Any programmers here who wor	Ask HN: Any programmers here who work for cruise lines?	arthurcolle	12.773133	-6.9088936	story	6.0	21.0	1635951122	12.359689
29183641	Crystal 1.2.2 Is Released	Crystal 1.2.2 Is Released	weatherlight	12.65299	-7.2717576	story	6.0	114.0	1636596466	10.491254
29185807	Crystal is a very nice language. It 	Crystal is a very nice language. It is strongly-typed and inspired by Ruby's syntax but not identical to Ruby. Crystal's performance is excellent, but compiling is a little slow. (And no Windows support yet - but under development.)Given these features, there does not appear to be much adoption of Crystal among Ruby developers. It is still early days for the language (post 1.0 release).Some questions for Ruby developers:- Have you taken a look at Crystal?- What is your impression of Crystal?- Are there any features that would make you use the language? (Or reasons for not using Crystal?)	open-source-ux	12.627821	-7.253047	comment	6.0	19.0	1636619953	-11.238226
29201589	This is not idiomatic ruby, you woul	"This is not idiomatic ruby, you would do    class Stuff
      attr_reader :list

      def initialize
        @list = [1, 2, 3, 4]
      end
    end

Then:    Stuff.new.list.each { |item| ... }
    Stuff.new.list.map { |item| ... }
    Stuff.new.list.select { |item| ... }

And if you want top-level each/map/select methods, you could do    delegate :each, :map, :select, to: :list"	dorianmariefr	12.387292	-7.104379	comment	6.0	24.0	1636736379	12.3493
29247075	TypeScript is one of those things th	TypeScript is one of those things that doesn't feel like it's doing much when you start working with it but then when you try to switch back to writing vanilla JS you wonder how you ever managed. The editor tooling alone makes it easily worth the setup time.	byhemechi	12.387379	-6.7216396	comment	6.0	35.0	1637101485	-10.440283
29247416	Typescript is the language that will	Typescript is the language that will put a lot of other server-side-only languages to bed when it comes to web-application back-ends (and then it will seep into everything else, unless it's performance critical, but at some point that'll probably be addressed, too).	vosper	12.381856	-6.7319117	comment	6.0	19.0	1637104112	-10.439945
29261324	This seems like a false dichotomy.Is	This seems like a false dichotomy.Is php totally worthless in 2021. Absolutely not.Is php the best language to spend your limited time learning in 2021?  Almost definitely absolutely not as well.	anm89	12.760086	-6.640555	comment	6.0	70.0	1637201639	10.341203
29261795	But, what is, if not php? Do you sho	But, what is, if not php? Do you shoot for what has had longevity, or what's rising?	brailsafe	12.775834	-6.633383	comment	6.0	48.0	1637207334	10.34533
29309110	Brex is moving away from Elixir to K	Brex is moving away from Elixir to Kotlin	kgraves	12.65716	-7.4701514	story	6.0	22.0	1637602405	12.944307
29312845	I really wish there were frameworks 	I really wish there were frameworks that developed ways to plug in with your already favorite backend kit instead of solely isometric with Node.You couldn't pay me to give up Phoenix in Elixir for backend work but it does lock off a healthy amount of the neat things being done to make data loading on the frontend more optimal. Phoenix has LiveView + AlpineJS but I really don't want to give up React which still feels more productive to me.This looks neat but just like NextJS and Sapper it will not nicely play with my stack.	ianbutler	12.829378	-6.6900554	comment	6.0	25.0	1637623755	12.74979
29319995	I've been moving from Django to Elix	I've been moving from Django to Elixir/Phoenix/LiveView and loving it so far. I hated the Angular/React era of the web and mostly moved to doing backend development, but the Live App era has reinvigorated my interest in web development as a whole. I'll miss Python a lot and hope they can come up with something that solves the concurrency issues, but Elixir is really pretty good in its own right.	Mizza	12.754941	-6.8935723	comment	6.0	59.0	1637685923	12.809756
29341059	I'm using Laravel/PHP for a new proj	I'm using Laravel/PHP for a new project and it's been a joy. A true joy. After spending the last 6+ years writing backend services in Node, PHP feels like a breath of fresh air. No restarting the server, no compiling errors from babel/typescript wackiness, no blocking threads, server-side templates out-of-the-box, and so much more.PHP has come a really long way, I really hope to see it's resurgence some day after everyone has been burned enough from running JavaScript as their server.	tlackemann	12.742793	-6.5733814	comment	6.0	41.0	1637845953	10.287651
29344766	What's your estimate for PHP's long-	"What's your estimate for PHP's long-term viability?I'm asking, because it was the hobbyists and kids who got started in PHP mucking around in their everyday white-label cPanel/Plesk-based web-hosting accounts in the very early 2000s that really gave PHP the mindshare of enthusiastic users and thus its staying power. But it's 2021 now: all the kids are getting started with NodeJS for server-side web-applications, not PHP.With the decline of traditional web-hosting as something that people have and might experiment with (replaced at the low-end by Wix and Squarespace, and major ""Cloud"" providers at the high-end), what opportunities does PHP have to attract new eyeballs?Years ago self-hosted WordPress and phpBB installs would have been been a good gateway, but both of those are going out of f"	DaiPlusPlus	12.769123	-6.6112304	comment	6.0	23.0	1637872624	10.319543
29344857	Elegant is not the word I'd use to d	Elegant is not the word I'd use to describe PHP. Solid, perhaps. Undoubtedly useful. But if there is elegant PHP, I haven't seen it.	krisrm	12.731913	-6.6264005	comment	6.0	32.0	1637873395	10.291526
29345545	Genuinely curious: who here thinks P	Genuinely curious: who here thinks PHP is a good choice for a new project and also has experience with other languages such as Scala, Kotlin, Python, or JavaScript and their respective web frameworks?	rbanffy	12.739192	-6.615265	comment	6.0	24.0	1637879122	10.342332
29346774	Honest question: what are people usi	Honest question: what are people using if not PHP? Node? Python? The 80% of us who aren’t FAANG and are writing CRUD apps. I’ve tried researching the pros/cons and all I get are low quality listicles.Nobody can tell me why PHP is “bad” or what Python does that PHP can’t. Inconsistent params are the only argument I’ve heard. Which my IDE solves. What about JavaScript splice vs slice. I look it up every time.	commanderkeen08	12.705457	-6.6639075	comment	6.0	29.0	1637890666	10.30764
29472669	It's great for getting things up and	It's great for getting things up and running. And can last a long time. But now that we're 40 devs or so working in the same 400k LOC codebase, I'd prefer Java/Spring (or really, Kotlin). So hard to maintain django in the long run, need to be really strict, or one ends up with each app spaghettied with other apps. Doing queries where you filter deep on other apps' models, and since it's only done as kwargs with no typing nothing stops that from exploding runtime when someone changes a model somewhere. Too easy to send fat objects around everywhere, accidentally doing heavy db stuff when using a property. Also makes it harder to test, because everything leaks.	matsemann	12.827328	-6.5064006	comment	6.0	20.0	1638886610	10.050399
29572711	As someone who only knows frontend /	As someone who only knows frontend / React, I’ve been curious about Django vs Rails vs Laravel literally for years.One day I intend to take one of these for an extended spin and see how it contrasts with gluing things together in JavaScript land.	saltcod	12.802235	-6.610661	comment	6.0	18.0	1639609621	10.22422
29578468	I started as a rails developer. This	I started as a rails developer. This is just looking at the past with rosy lens.Given the popularity of rails at the time, if node.js was unproductive like you say it is, it would have never caught on.The reality is that express was considerably simpler and easier than rails and that's what made many of the internet companies we have today even possible.	mohanmcgeek	12.726677	-6.7636385	comment	6.0	25.0	1639665099	12.336245
29578773	Comparing Rails to Express is not ap	Comparing Rails to Express is not apples to apples. You should compare Rails to something like Next.js that has a lot of the magic and plumbing taken care of for you on both the front end and the back end.I agree that for side projects, underfunded startups and especially for product/business-focused founders, using the quickest magical prototyping framework is definitely the best idea so I agree with the overall sentiment of the post, just not the specific conclusion that Rails is the best way to go in 2021. I still believe strongly that having the same language on the front end and backend is paramount to developer productivity.	pyrrhotech	12.765336	-6.838244	comment	6.0	23.0	1639666762	12.327053
29578812	Sounds like the managers that came b	Sounds like the managers that came before you failed you! Not to sound accusing but if this happened with multiple jobs then maybe you could have asked more questions at the interview stage. You can usually see dysfunction like that a mile away.There's no need to chase the latest Node JS shenanigans. It feels like it's all we talk about on HN but a huge, huge number of developers are out there happily coding away in Java, C# and all the rest. Even within Node world the majority are using the exact same React stack (the homogeneity of which is the reason for using it in the first place).IMO Ruby has faded because it never found its niche. Java and C# thrive in the corporate world. Python already exists as a dynamically typed server language. As much as people complain, writing server-side w	afavour	12.646931	-6.8960633	comment	6.0	24.0	1639667009	12.298194
29589100	Does anybody here know dataframe sys	Does anybody here know dataframe systems that are able to handle file sizes bigger than the available RAM? Is polars able to handle this? I am only aware of disk.frame (diskframe.com), but don't know how well it performs.	pvitz	12.372531	-6.5276675	comment	6.0	20.0	1639726979	10.183711
29638677	Why C# goes well with TypeScript	Why C# goes well with TypeScript	binarynate	12.345455	-6.809617	story	6.0	15.0	1640102681	-10.413532
34126114	Ruby! What a gem.Seriously, I am sup	Ruby! What a gem.Seriously, I am super excited about this new release and I will try to deploy it to my prod during Christmas.Name any other tech that is 27 years old, that you feel excited about.	awesomegoat_com	12.682117	-7.0019064	comment	6.0	20.0	1671965770	12.377616
34137670	I’m surprised to see how little spee	I’m surprised to see how little speed-up have happened over the years. Especially when you compare it to something like PHP which has  massive gains.Seems like most of the Ruby gains are related to memory usage.	alberth	12.619971	-7.0181656	comment	6.0	48.0	1672063252	12.363564
34189711	We're building a startup ( https://w	We're building a startup ( https://www.batteriesincl.com/ ) with Elixir and Phoenix 1.7rc (git master really). It's been amazing; I could not be happier.- We went hard on components and it's made building UI's easy. In fact I wrote a test library to make component testing easier.- Live view is so easy with a good component library. I'm not a designer, but with snappy interactions and easy to use components, it's not hard to get something that's exciting.- Elixir is a very nice language to write distributed systems in. Functional in all the right places plus it has OTP.- The community is full of very senior people who freely answer your noob questions.- On-boarding people has gone well. The syntax is friendly enough that experienced engineers grasp the basics, leaving functional programming	eclark	12.693991	-7.4023576	comment	6.0	60.0	1672432298	12.88369
34194945	Prolog is deeply unsuited for work, 	"Prolog is deeply unsuited for work, use Clingo instead.Try this on https://swish.swi-prolog.org/.on(a,b).
on(b,c).
above(X,Y) :- on(X,Y).
above(X,Y) :- on(X,Z), above(Z,Y).Query above(a,c)Ok, true - it works! no probs.now tryon(a,b).
on(b,c).
above(X,Y) :- above(X,Z), on(Z,Y).
above(X,Y) :- on(X,Y).and query... and it explodes.So - this kind of bug is very hard to find and extremely easy to introduce.The good news is that answer set programming is not prone to it. So instead of prolog use Clingo !https://potassco.org/clingo/"	sgt101	13.148205	-7.296193	comment	6.0	19.0	1672479146	-12.524986
34230894	Counter point - https://github.com/m	Counter point - https://github.com/microsoft/TypeScript/blob/main/src/compil... - your task is to just make it a little bit faster. Where do you begin with a 2.65mb source file?It’s easy to miss the point of what the OP is saying here and get distracted by the fact this file is ridiculously huge. This file used to be a paltry 1k file, a 10k file, a 20k SLOC file… but it is where it is today because of the OP suggested approach.	CraigJPerry	12.3501835	-6.786105	comment	6.0	20.0	1672751542	-10.452852
34296589	Does anyone else find the Polars syn	"Does anyone else find the Polars syntax kind of clunky and ambiguous?For example, from the link, here's how Polars and Pandas handles manipulating data in a subset of a dataframe:  f = pl.DataFrame({'a': [1,2,3,4,5], 'b':[10,20,30,40,50]})
  # Polars
  f.with_column(
      pl.when(pl.col(""a"") <= 3)
      .then(pl.col(""b"") // 10)
      .otherwise(pl.col(""b""))
  )
  # Pandas
  f.loc[f['a'] <= 3, ""b""] = f['b'] // 10

Its not clear in the Polars approach that the column ""b"" is being modified. An additional minor nitpick here is the use of when/then/otherwise for their conditional logic. Aren't these just if/else-if/else conditions? It's seems more in line with mathematical/python convention to use if/else... am I missing something?The Pandas equivalent, on the other hand, is much more concise,"	saeranv	12.372417	-6.547089	comment	6.0	19.0	1673158800	10.125831
34336003	Ask HN: Why does PHP dominate the CM	Ask HN: Why does PHP dominate the CMS space?	diceduckmonk	12.762684	-6.6366158	story	6.0	3.0	1673421984	-1.5439162
34336769	If you treat your storage as a separ	If you treat your storage as a separate subsystem you’ll likely not face the problem with `create_changeset`. I’m saddened to see that almost every Phoenix project is tightly coupled with the database as every context function calls the database and clean business logic is nowhere to be found. Also, why are we using the contexts directly in the controllers and keep the top-level module empty?	nesarkvechnep	12.833001	-7.0743217	comment	6.0	32.0	1673430437	12.7376995
34344412	An online IDE for visual programming	An online IDE for visual programming in Prolog	triska	13.127929	-7.280103	story	6.0	167.0	1673469716	-12.515591
34354866	I like Ruby but I don't like Rails. 	I like Ruby but I don't like Rails. No idea if this is better now but I would get weird exceptions that would be from metaprogramming goofiness that was really difficult to debug and find documentation for, and it uniquely bothers me when I can't figure out where errors are coming from in code (same critique of async/nodejs). The general heaviness also just didn't mesh well with my programming style, I like things cleaner and more simple.The Neocities frontend is basically something much simpler built on top of Sinatra and I haven't regretted that decision at all. It's (relatively) clean and simple, and if I need to do something weird that doesn't conform to the paradigm (this happens a lot), it quickly gets out of my way. You can generally do anything you want with Rails, but in my experi	kyledrake	12.689053	-6.973015	comment	6.0	19.0	1673537147	12.353017
34363585	#1 – You don't have to upgrade TypeS	#1 – You don't have to upgrade TypeScript versions till you are ready, and newer versions never have breaking changes anyways. The syntax remains strictly compatible with ES6 and beyond. Packages you consume publish compiled JS and aren't dependent on specific TypeScript versions at all.#2 – If libraries haven't published types, just use them as pure JavaScript (which is what you would have done anyways). Lack of documentation again applies to both JS and TS equally.#3 – I assume you are talking about compiler errors? I have personally found them to be simple to understand, especially when the exact location is highlighted in your IDE. At runtime there will be no difference since it is all the same JS code under the hood.#4 – Yes transpilation takes non-zero time. TypeScript has a lot of t	paxys	12.381884	-6.762061	comment	6.0	28.0	1673580179	-10.45309
34385407	I’m always kind of sad that the only	I’m always kind of sad that the only way to achieve this always seems to be native code.I think the value of having all your logic in the same language is undervalued (Ruby and Node also seem to often use bindings to something compiled).	Aeolun	12.5261345	-7.165212	comment	6.0	21.0	1673741362	-11.148465
34414108	It's been a sec since I've used Ruby	It's been a sec since I've used Ruby. How's the typing story? Seems like Sorbet is doing quite well, but are there comprehensive typings for the ecosystem, like TypeScript? Because with ergonomic, comprehensive type checking and a JIT, Ruby might be a tempting option again.	hardwaregeek	12.511138	-7.1130896	comment	6.0	28.0	1673971244	12.378109
34423221	Fast DataFrames for Ruby	Fast DataFrames for Ruby	aa_memon	12.4623995	-6.8042917	story	6.0	122.0	1674013505	-11.290796
34471022	Why does Ruby not have similar probl	Why does Ruby not have similar problems? (Or if it does, why does nobody seem to care?)Like why does Ruby have gem and bundler, each doing one thing, whereas python has fifty bazillion tools that all do nearly the same thing if you squint but all have their own weird problems?I've personally just ended up using poetry and that has mostly stopped me from having to care overmuch about the tooling.I feel like I'm spoiled coming from Java land, where aside from too much XML, maven just works and if you need to do weird shit (like if you're android, for instance) then you use gradle, which still doesn't fuck up the maven repository format and we can all just live happily. (And nobody uses Ant anymore).	atomicnumber3	12.5576315	-7.014213	comment	6.0	22.0	1674338284	12.37149
34496187	I have a question and anecdote.I’ve 	I have a question and anecdote.I’ve been on teams in the past that had to deal with rails apps (legacy code usually) and I found ruby to be really difficult to understand. There are so many ways to do one thing, and with the rails addition there are now so many conventions to follow. Then when those conventions don’t work anymore, and the code base goes off the rails (no pun intended) and the out of the box conventions no longer make sense.Granted most of my experience is writing Go, followed by dart, swift, and typescript. I have a hard time navigating codebase of a dynamic language and it’s a pita to have to rely on tests (not everyone writes good tests).I use Go for all my backend tasks and it is not only fast performance, but really easy to be productive in because there is usually one	moomoo11	12.708779	-6.9567847	comment	6.0	39.0	1674513867	12.322211
34545715	I agree up to the last point. You ca	I agree up to the last point. You can catch panics at the thread level right? I mean, more generally, what is Erlang implemented in?	ThemalSpan	12.372622	-7.4819093	comment	6.0	19.0	1674826192	12.863642
34613834	Shameless plug: I built an open sour	Shameless plug: I built an open source, completely free, no ads/tracking whatsoever sudoku with a lot of bells of whistles. It’s only web based, so no native apps. Find it here: https://sudoku.tn1ck.com/Source is at https://github.com/TN1ck/super-sudoku if anyone is interested	TN1ck	13.449663	-7.408992	comment	6.0	25.0	1675271822	15.079858
34623418	Khepri is a tree-like replicated on-	Khepri is a tree-like replicated on-disk database library for Erlang and Elixir	dr_linux	12.56644	-7.51127	story	6.0	70.0	1675323571	12.912548
34885597	Ask HN: Would a DB of startup tech s	Ask HN: Would a DB of startup tech stacks be valuable to you?	lsj0627	12.692183	-6.9689655	story	6.0	19.0	1677007118	12.351773
34983601	Unpopular Opinion: Godot should make	Unpopular Opinion: Godot should make JavaScript/Typescript its scripting languages.	ralusek	12.33601	-6.698887	comment	6.0	26.0	1677685708	-10.445648
35155069	If you don't know the subject, how c	If you don't know the subject, how can you be sure what it's telling you is true? Do you vet what ChatGPT tells you with other sources?I don't really know Typescript, so I've been using it a lot to supplement my learning, but I find it really hard to accept any of its answers that aren't straight code examples I can test.	yoyohello13	12.373309	-6.835006	comment	6.0	47.0	1678814788	-10.410615
37265223	I've seen Typescript programs break 	I've seen Typescript programs break between versions of Typescript more than I've seen happen in any other programming language.	PaulHoule	12.418773	-6.7627125	comment	6.0	23.0	1692987393	-10.470655
37305137	They rewrote, which is known to help	They rewrote, which is known to help too.  Going from 30 to 15 instances is not bad but it's very likely that a Java-to-Java rewrite would have helped go down too.The big one however is going from 200 Python servers to 4 Erlang ones: a 50x reduction is quite something and a Python-to-Python rewrite would not have allowed to achieved a 50x gain:> All this is possible because Elixir, and the Erlang platform underneath, are fundamentally designed for always-online software with many users. When you use the right tool for the job, the benefits are clear.	TacticalCoder	12.585671	-7.4699244	comment	6.0	49.0	1693300551	12.907826
37411351	Remove TypeScript, change linting ru	"Remove TypeScript, change linting rules, remove Prettier, breaks all PRs ... seemingly with no discussion and merged within 2 hours of the PR.Sounds like a project I'd stay away from.With comments like ""Also, TypeScript hurts to write. Good riddance.""What exactly is the problem here?  Do we have too many developers who grew up on JavaScript and aren't seeing the benefits of static typing?  Is a tiny compiler (transpiler) step on the front-end simply too much to ask?I say this as a lead on an enterprise Angular project who used to loathe front-end development (for 20+ years).  TypeScript has brought back some sanity."	EMM_386	12.376807	-6.7403355	comment	6.0	24.0	1694034498	-10.441132
37424724	Bun v1	Bun v1	johnny_reilly	12.473349	-6.4421964	story	6.0	92.0	1694116609	-10.792459
37442995	I've always liked PHP. You wouldn't 	I've always liked PHP. You wouldn't pick it for your job interview's coding test if you had a choice (Python all the way there), but it's so intertwined with the internet and what we've learned about programming over the years. First mover advantage kind of deal.And I've never had to deal with ESM/CJS/AMD whatever module nonsense with PHP. No transpiling anything, just edit and refresh. And so many useful functions out of the box (array_column anyone?).I think its bad rap comes from its ubiquity. Pretty much any existing website I've had to work on has been a putrid mess. That's just the way codebases go unless you're a SaaS with a CTO who's hell bent on preventing that.And since most of these putrid messes have been based on PHP, due to it's age and ubiquity, people blame it, due to obser	_rm	12.733117	-6.622032	comment	6.0	77.0	1694243788	10.322106
37443020	Bad rap comes from the inconsistency	Bad rap comes from the inconsistency of the early APIs. The ability to interleave code and HTML was also tacky and never taken seriously but I think touted highly by some as a killer feature. The language is very unplanned, go look at an equality chart for PHP, it makes JavaScript blush as well.	gleenn	12.557843	-6.457517	comment	6.0	43.0	1694244060	10.300541
37450226	Flask is decent. Can’t we use that?	Flask is decent. Can’t we use that?	phas0ruk	12.736038	-6.567954	comment	6.0	22.0	1694293191	10.033083
24569193	> There's a joke that every web deve	"> There's a joke that every web developer makes a personal page by first writing a custom bespoke CMS over a couple of months and then only using it for one ""Hello, World!"" postI might be able to top that. About eleven years ago, I went through this process:1. I wanted to redo my web site. But I hated using PHP which is all my shared host allowed.2. Maybe I'll design a little programming language that transpiles to PHP. Then I can program my site using that.3. I have the parser working and producing an AST. You know, writing a little interpreter that walks that AST is practically trivial. I'll do the PHP backend later, but let's give that a try.4. Whoa, I have a working language! Neat! But, man, that tree-walking interpreter is slow. Maybe I could translate the tree to bytecode and write a"	munificent	12.355118	-6.4968004	comment	6.0	26.0	1600880373	10.393391
24587247	PHP is implemented in C, right?What 	PHP is implemented in C, right?What makes a PHP version implemented in a JVM 9x faster than PHP implemented in C?	continuations	12.722374	-6.6574225	comment	6.0	24.0	1601017004	10.312875
24594045	My thoughts:- RBS: meh... might get 	"My thoughts:- RBS: meh... might get more useful in the future (in 2-5 years maybe).- Ractor: Wohooo! I'm writing a DAG library where I was thinking of implementing something like this, good to know I can use it and get real parallelism on top.- Scheduler: :shrug: don't know about this one, might be relevant with future concurrent ruby code, any ideas?- Rightward assignment: it's a bit awkward but I see the use case, just wish we had the pipe operator too like in Elixir.- Endless method: this one is cute, I love it!- Find pattern: oh boy, code reviews are going to be interesting now!- Hash#except: yes, definitely a welcome one.- Memory view: if this helps with numpy style gems it will be great!- `send(:""do_#{ meth }"", ...)`: don't do meth kids! (it's a joke!)... seems like a reasonable feat"	sdwolfz	12.578545	-7.03621	comment	6.0	29.0	1601067649	12.352206
24605277	Caramel: an Erlang back end for OCam	Caramel: an Erlang back end for OCaml	todsacerdoti	12.330167	-7.641311	story	6.0	189.0	1601197705	12.841342
24616510	If you're impressed with TypeScript,	If you're impressed with TypeScript, you should definitely check out ReScript (formerly BuckleScript). Its type system is clean and sound, and yet compiles to native JS without overhead. https://rescript-lang.org/docs/manual/latest/introduction	jey	12.354599	-6.7677655	comment	6.0	21.0	1601300656	-10.452627
24653594	OTP = Open Telecom Platform [1], tho	OTP = Open Telecom Platform [1], though I think the full name is avoided nowadays.On an unrelated note, I've always been fascinated with the Erlang VM. The idea that you could hot-load modules and have multiple versions of the same module running at once seems really useful. I wonder why other runtimes haven't adopted these features?[1] https://en.wikipedia.org/wiki/Open_Telecom_Platform	abetlen	12.569496	-7.499899	comment	6.0	37.0	1601572795	12.908427
24694348	Is it as good as rails? When I run a	Is it as good as rails? When I run a rails new command, I can setup my postgres connection, nodejs and webpack libraries, rails core library in one command. Rails has database migrations with conventions i like - the timestamp and a file name that represents the action to be performed against the database (e.g. AddNameToBlogs) which that can also be rolled back.I also really like the Rails restful router which is strongly tied to its controllers.I could go on. I really like that Rails gives me strong, opinionated conventions but also allows me to configure things to be liking if needed.I want to love .net core - I really like F#. Any other rails dev out there make the transition to .net core?	KurtMueller	12.697021	-6.8415475	comment	6.0	27.0	1601952961	12.310828
24847152	I guess all roads do lead to Prolog.	"I guess all roads do lead to Prolog.Why risk the naming confusion? Doing a search for ""prologue language"" yields millions of Prolog results on both DDG and Google."	pgt	13.146843	-7.2946296	comment	6.0	33.0	1603283802	-12.476745
24868171	Please remember that PHP is more or 	Please remember that PHP is more or less the only truly free (as freedom) community driven language suitable for both prototyping/pet projects and enterprise grade web software development. TypeScript and C# are Microsoft, Go is Google, Java is Oracle. Python is not suitable for complex multi-layered systems, Rust is too young and let's see where it will go without Mozilla. Ruby? IMO Ruby is in sunset phase, no new ambitious projects are started with Ruby.	SergeAx	12.590183	-6.737132	comment	6.0	32.0	1603451125	10.330691
24869012	One of the underappreciated pros of 	"One of the underappreciated pros of php for web development is its execution model, it's fault tolerant by default and shares little memory across requests. This kind of makes sloppy programming far more tolerable in php than in other platforms.In effect this has an impact on performance but it also helps in ensuring that a bad request can't blow out the whole application from serving other requests like is common in platforms like nodejs where you need to be extra careful.
Needless to say this makes php becomes quite viable for production envs, and prevents a whole host of issues that need expertise and careful programming to fix."	aszen	12.745074	-6.6015434	comment	6.0	35.0	1603458159	10.267465
24925034	Is there an equivalent of Turbolinks	Is there an equivalent of Turbolinks for something like Django? Or even for MVC PHP apps?	ForHackernews	12.789696	-6.5155196	comment	6.0	19.0	1603925118	7.6016426
24935407	Those are great resources. One I'd a	Those are great resources. One I'd add to it, for general ruby programming, is the Well Grounded Rubyist (https://www.manning.com/books/the-well-grounded-rubyist-thir...) . It's been kept up to date (3rd edition was released in 2019) and I found it very readable and informative.	raesene9	12.634595	-7.031302	comment	6.0	18.0	1604003537	12.376352
24935995	Rails is in a really good place.When	Rails is in a really good place.When I learned it back in 2015 there were so many resources for learning, it felt like every time I had a specific problem related to a feature I was implementing there was either a railscasts or gorails video on it, along with 10 blog posts and stack overflow results. I can only imagine how much better it is now.It has been one of the only semi-modern learning experiences where I was able to go from ground zero to building a real application just by reading the docs, getting started guides and Googling.Opinions combined with a massive community are an awesome combo.It's definitely noticeable when you try to learn a newer framework with a much smaller community and less opinions. You could end up Googling for what you might think is a common thing to solve o	nickjj	12.7464695	-6.932381	comment	6.0	35.0	1604006109	12.363617
24937221	I took a rails job by accident- I kn	I took a rails job by accident- I knew rails was in use but I was interviewed in Go and talked about new things going on in Go micro services. I didn’t expect 40 hours a week of rails / ember JS work and that’s my fault.I have 12 years with Django and I was shocked there wasn’t the equivalent of the Django tutorial. Everyone says the rails tutorial is good and I’m sure it’s worth the money but no one at work endorsed it (nor provided recommendations for any Ruby / rails tutorials).Coming from Python, Go, JS/Typescript (react, vue, etc) in my most recent experiences it was really rough. I couldn’t understand some of the rails magic and the docs were horrible compared to Django. Ruby Mine IDE was essential.I learned how much I love DDL management via code (Django ORM or SQL Alchemy) and how 	leetrout	12.774047	-6.744257	comment	6.0	24.0	1604013255	10.371765
24941093	You can replace Rails with anything 	"You can replace Rails with anything that's Turing complete right? We all know that. C, Assembly, Rust, anything can work.
I just don't see WHY. 
If you're gonna say performance I'm gonna say who cares."	joelbluminator	12.756751	-6.9343486	comment	6.0	55.0	1604056645	12.39702
25064135	Why do Rubyists like this convoluted	Why do Rubyists like this convoluted and almost childish communication style?	crtc	12.620091	-7.0494323	comment	6.0	23.0	1605136260	12.393022
25135014	What I didn’t know about Ruby Number	What I didn’t know about Ruby Numbers	olivdums	12.562498	-7.0557294	story	6.0	53.0	1605693638	12.378913
25148268	I worked at a place with RuboCop as 	I worked at a place with RuboCop as part of the CI, it was a horrible experience. I spent more time fixing lint errors than actual work, and all it does is make my code less readable.	red2awn	12.402479	-7.0345917	comment	6.0	22.0	1605783769	-10.863508
25169324	Caramel: An OCaml to Erlang Compiler	Caramel: An OCaml to Erlang Compiler	signa11	12.483308	-7.5160794	story	6.0	151.0	1605961485	12.85251
25234821	Just solve the php problem.`Warning:	Just solve the php problem.`Warning: Unknown: Unable to allocate memory for pool. in Unknown on line 0`	jkbbwr	12.792732	-6.6130304	comment	6.0	27.0	1606532144	10.30045
25364577	It's a really nice time to be a Ruby	"It's a really nice time to be a Ruby / Rails developer. Rails itself has made some really nice improvements with this release and there is also the ""NEW MAGIC"" should be following in the next couple of days which is currently being sold as what Rails was to the back end, this will be to the front end.Ruby 3 is also just a few days away which brings optional type checking to helps add some additional structure to larger code bases.Then in the wider community you have projects like Hanami 2.0 looking to launch next year which aims to bring all of the structure of ""clean architecture"" approaches and best practices with the simplicity and expressiveness of Ruby."	mhoad	12.737354	-6.964385	comment	6.0	41.0	1607546543	12.3691025
38686273	Ruby 3.3's YJIT: Faster While Using 	Ruby 3.3's YJIT: Faster While Using Less Memory	ksec	12.621684	-7.0361934	story	6.0	193.0	1702924310	12.364764
38687347	I used to work with Ruby and Rails a	I used to work with Ruby and Rails and I really found Ruby to be a very comfortable, terse, and expressive language, but I found it very slow after trying some compiled languages (I think I compared service startup and some simple computationally heavy stuff like Advent of Code or Project Euler solutions) and I just couldn’t go back to Ruby after that. Also I found the Rails (framework) stacktraces and source code very hard to follow.However, that was quite some time ago. Does anyone have any more recent opinions? How is it to work on a large modern Ruby or Rails codebase? Also, I saw some type annotations examples a few years back and thought they looked pretty ugly - is that how I would feel after some months using them, too?	avg_dev	12.6056795	-7.042131	comment	6.0	23.0	1702929407	12.350182
38687206	I moved from ruby 2.7 to 3.2 for a r	I moved from ruby 2.7 to 3.2 for a rails app and was hopeful that it would lead to large speedups like shopify claims it did for them, but was bummed to find it did basically nothing. Anyone else running a large rails app have a similar or different experience?	apstats	12.737904	-6.945301	comment	6.0	25.0	1702928700	12.348547
38751353	Gross. Python is a million times bet	Gross. Python is a million times better than ruby to read and write	Falmarri	12.48336	-7.039283	comment	6.0	53.0	1703395314	12.379465
38760785	The one thing I genuinely don't unde	The one thing I genuinely don't understand is why there is no single task queue that works across ruby and python. I get that at some point people just started making http based microservices to pass information around, but at the end of the day a simple task queue that has a unified storage format across both is a better way to connect ruby(rails) based with the ml stack. There are probably thousands of custom rabbitmq or redis based private company solutions out there.	rjzzleep	12.726972	-6.8196235	comment	6.0	37.0	1703491895	12.282465
38761057	> double digit performance improveme	"> double digit performance improvementsYou mean like 10% faster, or 10x faster?Edit: clicked the link; it's 10%. I don't think that's going to make any difference to the perception of Ruby's slowness given that it's on the order of 50-200x slower than ""fast"" languages like Rust, Java, Go and C++."	IshKebab	12.58987	-7.0195203	comment	6.0	105.0	1703495726	12.36622
38763945	Ruby the language may be fast but th	Ruby the language may be fast but the whole ecosystem is painfully slow. Try writing a server that  serves 1mb of json per request out of some db query and some calls to other services. I get 100 requests per second in Rails. Same service rewritten in go serves 100k requests/s.	jupp0r	12.679559	-6.923442	comment	6.0	38.0	1703522424	12.325329
38780317	Oh, weird. I was around before CGI s	"Oh, weird. I was around before CGI scripts became commonplace on the web, and worked on a handful of projects in that space -- mostly in Perl, but also a bit in ColdFusion (shudder). I think there are some inaccuracies here, but didn't expect to read about someone exploring ""old"" CGI script technology today.> CGI scripts mostly went out of fashion because of their limitations around performance.Nah, performance was fine. It's mostly always been the case that the code running on the server isn't the bottleneck.CGI scripts went out of fashion for several reasons that fall into the categories ""too complex to maintain"" or ""there's this new thing called PHP..."".CGI scripts were often written in Perl, but also sometimes good ol' C, and occasionally some other oddball thing. But, Perl ruled the C"	thaumaturgy	12.51957	-6.4599047	comment	6.0	20.0	1703668127	8.858231
38806053	It's not Elixir, but I'm working thr	"It's not Elixir, but I'm working through Jeremy Koppel's ""Advanced Software Design Course"". I've been coding for 22 years and it is definitely growing me.https://www.mirdin.com/"	sltr	12.6897955	-7.437107	comment	6.0	20.0	1703864345	12.926448
38819263	PHP Sadness	PHP Sadness	doodlesdev	12.771944	-6.6446695	story	6.0	10.0	1703971081	10.289269
38838430	If you are using these to start a Sa	If you are using these to start a SaaS then you are asking for trouble later on.The reason why you build from scratch using a framework like Rails, Next, Django, Phoenix or w.e is you build an understanding of your application while building your application. You know how the piece fit together so when a problem comes up or you need to build a new feature you have a full understanding of the application and know how to remove pieces and add pieces to fit the future of the application.Most of these things aren't even hard to build into you application. The hardest probably being stripe because of webhooks and dealing with the company.Don't be the hare.	impulser_	12.77012	-6.573879	comment	6.0	23.0	1704173208	12.254446
38920627	Yes, it's annoying negative feature 	Yes, it's annoying negative feature of many tech products. Of course it's natural to want to speak to your target audience (in this case, data scientists who like Pandas but find it annoyingly slow/inflexible), but it's quite alienating to newbies who might otherwise become your most enthusiastic customers.I am the target audience for Polars and have been meaning to try it for several months, but I keep procrastinating about because I feel residual loyalty to Pandas because Wes McKinney (its creator) took the time to write a helpful book about the most common analytical tools: https://wesmckinney.com/book/	anigbrowl	12.342058	-6.545631	comment	6.0	68.0	1704760333	10.132099
38920733	Is the sole appeal of polars (vs, sa	Is the sole appeal of polars (vs, say, pandas) its execution speed?I've found being able to express ideas clearly in code (to aid comprehension now and in the future) to be much more important than shaving off a few seconds of run time.For this reason I think speed alone is not a strong sell point, except specifically in cases where execution times really matter.Analogous somewhat to how ruby/rails might be a 'slow' language/framework (e.g. 600ms when another framework might be 200ms) but multiples faster in facilitating the expression of complex ideas through code, which tends to be the far bigger problem in most software projects.	nomilk	12.335056	-6.535276	comment	6.0	20.0	1704761182	10.157232
38992949	It looks like Crystal is gaining tra	It looks like Crystal is gaining traction.Which companies use Crystal in anger / production in front of real users?	colesantiago	12.645707	-7.26266	comment	6.0	28.0	1705256841	-11.218591
32572568	> Yes, and a great way to do that is	> Yes, and a great way to do that is to read documentation, of which Typescript is frequently lacking.I completely disagree, and I was surprised by this sort of comment.Find me a single programming language whose docs are as good as TypeScript's docs and reference. I'd be surprised if you could come up with a single example.	arinlen	12.364262	-6.827571	comment	6.0	33.0	1661294695	-10.459127
32596313	This seems on topic and it's somethi	This seems on topic and it's something I've wondered for a while. Does anyone have any good strategies for quickly running TypeScript against an entire repo?I want to be able to quickly validate that a change that I made didn't introduce any errors. The problem is that our repo is a few hundred thousand lines, and doing `yarn run tsc` takes a long time. I currently use VSCode, which does good at incremental feedback in the current file, but there's still a blind spot where I'm not sure if I've introduced issues that affect files that I'm not currently editing.	johnfn	12.369645	-6.7724137	comment	6.0	20.0	1661445720	-10.445089
32695893	Have led multiple teams on Elixir pr	Have led multiple teams on Elixir projects across a few companies. And while I still love the projects, the community just isn't there anymore.I hope this project sparks some renewed interest in Elixir!(That said, the linked site has basically zero information or examples)	veg	12.71531	-7.4438167	comment	6.0	30.0	1662153982	12.934179
32703414	DockYard R&D: FireFly Optimizes Your	DockYard R&D: FireFly Optimizes Your Elixir Compilation	freedomben	12.669431	-7.450723	story	6.0	115.0	1662222335	12.925688
33020747	Deno 1.26 Release Notes	Deno 1.26 Release Notes	exists	12.527268	-6.4515176	story	6.0	113.0	1664460144	-11.024191
33021271	Ecosystem is still worse, which is I	Ecosystem is still worse, which is IMO all that matters at this point.ts-node is good enough to stick to Node for now if you want TypeScript. I don't think the rest of Deno is that compelling, although I would probably switch to Deno once its Node compat is awesome since it is a more compelete package out of the box than Node is.Deno's battle is that it is an incremental improvement, and competing JS runtimes is quickly become the new JS web framework meme alternative (Bun, Boa, Node, Deno)	lucasyvas	12.463478	-6.438208	comment	6.0	23.0	1664462145	-10.855614
33050380	I've spent the last two years workin	I've spent the last two years working with TypeScript solely. Coming from ~20 years with PHP and using Kotlin and Dart for some years as well, I feel that I'm doing something wrong.I absolutely loathe working with TypeScript. The community is the most fragmented I've ever experienced, the silly amount of package managers, builders... TypeScript just doesn't fit with me.	repox	12.37647	-6.784583	comment	6.0	27.0	1664660348	-10.478895
31774094	Ask HN: Reasonable scope for a begin	Ask HN: Reasonable scope for a beginner web dev?	tannershmoog	12.8105955	-6.4713116	story	6.0	7.0	1655439710	10.016463
31889958	Ask HN: Recommended crash courses in	Ask HN: Recommended crash courses in web UI design (30 minutes or less)	nomilk	12.7192	-6.9251533	story	6.0	48.0	1656296503	12.405812
31902042	ROS – Robot Operating System	ROS – Robot Operating System	bookofjoe	12.69714	-6.841012	story	6.0	36.0	1656370830	12.199933
32179008	> they went over how they handle a b	> they went over how they handle a billion requests a day with mostly a Rails monolith1 day has 246060=86400 seconds. 1bn/86400 is more than 10000 reqs/second, so each request has to be served in less than 100 us. According to [1], random access on an SSD is about 150us. This suggests to me it's likely that most of these are being served cached from a CDN. Are we supposed to be surprised that this can be done by a rails monolith? We don't know how many of those requests are actually hitting the rails app.[1] https://gist.github.com/jboner/2841832	sdrwefgfvb	12.747218	-6.8254256	comment	6.0	47.0	1658409708	12.301852
32241684	I'm paying your flight if you join m	I'm paying your flight if you join me in the Himalaya to teach you TypeScript	wwoessi	12.364252	-6.8000035	story	6.0	18.0	1658858809	-10.479723
32242692	Stop giving code examples in TypeScr	Stop giving code examples in TypeScript	steverydz	12.362479	-6.866251	story	6.0	5.0	1658863138	-10.483112
32327389	That’s just it. I have to code with 	That’s just it. I have to code with the PHP docs open like some kind of arcane recipe book.	CSSer	12.756879	-6.6324677	comment	6.0	25.0	1659497912	10.345832
32329360	>  in the docs comment section.A cla	>  in the docs comment section.A classic boiled frog statement.__It's not undocumented, someone posted a comment about that bug...__I will quietly place my face in my hands and weep to the memory of php coding I did 20 years ago.Seems the same nonsensical masochism is still going strong.	jasonm23	12.763149	-6.644648	comment	6.0	20.0	1659517620	10.330837
32376984	Trealla Prolog embedded in Go using 	Trealla Prolog embedded in Go using WASM	triska	13.118246	-7.309258	story	6.0	89.0	1659884370	-12.488206
32382514	Trealla – A compact, efficient Prolo	Trealla – A compact, efficient Prolog interpreter written in plain-old C	nikolay	13.128797	-7.3046217	story	6.0	126.0	1659934968	-12.489654
32385928	The codebase I'm working on now is w	The codebase I'm working on now is what I consider an exemplary Ruby on Rails project. It is 14 years old and still going strong. It is structured exactly like you'd expect a Rails project to be structured. The gems the authors chosen have been reliable so far with few exceptions. We regularly step into sections of code that are 5 or even 10 years old, and modify/extend them with no issue. Even brand new programmers (fresh out of boot camp) find it easy to work with. It is a success by all standards of software engineering.	tboyd47	12.726151	-6.9520507	comment	6.0	32.0	1659969507	12.358214
32400687	Erlang is not as peformant as Java, 	Erlang is not as peformant as Java, but there are plenty of reasons to prefer the former to the latter:- a much better concurrency model, that gets you parallelism for free just by adding cores- no global gc pauses, low-latency- fantastic operational tools (trace debugging, remote shell, etc.)- Erlang/OTP gives you great middleware out of the box, including including queues, pub-sub, service monitoring, database, etc.- Honestly just a more expressive core language.All that said, I don't really have anything against Java. It is a great language for the server, but it is not the only choice.	lliamander	12.52942	-7.5035005	comment	6.0	46.0	1660064901	12.901646
32453254	My favorite quirky computing book wa	My favorite quirky computing book was something I found in the library by chance at my university when I should've been attending a Principles of Programming Languages course.We'd been learning Prolog in class for the past two weeks but I'm terrible at learning from lectures, so eventually I decided it'd be a better use of my time to locate a book I could teach myself from rather than doodling in class.IIRC it hadn't been checked out since the 80's: it was a slim volume on Prolog with an Alice in Wonderland theme. I can't remember the title or anything, but it was an enjoyable read, and effective: I still hadn't written any Prolog at the time of the exam—which I remember was 4 days out at the time I picked up the book— but I understood it well enough by then to solve all the problems witho	westoncb	13.163987	-7.2955346	comment	6.0	23.0	1660420883	-12.488133
22056888	nope -  the loss in velocity is not 	nope -  the loss in velocity is not worth using it unless you're a massive team.  TS is for Java programmers who are mad at Javascript for existing and don't know how it works well enough to grok overloading etc. plus you get a lot of the benefits of TS in an IDE like VSCode without actually having to use types at all.  if you're a javascript native, typescript is constricting and eliminates one of the best parts of javascript - no types!!	nocommentx	12.360154	-6.8053203	comment	6.0	24.0	1579112864	-10.478632
22090699	I’ve been trying to get into Ruby fo	I’ve been trying to get into Ruby for a new job and am finding it hard.Not being designed for machines is right - a lot of the IDEs seem bad and can’t even figure out where your methods come from. I don’t know how the interpreter manages to run it. Multiply the problem by 10 once you add rails and all the methods it generates.It makes for a good, rapidly developed monolith but most places I’ve worked in recent times are moving to services and micro services and it doesn’t seem cut out for that.	retrobox	12.627598	-7.020113	comment	6.0	23.0	1579431207	12.387102
22090760	There's a lot of comments of the for	"There's a lot of comments of the form ""I tried getting into Ruby and it never clicked"" that I want to respond to.I think that if you're just writing a script to solve a math problem or automate a task, there isn't really a strong argument as to whether you should use Ruby, Python, bash any other high level language. You should probably use whatever you're most comfortable with.But if you're making an application with a database, RoR is an extremely powerful tool. And this isn't just a case of Ruby having the best library (in the same way that Python has the best scientific computing library). It's a case of the library functionality and the language playing together really well.Ruby statements look more like natural language statements than those in other languages. This is a really helpfu"	dlkf	12.537363	-7.0256243	comment	6.0	46.0	1579432342	12.379387
22091260	But those are reasons that are valid	But those are reasons that are valid afterwards. Why weren't the good numerical libraries developed for Ruby?Maybe the watershed moment was when MIT switched from Scheme to Python? I don't know.	Gravityloss	12.478544	-7.0492253	comment	6.0	23.0	1579439609	12.353038
22091032	Good points.Personally, it's a bit p	Good points.Personally, it's a bit puzzling to me why the ML community ran with Python and why there isn't a popular alternative for Ruby. It's very capable in terms of making DSLs.My hunch is that the number-crunching libraries were better in Python (numpy etc).	norswap	12.3825445	-6.9805245	comment	6.0	31.0	1579436610	12.342799
22112332	Can anyone suggest anything that is 	"Can anyone suggest anything that is superior to PHP in its development cycle: save file.php = instant result? As far as I've seen, everything else needs to restart a server, obviously much slower.What about its die-hard intention of fulfilling a request no matter what?
What about autoloading?
And what about the amount of things you can do in vanilla PHP, no libs, no extensions.Hey i've worked with it for some time and sure, its got its nasty things, like gotos :)"	skor	12.743298	-6.639123	comment	6.0	41.0	1579645428	10.290745
22161280	I've been tempted a few times to dip	I've been tempted a few times to dip my toes into Elixir -- I like the language and the BEAM concepts, but in my environment I always bump into the following concern..Ecto v3 has been out for more than a year now, and there are still only two supported adapters..  MySQL and Postgres.  In my environment, I use a lot of MSSQL and SQLite in addition to Postgres, and those adapters haven't been successfully ported over to Ecto v3 yet..  in looking at some of the threads related to porting efforts, it appears that it must be a fairly daunting process.I always get to that point in my technical evaluation and wonder whether I ought to sit back and wait for a while yet, until the database stuff catches up and solidifies.  I realize Phoenix can still use Ecto v2, but that just seems like it would a	histriosum	12.729377	-7.338753	comment	6.0	23.0	1580144761	12.866684
22192935	As someone who has been out of the P	As someone who has been out of the PHP game for a long time, is it still a viable choice for new software? I don't have fond memories of the language at that time, so seeing PHP in the demo video poster frame was an immediate mark against pitching this at my company. That made me wonder whether it's a reasonable reaction to have.Edit for the downvoters— this is an honest question and I very much agree that we can never have too much high-quality self-hosted software. If that can be done with PHP I'm open-minded.	ultrarunner	12.777533	-6.690727	comment	6.0	25.0	1580403639	10.30339
22221264	At these rate of improvement, along 	At these rate of improvement, along with Laravel, may be I should seriously evaluate moving back to PHP stack. It was only the other day Antirez, author of Redis [1] was complaining the Ruby Stack is more complicated than it should be. And I wholeheartedly agree.[1] https://mobile.twitter.com/antirez/status/122328600521977446...	ksec	12.784875	-6.6854515	comment	6.0	105.0	1580701439	10.422445
22243676	This is horrible! Prolog is nothing 	"This is horrible! Prolog is nothing like the language described in this
""tutorial"". The author has completely made up a bunch of programming language
semantics that have nothing to do with Prolog.Just for the most blatant example of made-up semantics: unification is not
""essentially a combination of assignment and equality"".Unification is not assignment: Prolog predicates are immutable. You can't
assign to an immutable data structure.Unification is not equality, either. For example, in Prolog 2 = 1+1 fails
because ""2"" does not unify with ""1+1"" (and not because ""unification can't do
arithmetic""; it's because unification is not equality).Unification is an algorithm to decide whether two Horn clauses can be
resolved with each other. Resolution is the inference rule used in Prolog's
automated "	YeGoblynQueenne	13.144841	-7.2915273	comment	6.0	22.0	1580872327	-12.483785
22293262	Is Ruby on Rails Dead?	Is Ruby on Rails Dead?	BryanBeshore	12.713293	-6.9963684	story	6.0	12.0	1581368399	12.375731
23406264	Why Elixir Is the Programming Langua	Why Elixir Is the Programming Language You Should Learn in 2020	lobo_tuerto	12.658424	-7.4515743	story	7.0	47.0	1591206096	12.926817
23549474	Crystallography Open Database	Crystallography Open Database	nickysielicki	12.642445	-7.2372923	story	7.0	64.0	1592385999	-11.146248
23553443	Seriously, does PHP suitable for thi	Seriously, does PHP suitable for this?It can be handled using a single go binary using pgrok which comes less the source code size and not to mention without any dependencies on almost all platforms!This requires unnecessary things to bundle and too complex for some simple stuff. Mileage may vary though.But just my views.	Marc_Bryan	12.728936	-6.6315846	comment	7.0	26.0	1592412056	10.339527
23592581	Why such a large, important project 	Why such a large, important project would want to drop static types is beyond me.> TypeScript isn’t proving itself helpful to organize Deno code. On the contrary, the Deno team is experiencing the opposite effect. One of the issues mentioned is that they ended up with duplicate independent Body classes in two locationsThis feels like process immaturity or unfamiliarity. Thousands of other projects manage to do just fine.These folks are free to do what they want with their project, but this is not a good look, especially to those that are skeptical of the javascript ecosystem.	echelon	12.474221	-6.4770246	comment	7.0	122.0	1592753925	-10.868896
23595860	We just wrote one that does somethin	We just wrote one that does something similar for Typescript if anyone wants us to OSS it... The idea is that any stale code causes a HUGE amount of headache and removing it can be a life safer.	burtonator	12.362324	-6.7660856	comment	7.0	30.0	1592778157	-10.427634
23654212	TypeScript 4.0 Beta	TypeScript 4.0 Beta	DanRosenwasser	12.396199	-6.8497777	story	7.0	94.0	1593190872	8.203919
23718278	The BEAM Book (2017)	The BEAM Book (2017)	hazbo	12.438664	-7.3324933	story	7.0	232.0	1593725413	7.1402316
23778303	Won ? Ruby fell off a cliff once it 	"Won ? Ruby fell off a cliff once it got to a point where people had to maintain that shit in production - I'm currently working on a large mature RoR codebase and I'm switching jobs ASAP because it's incredibly painful to work with and feels like a dead end career wise - and I like the gig otherwise - good product and a decent team - but the technology is draining so much of my life energy on nonsense it's ridiculous. And the language is built for unmaintainability - standard functions being abbreviated to a single letter, 2 or 3 aliases for a single standard function (map/collect and such), Rails overriding the conventions of the language (! postfix). And then there's the architectural retardation of fat models, fat controllers and using mixins (""concerns"") completely break encapsulation "	rubber_duck	12.683248	-6.9607873	comment	7.0	46.0	1594285681	12.381778
23834298	Honest question: does it make sense 	Honest question: does it make sense to learn Ruby in 2020, with the hopes to actually have a job with it for the next 5 years? I want to leave JS world for something different, and I’m evaluating Elixir, Python and even PHP. What I’m looking to work on are basically SaaS sites, nothing too crazy. Would appreciate any thoughts.	bnt	12.656099	-6.9490013	comment	7.0	23.0	1594745158	12.350731
23990374	Didn't realize Square was interested	Didn't realize Square was interested in Ruby type checking, just like their competitors over at Stripe. Lots of money riding on Ruby, I guess :)It does seem useful to have a _standard_ for type definitions - RBS as the equivalent to a .d.ts file - as that allows for different type checking implementations to use the same system under the hood. This was a big problem for Flow, and why it lost the fight as soon as TypeScript's definitely-typed repository started gaining momentum - users wanted to use the type-checker that they knew had definitions for the libraries they used.On the other hand, RBS as hand-written seems rather dangerous, to me. Nothing wrong with using them to define previously-untyped external code, as long as you know the caveats, but I think you really want to have definit	avolcano	12.4987755	-7.094577	comment	7.0	47.0	1596049194	12.377806
23991935	As an avid Rubyist I have no interes	As an avid Rubyist I have no interest in introducing types into a dynamic language. I would just rather use C# or Java. I never understood why people are trying to make a round peg fit in a square hole.	lovetocode	12.423017	-7.1213746	comment	7.0	22.0	1596059272	12.347902
24000231	My point is exactly that: a technolo	My point is exactly that: a technology itself can't be tainted by crooks using it.Have innumerable script kiddies, scammers, doorway site creators, etc, used PHP for doing bad things? Did / do they constitute a significant part of the user community? Yes.Has PHP been used to create wonderful and world-changing things, like Wikipedia? Does PHP have great, very nicely designed tools that help people develop good things faster, like Laravel? Has the PHP community done a tremendous work to make the language much better, and its stdlib much nicer? Yes.Crooks using your favorite tool can be a nuisance in the community, but noble-intentioned people can be jerks, too, which has many times been observed. If the community has a problem with its being nice, welcoming, constructive place, it's usually	nine_k	12.775262	-6.645718	comment	7.0	21.0	1596127338	10.371422
24058377	> Ruby isn’t designed for a team of 	> Ruby isn’t designed for a team of 200 programmers where you don’t trust some of them.Never mind a team of 200, even on a team of one person I don't trust myself! That's why I'm using typed FP. I don't trust myself not to make clumsy errors. I don't trust myself to be disciplined and write all the tests. I don't trust myself to not design a naïve architecture which I'll have to do a huge — and dangerous — refactoring on later.This is why I'm not using Ruby/Rails any longer.	yakshaving_jgt	12.649951	-7.0470624	comment	7.0	31.0	1596615008	12.369313
24121813	"This just reads to me like ""my perso"	"This just reads to me like ""my personal preferences are good and things I don't like are hyped up and of dubious merit"".If it were me, I'd prefer rails to django any day of the week, that's a personal preference, but if we're talking about building an SPA you're typically going to be building a worse solution if you can't SSR your client views, which you need a js backend to do."	root_axis	12.82975	-6.5040627	comment	7.0	38.0	1597161568	10.135782
24396142	While I agree, the article doesn't r	"While I agree, the article doesn't really give concrete examples.Elixir is layered, making it easy to learn and master. You can get pretty far with Phoenix without ever understanding (or even knowing about) the more fundamental building blocks or the runtime. In large part, this is because of its ruby-inspired syntax. You'll have to adjust to immutability, but that's pretty much it.Then one day you'll want to share state between requests and you'll realize that the immutability (which you're already comfortable with at this point) goes beyond just local variables: it's strictly enforced by these things called ""processes"". And you'll copy and paste a higher-level construct like an Agent or Genserver and add the 1 line of code to this root supervisor that was just a file auto-generated in yo"	latch	12.613792	-7.460995	comment	7.0	133.0	1599445132	12.916781
24396918	Elixir is like an abstraction on top	Elixir is like an abstraction on top of Erlang and its runtime(otp). It heavily depends on the data structures of Erlang and its very difficult to extend it beyond Erlang's limitations / capabilities. When you take macros out of the way, Elixir programs can be translated line by line to Erlang. That OTP dependancy is considered the great strength of Elixir by many but it also has disadvantages.The thing with Erlang  is that it ain't a general purpose programming language like Java or Python but a niche telecom software language. Erlang is marketised like that and from what I've heard it's really great at that (telecom software). But nobody proposes to write f.e a game or a Gui app in Erlang.Elixir on the other hand is marketised as a general purpose programming language. People that start 	spapas82	12.648379	-7.479681	comment	7.0	23.0	1599457812	12.914461
20042842	TypeScript 3.5	TypeScript 3.5	DanRosenwasser	12.362196	-6.860879	story	7.0	268.0	1559150403	-10.509716
20111820	As a counter-anecdote, the built in 	As a counter-anecdote, the built in Ruby interpreter in Mac OS X Tiger was the way I learned to program and how I got interested in programming. I don't think a bare Ruby interpreter is the best way to get into programming, but Apple hasn't been great at encouraging programming among kids. As a kid, its development tools were totally baffling, where Ruby was much easier to understand.	indigo747	12.56881	-7.0301757	comment	7.0	41.0	1559798487	12.406973
20200319	Genuine question: Is anybody picking	Genuine question: Is anybody picking up PHP off the shelf for starting applications today, or its relevance mostly in existing applications like Facebook (which I've read is powered by PHP).	JMTQp8lwXL	12.774519	-6.6368575	comment	7.0	29.0	1560751681	10.341357
20357572	I'm currently building a video cours	I'm currently building a video course hosting platform with Elixir / Phoenix and all I can really say is this has been the nicest tech stack I've ever used in 20 years of web development.IMO it really does feel like you get the best of everything (developer productivity, developer happiness, great language for creating maintainable code, OTP and the BEAM bring a lot to the table, it's memory efficient, tracing code without a ton of experience is very doable, it's fast as balls and Phoenix channels / LiveView is a great abstraction on websockets). I find myself fist pumping all over the place as I make progress towards this app while learning as I go.I don't think I've liked a technology this much ever and I'm honestly surprised it's not already more popular than it already is. I've been ar	nickjj	12.7506	-7.2983327	comment	7.0	94.0	1562272619	12.863352
20591771	Prolog Control in Six Slides	Prolog Control in Six Slides	nils-m-holm	13.151696	-7.2991996	story	7.0	82.0	1564740068	-12.506855
20591788	I find the timing odd [0] that php s	I find the timing odd [0] that php since v5 ressembles more and more Java very explicit type system, while Java is going backward to more implicit and infered.All in all in 20 years we'll all be writing ml ?[0] technological waves diffuse differently across cultures	agumonkey	12.732738	-6.6533914	comment	7.0	38.0	1564740267	10.291099
20718729	Congrats to the Rails team! With thi	Congrats to the Rails team! With this new major release, I’m planning to update the Ruby on Rails Tutorial accordingly. See here for details:https://news.learnenough.com/ruby-on-rails-6You can join the Learn Enough/Rails Tutorial email list to receive a notification when it’s ready:https://news.learnenough.com/email-list/	mhartl	12.749298	-6.9483256	comment	7.0	23.0	1565983310	12.361722
20719396	What is the fastest web server for R	What is the fastest web server for Rails today? I've always wanted to run something serious with Rails, but the performance always puts me off.	bbmario	12.742875	-6.9096513	comment	7.0	26.0	1565987298	12.316348
20766951	I'm currently trying to revive a 2yr	"I'm currently trying to revive a 2yrs old codebase written with TypeScript/React/Redux. I made the capital error of not checking in node_modules apparently or pinning versions (ie using yarn or npm shrinkwrap), as I now get tons and tons of type errors from dependencies on build. Problem seems to be that all the @types packages are somehow out of sync/broken/hell I don't know. I also don't have access to CI logs anymore so I can't figure out which versions it used to resolve to …The @types definition packages for react-router, redux-thunk, etc. give me ""error TS2605: JSX element type X is not a constructor function for JSX element"". Most popular answer on GitHub is to rm -rf node_modules and rebuild, however that does nothing for me. I tried upgrading some @types selectively and triple-dou"	bauerd	12.563985	-6.4704223	comment	7.0	45.0	1566474047	-10.5819025
20768565	>If it's tedious, you're probably do	">If it's tedious, you're probably doing something wrong or sub-optimal.>IMHO we're reaching the point where typescript (or similar languages) should be used by default over untyped javascript in professional environments. It's like having tests, which are also not generally considered optional.Gotta love JS community. It flip-flops on some major aspect of system design roughly every year, yet people continue to arrogantly spout their opinions about system design as if they had been correct about everything all along. Not ""these are the benefits, these are downsides"" not ""I've improved in X by using Y"", always ""nobody needs X, everyone must do Y, and if you're not doing Z you're wrong and unprofessional"". Zero self-awareness."	gambler	12.346164	-6.755698	comment	7.0	49.0	1566484838	-10.433831
20792370	Adventure in Prolog Tutorial (2016)	Adventure in Prolog Tutorial (2016)	AlexeyBrin	13.146132	-7.2974505	story	7.0	131.0	1566732424	-12.484818
20811305	I don't want to downplay Elm's accom	"I don't want to downplay Elm's accomplishments here, but I really disagree with the ""RealWorld"" example here. Does a 29kb asset make a meaningful difference compared to a 100kb asset? Especially if the framework is a fixed chunk of that, the space savings as the project grows in size is not incredibly meaningful in the grand scheme of things. 50kb of excess code on my page due to missed optimizations isn't going to keep me up at night.A more meaningful comparison would be ""we ported these actual production apps to Elm and here's the difference."" Finding comparisons between languages like Elm and JS often feels like an exercise in microoptimization: I don't care if it can update the DOM 20% faster if React or Angular already does it within 16ms, or if the download time for my bundle is redu"	bastawhiz	12.986996	-7.670551	comment	7.0	23.0	1566922631	-12.733287
20825137	I feel like I'm the only one, but I 	I feel like I'm the only one, but I don't care for Typescript.After working with it for a while, the type checker ends up being painful to work with.  I'm using React, and it's difficult to write higher order components that are correctly typed.  Additionally, probably related, styled components often get messed up with the type system.	wry_discontent	12.346044	-6.861112	comment	7.0	22.0	1567035043	-10.4314
20829382	"I don't get all this ""Perl 6 is a di"	"I don't get all this ""Perl 6 is a different language"" nonsense. It was created by Larry Wall and retains all the characteristics of Perl 5 whilst adding a lot of great stuff from other languages. Sadly, performance prevents it being taken seriously in production."	cutler	12.345154	-7.0521593	comment	7.0	38.0	1567086084	13.199586
20874370	This language is quite striking! Typ	This language is quite striking! TypeScript is a superset of JS but here we're going from the other direction. Make a language that is only the TypeScript extensions to JS, and drop all the JS parts.No Object (!!), no Date, TypedArray, RegExp, almost all the mainstays are gone. It's Java 1.0: static offsets and vtables.This feels like the beginning of TypeScript throwing its weight around. It has the momentum to supplant JS and this is an exploratory compatibility-breaking step.	ridiculous_fish	12.353047	-6.7637777	comment	7.0	46.0	1567576293	-10.447219
20886431	> I wonder if it would actually be b	"> I wonder if it would actually be better for software teams to build not the thing they want, but rather the thing that makes the thing they want.Sounds so appealing to programmers, so much harder than it sounds. A dangerous fantasy many ships have broke upon.The proposals of ""yagni"" and the ""mvp"" are in some sense a reaction to the danger.On the other hand, when it works, it works. I'd say Rails is an example."	jrochkind1	12.730867	-6.927075	comment	7.0	26.0	1567690109	12.366413
25495539	Anecdotally, since I got away from R	Anecdotally, since I got away from Ruby, working on software became way more productive and tolerable.Maybe it was something with the corner of the Ruby world I fell into, but the syntax sugar options and “cleverness” that enabled was maddening to deal with, and permeated that crowd.Code bases with mixed styles are a thing in any language, but the Ruby-ists around me found a way to make one project look like half a dozen languages were involved.Insert Confused Jackie Chan meme.	what2build	12.589798	-7.0322104	comment	7.0	26.0	1608563192	12.385359
25535033	So with the promised 3x speed improv	"So with the promised 3x speed improvement (hooray!), where does Ruby stand with regard to performance, compared to say Python? According to [this benchmark][1], it seems (the 3.0.0-preview1 version was) on average about 2x slower than Python. Are there other benchmarks to compare with?Looking into it, this other benchmark [2] of 3.0.0-preview1 vs Ruby 2.7 actually concludes there's no real performance improvement there. So I guess an additional question is, is there actually a 3x speed increase in realistic benchmarks?[1] https://benchmarksgame-team.pages.debian.net/benchmarksgame/...
[2] https://www.fastruby.io/blog/rails/performance/ruby/hows-the..."	sundarurfriend	12.553821	-6.9927163	comment	7.0	34.0	1608883582	12.363438
25658860	> Computer Assisted Software Enginee	> Computer Assisted Software Engineering (CASE) tools, COTS, Enterprise Resource Planning products like Peoplesoft and SAP and, yes, even Ruby. They claim amazing reductions in cost and time if you buy into their holistic development philosophy. What is not always as obvious is the significant up-front costs or the constraints you may be committing yourself to. Lock-in used to primarily happen with vendors, but now it can happen with frameworks too.Is the author calling Rails as 'lock-in'?	SPBS	12.729678	-6.9356446	comment	7.0	30.0	1609948933	12.373889
25798575	What frameworks are recommended nowa	What frameworks are recommended nowadays for Typescript? Is Express still dominant here or are there TS-first options?	vector_spaces	12.412053	-6.708498	comment	7.0	34.0	1610757030	-10.459248
26006041	This is definitely something that ty	This is definitely something that typescript constantly lures you into.I recently switched back to JS for a prototype of a programming language.I immediately felt more productive.At times, the TS systems feels like a theorem prover. Until it doesn't. And then you're left with a bunch of types that almost do what you want... but not quite; Always tempted to experiment again for a day or two.But let's see what happens down the road. Maybe I'll miss the incidental documentation the typings provide.	Garlef	12.355785	-6.817318	comment	7.0	24.0	1612297087	-10.451466
26077371	Sure, but there's nothing inherent t	Sure, but there's nothing inherent to the language that fueled that. They could have done that with Python, for example.Rather, it was popular software like bulletin boards and blogging platforms that built the demand. PHP used to have one of the lowest barriers to entry because you could get by with plain HTML and incrementally add business logic inline.	nkozyra	12.727001	-6.637284	comment	7.0	28.0	1612878551	10.338301
26096945	Crystal is nearly at 1.0 and seems w	Crystal is nearly at 1.0 and seems way faster than Ruby in addition to having a Ruby like syntax, i'd suggest you take a look at it, promising stuff there.https://crystal-lang.org/edit: did i win the fastest comment to the bottom on hn? what do I get?jokes aside, care to explain why folks?In all seriousness, the results speak for themselves, when comparing to Ruby in terms of speed.https://github.com/kostya/benchmarkshttps://github.com/kostya/crystal-benchmarks-gamehttps://github.com/the-benchmarker/web-frameworks	yannoninator	12.625444	-7.2002215	comment	7.0	37.0	1613005222	-11.228382
26215047	It's funny, I have about 13 years ex	It's funny, I have about 13 years experience, have been senior in both enterprise, start-ups and everything in-between, and have basically the exact same view about front end dev as your original post.Except I fucking hate using Typescript, and totally wasn't expecting to see you mention you like it, given all the other stuff.IME all the same people that overengineer everything with god awful dependencies are the same ones pushing super hard for typescript on every project I'm on. When they get their way (as always, since everything is decided democratically and everyone is dragged down to the level of the worst dev on the team), they write the worst typescript ever. On my last project, one of the people championing typescript defined some constant strings containing css breakpoints as the	BigJono	12.360385	-6.79148	comment	7.0	26.0	1613926895	-10.443704
26217013	An Introduction to Crystal	An Introduction to Crystal	thejokersthief	12.636085	-7.252146	story	7.0	69.0	1613940439	-11.154923
35525705	Hi everyone, contributor to Livebook	"Hi everyone, contributor to Livebook and Nx here.When we started the Numerical Elixir effort, we were excited about
the possibilities of mixing projects like Google XLA's (from Tensorflow)
and LibTorch (from PyTorch) with the Erlang VM abilities to run concurrent,
distributed, and fault-tolerant software.I am very glad we are at a point where those ideas are coming to life
and I explore part of it in the video. My favorite bit: making the tensor
serving implementation cluster distributed took only 400 LOC
(including docs and tests!): https://github.com/elixir-nx/nx/pull/1090I'll be glad to answer questions about Nx or anything from Livebook's launch week!"	josevalim	12.650906	-7.4400473	comment	7.0	30.0	1681223516	12.8981905
35525661	Distributed Machine Learning Noteboo	Distributed Machine Learning Notebooks with Elixir and Livebook	josevalim	12.662767	-7.29066	story	7.0	299.0	1681223343	12.844239
35569874	This is one of the best businesses I	This is one of the best businesses I have heard of. Even 6-7 years back, Sidekiq was grossing $80k/month [1]. I imagine it must be much more now. No servers to maintain, no employees, minimal support work and Mike has the complete freedom to work on updates whenever he prefers. Almost entire revenue minus payment processing costs must be profit. Imagine making $1M / yr working only 10-20hrs per week (Don't wish to presume here, but that's my estimate of the man-hours it costs to run).> I still have 0 employees and don't plan to hire. I tune my business processes to run as lean as possible: Most of my customers are on credit card so their payments are automatic. The gem servers take about one day of maintenance per year. I can't really outsource much of my support work because it is so tech	shubhamjain	12.740309	-6.924384	comment	7.0	30.0	1681482123	12.308718
35624205	I have a Prolog book, somewhere.Prol	I have a Prolog book, somewhere.Prolog feels like a really useful feature was hauled out of some other programming language and made to stand on its own.  Like if I pulled regular expressions out of Perl and tried to make them their own language.	at_a_remove	13.1377735	-7.2897296	comment	7.0	29.0	1681878074	-12.496991
35624279	If you're trying to solve boolean sa	"If you're trying to solve boolean satisfiability, you want a SAT solver, not Prolog.If you're trying to solve more general problems, you probably want an SMT solver or other more specific solver (e.g., ILP), not Prolog.If you're trying to verify software, you want a theorem prover, not Prolog.If you want database-ish stuff you want Datalog (or something like it), not Prolog.Prolog falls into the uncanny valley of being too general of a DSL for the sorts of optimizations that more narrow solvers enjoy, while being too narrow of a DSL for most general-purpose programming. I think because it was an early DSL, people got caught up in the idea of it being more ""high-level"" than other languages [1], but the DSL nature of it wasn't fully appreciated at the time.[1]: For fun, take a read through h"	eslaught	13.147839	-7.2797008	comment	7.0	53.0	1681878963	-12.486077
35659859	PHP popularity is decreasing because	PHP popularity is decreasing because there are better tools for the same niche today. The same happened for Perl in 00s. The same is happening for every web backend language, as JavaScript is becoming ubique due to it being the de facto and only choice for the web frontend.Maybe PHP can be made better, but it would need some radical changes and then the question is that if it’s worth the effort and maybe to pick up some of the new tools instead.	miohtama	12.729668	-6.567735	comment	7.0	83.0	1682110070	10.361297
35891888	We do this at my current company for	We do this at my current company for all projects, it does not mean you don't use typescript, you will still validate all your files with TS, but there's no build step, just a check.Very rarely we find a case that we can't cover with JSDoc annotations, and most of the time it means the code could be refactored to be simpler.I do this now for all my personal projects, in my opinion it's simpler, faster and closer to pure JS.	dobladov	12.365928	-6.761992	comment	7.0	28.0	1683745333	-10.466581
35897710	> Laravel is [...] reasonably well d	> Laravel is [...] reasonably well documentedHard disagree. Sorry, I don't have a computer science degree, why does their documentation make that assumption. I find their docs very hard to grok.PHP.net docs are no-frills no-fuss, straight to the point. Other frameworks are documented very well too, CakePHP comes to mind (at least, when I was using it last in v2 and v3).I can't say I've read the absolute latest version of their v10 docs, but when I was neck deep in 5.8 I found I had to switch to older versions of the documentation to read up on some of the most basic of Laravel features. eg. What's the syntax of using Form in Blade templates? I had to go back to v4.x docs to read up on it, Blade templating hardly got a mention in v5.x documentation, despite it being critical component in a 	acherion	12.796752	-6.6298475	comment	7.0	43.0	1683780998	10.353588
35915191	Polyphony: Fine-Grained Concurrency 	Polyphony: Fine-Grained Concurrency for Ruby	thunderbong	12.448824	-6.9920287	story	7.0	79.0	1683894403	12.297011
35928009	Ruby has the worst, most complex syn	Ruby has the worst, most complex syntax I have ever used.	sage76	12.36263	-7.0326486	comment	7.0	24.0	1683983312	12.391365
35961700	Erlang/OTP 26 Highlights	Erlang/OTP 26 Highlights	ramchip	12.56496	-7.5082426	story	7.0	259.0	1684244204	-11.296767
35993078	Ts-morph – programmatically manipula	Ts-morph – programmatically manipulate TypeScript source code with TypeScript	aabbcc1241	12.349764	-6.832548	story	7.0	43.0	1684439046	-10.448228
36045938	ROS 2 Iron Irwini Release	ROS 2 Iron Irwini Release	kscottz	12.657394	-6.914799	story	7.0	55.0	1684856474	9.277649
36069456	Deno is becoming more and more usefu	Deno is becoming more and more useful, but at the same time it feels like the project moves further and further away from the initial presentation of ry.	jensneuse	12.519057	-6.4744105	comment	7.0	64.0	1685014831	-11.009341
36094676	After many years in Ruby, I feel str	After many years in Ruby, I feel strongly that the idea of a block is necessary for optimal expressiveness of a high-level language. Destructors are too implicit and fine for resources, but not as great when understanding code. And Python’s context managers trying to help with exception-safety is a nice touch.The Lisp crowd was right, as usual.	mattgreenrocks	12.441596	-7.0975995	comment	7.0	28.0	1685194244	12.377374
36210886	Absinthe for Large Elixir Applicatio	Absinthe for Large Elixir Applications	amalinovic	12.702833	-7.4321995	story	7.0	62.0	1686049489	12.904034
36255919	Is the only reason for this to make 	Is the only reason for this to make it possible for web developers or people who know TypeScript to write code for IoT Devices? To fill the lack of experienced low level programmers? Because as language alone, I don't see a reason why I should I ever use this if I am not familiar with TypeScript already.	nicce	12.361967	-6.8005285	comment	7.0	49.0	1686307522	-10.433818
36299214	Elixir's “Set Theoretical Type Syste	Elixir's “Set Theoretical Type System” prototype/demo/showcase	weatherlight	12.390313	-7.413467	story	7.0	167.0	1686596562	12.943745
36310541	You're going to incur the wrath for 	You're going to incur the wrath for saying the silent part, but you're not wrong. People have the same 5 rails example corps every time someone says one of these two things:- without rails nobody would use ruby- without X corp, ruby's deadFact is, we're seeing less and less usage, and more and more distillation of the current userbase along the golden paths laid out by DHH.Is it wrong for rails and thus ruby adoption to slow down? Not at all, people should use what they like, however I think Rails and Ruby are in this negative spiral where:- rails is mostly needed for prototyping and crud apps- this work is typically done by juniors- rails devs are at this point largely seniors, not juniors- rails devs pay the bills with other tech or by maintaining legacy rails apps.There are startlingly 	lagniappe	12.730911	-6.951786	comment	7.0	36.0	1686665782	12.356663
36508618	PHP packages for Ubuntu EOL releases	PHP packages for Ubuntu EOL releases put under paywall	bezout	12.754181	-6.5845942	story	7.0	21.0	1687968958	10.316588
28678969	Generate Elixir/Phoenix Boilerplate	Generate Elixir/Phoenix Boilerplate	weatherlight	12.712345	-7.3874326	story	7.0	84.0	1632799500	12.872592
28693575	I keep seeing small incremental spee	I keep seeing small incremental speed improvements and overall these changes amount to a compounded effect over time.  Yet we keep hearing that ruby is dead or rails is dead and the very fact that we have large companies like Shopify or Stripe working hard to make the language and tools faster is proof that this is not dead...	xutopia	12.701342	-6.980605	comment	7.0	55.0	1632923179	12.399954
28861433	I looked at using ESbuild and I use 	I looked at using ESbuild and I use Typescript. It was all looking good until reading the docs and it said ESbuild doesn't typecheck Typescript and to rely on your IDE to flag errors.Is that correct and how is that working for you practically if it is? The whole point for Typescript for me is to have a compiler typecheck my code and block errors at compile time. ESbuild not typechecking seemed like a major contradiction to using Typescript so I set up a Webpack build using the standard ts compiler.I've been out the loop of client side stuff a couple of years so to start was bit of a rabbit hole. Grunt/Gulp had gone and now Webpack seems common with a growing fanbase for ESbuild because of it's speed.	tiew9Vii	12.425962	-6.591888	comment	7.0	30.0	1634196073	-10.444526
28947928	Building the Brex API	Building the Brex API	hdubugras	12.686469	-7.4239564	story	7.0	105.0	1634837357	1.6166385
28966462	Are there some corners of the indust	Are there some corners of the industry where Prolog is beneficial? Or is this mostly an academic endeavour?	lrem	13.162316	-7.3091283	comment	7.0	25.0	1634974524	-12.494983
29003588	I'm going to be downvoted to hell fo	I'm going to be downvoted to hell for this... but the more I see the level of complexity and amount of engineering going into this, the more I miss Rails and how simple things are there, given most of us are just building CRUD apps anyways.	midrus	12.80758	-6.850426	comment	7.0	32.0	1635270362	12.336995
29013585	Agreed… this is super specific to ph	Agreed… this is super specific to php and tbh I’m surprised anyone is still using it in industry	aardvarkr	12.761875	-6.6288905	comment	7.0	25.0	1635344324	10.332945
29098282	From https://luau-lang.org/typecheck	From https://luau-lang.org/typecheck> Luau’s type system is structural by defaultI think that makes it the second (production-ready) language to have a primarily-structural type system, after TypeScript/Flow(/and Closure to some extent) for JS. I wonder if it will follow in their impressive footsteps or if it will tread new territory.One of the things that Flow gets right that TypeScript doesn't yet support is switching to nominal type-checking between class instances. In TypeScript you can assign an instance of one class to an instance of another as long as they have compatible fields. Compare:Flow: https://bit.ly/3jZx4rBTS: https://tsplay.dev/mZaL1NTypeScript doesn't have any understanding of prototypes or prototypal inheritance, which is a big gap considering that it's a fundamental asp	sizediterable	12.353033	-6.8707876	comment	7.0	37.0	1635962768	-10.289083
29261521	Here’s something to think about: You	Here’s something to think about: You and some buddies start a startup whose product is a complicated piece of medical software that uses Tensorflow’s inference but most of it is written in Go. Cool stuff, you’d never do that in PHP.You’re getting ready to launch, and you’re going to need a marketing site and a site with documentation and help articles for users. Do you write that site in Go?Hell no. You hire someone cheaper whose skillset isn’t systems programming or ML, and they spit out a templated site in a weekend that looks sleek and makes a good impression, and when you need more content you tell them and they turn it around in an hour, and you spend your time on the Go stuff.And that market, the market for Good Enough sites that front Really Good products and are fast to work with: 	Uehreka	12.769816	-6.636527	comment	7.0	28.0	1637204149	10.310941
29261577	I have used PHP for years. Like it. 	I have used PHP for years. Like it. Have accomplished some nice things with it. Think it's evolved nicely in recent years. Feel it's a great tool for particular problems. Will continue to use it. Will always be open to alternatives.Will never understand why some people find that so offensive and will tell you that you mustn't use it or imply that you are ignorant or stupid for using it.	brandon272	12.772198	-6.640922	comment	7.0	67.0	1637204741	10.348659
29261918	I don't really understand the reason	"I don't really understand the reasons for using PHP outside of that people are already familiar with it and like working with it or want to find jobs in that area.If someone is new to software development and in an area of the world where it's not mostly PHP shops, so bigger cities, I don't really understand the benefit.PHP is often used to do certain things or it may be faster for you to whip something up in Laravel but if you had someone who was a complete blank slate and could chose any language and any framework in a town that doesn't have PHP jobs...why? What's the reason then?I really think these articles come off really strange like they're trying to convince me as a ""fact"" but are really just nostalgia, like someone who goes off about how ""cars were built so much better back in the"	cupcake-unicorn	12.779203	-6.6383977	comment	7.0	59.0	1637208917	10.352541
29262210	Hmmm... Most points in this article 	"Hmmm... Most points in this article are shouting ""yeah we have those too!!"" but it didn't give any convincing arguments why I (or anybody who doesn't already know PHP) would like to learn and use PHP over other decent modern languages and ecosystems, which happen to have those points as well."	juxtapose	12.771597	-6.642076	comment	7.0	83.0	1637212883	10.340174
29304904	I love Django and have been using it	I love Django and have been using it for many many years. Lately, however, I’ve been finding it increasingly difficult not to be annoyed by some aspects of the developer experience. For example I’d choose React + Typescript over Django templates any time of the day.	creimers	12.768606	-6.44682	comment	7.0	49.0	1637576996	10.053346
12668959	I studied Prolog in college (3rd CS 	I studied Prolog in college (3rd CS year course, 2003).I concluded it didn't deliver on its promise.The promise was that, as in the article, you 'Say what you want, not how you want it done.'In practice, once you start writing non-trivial programs, you run into situations where they take ages to run, as Prolog does its search in the background.So, you have to start using all these languages features to control and optimize the search, such as: https://en.wikipedia.org/wiki/Cut_(logic_programming)And you end up spending a lot of time reasoning about the how that it said you didn't have to care about.I concluded that, as a result of performance issues, the core Prolog abstraction 'leaks' too frequently for it to be worthwhile. (https://en.wikipedia.org/wiki/Leaky_abstraction)Its a great prom	feral	13.141546	-7.2906594	comment	7.0	36.0	1475964804	-12.486862
12705963	It would be an outlier company indee	"It would be an outlier company indeed who held an 'all hands on deck' meeting and said, ""We're succeeding in spite of PHP everyone!""Only engineers care about programming languages. Seriously. That's it. No one else cares about them. I work in a large public university alongside a revolving door of student interns who are always 19. In 10+ years of work, I've still yet to meet the person who talked about their favourite website or app, but lamented that it was written in Php or JavaScript or Go or Java. It's only us (the HN'ers) who fret about this.Don't believe me? Imagine the look on everyone's faces at the tech publishing houses around 2009 when books about Objective-C sold a few hundred copies a year to doing tens of thousands per month when the iPhone rocked the world. This happened wi"	increment_i	12.716181	-6.6071434	comment	7.0	84.0	1476415785	10.299613
12718552	Elixir and Phoenix are stable and by	"Elixir and Phoenix are stable and by now they're a solid choice (more than enough warranted praise on HN), but I'm still skeptical about Elm from a ""platform"" perspective. From what I can tell, Elm apps are a single blob of JavaScript that either loads or doesn't (e.g. you can't read the Elm site without JavaScript enabled), while the JavaScript ecosystem is moving towards server-rendering, dead code elimination, and ""progressive web apps"" so to speak. PureScript for example has dead code elimination—you can make a <1kb PureScript ""Hello World"" app.I know the Elm team is capable of all of these—I just haven't heard of anything yet. While they're ""nice to have"" now, these features might become crucial and important.Another interesting thing about Elm is its progressive removal of features ("	sotojuan	12.97696	-7.660848	comment	7.0	38.0	1476625541	-12.764443
12983677	Flask!  It's Pythonic and good.  Onc	Flask!  It's Pythonic and good.  Once you've done a couple of Flask projects, you can spin up a new microservice in a couple of hours.  It's much lighter weight than Django, so it forces you to keep fewer moving parts in your head while hacking.http://flask.pocoo.org/Lately, I've been using Flask on the back-end, and React on the front-end.	Brainix	12.762564	-6.5234284	comment	7.0	22.0	1479434050	9.989251
13088092	Don't count on Ruby getting 10x fast	Don't count on Ruby getting 10x faster anytime soon.  The meta-object model and method-missing reliance of many of the libraries make performance optimizations of JITs a very limited enterprise.	kweinber	12.582568	-6.998628	comment	7.0	35.0	1480682359	12.351422
13124392	It's interesting to me that all of t	It's interesting to me that all of the initial reactions I've seen to this announcement have been around the introduction of async and object spread, which are available with babel, but the typescript specific features such as mapped types are completely ignored.I don't really have any particular meaning behind that observation, only that it tickled my funny bone a little bit.	zdragnar	12.377542	-6.7656946	comment	7.0	43.0	1481132447	-10.485098
13235337	Coming from the Clojure world, every	Coming from the Clojure world, every time I read about about Elixir, the similarity of the two langauges' values always surprise me: immutability, macros, dynamic and gradual typing, concurrency, and on.I've yet to touch Elixir (or Erlang, for that matter). Does anyone have experience using both? Thoughts? Has anyone crossed from one language to the other over any strong preference?	kbuchanan	12.635808	-7.4851236	comment	7.0	25.0	1482388329	12.937588
13253125	Compared to Rust, Go. The list of im	"Compared to Rust, Go. The list of improvement for a yearly Ruby version is rather small. Some will argue Rust and Go are relatively new, but there are actually LOTS of low level performance improvement done within a year time frame.Even if you compared to Python 3, the improvement is still rather small.I know there is always the argument about the lack of resources, and Rust is being backed by Mozilla while Go is being backed by Google. But what about Python?Exactly how much money is Mozilla spending on Rust, paying how many developers full time? 
Apple JS Core team is incredibly small, but they manage a B3 JIT compiler with 2 people.How much money is needed? Matz and Tenderlove both mention they need more resources. Surely we can fund rise? With lots of successful companies using Ruby on "	ksec	12.67063	-6.992321	comment	7.0	32.0	1482644553	12.358341
13323154	Elixir v1.4.0 released	Elixir v1.4.0 released	njade	12.692613	-7.4450994	story	7.0	229.0	1483572544	12.94362
13338848	Building a CQRS/ES web application i	Building a CQRS/ES web application in Elixir using Phoenix	tortilla	12.738796	-7.3347836	story	7.0	181.0	1483727543	12.795517
13341108	Secure Headers for PHP	Secure Headers for PHP	aidantwoods	12.7831745	-6.514012	story	7.0	57.0	1483743685	10.229285
13364173	Counter argument: http://perl11.org/	Counter argument: http://perl11.org/blog/seed.htmlNow even the kernel devs are drinking the coolaid, verbatim copying wrong claims from the SipHash authors.	rurban	12.336995	-6.976829	comment	7.0	51.0	1484048842	13.209044
13367087	I haven't seen Elixir mentioned here	I haven't seen Elixir mentioned here in awhile. As it's the next language I'm interested in learning -- how's it coming along? How are people feeling about it after having more time with it?	needz	12.685533	-7.4688754	comment	7.0	36.0	1484071155	12.925648
13396145	Ask HN: Become a PHP expert	Ask HN: Become a PHP expert	RUG3Y	12.8061495	-6.6695833	story	7.0	6.0	1484355524	8.070503
13434159	So, after a poor evolution strategy 	So, after a poor evolution strategy that lead the Python world to be split in two and forces maintainers to offer two versions for the same library, and upstream maintainers to offer support for two different python versions, the same is happening for Django!I speculate that the latest Django 1.x will remain used - and possibly the most used - for a lot, lot of time.	alanfranzoni	12.721109	-6.5960593	comment	7.0	100.0	1484815374	10.077703
13475050	> Your Erlang program should just ru	> Your Erlang program should just run N times faster on an N core processorBut only if your program is embarrassingly parallel with at least N times available parallelism in the first place! If you have one of those it's already trivial to write a version that runs N times faster on N cores in C, Java, multi-process Python, whatever.If your program has sequential or less parallel phases or needs to communicate then you are subject to Amdahl's law like you always were.Armstrong has that claim in the Erlang book and I was gobsmacked to see it written down with no caveat or mention of the limits from Amdahl's law whatsoever. I was sure it was a joke and it would be followed by 'ha ha ha of course not - nobody knows how to achieve that despite decades of intensive research', but no it's a seri	chrisseaton	12.42313	-7.4902806	comment	7.0	72.0	1485289009	12.893715
13488995	Ask HN: Do you prefer Laravel or Rub	Ask HN: Do you prefer Laravel or Ruby on Rails for your projects? Why?	bgdkbtv	12.767669	-6.7420573	story	7.0	18.0	1485408516	10.423756
13497815	This is how myths are created and pe	"This is how myths are created and perpetuated.This claims from a study of a particular model of Ericsson's ATM switch whose software was written in Erlang.A can tell you for sure that:
* Ericsson has other switches and other telecom equipment whose software is written in C++
* other companies (Nokia, Cisco, Alcatel etc.) also built similar complex telecom equipment whose software was in C++I'm going to bet that at least one of those devices was more reliable than that particular switch, because it's not the language that creates reliability but people writing and testing the software.Some languages make it easier than others but attributing some magic qualities from extrapolating a single case study of a telecom equipment is just silly.Telecom equipment is reliable because it has to be. If"	kjksf	12.471776	-7.5190196	comment	7.0	36.0	1485492950	12.909831
13507497	Ask HN: What's not great about Elixi	Ask HN: What's not great about Elixir?	verletx64	12.673893	-7.467493	story	7.0	16.0	1485624038	12.93887
13584079	>  Soon Python and Ruby won't have a	>  Soon Python and Ruby won't have any advantages left in writing beautiful, clear, correct, bug-free, and easy to read codeCome on, it's not like they've added garbage collection.	justin66	12.503948	-7.044239	comment	7.0	84.0	1486415810	12.369921
27581257	Rhizome – A pedagogical example of a	Rhizome – A pedagogical example of a JIT for Ruby, implemented in Ruby	thunderbong	12.5843725	-7.044232	story	7.0	300.0	1624295864	12.376698
27605215	New Elixir 1.12 – The developer’s po	New Elixir 1.12 – The developer’s point of view	clessg	12.680287	-7.454452	story	7.0	197.0	1624459973	12.932198
27607337	The core thing is that I haven't bee	The core thing is that I haven't been a fan of the services layer described here. I'm more of the opinion that if you're going to use Django, use it all the way. Fat models and all that.But, when I read more thoroughly, the guide makes a really compelling case. I've generally scoffed at the idea that you shouldn't couple your business logic to Django in case you want to swap out Django for something else. It's hard to imagine a realistic situation where that doesn't lead to a total rewrite anyway. But putting business logic in functions for readability and testability makes sense to me.Other disagreements flow from that same one. Not testing your models much being an obvious one.Not a fan of Hungarian notation. I've had a better experience with type hinting than the author.I don't share th	travisjungroth	12.853479	-6.494976	comment	7.0	30.0	1624469564	10.086897
27683613	We use elixir 24/7 on all projects. 	We use elixir 24/7 on all projects. All the new programmers that ever worked with us never knew Elixir in the first place.And all of them picked it up in a couple of weeks to a level where they could start making changes to code.I think we are overestimating the amount of time it takes to learn a new language.The hardest thing to grok with FP is immutable data.Once you get past that, you're rolling.But the speed and concurrency is no laughing matter. Miles and miles and miles ahead of ruby, python, etc in that matter.Task.start(...)Spin off a background process from a web request where you don't care to get back something.Basically eliminate Redis or caching.Just need Postgresql/Mysql.If you're wild eyed you can use Mnesia without the databases.Run jobs across a cluster sanely with a good 	eric4smith	12.690705	-7.3471556	comment	7.0	107.0	1625013544	12.840025
27756506	Is typescript really that great? Eve	Is typescript really that great? Every implementation I have seen has1 - Work-arounds for interoperability with non typescript / legacy third party dependencies. (issue: ugly, non consistent code)2 - Turn off strict type checking due to third party component compatibility. (issue: isn't the purpose of typescript type checking?)3 - Is type checking really needed for most applications? (assuming some flavor of CRUD with the occasional special sauce). (issue: seems a bit academic unless your working on a webapp for the mars rover)This is coming from someone who programmed in java, .net, strongly typed languages for years and then feels like javascript is being held back with typescript. I love programming in vanilla javascript using frameworks (in this order) vuejs, reactjs, and charge extra 	dnndev	12.357963	-6.8210573	comment	7.0	30.0	1625622614	-10.43481
27782791	What I learned from Erlang about res	What I learned from Erlang about resiliency in systems design (2019)	srijan4	12.504545	-7.5007534	story	7.0	142.0	1625832111	12.8956375
27903775	The language itself is very interest	The language itself is very interesting. I've dabbled a few times and really like the clean ruby-esque syntax.What puts me off delving further is the lack of support in various editors / IDEs / Treesitter etc. I think the core development team should really devote some resources to this, as I'm sure I'm not the only one deterred by this dearth of tooling.	Normille	12.569098	-7.0261884	comment	7.0	26.0	1626856028	12.369015
12006806	Genuinely curious about it: what are	Genuinely curious about it: what are the reasons to start a new project on PHP?	rbanffy	12.775423	-6.635906	comment	7.0	23.0	1467265288	10.362882
12135944	Ruby is the first language I really 	"Ruby is the first language I really like. The core concept of the language is small, just not easy to get, but the change on how to programming is significant. 
Sadly, Ruby is not the language for the multi-core world, and many advantages of using it is disappearing.
Although Ruby is changing, 2.3, 2.4, maybe 3.0, but what's the difference?"	windor	12.603731	-7.0355883	comment	7.0	26.0	1469097544	12.376951
12151863	Why Angular 2 Switched to TypeScript	Why Angular 2 Switched to TypeScript	Doolwind	12.479717	-6.7007637	story	7.0	69.0	1469325544	-10.456776
12157293	Lisp Flavoured Erlang	Lisp Flavoured Erlang	indatawetrust	12.569378	-7.520945	story	7.0	129.0	1469436194	-10.336485
12158368	"THIS.
After learning a few languages"	"THIS.
After learning a few languages and paradigms, I find that I often have a 2 week ramp up for any given programming language.If you already know Java and Javascript, you'll get Scala / Kotlin in no time.
If you're experienced in Python and Django, RoR is a few weeks away.
If you're experienced in C++ and Python, it won't take long until you're good to Go.I get that companies want someone who's productive from Day 1, but they're missing out on a lot of great candidates that might only be productive from Day 15, but they'll be a lot more productive over time."	dkopi	12.613473	-6.9114	comment	7.0	32.0	1469452102	12.2873955
12205075	I'm still stuck with Django 1.4 for 	I'm still stuck with Django 1.4 for one of my projects, it's such a big hurdle to upgrade it. I wonder if it's worth to just straight up rewrite it in 1.10.	hrayr	12.828557	-6.5529094	comment	7.0	27.0	1470078690	10.0891
12219876	I have faced something similar. Thou	I have faced something similar. Though I have 14 years experience with technologies that are suppose to be in demand (Ruby On Rails, NodeJS) I have had a very difficult time finding work this year. It's certainly more difficult now than in 2012 or 2013.	susan_hall	12.733195	-6.835965	comment	7.0	31.0	1470245973	12.314369
12319173	"""The very existence of PHP is a cont"	"""The very existence of PHP is a contradiction""Uhm no for me coming from a C background I love PHP since its basically C with a lot of the boring/repetitive stuff abstracted awayGood PHP code exists, it only got a bad name due to ""web developers"" with no formal programming education stumbling across PHP and going ""aha this can generate my html etc"" and then proceeding to make a pile of mistakes.PHP is a hammer, blaming the hammer is silly when the person using it might now know how to swing it safely."	throwaway1974	12.766485	-6.639293	comment	7.0	40.0	1471604357	10.330979
12328081	How to make an efficient payment sys	How to make an efficient payment system in Erlang	tdurden	12.584925	-7.5138364	story	7.0	168.0	1471723126	12.914807
12346414	AFLFast vs. Erlang	AFLFast vs. Erlang	sokoowdevops	12.542381	-7.5043974	story	7.0	81.0	1471978351	12.911114
18942450	It's very nice to see all of this co	It's very nice to see all of this consolidation going on in the Typescript ecosystem. For example Babel 7 shipping with direct Typescript support back in August, https://blogs.msdn.microsoft.com/typescript/2018/08/27/types...I am a Typescript convert myself and would suggest any daily JS developer give it an honest try.	_robbywashere	12.391403	-6.683181	comment	7.0	87.0	1547841615	-10.457673
18943173	Typescript is amazing!I spent the la	Typescript is amazing!I spent the last 90 days porting about 350k lines of code to Typescript plus implementing another 400k.https://getpolarized.io/It's basically a document and annotation manager for PDF and notes.  Kind of an Open Source Mendeley/Evernote/Github if you will.This code base is changing often and I really hit a dead in in terms of JS scalability.I was just refactoring too much, breaking things, etc.Now I can just rely on the compiler when I break things.If I want to change a function type in TS it's no problem.In JS it's a nightmare.	burtonator	12.386705	-6.7689986	comment	7.0	32.0	1547846135	-10.429328
18990501	Do people typically prefer TypeScrip	Do people typically prefer TypeScript over ES6?	bouncing	12.366383	-6.5535383	comment	7.0	36.0	1548349508	-10.425966
18994427	Nothing to see here,  peaked my inte	Nothing to see here,  peaked my interest since “who would pay for a compiler??” In the modern age of open source.Post has a missleading title, and is just rambles about ruby and compilers.	iamNumber4	12.572644	-7.074723	comment	7.0	33.0	1548376205	12.380081
19102367	I got to 14 (now 15!) in javascript 	"I got to 14 (now 15!) in javascript so far:    async function* foo() {
        return yield delete void await null in this instanceof typeof new class extends async function () {} {}
    }

(not sure whether the code needs to successfully run? But it at least parses)What's really fun is seeing how babel transpiled the above function:https://babeljs.io/repl/#?babili=false&browsers=&build=&buil...EDIT: here's an explanation <a href=""https:&#"	bluepnume	12.347846	-6.503154	comment	7.0	31.0	1549505932	-10.380865
19111940	Any idea why PHP has such a bad repu	Any idea why PHP has such a bad reputation compared to other interpreted and dynamically-typed languages such as Python?	ggregoire	12.699439	-6.6660686	comment	7.0	38.0	1549605935	10.287926
19217289	When I wrote a Sudoku solver I was d	When I wrote a Sudoku solver I was disappointed to find that backtracking worked maybe too well; that is, I coded in the minimum constraints to follow the rules of the game and then added backtracking and voila, it found solutions quickly enough.Why was I disappointed?  Because initially I wanted to write a solver that inferred more, that used the inferences that I made when solving Sudoku.Sadly once the solver worked, I kinda lost interest.I hate backtracking myself and it should only be necessary at a certain Sudoku hardness level - every puzzle below that level of hardness should be solvable without backtracking.	Isamu	13.450108	-7.4098997	comment	7.0	24.0	1550761445	15.074336
19346637	I really wish that Erlang/Elixir wer	"I really wish that Erlang/Elixir were strongly typed. I've blown my foot off with the ""dynamic language gets us going fast and now let's scale"" footgun too many times to not be afraid. Obviously big important systems are built in Erlang, but I don't think I've got the guts to do it."	biesnecker	12.516915	-7.4920177	comment	7.0	58.0	1552145999	12.930254
19347290	I'm a Ruby guy and I'd love to feel 	I'm a Ruby guy and I'd love to feel what you're feeling. Where should I start / what should I check out? Bonus points for concept walkthroughs and materials designed to bring Ruby folks up to speed, specifically concepts that need to be temporarily forgotten or unlearned in order not to get sad.I like being a polyglot, but my schedule is tight enough that I need to hit the ground running or else I get pulled back to reality pretty quickly. There's a lot of posts and videos out there on Elixir, so curators are incredibly awesome in my world.	peteforde	12.686277	-7.026033	comment	7.0	44.0	1552152853	12.415535
19393483	Here are some benchmarks on an 8-yea	"Here are some benchmarks on an 8-year-old, 4-core i7 running OSX Sierra. Parsing a 115Mb log file for lines containing a 15-character word (regex: \b\w{15}\b) we have:  LANG / TIME* / RAM

  JS (Node 11.11) / 8.4s / 100Mb
  Ruby 2.6 / 19.1s / 14.8Mb
  PHP 7.3 / 4.4s / 5.6Mb
  Python 3.7 / 24.7s / 4.2Mb
  Perl 5.26 / 14.0s / 1.0Mb

*These figures are for runtime, ie. with startup time deducted. Ruby's startup time (0.55s) is much longer than the other languages (Python:0.06s, Perl:0.02s, PHP:0.14s).Ruby's memory usage is 3.5 times that of Python for only a 30% speed gain. Perl uses 1/15 of the RAM used by Ruby and is 35% faster but it could be argued that Perl 5's lack of built-in OO accounts for some of this ..... until you look at PHP which has built-in OOP and uses 2/5 of the RAM used by"	cutler	12.354054	-6.955711	comment	7.0	36.0	1552596182	12.48772
19417079	Cloud Management with Prolog	Cloud Management with Prolog	zdw	13.1525955	-7.2909436	story	7.0	97.0	1552860975	-12.49345
19428706	I work on a Rails system.  It's fine	"I work on a Rails system.  It's fine.  Just like everything else is fine.  I have problems, but I have problems with everything else too (sometimes different problems, but not always...).I think my main complaint about Rails is that it's pretty heavy weight.  Lately we did a Sinatra app because we didn't really need anything that rails was giving us.  Fairly quickly I realised that I didn't need anything that Sinatra was giving us either.  Rack was fine.I think especially after your app gets to be a certain size, you are either writing your own framework, or fighting with the framework you chose at the beginning.  It's just the nature of the beast.  From there it's more of a training issue than anything else.  You can hire ""Rails developers"" (or whatever developers), but you can't hire peo"	mikekchar	12.753206	-6.933453	comment	7.0	49.0	1552979301	12.34234
19456213	CVE-2019-5418 – File Content Disclos	CVE-2019-5418 – File Content Disclosure on Rails	kryptiskt	12.761897	-6.9174666	story	7.0	133.0	1553195740	-8.682041
19536214	I think PHP had a couple of obvious 	"I think PHP had a couple of obvious advantages - it almost had a ""first mover"" advantage in that it happened to be installed alongside CGI-BIN on shared webhosts way back in the way - plus Drupal and WordPress being PHP projects.But to me, one of the most significant advantages PHP has is that its documentation is terrific. PHP.net is simple, clear about parameters and return values (as clear as PHP lets it be anyways) and best of all has a terrific comments / examples section for each function.Better documented is better."	yllus	12.74024	-6.628371	comment	7.0	52.0	1554047537	10.295065
19538297	My feelings about PHP are stuck in w	My feelings about PHP are stuck in what I remember from 2004. If I’m starting a new backend web project in 2019, should I be considering PHP over Ruby, Python, or TypeScript? Why or why not? I’m curious to hear from anyone who’s used it professionally in the last couple years.	sickcodebruh	12.7613735	-6.647839	comment	7.0	33.0	1554065505	10.331466
19544733	I feel the same way. Does any one ha	I feel the same way. Does any one have a good overview on how the community actually separates functionality into “apps”?I have been looking at a rails like framework in python called Masonite. Does anyone in the python/Django community think this will gain traction?	digitaltrees	12.825981	-6.581298	comment	7.0	33.0	1554134520	-12.711441
19544789	What I find most curious about Djang	"What I find most curious about Django/Python is that about 30% of the new installs are for legacy Python/Django (2.7/1.11):  $ pypinfo --start-date 2019-01-01 --end-date 2019-03-31 -- 
  percent --markdown django pyversion
  Served from cache: False
  Data processed: 160.22 GiB
  Data billed: 160.22 GiB
  Estimated cost: $0.79

  | python_version | percent | download_count |
  | -------------- | ------: | -------------: |
  | 3.6            |  39.61% |      3,277,927 |
  | 2.7            |  29.59% |      2,448,652 |
  | 3.7            |  17.53% |      1,450,949 |
  | 3.5            |  10.37% |        858,325 |
  | 3.4            |   2.76% |        228,150 |
  | 3.8            |   0.07% |          5,428 |
  | 2.6            |   0.04% |          3,686 |
  | 3.3            |   0.03% |        "	scardine	12.783622	-6.578916	comment	7.0	35.0	1554134767	10.088657
19594193	Perl6: The World's Worst ML?	Perl6: The World's Worst ML?	hyperpallium	12.33558	-7.0381885	story	7.0	100.0	1554600640	11.855077
19718869	For my Django projects the developme	For my Django projects the development server is werkzeug [1] and anywhere a break point is needed I'll add 1/0 in the code then hit refresh in the browser which pulls up an interactive debugger [2].[1] https://django-extensions.readthedocs.io/en/latest/runserver...[2] https://werkzeug.palletsprojects.com/en/0.15.x/debug/#using-...	scwoodal	12.835247	-6.5263214	comment	7.0	26.0	1555940850	10.106008
19799438	Rails 6: B-Sides and Rarities	Rails 6: B-Sides and Rarities	progapandist	12.778701	-6.9055204	story	7.0	192.0	1556731448	12.358003
19804848	Any Reason why Rails still does not 	Any Reason why Rails still does not include an any decent Auth by default?Edit: I remembering keep asking this question but obviously no answer was satisfactory enough that stick to my brain.	ksec	12.819281	-6.911199	comment	7.0	25.0	1556772741	12.339188
19819582	Is TypeScript the only language your	Is TypeScript the only language your company needs?	willsaar	12.360658	-6.7417636	story	7.0	10.0	1556899412	-10.396234
19918212	The thing that matters is language c	The thing that matters is language consistency... A language with a pure clean vision of itself in which the programmer can guess at syntax because they understand the general syntax principles to which the language adheres. Nothing here says PHP has been fixed in this regard.Python made the big leap and fixed some huge problems when it went to python 3 - yes it's migration approach was a total fail, but it further cleaned up what was and already clean and consistent language.The only thing that would have really interested me in this post would have been to hear that PHP had been cleaned up into a consistent syntax, but that's not what this article says.	hguhghuff	12.64387	-6.688307	comment	7.0	46.0	1557918433	10.319277
15767443	> The TS API in my case had somethin	> The TS API in my case had something like 90% less errorsThat sounds like a red flag to me. I hardly have any type related bugs in my pure JS server code. Must be a poor developer in the team. Too easy to blame JS for that.	grsblk	12.351557	-6.7501407	comment	7.0	21.0	1511466966	-10.436788
15832439	Wow, I remember being curious about 	"Wow, I remember being curious about Django a year ago.
Now it's at 2.0 ! It already felt overwhelming then, but now even more so.I can't wait to check it out more.On a sidenote, I feel bad for the developers who have to migrate to Django 2.0.
Hopefully it's not too much work, I know a codebase review and full update can't be fun with the business managers and customers at your throat."	LeoJiWoo	12.815048	-6.5614805	comment	7.0	31.0	1512230694	10.087937
15988596	Using Laravel and WordPress to build	Using Laravel and WordPress to build a really fast and flexible API	adampatterson	12.811856	-6.5950284	story	7.0	4.0	1513959983	10.296081
16021965	Crystal 0.24.1 released	Crystal 0.24.1 released	wulfklaue	12.646983	-7.2551556	story	7.0	87.0	1514469160	10.449896
16160755	I really want to commit to TypeScrip	I really want to commit to TypeScript for React/Redux apps but I'm gun shy. I don't want to commit to all the added effort TypeScript brings because I'm not sure if apps of my size warrant it. I'm afraid that I will end up with an over-engineered solution for my various apps of 10-100 components.	Waterluvian	12.573932	-6.585259	comment	7.0	33.0	1516127854	-10.439214
16161420	I've been a heavy user of Flow for -	I've been a heavy user of Flow for - two years now? I also occasionally use TypeScript. I don't contribute to the code (in the Flow case, I don't speak OCaml, I contributed a bit to the type library and the online docs; in the case of TS, I don't use it enough), but I write a bug report each time I find an issue.I've been looking at the issues list very often, mostly out of curiosity to see what the problems are that people have (both Flow and TS) and to see which project is better at solving problems.TypeScript seems to win hands down. Their ratio of closed tickets to open tickets is far better than that of Flow:- TypeScript: 2,515 open, 12,716 closed  -- https://github.com/Microsoft/TypeScript/issues- Flow: 1,830 open, 2,467 closed  -- https://github.com/facebook/flow/issuesI have to ass	Karnickel	12.454493	-6.7194667	comment	7.0	28.0	1516130958	-10.480336
16337731	So I am trying to move away from Nod	So I am trying to move away from NodeJs for my next project and I can't decide between Elixir and Go. Can't decide what to choose, any idea if there is any advantage for a noob to learn one or the other?	todd_wanna_code	12.661782	-7.3433976	comment	7.0	35.0	1518147636	12.904984
16341813	Skylight, a Ruby profiler, free for 	Skylight, a Ruby profiler, free for open source applications	chancancode	12.646191	-7.003417	story	7.0	120.0	1518195601	12.369895
16628924	For the most part I feel that for 99	For the most part I feel that for 99% of problems types just “get in my way”.It feels like I already know what is going to go in where, and having to type it is just a waste of time.That said, when I have to work with APIs that can not guarantee their data integrity throwing in a quick @flow annotation of top of the file, and taking the time to write out what is optional has proven very valuable to make sure my functions, and subsequent code is not going to throw.Another reason I like flow more is because I don’t need to convonce my team to use it, I can just use it myself, and then delete it after I am done writing my code.	Zyst	12.430871	-6.6973596	comment	7.0	62.0	1521556681	-10.499091
16804667	Another interesting way to think abo	"Another interesting way to think about it is as ""match"". That is try to match the stuff on the right with the stuff on the left.Take Erlang for example:    1> X = 1.
    1
    2> X = 2.
    ** exception error: no match of right hand side value 2

Notice variables are immutable (not just values themselves). Once X becomes 1, it can only match with 1 after that. You might think this is silly or annoying, why not just allow reassignment and instead have to sprinkle X1, X2 everywhere. But it turns out is can be nice because it makes state updates very explicit. In complicated applications that helps understand what is happening. And it behaves like you'd expect in math, in the sense that X = X + 1 doesn't make sense here either:    1> X = 1.
    1
    2> X = X + 1.
    ** exception error: no m"	rdtsc	12.3348	-7.4831557	comment	7.0	47.0	1523390060	12.905487
16825003	Choosing Elixir's Phoenix to Power a	Choosing Elixir's Phoenix to Power a Real-Time Web UI	JONBRWN	12.834736	-7.0680327	story	7.0	104.0	1523567707	12.718957
17107527	A relatively simple Datalog engine	A relatively simple Datalog engine	dmit	13.163275	-6.982301	story	7.0	207.0	1526731294	-12.37574
17121691	I've shared this with anyone who wil	I've shared this with anyone who will let me divert the conversation to Prolog.   At work we have the Haskell folks, the Lispers who move everything towards Lisp, and I'm the one who moves every conversion towards Prolog, then I send the link to this. :-D	segmondy	13.0682955	-7.3293386	comment	7.0	37.0	1526935520	-12.469187
17121923	I've never met anyone who uses Magen	I've never met anyone who uses Magento that actually likes it.	mychael	12.783938	-6.5736814	comment	7.0	53.0	1526937622	10.3283
17143598	Awk has it's uses.  If you use the c	Awk has it's uses.  If you use the command line you'll probably use Awk occasionally.I don't get the Perl hate.  Perl's unpopularity may have something to do with some of the languages design choices.  I think what really killed it was Perl coders.  Some of the worst code I've seen happened to be written in Perl.  If you follow clean code principles Perl is fine.  Mojolicious is an awesome framework.  I like it a lot.Today I code Python and C.  I used to code Ruby and before that Perl.  I loved Ruby's syntax but Ruby seems to be waning.  I'm looking forward to coding in Go.  I'll be coding Javascript but I'm not looking forward to it.Use the tool that fits the job.  I have no loyalties to any programming language.	lasermike026	12.370726	-7.0187025	comment	7.0	31.0	1527167511	13.019498
17281441	I'm often curious as to what people 	"I'm often curious as to what people are doing that makes them really think they need to venture outside their chosen scripting language. I use Ruby thinking I'll 'drop to Rust/Crystal' whenever I need to do something ""serious"", but that need never seems to manifest. Whatever I code in Ruby seems to just do the job and I can solve perf issues with asynchronous constructs like a jobs server, or something like caching.At this point I'm really starting to wonder if Ruby really is the One True Language and everyone's going to be using it in 100 years. Like how PG thought Arc would be the hundred-year language.Does static typing really offer that much more over dynamic? I'm not at all convinced that it does, when you get right down to it. Once Ruby gets a built-in typing system, we'll get to ans"	vinceguidry	12.491938	-7.1110306	comment	7.0	62.0	1528686246	12.398104
17288493	Web Prolog and the Programmable Prol	Web Prolog and the Programmable Prolog Web [pdf]	triska	13.138013	-7.2887483	story	7.0	125.0	1528750455	-12.485773
17355776	If I was building a startup today I 	If I was building a startup today I would choose Rails for the MVP without a doubt. So much time wasted with the modern JS ecosystem or even other mature frameworks like Django. I have almost 15 years of experience building web apps professionally with the majority of that being spent with Django.There is no tech stack in the world that will get you shipped and proving your business faster than RoR.	whalesalad	12.735852	-6.69493	comment	7.0	52.0	1529505450	-5.8506207
17472030	Whee! My first Show HN. I've only be	Whee! My first Show HN. I've only been here, like, seven years and all.But, yeah, I've been tooling away on TaskBotJS in my metaphorical garage for a while. I've found Kue and Bull really frustrating to use (no shade intended; they feel like they made a lot more sense in a pre-ES6 universe?) and `node-resque`, while scratching a little more of that itch, just made me miss the comfortable guardrails of Ruby offline job queues. So I made one.As my day job is devops and devops accessories, making it easy to run and administer TaskBotJS was a big priority for me and I've tried to get the best of both worlds: mostly turn-key to run in simpler cases but less prescriptive and more pluggable at scale. TaskBotJS is pretty extensible and supports job middleware and event listeners; I have a Sentry p	eropple	12.699618	-6.7351704	comment	7.0	28.0	1530889888	12.368107
17600763	Learning ELM really helped me learn 	Learning ELM really helped me learn Haskell which is something I'm continuing to do, but Elm helped a lot. So I can see why a Haskell shop would want to use Elm for their frontend work. This makes total sense.That said, my initial enthusiasm for using Elm, aside from a gateway-drug to Haskell, has waned. I just do not have enough confidence in adopting Elm for our internal project nor to recommend it to other companies.The last release of Elm was 1 year and 8 months ago. The new release is purported to break many things. However, this new release is unknown, it's really unknown when it's going to be released and aside from a few insiders and contributors no one else seem to know what to expect.Elm applies some interesting principles (type safety, purity, etc.) that helps to reason about yo	salimmadjd	13.003722	-7.688154	comment	7.0	48.0	1532438800	-12.758679
17646206	How well does Typescript play with e	How well does Typescript play with existing node packages? Last I checked you need to do some work extra work (typings?) to get it working. That's the biggest reason I've not yet switched over to typescript.	isuckatcoding	12.387108	-6.6567507	comment	7.0	23.0	1532971483	-10.413966
17646400	We're working on converting EnvKey’s	We're working on converting EnvKey’s[1] babel/ES6 codebase to TypeScript. It has been a true pleasure so far and has already brought gains in safety and productivity. I've never worked with a type system that is so intuitive and so rarely violates the principle of least surprise. It's amazingly easy to pick up, and also easy to gradually introduce it to existing js code in an iterative fashion. Color me impressed!A few questions for TS veterans:- With babel, we used the module-resolver plugin to set a custom root for absolute imports. In TS, it seems relative imports (import x from '../../../i-hate-life') are the norm, which turns ugly fast. How are folks dealing with this? Or aren’t they?- Our codebase uses Ramda heavily for FP, and it can be hard to get TS to play nicely sometimes. Any t	danenania	12.389054	-6.654276	comment	7.0	32.0	1532972763	-10.443683
17681213	Deploying Elixir	Deploying Elixir	luk3thomas	12.690662	-7.4470115	story	7.0	67.0	1533313747	12.934567
21090933	Application Layering – A Pattern for	Application Layering – A Pattern for Extensible Elixir Application Design	aaronrenner	12.67469	-7.436908	story	7.0	193.0	1569585952	12.944255
21097328	Hey! New dev honestly trying to lear	Hey! New dev honestly trying to learn why PHP matters at all in 2019. Is PHP something I should stop learning JS for? In all my (very limited) experience, PHP does not solve any problem JavaScript can't, and JS is also far more in demand.	xnyan	12.672115	-6.5257936	comment	7.0	21.0	1569628520	10.323244
21104258	PHP isn't popular because it's easy,	PHP isn't popular because it's easy, it's popular because for a long while it was the only viable language for developing web applications.	biggestdecision	12.753374	-6.641733	comment	7.0	71.0	1569719055	10.321548
21111662	WhatsApp used to use Erlang, not any	WhatsApp used to use Erlang, not anymore. Facebook rewrote it completely in C++.https://www.quora.com/When-did-Facebook-switch-away-from-usi...	aloknnikhil	12.669107	-7.396817	comment	7.0	40.0	1569815830	12.85348
21111996	I have never programmed Erlang but i	"I have never programmed Erlang but it feels like it is the currently only language that is some kind of secret weapon. It has similar aura than Lisp had before that with Erlang you can do stuff beyond ""normal"" languages."	atupis	12.556368	-7.517905	comment	7.0	65.0	1569821146	-5.308719
21113034	We developed Online Charging System 	We developed Online Charging System in Erlang that served couple million subscribers for close to three years. I found the whole experience fairly terrible.Erlang is nice enough language and I don't mind the syntax but it's also kinda cumbersome and verbose at times. For example, adding `true -> ok` to every if statement gets old fast. Similarly, Erlang/OPT is a nice platform but some parts are fairly bad. Looking at you `inets/httpc`.But the really big problem was the whole ecosystem. Build process was needlessly complicated. Surprisingly enough multicore support was not great. Performance was not that great. It seemed like a lot of libraries were abandoned after 2013. I could go on.We ended up rewriting the whole thing in Java and, so far, it worked out great. And after Java 8, Java the 	ihuk	12.557437	-7.492163	comment	7.0	43.0	1569833891	12.899443
21138960	Having worked at a few of the top on	Having worked at a few of the top ones, many of them are now investing huge $$$ to rearchitect their tech platform to Java and services. I understand that Ruby allowed them to grow fast, but I am wondering if starting with Java to begin with would have allowed them to avoid massive investment to address tech debt at the expense of growth and profitability at a late stage.	dmode	12.503799	-6.9895105	comment	7.0	24.0	1570038243	12.330227
21227530	Perl5 -> Perl6 has been highly conte	Perl5 -> Perl6 has been highly contentious.Perl6 is basically a different language much to the chagrin of many Perl users. A lot of Perl users are entrenched in Perl5.FWIW: I'm unclear why people continue to use Perl at all, I moved on in 2011.	bifrost	12.344423	-7.054463	comment	7.0	80.0	1570821607	13.186129
21230665	Step 1: Step away from Ruby.I loove 	Step 1: Step away from Ruby.I loove ruby, it's my first choice for scripting wherever performance doesn't matter. No way around the fact that it very slow though.	jjav	12.584148	-6.9990163	comment	7.0	50.0	1570854246	12.373072
21252096	No love for Ruby again, the folklore	No love for Ruby again, the folklore of Ruby hatred within Google and Amazon is quite real.	ksec	12.658163	-7.023059	comment	7.0	45.0	1571082689	12.372845
21288190	Crystal's New Installation Page Is J	Crystal's New Installation Page Is Just Beautiful	sdogruyol	12.639488	-7.2743225	story	7.0	13.0	1571366259	10.479945
21310577	Considering that Elm seems to be by 	Considering that Elm seems to be by far the most stable, usable and used alternative, just dismissing it for the lack of typeclasses seems a bit short sighted to me. Is this a case of avoiding success at all costs? :)	zoul	12.9714365	-7.679984	comment	7.0	24.0	1571651444	-12.752976
21380077	Adopting Erlang	Adopting Erlang	ProfDreamer	12.574358	-7.5170403	story	7.0	366.0	1572287836	12.916274
21431791	Zotonic: An Erlang Web Framework	Zotonic: An Erlang Web Framework	brudgers	12.561986	-7.5012016	story	7.0	115.0	1572749522	-9.462204
21489877	Scientist: A Ruby library for carefu	Scientist: A Ruby library for carefully refactoring critical paths	kburman	12.575584	-7.0645556	story	7.0	178.0	1573278562	12.324828
21560202	The Actor Model has been used in man	The Actor Model has been used in many important large applications [Bonér and Reisz 2017, Cesarini 2019]. In order to implement next generation Reusable Scalable Intelligent Systems [Hewitt 2019], the following extensions to Erlang are needed:* Automatically reclamation of storage of an unreachable future [Baker and Hewitt 1977] (e.g. process in Erlang). For example, an Erlang process can be orphaned if its Process Identifier becomes inaccessible.* Language support for holes in the region of mutual exclusion of an Actor implementation.  For example, in Erlang it is necessary for application programmers to explicitly code a message handler for each re-entry into the region of mutual exclusion potentially enabling cyberattacks from outside the process.* Automatic cancellation of requests tha	ProfHewitt	12.381198	-7.525697	comment	7.0	44.0	1574026698	12.861813
21682107	This looks neat. Does anyone have ex	This looks neat. Does anyone have experience with using type hints and mypy with Django? Any gotchas?	Pandabob	12.752392	-6.5599413	comment	7.0	24.0	1575293395	10.109327
39084491	I've been writing Ruby for about 16 	"I've been writing Ruby for about 16 years, and I find that eminently readable.You're apply state_machine to the attribute state, and giving it an initial value of :parked. Then there's a block that ostensibly encapsulates state transitions following (hence the do).Ruby can be written extremely tersely, and that can be difficult for non-Rubyists to read. This might help:    state_machine(:state, {:initial => :parked}) do
        # transitions here
    end

What I don't understand is why I'd want use this over aasm (https://github.com/aasm/aasm)"	aaronbrethorst	12.428582	-6.9638515	comment	7.0	42.0	1705882480	12.288681
39098803	"The end of ""Useless Ruby sugar"": On "	"The end of ""Useless Ruby sugar"": On intuitions and evolutions"	todsacerdoti	12.555419	-7.0722985	story	7.0	133.0	1705976882	12.355276
39173088	Better than Python?15 years ago I wo	"Better than Python?15 years ago I would have agreed. Today, Python is a ""gateway"" to programming that is also the real thing.It's like one of those old languages designed for beginners to learn coding... and then you can continue to use the same language for your entire professional career as a software engineer, to build just about any production-ready application.Ruby is a beautiful language, but unless you are going to be working with Rails, it's not a very practical language to build something in. And I don't think telling a beginner ""just learn Ruby for now, but once you're actually ready to write your first useful program, you're probably going to have to learn another language"" is very motivating."	p-e-w	12.489446	-7.005715	comment	7.0	48.0	1706507179	12.378036
39172318	Respectfully mostly disagree. Ruby i	Respectfully mostly disagree. Ruby is full of sharp knives. Other languages have dull knives.Writing code without thinking will cut you either way.Things like method missing are exactly the right solution for a certain set of problems. If used thoughtfully, they’re amazing. If used thoughtlessly, bloody mess. But this is true in every language.	RangerScience	12.551448	-7.070587	comment	7.0	28.0	1706498063	12.384585
39337778	Crystal was never able to find tract	Crystal was never able to find traction as a Ruby clone that could compete with C speeds. Why would a Python clone have any better luck? I don’t think anyone would accuse Python of being dramatically more usable than Ruby.	jimbob45	12.605796	-7.2472653	comment	7.0	30.0	1707679676	-11.239425
39342863	Shell scripting with Elixir	Shell scripting with Elixir	bo0tzz	12.679721	-7.4477534	story	7.0	140.0	1707728002	12.9512415
17891504	> This is an important point. If you	"> This is an important point. If you've ever developed a non-trivial application using Sinatra, Express or any other ""micro"" or ""non-opinionated"" framework, you'll have hit this wall quickly.Not really. You want an ORM? choose an ORM library. You want templates, choose a templating library. You want to send mails, choose a mailing library. I don't see how big frameworks like Rails make all these things better, especially when they don't give you the choice as to what tool to use. If you ever developed a non trivial application, you also know that your first concern will be to avoid unnecessary bloat and complexity and only bring in libraries that are strictly required. And as we are moving from traditional html rendered server apps, big frameworks lost even more value since there is no nee"	aikah	12.730135	-6.7794256	comment	7.0	35.0	1535804618	12.304746
17895058	I'm hesitant to work in any JavaScri	I'm hesitant to work in any JavaScript code base that isn't using TypeScript at this point. Two years ago, it was painful to use as any early release is but the benefits were obvious.My biggest wish for TypeScript is that it was easier to use experimental flavors that supported JS features currently being considered, such as the pipeline operator proposal.	mattferderer	12.381054	-6.7231016	comment	7.0	72.0	1535853197	-10.451082
17910270	What's the best IDE to use with Type	What's the best IDE to use with TypeScript on a macbook?	eecks	12.376101	-6.772156	comment	7.0	22.0	1536078644	-10.452184
17975950	With PHP7, HHVM became largely irrel	With PHP7, HHVM became largely irrelevant. It had played a great role and contributed to the PHP's maturing immensely though!	wprapido	12.769548	-6.642719	comment	7.0	29.0	1536811910	10.303518
18104326	Sorbet: Gradual typing of Ruby at Sc	Sorbet: Gradual typing of Ruby at Scale	craigkerstiens	12.547871	-7.0908	story	7.0	66.0	1538278530	12.381897
18128879	Loglan – a predicate logic-based lan	Loglan – a predicate logic-based language for humans	entelechy	13.129197	-7.285849	story	7.0	98.0	1538560947	-12.493514
18143572	Deno – A secure TypeScript runtime o	Deno – A secure TypeScript runtime on V8	netgusto	12.527887	-6.4699287	story	7.0	25.0	1538686454	7.3882513
18151809	Here's a summary:1. Get a website: d	Here's a summary:1. Get a website: don't use a readme on GitHub.2. Use Prose: don't generate from source, you need more.3. Give permalinks for citation purposes4. Your URL should acknowledge the documentation version and language, for future-proofingAnd now for my own opinion:1. No, not every project finds it rational to put time into creating a website. Especially if they're small. Sometimes, the time is better spent doing dev work than creating a pretty site to satisfy you.2. Rails' documentation is generated from source, so is Node's. A lot of documentation is. They give accompanying guides, sure, but there's nothing wrong with generating the majority of your documentation from source.3 & 4. These are nice to have, sure, but not requirements. If a project is small, I'd rather the solo d	amingilani	12.739297	-6.9044538	comment	7.0	25.0	1538774243	12.348704
18175088	An Elm compiler for the Erlang Virtu	An Elm compiler for the Erlang Virtual Machine	hkgumbs	12.587519	-7.533476	story	7.0	182.0	1539085700	-12.667029
18178215	The Birth of Prolog (1992) [pdf]	The Birth of Prolog (1992) [pdf]	mindcrime	13.149868	-7.3053236	story	7.0	133.0	1539107618	-12.4935255
18220146	I find it really interesting that th	I find it really interesting that the Ruby language led to two such wildly different, yet equally valid approaches to web apps - Sinatra and Rails.Sinatra is the most minimal web framework I've ever used. It's fantastic for doing quick mockups and small apps. Yes, you will hit limitations. Bicycles are not good dump trucks. And even before you hit hard limits, you're going to find yourself inventing a lot of structure/convention to keep it from devolving into pretty PHP.Rails, on the other hand, is fantastically complete. It does everything for you. Convention over configuration is a brilliant concept, and the self-discovery nature of the ActiveRecord ORM is something that is totally natural in Ruby and quite awkward in other languages. For writing basic CRUD apps (which is much of the sof	beat	12.747754	-6.90345	comment	7.0	42.0	1539615072	12.327872
18309826	I'm bullish on Elixir and I agree th	I'm bullish on Elixir and I agree that ExUnit deserves to be singled out.Whether you consider Elixir fast or slow probably depends on what you're coming from and what you're doing. Personally, I wish the performance story would significantly improve.But, the reason I think Elixir should be your goto language comes down to process isolation and the ecosystem around it (the synergy of the runtime, libraries and language). If you're doing a pure web app, you might not fully leverage it. But, for anything that involves long-lived in-process data (like a workflow/pipeline, or persistent connections), the way to approach this in Elixir (with supervisors, processes, message passing and pattern matching) tends to result in highly cohesive and maintainable code. Message passing is a pretty effectiv	latch	12.652936	-7.454493	comment	7.0	50.0	1540566073	12.8896055
18411029	Ruby 2.x Universal RCE Deserializati	Ruby 2.x Universal RCE Deserialization Gadget Chain	fpunit	12.520836	-6.9916167	story	7.0	96.0	1541720160	12.267467
18511330	This is an interesting article to me	This is an interesting article to me. I'm professionally a scientist but this year I've set about to helping my partner start her business/website. I have a CSCI undergrad and a strong basis of computational/coding skills.I find, in trying web development [I'm using Django],  that everything is very simple and clear except for the debugging and problem solving. The tools are simple and the way you glue things together is simple but debugging things throwa you into the unholy mess that is how web apps are actually smashed together. I spend 80 percent of my webdev time trying to figure out how to figure out my problem. The rest of my time is crazy productive. If anyone could point me to ressources for people skilled in all things coding/NIX to get these sorts of troubleshooting skills, I wou	earthscienceman	12.720297	-6.5088687	comment	7.0	23.0	1542908697	10.084892
18552925	Erlang/OTP 21's new logger	Erlang/OTP 21's new logger	signa11	12.57942	-7.492435	story	7.0	193.0	1543423035	12.89876
18559615	Not to take anything away from this 	Not to take anything away from this post because PHP is a mess, but yesterday I dragged and dropped some PHP files onto a server with FileZilla, opened the right URL in a browser and it worked. No bundler, no docker, no kubernetes.That was some PHP Happiness right there.	skrebbel	12.72873	-6.627226	comment	7.0	28.0	1543493409	10.161704
18577832	TypeScript in 5 minutes	TypeScript in 5 minutes	karmakaze	12.355488	-6.8213778	story	7.0	110.0	1543686312	-10.468145
18651103	PHP is the worst programming languag	"PHP is the worst programming language ever made in current widespread use. There was never an excuse to use it, there were always other options, even many years ago.> ""To them, we say “think again.” We believe that the only limit PHP has is the limit you set.""You shouldn't be writing PHP in the first place, and should slowly work to (incrementally, slowly) shift your codebase into any other programming language in existence if it is already written in PHP.The core language is terribly designed. PHP 7 did not fix this. Even JavaScript is miles better (PHP has a type system equally as bad, if not worse).Of course, this sentiment is unpopular, because you're never supposed to rewrite anything even incrementally, and Popular Means Quality, and saying otherwise is heresy.I propose the more radi"	Kaveren	12.753531	-6.6236696	comment	7.0	27.0	1544475343	10.307762
18656052	I really like Erlang and Elixir, but	"I really like Erlang and Elixir, but I'm really worried when I see a tech stack that is still trying to figure out deployment and runtime configuration of systems.I'm not trying to be inflammatory here.  As per many resources such as ""Phoenix in Action"" deployment is still a major culprit.  And Dockyard themselves (one of the major Elixir shops, where McCord works actually) have a full time guy on the payroll to try to solve the problem of runtime configuration.It just sucks, because these are 2 major concerns of any production-ready stack."	dudul	12.639467	-7.479905	comment	7.0	23.0	1544543233	12.933804
18838508	Could someone give a more concise re	"Could someone give a more concise reason for using Elixir? I have a ""rule of 3"" for checking out things - the third time I hear it mentioned and it seems interesting, then I'll go check it out.Elixir is past 3 times - so I will check it out for sure! - but this article didn't seem to actually say anything (seemed more like a PR piece that was trying not to be technical, and the main argument appeared to be ""well, it's not javascript!"").The part that actually talked about Elixir listed some Pros that didn't seem that unique. What's the ""killer feature"" of Elixir - or is it just a combination of ""good features""?"	mrspeaker	12.682375	-7.47836	comment	7.0	28.0	1546785482	12.939694
18875128	Yes, maybe my problem is more with R	Yes, maybe my problem is more with Rails. (Because of monkeypatched APIs, it’s not always obvious to me whether a particular weirdness originates from Ruby’s standard library or is a Rails addition. Arguably this is something the language has also encouraged though.)Is there any reason to use Ruby outside Rails? Its niche seems to completely overlap with Python and modern JavaScript, and those have enormously more ecosystem support and everything that comes along with it: faster VMs, better tooling, large corporations on committees developing language features, etc.I view Ruby as a sort of “COBOL of Web 2.0”. A generation of programmers learned the trade with it, and it powers important legacy apps, but I can’t imagine building anything new on it.	pavlov	12.688128	-6.9804425	comment	7.0	27.0	1547138025	12.353946
29800786	Is anybody using Erlang/Elixir in pr	Is anybody using Erlang/Elixir in production for web apps? It seems well-suited for the modern age of using microservices/etc. and scattering things across several servers.	rackjack	12.630022	-7.4790583	comment	7.0	23.0	1641331661	12.927559
29822849	Elixir and Machine Learning: Nx v0.1	Elixir and Machine Learning: Nx v0.1 released	josevalim	12.690293	-7.455633	story	7.0	274.0	1641473042	12.943928
29890877	I learned to use php when I was like	I learned to use php when I was like 14. I’m 27 now and still derive such joy when making my own little projects that will never see the light of day. I try to be humble as far as just being a php trash coder, but I don’t feel too ashamed honestly, as it is the most mainstream thing really. I will always be grateful to php for being accessible and yeah, I guess easy. I don’t know why php is the only one I really stuck with exactly, but it is weirdly dear to me. Nearly half my life I’ve never gone too far past being a lowly php coder, and not a great one at that, but I still like what I can make at the end of the day. It’s a side creative thing for me. Laravel was a revelation for me over the last few years, it just makes some things make sense that never did for me as a self-taught hobbyis	vdo	12.786735	-6.6299677	comment	7.0	52.0	1641905334	10.339168
30023202	I dislike rubocop, not because I dis	"I dislike rubocop, not because I dislike linters (pep8 is fine), but because the defaults have strong opinions about things that don't matter    if foo? then
      blah
    end

will result in a complaint about how one should remove the ""then"".  Sure, you can configure rubocop to not make that complaint, and then the next one, and then next one ... but whatever happened to convention-over-configuration?  I choose the convention of not using rubocop."	jjgreen	12.450921	-7.0677705	comment	7.0	32.0	1642771846	-10.903057
30149213	Learn Elisp the Hard Way (2011)	Learn Elisp the Hard Way (2011)	AndroidKitKat	12.715953	-7.4176035	story	7.0	84.0	1643643871	12.948054
30242268	My problem with PHP is that it solve	"My problem with PHP is that it solves the issue of code reuse the wrong way round.In other languages, you can import code like this:    import mail as mailer

The external code (""mail"") does not have to make assumptions how it will be called when it is used.In PHP, it is the other way round. Every piece of code needs to try avoiding namespace conflicts by prefixing the code with something like this:    namespace Illuminate\Mail;

Hoping the namespace (here ""Illuminate"") will not clash with other code."	TekMol	12.377952	-6.669496	comment	7.0	47.0	1644225634	6.1466446
30261782	I like using plain PHP + PDO MySQL. 	I like using plain PHP + PDO MySQL. I structure it so almost all files contain a single function/MySQL query, with very little dependencies. I already know how to implement core functionalities when needed (e.g. CSRF, user permissions). Why should I consider Laravel if plain PHP seems to work excellent in my case (been able to maintain the same codebase for over 9 years without issues, can quickly create a new app if needed, can reuse code from one project to another, understanding what the code does requires zero-framework knowledge, performance is as good as it can be, as every file executes only what's needed and doesn't create unnecessary abstractions, etc.)?	XCSme	12.82126	-6.623889	comment	7.0	66.0	1644342714	10.339849
30360037	Why only things like these float up 	Why only things like these float up to the front page, and not elegant and/or wholesome things written in Perl?	WesolyKubeczek	12.350811	-7.0303507	comment	7.0	28.0	1645020221	13.172514
30395582	BBC Betsie: Perl program to create a	BBC Betsie: Perl program to create an automatic text-only website version (1999)	samwillis	12.350126	-6.9204044	story	7.0	62.0	1645261620	-10.654278
30622696	I'm a big Ruby fan, or at least I us	"I'm a big Ruby fan, or at least I used to be. I had a hard time learning the language, because there are just too many ways to do the same thing. I would always second guess my memory and be forced to look up even the simplest most. common things.This is a good example of that:> There is more than one way to call a lambda function:  my_lambda = lambda { puts ""hello"" }
  
  my_lambda.call

  my_lambda.()

  my_lambda.[]

  my_lambda.===

---I'm still a fan of the language, but I hope going forward they tone down the idea of N ways to do the same thing. It also seems to bite the language designers in the butt, as they end up running out of symbols for new concepts."	syspec	12.33421	-7.115488	comment	7.0	30.0	1646880729	12.348642
30679719	Sadly, Rails pretty much is Ruby at 	Sadly, Rails pretty much is Ruby at this point. I don't think I've heard a company use Ruby for anything other than Rails in like a decade. If they are, it's because they're already all in on Rails, so they might as well keep it in the same language :\	activitypea	12.712337	-6.9683495	comment	7.0	21.0	1647299311	12.328014
33185159	What's really missing is a seamless 	What's really missing is a seamless ability to add runtime checks to TypeScript. Otherwise, between Flowtype and TypeScript, static type checking is a solved problem in JS.Hegel is basically a less mature version of Flow. I preferred Flow over TS for the longest time, but let's face it – TS won in terms of absolute adoption, with very little prospect for anyone to take over.	gajus	12.438242	-6.776328	comment	7.0	41.0	1665617394	-10.44788
33224079	Crystal 1.6.0 Is Released	Crystal 1.6.0 Is Released	ksec	12.651068	-7.268795	story	7.0	67.0	1665932362	10.43183
33241466	I’ll say it out loud. Erlang is cool	I’ll say it out loud. Erlang is cool, but so are loops, types, a whole bunch of common punctuation, idioms, packages and so on. Esoteric languages may have core killer features, but otherwise are weak and pointless in a sense of general-purpose business programming. Even LISP is less odd than Erlang. What’s with [,.], =<, #[], symbol/n, -etc? As if they wanted to win an obfuscation contest and succeeded.For some reason, great tech often comes with “strings attached”. Relational engines - SQL only, no direct api. Concurrency - Erlang. Symbolic computing - Haskell. Embedding a dynamic runtime - Lua. Controlling desktop - AHK, AppleScript. Why can’t we have these things in mainstream, “day job”-grade languages with a human face.	wruza	12.555653	-7.5191975	comment	7.0	27.0	1666052886	12.922713
33338686	>Running the typechecker independent	>Running the typechecker independently of the bundler is really common in TypeScriptmaybe it is common, I can't speak to that but in my opinion a large part of the success of webpack was probably because they bundled the typechecking. Because that's the only workflow that makes sense, imagine a c# compiler that quickly outputs executable IL code but half the time it's broken because it didn't do any type checking and you have to wait for the IDE based type checker anyway. On every build. It just doesn't make sense to work this way, you never want a fast, silently broken build which is what you get with non-typechecked fast builds.	Nathanba	12.429531	-6.565845	comment	7.0	31.0	1666748612	-10.492613
33482104	Ask HN: What's the best technology f	Ask HN: What's the best technology for a CRUD website to minimize maintenance	MrPowers	12.778114	-6.5471673	story	7.0	4.0	1667660487	10.165022
33527923	Tangential, but what's the best way 	Tangential, but what's the best way to get Elixir dev environment with database on Windows?A friend and I have been trying it for a project and for a NixOS dweller like me it was less than 2 minutes of work. But for her it has been never ending troubles.Otherwise, Elixir and Phoenix are fantastic! No explicit JavaScript is necessary and that alone sells it for me, but the concurrency story is so easy to grok that I'm amazed nobody else managed to recreate it in so many years..	e3bc54b2	12.68541	-7.435246	comment	7.0	28.0	1667973003	12.890059
33778261	Some projects moving AWAY from TypeS	Some projects moving AWAY from TypeScript. Reasons: build times, code complexity	thunderbong	12.372254	-6.7730045	story	7.0	13.0	1669663401	-10.46491
33798108	Erlang: ‘Let It Crash’ under attack	Erlang: ‘Let It Crash’ under attack	signa11	12.513224	-7.511665	story	7.0	25.0	1669794966	12.8952875
33808464	I sometimes see posts about Datalog 	I sometimes see posts about Datalog & Co being posted here. I must say I don't understand where and when this is used. Like, I see the home page, I see the example page and I still don't understand. Is there any actual application using this? What for?	NeutralForest	13.184338	-6.988207	comment	7.0	30.0	1669845721	-12.401524
26501297	Portfolio Website Using Python/Flask	Portfolio Website Using Python/Flask vs. JavaScript/React?	Karsteski	12.632011	-6.473829	story	7.0	5.0	1616063827	7.12112
26516212	We've just started developing a Shop	We've just started developing a Shopify integration and used their Python API library because we're building it into an existing large Django codebase, and I've been shocked at the quality of the API library. We're now aiming to rewrite the bits we need.- `import shopify` makes an API request. If their API rate limits you, your server will probably crash. This happened to us in production.- That API request gets a dynamic list of supported API versions. If the version you've hard-coded in your app (because it's what you support) is no longer in that list, it will raise a VersionNotFoundError and your app will probably fail in some significant way.- There's no connection persistence. Every API call sets up and tears down a full connection, a noticeable performance impact.- Internally the li	danpalmer	12.763936	-6.5486207	comment	7.0	60.0	1616175878	10.072435
26722092	Fuck Magento	Fuck Magento	Yusu	12.781613	-6.5616703	story	7.0	29.0	1617786232	10.322208
26823800	What's the best programming language	What's the best programming language for rapidly getting out a prototype?	sarvasvkulpati	12.363907	-6.9457808	story	7.0	5.0	1618508851	-10.976555
26827563	PHP has been in a pretty good place 	PHP has been in a pretty good place since 7, IMO.  These are some great developments.I would say that Laravel is an extremely high quality framework (on par with and even in some ways better than Rails) that nobody should be ashamed to use.It's unfortunate that the stink of old PHP is so powerful and that salaries are still lagging so far behind.	busterarm	12.792047	-6.645572	comment	7.0	71.0	1618530269	10.363152
26828083	I wish there was a nodejs equivalent	I wish there was a nodejs equivalent to Laravel	gusbremm	12.808729	-6.529698	comment	7.0	31.0	1618534743	10.31386
26920779	A desktop Laravel admin panel app (s	A desktop Laravel admin panel app (similar to Invoker)	tmdh	12.816105	-6.581052	story	7.0	50.0	1619223002	10.325484
26930255	I did not expect this to be written 	I did not expect this to be written in TypeScript.The intersection of people who really understand Factorio, Verilog, and TypeScript has to be less than 250,000 people on entire planet -- in the entire universe.	nickysielicki	12.340746	-6.8316703	comment	7.0	37.0	1619323137	-10.454448
26934858	I like Java but I think the right jo	I like Java but I think the right job for all jobs, if you're going to pick one, is TypeScript:- At this point you can say TypeScript is mainstream. It's not Java, but it's definitely not a niche toy.- Many companies stand behind it and use it in production.- It is widely supported by tooling.- With TypeScript, every element of your stack can not only share code, but can share types, too. This has been a huge boon for me.- The type system is really, really flexible. It seems possible to specify the exact degree of safety that you want for any given situation. I never feel bound by the type system. It's very liberating. Not so with Java or C#.- It compiles to JavaScript, so it can run anywhere. On the backend you can run it natively with Deno. I haven't tried this yet, but am looking forwar	dmitryminkovsky	12.339904	-6.7738113	comment	7.0	37.0	1619373454	-10.411217
26934911	Upvoted not because I agree, but gen	"Upvoted not because I agree, but genuinely want to read discussion on this. I used to agree, when I first started doing Android development and ""relearned"" Java since playing with Applets at age 14, but threading made me seriously reconsider. These days I make a living writing TypeScript ( nearly exclusively ), and although the tsc says it works, I always have a suspicion it could not work. Whereas with Java if it compiles it definitely works unless you have some R build issue. I think TypeScript is a nice middle ground, but I do wish there were some lower level semantics for backend TypeScript development. I've looked into Rust and it looks very complex and unfriendly ( I would need to rewrite nearly my entire backend libraries e.g. db drivers and ORM generators ). Anyway, it's a decent t"	cellis	12.354502	-6.7373896	comment	7.0	50.0	1619373713	-10.4271555
26959633	Maybe a dumb complaint, but I hate t	"Maybe a dumb complaint, but I hate the name. I have a really hard time not reading it as the active name ""Generate Server"". Like, I'd expect it to be a function that generates servers (whatever that means, since what it's dealing with isn't something I'd normally call ""a server"" either). It bugs the hell out of me every time I read Elixir code. One of those things I have to keep reminding myself: ""OK, it's not what it looks like it is, at all... what did these misleading terms actually mean, again?"""	intergalplan	12.682387	-7.4430118	comment	7.0	40.0	1619548262	12.922959
26960807	This line in the opening paragraph r	This line in the opening paragraph really rubs me the wrong way:> “I'm ashamed to say most of my Elixir education has been through trial and error, figuring things out as I go along“This attitude is so prevalent in software as if we are all supposed to be divined with programming knowledge the moment our IDE spins up. In every other industry that’s exactly how you learn: Get your hands dirty, make mistakes, and fix them.There’s a lot of things wrong with software engineering - harboring this attitude that self-taught learning is bad or shameful makes it unnecessarily worseGreat write-up otherwise	JohnCurran	12.677195	-7.456426	comment	7.0	24.0	1619553927	12.913312
27125200	Flask 2.0.0 has been merged into mas	Flask 2.0.0 has been merged into master	tpfour	12.739094	-6.5694156	story	7.0	150.0	1620778410	10.0612955
27125408	I have moved most of my stuff to Fas	I have moved most of my stuff to FastAPI. It’s so much more enjoyable than flask. https://fastapi.tiangolo.com/	nerdbaggy	12.558674	-6.6039314	comment	7.0	39.0	1620780461	10.039726
27132425	Curious, do you use typespecs and di	Curious, do you use typespecs and dialyzer? If so, how do you find it?Elixir checks pretty much every box I'd want in a language, but after dealing with nil in Ruby for years and having fun with TypeScript... I'm feeling more drawn to working with type systems.	mindfulmore	12.4097395	-7.3977704	comment	7.0	24.0	1620838389	12.936192
27134155	Sincere question - for starting gree	Sincere question - for starting greenfield projects, what would make you choose Flask over FastAPI[0]?[0] - https://fastapi.tiangolo.com/	krat0sprakhar	12.545844	-6.6147017	comment	7.0	38.0	1620847406	10.041022
27206915	See also, https://news.ycombinator.c	See also, https://news.ycombinator.com/item?id=27192873 (Ask HN: Are you satisfied with Elixir or do you regret choosing Elixir?) with great insights about the language.Another popular thread that comes to mind is the one about Discord scaling Elixir (https://news.ycombinator.com/item?id=14748028 and https://news.ycombinator.com/item?id=19238221)	WayToDoor	12.655293	-7.4493213	comment	7.0	46.0	1621421899	12.883967
27207160	Several versions ago Jose talked abo	"Several versions ago Jose talked about how Elixir is basically ""done"", which is so refreshing these days!But since then, the developer experience has improved by leaps and bounds through all these improvements other than the core language. As a professional Elixir developer for the last 4 years, I'm loving it. A few improvements in the last few versions off the top of my head that have been really nice:* Robust, timezone handling DateTime support in the standard library. I don't need Timex anymore!* Finally a good approach for configuring applications ar run time (e.g. with ENV vars), that works for dev, test, prod and releases, via config/runtime.exs.* Better compiler warnings verging on a little ""light"" type checking* Mix.install in this release finally makes Elixir work well for one-off"	losvedir	12.675695	-7.438653	comment	7.0	29.0	1621423996	12.905845
27231556	Ruby 3 JIT can make Rails faster	Ruby 3 JIT can make Rails faster	rguiscard	12.573337	-7.016764	story	7.0	123.0	1621584064	12.353509
27247682	I think that the metaprogramming sit	"I think that the metaprogramming situation is a little problematic in Elixir. Elixir makes heavy use of macros in basic libraries like the Phoenix or Ecto frameworks that are used by more or less everybody.I understand that macros are useful to build a DSL for a specific project but using macros in basic libraries like this leads to ""way too much magic"": Trying to understand (or somehow extend) Ecto is not really possible for all practical purposes and following the control flow in Phoenix is like a maze because of all the macro substitutions. This also leads to cryptic errors where you get an error in non existant lines of code.This heavy of macros is my main complain about Elixir and I think it's one of the main problems that new people 
 face when trying the language resulting in either"	spapas82	12.648626	-7.436235	comment	7.0	28.0	1621698801	12.899416
27364833	Flame: A PureScript front-end framew	Flame: A PureScript front-end framework inspired by the Elm architecture	vyuh	12.961572	-7.660492	story	7.0	156.0	1622607943	-12.7623205
27365883	The Development of Erlang (1997)	The Development of Erlang (1997)	BerislavLopac	12.557493	-7.515683	story	7.0	223.0	1622618349	12.906475
27397196	These frequent posts about Elixir ar	These frequent posts about Elixir are tempting me to give it another shot...But the last time I tried (weeks ago), it was a total pain. I could barely find documentation for the authentication packages I was trying for Phoenix and the docs I did find were usually outdated. Packages were unmaintained left and right and there's no official libraries for things like Stripe.It was a real shame because I seriously align with the ideology behind it. It just slows me downvand for that reason I can't use it.	sergiomattei	12.785042	-7.227602	comment	7.0	45.0	1622831455	12.781082
27439305	The screenshot of the editor [1] has	The screenshot of the editor [1] has a small window showing the programming language. Wondering which it is. Ruby?   [1] https://cdn.arstechnica.net/wp-content/uploads/2021/06/Pulp-1-1440x997.png	flakiness	12.564931	-7.0821137	comment	7.0	21.0	1623178426	12.402896
27464038	Lots of good points. I gotta blame m	Lots of good points. I gotta blame my Elixir tutorial (Dave Thomas) for some bad habits: over-reliance on pipes and pattern-matching in function args. He hates if-then in a function. He would take an if-then in a function and split both clauses out into their own function. Seemed fishy to me. Trying too hard to be elegant.	msie	12.543294	-7.4306536	comment	7.0	28.0	1623350598	12.8853
37596236	What’s the major thing that Erlang/O	What’s the major thing that Erlang/OTP (or Elixir) needs for greater adoption?	alberth	12.618977	-7.489182	comment	7.0	42.0	1695296832	12.948856
37636529	Unpacking Elixir: Resilience	Unpacking Elixir: Resilience	lawik	12.693736	-7.455986	story	7.0	213.0	1695584894	12.93267
37639038	Why isn't crystal gaining much adopt	Why isn't crystal gaining much adoption? It seems like a very solid language as it looks like Ruby (even Matz gave praise to crystal) it's built on LLVM (blazing fast) and the library ecosystem is growing.What does it need (other than probably true Ruby interop) for mass adoption?Is there any companies using and making bank with crystal in production?	colesantiago	12.624304	-7.2588663	comment	7.0	25.0	1695608703	-11.230035
37787592	Rails is great, and better than ever	"Rails is great, and better than ever.
I've spent most of my early years in the field working with Django and Laravel, then moved to frontend doing [all the usual stuff we do nowadays] and this year I was assigned back to a Rails + Hotwire project.I'm truly amazed how much simpler things are. I feel sad most of us have forgotten how easier things could be, and I'm terrified about new people joining this industry that will never know about how easier things could be because they'll never experience that (as things are right now, who knows the future...).If you're reading this and never tried Rails, or discarded it because you listened somebody say the usual ""PHP is ugly/Rails is dead/JavaScript is messy"" give it a try with an open mind and ignore what others say for a moment. I can't recomme"	0xblinq	12.760451	-6.829754	comment	7.0	61.0	1696572614	12.278126
37973030	Asking this earnestly and not as a r	Asking this earnestly and not as a rhetorical question: what do I get from Prolog that I can't get from using SQL? Is it speed, is it ergonomics, is it the ability to do computations that are otherwise intractable? And if there are any such advantages, at what level of complexity of abstraction do they come up, and at which level would I not see the value of using prolog?	yowlingcat	13.156937	-7.26413	comment	7.0	46.0	1697952127	-12.479292
37997070	"I wish the author dove deeper into """	"I wish the author dove deeper into ""does ruby scale"" with hard numbers instead of pointing at big companies.If Shopify, Github, or Gitlab wrote their code in golang or rust, would they need less CPU and memory? Would they have less bugs? Are refactors fast? How has RoR's ever changing JS ecosystem impacted these organizations?"	itake	12.704575	-6.9646435	comment	7.0	45.0	1698143752	12.327814
38175413	Validating Data in Elixir: Using Ect	Validating Data in Elixir: Using Ecto and NimbleOptions	amalinovic	12.657253	-7.4480186	story	7.0	114.0	1699354621	12.930447
38176001	I tried out Elixir a couple months b	I tried out Elixir a couple months back, but had no end of problems getting the tooling set up in VSCode.	mjhay	12.677349	-7.4406114	comment	7.0	46.0	1699359880	-10.690758
38215188	And still 0 successful startup has b	And still 0 successful startup has been built on top of elixir.	hartator	12.705385	-7.4484067	comment	7.0	26.0	1699591907	12.937907
38255157	Ask HN: What are the best resources 	Ask HN: What are the best resources about learning Ruby programming in 2023	ibobev	12.669616	-6.997728	story	7.0	19.0	1699908413	12.3920555
38403835	PHP was, and perhaps still is despit	PHP was, and perhaps still is despite stiff competition from frameworks like Next.js, the ultimate backend-for-frontend (BFF) solution. It's a server-side, super-flexible layer ideal for connecting various components and delivering static HTML with JavaScript enhancements.While there's nothing inherently wrong with using PHP for tasks Java already handles well, given Java's proficiency in its domain, it's not always necessary to replicate these functions in PHP.However, there's a tendency to undervalue PHP-based applications, often labeled as 'home.php-style' apps. It's true they can become unwieldy and unmaintainable if not properly managed. Adhering to good practices is essential, but it's also important to remember not every project needs a complex solution like bootstrapping a Laravel 	egeozcan	12.699254	-6.5548873	comment	7.0	47.0	1700833270	10.311601
38407342	Having spent considerable time in bo	Having spent considerable time in both Java and Elixir, I would also choose Kotlin (or Java) over Elixir as a backend language.I worked in Elixir for over a year, and frankly was quite disappointed with it. Elixir has a lot of good ideas, but falls short in some crucial points in execution. Relying on shapes instead of types to identify results / objects, weird syntax choices (You use both <%= %> and {} to interpolate in phoenix templates, depending on where you are), no ability to write custom guards, a lot of language concept overlap - for example behaviors / protocols should be one implementation instead of two separate ideas.. Elixir is an okay language, but I think it's just a fad, not good enough to have staying power. I think a better language written on the BEAM will come along and	brink	12.6280575	-7.434664	comment	7.0	24.0	1700854516	12.888897
38488967	My problem with Ruby is not so much 	"My problem with Ruby is not so much the syntax. I kinda like this one-line-function feature, and I enjoyed it when using in C#.My problem is the fact Ruby practitioners have a tendency ABUSE the usage of one-line-methods with LOTS of side-effects.So it's not like Haskell one-line-methods.Things that could be a function with 5 or 6 lines can become a class with as many methods. And instead of local variables, you now have to use instance variables (class fields).For example, this is common in lots of codebases:    class UserCreator
      def initialize(email)
        @email = email
      end
      
      def create_user
        create_user_object
        assign_admin_role
        assign_invite_permission
        call_invite_template
      end
      
      private
      
      attr_reader :e"	whstl	12.416138	-7.110441	comment	7.0	56.0	1701449757	12.36581
14710713	Picking up new languages is fun.I ha	Picking up new languages is fun.I have to say things like this tickle my funny bone though:>   def backlog(board_id) when is_integer(board_id) doWhat happened to good old fashioned function foo (int bar) :)Is there an equivalent to typescript for elixir?	blindwatchmaker	12.448782	-7.4068766	comment	7.0	27.0	1499351835	12.908761
14785209	I had tons of startup ideas that I'd	I had tons of startup ideas that I'd always wanted to give it a try. After a point, it became frustrating to test them out one by one, either by writing custom applications in Rails or use Wordpress. But, both costed me a significant amount of time.For example, I had this idea for a travel startup for a very, very long time and I decided to build it on Wordpress. The monetization model was selling some E-Commerce items, so I naturally tried out some of the plugins and was shocked at how long it took for me to get a simple task done. I had such a terrible experience that I'd never recommend it to anyone. Wordpress by itself is fine, but when you try to extend it, you face so many hiccups.That's when I realized there's no use blaming the tool. It's because of the differences in philosophies 	neya	12.74616	-6.811324	comment	7.0	27.0	1500257658	12.303355
14783865	Ahead-Of-time (AOT) Compiler Designe	Ahead-Of-time (AOT) Compiler Designed for Ruby	ksec	12.532078	-7.0602245	story	7.0	42.0	1500235374	-4.8179846
14851887	JavaScript for squares: The incredib	JavaScript for squares: The incredible rise of TypeScript	ohjeez	12.351373	-6.772153	story	7.0	46.0	1501017057	-10.449706
14877591	Would you suggest to choose Elixir /	Would you suggest to choose Elixir / Phoenix for an api for a startup? Is it too risky now, or good enough + very attractive?	playing_colours	12.734329	-7.3646765	comment	7.0	23.0	1501276147	12.882566
14890029	First:> Elm has an incredibly powerf	"First:> Elm has an incredibly powerful type systemNear the end of the article:>Want to decode some JSON? Hard, especially if the JSON is heavily nested and it must be decoded to custom types defined in your application.IMHO the lack of typeclasses/traits is really hurting Elm. Take haskell f.e.  {-# LANGUAGE DeriveGeneric #-}
  
  import GHC.Generics
  
  data Person = Person {
        name :: Text
      , age  :: Int
      } deriving (Generic, Show)
  
  instance ToJSON Person
  instance FromJSON Person

While I understand Evan's aversion against complexity, it  makes me a bit wary about using ElmLang in production. I am currently using TypeScript, but if I would need a more powerful type system, I would probably switch to Haskell/PureScript or OCaml/BuckleScript instead."	ToJans	12.966004	-7.6678567	comment	7.0	62.0	1501484762	-12.739478
14892909	I really wish people would stop spre	"I really wish people would stop spreading the meme that decoding JSON in Elm is ""hard"". Yes, Haskell allows you to automatically decode/encode datatypes, but this only works in the simplest of cases. For example, if your backend returns a JSON object with snake-cased fields, but your model has camel-cased fields, `instance ToJSON Person` won't work; you'll have to write a custom decoder. The automatic decoders/encoders in Haskell only work if the shape of your JSON perfectly matches your record definition.Writing decoders in Elm is not hard. It's manual. It's explicit. It forces you to specify what should happen if the JSON object has missing fields, incorrect types, or is otherwise malformed. There's a slight learning curve and it can be time consuming at first, but it guarantees that you"	fbonetti	12.976026	-7.6580954	comment	7.0	37.0	1501515240	-12.729971
14896384	Why is there so much Elixir hype on 	Why is there so much Elixir hype on HN at the moment?HN shouldn't be used as a propaganda hype machine. I've seen all the language hype cycles,Year 1:PHP sucks! Node.js is awesome! Everyone must use Node.js!Year 2:Node.js sucks! Go is awesome! Everyone must use Go!Year 3:Go sucks! Rust is awesome! Everyone must use Rust!Year 4:Rust sucks! Elixir is awesome! Everyone must use Elixir!... And of course you get the odd Haskell article every so often.Communities are promoting their stuff too hard - They are setting up their users for disillusionment and disappointment.	jondubois	12.666371	-7.465614	comment	7.0	25.0	1501539614	12.928811
14918173	I'm not a Ruby/Rails fan at all, but	I'm not a Ruby/Rails fan at all, but I work at a Rails shop. It would be interesting to know why the decline is happening, and what alternatives are replacing it. I suspect Elixir and Go.	christophilus	12.753915	-6.9809914	comment	7.0	29.0	1501753083	12.400981
15017704	Learnings from One Year of Building 	Learnings from One Year of Building an Open Source Elixir Application	achariam	12.683448	-7.4363847	story	7.0	197.0	1502801685	12.928985
15173285	Clean Code concepts adapted for PHP	Clean Code concepts adapted for PHP	djug	12.754	-6.616839	story	7.0	92.0	1504598053	10.313274
15182626	Stuff Goes Bad: Erlang in Anger (201	Stuff Goes Bad: Erlang in Anger (2016)	mutor	12.555605	-7.5249853	story	7.0	293.0	1504695013	-5.4890313
15188026	I get the attraction for compiling a	I get the attraction for compiling a non-web language (say Python) so that you can write Python and have it run in the browser, but since Typescript already compiles to JS I don't really get it. What am I missing? Can it be faster, or do more/different things?	vosper	12.32805	-6.6853375	comment	7.0	58.0	1504741132	-10.451042
15190124	I have a small flask application whi	I have a small flask application which basically is a rest get post API server. I'm struggling to make deployment easy. With PHP, i just push to the application server and rsync that folder into var www html for Apache httpd but what would I do for flask python 3?	thanksgiving	12.627402	-6.529782	comment	7.0	26.0	1504775039	9.997164
15320547	Can someone who uses Django, review 	Can someone who uses Django, review this release? What are the most anticipated changes etc?	obilgic	12.829308	-6.5713754	comment	7.0	48.0	1506185487	10.07368
15415632	Rubyist makes some Python code 5x Fa	Rubyist makes some Python code 5x Faster	mariuz	12.421437	-6.9960885	story	7.0	21.0	1507284976	12.348599
15449531	Could someone please concisely descr	Could someone please concisely describe if there is a use-case where Django offers utility above what Flask can provide?	philipov	12.819822	-6.514792	comment	7.0	43.0	1507728566	10.051569
15461785	I disagree. I inherited an app that 	I disagree. I inherited an app that I'm maintaining that was written by one person over ~12 years. When requirements were added, he just cloned the app and started making the changes so the new app would meet the requirements. Repeat 2 more times, and you get to now, where there are 4 similar but not identical versions of the same code base, with inconsistently applied fixes to various bugs. All 4 still need to work for the organization to function.It's old school PHP, with sql queries mixed in with markup mixed in with php business logic - if that's not spaghetti code, I don't know what is.(I'm replacing it, but it's a very slow process).	eric_h	12.761698	-6.6184473	comment	7.0	33.0	1507847053	10.319209
15641988	Rails is crazy.  If you know it well	Rails is crazy.  If you know it well maybe it's useful but it's very unapproachable.  A new project, empty, involves tens of directories and files and at least two languages (coffeescript).  That's been off-putting for me.  But Ruby the language is quite pleasant IMO.  I guess people confound their experiences of Rails and some other Ruby tooling with the language itself.	gkya	12.682224	-6.9854937	comment	7.0	59.0	1510046796	12.361129
15643500	Our JavaScript at this point is basi	Our JavaScript at this point is basically an add only nightmare I have no idea how to dig ourselves out of.It is a bigger problem than I know how to fix. We even have a similar static analysis tool on our code, but when there are thousands and thousands of existing issues pointed out by it no one really cares about adding a few more to the pile.I tried to promote typescript and rewriting over time. I can’t seem to get our front end developers to understand the value, or care. It’s totally my failure; it hurts my soul.It’s honest to god something of an existential crisis for me.I hunkered down in primarily backend over the nightmare that is our JS, whereas I spent nearly ten years full stack. Sigh.	donatj	12.38227	-6.527639	comment	7.0	34.0	1510064301	-10.425629
35185561	I'm curious what criteria you used t	I'm curious what criteria you used to pick Flow vs. Typescript.	latchkey	12.447489	-6.6999273	comment	7.0	33.0	1678989197	-10.460681
35187213	I’m always surprised by how much oth	I’m always surprised by how much others like typescript. Out of all the languages I have to use, typescript is the one that feels the most like pulling teeth. Maybe I just don’t know how bad it truly was to work with a really large JavaScript project without types and that’s why people love it, but without that experience it just feels like all the hassle of types without most of their benefits.	i_am_toaster	12.363521	-6.77752	comment	7.0	23.0	1678995541	-10.439724
35251698	Ask HN: Do you guys have a recommend	Ask HN: Do you guys have a recommendation for Ruby Web Hosting	calebjosue	12.661998	-6.9887595	story	7.0	3.0	1679428804	12.37006
35401176	Wouldn't Erlang be much more efficie	Wouldn't Erlang be much more efficient if it simply compiled to the JVM?	amelius	12.454115	-7.488224	comment	7.0	68.0	1680363966	12.902708
35425835	I’ve moved entirely to Polars (which	I’ve moved entirely to Polars (which is essentially Pandas written in Rust with new design decisions) with DuckDB as my SQL query engine. Since both are backed by Arrow, there is zero copy and performance on large datasets is super fast (due to vectorization, not just parallelization)I keep Pandas around for quick plots and legacy code. I will always be grateful for Pandas because there truly was no good dataframe library during its time. It has enabled an entire generation of data scientists to do what they do and built a foundation — a foundation which Polars and DuckDB are now building on and have surpassed.	wenc	12.357886	-6.53745	comment	7.0	37.0	1680536990	10.113856
35430350	I love Django, but I can’t help but 	I love Django, but I can’t help but feel FastAPI > Django these days.	canadiantim	12.811288	-6.587966	comment	7.0	27.0	1680551854	10.040495
35438464	This is a bit of a rabbit trail, but	This is a bit of a rabbit trail, but something I’ve been wondering about lots of these new languages.  Who uses them and why?  I’m genuinely asking here.  I have a hard time imagining going to a team or customer and saying “c#/go/java/python/javascript are the wrong approach for this project.  We need to all learn this new language and use that instead.”    Don’t get me wrong: I’m glad people are innovating, and I get that personal curiosity and growth might be good reasons to build a new language.  But I just wonder about the real world uses and actual stories behind new and lease known languages.  Why did someone create Gleam and how is it being used in production today?  What are the long term goals for it?  What would be the argument for using it on a company’s projects?	shireboy	12.538743	-7.431699	comment	7.0	24.0	1680611097	-12.319447
35479183	GitHub running off the main branch i	GitHub running off the main branch is fascinating, and initially sounds mad, but makes so much sense. Assuming they have very high test coverage, running against mainline Rails isn't really any different to having the fork they had before, but they have more influence on future development.It must also be a massive boon for the Rails ecosystem to have such a large property running off the head.Doesn't anyone know of any Django shops that do the same, running off mainline?	samwillis	12.754228	-6.8444767	comment	7.0	114.0	1680853345	12.269766
28010098	>>  Because deploying a PHP app is m	">>  Because deploying a PHP app is mostly just dropping files into a directory and restarting a web server.Lots of solutions can't ""just restart a web server"" as part of their deployment."	skeeter2020	12.766977	-6.569428	comment	7.0	22.0	1627665135	10.269589
28014397	It's impressive to me that you can b	It's impressive to me that you can build a project on something (here Ruby), and if you get big enough that the initial decision is a problem for some reason (here performance), you can just improve on it like that.How does one generally get to work on compilers? Is it mostly through academia? Through open source contributions to compilers?	Zababa	12.490827	-7.050303	comment	7.0	26.0	1627695008	12.356773
28034581	Building a Django driver for Psycopg	Building a Django driver for Psycopg 3	Spiritus	12.835693	-6.5169864	story	7.0	171.0	1627896603	10.074415
28062274	I'm so excited for Phoenix 1.6. I th	"I'm so excited for Phoenix 1.6. I think Phoenix was almost onto gold with LiveView when introduced, but it was still a little rough around the edges. But Phoenix 1.6 should sand away all the roughness, and we'll be in an awesome place.Basically, the issue before, IMO, was kind of a tension between ""live controllers"" and (they call them ""dead"" but I prefer ""static"") static controllers. You couldn't necessarily interleave them super well, and factored templates had issues when used in one place or another. (I'm not an expert here, this was just from some testing and dabbling.)But now (or well, soon), there's going to be a unified ""heex"" format which works in both. You write components almost like React components, their structure is parsed to some extent to catch simple typos and bugs, and c"	losvedir	12.891638	-6.8956275	comment	7.0	29.0	1628091576	12.724955
28124601	That’s assuming CPU bound workloads.	That’s assuming CPU bound workloads. C++ spends just as long as Ruby waiting on a database query.	Retric	12.641015	-6.9758434	comment	7.0	21.0	1628562359	12.340811
28222117	Interesting breakdown of some pros a	Interesting breakdown of some pros and cons of using Elm in production. However, it appears the JavaScript codebase they used for comparison was quite bad and maybe not representative of a good or even typical JavaScript app:> Our JavaScript application had global variables everywhere, and debugging was a nightmarePoint #3 in their list of cons is especially important for anyone considering Elm:> Because Elm is not a mainstream language, it is sometimes necessary to reinvent something that could otherwise have been acquired by adopting a different technology.This is the biggest downfall of Elm projects that I’ve seen in the real world. Teams end up spending half of their time or more solving problems that could have been accomplished quickly with some off the shelf React libraries with num	PragmaticPulp	12.9897585	-7.6679344	comment	7.0	82.0	1629299339	-12.759537
28274168	Deno on MDN	Deno on MDN	monstermachine	12.531262	-6.457504	story	7.0	441.0	1629716231	-11.005885
28392194	Is it just me or are Ruby and Python	"Is it just me or are Ruby and Python cousins.I really really didn't like Ruby when I tried to learn it at work , but Python just clicked. I imagine many Ruby programers migrated to Python.Then again, Nodejs started to take off when Ruby declined. I strongly suspect this is due to all the ""full stack"" positions. Hey Billy, you write all that nice js on the front end, now you can write it on the back end too."	41209	12.510703	-6.649784	comment	7.0	31.0	1630591702	12.326346
22358848	Every RuboCop rule is reasonable. Th	Every RuboCop rule is reasonable. That is, you can look up the reason and see if you agree or not.Our team has overridden about a dozen rules (we bumped up line length and class length), but I find most of the default rules are fine.Out of curiosity, what rules are unreasonable to you?	phaedryx	12.441569	-7.0401654	comment	7.0	24.0	1582051308	-10.911222
22373316	Ask HN: How do I learn Django?	Ask HN: How do I learn Django?	banjodeluxe	12.739379	-6.4961815	story	7.0	9.0	1582183159	10.086023
22459715	I found and fixed a bug in PHP's sta	I found and fixed a bug in PHP's standard library	miguelxpn	12.768965	-6.6317077	story	7.0	167.0	1583100581	10.329636
22544261	The FAQ of comp.lang.prolog is maint	The FAQ of comp.lang.prolog is maintained as a Prolog source file	martinlaz	13.151594	-7.299101	story	7.0	118.0	1583917631	-12.510589
22622910	Hi, Cal Paterson himself here.  It's	"Hi, Cal Paterson himself here.  It's not a Ruby example, it's a Python example.  Don't look too deeply into the code samples for specifics though, they are a pastiche.You are not the only person to get the wrong end of the stick re:""Active Record"".  I'm talking about the Active Record the design pattern, not about the Ruby library that took the pattern as it's name but now is apparently a querybuilder library.  I probably need to go back and make it clearer somehow.EDIT: I've done this now.  Back to stockpiling tinned food and bullets!"	calpaterson	13.069542	-6.494482	comment	7.0	42.0	1584576781	12.26868
22636947	As a JS/TypeScript dev: just give me	As a JS/TypeScript dev: just give me typing, DB schema, and an API in one place.Currently we have TypeORM, which does typing and DB schema but requires you to make a separate API. And we have Prisma, which is a DB schema and API, but still requires you to maintain types.	nailer	12.574551	-6.517655	comment	7.0	27.0	1584706981	9.854815
22797314	I don't understand why people don't 	I don't understand why people don't like Erlang so much [1].  It has many excellent features and the runtime stability is unmatched.[1] https://www.codementor.io/blog/worst-languages-2019-6mvbfg3w...	mycall	12.5516615	-7.513366	comment	7.0	56.0	1586204035	12.924258
22816238	Thank you very much for your interes	"Thank you very much for your interest, I greatly appreciate it!I hope you are all doing reasonably well. Please take care!This book was most recently discussed here in May 2018:https://news.ycombinator.com/item?id=17121028Since then, I have added a new chapter, Logical Foundations of Prolog:https://www.metalevel.at/prolog/logicAlso, I have made several other additions and improvements. You can
see most of the changes since the last discussion in a public git
repository:https://github.com/triska/the-power-of-prolog/compare/8a94ed...Currently, I am working on several videos that will eventually form
the core of the book. Here are a few previews:https:/&#x"	triska	13.146874	-7.2991962	comment	7.0	40.0	1586374669	-12.48187
22818807	> Plain EC2, backend in PHP.That's s	> Plain EC2, backend in PHP.That's slightly horrific. Weirdware NIH deploy system, no containers, PHP.	echelon	12.794044	-6.5215406	comment	7.0	24.0	1586393647	10.243313
22841847	Optimizing Ruby lazy initialization 	Optimizing Ruby lazy initialization in TruffleRuby with deoptimization	kipply	12.590766	-7.058618	story	7.0	150.0	1586615323	12.371224
22857966	Are Tests Necessary in TypeScript?	Are Tests Necessary in TypeScript?	mrbbk	12.337799	-6.87269	story	7.0	17.0	1586799416	-10.45595
22941183	So I've been interested in learning 	So I've been interested in learning prolog ever since I found out it was a language used for AI. I am wondering if it is worth picking up now?Does it change the way one things about interacting with a computer or a problem?Is it something that will soon grow?	hpoe	13.154388	-7.300377	comment	7.0	23.0	1587519709	-12.4874935
22947593	Looks interesting but I am not inter	Looks interesting but I am not interested in making timelines .. is this Phoenix framework general enough to make arbitrary real time web apps?	darepublic	12.885033	-6.835519	comment	7.0	22.0	1587574409	12.672375
23003965	I'm not saying I never ever run into	"I'm not saying I never ever run into bugs due to dynamic types such as method/variable typos, I just think it's much more rare than people make it out to be. If that sort of thing happens a lot in a project you basically have very little tests.
I'm confident in saying it happens to me maybe once in a few months - and that's working in a super dynamic environment of Rails.
The Null error does happen, but that happens in java as well."	joelbluminator	12.470504	-7.139896	comment	7.0	41.0	1588054328	12.365833
23077768	PHP, Python and Ruby all feel to me 	PHP, Python and Ruby all feel to me like last-generation languages. IMO we should be building new frameworks on modern languages that support concurrency & static typing. The most promising new stack I've seen is Kotlin's KTOR framework. Thanks to the expressiveness of Kotlin it's not really any more verbose than something like PHP or Ruby but it's far more powerful and robust.	cageface	12.494483	-6.8143754	comment	7.0	54.0	1588667175	10.400708
23079704	"I'm a PHP ""hater"", so take this for "	"I'm a PHP ""hater"", so take this for what it's worth.You are very close to implying that the language doesn't matter if you can hire developers and there are a lot of good packages in the ecosystem.Having worked on several PHP projects (Most being version 7.0+ and zero of them being older than 5.3), the languages is STILL full of gotchas, and it's a huge drag on productivity. I assert that this DOES matter. Even basic stuff like trying to use the default ""array"" as a dictionary has absolutely ridiculous issues like if you try to use a string as a key, but it is a string of digits. It will automagically convert your string to an int and totally F-up your dictionary.I've actually been bitten by that one. And it showed up in production, because I didn't know or care what the string keys might "	ragnese	12.71371	-6.6710877	comment	7.0	61.0	1588684785	10.283966
23111234	> Ever since I wrote about the whole	"> Ever since I wrote about the whole Python/Gunicorn/Gevent mess a couple of months back, people have been asking me ""if not that, then what"". It got me thinking about alternatives, and finally I just started writing code.I actually want to know: then what? As a web developer who usually reaches for Django or Flask with Gunicorn because I just don't know any better, is there a better stack that doesn't face these problems? Or is this a 'call to action' for somebody to build a better web server that follows this advice?"	robrtsql	12.601143	-6.521732	comment	7.0	30.0	1588909957	9.995972
23182886	Benchmarks are subjective, but all b	"Benchmarks are subjective, but all benchmarks show Ruby as slower than compared dynamic languages. The relative speed difference is different per benchmark, but across the board Ruby is slower.It fundamentally has to be slower. Ruby is the most dynamic of the dynamic programming languages. And the community has embraced metaprogramming, making it every more dynamic. Especially on webservers, you'll be executing hundreds, sometimes thousands, more lines of code than other servers, especially in a mature system.Is it ""slow"" enough to matter? Probably not until you get to a medium scale. Everywhere I've worked, we've had to on average double the hardware specs for Ruby servers to make them as performant as other dynamic language applications we run. Not the most expensive thing in the grand s"	stevebmark	12.647839	-6.9935303	comment	7.0	104.0	1589478603	12.349607
23209538	I wish Ruby was “the data science la	I wish Ruby was “the data science language” tbh. Ruby has some of the most beautiful and concise idioms of any language. I remember the first time I learned procs, blocks and lambdas my mind was blown with how elegant ruby solutions to problems can be. It’s a shame I have to use python instead.	faizshah	12.522715	-7.065802	comment	7.0	37.0	1589689212	12.405101
23234923	I implemented something similar to t	I implemented something similar to that at a payments company a while back, but not with prolog because I couldn't get buy-in. I wrote a rules engine expressed as SQL tables, and it was absolutely better than if-else or switch. It let us delete thousands of lines of code and also slap on a UI so that the people managing the payments rules could make changes themselves. Highly recommend.	ianamartin	13.127444	-7.2657995	comment	7.0	22.0	1589896771	-12.456662
23247232	I agree with a lot of what this arti	I agree with a lot of what this article says.I've recently started a new application in PHP which has very strict time / performance requirements. I could build it in another language, but I'm most familiar with PHP, the thing would take me 4x as long to build in Rust.The default frameworks (Laravel and Symfony) are very slow out of the box, and doctrine / propel are pretty slow as well.I've instead built something entirely brand new using Swoole and an assembled set of very fast and very light Composer packages (namely Fastroute and PHP-DI) and everything else I'm building myself (compromising on reusability and full-featuredness in return for raw performance).I've split the code in to two: one half is the framework, it's concerned with routing, dependency injection, models and hydration,	helldritch	12.701989	-6.665967	comment	7.0	33.0	1589985075	10.296621
23250440	I learned Elixir a few weeks ago as 	I learned Elixir a few weeks ago as a quarantine self-improvement project and pretty much loved it. There are some warts, as in any language. As someone who's primarily worked in Go and Java in the past and has also been learning Rust I don't super love the optional typing thing, and I end up missing higher-level data constructs like interfaces and traits.But there are some great language features, like guards and pattern matching, that are hard to give up when you go back to other languages.Plus it's great to have OTP goodies like GenServer at your fingertips if you run into performance bottlenecks (which you may not!). The OTP APIs are a bit weird coming from other languages but not too bad.Other things I've liked:1. Ecto is simply the best DB library I've encountered in any language. I'	biggestlou	12.6472025	-7.4310923	comment	7.0	54.0	1590001125	12.888401
29355407	Wow I hadn't seen deno before, looks	Wow I hadn't seen deno before, looks great. I dont like js/ts, but if you have to learn it for front end dev, it makes sense to use it at the back too.I'm not sure what advantage Julia has over Python. Yeah it has some typing and can be faster, but its too similar. Still single threaded.	zz865	12.472116	-6.4504285	comment	7.0	60.0	1637969536	-10.900139
29458038	Why Ruby on Rails Is Still a Good Ch	Why Ruby on Rails Is Still a Good Choice in 2022?	lizakatiush	12.737529	-6.9504657	story	7.0	14.0	1638785938	12.338945
29541054	> As TypeScript is a core part of th	"> As TypeScript is a core part of the Deno ecosystem, we are also very interested in pushing for even closer alignment of TypeScript and JavaScript in the future.I've wondered why the frontend community hasn't gotten together and said, ""The next version of JavaScript - is TypeScript!"" I've been using TypeScript for five years professionally now and cannot understate how much easier it has made large frontend (not just Web, but mobile and desktop) projects. Surely enough thought and work has been put into TypeScript to make it the next standard."	disease	12.393193	-6.6698728	comment	7.0	41.0	1639412821	-10.478159
29578467	You should try phoenix and elixir, o	You should try phoenix and elixir, only been playing with them for less than a week and as a long time rails/ruby developer this is what it feels like again.	jfabre	12.752193	-7.048102	comment	7.0	74.0	1639665091	12.581175
29652995	Introduction to Modern Prolog	Introduction to Modern Prolog	Kinrany	13.143003	-7.2979345	story	7.0	78.0	1640196825	-12.485039
34128954	Ask HN: Learning Ruby on Rails in 20	Ask HN: Learning Ruby on Rails in 2022	akras14	12.705998	-6.844182	story	7.0	19.0	1671988754	12.246335
34137769	PHP had the benefit of Facebook pour	PHP had the benefit of Facebook pouring money into it. Same with JS and Google. No company has done something comparable for Ruby.	noyoudumbdolt	12.741705	-6.7177677	comment	7.0	26.0	1672064438	10.55394
34190033	Actually, I think the next big unloc	Actually, I think the next big unlock in user adoption is static typing. Lack of it is frequently cited as the number one reason that makes people hesitate in switching to Elixir. I know it is an active research project right now, and I hope it bears fruit.	enraged_camel	12.653312	-7.4534497	comment	7.0	56.0	1672434066	12.92969
34286242	I find debugging hard when it comes 	"I find debugging hard when it comes to web development.
How can I debug a typescript web app when 1. It will actually be in javascript once it's transpiled and 2. It will run in the browser and not in my ide.
It uses some kind of live reloading dev server that is completely different than the production build.Currently I'm building something with sveltekit and i have no idea how to debug this except logging out messages."	sureglymop	12.332725	-6.5842237	comment	7.0	21.0	1673079921	-10.413305
34294817	Tell HN: Maarten van Emden died on J	Tell HN: Maarten van Emden died on January 4, 2023	herodotus	13.084977	-7.2708254	story	7.0	158.0	1673139047	-12.468835
34301317	Rails authentication from scratch	Rails authentication from scratch	clairity	12.819834	-6.910889	story	7.0	56.0	1673200577	12.370612
34361576	These estimations are pure imaginati	These estimations are pure imagination. I doubt you have `any` real data to support it. Also, that is not the reason why Typescript was created, nor the reason why people adopt it, not even what Typescript really is. Today, almost every Node.js framework supports Typescript out of the box. I challenge you to provide a modern framework that doesn't provide types. And this is not an opinion, nor it is wishful thinking, it is a fact: type checking and strongly typed languages will take over almost every modern software development paradigm.	incompletude	12.34374	-6.8597674	comment	7.0	29.0	1673565078	-10.467546
34401925	> If you're doing Python web develop	> If you're doing Python web development and you have no idea what WSGI or ASGI areASGI may be new to some, but... how is it possible to do Python web development without first learning what WSGI is? I haven't done much Python dev but WSGI seems to be the standard way - what's the less optimal alternative that people might end up with?	lucideer	12.434956	-6.545062	comment	7.0	25.0	1673884776	9.840458
34411460	Why would a new project in 2023 choo	Why would a new project in 2023 choose PHP over anything else (modern Java, Kotlin, C#, etc.)?	oslac	12.776341	-6.6466665	comment	7.0	29.0	1673956527	10.343862
34549726	There's a component that seems to be	There's a component that seems to be missing here which is preemptive task scheduling. I've not seen another non-OS system do it like the BEAM VM (the VM behind Erlang), though there may be something I'm not aware of. It really prevents a whole class of concurrency issues where a hung process can freeze or slow down the entire system.For example, if you recreated gen_server in a cooperative concurrency environment, one gen_server could use up all of the CPU and have an impact on the performance of the rest of the system. Maybe the other threads (microthreads, not OS threads) would still respond in <500ms, but if every request takes 500ms when they normally take 15ms you could essentially have outage-like conditions, particularly with upstream timeouts.Instead, because BEAM is preemptive th	finder83	12.456685	-7.4912705	comment	7.0	41.0	1674843942	12.870656
34578940	It's hard to take Fiver seriously.Fo	It's hard to take Fiver seriously.For example a quick search for 'Ruby Rails' and one of the top service providers lists a premium service of 'full stack development app' delivered in 3 days, and including a 15 minute consultation, a project plan, and audit, for ... $20.	jacknews	12.730513	-6.967848	comment	7.0	23.0	1675082790	12.357803
34625051	Maybe the title would have been bett	"Maybe the title would have been better like this: ""PROLOG: The coding language that finance forgot.""Erlang (the language) is rooted in Prolog, and many of its best traits can be traced back to this fact. That everything is a pattern, and you can pattern match pretty much anything is rarely found in other languages, for example. Elixir made a mistake in my opinion when it went with a Ruby-like syntax.Also, there are those kinds of problems where in Prolog you can express and solve them in a few lines, in other languages you struggle a lot (and at the end you just reimplement half of the backtracing engine anyway - see Greenspun's tenth rule). Why it is not more commonly used in banking / finance is one of the greatest mysteries of life."	haspok	13.020384	-7.326364	comment	7.0	34.0	1675336469	-12.488029
34640416	Scryer Prolog	Scryer Prolog	aarroyoc	13.144202	-7.305388	story	7.0	109.0	1675428852	-12.486271
34746426	TypeScript won. I was watching this 	TypeScript won. I was watching this video by Evan Czaplicki the creator [0], and what struck me was that back then, Evan was absolutely right. He was right that in the high level, we needed a typed JS, but he was wrong in the lower level details, at least in terms of market share. TypeScript won precisely because it doesn't start off as intimidating for JS users, while others like Reason and Elm died off, but ironically TS is way more complex than either of the others in its type system.Another factor for this is that Syntax Matters™. When Gleam (language on the Erland runtime, cousin of Elixir) started out, it had a Haskell-like syntax, but this was found to be a barrier for adoption, so when the creator changed it to be more C and Rust-like, the adoption rate picked up significantly [1].	satvikpendem	12.396821	-7.0324364	comment	7.0	135.0	1676065918	-10.438595
34768218	Interesting to see a different side 	"Interesting to see a different side to the benefits of Deno.Personally, I find direct Typescript interpretation to be one of the best features. Typescript is not necessarily a simple type system, but it is an expressive one:- It has great type inference avoiding Java style codespam- It has gradual typing, enabling ""risky"" type casts- It has fully functional types, enabling the productivity and readability improvements from functions as data- It is 10 seconds away from having dependent typesTypescript took most of the best programming language research from the past 20 years and popularized it in a way that actually makes js hackers more productive without getting too much in the way.The only hard thing has been that js interpreters don't understand typescript, requiring an awkward transpil"	obblekk	12.45331	-6.502581	comment	7.0	39.0	1676243774	-10.853598
35021261	I'm not sure what's exactly problems	"I'm not sure what's exactly problems which liveview tech solves.In real world applications, it's always ""polling"", because you're not sure when server finished your request.Or liveview is for toy application ?Note: You seems mislead the point here, to build interactive apps, of course you can just use websockets. What's more liveview solve ? I guess liveview = html + websocket."	revskill	12.896219	-6.7321467	comment	7.0	36.0	1677942312	12.706516
35086529	I love this thread, it has two of my	"I love this thread, it has two of my favorite HN topics:
1) People shitting on JavaScript not realizing that their ""obviously better"" solution was considered and found not a good solution.
2) People shitting on TypeScript not realizing that conditional types and template literal types are awesome. I really like those type-safe routers (https://tanstack.com/router/v1/docs/guide/type-safety) and fully-typed database clients (https://www.edgedb.com/docs/clients/js/index#the-query-build...)."	jakubmazanec	12.367832	-6.810066	comment	7.0	67.0	1678395129	-10.439841
20927998	Migrate to python 3. Migrate to Djan	Migrate to python 3. Migrate to Django 3. Migrate to next version of Django Rest Framework.The cost of maintenance is very high in the Python/Django stack those days!	julioo	12.825218	-6.5345445	comment	7.0	21.0	1568122653	10.036163
13652738	This is a trivial Flask file uploadi	"This is a trivial Flask file uploading application, with a ""code name""-based feedback system, wrapping GnuPG's Python bindings, intended to be run on Tor.The security it provides is marginal, but it's so simple that it's not the part of anyone's stack that's most likely to be compromised.I think a significantly better version of this could be built. What makes doing that tricky is that you want to retain the almost hello-world simplicity of this app, because the big reason not to run something like this is the likelihood that the server itself will have flaws.On the other hand, it's 2017, and you can also accept files over secure messengers.LaterAmusingly, people seem to think that these are bad things to say about an application like SecureDrop."	tptacek	12.6240225	-6.4909124	comment	7.0	33.0	1487173388	9.862019
13660820	Michael Hartl's Rails tutorial (http	Michael Hartl's Rails tutorial (https://www.railstutorial.org/) is a great example of this.It'll run you through building a twitter clone and introduce you to git, heroku, a bit of CSS/HTML, and even goes into AJAX a bit.I can't recommend it enough to people looking to get into rails.	rickr	12.748117	-6.9240713	comment	7.0	33.0	1487260140	-12.576292
13713389	Converting a large React Codebase fr	Converting a large React Codebase from Coffeescript to ES6	conversar	12.442014	-6.525935	story	7.0	42.0	1487853491	5.46303
13789117	I've wanted to use Phoenix a few tim	I've wanted to use Phoenix a few times but every tutorial to get me started relied 100% on ecto which for something like a transformation API was frustrating. I didn't want the complexity of a database I wanted to learn the request lifecycle in it. Overall, it was challenging with too many resources being out of date or just so focused on a different type of API than I needed to build	kkirsche	12.761661	-7.17947	comment	7.0	21.0	1488599341	12.789118
13862211	Ask HN: Stick with Flask or Learn Ru	Ask HN: Stick with Flask or Learn Ruby on Rails?	methochris	12.709025	-6.9282384	story	7.0	14.0	1489438209	-8.98478
14080904	What are the worst parts of PHP?	What are the worst parts of PHP?	justinzollars	12.779079	-6.6361513	story	7.0	9.0	1491846736	10.3453455
14121144	I think it comes down to this: with 	I think it comes down to this: with Elixir, you gain a lot over Ruby and lose very little. Any Elixir app will be significantly more performant and reliable than its Ruby counterpart. This is due to several reasons:- Elixir runs on a battle-tested virtual machine, and stuff like supervisor behavior (e.g. auto-restart of crashing processes) is built right in- Elixir is a functional language, which makes the code you write more testable- State in Elixir is immutable, which greatly reduces the side effects of running codeI used to develop in Ruby circa 2014-2015. It will always have a special place in my heart, but to be frank, I don't really miss it. Elixir, as a language, is better in almost every way. And once the ecosystem becomes a bit more mature, it will be unstoppable (OK maybe not re	enraged_camel	12.688535	-7.3982162	comment	7.0	57.0	1492270439	12.868858
14136630	TypeScript at Slack	TypeScript at Slack	joubert	12.372865	-6.847396	story	7.0	49.0	1492492228	-10.481373
14191878	Ask HN: In your opinion, what is the	Ask HN: In your opinion, what is the current state of Ruby?	amorphid	12.681789	-7.002744	story	7.0	13.0	1493111284	12.37085
14213642	Ok, I've used TS while contributing 	"Ok, I've used TS while contributing to OSS written with TS and I've used Flow extensively in production settings.The main takeaway for me is that TS is much much less sound than Flow. That means it checks less invariants which in turn makes you less trust it...Consider the following code which is valid (!) in TS:    let promisedString: Promise<string> = new Promise(
      resolve => {
        // Perfectly valid in TypeScript!
        resolve(42)
      }
    )

Another downside of TS is poor type inference. It requires to annotate each top level function while Flow only requires to annotate exported functions.Even the following simple piece of code will make TS ask you to annotate doAddition function:    export function addition(a: number, b: number) {
      return doAddition(a, b)
    }

 "	andreypopp	12.424986	-6.7437973	comment	7.0	32.0	1493317209	-10.458604
14378134	I'm kinda shocked that Ruby boot tim	I'm kinda shocked that Ruby boot times can be up to 25 seconds for a monolithic app.A Python project I work on has 279,124 lines of code and boots up in 2.5 seconds.Without downloading it, all I can find is Discourse had 60,000 lines of code 3 years ago [1]. Assuming as an extreme estimate they tripled their code size in 3 years, we have 180,000 LOC taking 6 seconds to boot up according to the article.Is this normal for Ruby? Is the author using a spinning disk drive rather than an SSD?[1] https://github.com/bleonard/rails_stats	dismantlethesun	12.60675	-6.9977274	comment	7.0	23.0	1495217937	12.338825
14387915	I'm familiar with dry-rb coding styl	I'm familiar with dry-rb coding style and I think it is very difficult to reason about. Metaprogramming often feels like magic but it comes at a price - hard for newbies to grok and impossible for static tools to work with. I would only advise using it (if at all) in well-tested libraries that expose a well-documented public API.	fishnchips	12.550565	-7.077434	comment	7.0	26.0	1495383537	12.390326
14387241	I made a Phoenix webapp as a veteran	I made a Phoenix webapp as a veteran Rails dev	stanislavb	12.792922	-7.085207	story	7.0	83.0	1495373969	12.590406
14458368	Perl 5.26.0 released	Perl 5.26.0 released	abhinickz	12.331972	-7.0323925	story	7.0	133.0	1496298200	13.19769
14577114	There are a whole host of alternativ	There are a whole host of alternative Ruby language implementations out there, but I only see MRI and sometimes JRuby in the wild. The same goes for Python: largely compatible alternative interpreters like PyPy have existed for years, and often have better performance than the CPython standard interpreter.Why don't we see more adoption of alternative runtimes? Why doest the community push for the adoption of higher performing implementations as the standard? Does anyone run a more esoteric interpreter for one of these languages in production?	jitl	12.527791	-7.0420237	comment	7.0	39.0	1497724844	12.376133
14618800	I wonder how one creates puzzles lik	"I wonder how one creates puzzles like this (or indeed creates Sudoku puzzles).  I can think of a few strategies1. Lovingly hand craft them. Extremely labour intensive!2. Generate random grids and repeatedly remove elements.  If that leads to a puzzle with more than one solution, backtrack.3. Add random elements to an empty grid.  Eventually the grid will have one or zero solutions.  If zero, backtrack.  If one, stop.Finally, classify the difficulty using some heuristic.Does anyone have a better strategy?  Is there some ""analytic"" property that guarantees uniqueness of solutions without resorting to some black box solver?"	tome	13.44957	-7.4083476	comment	7.0	26.0	1498222666	15.076684
14648064	I only know a little bit of JavaScri	I only know a little bit of JavaScript, what's the best way to learn TypeScript? Read Eloquent JavaScript then some TS related stuff? Or is there a TypeScript for Dummies that don't know JS?	zeusly	12.354341	-6.781272	comment	7.0	21.0	1498589023	-10.516996
14674131	If you want runtime assertions with 	If you want runtime assertions with flow you can use flow-runtime [0].Babylon merged TypeScript support yesterday [1]. This means that in the future it should be easier to setup Babel with TypeScript.I agree with the decision to go with TypeScript. It has drastically better community support. Most third-party components won't have flow annotations. Flow would've been a lot more successful from the start if it had started out with DefinitelyTyped support. Heck, even now I'm still wondering why they don't do that.[0] https://codemix.github.io/flow-runtime/#/[1] https://github.com/babel/babylon/pull/523#issuecomment-31172...	TheAceOfHearts	12.449936	-6.742056	comment	7.0	35.0	1498864489	-10.470875
30821734	I stopped using PHP. The language it	"I stopped using PHP. The language itself is fine, but PHP doesn't include a package manager. People will shout ""but composer!"", That is not PHP. That is a third party tool. What Rust understands, what Go understands, what Ruby understands, is how important the package manager is to the language.No one is an island, and ""batteries included"" only gets you so far. In my mind, PHP is in line with C, with the mindset of ""figure it out yourself"" in regards to packaging. That's not acceptable."	svnpenn	12.745277	-6.6489882	comment	7.0	39.0	1648399857	10.320116
30824206	> PHP is probably the best language 	> PHP is probably the best language for server side webdev today.What are your credentials with non-PHP, non-JS/TS languages? Have you written some Rust, Kotlin, Swift, ReasonML/ReScript/OCaml, Haskell, Elm or Clojure? Those languages are different to some extend, they take fresh approaches, they contain new ideas and are scrape throat well designed.I find most cheering for PHP and JS have very little exposure to other camps of software development.> PHP is probably the best language for server side webdev today.I'm telling you (opinion ahead), it most likely is not. And most likely will never be. It simply has too many fundamental design errors that have long known solutions, are near impossible to fix in PHP/JS and are fixed-by-design in other languages that also have good tooling for we	cies	12.72443	-6.636186	comment	7.0	39.0	1648415603	10.312842
30920009	I went through the MOOC material and	I went through the MOOC material and tried it out for a few small things. It inherited a lot of the unique Smalltalk features which make it sort of alienating to a modern programmer. For instance, all your code resides in an image file, and if you want a copy of your code the environment does some extra epicycles to copy it outside. The choice to make everything a message, including basic flow control takes some getting used to. As you just sort of hack your image to do what you want, it just sort of turns into a ball of mud. The paradigm they're going for is TDD for everything. Personally, I feel this is a big step backwards from most mainstream scripting languages adding on type annotations. It's not easy to use a simple text editor. You pretty much have to use their integrated environme	ok123456	12.336642	-7.290263	comment	7.0	57.0	1649171375	7.11491
31190376	Explorer – A library to bring datafr	Explorer – A library to bring dataframes to Elixir	ahamez	12.65858	-7.351158	story	7.0	124.0	1651137843	-10.484556
31246778	> PHP has the world's simplest deplo	> PHP has the world's simplest deployment model for web applications: copy some files to a directoryAnd set up a webserver. Perhaps compile mod_php for Apache and configure it, taking care to do it securely. Then configure php too, again taking care to do it securely. Only then you can drop a bunch of files in a docroot and have PHP process them. And put some .htaccess files in so that things that aren't supposed to be directly executed can't be. I think it all just appeared simple, but it wasn't. It was dumb luck and lowest common denominator configurations on shared hosting that made it appear easy.	dissent	12.788741	-6.5323954	comment	7.0	55.0	1651574947	10.237023
31282524	I don't like such changes. Php 8 had	"I don't like such changes. Php 8 had a lot of breaking changes and upgrading it is already an arduous task. If I don't upgrade then package will demand php 8. If I don't upgrade package & language then I must stay alert of security vulnerabilities. And, changes like this makes relearning difficult. I wonder why majority of people in rfc voted ""yes""Thankfully I am investing in Rust language which has stability guarantee. In my opinion language shouldn't move fast. There should be balance. All those tutorials, guides become useless. There is a reason why COBOL is still used for 90%+ atm swipes."	cute_boi	12.766334	-6.6495852	comment	7.0	26.0	1651823519	10.316184
31323334	Catalog of Elixir-specific code smel	Catalog of Elixir-specific code smells	sbuttgereit	12.670813	-7.4479265	story	7.0	107.0	1652155520	12.943398
31347330	I honestly love Ruby and Ruby on Rai	I honestly love Ruby and Ruby on Rails, but I can't understand why companies like Shopify and Github go through so much effort to scale Ruby especially at their size. Maybe I am wrong, but couldn't this effort be put to rewriting parts of it in a more performant language like Go or Rust? One has to imagine that they have a large code base, how much developer time is spent writing Tests for Ruby? How much time was spent debugging odd monkey patching gems over the life of the codebase?I do get that developer time was/is more expensive than servers. But I am not so sure at some level of scale. When you need 100 servers vs 5, and need to spend so much testing effort dealing with dynamic language, etc. And then you build custom compilers, special tools for tracing, entire architectures to deal 	onebot	12.714189	-6.96856	comment	7.0	35.0	1652311797	12.337407
31557111	This was my go to for learning Flask	This was my go to for learning Flask, I wish I never found it. Flask has a very niche use case in my opinion and if you need something to scale (in terms of code complexity) Flask is the absolute worst decision you can make.Try Django instead. If you read my comment history you'll see that I learnt this the hard way.	parham	12.693289	-6.620068	comment	7.0	35.0	1653903128	10.047334
31569482	Lunatic brings Erlang's principles t	Lunatic brings Erlang's principles to WebAssembly	aroccoli	12.522114	-7.4187436	story	7.0	143.0	1654005166	7.5000777
31664568	Understanding UI Components in Elm	Understanding UI Components in Elm	KasMA1990	13.009805	-7.6851788	story	7.0	50.0	1654675305	-12.747708
31666511	I'm not a fan of the idea of leverag	"I'm not a fan of the idea of leveraging TS types at runtime. This is just a lock-in to TS, even if type annotations become a thing in JS.
I don't like ORMs that use runtime types either. Most of the time, I want to write raw SQL.So as an experiment, I created a library that statically types raw SQL:https://github.com/nikeee/sequeltsThe idea is to parse the SQL queries using TS's type system. The parsed query is combined with the database schema and therefore, we know what type the query will return.This is especially useful due to TS's structural type system.
It's also zero-overhead due to the entire functionality being just TS types, which vanish as soon as we compile. It therefore also works JS-only.However, it's just a proof of concept. I'm working on an ANTLR target for TS types, so th"	nikeee	12.5552435	-6.6978602	comment	7.0	28.0	1654692709	9.91286
31727997	Companies justify using Rails public	"Companies justify using Rails publicly because it makes financial sense.There's this meme that Rails ""just doesn't scale"" and is ""yesterday's software"", but neither are necessarily true.  Ruby isn't the fastest language, but it's now competitive enough that the same critics might as well throw Python under the bus while they're at it.  There's things I don't like about both Ruby and Rails, but it's a perfectly viable and productive way to build websites.  A very scant number of businesses need to be at the scale of Twitter or The Google, in which case Rails can be a great choice.But I imagine Rails is being increasingly dismissed by newbie developers as being obsolete and not-cool.  Mature companies may realize it's in their best interest to communicate that their boring-tech works just fi"	ravenstine	12.746936	-6.9476604	comment	7.0	39.0	1655138586	12.342475
39363826	> So, what is Polars? A short descri	> So, what is Polars? A short description would be “a query engine with a DataFrame frontend”.Guess that would help if I already knew what a dataframe is!	369548684892826	12.33173	-6.533417	comment	7.0	47.0	1707863898	10.142676
39428726	I finally had a chance to write some	I finally had a chance to write some PHP that (a) wasn't WordPress and (b) actually did something useful a few weeks ago at $DAYJOB.Going from zero to functional web backend in less than 3 hours for a language I'm almost totally unfamiliar with made me understand just why this got so gosh darn popular. I thought building out a Flask application was fast, but PHP's initial experimentation loop is just on another level, criticisms be what they may.	hiAndrewQuinn	12.738566	-6.618476	comment	7.0	87.0	1708342963	10.302844
39568536	TSDiagram – Diagrams as Code with Ty	TSDiagram – Diagrams as Code with TypeScript	_andrei_	12.360278	-6.7524915	story	7.0	62.0	1709338851	-10.439535
36615184	Really, all the performance intensiv	Really, all the performance intensive parts are in various c++ aggregator and recommendation type services. But the webserver is Django, yes.	kleton	12.788872	-6.5448837	comment	7.0	97.0	1688648972	10.065342
36821871	Using Prolog in Windows NT Network C	Using Prolog in Windows NT Network Configuration (1996)	zdw	13.147714	-7.2941217	story	7.0	121.0	1689985492	-12.486222
36987805	What a terrific write up!  I highly 	"What a terrific write up!  I highly recommend the read.I too had an ephiphany when I realized Elixir was actually a Lisp.  The language went from mildly interesting to ""holy crap I think this could be my favorite language.""  Add on some wildly productive and pragmatic frameworks like Phoenix, Nerves, and increasingly Nx, and you've got a hell of a toolkit.My biggest criticism of Elixir has been the difficulty of writing quick scripts, but that story has improved greatly over the last couple of years.  I still turn to Ruby for scripts (especially since it's often present on systems and so easy to install), but this is a good reminder that it's time to try Elixir again for that.  In some ways it may be better, such as dealing with dependencies.  For exmaple I try hard to avoid using any non-"	freedomben	12.676548	-7.4261417	comment	7.0	45.0	1691078933	12.920138
37122798	Why not allow function literals that	"Why not allow function literals that define multiple arity implementations? Something like...    def sum(list) do
      plus = { 
        fn -> 0 end ; 
        fn x, y -> x + y end  }

      Enum.reduce(list, plus(), fn x, y -> plus(x, y) end)
    end

Also throwback to when I decided to rant about Elixir for some reason 6 years ago, with the final comment:    Converting a Module Function to a First class function (&Math.square/1): 
      Why do you make me lose the ability to use Elixir's admittedly powerful Pattern matching on arity feature?"" 

https://gist.github.com/JacksonKearl/57b617de38b1c647ec41404..."	jakear	12.529182	-7.443914	comment	7.0	60.0	1692029745	12.931428
37304916	By the title alone, this means nothi	"By the title alone, this means nothing. How much would it cost otherwise? What is the percentage savings?In TFA, it gets better though: ""Steve: That’s pretty easy. When I started on the spam team, we had close to 1,400 servers running. When we converted several parts to Elixir, we reduced that by around 95%. One of the systems that ran on 200 Python servers now runs on four Elixir servers (it can actually run on two servers, but we felt that four provided more fault tolerance). The combined effect of better architecture and Elixir saved Pinterest over $2 million per year in server costs. In addition, the performance and reliability of the systems went up despite running on drastically less hardware. When our notifications system was running on Java, it was on 30 c32.xl instances. When we s"	coldtea	12.643751	-7.424798	comment	7.0	265.0	1693298673	12.922034
37429922	Unpacking Elixir: Syntax	Unpacking Elixir: Syntax	lawik	12.654609	-7.4632106	story	7.0	124.0	1694152647	12.933295
37449926	What is missing from the web framewo	"What is missing from the web framework space is a headless ui components merged with a db layer. Most of these frameworks repeat old patterns. Nothing has been able to break through and give us something truly revolutionary like Rails did.Web frameworks need to be a visual medium where you can create ui using visual tools and the ""backend"" side of things merge seamlessly."	ilrwbwrkhv	12.724849	-6.7490816	comment	7.0	39.0	1694291139	12.294304
37451821	I don't believe by modern standard t	I don't believe by modern standard that Elixir is aiming at low latency.	Thaxll	12.650567	-7.46187	comment	7.0	38.0	1694306760	12.910545
37477602	Curious to learn whether Prolog is s	Curious to learn whether Prolog is still an integral part for contemporary CS (proposition, predicate) Logic curriculum, natural language parsing, etc. I suppose that the built-in backtracking was the most controversial aspect, so maybe attention has shifted to Erlang, Haskell or esoteric languages like (wild) life?Anyone currently in education care to comment?	pipo234	13.136492	-7.2967777	comment	7.0	24.0	1694501227	-12.491528
37481799	I'm a big Elixir fan, but unfortunat	"I'm a big Elixir fan, but unfortunately Phoenix is starting to suffer from an overuse of LiveView.LiveView is great, but it's sort of becoming the default way to render everything--even static pages! TFA is a good example of this, where they use a Live view to render...a static list of icons.The problem with this is twofold:- LiveView is not free. It seriously affects people with unstable connections, for example. It creates a new class of silent bug at the client/server interface, where the client just sees ""broken"" pages (instead of 500 pages).- It adds cognitive overhead. We bloody know how to do server side rendering. We've been doing it for 30 years (!). It's a good model. Don't make me learn something else, please.Phoenix, which is a jewel of a framework, is risking becoming an ""SPA-"	el_nahual	12.8825865	-6.8841486	comment	7.0	24.0	1694528670	12.717323
24441841	Implement BeamAsm – A JIT for Erlang	Implement BeamAsm – A JIT for Erlang/OTP	di4na	12.553068	-7.4936028	story	7.0	233.0	1599826449	-8.957065
24462842	Can someone explain like I'm five wh	Can someone explain like I'm five what Deno is and what it's for? Is it for the desktop or web applications? What practical things can you / should you do with it? I just can't get my head around what it does.	skyfaller	12.510724	-6.449387	comment	7.0	42.0	1600021500	-10.936037
24507313	I swore this was going to be about s	I swore this was going to be about some CoffeeScript + Rust monstrosity	hstaab	12.406324	-6.6445336	comment	7.0	23.0	1600363239	-10.5354185
24594524	No, metaprogramming is a stain on so	No, metaprogramming is a stain on software engineering that all ecosystems are moving away from. Except Ruby.	stevebmark	12.402099	-7.059095	comment	7.0	23.0	1601070949	-7.527708
24605886	Why do you want that? Interestingly,	Why do you want that? Interestingly, Joe Armstrong said that people always asked about a static type system, but he couldn’t figure out the value of them. They were able to build extremely reliable systems with Erlang’s existing type system. And he mentioned at least one project that was 2 million LOC, so these weren’t just toy projects.So what are you unable to accomplish in Erlang that makes you feel like it’s missing something?	amw-zero	12.445999	-7.5018225	comment	7.0	97.0	1601206771	-8.946554
24615987	TypeScript is becoming such a compel	TypeScript is becoming such a compelling language due to its insanely advanced type system (that allows for projects like this) that I now want to use it everywhere. I want it to become the next Python.I know Deno is supposed to be first class TypeScript but under the hood it's still a JavaScript runtime with all the baggage that comes with that.AssemblyScript is extremely interesting but last time I played with it I concluded it wasn't yet ready for anything serious, or is that no longer the case?A first class TypeScript runtime with no JS overhead would be a dream come true. I just hope it happens someday, or that other type systems get these amazing features.	cjdell	12.3715725	-6.658223	comment	7.0	108.0	1601296817	-10.477208
24654954	What you said is rarely stated in pu	What you said is rarely stated in public, but I've often felt it too: OTP obscures the underlying beauty of the Erlang platform.OTP is well engineered of course, but the basic notion of the spawn -> receive -> loop cycle is so clean and illuminating that I wish newbies would hold out before learning OTP sometimes.It's natural to think of case-specific abstractions around the primitives that are more germane to the domain at hand than OTP's.	tlack	12.556172	-7.506693	comment	7.0	31.0	1601579215	12.9066925
24698592	I started to learn Elixir and Phoeni	I started to learn Elixir and Phoenix awhile ago. I liked it but stopped due to (i) there's no job opportunities near me for Elixir and I wanted to the learning/projects I do on my own to help me in interviews; and (ii) it's not a strongly typed language which I have come to learn is my favored type of language	bot41	12.66856	-7.461794	comment	7.0	56.0	1601997514	12.923554
24753281	Wow what a golden, glittering, grace	Wow what a golden, glittering, graceful submarine. A lot of firms would pay 10x to have this kind of article written about them.The problem is that while I think some devs are better than others, I'm not a big fan of the superstar idea. The only area where you can even have indentifiably top performers is in sports, where you have a contest that someone is going to win, and you want to pay up for the guy who is marginally better than the next guy.I don't doubt that the Django guy would be useful for writing a Django app. The question is how big is the gap between him and someone who's been using Django for a few years, even without contributing PRs to the project. Do the thought experiment in your head of whether you could tell the difference between code written by one guy or another. For	lordnacho	12.835584	-6.521822	comment	7.0	40.0	1602501544	10.041699
24866810	Seriously, enough with PHP. Can we j	"Seriously, enough with PHP. Can we just let it die?I worked with PHP 5.6 years ago and I hated it.Recently I worked with PHP 7. Heard about all the work that's been done on it and I was kinda excited to try it.
It's still so broken. It doesn't matter if they improve performance or add new cool features. PHP is broken in ways that can't be fixed without breaking compatibility. Fork it or put it out of its pain."	pietrovismara	12.774339	-6.6318307	comment	7.0	60.0	1603437412	10.329903
24936823	I love rails, but despite its presen	I love rails, but despite its presense for over a decade, it doesn't feel mature.Something as basic as a native left join in ActiveRecord wasn't added until Rails 5.0, on June 30, 2016.Something as basic as native multiple database support wasn't released until Rails 6.0, on August 16, 2019, 15 years after its initial release...These are just two examples.	herpderperator	12.782297	-6.9084992	comment	7.0	30.0	1604010209	12.314633
25048608	"DigitalOcean ""pulled the rug out fro"	"DigitalOcean ""pulled the rug out from under"" Ryan Bates (RailsCasts)"	waffle_ss	12.732574	-6.96712	story	7.0	75.0	1605029947	12.341641
25101085	> (...) I’ll have mature teammates w	> (...) I’ll have mature teammates who understand the right tool for the right job. IHonest question: what leads you to believe that Ruby on Rails, or even Ruby, is the right tool for the right job? You didn't even mentioned the job, so why do you automatically assume Ruby is the right tool?Additionally, by ignoring popularity you're also ignoring availability of documentation and examples and mindshare. You're also ignoring experience, and prior onboarding into a language stack, which automatically means odds are anyone onboarding into the project will quickly be up and running.Speaking as someone who was forced to onboard into a Ruby project just because a predecessor jumped on the bandwagon, the experience was an unmitigated disaster. A minor onboarding task that consisted of tweaking a	rualca	12.699658	-6.960583	comment	7.0	28.0	1605447577	12.366716
25102009	I’m also a big fan of rails, but I’v	I’m also a big fan of rails, but I’ve experienced a lot of problems scaling it. A lot of the problems ultimately came down to the simple fact that Ruby is really, really slow. At a certain scale you end up forced to develop infrastructure on a different stack to keep up with the CPU load. I never ran into that so quickly when building similar systems with java, go, and C#.I wanna say something nice about rails too so I’ll say I have never seen a team so quickly deliver high quality web app features than a well oiled rails team. It’s something to behold.	ffdjjjffjj	12.757114	-6.9160466	comment	7.0	53.0	1605455033	12.339561
25158901	What I didn't know about Ruby Classe	What I didn't know about Ruby Classes	olivdums	12.490694	-7.0826826	story	7.0	86.0	1605865609	12.370494
25175474	I think it's more that the massive e	I think it's more that the massive engineering effort that's gone into improving JS has leapfrogged it over languages like Python, Ruby & PHP in terms of performance and tooling. And since you're stuck with JS on the frontend there are some significant advantages to using it on the backend as well.I don't think any of the current JS frameworks are as comprehensive as Rails but it's clear where the momentum is.	cageface	12.698519	-6.634462	comment	7.0	54.0	1606027075	12.297918
25257657	Adopt your elePHPant now, the only o	Adopt your elePHPant now, the only original PHP elephant	waskip	12.766563	-6.6319494	story	7.0	21.0	1606763779	10.318932
25321383	I feel like I have to ask: where are	I feel like I have to ask: where are you getting a server that'll run arbitrary erlang code for 2 bucks a month? The absolute cheapest I've seen seems to be 5, from digitalocean/linode	gorgonzolachz	12.559575	-7.514979	comment	7.0	25.0	1607233159	12.930104
25424034	ReScript 8.4	ReScript 8.4	jesperlang	12.337429	-6.9090834	story	7.0	71.0	1607983586	-10.516995
38687862	My question is what's next? Without 	My question is what's next? Without sacrificing (much) memory. We know from TruffleRuby that given enough warmups and lots of memory it could be multiple times faster than CRuby. And compared to Ruby 3.3 YJIT may be 2-3x faster. But it seems the communities as a whole cares a lot about memory usage.We know in order to make JIT more useful we need to move some of the Gems from C to Ruby. But other than that do we have anything on the table that will significantly speed up Ruby Rails?	ksec	12.630321	-7.015135	comment	7.0	34.0	1702931899	12.361773
38689083	It's interesting how different langu	It's interesting how different languages resonate so differently with each of us. I have tried a bunch of languages, and got pretty deep into ruby at one point in time when rails was the main web framework i was using. However ruby is probably my least favorite language. Most of the features which actually make ruby unique are exactly the one that turned me away and toward something like F# when i want funtional goodness, C++ when i feel adventurous and scheme/racket when i want dynamic language fix.> Ruby is probably the most expressive programming language on EarthI wonder if there is a generally accepted quantifiable definition of programming language expressiveness. Here the author seems to equate it to closeness to natural languages.In my experience, ruby code is easy to write, but ha	soulbadguy	12.580284	-7.06561	comment	7.0	37.0	1702937408	12.387142
38689147	I love Ruby too. It's a great langua	"I love Ruby too. It's a great language, and as a language I like many things about Ruby a lot more than python. In particular, chains of functional operations like:    arr
       .map{|o| ... }
       .reject{|o| ...}
       .reduce(init_acculm){|init_acculm, o| ...}

are super super clean and expressive. Very similar to what I like about Java streams.And the library ecosystem is great, I like how it shares spiritual similarities with python where libraries are very ""no nonsense"" (you don't need extensive configuration and builders and researching a million configuration items etc etc... looking at you, Java) and you typically just import and go. Rails, of course.I keep picking python over ruby though, for things I'm going to have to actually maintain. And I typically pick Java over python"	atomicnumber3	12.514508	-7.025722	comment	7.0	43.0	1702937735	12.359267
38689205	I think the point about expressivene	I think the point about expressiveness is exactly what makes ruby so divisive: It is great when you are deep within the ecosystem or do exactly what the ecosystem expects you to want to do, and an absolute pain if you want to do anything non-standard.The supports_feature-method is probably defined somewhere 5 abstractions deep. If you are lucky that is, it might also be  part of some library's weird meta-programming of supports-* that no LSP can point you towards. I've never worked in an ecosystem that celebrates implicitness as much as ruby does, and it is driving me nuts.The fact that finished code looks great and reads well doesn't balance the scales in my book.	bakuninsbart	12.519587	-7.0708823	comment	7.0	59.0	1702938002	12.415468
38707275	Update tinsel bunting	Update tinsel bunting	petepete	12.471925	-6.443702	story	7.0	61.0	1703069638	-7.631993
38760826	I believe with version 3.3 Ruby is b	I believe with version 3.3 Ruby is back in a big way! The language focused on developer happiness and derided for its slowness is slow no more.YJIT is an amazing technology, and together with other innovations like object shapes and various GC  optimizations, Ruby is becoming seriously fast! Big Ruby shops such as Shopify [1] have been running 3.3 pre-release with YJIT and reporting double digit percentage performance improvements.Personally I'm really excited about Ruby and its future. I can't wait to start working with Ruby 3.3 and using it on my client's production sites...[1] https://railsatscale.com/2023-09-18-ruby-3-3-s-yjit-runs-sho...Edit: add percentage to performance improvements.	ciconia	12.641071	-7.035932	comment	7.0	153.0	1703492538	12.367329
38914335	CGI as in a command line program lyi	CGI as in a command line program lying on the disk, executed on every request and the output sent to browser is dog slow.Convert this one to fcgi, and it will get as fast as any other solution. In fcgi mode it runs as a service listening to a socket and reads and sends response over it while never terminating.Even php running on fcgi mode is far faster than the old styled mod_php.	habibur	12.556022	-6.4707	comment	7.0	43.0	1704731170	9.663181
38920285	Biggest advantage I found when I eva	Biggest advantage I found when I evaluated it was the API was much more consistent and understandable than the pandas one. Which is probably a given, they’ve learned from watching 20 major versions of pandas get released. However, since it’s much rarer, copilot had trouble writing polars code. So I’m sticking with pandas and copilot for now. Interesting barrier to new libraries in general I hadn’t noticed until I tried this.	maliker	12.34703	-6.5480294	comment	7.0	38.0	1704758077	10.148305
39016118	This whole blog post is essentially 	This whole blog post is essentially an advertisment for why statically typed languages can prevent such madness. I'm sorry -- it is not my intention to start another non-useful static/dynamic typing debate.It seems crazy that when a new version of Ruby comes out, developers need to hunt for runtime errors (that may or may not trigger depending on the path the application took) to see what incompatibility needs to be fixed.Take any decent statically typed language. When a new version of the language comes out, your code will not compile on constructs or functions that are no longer called or present or used the way they should.	sidkshatriya	12.437062	-7.1405005	comment	7.0	30.0	1705426600	12.381455
39055517	Gleam's New Interactive Language Tou	Gleam's New Interactive Language Tour	crowdhailer	12.512962	-7.434041	story	7.0	91.0	1705672944	-12.331441
32570228	I'll agree, and disagree.I made a si	"I'll agree, and disagree.I made a similar comment in 2019 about ""TS pushes you towards simpler APIs"" [0], so I agree that it's both a good thing in principle, and something TS usage leans towards in practice.At the same time... JS _is_ a very dynamic language, library design reflects that, and library code by its very nature must account for the different ways that users will want to call it.  That causes library types to be much more complex than app types.[0] https://blog.isquaredsoftware.com/2019/11/blogged-answers-le..."	acemarke	12.344036	-6.77644	comment	7.0	48.0	1661283317	-10.490928
32592652	An Introduction to Ractors in Ruby	An Introduction to Ractors in Ruby	ksec	12.5725355	-7.0390353	story	7.0	88.0	1661429688	12.372934
32686520	i've seen that said so many times, a	i've seen that said so many times, and fail to understand why Ruby syntax brings joy.Personally, I thought the muddled Proc, block, and lambda situation a mess, coming from Scheme 30 years ago to Ruby 20 years ago.	jjtheblunt	12.484512	-7.1083875	comment	7.0	23.0	1662092201	12.394001
32726455	Ask HN: What is your reason for not 	Ask HN: What is your reason for not choosing to use PHP for your next project?	punkpeye	12.759807	-6.6586685	story	7.0	3.0	1662397080	10.354511
32823056	The big takeaway here for me is that	The big takeaway here for me is that Akka has changed license to BSL.It's almost crazy to me that such a fundamental and widely used project would switch to such a restrictive license.Some more details here: https://coralogix.com/blog/akka-license-change/> Lightbend are operating on a “per core” model, with their base license starting at $1995 per core (defined as a thread or vCPU)> The license is only enforced if your company earns over $25 million in annual revenueI guess Lightbend is really struggling, but this is probably the end of Akka outside of niche markets / large enterprises.edit: HN discussion - https://news.ycombinator.com/item?id=32746807	the_duke	12.352579	-7.378249	comment	7.0	45.0	1663069623	12.670751
33017401	"Competitor to TypeScript? 
Any insig"	"Competitor to TypeScript? 
Any insights into advantages / disadvantages?"	andsoitis	12.380757	-6.746132	comment	7.0	27.0	1664435399	-10.397707
33049780	Honest question: why did TypeScript 	Honest question: why did TypeScript succeed while ActionScript 3.0, another ECMAScript-superset language with typing and OOP (and predates TS by a few years), is all but a distant memory? Is it more than just Adobe being a terrible steward of its tech?With that said, TS is definitely a blessing; I recently had the privilege of migrating to it after having written a hobby project in plain JS, and the difference in usability between the two is night and day. But I can't help but feel that I've seen this all before years ago in AS3.	mr_johnson22	12.354884	-6.699194	comment	7.0	25.0	1664656050	-10.433332
31824914	Hey HN,I'm Adrian, an indie develope	"Hey HN,I'm Adrian, an indie developer and creator of Avo. For more than ten years, I built countless admin panels and back-offices for all types of apps. After a while, you start to notice patterns and extract functionality away to make the job easier. I took those patterns and applied them to Avo.
Now, in just an hour, a developer can build production-ready applications that with traditional coding techniques take a few days, if not weeks.Avo is suited to agencies that build a lot of products for their clients and need to move fast and have a beautiful and robust UI, indie developers trying to test out their ideas fast, technical teams in companies of all sizes that need to build internal tools based on Ruby, and start-ups.Avo runs on top of Ruby on Rails, which is a powerhouse of a frame"	adrianthedev	12.717357	-6.718194	comment	7.0	41.0	1655824584	12.335057
32054532	Building a Cache in Elixir	Building a Cache in Elixir	revorad	12.6765785	-7.4276724	story	7.0	88.0	1657537315	12.93094
32237356	Hacking Perl in Nightclubs (2004)	Hacking Perl in Nightclubs (2004)	notagoodidea	12.341363	-7.0143256	story	7.0	52.0	1658838416	13.1868305
32281024	I've worked with PHP throughout 2020	I've worked with PHP throughout 2020, and it is still the worst crap I know.Static typing: We're not there yet. Lack of generics means arrays can contain anything. Not even close to TypeScript, and let's not compare to functional languages. Types in PHP is still duct-tape.High performance: Nope. PHP is fast compared to what PHP used to be, but PHP is not fast compared to compiled, optimizing languages. I'm sorry, but this claim of PHP being a performant language is either delusional or unambitious. I basically have not been in contact with PHP in the last two years where performance wasn't a serious problem.This isn't entirely because PHP performs bad, but largely because PHP programmers, on average, have a weak understanding of CS principles. I don't mean to bash any individuals; I saw a 	sshine	12.765721	-6.6726704	comment	7.0	27.0	1659123934	10.32551
22159912	A very interesting language on power	A very interesting language on powerful platform with a promising web framework. Many saw it, myself included, as a Ruby / Rails Improved, and expected its quick growth.Unfortunately, initial enthusiasm a few years ago did lead to its wide adoption.I talked with a couple of companies that jumped on it initially, but later decided to move to Java, Kotlin, Go. The main reason was difficulty to hire engineers to scale up quickly (in Europe), not some technical disappointments.Sadly, it seems that being a scalable platform is not enough to scale up to business needs.	playing_colours	12.473232	-6.8243732	comment	7.0	32.0	1580137593	12.259443
22185133	Ask HN: What’s your go to deployment	Ask HN: What’s your go to deployment process for personal Django projects?	h99	12.773087	-6.4927845	story	7.0	20.0	1580328069	-9.6989975
22208314	Typescript is great but it has its e	Typescript is great but it has its evils because it’s a superset of JavaScript. I really hope we get a modern language like c# where the types are guaranteed compile + runtime and you can’t any-ignore problems.The more I use typescript I realize I want a more sound and stricter language. Like no prototype overriding at runtime.	nojvek	12.35585	-6.8067927	comment	7.0	43.0	1580525865	-10.411782
22243270	Attacking Ruby on Rails applications	Attacking Ruby on Rails applications (2016)	bryan_cooper	12.645395	-6.9403768	story	7.0	131.0	1580867450	12.342496
23579735	Serverside Rendering* https://larave	Serverside Rendering* https://laravel-livewire.com* https://github.com/phoenixframework/phoenix_live_view* https://dotnet.microsoft.com/apps/aspnet/web-apps/blazoredit: added blazor	chrisrickard	12.881372	-6.821544	comment	8.0	40.0	1592607650	12.645936
23818901	Real World Programming in SWI-Prolog	Real World Programming in SWI-Prolog	luu	13.133283	-7.2886505	story	8.0	112.0	1594633032	-12.458058
23888497	The Zen of Erlang (2016)	The Zen of Erlang (2016)	swyx	12.555014	-7.5237064	story	8.0	192.0	1595156254	-8.394694
23922114	Looks nice. I saw that there is no P	"Looks nice. I saw that there is no PHP implementation yet. Doing it and publish it on Github would give me something, besides a ""kudos"" from Amazon? I am not asking for a position at Amazon, but maybe an interview?"	101008	12.770083	-6.5653725	comment	8.0	38.0	1595455476	10.286871
23934144	What's great about Rails ? Serious q	What's great about Rails ? Serious question from someone who landed into a mature Rails app and is now decidedly running away from that ecosystem after a year working in it.Rails looks like an early take on MVC that was setup around fast project creation and encourages unmaintainable code - concerns are straight out retarded (a design pattern that encourages breaking encapsulation and makes dependencies impossible to trace) and fat models encourage coupling things that don't need to be coupled.Then there's Ruby which in my opinion goes against Zen of Python which I'm a fan of - aliases all over the place for same thing, pointless name shortening and stuff to sacrifice readability, rails breaking conventions of standard library...In the context of when it got popular I understand why it got	rubber_duck	12.686547	-6.9554405	comment	8.0	28.0	1595548523	12.356543
24048229	Pardon the rant, but I feel that the	Pardon the rant, but I feel that the advantages don't outweigh the fact that with each release some of my stuff gets broken and I need to adjust. Django puts DeprecationWarnings basically everywhere and it's a hell to maintain projects that had been alive for a few years. God forbid you do anything with the interfaces they expose. The problem is only getting worse when you consider your dependencies, which in many cases don't keep up with the release cycle of Django. It's a mess.	d33	12.814773	-6.5425696	comment	8.0	27.0	1596533423	10.059291
24155947	I used to use PHP as a web backend a	I used to use PHP as a web backend and then moved to Go.  Forgetting the debate about the actual languages, it makes so much more sense to me for a web app to be a full-fledged, self-contained program which happens to listen on a network interface and respond when things make HTTP requests at it.The old-school style, where routes map to scripts or parts of scripts and a separate web server like Apache or Nginx sits in front of the app, feels harder to reason about (does this thing persist across requests?), harder to debug (where did that error message end up?) more brittle (did this fail because of my script or my web server config or something else?) and more dependent on configuration magic (i.e. various text files lying around governing the behaviour of things).So although some of thes	mjw_byrne	12.716777	-6.63478	comment	8.0	38.0	1597399334	10.308186
24173111	LFE: Lisp Flavored Erlang	LFE: Lisp Flavored Erlang	whynotwhynot	12.57713	-7.5068264	story	8.0	143.0	1597531776	-10.333216
24204718	Ts-migrate: tool to automatically mi	Ts-migrate: tool to automatically migrate JavaScript projects to TS	Rudeg	12.38987	-6.6187115	story	8.0	110.0	1597787094	-10.446254
24344356	Ask HN: Modern tech companies that u	Ask HN: Modern tech companies that use Django for Web products.	rasulkireev	12.83033	-6.510739	story	8.0	10.0	1598981672	10.113463
24365176	How does this work considering PHP i	How does this work considering PHP is heavily made up of code from Zend (which was an Israeli company)Can Iranian-built websites not use PHP?	Navarr	12.778917	-6.6319227	comment	8.0	35.0	1599148006	10.3605385
19971456	Minimum Viable Phoenix	Minimum Viable Phoenix	pcorey	12.765231	-7.220725	story	8.0	174.0	1558454630	12.750956
20267184	If anyone is on the fence on learnin	"If anyone is on the fence on learning Elixir / Phoenix (Elixir's most popular web framework library) please do yourself a favor and give it a shot. If you're on a time crunch and want the best bang for your buck on ""why bother learning yet another language to write web apps in?"" then watch this talk called ""The Soul of Erlang and Elixir"": https://www.youtube.com/watch?v=JvBT4XBdoUEI'm not affiliated with the language but I just want to throw out that I've been around since the Geocities era as a web developer and I haven't seen a tech stack or platform this well thought out and so in tune with what makes developing (and testing!) modern web applications an absolute joy. There's really something special here. I see myself sticking with it for 10+ years with 0 regrets.The best part about it "	nickjj	12.680687	-7.4162188	comment	8.0	84.0	1561402977	12.916178
20477647	For a second, after reading the titl	For a second, after reading the title, I thought PHP as a whole was end of life. That'd be fun.Which also made me think - does anybody know an example of a widely used programming language that voluntarily discontinued?	perfunctory	12.763798	-6.6330266	comment	8.0	34.0	1563535048	10.301484
20551778	> It's just infinitely, obviously be	"> It's just infinitely, obviously better.Whenever a large number of skilled people do something for which an alternative is ""infinitely, obviously better"", there's a good chance that there is more going on than you know.RubyGems used to be namespaced this way and moved away from it. They didn't do so lightly.The problem is that ownership, and even names of owners change all the time. In the very very large majority of cases, this change of ownership is an implementation detail that doesn't need to impact package consumers. If you enshrine the owner's name in the package, it means any change of ownership is effectively a breaking change to the package. When you have very large transitive dependency graphs, the result is constant, pointless churn."	munificent	12.38564	-6.841781	comment	8.0	47.0	1564378919	-9.205603
20765571	During my internship we've built a l	"During my internship we've built a large prototype using React+Typescript, and here are some of my key take aways from it:  - Quite often when using unreleased APIs, you turn to using ""any"" all over the place.
  - Development time is slower than writing in regular JS/React. This started to become a major issue due to the nature of our project being a prototype (fast iterations on ideas and features). 
  - Lots of frustration when a package doesn't have types (although most major ones do have them).

Otherwise it has been a joy writing the application, and it does ""document"" your components significantly better."	hki99	12.605279	-6.44347	comment	8.0	27.0	1566459570	-10.444297
20796284	As a woman I find it pretty damn obj	As a woman I find it pretty damn objectifying for someone to withdraw from a conference because it has no female speakers. Why should anyone care about anything other than php in a php conference?	curiousgal	12.785328	-6.620127	comment	8.0	49.0	1566775055	-4.0074615
20824168	I've noticed there's a lot of talk o	I've noticed there's a lot of talk on twitter about making TypeScript be an agreed upon best practice for frontend web developers. I'm glad TypeScript is doing well because there are certainly a lot of talented and dedicated developers working on it, but I really don't want to use static typing, even if there is a lot of type inference happening. I will need to make sure I don't plan on finding job or gig opportunities at the types of companies that are going require the use of TypeScript.	benatkin	12.358336	-6.8194027	comment	8.0	70.0	1567027772	-10.438057
20921036	Perhaps an unpopular take, but what 	"Perhaps an unpopular take, but what is described in the first paragraph as ""smoother, easier and faster"" than ever seems to refer to an upgrade process that has been going on for over a year.> As soon as we finished the Rails 5.2 upgrade last year, we started upgrading our application to Rails 6.0.> Instead of waiting for the final release, we’d upgrade every week by pulling in the latest changes from Rails master and run all of our tests against that new version. This allowed us to find regressions quickly and early—often finding regressions in Rails master just hours after they were introduced. Upgrading weekly made it easy to find where these regressions were introduced since we were bisecting Rails with only a week’s worth of commits instead of more than a year of commits. Once our bui"	lucisferre	12.743708	-6.9323177	comment	8.0	32.0	1568054785	12.375033
20942767	The Soul of Erlang and Elixir [video	The Soul of Erlang and Elixir [video]	tosh	12.622079	-7.484946	story	8.0	200.0	1568223890	12.957055
13637387	Building Code Posters with Elixir	Building Code Posters with Elixir	pcorey	12.683816	-7.448168	story	8.0	206.0	1487009558	12.924017
39444674	"A response to ""Erlang – overhyped or"	"A response to ""Erlang – overhyped or underestimated"" (2010)"	Tomte	12.56048	-7.5228677	story	8.0	64.0	1708452853	-7.355681
39447010	I think the blog post is guilty of t	"I think the blog post is guilty of the same thing we're all sometimes guilty of when discussing something we like, but few other people seem to appreciate. It's this ""no, it's great, you just don't understand it"" mentality. We get it, they don't, and if we explain the genius of it one more time, the world is going to see the light.Erlang has been around for a looong time (it's about as old as C++). It never rose to any real prominence, nor has it dominated any well-defined niche. Sometimes, outcomes like that are just a matter of bad timing. But sometimes, people just try your thing, don't like it, and the best response isn't ""actually, you just don't get it"" - it's to learn and iterate."	quatrefoil	12.581763	-7.5316405	comment	8.0	46.0	1708463737	12.917215
39517608	Litestar – powerful, flexible, and h	Litestar – powerful, flexible, and highly performant Python ASGI framework	rob	12.392121	-6.546333	story	8.0	2.0	1708987087	9.74985
36612190	Goravel, Web framework inspired from	Goravel, Web framework inspired from Laravel in Golang	sawirricardo	12.727439	-6.7536664	story	8.0	38.0	1688625875	10.195369
36615320	Thanks for your comment. I'm really 	Thanks for your comment. I'm really interested in this topic. How do you know the web server is Django? I searched but couldn't find this.Why would they use Django? I did some small projects in it but I assumed it wasn't very fast and wouldn't be suitable for a big app like this. I would like to know the pros and cons. Why didn't they build up something in C++ or Rust? Won't python limit the speed of responses despite being build the hard stuff in compiled languages? Sorry for being so naive, I am an amateur.	taopai	12.779823	-6.510221	comment	8.0	44.0	1688649639	10.075832
36638345	Here's the thing though: if you wrot	Here's the thing though: if you wrote your TS properly, you don't need this and asking for it just highlights that you're not using TS the way it's meant to be used.The only place you need runtime type enforcement (when you're writing your own code in TS) is for validating third party data at the point where you're ingesting it into your own code. Once it's in there, it is type safe if you used TS to compile your code to JS, because your function calls and data copies and everything else that moves data around was defined in terms of compatible shapes.And we already have runtime validation libraries to cover that validation step. So many of them.	TheRealPomax	12.339067	-6.8857803	comment	8.0	41.0	1688764244	-10.422358
36824711	I work on Bun. Happy to answer any q	I work on Bun. Happy to answer any questions	Jarred	12.463316	-6.4414315	comment	8.0	47.0	1690017458	10.909166
36852565	A Breakdown of HTTP Clients in Elixi	A Breakdown of HTTP Clients in Elixir	clessg	12.683069	-7.43552	story	8.0	163.0	1690224354	12.878076
36873645	How to Dynamically Create Instance V	How to Dynamically Create Instance Variables in Ruby	thunderbong	12.399219	-7.11221	story	8.0	65.0	1690351453	12.313481
37099234	We’ve use an API style similar to tR	We’ve use an API style similar to tRPC at Notion, although our API predated tRPC by 4 years or so.You can build this kind of thing yourself easily using Typescript’s mapped types, by building an object type where the keys are your API names, and the values are { request, response } types. Structure your “server” bits to define each API handler as a function taking APIs[“addUser”][“request”] and returning Promise<APIs[“addUser”][“response”]>. Then build a client that exposes each API as an async function with those same args and return type.We use this strategy for our HTTPS internal API (transport over POST w/ JSON bodies), real-time APIs (transport over Websockets), Electron<>Webview APIs (transport over electron IPC), and Native (iOS, Android)<>Webview APIs (transport over OS webview ipc	jitl	12.420511	-6.5478196	comment	8.0	46.0	1691840991	-10.447522
37118751	Elixir gets way too much coverage on	Elixir gets way too much coverage on HN considering that so few people use it.Unfortunately Elixir doesn't solve any problem which isn't already solved by more popular languages such as Golang, JavaScript/Node.js, Java, C# or Python and the result is neither more efficient nor more maintainable... But its lack of adoption is a problem as it limits your ability to access many powerful libraries and tools that are available when using other more popular languages.Programming languages aren't so different from spoken languages... Linguists can nit pick various pros and cons of different languages but ultimately it's not an author's language which determines whether or not their novel will earn them a Pulitzer prize in literature... Yet there is a good reason why no serious author will write a	jongjong	12.666037	-7.4647303	comment	8.0	26.0	1692002103	12.882051
37123597	People have argued that Elixir could	People have argued that Elixir could replace Python, but tbh, Elixir’s syntax is too ugly to replace something as elegant and simple as Python.	behnamoh	12.664595	-7.4482827	comment	8.0	37.0	1692033054	12.92037
37134392	What language and/or framework doesn	What language and/or framework doesnt have this problem?- Ruby - if your Ruby/Rails app falls behind, you will be paying back debt to get it up to date- PHP - if your Laravel/CI/Cake/Slim/Symphony App falls behind, you will be paying back debt to get it up to date- Go - if your Go app falls behind, you will be paying back dept to get it up to date- Python - if your Django app falls behind, you will be paying back debt to get it up to date- Elixir - if your Phoenix app falls behind, you will be paying back debt to get it up to date	jmondi	12.6716385	-6.653283	comment	8.0	28.0	1692109536	10.224796
37162419	Abbrev: A hidden Ruby gem	Abbrev: A hidden Ruby gem	software_writer	12.556995	-7.0743318	story	8.0	81.0	1692283314	12.393976
37244523	Hi! I saw your PR review of a commun	"Hi! I saw your PR review of a community effort to add Bun to the Techempower benchmark. You had really great, exact feedback about ""unnecessary allocation here"", ""unnecessary allocation there"".It was eye-opening, in terms of how often us JS programmers play fast & loose with ""a little filter"" here, ""a little map"" there, and end up with death by a thousand allocations.Given that context, I'm curious:1) How much you think Bun's (super-appreciated!) fanatical OCD about optimizing everything ""up to & outside of JSC"" will translate to the post-boot performance of everyday backend apps, and2) If you're tempted/could be compelled :-D to create a ""Mojo of TypeScript"", where you do a collab with Anders Hejlsberg to create some sort of ""TypeScript-ish"" language that, if a TS programmer plays by a st"	stephen	12.414666	-6.56164	comment	8.0	49.0	1692845875	-10.554525
37261787	This is coming from someone who like	This is coming from someone who likes Elixir. Not much for its distributed systems features, but mostly because of the language design. I keep hearing everyone talk about how Erlang/Elixir gives everything out of the box and you don't need to worry about Queues, RPC or whatever... But in reality, people don't really recommend using Distributed Erlang that much, on most Elixir gigs I worked, they didn't use Distributed Elixir at all, just plain old Kubernetes, Kafka, Redis and GRPC.	fndex	12.617836	-7.4682393	comment	8.0	39.0	1692971840	12.913634
37291879	PHP really took the wrong turn with 	PHP really took the wrong turn with PHP 8.It introduced such drastic breaking changes, that probably a lot of systems which were previously perfectly serving their users will be abandoned. Projects that could have stayed on the internet and served their users just fine.It broke the order of parameters in join statements.It broke calling static functions without the need to declare them as static.It broke adding properties dynamicly to objects.It broke easy string handling for many functions where Null was rendered as an empty string.And these changes make PHP code more bloated. There is now no way around adding more declarations to your codebase than before.Some of these breakages had 30% votes against them, including the original author of PHP:https://wiki.php.net/rfc/deprecate_dynamic_pr	JonathanBeuys	12.714989	-6.661341	comment	8.0	34.0	1693217048	10.292037
37313856	"I'll bite on ""just a fad in webdev c"	"I'll bite on ""just a fad in webdev circles"", in case you are serious and not trolling. Railsworld is celebrating the 20th anniversary of Rails this year. As I'm sure you know, Rails is built on Ruby. 20 years does not fit my definition of fad."	CTmystery	12.748472	-6.9319434	comment	8.0	34.0	1693342207	12.329892
37424352	Open source hooliganism and the Type	Open source hooliganism and the TypeScript meltdown	phillco	12.359666	-6.8090034	story	8.0	47.0	1694114994	-10.510483
37441370	I Really Miss Laravel	I Really Miss Laravel	behnamoh	12.807985	-6.6532254	story	8.0	34.0	1694223900	10.370158
37455482	Why the obsession (it seems to be th	Why the obsession (it seems to be the prominent point in the readme) with configuration via API?  How often do you need to add php support on the fly?  I want to configure my app server via files so it just starts up in the state that I expect. What am I missing?	gibmeat	12.732572	-6.570727	comment	8.0	35.0	1694351172	10.31655
37479792	I'm more interested in a language li	I'm more interested in a language like gleam, but the BEAM VM does sound appealing. But one thing I have been wondering is what is the hosting story like for BEAM languages?Is there easy tooling for deploying to something like AWS ECS and having nodes communicate with each other?	douglasisshiny	12.549808	-7.4456835	comment	8.0	43.0	1694520277	-12.229513
37479382	I see Elixir on here quite often, wh	I see Elixir on here quite often, what is the appeal and why are many companies switching to Elixir?Last I checked a while ago Brex famously used to be on Elixir but now are on Kotlin.https://medium.com/brexeng/building-backend-services-with-ko...	colesantiago	12.687604	-7.464452	comment	8.0	36.0	1694517476	12.941465
24503022	Rails Concerns: To Concern or Not to	Rails Concerns: To Concern or Not to Concern	nikolalsvk	12.758345	-6.9302707	story	8.0	75.0	1600339486	12.348945
24511687	Forgive the slight tangent but I'd l	Forgive the slight tangent but I'd like to talk about Rails in general:Just last night I was migrating an app from Rails 4 to 6.1 - I have been using rails since 0.9, but I think my long relationship is coming to an end.What I loved about Rails was that it built a web framework with the same basic idea as Ruby: optimize for developer happiness. Trying to use the webpack integration (released with Rails 5.1 I think) is a nightmare. Suddenly my clean Ruby world is polluted by JavaScript package hell, there are now two parallel asset pipelines with subtly different behavior, I can no longer reference JavaScript directly in my views, and the convention over configuration Rails approach seems to have been superseded by a tool with the most nightmarish proliferation of necessary configs that I'v	pugio	12.745914	-6.873111	comment	8.0	25.0	1600389383	12.331602
24687407	"Principle #2 always bothers me.""Mode"	"Principle #2 always bothers me.""Model the data part of the entities of your application using generic data structures (mostly maps and arrays).""and examplefunction createAuthorData(firstName, lastName, books) {
  return {firstName: firstName, lastName: lastName, books: books};
}For a simple, obvious object like ""person"" it might work, but for a complicated domain object with many other composed objects this starts to be a pain.I am not feeling ready to memorize all the field names, I prefer to have an object with documentation for each field."	piokoch	12.340075	-6.526647	comment	8.0	32.0	1601903365	9.620018
24867707	I haven't found any good arguments a	"I haven't found any good arguments against PHP in the comments here, just pure hate. 
Let's name a few of the arguments people are making:1. Its variables start with $ and that is ugly: I mean, come on, I won't even entertain this bigotry.2. It used to be better before: This is just pure nonesense, before OOP PHP wasn't good to create any big and well-structured application, it is ironic because most of the bad opinions about PHP come from people who used it a long time ago. Besides, you can still use PHP as you used to, but now you have more tools at your dispossal, You are free to use it as before.3. It is trying to be Java: Well, sure it is more like Java, only less verbose and easier to write. Developers can be much more productive in PHP. And moving in the direction of Java is not a b"	dcabrejas	12.754056	-6.652515	comment	8.0	44.0	1603447113	10.320278
25158104	"Always when typescript is
is compare"	"Always when typescript is
is compared with js, people talk about you get less bugs in typescript. I am honestly curious to see some evidence.
In my opinion application bugs are usually in the flow itself and have nothing to do with wrong types. I work a lot with both plain and Typescript projects. I used to like Typescript. But not anymore. With typescript applications tend to become bigger and more complex. Most devs using it have never seen vanilla js and are more java minded that prototype minded.
IDE code completion works better for typescript. For sure. But is that really essential? Sounds a bit like the typical Java developer who works with giant spring applications containing classes with hundreds of methods spread in many files in a 10 layer deep folder structure."	holoduke	12.371466	-6.789917	comment	8.0	67.0	1605857512	-10.441211
25199154	I am still in awe of NeXT's software	"I am still in awe of NeXT's software technology, generally. It was just so carefully and intentionally designed as a coherent whole; one would hope this was where we were going as we got better at architecting software (as individuals, as a field), but disappointingly in retrospect it appears as a kind of high-point, after which we continued to descend into ball-and-twine mediocrity. For Reasons economic and and social that I think people could argue about a lot, but we don't because in part because as a field we don't seem to even agree on what excellence in software architecture/design even means anymore.But what I want to talk about instead is:> Like EOF, our database layer that still puts Ruby-on-Rails to shame.I spent a couple years programming with EOF (the ""Enteprise Object Framewor"	jrochkind1	12.839671	-6.829851	comment	8.0	76.0	1606230884	12.32874
25200799	Ruby on Rails: Still the Best Web Ap	Ruby on Rails: Still the Best Web App Framework for Most Teams	sairamkunala	12.743819	-6.824807	story	8.0	62.0	1606239634	12.292369
25221358	How should one start learning with P	How should one start learning with PHP these days?My experience: hacked together a few PHP scripts over the years to notify me of a website change (5 minute cron job).  Before that, I was a very good beginner with VB6 back in highschool.There are a couple of ambitious database-driven website projects I would like to create, but I don't know where to start.  I like the KISS philosophy, and I think PHP and MySQL would fill that.  Is there an obvious alternative that I'm missing?I was thinking of hoing through the w3schools PHP turtorial.  Is there a better or more up-to-date resource?	meowster	12.77366	-6.600531	comment	8.0	37.0	1606408348	10.322204
25299377	Goodness, you and the OP have really	Goodness, you and the OP have really hit the nail on the head.I spent the last 5 years quite happy at a simple dev shop. Then they hired a bunch of people, paid them more than me, and allowed them complete free reign to write what ever kind of code on some brand new projects. After a year of this, one person quit mid-project, another died mysteriously (covid?), and then another just recently quit. My boss expected me to just pick up the slack on these three projects that were written in the most arcane and buffoon way possible. I basically just said no, and left. I had already been driven half insane over the year just trying to figure out the crap they were committing.This was in the spring and I'm still unemployed. I'm mostly Java and some older languages, and was really looking forward 	py_or_dy	12.733626	-6.4734626	comment	8.0	24.0	1607060299	10.053443
25335804	Amazing how many JS devs I meet (or 	Amazing how many JS devs I meet (or work with) that are against the very idea of Typescript.	halfmatthalfcat	12.370491	-6.7033296	comment	8.0	79.0	1607367946	-10.444839
25389266	$100 robot kit running ROS2 and Navi	$100 robot kit running ROS2 and Navigation2	jackp510	12.696408	-6.846557	story	8.0	163.0	1607712969	12.257278
38689573	I don't know Ruby at all, and maybe 	"I don't know Ruby at all, and maybe some familiarity with the language would help, but the biggest example code makes absolutely zero sense to me:    RSpec.describe Ticket do
      context 'when the ticket is closed' do
        it 'emails the requestor with a confirmation' do
          ...
        end
      end
    end

I have no idea what's going on here.I get that there are some blocks of code, though it was the indentation that told me that; ""do"" and ""end"" feel super verbose and bleed into the important parts of the code for me.Why is Ticket capitalized? Is this a variable? An object that we're about to work on that's coming into scope?`context `when the ticket is closed'` feels like it's setting me up. Is this an if block? Or is it some fancy way to set a listener on a property? Is thi"	shaftway	12.393827	-7.1321783	comment	8.0	30.0	1702940197	12.338373
38692146	I hate Ruby with a passion (it's als	I hate Ruby with a passion (it's also the language I mostly use in my day job currently).It's not necessarily the language itself, which is a reasonable language, it's the patterns that are common in the ecosystem:1. Use of inheritance for code sharing. It makes it extremely hard to reason about any piece of code I am looking at. Where does the `param` variable come from? Is it injected by any ancestors of the class I'm looking at? Who knows, I have to use the debugger to find out. I cannot reason about the code without it. Of course you can use Ruby while preferring composition over inheritance, it's just rarely done by the community. Other modern languages like Go and Rust wisely leave out inheritance for code sharing in their object model and arguably have much more readable (albeit ver	jupp0r	12.489951	-7.0789027	comment	8.0	41.0	1702963277	12.383795
38991392	Crystal 1.11.0 Is Released	Crystal 1.11.0 Is Released	ksec	12.648954	-7.268595	story	8.0	117.0	1705246909	10.444518
38992719	Is it just me, or does Crystal have 	Is it just me, or does Crystal have a disproportionate amount of Windows demand? I feel like every time Crystal comes up, someone asks (or complains) about Windows support.	hamandcheese	12.630864	-7.271797	comment	8.0	26.0	1705255697	-8.053561
32570031	The problem with the premise of the 	The problem with the premise of the article is that it presupposes that a library’s interfaces will, and ultimately must, be complex. The great thing about TypeScript for library development, if you start with types, is that it strongly encourages you to create simpler and less flexible interfaces. That’s not to say you don’t sometimes need (or won’t sometimes choose) to use some of TypeScript’s more complex features. But a lot of the time you won’t, or should think seriously about whether your interfaces are becoming too complex.Much of the complexity of TypeScript’s type system is a direct result of excessively dynamic interfaces in existing, untyped JavaScript. Starting with types is a good way to catch that early, rethink the interface, and either isolate it or avoid it entirely.	eyelidlessness	12.327626	-6.8660836	comment	8.0	72.0	1661282589	-10.4437065
32592544	Deno 1.25	Deno 1.25	0xedb	12.529028	-6.4671917	story	8.0	73.0	1661428965	-11.005986
32710371	> But the arguments given in support	"> But the arguments given in support of the feature were generally fairly weak; they often used arbitrary, ""made up"" examples that demonstrated a place where multi-level break could be used, but were not particularly compelling.> To make this proposal convincing, we need a realistic example of an algorithm that uses it, and that example needs to be significantly more readable and maintainable than the refactorings into functions, or the use of try…except (also a localised goto).How about this:  found = None

  for r, row in enumerate(table.rows):
    for c, cell in enumerate(row):
      if search_query.matches(cell.value):
        found = (r, c)
        break 2

  logger.log(""Found cell: {}"".format(found))
  return found"	dataflow	13.100516	-7.2120767	comment	8.0	46.0	1662272428	-12.432046
32993631	ReScript 10.0	ReScript 10.0	bpierre	12.350431	-6.894305	story	8.0	77.0	1664275427	-10.557649
32188816	Arbitrary file execution in TZinfo (	Arbitrary file execution in TZinfo (Ruby)	Ichaelus	12.356889	-7.113341	story	8.0	106.0	1658467547	12.334718
32213459	Crystal 1.5	Crystal 1.5	ksec	12.6474905	-7.2665586	story	8.0	116.0	1658670351	10.397675
32326660	I’ve always wondered why the more re	I’ve always wondered why the more respectable dynamic languages, like Ruby and Python, don’t have a web framework with the PHP deployment model of “just upload this file to the server and refresh your browser to see changes.”	jimbokun	12.713604	-6.6395903	comment	8.0	35.0	1659490858	10.278754
32330567	Seriously: why use Django for a REST	Seriously: why use Django for a REST-like service? I inherited an application that (probably) evolved from form-based to REST with a JS frontend, and I fail to see the point. There's a model, a serializer, handlers to implement relations, and multiple views per data type. It's so much overhead, and everything has to be kept in sync.	tgv	12.797897	-6.472535	comment	8.0	35.0	1659528205	10.027053
22090562	Kind of offtopic: I did some Ruby an	Kind of offtopic: I did some Ruby and I find some of the conventions really confusing; for example, the lack of “()” when calling a method. You never know if you’re accessing a property of calling a method until you grep the code. Am I the only one who feels this?	_em6m	12.447258	-7.0609293	comment	8.0	33.0	1579428895	12.377329
22091575	I don't understand languages like Ru	"I don't understand languages like Ruby and Perl and their supposed emphasis on ""human design."" My sense of what a human designed language would be is a lot more like Scheme: extremely simple, fundamental abstractions which, when composed, enable a variety of different strategies for solving problems.Ruby, in contrast, seems like an absurdly complicated concatenation of weird features and strange syntax. When I look at Ruby my eyes glaze over with all the unnecessary syntactic doodads and peculiar abstractions. Why anyone would want to complicate their lives with all that silliness is beyond me.And yet Scheme languishes and Ruby, for a time, anyway, burned brightly. I'm clearly the weird one."	vincent-toups	12.51585	-7.0640087	comment	8.0	37.0	1579444125	12.448768
22098604	Pharo 8.0	Pharo 8.0	estebanlor	12.347775	-7.2571216	story	8.0	237.0	1579526696	7.125874
13692758	Django 1.11 beta 1 released	Django 1.11 beta 1 released	tweakz	12.825552	-6.558552	story	8.0	167.0	1487644131	10.111823
13766541	Ruby+OMR JIT Compiler: What’s Next?	Ruby+OMR JIT Compiler: What’s Next?	magaudet	12.536152	-7.051697	story	8.0	70.0	1488392172	12.36056
13843422	New rule. Any sufficiently advanced 	New rule. Any sufficiently advanced type system is an ad-hoc re-implementation of Prolog. Once you have unification and backtracking you basically have Prolog and can implement whatever Turing machine you want with the type system.	_qc3o	13.137774	-7.3007097	comment	8.0	41.0	1489193192	-12.491603
13947457	Angular is a mess but typescript is 	"Angular is a mess but typescript is alive and kicking on its own, even with react.Personally I'm one of the apparently rare breeds that hate angular but loves typescript. I wish there were more of us.They're really in different realms and please don't make them part of the same whole. Typescript is a transpiler but the transforms it does are designed to mimic accepted JavaScript idioms.When I'm debugging typescript it makes sense, it looks almost like JavaScript written by somebody that knows what they're doing.Contrast that to Babel, Closure compiler, and countless others that produce ""JavaScript"" that reads more like assembler.Typescript is easy to make back into human readable JS and it's equally easy to slowly transform your JavaScript into typescript.It's the most forward and backward"	throwaywgsid	12.411253	-6.7493167	comment	8.0	43.0	1490343752	-10.450588
13950168	Is scheme a suitable replacement for	Is scheme a suitable replacement for perl or ruby for everyday small-scale programming?	chrismealy	12.393857	-7.0216026	comment	8.0	25.0	1490373679	12.880742
13952976	Alpaca – Functional programming insp	Alpaca – Functional programming inspired by ML for the Erlang VM	knv	12.577293	-7.5062156	story	8.0	217.0	1490396976	-4.927497
14034597	Anyone interested in explaining why 	Anyone interested in explaining why I should choose Django over Rails nowadays? Or is this just a Python vs Ruby thing?	nik736	12.789653	-6.670734	comment	8.0	43.0	1491323999	10.311175
14035248	I've been meaning to learn Django as	I've been meaning to learn Django as it seems to have a much more mature ORM and migration capabilities (currently very much productive with node via Sequelize and Express, but migrations are rather tedious). Is now a good time or should I wait till 2 is out? How big of a break will it be?A friend also expressed that it might not be worth it to use Django if just for the ORM and migrations (backend is just api), is he right?	cheapsteak	12.8067	-6.563736	comment	8.0	27.0	1491327303	10.094704
14045320	EmberConf 2017: State of the Union	EmberConf 2017: State of the Union	chadhietala1	13.118752	-6.449977	story	8.0	132.0	1491424117	-15.516284
14068081	Erlang Performance Lab	Erlang Performance Lab	iamd3vil	12.539961	-7.5148873	story	8.0	116.0	1491674101	12.910585
14092476	Question for TypeScript users from s	"Question for TypeScript users from someone who's still on the fence: Are you at all worried that TS will end up like CoffeeScript?That is, it starts out with some great ideas that are quite easy to get behind, but JavaScript keeps on advancing year after year and soon you have the same features available but with an annoyingly different syntax, or you actually end up falling behind the curve. You're also not able to simply use the latest JS features, my last attempt at adopting TS died when I found it didn't at the time support object rest and spread properties, which I had been liberally using via Babel for quite some time.It seems like Flow is a ""safer"" choice to me, but I'd love to hear if you disagree."	Androider	12.424518	-6.6974354	comment	8.0	27.0	1491945011	6.868816
14095247	Where can I find a good list of pros	Where can I find a good list of pros and cons for Flow and TypeScript?I've been really enjoying Flow, and I have experienced all of the benefits mentioned in this article. I'm using VSCode, and the Flow integration is really good. Feels like a full IDE for Javascript, without being bloated and slow. (Startup is a little slower than Sublime, but it's very fast once everything has loaded.)I'm wondering if I'm missing out on anything by choosing Flow instead of Typescript.I've been developing React and React Native apps, and it seems like Flow is the default choice for that ecosystem. Has anyone switched from Flow to Typescript, and how did it go?	nathan_f77	12.465988	-6.6978183	comment	8.0	46.0	1491977938	-10.49167
14106384	I haven't used TypeScript extensivel	I haven't used TypeScript extensively, but I feel that there should be more of a push (maybe there is, please correct me if I'm wrong) to introduce whatever functionality people deem worthy that exists in TypeScript and introduce it to JavaScript.You can already see the conflict happening as some people prefer Flow and others TypeScript. Perhaps later Google will throw their hat into the ring and introduce GScript. Then, you have three different languages that introduce similar functionality, that all transpile into JavaScript.Sound familiar?	tabeth	12.353705	-6.7951407	comment	8.0	30.0	1492088121	-10.44698
14294634	I've tried to use Elm and The Elm Ar	I've tried to use Elm and The Elm Architecture on a project before, but I gave up.The Elm Architecture makes it very easy to create small type safe components, but it forces parent components to manage the state + structure all children components. This makes it hard to use a component and to separate concerns.In order to create a list of stateful children, you must:1. Add a list of the child states to the component state, event if the parent component doesn't care about the child's state.2. Handle adding + removing child state's manually3. Map all scoped child state updates through your reducer, adding a constructor to your action type4. Finally, map each of the child state's to the component's view.You end up big types and match expressions that just manipulate lists. I have yet to see a	mistersys	13.006754	-6.469328	comment	8.0	51.0	1494270780	8.542833
14324013	Ruby on Rails 5.1	Ruby on Rails 5.1	alifbae	12.749366	-6.9339085	story	8.0	140.0	1494597859	12.35689
14374385	"From the article: ""In the year since"	"From the article: ""In the year since the elephants left, Feld says circus attendance dropped precipitously.""This is a great lesson to businesses in general - know if your critics are actually your core customers. The overlap between people who protested elephants and the people who attended the circus was pretty small. The company ended up listening to a very vocal minority and then lost a lot of business from the quiet group of customers for whom the elephants were the major draw and who then stopped buying tickets.This also applies to open source projects and brings to mind DHH's article http://david.heinemeierhansson.com/2012/rails-is-omakase.htm..."	RcouF1uZ4gsC	12.773145	-6.932757	comment	8.0	59.0	1495191096	12.351304
14441045	For me, the big problem with Prolog 	For me, the big problem with Prolog (and the whole concept of declarative languages) is that the intended benefit requires an unreasonably (or impossibly?) smart compiler.The concept works when I can declare what I want to be done, and the system does it - and when that happens, Prolog is great, the language is great for declaring what I want to be done.However, often it happens that the system does it in a way that's somehow horribly inefficient and makes it totally unusable. And then I have to redeclare my requirements in a slightly different way to nudge the system into doing it differently - and this is much harder, then I have to worry about much more moving parts than just my code.Also, the language is not really well suited for that; if I have to specify how exactly in which order t	PeterisP	13.126893	-7.2948594	comment	8.0	42.0	1496087467	-12.497979
14501348	Ask HN: Relaunch my website in Ruby/	Ask HN: Relaunch my website in Ruby/Python or continue with PHP?	syed123	12.759232	-6.653491	story	8.0	6.0	1496783277	10.312635
14514370	Analyzing Django requirement files o	Analyzing Django requirement files on GitHub	jayfk	12.815456	-6.541555	story	8.0	143.0	1496931995	10.165771
14592699	Django project optimization guide – 	Django project optimization guide – Part 1	dizballanze	12.827372	-6.521719	story	8.0	158.0	1497942349	10.087638
30811842	PHP filter_var shenanigans	PHP filter_var shenanigans	mkeeter	12.703332	-6.5901475	story	8.0	65.0	1648303254	10.30446
31025036	To be honest, while I've dabbled in 	To be honest, while I've dabbled in Ruby, I've never understood the difference on an intuitive gut level like other foreign constructs unique to individual languages I've gone deep with.I don't know what it was about this article but I feel slightly more confused now. It jumps to bytecode before explaining how they're useful at the higher level of abstraction that is the developer.How do symbols help you think about and find solutions to problems and then implement those solutions? I.e., what is the facility they provide that is not present in some more traditional OOP language (say PHP?)	kungfufrog	12.491536	-7.068703	comment	8.0	37.0	1649931654	12.374777
31025673	Ruby doesn't have symbols because of	Ruby doesn't have symbols because of AST or VM details.Ruby has symbols in all probability because Lisp and Smalltalk have symbols.It could get most of the same practical upside of symbols from interned strings - the important thing is being able to compare using pointer equality and look up hash tables without needing to walk a string. What symbols at the type level do is ensure that these string-like things have already been interned, that is, de-duplicated, when they hit lookup points like member access.But the implementation could do something very similar behind the scenes by setting a bit on interned string values. Besides, symbols aren't enough for the more advanced dynamic language optimization techniques like you see in V8.	barrkel	12.424365	-7.0761976	comment	8.0	43.0	1649937372	12.364932
31154039	Datalog in JavaScript	Datalog in JavaScript	stopachka	13.177718	-7.0284405	story	8.0	161.0	1650892399	-12.38564
31155441	So essentially, PHP 9.0 is a differe	So essentially, PHP 9.0 is a different language, and not compatible with the vast majority of PHP applications out in the wild.This isn't necessarily a bad thing, but it does mean that a lot of applications are going to be stuck on old versions.For my part... I think this will make me fully abandon PHP and just rewrite old apps in other languages, like Go and Rust.	bovermyer	12.775472	-6.633115	comment	8.0	32.0	1650897368	10.33297
31156059	The most annoying thing you encouter	"The most annoying thing you encouter daily in PHP is the needle/haystack problem. There is no consistency with parameters of the standard library. It could be fixed in two ways:a) Make everything an object, where methods can be called on:   $arr = [];
   $arr->key_exists('key');

b) Create a new class-based standard library, where you call those functions statically and needle/haystack are always in the same place:   Arr::key_exists($arr, 'key');

Either way, you can deprecated all the array_..., str_..., etc. functions and end the guessing game. Other than that PHP is turning out great."	allendoerfer	12.683684	-6.662506	comment	8.0	30.0	1650899817	10.256087
31160193	There is a gap between languages at 	There is a gap between languages at the moment imo. Ruby is just ruthlessly productive.Compare https://github.com/benhoyt/countwords/blob/master/simple.rb with https://github.com/benhoyt/countwords/blob/master/simple.goHoping new age compiled languages like Crystal & Nim fill the gap of performance, types & productivity. But compile speeds need to be factored in.	bestinterest	12.586338	-7.0561533	comment	8.0	42.0	1650918654	12.344673
31472404	I've always had a vague interest in 	I've always had a vague interest in learning a bit of ruby based on reputation. But my (equally vague) impression is that it's past it's peak and on the downslope of popularity. Is this accurate? Is it still worthwhile to learn, or have other languages mostly supplanted it?	ineedasername	12.635049	-7.022428	comment	8.0	25.0	1653251339	12.370492
31484041	Ask HN: Do You Miss OOP?	Ask HN: Do You Miss OOP?	parentheses	12.326153	-6.8437905	story	8.0	7.0	1653335407	-10.477208
31516416	Can anyone advocate here their thoug	"Can anyone advocate here their thoughts to ""must use"" Perl for any scripts / projects?"	jzer0cool	12.331562	-6.9886127	comment	8.0	25.0	1653558095	13.208382
25535455	Adopting Ruby 3 types with RBS	Adopting Ruby 3 types with RBS	progapandist	12.571288	-7.072326	story	8.0	88.0	1608889834	12.383866
25569734	Ask HN: JS++ ? Why not make a new, s	Ask HN: JS++ ? Why not make a new, strongly typed JavaScript ?	alcover	12.327147	-6.739911	story	8.0	8.0	1609250219	-10.4242935
25805937	Deno in 2020	Deno in 2020	theBashShell	12.531023	-6.455094	story	8.0	127.0	1610834617	-11.023249
25807740	Still no Node or npm compatibility? 	Still no Node or npm compatibility? Not even on their roadmap? Still think Deno is DOA, then.TypeScript is great, sure. I love TypeScript. But I wouldn't touch Deno for just about any serious development if I couldn't be certain that I could search npm for a library and use it without a potential hassle.	SomeCallMeTim	12.475064	-6.4672046	comment	8.0	34.0	1610853199	-10.876746
26152202	Can we talk about Ruby’s laissez fai	Can we talk about Ruby’s laissez faire approach to syntax. Ignoring all the purely technical stuff every ruby project I’ve seen that has at least a small team behind it looks like a kitchen sink. Bob does it X way, Tina does it Y way, Joe does it X way. Every person does it their own way and readability becomes an eyesore as the project grows.If I didn’t know any better I’ve seen teams so bad it’s almost a game of “look how gross this block is, now let’s see how much worse you can make the next one”.I’ve always found ruby very off-putting for this reason alone. I don’t want to inherit or work on something where everyone just wants to show off. How do organizations manage this? Is it just me?	LimaBearz	12.601486	-7.041004	comment	8.0	39.0	1613466182	12.378055
35622622	Firefly – A new compiler and runtime	Firefly – A new compiler and runtime for BEAM languages	mmcclure	12.390302	-7.355698	story	8.0	245.0	1681864720	-8.721486
35713845	Am I too dumb to find it or do the R	Am I too dumb to find it or do the Ruby docs not contain a description of the language?https://ruby-doc.org/3.2.2/ only seems to contain API docs.	formerly_proven	12.59554	-7.024768	comment	8.0	31.0	1682517954	12.392223
35753982	The Magic of Rails: exploring the pr	The Magic of Rails: exploring the principles and techniques behind the framework	ksec	12.765973	-6.903156	story	8.0	100.0	1682782911	12.349193
35897820	I agree, the main problem with PHP i	I agree, the main problem with PHP in my experience so far has been that it's very memory-hungry and slow (even PHP7/8), especially when coupled with frameworks/ORM magic.I remember after spending some time with Go, I got used to being able to process tens of thousands objects in memory in milliseconds. When I proposed to do the same in PHP, during architecture review, PHP devs thought I'm out of my mind because that would take like a gig of RAM (which would compete with other PHP processes on the server) and considerable amount of time. You have to use a lot of hacks to make it all fit in memory and be fast.Our Symfony framework also initializes in like 300 ms on each request, while in Go it's below 10 ms. As every PHP process dies after serving a request, you have to reinitialize the who	kgeist	12.743002	-6.6302986	comment	8.0	35.0	1683781803	10.288815
35963127	Have you seen Erlang syntax?  That's	Have you seen Erlang syntax?  That's why.  Even some of the best programmers I know are very superficial.	bcrosby95	12.515685	-7.520825	comment	8.0	31.0	1684250731	12.912502
36084892	I do wonder about the long-term effe	"I do wonder about the long-term effects of Deno being Node-compatible; will it result in only Node programming being done since ""Deno will handle it fine"" and thus Deno specific stuff will not be developed?"	shrubble	12.488444	-6.4383116	comment	8.0	63.0	1685112411	-10.9604225
36289580	Scripting with Elixir	Scripting with Elixir	lawik	12.665227	-7.4366517	story	8.0	210.0	1686554418	12.927243
36539140	If authorizations can be described a	If authorizations can be described as a policy graph, what about logic programming languages such as Prolog or Datalog?Would Datalog be performant enough at scale?I think one neat thing about logic programming languages is that you can ask for the reasoning chain to get to the conclusion it did, or do reverse queries. (Such as, give me all the actions that a person is authorized for this time)	hosh	13.169548	-7.1560764	comment	8.0	24.0	1688147051	-12.373533
28842276	Does Typescript get better? I've bee	Does Typescript get better? I've been forced to use it for my most recent project, but haven't been given any time to read through the documentation. I've found that I'm spending about 99.9999% of my development time trying to figure out how to get my IDE to not show that their are typescript problem. At this point I hate typescript with the burning fury of a trillion suns. I wonder if this is everyone else's experience?Edit: So I take it from the downvotes that everyone else is a genius and I'm the only one that has had a problem learning TS.	irrational	12.35715	-6.8003073	comment	8.0	28.0	1634058707	-10.466282
28873562	I feel like Crystal isn't as popular	"I feel like Crystal isn't as popular as it should be.
I did part of last years Advent of code in it, and it was very easy to convert Ruby solutions to working Crystal solutions that were as fast as the the Go solutions my buddy had submitted.It's a really impressive language, I hope it doesn't fizzle out."	weatherlight	12.619512	-7.258374	comment	8.0	115.0	1634265948	-11.233422
28877583	"Eh, ""[insert stable, mature MVC fram"	"Eh, ""[insert stable, mature MVC framework] is dying/dead/etc""  articles are a dime a dozen on the Web. I suppose it could be considered a badge of honor for a framework to have some internet punter declare the framework as ""dead"". But, just to nitpick...> Bad Official Admin GUI UXFor anyone reading, Django's admin tool is designed for situations in which you need to stand up a quick admin or build some internal admin functionality. For more complex cases, you build your own admin to fit your user needs (including the UI/UX). From Django's own documentation:> The admin’s recommended use is limited to an organization’s internal management tool. It’s not intended for building your entire front end around. [1]Also, regarding documentation, in my opinion I have yet to see any project have bette"	mtberatwork	12.854222	-6.504795	comment	8.0	33.0	1634305309	10.0548935
28966388	Is someone working on a more modern 	Is someone working on a more modern syntax to Prolog? like how ReasonML is for OCaml but for Prolog	iddan	13.139299	-7.2959805	comment	8.0	30.0	1634973401	-12.498896
29159084	Could someone please help me underst	"Could someone please help me understand what a ""dataframe"" is? I see this term thrown around occasionally, but failed to find a definition/explanation for someone who doesn't actually already know what it is :("	akavel	12.347914	-6.470979	comment	8.0	25.0	1636446351	10.025866
29200214	I was never a fan of ruby until I ha	I was never a fan of ruby until I had to use it at work.I think my main superficial turn-off was indeed the non-traditional loops and I was a fan of python whitespace indentation.But on the whole ruby just feels very coherent and language features mesh very well together - it often feels like a true lisp with self-style object orientation done very well [1].Python otoh feels like an imperative language with classical OOP added on and extended via magic methods.See e.g. functional programming in python vs ruby with map, filter, reduce and so on and how blocks and procs in ruby interact with those vs lambdas in python.I still use python often but have to say I tend to miss ruby when I do.[1] https://news.ycombinator.com/item?id=1803815	lottospm	12.484671	-7.077062	comment	8.0	38.0	1636731117	12.380531
29256289	My daughter has this as an school as	"My daughter has this as an school assignment, with some implication that it is some sort of a contest, and we managed to grow quite a few of similar quality to the seed crystals on the site in 4 days, which was the original (poorly thought IMO) deadline. 
The trouble is that no one else was able or cared to do it so fast, so the deadline has been slipping for a couple weeks now, with our best crystals going to school and back a few times, getting scratches and broken bits instead of nicely growing undisturbed. 
A bit discouraging. I'm now remembering how frustrating was for me to take school related things too seriously and discover you cared more than your teachers when I was her age."	fcatalan	12.644257	-7.252472	comment	8.0	70.0	1637171274	-11.205586
29263241	Most arguments against PHP miss the 	Most arguments against PHP miss the point. You know why you should use PHP? Because it's fun and you can get something running much quicker than figuring out the Elixir, Ruby, Rust, whatever ecosystem and paradigm. Maybe PHP is not so good at WebSockets or async worker threads, but most projects don't need that. There's no shame in doing long polling, users can't tell the difference anyway!PHP shines when you're trying to get a server-rendered web app off the ground. It's the VB6 of the web. Nothing else matches its development velocity, from keyboard to working code.	ammmir	12.746165	-6.5844913	comment	8.0	41.0	1637222973	10.300568
29274309	The often impossibility of finding t	The often impossibility of finding the definition of the methods I'm calling is the main thing that soured me on Rails. I think a more explicit style is more common nowadays, which is a good thing.	sanderjd	12.523349	-7.0444584	comment	8.0	64.0	1637301850	12.34441
29311932	Everytime this questions comes up (a	Everytime this questions comes up (and it comes up a lot especially on HN), the answer is almost always: start with the Language that you already know and then reverse engineer. For example:PHP => Symfony or LaravelPython => Django or FlaskJavascript => Node/ExpressRuby => RailsThen there are others like elixir/Phoenix etc and then you can do your own in Go etc.	codegeek	12.504923	-6.4838514	comment	8.0	28.0	1637617707	10.037474
29441653	Three Ways to Debug Code in Elixir	Three Ways to Debug Code in Elixir	clessg	12.638451	-7.450574	story	8.0	136.0	1638633669	12.923033
29471609	We went all in on FastAPI with my te	We went all in on FastAPI with my team, but we're hit the issue that the projects of Tiangolo (FastAPI, SQLModel, Typer) seem to be turning pretty much unmaintained : https://github.com/tiangolo/fastapi/discussions/3970We've already been hit by multiple bugs with fixing PR opened, but left to rot, and missing documentation : the 'tutorial' documentation is great, but if you want a reference you have to go read the code.I guess that's the issue when you pick projects maintained by one person, so for my next projects I might get back to something built on stronger grounds, like Django.How is Django this day with modern Python constructs like typing in general and Pydantic models integration ?	Majestic121	12.352558	-6.6287117	comment	8.0	52.0	1638879509	9.930779
29585457	There are so many dataframe librarie	There are so many dataframe libraries, many of which have APIs closely following pandas, but not drop-in replacements. I wish we could agree on a standard describing the core parts of what a dataframe must do, such that code depending only on those operations can easily move between dataframes.	abeppu	12.327628	-6.4930816	comment	8.0	30.0	1639697112	10.06295
34161469	Ask HN: Should even small scripts ha	Ask HN: Should even small scripts have documentation?	gautamsomani	12.327124	-7.007358	story	8.0	2.0	1672239001	13.174532
34194418	Prolog feels like one of those thing	Prolog feels like one of those things I definitely couldn't write a whole app in, but I often wish it was just there in other languages the same way regex is.	LAC-Tech	13.144831	-7.289974	comment	8.0	31.0	1672471702	-12.491911
34246498	Chunking strings in Elixir: how diff	Chunking strings in Elixir: how difficult can it be?	wofo	12.6448345	-7.460226	story	8.0	80.0	1672845525	12.914662
34255900	Ask HN: How to Learn Django in 2023?	Ask HN: How to Learn Django in 2023?	eddsh1994	12.84381	-6.5485163	story	8.0	11.0	1672892399	10.064233
34266558	I have long wondered why Ruby's symb	I have long wondered why Ruby's symbols aren't in every language.	happyrock	12.528735	-7.0756927	comment	8.0	36.0	1672952724	12.413689
34302448	I love using Elixir but I also like 	"I love using Elixir but I also like to think ""right tool for the job"" and imho Elixir is generally not the right tool for the job for command-line user interfaces. It's fun to experiment with though, of course.Having said all of that that, something like this might be useful when writing custom Mix tasks inside Elixir projects!"	lycos	12.672179	-7.4364877	comment	8.0	44.0	1673207732	12.9842
34365019	> TS saves me time every day.Hmm, no	> TS saves me time every day.Hmm, not my experience. I do TS for years now and still today I'm spending more time on fighting/pleasing TS compared to the actual code.JS with all its node_modules dependencies is a complete nightmare to get the typing right. I regularly have to change good solid code to please TS, but at the same time TS often doesn't complain when the typing is obviously wrong.I once started with Assembly, Pascal, C and C++. So please don't start to explain to me what strict typing is and the benefits and so on, I know. JS uses dynamic typing by design. And I remember how awesome it felt when JS came out and we could write code without doing type juggling. And I believe that with type inference and some other tooling in the IDE we really don't need TS at all.	benfrl01	12.334398	-6.821504	comment	8.0	36.0	1673596079	-10.447223
34478559	Ask HN: Why Python Django framework 	Ask HN: Why Python Django framework has so little references?	iamsanteri	12.802524	-6.6705055	story	8.0	8.0	1674402851	10.256593
34546204	What i learn from Erlang, is, naming	"What i learn from Erlang, is, naming is hard.What does `gen` mean in `gen_server` ?Thanks for replies for ""Generic"". So this article is not well organized in that case. With some simple naming explanation, it should be obvious to guess what the system does.Abbreviation doesn't save the writings.Some more examples, in Ruby, instead of calling `implement Module`, it uses `include Module` . I do think include is not as clear as implement."	revskill	12.5507145	-7.513588	comment	8.0	30.0	1674828678	12.904479
34706749	The Django ecosystem is not so good	The Django ecosystem is not so good	justanetizen	12.8317	-6.5444217	story	8.0	1.0	1675855891	10.089425
34733551	Rethinking Prolog	Rethinking Prolog	Zuider	13.15657	-7.307388	story	8.0	37.0	1675987132	-12.50099
35122121	Well written and super funny. Remind	Well written and super funny. Reminded me a bit of Scott’s writing, particularly the descriptions of the horrified interviewer.I’ve never worked in a Typescript shop, is there any truth to the satire here? The sea of confusing types to solve any problem?	joenot443	12.361016	-6.8184366	comment	8.0	57.0	1678638444	-10.439635
18961916	Every new web app at PayPal starts w	Every new web app at PayPal starts with TypeScript	munchor	12.392269	-6.7952228	story	8.0	117.0	1548092108	-10.48391
19002925	I don't know where this misconceptio	"I don't know where this misconception started, but you can't just run javascript through a typescript compiler.  There is a huge amount of valid javascript that is not valid typescript. Try something like `const testVar = {}; testVar.asdf = ""asdf"";`.  Node web frameworks, for example, are based entirely off this ability to monkey-patch the request object."	qwer	12.328918	-6.8251486	comment	8.0	34.0	1548453530	-10.437206
19139769	> With this release, we no longer ai	> With this release, we no longer aim to be compatible with PHP.Looks like a big release! I'm curious -- is anyone actually using HHVM, either in production or for personal use?	johnmaguire2013	12.757365	-6.645412	comment	8.0	29.0	1549929704	10.293839
19277411	Erlang Ecosystem Foundation	Erlang Ecosystem Foundation	davydog187	12.553224	-7.5163	story	8.0	200.0	1551406328	12.919873
19278975	It seems that it takes far fewer lin	"It seems that it takes far fewer lines of code (and correspondingly simple program model) to implement LISP in Prolog than both imperative and functional languages.Once I asked a Prolog expert at a conference ""Prolog is truly mind-bending and powerful, but why don't we see it used more often? where are the jobs so I could get one"" and they said that  for those who use Prolog in production it is a real competitive advantage that they don't want to announce to the world; plus some are state actors and quasi-state actors who use it for huge scheduling and optimization problems and like their secrets secret. I think I believe that."	jasim	13.152099	-7.292158	comment	8.0	60.0	1551431390	-12.480645
19517808	I know this is the opposite of what 	I know this is the opposite of what you asked but I find Rails to be keeping pace with modernity much better than its conemporaries! Django seem to have given up on integrating websockets (ActionCable has been in Rails for literally years now), nor is there trivial integration for JS assets/asset pipeline functionality. I don't write much of either anymore, but I'd still reach for Rails the instant I need to get something done quickly.	0xADEADBEE	12.777516	-6.639027	comment	8.0	56.0	1553817057	12.264688
19529308	TypeScript 3.4	TypeScript 3.4	traderjane	12.365107	-6.843954	story	8.0	180.0	1553952915	-10.475337
19544344	The projects/app relationship never 	The projects/app relationship never 'clicked' with me. I also have a dislike for the awkward 'polls' example in the django tutorial.That said, I like Django. Of course, I liked Rails better, but maybe that's because it was my 'first' and I never used any of the big php frameworks for a long period of time.I quit wasting my time with Flask for projects a while ago. It's a really great project and suited for smaller things, but you just end up re-implenting django. I'd rather someone made those decision for me.	bluedino	12.807021	-6.552729	comment	8.0	49.0	1554132538	10.085477
19679867	Obfuscated Erlang (2012)	Obfuscated Erlang (2012)	QuinnWilton	12.558362	-7.526036	story	8.0	87.0	1555476953	12.909801
19772693	I was an intern at Mixpanel at the t	"I was an intern at Mixpanel at the time (but not the author of this article or involved in the discussed rewrite). For context, the company was then <10 people. (I'm surprised to see anything from my first professional software experience on top of HN!)My recollection of events (of 8 years ago):
The Erlang endpoint was written a year or two earlier as someone's first Erlang project, in a tiny org with no Erlang experience. The endpoint worked well enough and people moved onto other projects in the mostly Python codebase. Eventually, it became painful to debug or add features to this endpoint because no one was particularly proficient in Erlang. Ankur (author of the post, intern) then rewrote it in Python.I wouldn't read this as a negative about Erlang or a positive article about Python. I'"	lightcatcher	12.577183	-7.517412	comment	8.0	93.0	1556475388	12.925948
15934289	RESTyped: End-To-end Typing for REST	RESTyped: End-To-end Typing for REST APIs with TypeScript	rawrmaan	12.342821	-6.833359	story	8.0	91.0	1513365809	-10.4168215
16005113	I started a new contracting gig a co	I started a new contracting gig a couple of months ago, in Ruby. I had used it briefly years before in another project, but it was so long ago that I had to learn it again basically from scratch.Although I don't really think the language is anything special (i.e. it's a standard dynamic OO language), what really turns me off Ruby is this dogmatic, almost religious aspect of its community.Take POODR - it's more or less the community bible. If it's not written in POODR - don't do it. If it is - do it that way or else. It's POODR's way or the highway.According to more experienced Rubyists more than 80% of the Ruby community use Rails. Rails is so widely spread that its development even fundamentally affects Ruby's roadmap.Now irregardless of what you think about POODR or OO or dynamic types o	pka	12.654512	-7.023312	comment	8.0	35.0	1514225916	12.358477
16193839	Ask HN: Which framework to use for w	Ask HN: Which framework to use for web development?	flask	12.76187	-6.5498734	story	8.0	6.0	1516464915	10.026056
16218393	Reducing Memory Usage in Ruby	Reducing Memory Usage in Ruby	craigkerstiens	12.52584	-7.040012	story	8.0	222.0	1516746186	-11.256568
16220484	Ruby seems to have a footprint on Ha	Ruby seems to have a footprint on Hacker News disproportionate to its general popularity and TIOBE index. Why?	hirundo	12.656673	-7.029856	comment	8.0	27.0	1516770441	12.3770485
16293934	Things I dislike the most about Ruby	Things I dislike the most about Ruby:- Raw performance- Runtime metaprogramming from hell- Monkey patching- No real concurrency support, tons of non-threadsafe code and gems- Too Rails-centric- Little presence outside web development- Little to no real innovation in the last years- Mutability- No optional / progressive types or type annotations===Things I love about Ruby:- Clean syntax- Although it's object oriented, it allows using a functional style- Functional collection operations- Productivity- Flexibility- Maturity- Availability of high-quality libraries- Availability of hosting solutions- Friendly community- Nice stack traces	iagooar	12.640198	-7.0162654	comment	8.0	43.0	1517603227	12.369653
16340126	Creating a Linux Desktop App with Ru	Creating a Linux Desktop App with Ruby	lazaru_s	12.600216	-6.976004	story	8.0	134.0	1518184363	-7.052242
16360810	Speeding Up Ruby with Shared Strings	Speeding Up Ruby with Shared Strings	tenderlove	12.578566	-7.039239	story	8.0	194.0	1518460878	12.360017
16392878	Your linked comment is great but it 	"Your linked comment is great but it sweeps one thing under the rug.There is a reason lisp didn't win. We put up with it (I use emacs, so I have to write it at times) but in general it's harder to reason about transformable lists of code than it is about plain old objects and their methods. Almost every problem elegantly solved in lisp has a parallel elegant solution in Ruby (using blocks, dynamic method definition, or otherwise) and I generally find the resulting code both more maintainable as well as more readable. Sometimes with lisp things get ""spooky"" in a way that just doesn't happen in practice with Ruby, even if it theoretically possible to say redefine String#inspect. Though I completely agree that inheritance gets clunky and I strongly favour composition."	3pt14159	12.4996805	-7.0855875	comment	8.0	60.0	1518794253	12.35659
16915337	Nerves – Craft and deploy bulletproo	Nerves – Craft and deploy bulletproof embedded software in Elixir	punnerud	12.679535	-7.441462	story	8.0	270.0	1524594972	12.92925
16936313	Flask has a stigma for not being tha	Flask has a stigma for not being that good when building larger apps, but honestly Flask scales really well for that type of use case (coming from a development / maintenance point of view).I have some pretty large Flask apps with dozens of top level dependencies and models spanning across many thousands of lines of code. Even if I don't touch the code base for a few months, it's easy to jump back into it.I'm also a huge fan of Rails, but truthfully I find Flask apps to be easier to reason about and hack on once they grow to a decent size, simply because Blueprints make it really straight forward and intuitive to modularize your application without increasing the complexity of everything by using micro-services.If anyone wants to jump into Flask and start building real world apps, you may 	nickjj	12.756521	-6.551378	comment	8.0	90.0	1524780359	10.012649
17003897	The Erlang Runtime System	The Erlang Runtime System	mattw1810	12.535474	-7.5059886	story	8.0	262.0	1525555275	12.896642
17199980	Boy, this seems like an exceptionall	"Boy, this seems like an exceptionally poor choice of project name - in the same exact industry, web development, there is already years of use of ""WAMP"" to mean ""Windows Apache MySQL PHP"". WAMP / LAMP / MAMP / etc are ubiquitous.https://en.wikipedia.org/wiki/WampServerYou know the difference, and I know the difference, but a whole lot of newbie developers who are trying to learn about websockets and while playing around on their Windows dev box could end up pretty confused."	sethhochberg	12.721103	-6.5776553	comment	8.0	36.0	1527798918	10.282759
17204068	Ask HN: What have you built with Rai	Ask HN: What have you built with Rails lately?	mijustin	12.741661	-6.9250646	story	8.0	15.0	1527848796	12.344467
17265061	PHP 7.3.0 alpha 1 Released	PHP 7.3.0 alpha 1 Released	flavius37	12.772123	-6.662183	story	8.0	62.0	1528464512	10.326587
17266228	I recently revisited some of the ear	I recently revisited some of the earliest web code I ever wrote, which was in PHP 5.5 (about 7 years old, I think).  I wasn't surprised by all the mistakes I made, both from being a newbie programmer and from making what I think were fairly easy-to-make PHP mistakes. After all, every tutorial I could find back then used mysql, didn't used real_escape_string, etc.What was surprising was how hard I had to dig now, 7 years later to find out how to do things correctly in PHP 7. Searching for what I thought should be fairly common things to do seemed to bring up all of the old articles that I first mislearned from, and it was really hard to find things like what the best way to iterate over a mysql result set was.Honestly, after putting my 7 years of experience to practice, the final code didn'	dlbucci	12.777921	-6.627108	comment	8.0	32.0	1528470917	-3.7102177
17281557	It's like a language was picked firs	"It's like a language was picked first and then the blog written backwards to come to the conclusion. So there's some languages in bullets and subjective pieces that are reasons not to use them. I can do that with Crystal too...it doesn't even support one of the most popular OS's natively. I mean, the author says C++ is a better language than Go, that Google is the ultimate reason for success, and that Go takes us back to C. That doesn't even make any sense. ""doesn't seem to click to me...generally didn't feel...feel the language is rough"" etc. How about just use the best language for the problem, instead of choosing the language before the project. As I've mentioned on many of these language-comparison posts (more like tweets) these days, just ignore them and remain wise to your problem sp"	kodablah	12.610927	-7.27484	comment	8.0	60.0	1528688094	-11.2386675
17505659	Rubylike Frontend [video]	Rubylike Frontend [video]	madmaniak	12.692422	-7.0070515	story	8.0	64.0	1531302863	12.322515
17515955	It's PHP and not Python, but every t	It's PHP and not Python, but every time I read something like this from a major open source figure, I always think of this old PHP mailing list thread:https://bugs.php.net/bug.php?id=50696	sjm-lbm	12.63611	-6.676263	comment	8.0	87.0	1531411763	10.313227
17649175	Why hasn't node replaced PHP yet?	Why hasn't node replaced PHP yet?	AzzieElbab	12.702298	-6.5790234	comment	8.0	34.0	1532993412	10.286805
17671912	When I say this out loud, it sounds 	When I say this out loud, it sounds like a stupid question, but I'm still curious...Outside of the fact that different programming languages run on BEAM and the JVM, what's the difference between the two?I believe BEAM ships with supervisors, which is why Elixir can utilize them... what else is different?	misterbowfinger	12.548854	-7.428116	comment	8.0	55.0	1533221733	12.899064
17699588	What are your favorite personal blog	What are your favorite personal blogs?	ioconicbear	12.646493	-6.995834	story	8.0	22.0	1533575849	12.354893
17810879	Excuse my complete and total ignoran	Excuse my complete and total ignorance here - but is this essentially a 'quick deploy' php instance? if so, what might a none-Google alternative be?I've only ever 'rolled my own', on small-scale virtual or shared servers, but I've got an upcoming project I could do with trying to install on something completely seperate - something like this might fit the bill.Or not!Thanks.	detritus	12.732887	-6.5707994	comment	8.0	30.0	1534867879	10.303571
21082535	On the Utility of Phoenix LiveView	On the Utility of Phoenix LiveView	feross	12.889149	-6.9073524	story	8.0	129.0	1569514938	12.71773
21181130	> That makes one wonder about who el	"> That makes one wonder about who else is still using Perl? if any? Can’t remember the last time I’ve heard about it.Perl, like many other languages, has its own bubble. I'm using Perl daily at work. I used Python for a while, but the Perl job market was just too nice to pass. I have a backlog of clients interested in Perl work longer than I can handle, and they don't mind my requirements because they have no one to replace me with.Is that a sign of a dying language? Probably yes. But to be honest, if it's about to become the next COBOL then I'm looking at a lifetime of profitable work with little to no competition :)BUT:
> Nothing personal with Perl. Just doing statsPerhaps a little bit of research could help your point as well. The CGI example you mentioned is broken, but is also using a"	tadzik_	12.32608	-6.931132	comment	8.0	34.0	1570458113	13.167134
21227499	This has been a huge deal for the Pe	"This has been a huge deal for the Perl community.First, it was thought that Perl 6 would be the replacement for Perl 5.But it was long ago recognized that there was no clear upgrade path from Perl 5 to Perl 6, so it was agreed that Perl 6 was a ""sister"" language to Perl 5 rather than the successor.Except that many people expected that Perl 6 would be the replacement, so that stalled many projects. So an ""alias"" for Perl 6 was created, but that didn't seem to help.Larry has now agreed with the change and Perl 6 will be renamed to ""raku"" and Perl 5, which has regular, major releases every year, will now be able to simply be ""Perl"" and be free to continue on its own way.If I had my choice, I'd program in raku because it's a lovely language addressing many pain points (including being one of t"	Ovid	12.332178	-7.058615	comment	8.0	166.0	1570821378	13.180785
21228549	How we failed, then succeeded, at mi	How we failed, then succeeded, at migrating to TypeScript	drob	12.386997	-6.822491	story	8.0	69.0	1570828517	-10.477218
39129680	Ruby on Rails load testing habits	Ruby on Rails load testing habits	a12b	12.640764	-6.8606796	story	8.0	128.0	1706191644	12.52586
39175976	I don't know what it is about Ruby t	I don't know what it is about Ruby that turns every HN thread that mentions it into a flame war about how it's not the perfect language. People don't do this with other languages. What gives?	CatchSwitch	12.584081	-7.055399	comment	8.0	27.0	1706534934	12.38347
39309881	Long story short from a business per	Long story short from a business perspective - good luck logistically scaling a dev team from 2 founders to 100 devs as quickly as your app does. Elixir devs are hard to find and are expensive.	mbesto	12.703874	-7.4333553	comment	8.0	26.0	1707439348	12.901576
17892414	> In summary, we 'still' use Rails a	"> In summary, we 'still' use Rails as it works just fine.PHP works fine. COBOL works fine.Nobody ever said Rails doesn't work. Or doesn't work fine. That's a straw man.It's just that Rails, and Ruby in general, is in clear decline. Not just because some new flavor of the month frameworks are coming out, but because a lot of the concepts Rails supports are antiquated, and Rails hasn't shown to be that adaptable to more modern front end trends after years of efforts from DHH.Hell, I'm sure that even DHH himself would be very upset if people settled for something that ""works just fine"". He's just not happy that this time around, that characterization is being used to describe his creation."	hota_mazi	12.763291	-6.9285426	comment	8.0	31.0	1535817653	12.364101
17895677	I always wonder why people think typ	I always wonder why people think typescript is a fix for bad code.We primarily do JavaScript, and I see no issues with it when you set up governance in how to use it.I don’t think building your own libraries is really a bad thing either, in fact I think you should do so often instead of relying on 3rd party packages of quality you typically judge on how many times they’ve been downloaded if you’re being honest.I think typescript is silly. It works with legacy code, sure, but if you’re refactoring you might as well rewrite your JS or if you’re compiling to JS you might as well chose Dart which is vastly superior to typescript.I don’t really see type safety as an issue. I can’t remember when it was a problem for us, and we operate millions of lines of code, but they are all written with gove	eksemplar	12.362162	-6.8047214	comment	8.0	35.0	1535865215	-10.437225
17904868	Every time I see these (LFE, Elixir,	Every time I see these (LFE, Elixir, perhaps others) mentioned I feel sad that people don't seem to see the beauty in the Erlang language itself. Learning Erlang was a watershed moment for me and it had little to do with the actor model or OTP.That should not be meant to take away from these other projects that do interesting things. It just seems like people needlessly avoid Erlang because it's unfamiliar and they miss something amazing in the process.	softbuilder	12.573372	-7.5199122	comment	8.0	39.0	1536008793	12.915986
18094513	> Upgrade early and upgrade oftenNot	> Upgrade early and upgrade oftenNot sure about the upgrade early. It’s a different kind of pain to be one of the first to use a new Rails version vs lagging a couple of months behind.	hartator	12.745842	-6.9486523	comment	8.0	27.0	1538150810	12.36097
18108355	I'm really worried about the wholesa	I'm really worried about the wholesale move to Typescript in so many projects. To me it's the new coffeescript combined with the verbosity of J2EE. Yes it's corporate sponsored, so hopefully will be maintained indefinitely - but I like JavaScript, and Typescript isn't JS.What's worse is so many developers using their own slightly tweaked versions of JavaScript. I spent a solid day this week trying to get decorators and class fields to transpile reliably with as few dependencies as possible. It seems every project creates their own DSL that sorta-kinda is JS, then figures out a way to get it to compile and calls it a day. This sort of goes against the whole reason we have language standards in the first place.Anyways, I admire Evan's desire to hold back on the need for decorators and class 	russellbeattie	12.3728485	-6.6701093	comment	8.0	51.0	1538340749	-10.4618435
18212850	Around 62% of all Internet sites wil	Around 62% of all Internet sites will run an unsupported PHP version in 10 weeks	danso	12.770996	-6.6435027	story	8.0	81.0	1539524742	10.328801
18264540	Counter-example: Dart.If corporate s	"Counter-example: Dart.If corporate support is a definite factor, Dart would have taken off way earlier than now. A bigger factor in TypeScript's success would be the ability to gradually migrate the projects as it's a superset of JavaScript. How do you start migrating? Flip the file extensions from .js to .ts with loose compiler options, then gradually add typing as the options are tightened. It's factors like these that drive spread of language, not ""huge corporation with infinite budget and a large full time team of contributors and evangelists."" Dart had no short of those and still not much accepted."	m_sahaf	12.376881	-6.7604895	comment	8.0	41.0	1540058601	-10.463621
18274875	TypeScript support added to Create R	TypeScript support added to Create React App	mattwoodnyc	12.536532	-6.612772	story	8.0	280.0	1540218252	-10.452301
18397645	One of the reasons C is the way it i	One of the reasons C is the way it is is that that way is the way the processor is.The abstraction isn't perfect, but it is decent enough for a first approximation. I'm guessing Fortran is similar. Imperitive languages of that era were used because they worked very closely with the actual actions of the CPU and gave a fine grained control over execution, allowing efficiencies. Since then, popular languages have all been improvements that take advantage of increased computing power to do interesting things.Sometimes new paradigms rear up - eg, Clojure with its set-and-forget approach to values. That paradigm is sold on the basis that it is easier to reason about, debug and as a practical bonus faster in many cases than the alternative. This is a great reason to learn a new paradigm.Prolog i	roenxi	13.13772	-7.2937384	comment	8.0	41.0	1541576827	-12.477068
18579774	Genuinely curious. Does anyone use t	Genuinely curious. Does anyone use the command line `tsc` to compile typescript in everyday work? Or is it more of just a learning stepping stone?	Waterluvian	12.36407	-6.7636275	comment	8.0	25.0	1543707856	-10.450363
18591424	Ask HN: Convince me that TypeScript 	Ask HN: Convince me that TypeScript is better than JavaScript	rodneon	12.3665285	-6.801952	story	8.0	6.0	1543861699	-10.452879
18754652	Why? No, really, subjectively Prolog	"Why? No, really, subjectively Prolog looks lovely to me, but sort of ""Chapter 0"" explaining why should people learn Prolog and how they can apply it practically could make an awesome addition."	qwerty456127	13.152969	-7.2901263	comment	8.0	43.0	1545690854	-12.471471
18833124	HelenOS 0.8	HelenOS 0.8	return_0e	12.360846	-7.071494	story	8.0	154.0	1546711625	-3.7062438
18894296	As primarily an Ember.js user (with 	As primarily an Ember.js user (with an interest in Elm), just looking at how many hoops people in the React ecosystem go through just to send a request just boggles the mind.Maybe I am in the minority, but writing boilerplate code all the time just isn't something that interests me.	EduardoBautista	13.030003	-6.454478	comment	8.0	54.0	1547341059	-15.47118
18898069	Ember v3.7 Released	Ember v3.7 Released	izelnakri	13.1125	-6.442791	story	8.0	91.0	1547405912	-15.537177
18906723	I'm starting to think Microsoft's st	"I'm starting to think Microsoft's strategy with things like VS Code, Monaco editor, and Typescript is ""blow the developer away with how amazingly productive they are so that they will want to use more of our products"". Because it's just so high quality yet also gratis/libre (MIT license), that I can't see what else they could be trying to do."	sephoric	12.350579	-6.7232533	comment	8.0	39.0	1547501512	-10.447173
29683869	Ruby now has “punning.”> Values in H	Ruby now has “punning.”> Values in Hash literals and keyword arguments can be omitted. [Feature #14579]> {x:, y:} is a syntax sugar of {x: x, y: y}.> foo(x:, y:) is a syntax sugar of foo(x: x, y: y).This is going to be controversial and take some getting used to, but I think eventually everyone will love it. It’s not an easy syntax to learn - I remember when this came to JS it took a while to get my head around all the different ways this shorthand was used in the wild.It’s hard to come up with new syntax that can peacefully coexist with the established language. I think in hindsight it would have been helpful for Ruby if it had done something like square braces instead of brackets for hash literals, or not allowed brackets for blocks. The most ambiguous syntax all involves hash literals v	burlesona	12.366257	-7.0861278	comment	8.0	28.0	1640445026	12.383686
29827380	The Truffleruby results look amazing	The Truffleruby results look amazing but leave me with the question why we don’t see stories of implementation at major Ruby / Rails sites. Too soon, licensing or not yet 100% compatible?	klelatti	12.745021	-6.9400916	comment	8.0	36.0	1641492814	-8.649801
30076465	If they focus on the core features a	If they focus on the core features and make a significant enough improvement, perhaps the core TS team could be convinced to pull it in as a native extension and make calls to it for the operations it covers? If something like 62x improvement is really achievable, it's hard to imagine the team not being interested at all.I would personally be very happy to use a significantly slimmed down subset of TypeScript if it provided a 62x performance improvement. Slow type checking is currently the main drawback of TypeScript development in large projects.	danenania	12.358967	-6.82362	comment	8.0	37.0	1643137690	-2.9693444
30102037	I never used prolog. In my mind it i	I never used prolog. In my mind it is some old unused language. What is good about it and why should it be embedded into other languages?	para_parolu	13.146123	-7.2953167	comment	8.0	24.0	1643298938	-12.484342
30207553	Sure. And I think what makes Rails a	Sure. And I think what makes Rails and Django shine is they have sound default answers.I’ve yet to see anything in Node that feels like a stable 1:1 replacement. Next.js is excellent, but you still need to sort out a lot of pieces on your own.	coffeefirst	12.755162	-6.7246237	comment	8.0	34.0	1643986847	12.295296
30221016	Django Ninja – Fast Django REST Fram	Django Ninja – Fast Django REST Framework for Building APIs	watchdogtimer	12.771812	-6.518049	story	8.0	169.0	1644069492	10.011103
30653574	ECMAScript Proposal: Types as Commen	ECMAScript Proposal: Types as Comments	0xedb	12.333988	-6.8043666	story	8.0	65.0	1647109907	-10.421476
12549967	I'm not qualified enough to speak on	I'm not qualified enough to speak on this conclusively, but I believe the Ruby coding he did was using an actual social engineering tool. Also, he uses Kali Linux.	the_watcher	12.635082	-6.9928	comment	8.0	24.0	1474476812	12.39332
12566343	Erlang Installer Beta: A Better Way 	Erlang Installer Beta: A Better Way To Use Erlang On OS X	_nato_	12.565714	-7.5187736	story	8.0	68.0	1474651582	12.902897
12609785	TypeScript Seals My Penchant for Jav	TypeScript Seals My Penchant for JavaScript	labrador	12.356199	-6.812413	story	8.0	79.0	1475194660	-10.472614
12633577	The problem really isn't a function 	"The problem really isn't a function of the number of tools and frameworks in existence, but rather in the distribution of popularity among them.Each ecosystem around a set of technologies essentially has its own ""Herfindahl index""[1] of sorts. For example, the Ruby ecosystem's index might be fairly high, simply because Rails is so dominant (to the point where Ruby and Rails are often conflated by outsiders). On the other end of the spectrum, the current JavaScript landscape seems to have a fairly low index; there are a huge number of tools with very few clear winners at this point in time.I suspect the best/healthiest ecosystem is probably somewhere in between that of Ruby and JavaScript. Rails may have ultimately hurt Ruby by its dominance, just as the current volatility in JavaScript too"	dperfect	12.725765	-6.8820066	comment	8.0	46.0	1475561113	12.330455
12667869	Prolog looks really useful for solvi	Prolog looks really useful for solving real world problems. Why doesn't it get used more?And can you interface to it using Python or some more mainstream languages?	collyw	13.143412	-7.2932	comment	8.0	33.0	1475949243	-12.48782
12705894	I don't get why people keep harping 	"I don't get why people keep harping on super globals are being inherently bad. The variables are there. You can use them or ignore them. A variable definition harms you in no way other than a tiny bit of memory usage which is capped by the HTTP limit on POST and GET limits anyway. What? You think you're gonna get hacked because $_POST['ihaxyou'] is set to 'w00ts'?No one does this anymore:mysql_query(""SELECT * FROM `table` WHERE `id`="".$_POST['ID']);There's absolutely NOTHING wrong with having $_POST['whatever'] inside a controller as long as you're doing proper checks.Are you expecting it to be an integer? Easyif(!ctype_digit($_POST['ID'])) {
   // throw exception here
}Contrary to the hive mind you don't need some special encapsulation class to pull your post and get variables.HHVM does n"	Akujin	12.747888	-6.565298	comment	8.0	74.0	1476414214	10.097733
12741484	To the eye of a developer used to mo	To the eye of a developer used to more modern languages that also shows some bad choices in the design of the Erlang syntax. Basically everything that makes the source code less readable than the original: uppercased variables, the minuses that prefix the module and export statements, the wierd =:= operator. I add the also wierd <> binary and string concatenation operator, not used in this example.The semicolon-period statement separators/terminators are in the original and in natural languages, but newer languages proved them to be useless. Probably compilers in the 80s needed some help by the programmer to be fast.Elixir fixed some of the worst offenders, kept others and added something. Examples: the <> is still there but at least we can interpolate strings Ruby like, the useless do at 	pmontra	12.552036	-7.457816	comment	8.0	36.0	1476857441	12.899758
12906704	What's a good alternative to Elm?	What's a good alternative to Elm?	chenshuiluke	13.005883	-7.687801	comment	8.0	27.0	1478672738	-12.759881
13045384	It's unbelievable that an article ca	It's unbelievable that an article can get to HN front page in which the author doesn't know the difference between Rails and Ruby. So annoying!This is NOT Ruby for God's sake:    SYSTEM_EPOCH   = 1.day.ago.to_i	Walkman	12.697446	-6.98233	comment	8.0	35.0	1480187885	12.371103
13045517	Cool demonstration of IMMUTABLE func	Cool demonstration of IMMUTABLE functions (TIL), but there's a reason people have moved away from stored procedures/functions in RDBMSs in favor of moving this stuff into much slower application code -- you now have business logic living inside of the database. From there, you have to now think about how this affects:- Testing- Deployment/Migrations- Day-to-day tooling to work on it- Switching costs (mental overhead, using multiple languages)- Documentation- Probably more stuffThe ruby code is just like all of your other ruby code and can be grokked and worked on by anyone who is up to speed on your ruby stack. The DB function meanwhile requires jumping through lots of hoops and will always feel like a second class citizen relative to the vast majority of your application code, unless you 	gfodor	12.691067	-6.936664	comment	8.0	43.0	1480189781	12.31688
13050328	E3-1240 v5 3.50GHz single core perf 	E3-1240 v5 3.50GHz single core perf worse than E5-2650 v2 2.60GHz PHP 5.X	erichileman	12.757147	-6.6547303	story	8.0	24.0	1480269053	10.3364
13087272	The Ruby+OMR JIT	The Ruby+OMR JIT	x3qt	12.5792465	-7.0520806	story	8.0	109.0	1480670842	12.370912
13129133	Erlangers, Use Labels	Erlangers, Use Labels	kumaranvpl	12.557274	-7.5231123	story	8.0	66.0	1481185888	-5.170748
13253083	Who is using Phoenix Framework in pr	Who is using Phoenix Framework in production?	rajeemcariazo	12.784142	-7.1271486	comment	8.0	30.0	1482643368	12.757873
13364649	PHP Frameworks Code Complexity Compa	PHP Frameworks Code Complexity Comparison	sconxu	12.758652	-6.634239	story	8.0	33.0	1484055825	10.3339615
13434327	Interestingly, I have the exact oppo	"Interestingly, I have the exact opposite view on Django.I hate their API and overall architecture, which I find to be the result of glueing features on top of features for many years.
The internal code also is just like that: looks like every single method is riddled with out-of-band conditionals, which is the result of a community that prefers to hack things to work, instead of rethinking/refactoring."	Galanwe	12.801712	-6.538653	comment	8.0	94.0	1484817867	10.057038
13434382	>its healthy consideration for backw	>its healthy consideration for backwards compatibilityLike screwing the huge majority of users with Python 2.x Django projects and having them update or be left behind?	coldtea	12.75627	-6.5891457	comment	8.0	51.0	1484818700	10.08599
13447073	In case you are wondering what to us	In case you are wondering what to use as your next programming language, please consider Elixir!It has a lot of advantages:- it is an easy to use, well-designed functional programming language, that happens to boost productivity and be (a lot of!) fun at the same time- it is modern, with modern tooling around the language (e.g. mix, edeliver)- it has Phoenix, a modular web framework, ideal for APIs and traditional MVC, very modular- it is rock-solid for a relatively young language- stack traces are clean, readable, and point you in the right direction most times- performance is decent on a single-core, but since it's basically Erlang, it scales better on multicore than most solutions out there- it has a world-class concurrency model powered by OTP, but more approachable to the average prog	iagooar	12.514639	-7.4949813	comment	8.0	104.0	1484947348	12.870447
13448674	I'd be quite curious how much money 	"I'd be quite curious how much money keeping Rails up to date has cost Shopify over the years, compared to the benefits.Compared to a lighter weight framework like Sinatra, Express, etc., it seems that Rails is only a benefit if you were unable to make halfway decent library and architecture choices on your own, or if for some reason you benefit from hiring people who are already familiar with a particular Rails version.It's very interesting that companies like Shopify and Github have continued paying the upgrade tax with Rails... a tax that is necessarily mainly because of the tight coupling between core components and the assumption of tight coupling included in most of the library ecosystem.  Seemingly, Shopify is well beyond the phase where ""hey that gem will save us two weeks"" is reall"	grandalf	12.762605	-6.939497	comment	8.0	32.0	1484971201	-6.9802213
13466132	Slightly off-topic, but does anyone 	Slightly off-topic, but does anyone develop Django/Python on a windows machine, and may want to offer any general advice or tips?I am using virtualenv, but wondering what else I should be doing to make it easier.  Previously I used cloud9 (cloud IDE) for rails development.  In both cases, I am pretty much a hobbiest, but don't mind spending some money to make things easier since I'd rather spend my time doing the fun part, rather than developer ops.	wtvanhest	12.672789	-6.5886927	comment	8.0	40.0	1485206279	-9.237216
13606139	How Elixir helped Bleacher Report ha	How Elixir helped Bleacher Report handle 8x more traffic	stanislavb	12.693667	-7.457448	story	8.0	76.0	1486639213	12.937104
27537465	That's not a big deal. I imagine tha	That's not a big deal. I imagine that the average OS user doesn't need Apache and PHP. People who do web development use Docker, because for any serious development you'd want your environment to match live one. And there's still an option to use brew or MacPorts to easily install all those programs.	zerof1l	12.699285	-6.6315703	comment	8.0	94.0	1623919782	10.234464
27591439	Anyone here with Django and Phoenix 	Anyone here with Django and Phoenix experience? Is there any reason to use Django over Phoenix now?	rpastuszak	12.806311	-6.903686	comment	8.0	41.0	1624369075	12.67211
27592564	If only there were jobs in Elixir, g	If only there were jobs in Elixir, god I switched in an instance. Sadly here in Belgium there is not a single company looking for a senior Elixir dev :(.I love that language...	danfritz	12.697039	-7.4573855	comment	8.0	29.0	1624374222	12.930394
27629016	How Phoenix LiveView Works	How Phoenix LiveView Works	thibaut_barrere	12.907942	-6.889386	story	8.0	59.0	1624617058	12.69276
27684045	So many people talk Erlang / Elixir 	So many people talk Erlang / Elixir insane concurrency … but I’m struggling to reconcile the talk with what I find in stress testing and benchmarks results.Can you comment on why so many benchmarks show Erlang / Elixir performing significantly worse than other languages like Go.https://stressgrid.com/blog/webserver_benchmark/https://stressgrid.com/blog/cowboy_performance/https://www.techempower.com/benchmarks/EDIT: why the downvotes? I’d rather you post a comment to me so we can have a health dialogue.	tiffanyh	12.562213	-7.469416	comment	8.0	64.0	1625018041	12.89923
12013088	Concurrency aside, why is Elixir pre	"Concurrency aside, why is Elixir preferred over Ruby when it doesn't even have a native array implementation? No, lists and tuples are no substitute nor are maps with numeric keys as Jose has suggested. If you want an array in Elixir your only option is Erlang's implementation which ain't pretty - http://erlang.org/doc/man/array.html. When I raised this issue in the mailing list and on IRC the response was invariably a definsive ""I've never needed arrays"", ""We use tuples for most things in Elixir"" or ""Array performance characteristics are difficult to optimise in a functional language such as Elixir"". I just find this disappointing."	cutler	12.631439	-7.479607	comment	8.0	49.0	1467334334	12.917741
12070553	Elixir 1.3.1 released	Elixir 1.3.1 released	eddd	12.6924305	-7.4536157	story	8.0	299.0	1468240244	12.94467
12108041	Writing custom type systems for Pyth	Writing custom type systems for Python in Prolog	type0	13.138132	-7.2907133	story	8.0	125.0	1468706414	-12.497503
12144880	> Having just attended EmberCamp a w	> Having just attended EmberCamp a week ago, I was excited about Ember CLI. Ember users have a great “getting started” experience thanks to a curated set of tools united under a single command-line interface.This is one of the best things about Ember. `ember new`, `ember serve`, ember generate component my-component`, `ember build`, `ember deploy`, `ember install`. It's opinionated but it lets you get productive right off the bat. I tried React but after a couple of days I just couldn't get it working, waaay to many options. So I switched to Ember and haven't looked back.	orf	13.104231	-6.440381	comment	8.0	80.0	1469207125	-15.512231
12223512	Looks very nice. I hope it gains mom	Looks very nice. I hope it gains momentum.For now, if you want a fast language with the beauty and productivity of Ruby, check out Elixir [0] and its web framework, Phoenix [1]. I've been using Phoenix for a year, and it's the first framework that I've actually liked more over time. And I've been a web developer for a decade. With its recent 1.0 release, Phoenix is gaining a lot of momentum.If you want some idea of the performance differences between Phoenix and Rails, see [2] and [3].[0] http://elixir-lang.org/[1] http://www.phoenixframework.org/[2] https://github.com/mroth/phoenix-showdown/blob/master/RESULT...[3] http://www.phoenixframework.org/blog/the-ro	clessg	12.773085	-7.1020317	comment	8.0	81.0	1470287489	12.690859
12352127	GitMonitor on Elixir	GitMonitor on Elixir	lumannnn	12.691471	-7.4604554	story	8.0	105.0	1472047910	12.9424715
35425415	I'm curious if there will be any app	I'm curious if there will be any appreciable performance gains here that are worthwhile. FWIW, last I checked[0], Polars still smokes Pandas in basically every way.[0] https://www.pola.rs/benchmarks.html	mynameisash	12.351106	-6.5668163	comment	8.0	65.0	1680535776	10.177642
35483355	You MUST have an insane amount of te	You MUST have an insane amount of test coverage to trust something like this to Ruby.I'm new to Ruby, with 13 yoe as a SW engineer.Personally, I find it a very hard language to master. Writing tests often feels like I'm settings variables left and right without seeing them being used in the current context. But that then happens to be part of the let() way in rspec.Now you might say: why use rspec? I inherited this codebase, so gotta do what you gotta do.I do really miss my compiler. I am not a fan of writing a block somewhere that can be invoked 2 weeks later for the first time and then fail, because someone passed in a number where a string was expected.I went from PHP to Java to C# to F# to JS to Rust. F# and Rust stand out in terms of hardest to write, but easiest to trust.I don't have	WirelessGigabit	12.6111355	-7.1150494	comment	8.0	48.0	1680884312	12.33756
28081960	Haskell for the Elm Enthusiast	Haskell for the Elm Enthusiast	msszczep2	12.949386	-7.6738915	story	8.0	109.0	1628210716	-12.789789
28085142	PHP: A fractal of bad design (2012)	PHP: A fractal of bad design (2012)	aberoham	12.819976	-6.7104225	story	8.0	8.0	1628244107	10.494385
28191134	Is there an error in the examples? Y	"Is there an error in the examples? You have    const mesh = useRef()

    ...

    <mesh ref={mesh} ...


You'll be rendering an undefined element (before the ref has a chance to attach).Also, the TypeScript example makes me head hurt.    const ref = useRef(null!)

Ah, yes. A non-null null literal."	tills13	12.373467	-6.8342295	comment	8.0	41.0	1629052288	-10.4581175
28501505	Beam/Erlang/Elixir Concept Explanati	Beam/Erlang/Elixir Concept Explanations	pkilgore	12.583997	-7.463672	story	8.0	355.0	1631457222	12.906038
28590034	Managing dependencies is a big probl	"Managing dependencies is a big problem, and I feel like we've given up on solving it directly, and instead built workarounds.If we question our assumptions, the first question is: Why do we need multiple Ruby versions at all? Why isn't the latest version of Ruby sufficient? Well, obviously, Ruby's behavior has changed over time. But why isn't it backward-compatible? Why can't I just run Ruby 3.0 with a flag that tells it to emulate Ruby 2.6? Or 1.8 for that matter?Okay another one. ""Nokogiri"" is the Ruby gem (library) for parsing XML (including HTML). You always need to remember to install libxml when you install it. Why? Why doesn't Nokogiri include an XML parser? Because it would be slow? You can include a native binary in the gem which does the hard computations. Will that work on rando"	phendrenad2	12.646052	-6.9972205	comment	8.0	26.0	1632107310	12.335713
22331005	Crystal 0.33	Crystal 0.33	Can_Not	12.6451435	-7.246632	story	8.0	98.0	1581719112	-11.1682825
22345693	Good reasons not to use TypeScript	Good reasons not to use TypeScript	gymshoes	12.360568	-6.78228	story	8.0	17.0	1581915264	-10.454184
22413029	My favorite Erlang program (2013)	My favorite Erlang program (2013)	cprecioso	12.562535	-7.5251007	story	8.0	184.0	1582637673	12.920521
22507114	Ask HN: Beginner-friendly languages 	Ask HN: Beginner-friendly languages from the last decade?	johnblood	12.534565	-7.0251136	story	8.0	7.0	1583527251	12.343869
22567736	Erlang LS – The Erlang Language Serv	Erlang LS – The Erlang Language Server	lelf	12.538749	-7.499873	story	8.0	238.0	1584111475	-9.625
22631117	Makes you think, how much further we	Makes you think, how much further we could stretch things if we were all using the Nims/C/C++ of the world instead of the Ruby's.Please don't immediately flame, I'm just saying objectively, we could stretch hardware out much further. What do you guys think about this?	sergiotapia	12.493118	-6.996778	comment	8.0	26.0	1584648362	12.341748
22658770	Prolog and Logic Programming Histori	Prolog and Logic Programming Historical Sources Archive	homarp	13.136584	-7.2956767	story	8.0	129.0	1584912010	-12.453461
22758787	Not a bad article but Phoenix is not	"Not a bad article but Phoenix is not ""hands down the best web development framework that is out there"".It's quite great at what it does, and it's obviously technically well done, but it's also very not ""battery included"" so you have to shop around for a lot of things like Authentification/Authorization, i18n etc.Also templating feels a bit old school. After using extends and blocks with Jinja2 and Twig the ""layout that includes your action view"" model feels so rigid and limited. It seems you can use render_existing/3 that would be equivalent to content_for in Rails but that's not that obvious to meIt's unfortunate because LiveView puts back server-side rendering on the map and it's exciting."	conradfr	12.870339	-6.91059	comment	8.0	42.0	1585834702	12.697945
22817259	How does one deal with remote data i	How does one deal with remote data in typescript? I really like typescript, but not having any guarantees on the returned data is kind of frustrating.	cameronfraser	12.383124	-6.8663993	comment	8.0	31.0	1586380628	-10.484329
22875321	Ruby Concurrency Final Report	Ruby Concurrency Final Report	pvsukale3	12.563845	-6.989029	story	8.0	229.0	1586934573	12.293679
22906455	Supply-chain attack hits RubyGems re	Supply-chain attack hits RubyGems repository with malicious packages	Tomte	12.516722	-6.87851	story	8.0	151.0	1587202419	-9.295311
23037263	Arc is underrated as an information 	"Arc is underrated as an information management tool. There's something to be said for having a web framework that works out of the box. Rails is probably the only other framework that makes it as easy to ""just make some forms that pass data around and run some code on that data."" But not quite -- I haven't seen arc's closure-storing technique used in any other web framework.The main issue that arc solves is that it gives you a full pipeline for managing ""objects with properties"" via the web. It's so flexible. I wrote a thread on how we're using it in production to manage our TPUs: https://twitter.com/theshawwn/status/1247570883306119170"	sillysaurusx	12.709465	-6.716461	comment	8.0	61.0	1588287668	12.274339
23078459	Where to begin?- No proper connectio	Where to begin?- No proper connection pooling with circuit breakers.- No proper multithreading (that works in web environment) or parallelism in general.- Almost everything blocks (even `new PDO('mysql:...')` can block for whatever the execution time limit is, if there is an issue with connection or MySQL server).- Most libraries are implemented in C instead of in PHP, whereas with other languages people try to avoid native code as much as possible. This means that code is not memory safe, and understanding or contributing is close to impossible.The reason for this is because PHP doesn't support many things that are expected in any other language.PHP C API is hard to understand, hard to use, and documentation is subpar.- There is no way to easily share memory between processes. You have to	watermelon0	12.761389	-6.62701	comment	8.0	52.0	1588674756	10.274667
23199903	I started reading through these comm	"I started reading through these comments expecting a tall wave of negativity, and was surprised to see such a warm wash of mixed and fond memories from the ""bad old days"" when ES3 and IE ruled the roost.Full disclosure: I haven’t used it myself much since ~2012 or so, and modern JavaScript now contains many of the most important features that CoffeeScript offered at the time .... Although they did screw some things up (IMHO): null-vs-undefined in default arguments, super as a parent reference instead of a direct function call, optional parens for single-arguments arrow functions (Prettier agrees!), no shared semantics between arrow and normal functions, that class syntax only supports methods and not data as properties, and so on...When all is done and dusted, I hope that CoffeeScript can "	jashkenas	12.401699	-6.539095	comment	8.0	30.0	1589595587	-10.5423565
23286791	> there was no one left who could su	"> there was no one left who could support an Erlang system.If you have $200k ""python engineers"" on the payroll who wouldn't jump at the opportunity to do some additional Erlang, maybe it's time to reconsider your hiring practices and that is the real cautionary tale."	craigsmansion	12.572293	-7.522622	comment	8.0	60.0	1590270384	12.920866
33441469	After this change, the TypeScript co	After this change, the TypeScript compiler will now be compiled with esbuild. I feel like thats probably the best endorsement esbuild could get, hah.Surprising they call out the 2 space indent level that esbuild is hardcoded[1] to use as a benefit. Why not save even more bytes and re-format the output to single tab indentation? I wrote a simple script to replace the indentation with tabs. 2 indent size: 29.2MB, tabbed size: 27.3MB. 2MB more of indentation saved! Not significant after compression, but parsing time over billions of starts? Definitely worth it.[1] https://github.com/evanw/esbuild/issues/1126	zebracanevra	12.402803	-6.4685364	comment	8.0	101.0	1667416676	-10.332493
33455339	If you haven't already, do also have	"If you haven't already, do also have a look at Scott Wlaschin's talk ""Domain Modeling Made Functional with the F# Type System""  (it seems he has a whole book out on it now too) https://fsharpforfunandprofit.com/ddd/  (F# and Elm are similar enough that the concepts map directly.)I've been challenging folks for a while now: What's the economic argument for using JS in a world where Elm exists?In other words, if you want a front-end app, and you do not care about the technology used to make it (you're not using a particular stack just because you like it) then you should pretty much just use Elm, eh?If I'm some business owner who wants a web app that works reliably and is cheap to maintain, I don't know or care about the underlying tech stack, it seems like Elm is sooooooo much better than a"	carapace	12.965542	-7.664036	comment	8.0	36.0	1667500330	-12.756893
33525320	No, Ruby is slow. Its GC is ungodly 	No, Ruby is slow. Its GC is ungodly slow. And you can’t truly multithread, thus you can’t properly parallelize or maximize concurrency.	likeabbas	12.662076	-6.9783797	comment	8.0	49.0	1667947416	12.329726
33582366	Kemal: Fast, Effective, Simple Web F	Kemal: Fast, Effective, Simple Web Framework for Crystal	sdogruyol	12.617398	-7.250819	story	8.0	158.0	1668341794	-11.201713
33767872	Ask HN: Fastest Language for a CRUD 	Ask HN: Fastest Language for a CRUD App	buttocks	12.765375	-6.716946	story	8.0	9.0	1669589638	12.227123
33907564	What’s a feature that PHP is missing	What’s a feature that PHP is missing, that if it had it - would garner it more respect?Note: I think PHP is way under appreciated.	tiffanyh	12.767047	-6.635886	comment	8.0	34.0	1670505508	10.328205
33920118	I'm impressed how Rails seems not to	I'm impressed how Rails seems not to become obsolete.	WolfOliver	12.751962	-6.9408827	comment	8.0	25.0	1670584741	12.355874
34075082	I appreciate the Ruby love in this p	"I appreciate the Ruby love in this post, but it's worth pointing out that the author is clearly new to the language. I say that because he writes Ruby as if he's writing some other language, and not idiomatic Ruby.This:  dirp = Dir.open(""."")
  for f in dirp
    case f
    when /\.rb\z/
      print f, ""\n""
    else
      # do not print
    end
  end
  dirp.close

Could be made much more Ruby-native (and simpler!) as:  Dir.open('.').each do |f|
    puts f if f.match?(/\.rb\z/)
  end

My point isn't to play the ""I know the language better than you, so nyah nyah"" game, just to suggest that if the author likes Ruby as much as he says, he should learn it better."	area51org	12.544229	-7.0556364	comment	8.0	40.0	1671582806	12.383776
26486938	What’s the modern standard for a ful	What’s the modern standard for a full stack JVM app these days? Something rails-esque, or is it still just a split between Play and Spring Boot?	akhilcacharya	12.4515295	-6.9619045	comment	8.0	24.0	1615959023	12.209476
26703772	To add to the author's experience, I	To add to the author's experience, I spent 18 months of production time with Elixir and Phoenix.As he says, the templates are compiled and are blindingly fast compared to Rails.Pattern matching is really really nice when used in the right places (and you'll miss it if you go back to Ruby); but it can be overused.  There's a faction of Elixir folks who attempt to avoid all conditionals and instead seem to prefer multiple dispatch/multi-methods to handle different cases.  That's nice and very concise, because then you can simply call a function and let the pattern matching resolve which of the various implementations you've defined handle it.  The big downside here is, as a reader of the code, you have to basically mentally imagine what all cases are covered and what they mean.  Sometimes si	blunte	12.701197	-7.259644	comment	8.0	55.0	1617652335	12.785648
26711389	Any one have any pointers to learn t	"Any one have any pointers to learn the Django stack from the basics? Any specific video course or a book?""Two Scoops of Django"" was recommended to me by someone on HN. I think it is currently being worked on for Django 3. It is on my reading list."	alwaysanoobie	12.82234	-6.5681615	comment	8.0	28.0	1617715033	10.093457
26719539	Lets say I am not a Ruby dev, what w	"Lets say I am not a Ruby dev, what would compel me to learn this over Unity, Unreal, React Native game engine, or one of the other (thousand) game engines out there? Are there enough Ruby devs to sustain this?I remember Ruby Motion was a thing, then it wasn't... then it was again? I started learning web dev with RoR and quickly moved to Python as the ecosystem was so much bigger. I could transfer my Python knowledge into so many different domains. I remember at the time, I really wanted a ""Ruby Motion"" for Python... still do actually.I have come full circle and now think JS is eating the world and I am playing in that garden... we'll see where that ends up I suppose. In any case, GOOD LUCK... I hope for the best!"	monkmartinez	12.640989	-6.966153	comment	8.0	80.0	1617758983	12.369238
26828452	> I would say that Laravel is an ext	> I would say that Laravel is an extremely high quality framework (on par with and even in some ways better than Rails) that nobody should be ashamed to use.Never heard of Laravel. Decided to take a look. First thing the intro documentation says to do is install something called 'Docker Desktop'. I'm good, thanks.Why do I need Docker to play around with a web framework?	insaneirish	12.779026	-6.6422644	comment	8.0	37.0	1618537825	10.311026
27207076	Sadly that HN thread is biased towar	"Sadly that HN thread is biased toward the person/team that is ""leaving"" Elixir because it wasn't a good fit for them. For the people who understand Elixir/OTP's strengths it's excellent. We use Elixir for several apps and haven't had any issues recruiting/training people (remote). If we were to chose again we would 100% pick Elixir; nothing else comes close for our use-case."	nelsonic	12.694036	-7.4500003	comment	8.0	39.0	1621423271	12.945459
27377784	What are the best resources to learn	What are the best resources to learn Elixir for a programmer? And what are you using?	truth_	12.697173	-7.4154058	comment	8.0	24.0	1622700835	12.917995
27464857	I disagree with so much of this! Tho	I disagree with so much of this! Though I can tell the author is coming from a lot of experience.How often is it that you don't know if you're expecting a map or a keyword list? I don't think I've ever intentionally put myself in that situation (though it's nice that access supports both).They say to avoid piping result tuples, but I actually think their example code shows the strength and weaknesses of both approaches. I use pattern matching on tuples when you want more complicated behavior (that might be hard to read in a big else block for a with) and a nice with statement when there's 'one true path.'In general, I think one of my favorite things about Elixir is that they've done a good job of avoiding adding features you should never use. These all feel like personal judgements about t	aeturnum	12.604498	-7.457703	comment	8.0	49.0	1623354516	12.924702
37630951	Natalie – a work-in-progress Ruby co	Natalie – a work-in-progress Ruby compiler, written in Ruby and C++	ciconia	12.563088	-7.073636	story	8.0	106.0	1695541253	12.387366
37703878	I have been a big advocate for Elixi	I have been a big advocate for Elixir for 5 years before switching off.My takeaways: love José Valim and the team and the libs they produce. The team is always humble and helpful and produces high quality content in both code and documentation.Why I stopped using Elixir: I was using Elixir obsessively as a performance chasing tool, but then it just didn’t fill the gap properly:1. Python (or other massively used language) is preferred for large SaaS apps where performance doesn’t matter. As an engineering manager, I can go out and hire a huge team instantly for Python.2. Rust is much faster and not super difficult. When I ran out of optimizations for Elixir I found myself dropping down to Rust. Then asked myself why even use Elixir?With those two points, Elixir, like Haskell, changed my pro	iterateoften	12.688115	-7.45271	comment	8.0	43.0	1695993993	12.917991
37787235	I'm working on a fairly recent Rails	I'm working on a fairly recent Rails 7 code base. We initially started using Stimulus, but are now considering switching to React for a few reasons:- if you're looking to hire frontend engineers, the candidate pool for React is a few orders or magnitude bigger- it's getting harder and harder to find vanilla JS packages that you can wrap in Stimulus controllers for common tasks, compared to finding React packages- Stimulus doesn't really offer a way to write unit tests for your controllers. With React, you can use jest and react-test-renderer like normal.Additionally, the recent Turbo TypeScript debacle did not instill confidence in the long term stewardship of the Hotwire ecosystem.We're still on the fence about it. Stimulus does feel like a very Railsy way to write frontend code, which is	ywain	12.795234	-6.5441113	comment	8.0	40.0	1696568232	12.27314
38015038	Unpacking Elixir: Observability	Unpacking Elixir: Observability	lawik	12.677142	-7.4387665	story	8.0	176.0	1698253272	12.933008
38038498	Django is an artifact from another t	"Django is an artifact from another time period of the web, and I'd argue it's in  decline.If you want an admin wrapper around your database, you have better many modern alternatives (I use directus).
If you want low code and easy platform, you have bubble.io.
If you want an easy api for your database, you can use things like hasura.
If you want python frameworks, try fastapi (its third party admin is great).
If you want an orm, sqlalchemy gives you more bang for your buck.Many of Django's third party packages are out of date.
The data science python community has settled on Gradio.The sweet spot of Django seems to have disappeared. 
Jobs for Django are lower paying, and often more high stress than .net or other languages.Django has a great outreach with it's Django Girls, Afro-Django and D"	stuckinhell	12.829177	-6.4804916	comment	8.0	36.0	1698415147	10.016234
38141076	I’m not a frontend guy but heard tha	I’m not a frontend guy but heard that typescript is already falling off and contentious at this point. Is it truly something that’s going to stay?	ktbwrestler	12.375528	-6.745862	comment	8.0	37.0	1699106626	-10.484926
38489531	There must be something good about D	There must be something good about Drupal, but I was unable to discover it during the 6 months I had to work with it in 2008. The code was messy and the UI unnecessarily complicated. The most unsettling observation though, was that all the people who seemed to believe in it had no idea what they were talking about. I learnt Python, Django and PostgreSQL and never looked back.	gijsnijholt1980	12.807613	-6.493611	comment	8.0	39.0	1701452204	10.101834
38528720	Lies, damn lies and benchmarks.The f	"Lies, damn lies and benchmarks.The first benchmark is pretty much an empty request, so it measure each framework ""overhead"". That shows Rails+Puma at `0.25ms` overhead per request, and rage+iodine at `0.013ms`. That is significantly less yes, but it the overwhelming majority of case it absolutely don't matter, and this difference mostly come from Rails providing extra features.As for the second one, it's entirely irrelevant. It's benchmarking a purely IO workload with Puma caped at 5 threads vs Iodine without a concurrency cap. You can increase ""Rails"" throughput about as much as you want in that benchmark by raising the number of Puma threads or switching to Falcon.But also, not capping concurrency like this is risky. The second some CPU heavy work is mixed with this pure IO work, latency"	byroot	12.693207	-6.946577	comment	8.0	38.0	1701769392	12.350991
38562530	I've learned and previously also pro	I've learned and previously also professionally worked with: JavaScript, TypeScript, PHP, Clojure, ClojureScript.I really like the ergonomics of Ruby. Should I learn it? How's the job market (decreasing|stable|increasing)? Is Ruby also good for non-web things?	askonomm	12.631837	-6.993465	comment	8.0	52.0	1701987095	12.361971
14691805	I'm working with a large, 5 year old	"I'm working with a large, 5 year old Django codebase. My humble opinion: Django itself is actively hindering our ability to deliver new features.Some pain points:- Django's fat models approach is bad. By coupling model behaviour to database schema, it all but guarantees that you're gonna have a tough time modifying either.- Django's class-based views and its admin framework strongly encourages a sort of ""one-view, one-model"" approach. Just about nobody has requirements that neatly fit that worldview. If you need to interact with two models in a single view, working around it is painful.- Not Django specific, but Python is a bad choice to use at scale. The lack of a good default immutable data structure means we're stuck using mutable data structures everywhere. In a large codebase, the lac"	yen223	12.869974	-6.481383	comment	8.0	35.0	1499119678	10.054012
14746408	I want to add my POV here because I'	I want to add my POV here because I've been working with Rails for 6 years and recently changed jobs and moved to Python and Node.JS (and been working with Golang for the last 3 years).One thing I would like to say is that the development experience with Ruby/Rails is by far the best out of all of these languages. By FAR.The way you can start a project in a second is amazing, the TDD experience and Rspec integration with Rails is simply mind blowing comparing to anything else.Express might be 100% faster than Rails but it will take you 5 days just to get something running vs what you can do with Rails in a matter of minutes. From Authentication to Authorization and all the community around these.Regarding the fast/slow it's simply bull-crarp, seriously. It DOES NOT matter for 99% of us. It	avitzurel	12.720921	-6.901981	comment	8.0	39.0	1499796079	12.349374
14748535	This writeup make me even more convi	This writeup make me even more convinced of Elixir becoming one of the large players when it comes to hugely scaling applications.If there is one thing I truly love about Elixir, it is the easiness of getting started, while standing on the shoulders of a giant that is the Erlang VM. You can start by building a simple, not very demanding application with it, yet once you hit a large scale, there is plenty of battle-proven tools to save you massive headaches and costly rewrites.Still, I feel, that using Elixir is, today, still a large bet. You need to convince your colleagues as much as your bosses / customers to take the risk. But you can rest assured it will not fail you as you need to push it to the next level.Nothing comes for free, and at the right scale, even the Erlang VM is not a sil	iagooar	12.659894	-7.466764	comment	8.0	112.0	1499811152	12.917531
14748774	I read it a little differently. The 	I read it a little differently. The whole article is about how Erlang/Elixir fails at its core reason for existence (fast message passing between distributed processes) and all the complicated work-arounds they had to implement to avoid actually using this core feature of Erlang.	janekm	12.581722	-7.4943886	comment	8.0	61.0	1499813773	12.903284
15041676	Why Elixir (2014)	Why Elixir (2014)	brudgers	12.697112	-7.459399	story	8.0	150.0	1503009113	12.961024
15044391	I really am in awe of Elixir.  I thi	I really am in awe of Elixir.  I think it's an amazing language, and it introduced me to Erlang and OTP.  I've come from using scala actors, and I can do more in way less time, less memory, and similar performance if I use Elixir.That said, there are some things that suck so hard about it.The log messages suck.  If I want to use them in production and actually ship them to ELK or similar, the format really sucks.Getting information on what happens at compile time vs run time is hard.How do you handle operating system signals? like when your autoscale group decides to scala down and you get a SIGTERM with some time to handle it, what do you do? wrapper scripts suck.Not many great design resources.. I mean I've got lots of books on OTP.  But if i'm building a daemon which reads off a queue a	anko	12.617722	-7.4688997	comment	8.0	37.0	1503043313	12.923142
15154614	Q&A: PHP Creator Rasmus Lerdorf (200	Q&A: PHP Creator Rasmus Lerdorf (2002)	jpelecanos	12.769503	-6.6257234	story	8.0	32.0	1504333300	10.336137
15433206	Ruby on Rails “location hack” to bet	Ruby on Rails “location hack” to better engage with your users	nicolrx	12.789579	-6.8877263	story	8.0	7.0	1507551783	12.342496
15525430	Ask HN: Advice for someone strugglin	Ask HN: Advice for someone struggling to learn Django	megasquid	12.822438	-6.53628	story	8.0	20.0	1508653253	10.094187
15567136	Non-representative anecdote : i've r	"Non-representative anecdote : i've recently heard of two teams that started using elixir, they both came from a ruby background, and in both case they weren't using OTP.They both justified using elixir because it was ""closer to ruby"" (???), and they both seemed to live a pretty difficult time with that language. Which makes me wonder : why would you ever want to use such a special language (purely functional isn't for everyone) if you don't have any scalability issue, and don't even use OTP ?"	bsaul	12.661206	-7.4443917	comment	8.0	43.0	1509100664	12.908278
15567650	Absinthe – GraphQL implementation fo	Absinthe – GraphQL implementation for Elixir	BafS	12.741196	-7.4026613	story	8.0	177.0	1509107291	-11.630727
15647232	Ask HN: Best resources to learn djan	Ask HN: Best resources to learn django in 2017?	tsaprailis	12.830274	-6.5419183	story	8.0	13.0	1510086561	10.093004
15714426	Slightly off but is it just me or Ru	Slightly off but is it just me or Ruby and Rails pretty much disappeared in a puff of smoke after being all over HN for a while?	duiker101	12.760764	-6.969024	comment	8.0	39.0	1510852466	12.352627
23477118	While I agree that PHP does have pro	"While I agree that PHP does have pros as well as cons, I find it disconcerting that I've read MANY assertions here on HN, that PHP detractors just haven't used it very much or are mostly complaining about things like bad standard library function names.I've used PHP in earnest. It and JavaScript are tied for worst programming languages I've used. JavaScript gets more of a ""pass"" from me because I'm just not a dynamic-typing fan and I'll admit that it might be less awful for someone who enjoys/prefers Python or Ruby or whatever.PHP, on the other hand, is basically just worse-Java. And Java isn't a great language, either. The built-in PHP array is a constant source of frustration. Keys are sometimes strings, sometimes ints. And you don't always know which it is! This makes working with the a"	ragnese	12.72093	-6.626588	comment	9.0	98.0	1591797991	10.3265295
23912172	I feel like the odd man out in discu	I feel like the odd man out in discussions like these.  I don't like Typescript and I regret pushing to integrate it into a project at work.I've found it vastly increases incidental complexity and affords little to no benefit to me.  The IDE completions are nice, but ultimately not worth the price, in my humble and honest opinion.	wry_discontent	12.37163	-6.7818656	comment	9.0	41.0	1595375041	-10.46173
23962492	I'm ambivalent.There's a tension in 	I'm ambivalent.There's a tension in PHP-land between PHP's roots as a low-ish level, get-it-done, hackish language, with its big standard library and simple scalar types, and the better-organized and quite vocal developers who want it to be more Java-like, with great big frameworks and many deeply-nested complex class hierarchies. Instead of unwieldy hobbyist-hacker balls of mud, you build enterprise-scale balls of mud.Named arguments don't do a lot for the first group. It looks like the big point in favor is not having to look up a reference for which-arguments-go-where in functions anymore, but a good IDE already does that for you.But there is a common anti-pattern where you have some polymorphic function or interface, and you want to accrete your arguments somewhere and then bundle them	thaumaturgy	12.627627	-6.738278	comment	9.0	66.0	1595828394	10.30078
24181531	"""running WordPress locally is a nigh"	"""running WordPress locally is a nightmare... I should also caveat that I know almost nothing about Apache, MySQL, FTP, and PHP.""Without wishing to be too snarky, this could be rewritten as ""Running this software is a nightmare if you know nothing about the technologies it is built on."" And being slightly more snarky, my response would be: well, duh."	frereubu	12.783349	-6.532713	comment	9.0	59.0	1597613618	10.301907
24185963	AtomVM: Erlang on Microcontrollers	AtomVM: Erlang on Microcontrollers	alex7o	12.547668	-7.5008154	story	9.0	120.0	1597661521	-9.068977
24235440	PHP 8.0.0 beta 2	PHP 8.0.0 beta 2	julien_c	12.797485	-6.662522	story	9.0	77.0	1598021998	10.352733
24331071	Ruby: We have decided to go forward 	Ruby: We have decided to go forward to 3.0 this year	anshul	12.638316	-7.0404143	story	9.0	325.0	1598879444	12.3783865
19989052	Sudoku Solver in Common Lisp (2009)	Sudoku Solver in Common Lisp (2009)	deepaksurti	13.45833	-7.4081187	story	9.0	33.0	1558592938	15.078609
20477793	Setup VS Code for Efficient PHP Deve	Setup VS Code for Efficient PHP Development	lmichelin	12.767415	-6.6280193	story	9.0	95.0	1563536687	10.282336
20584773	Hartl's Rails tutorial. Probably the	Hartl's Rails tutorial. Probably the best intro to modern full stack development I've ever come across.https://www.railstutorial.org/book	aphextron	12.723193	-6.9624963	comment	9.0	34.0	1564673864	12.384569
20721433	Effortless Elixir Releases and Deplo	Effortless Elixir Releases and Deployment	AlchemistCamp	12.688805	-7.455063	story	9.0	127.0	1566006791	12.931378
20897029	Parallelism in Crystal	Parallelism in Crystal	sdogruyol	12.605532	-7.257924	story	9.0	139.0	1567787189	9.014952
20948880	Plus – A superset of PHP that makes 	Plus – A superset of PHP that makes PHP cool again	djxfade	12.763008	-6.6514387	story	9.0	15.0	1568272943	10.333672
13707977	I know this probably comes up each t	I know this probably comes up each typescript thread, but I still cannot figure out why I should use TS instead of flow + es6, and maintaining the typing definitions always discourages me as it's one more thing that needs to be kept up to date. Am I working on old information here?	treehau5	12.374117	-6.791839	comment	9.0	75.0	1487789041	-10.474254
13753337	Come on, Antirez is a x10 programmer	Come on, Antirez is a x10 programmer, he coded one of the most brillant software of the last decade. It's so well done I use it as an example in my trainings, making people compile it to stop being afraid of building from source because I know it never fails and it's so damn simple.And programmer reading anything on his blog, or anything on HN for that matter, is not an average programmer anyway. The simple fact you are interested in your work singles you out.Guys, you need to come out of your super power bubble and come to work down here. Where people uses PHP, SVN, and don't know what an environment variable is. Where they work for money, not for passion. Where Vi is scary and they pay the licence for Oracle even if their DB has one table.This is the huge majority of the devs : plumbers.	sametmax	12.766352	-6.610661	comment	9.0	38.0	1488286036	10.263613
13948916	I don't particularly like TypeScript	"I don't particularly like TypeScript.
It slows me down because of several reasons:- Compile time means that it takes more time to debug anything.- The rigid interfaces mean that I need to spend more time researching how to use various modules/libraries (maybe code completion would offset this problem but this is only possible with a heavy IDE that has intellisense or similar - Not Atom).- When I want to test something quickly, I often get annoying compile-time errors along the lines of 'code is unreachable...' among others.- It requires more planning to do anything (since you have to design the interfaces before you can start to implement). This is also not good if you just want to try something quickly and then roll back later.- Changes to one class/interface tend to have a large cascadin"	jondubois	12.36217	-6.778398	comment	9.0	32.0	1490363851	13.298789
14061985	The BEAM Book – A Description of the	The BEAM Book – A Description of the Erlang RTS and the Virtual Machine BEAM	weatherlight	12.538367	-7.4885893	story	9.0	336.0	1491587914	12.885853
14360966	"I'm so glad to see the mention of ""a"	"I'm so glad to see the mention of ""app"" directories here. I've only dabbled in Django development, but I've always thought the desire to divide things into apps didn't really make any sense. It felt like the developers of Django had said ""well, intuitively, there must be some unit of reuse at this level"" and then stuck the notion of apps in there in an attempt to provide that reuse.This seems to me to be somewhat unpythonic, unnecessary complexity introduced right from the start - why not make the reuse optional?. The file system layout becomes confusing as a result. More generally, I would expect that the most minimal Django site would be a single file, that would seem most Pythonic, but it isn't designed like that. Django doesn't ""feel"" like most Python projects do.I've always assumed th"	randomsearch	12.83288	-6.5266247	comment	9.0	48.0	1495043912	10.037112
14368050	Crystal Lang vs. Node.js vs. Go Benc	Crystal Lang vs. Node.js vs. Go Benchmarks	bigtunacan	12.392394	-7.358823	story	9.0	22.0	1495121410	10.122515
14390916	Building a Reddit-like site after 3-	Building a Reddit-like site after 3-4 months learning Elixir	stanislavb	12.690938	-7.4369493	story	9.0	175.0	1495425757	12.922305
18968495	"""Everything's an object"" is object o"	"""Everything's an object"" is object oriented programming done right and I can see why Ruby and other languages used those ideas from Smalltalk. I couldn't understand the fascination with the integrated environments though. It was my biggest stumbling block. Is there a pathway to use Pharo with my traditional tools?"	thekingofh	12.355365	-7.2556405	comment	9.0	63.0	1548167919	7.0856156
19103796	Elixir allows you to build powerful 	Elixir allows you to build powerful DSLs within the language using macros and optional syntax. Also, if you write CSS well you end up with a DSL describing your screens. What other languages give you this power?	andy_ppp	12.669074	-7.435174	comment	9.0	40.0	1549527002	12.938365
19131731	> What greater 'tax' could you possi	"> What greater 'tax' could you possibly conceive of than a whopping 38%I always find it fascinating looking at the number of lines of code which do the same thing in different languages. Foundationdb maintains official bindings in Java, Go, Ruby and Python. The implementations have almost complete feature parity. They're all maintained by the same team, and as far as I can tell they all follow best practices in their respective languages.The sizes (minus comments and blank lines) are[1]:Python: 4053Ruby: 2397Go: 3968Java: 1007738% seems like a lot but language expressiveness dominates that. If ruby and java code were equally difficult to write, you'd be paying a 320% tax moving from ruby to java for an equivalent program.I'd love to see a ""programming language benchmark game"" that only all"	josephg	12.444847	-6.9104714	comment	9.0	45.0	1549853927	-10.44837
19351385	The Essence of Datalog (2018)	The Essence of Datalog (2018)	bibyte	13.17091	-7.0103507	story	9.0	154.0	1552214828	5.7532163
19617885	Since it seems that he used Ruby thr	"Since it seems that he used Ruby throughout the book, I wonder if that's the right choice or it will limit the book's audience.I'm contemplating writing a long ""from scratch"" style book on another topic and I'm still not sure which language I should use. Using more than one (Java, Python,...) and generating multiple flavours of the book could be a good idea I think."	gvand	12.6177	-7.054993	comment	9.0	36.0	1554836459	11.735588
19650518	Except that PHP does have a REPL, an	"Except that PHP does have a REPL, and using PHP_EOL is hardly a big deal. PHP induces an undeserved gag-reflex for most Ruby / Python / JS devs because they read some ""why php sucks"" post on someone's blog ten years ago, but really the language is quite modern now (not to mention faster)."	carmate383	12.727768	-6.703075	comment	9.0	48.0	1555119516	10.355373
19715493	Why is Elixir always being paired wi	Why is Elixir always being paired with Phoenix? Can’t I just have a backend API running on Elixir and a javascript front end to interact with it? I’d prefer a simple React, Postgres, Elixir stack (REP).	rossenberg79	12.762867	-7.342666	comment	9.0	34.0	1555893403	12.790825
19918578	On one hand, I do see that HN (and p	On one hand, I do see that HN (and probably Reddit) live in a bubble.  Where most of the darling languages and tools have very low use in the real-world.  And where most of the languages and tooling that actually run the real-world go un-discussed, or simply dismissed, because they're boring and don't appeal to students and entry-level devs working on side projects.  I realize that the perspective most rookies get from these forums is completely distorted.On the other hand, I ALSO think that PHP is only still relevant because of WordPress.  The business world runs on Java, and .NET to a lesser extent.  I see job postings for Python all the time, as it and the JVM run the worlds of data science and big data.  One can even still make a thriving living with Ruby.  But I just don't see any rec	StevePerkins	12.770087	-6.633333	comment	9.0	60.0	1557922125	10.289819
15851025	I hated it in university and hate it	I hated it in university and hate it until this very moment. I get what this language is doing and why it is great for special usecases. But I can absolutly can not read code written in Prolog. Staring at 3 lines of code and not knowing what the hell it does, gives me nightmares till today.You can write a quicksort in a few lines. You can traverse over a tree very easily. But understanding these few lines takes me more time than writing it in C, Java, PHP etc.. But I guess it is all training...	legionth	13.143007	-7.2906756	comment	9.0	31.0	1512471167	-12.482177
15880181	Not trying to start a flame war here	Not trying to start a flame war here, buy what is the argument for using Rails over Express or Django/Flask for a new project ? Genuinely curious to know the benefits / downsides of each option	zabana	12.796568	-6.6367483	comment	9.0	31.0	1512753228	10.236639
16159975	Has anyone considered building with 	Has anyone considered building with TS--from the ground up--a React-like library? It seems like TS could help deal with lots of data and validation errors in a more concise and predictable way.	ralmidani	12.496856	-6.5747457	comment	9.0	42.0	1516123647	-10.459706
16209447	Excellent!I recall someone on here (	Excellent!I recall someone on here (HN) saying that many of Elixir's strengths are weakened significantly because K8 does similar things (auto distribution, hot reloading, etc.)Any truth to this? Also, can you distribute nodes on VMs and deploy them to Google Cloud?---As a side note, is there a front-end equivalent to Elixir? Elm is functional but is non intuitive. Elixirscript is a thing but seems a bit too early.	tabeth	12.68918	-7.436042	comment	9.0	49.0	1516665758	12.906962
16213275	Is anybody here using perl 6 in prod	Is anybody here using perl 6 in production at the moment? Or perl 5 for that matter?	bigbluedots	12.351408	-7.0387154	comment	9.0	46.0	1516713044	13.185558
16315351	What can ReasonML do that TypeScript	What can ReasonML do that TypeScript can't?	azr79	12.378985	-7.125096	comment	9.0	35.0	1517911894	-10.424071
16361971	Kinda suprised when I see title like	Kinda suprised when I see title like that on HN that not so many people are talking about Crystal https://crystal-lang.org. Basically Ruby with C performances.So far I’ve been more convinced by Crystal than Elixir as the next language for a Ruby developer.	raitom	12.638213	-7.2469296	comment	9.0	35.0	1518468516	-11.224621
16622058	This is a really useful and informat	"This is a really useful and informative writeup.However, to me it just highlights a lot of things that Wordpress/PHP is bad at. For one, no mention of testing here (or really hardly anywhere in PHP-land), although keeping the API logic in a separate class is a good idea.Also, the flexibility/ease of use tradeoff going from wp_remote_get and friends is terrible. It's so frustrating that PHP doesn't have a better general networking solution than ""idk, just fork to curl"". The Guzzle library helps a lot here, but I don't see a lot of the PHP/WP community embracing it much.With the current plethora of widely-supported Web development frameworks, I really don't see any reason to use PHP or Wordpress for new projects."	news_to_me	12.759889	-6.6103044	comment	9.0	36.0	1521486867	10.291031
16750150	I've never tried Sails, but I'll not	"I've never tried Sails, but I'll note that it has a very bad reputation in the node community for many years, with particular scorn heaped on its poor documentation, many bugs, slow development pace, and (especially) its truly bad ORM.Representative criticism: https://kev.inburke.com/kevin/dont-use-sails-or-waterline/Or see the comments here: https://github.com/balderdashy/sails/issues/3429Now admittedly that was three years ago, much may have changed, and this release may be amazing, but I'd suggest doing some due diligence.  I've run across 6+ different projects regretting their use of Sails; I've yet to run across someone celebrating their decision.  The project is troubled and probably on no one's list of ""top 3 node js frameworks""."	Lazare	12.73358	-6.707294	comment	9.0	47.0	1522795781	12.270119
16936079	The real value of Flask is that it m	"The real value of Flask is that it makes you appreciate what Django does by default.When I first started learning Python / web frameworks, I went with Flask because it was smaller and ""simpler"". As my project grew however, I had to organize it. I was basically imitating what Django gives you by default, though less cleanly."	ckuhl	12.7616005	-6.5503445	comment	9.0	33.0	1524778660	10.0368395
17106667	Does anyone know of erlang being use	"Does anyone know of erlang being used for scientfic computing? The ideas and ""let it crash"" scheme outlined in the article are really cool, and it made me think how it would actually be very useful for making robust data pipelines in scientific contexts. For example, in astronomy you would have a telescope spitting out raw data, and a pipeline processing the data to create more inspectable intermediate products. Typically these are brittle C/C++ programs, with lots of state and branching logic, and further they become extremely hard to refactor because their function is so integral to running the facility. Erlang seems like it would be very useful for a control and pipeline system like this that needs to stay alive and not crash, but it's hard to tell (for me) if it's well suited to numeri"	autocorr	12.533329	-7.503485	comment	9.0	34.0	1526704158	12.903091
17417035	I feel like I just got into a time m	I feel like I just got into a time machine - this is the top post on hacker news? People are learning Django in 2018?I guess its fine if you have a small project and aren't going to see much traffic, but Python is so slow and difficult to maintian compared to (e.g.) Go. I say this as someone who worked in Python for a long time, and on several large Django projects.	jaffee	12.761344	-6.5504165	comment	9.0	43.0	1530195568	10.1165695
17500989	So, should we stick to PHP for web s	So, should we stick to PHP for web stuff or is JS here to stay ?	johnchristopher	12.64979	-6.4771047	comment	9.0	65.0	1531248352	10.26899
17558095	Confessions of a recovering Perl Hac	Confessions of a recovering Perl Hacker	peteretep	12.345362	-6.9991174	story	9.0	45.0	1531920021	13.180426
17600231	Our Use of Haskell and Elm	Our Use of Haskell and Elm	blackRust	12.943422	-7.675494	story	9.0	143.0	1532433869	-12.762594
17663305	I've been working with Django for al	I've been working with Django for almost my whole career, since 1.1. It's a joy to use, and blows any other web framework I've used out of the water when it comes to actually just building stuff.Django is a fantastic boring[1] tool, and seeing boring updates like this is great.1: http://mcfunley.com/choose-boring-technology	fredley	12.815455	-6.534509	comment	9.0	69.0	1533136975	10.12089
17672021	I'm always surprised and delighted t	"I'm always surprised and delighted to see so many ""first implementations"" of languages in prolog. It was described to me in college as ""just a novelty"" but in fact it's used extensively in the JVM internals [1] and apparently is the starting-point impl for other languages.But prolog still seems so..awkward. I wonder why langs like Haskell or OCaml aren't more de-facto for these purposes; they seem to have similar expressive power for parser/grammar things and with less inside-out paradigms (imho).[1] https://docs.oracle.com/javase/specs/jvms/se8/jvms8.pdf"	ryanianian	13.129664	-7.290225	comment	9.0	39.0	1533222498	-12.489112
21224069	I don't get point of using Node.js w	I don't get point of using Node.js when compared to something like Elixir. Elixir's Phoenix can handle more numbers of concurrent connections as well as provide reliability with better programming abstractions, distribution, pretty good language.	anildigital	12.371071	-6.5018845	comment	9.0	59.0	1570800187	12.834904
21380212	One of the authors here. This websit	"One of the authors here. This website is still a work in progress.It's an ongoing effort to gather all the resources that will help you use Erlang in a business. The booksite is divided in three sections focusing particularly on Erlang/OTP’s higher level concepts in the current open source ecosystem, how to use it in production (while setting up a pipeline for continuous development and delivery), and how to build a team when you’re starting from scratch.We're working mostly linearly in each section, but they're not all progressing at the same pace. We have nothing yet on ""building a team"" although our outlines are all planned; the ""hard things to get right"" chapter was supposed to come in later but we saw enough questions about these topics to rush it out.We might release things from each"	mononcqc	12.572248	-7.524523	comment	9.0	62.0	1572288608	12.914796
21437037	Robotics Development Environment wit	Robotics Development Environment with ROS in C++ and Python	protontypes	12.670032	-6.865628	story	9.0	150.0	1572818845	12.197589
21657492	While everyone else (well, me) have 	"While everyone else (well, me) have their attention on the hippest, newest languages PHP has been steadily improving, getting faster, and still runs a lot of the largest web properties. It wouldn't surprise me if before long PHP can be compiled to native binary* complete with a memory efficient, non-blocking web server and performance approaching what Go and dotNetCore can achieve... and the option to emit a ""normal"" PHP web app that can run anywhere if you don't need Facebook-level performance from it.*I realize HipHop PHP did this already but it doesn't have it's own baked-in web server afaik. I'm thinking along the lines of compiling down to something small and fast to be deployed to K8S clusters without needing containers for Apache or nginx as part of the setup."	mikece	12.764628	-6.6112223	comment	9.0	44.0	1574950581	10.305209
21684717	Zulip has been powered by Django sin	Zulip has been powered by Django since the very early days of its development with Django 1.4, back in 2012. As a reasonably mature web application with significant scale, we're at the stage in many companies' development where one starts to rip out more and more of the web framework to optimize things or just make them work the way we want. (E.g. while I was at Dropbox in early 2016, we discovered we only had about 600 lines of code left from the original Pylons framework that actually ran).One of the things that has been really fantastic about Django is that we're still happily using it for the vast majority of code in the project, and every time Django comes out with a new release, I read the changelog and get excited about several improvements that actually make my life better.Overall 	tabbott	12.767053	-6.583573	comment	9.0	34.0	1575308717	10.096974
39084448	I think Ruby is OK enough, but what 	"I think Ruby is OK enough, but what is this?    state_machine :state, initial: :parked do

I think in their zeal to ""golf"" the language, they forgot to actually keep it readable"	38	12.485559	-6.9819436	comment	9.0	59.0	1705882096	12.2910795
39088018	Differences Between miniKanren and P	Differences Between miniKanren and Prolog	tosh	13.132009	-7.287845	story	9.0	63.0	1705918854	-12.487105
39252314	I just wish Web wasn't such a frustr	I just wish Web wasn't such a frustrating development experience.  While it has improved leaps and bounds in the last decade, I still find it to be suboptimal when compared to native offerings.Most of that frustration comes down to tooling and more specifically TypeScript.  I'm not sure how to succinctly express my pain here but I have found generally that I wrestle with the type system in TypeScript far more than native offerings.	rubicon33	12.355023	-6.770032	comment	9.0	37.0	1707067900	-10.447211
17925336	My experience with ROS has been subo	"My experience with ROS has been suboptimal. It's a collection of incompatible, outdated and buggy tools that communicate with each other via a single-point of failure (roscore) using a pub/sub mechanism.Furthermore they use their own build system (catkin, WHY?), define their own IDL (WHY?), use their own dependency system (rosdep, WHY?) and even mess with your Bash environment.I appreciate their effort and it is really hard to make a system that interfaces with all kinds of different robots and hardware, but I don't understand why they don't exploit existing high-quality solutions for the ""not-robot-related"" parts of their system. At the moment I don't think I would like to have ROS run a potential self-driving car."	protomikron	12.692348	-6.8616242	comment	9.0	55.0	1536231908	12.19395
17994851	Stories – Medium clone built with Ra	Stories – Medium clone built with Rails	miguelmichelson	12.772392	-6.9167356	story	9.0	80.0	1537028589	-15.5170965
18096084	The regular thread of people piling 	The regular thread of people piling in to criticise dynamic  languages.  Instead perhaps people could suggest a better language/framework that is more productive than Rails, and has had a long lifespan in a large codebase?	jimnotgym	12.632892	-7.0346313	comment	9.0	80.0	1538161238	12.377887
18118304	I'm disappointed setting up typescri	I'm disappointed setting up typescript is still such a pain with 2.0.	b-nint	12.414728	-6.755992	comment	9.0	56.0	1538446093	-10.497484
18310666	As a long time Erlang developer I wa	"As a long time Erlang developer I was suprised when I first heard of Elixir, and even more surprised at how nice it was.That said I think Elixir is very unerlangish. It’s very much Ruby ported to a new platform, it’s heavy on meta programming with macros and using a giant solve all your problems web framework (Phoenix). Compared to Ruby on Rails I think it makes a lot of good arguments. It’s faster, mix is a better package manager, and the BEAM is reliable at small to
medium scale.Of course I recently posted about
how I was moving away from the BEAM to Rust. I think Elixir has reached peak adoption, and I think the days of large frameworks like Rails and Phoenix that ask you to program in a DSL are sunsetting in 
favor of client side frameworks and smaller web services built off of thinks "	ilovecaching	12.647167	-7.4365783	comment	9.0	44.0	1540570884	12.869115
18830959	We've been following this stalk for 	"We've been following this stalk for quite a while and are super happy with it. But there's huge downside:It's really hard to find Django/ Python engineers - let alone phoenix devs.
Right now I'm considering a move to JVM. But the frameworks i've seen are all far behind Django.
Any thoughts?"	sebslomski	12.757118	-6.54605	comment	9.0	31.0	1546684614	10.055638
18849649	I really like the kind of sanity tha	"I really like the kind of sanity that TypeScript brings to JS, super well designed and usually a pleasure  to work with. That said, I've worked in many languages and I can't see any reason you would willing write your backend in JS or TypeScript.Java, C#, Rails, and to some extent Python are much saner choices. The massive churn of the JS ecosystem bleeds through to the backend, hard.JS could use a little more of the cruft and process that makes Java and C# especially so ""uninteresting"".Java especially is kind of a joy to work in if you ignore the cruft. Everything is generally well documented, the libraries are mostly very solid, code is almost always backwards compatible, there isn't a zillion ways to do everything, frameworks tend to live for a decade or so.And it's faster than JS, and "	spricket	12.330758	-6.731525	comment	9.0	124.0	1546892899	-10.440391
18884751	I haven't used PHP in around 6 years	I haven't used PHP in around 6 years (running PHP 4 I belive); has the language improved ?  My biggest complaint was that the API was incredibly inconsistent, but that seemed like it could be improved in later versions if they weren't afraid of breaking backwards compatibility.	tombert	12.760552	-6.6535506	comment	9.0	29.0	1547225311	10.33787
29800305	Dark Crystal	Dark Crystal	simonebrunozzi	12.64625	-7.240016	story	9.0	54.0	1641329545	-11.164759
29890645	I started my career in PHP ~15 years	"I started my career in PHP ~15 years ago trying to do OOP in PHP 4.x. That was ""fun"".In the meantime I switched to other stacks but I've been keeping a distant eye on how PHP was evolving and I still am involved with PHP projects to a certain degree, though rarely at code level.I really appreciate the effort put into fixing most of the things I hated about the language, though at times it felt like the language and some of the frameworks were trying too hard to copy the Java ecosystem, all while Java itself was starting to modernize.I'm curious what is the value proposition of the latest PHP version(s). Why would I choose PHP when starting a greenfield project? I know one of the easiest answers is that there's a huge amount of developers worldwide that know PHP, but apart from this obvious"	cntainer	12.768369	-6.6454635	comment	9.0	68.0	1641903594	10.373255
29944542	Minimal Viable Programs – Joe Armstr	Minimal Viable Programs – Joe Armstrong – Erlang and Other Stuff	lifeisstillgood	12.543741	-7.5141983	story	9.0	96.0	1642232633	12.905147
30070580	What's new in Ruby 3.1?	What's new in Ruby 3.1?	ksec	12.622897	-7.043798	story	9.0	174.0	1643109542	12.376314
30096930	50 Years of Prolog and Beyond	50 Years of Prolog and Beyond	elvis70	13.154552	-7.300191	story	9.0	101.0	1643264870	-12.483993
30454603	This is really exciting news. Lots o	"This is really exciting news. Lots of folks slam Rails for being slow and inefficient despite there being massive sites using it at scale (Shopify, GitHub, etc.) with very commendable response times and uptime.At the same time you can still run a single $20 / month server for ""smaller"" apps even with Rails + Sidekiq + Action Cable + Postgres + Redis all running on the same server to power your solo developed SAAS app with thousands of customers while having a p95+ response time of <= 100ms.PRs like this just mean things are going to get even better than they already are and is probably a precursor to converting a bunch of Rails internals to use Fibers over time. The best part about it is I as an end user don't need to know the details, I just know my CPU and memory usage will go down over "	nickjj	12.748884	-6.919307	comment	9.0	137.0	1645710569	12.354888
30705396	Yes, PHP is faster than C#	Yes, PHP is faster than C#	withinboredom	12.639155	-6.62831	story	9.0	15.0	1647472501	10.266369
12708228	My company's product backend is writ	My company's product backend is written in PHP.  I'm currently rewriting it, and when I started the process, I tried doing it in Node.js because 1) the possibility of client/server code sharing and 2) that's what all the cool kids were doing.  That lasted all of a few weeks before the async nature of Node made my head nearly explode.  I scraped that and went back to PHP where you can depend on code being executed line-by-line, synchronously, without hacks.As a language, PHP definitely has some warts.  But, it's come a long way, and it keeps getting better all the time.Personally, I don't think it deserves all the hate it gets.  Some criticism is warranted, but definitely not all of it.  I think a lot of it stems from the fact that the language is so easy to learn and lets you do things you	ubuntuftw	12.721975	-6.5523877	comment	9.0	49.0	1476454824	10.284897
12924865	Ruby 3x3: Matz, Koichi, and Tenderlo	Ruby 3x3: Matz, Koichi, and Tenderlove on the Future of Ruby Performance	potomak	12.631373	-7.057591	story	9.0	215.0	1478815242	12.359845
13026054	From what languages is Elm inspired?	From what languages is Elm inspired? I've a Java/C#/PHP/JS background and I feel really uncomfortable with Elm syntax.	ggregoire	12.979874	-7.6794577	comment	9.0	51.0	1479937880	-12.75145
13087432	Not to derail the thread at all.But,	Not to derail the thread at all.But, for a brand new greenfield application.  Why would someone choose PHP for their backend, when Golang is available?I was at a developer meeting with a company who were reviewing what to use for a client project.  The developers are from PHP/jQuery shop, however they felt it necessary to be with the times so to speak, for the future to get other projects.  They opted for Vuejs and Golang with server side processing.Apparently the client has some server side operations which are particular heavy and mentioned that php/python/ruby are just too slow with their own internal testing.Many thanks!	markharris99	12.678232	-6.716476	comment	9.0	39.0	1480672974	10.317467
13113748	Ask HN: Should I learn PHP in 2017?	Ask HN: Should I learn PHP in 2017?	swah	12.761618	-6.6277466	story	9.0	4.0	1481022658	10.342212
13118484	GRiSP – Erlang-based IoT hardware pl	GRiSP – Erlang-based IoT hardware platform	pjmlp	12.562619	-7.510737	story	9.0	188.0	1481059729	12.907237
13281333	A new year resolution to have Crysta	A new year resolution to have Crystal reach the 1.0 milestone in 2017	spalladino2	12.655162	-7.2755556	story	9.0	130.0	1483055828	10.4223585
13474976	"I think the ""more cores == faster"" b"	"I think the ""more cores == faster"" benefit is overstated.Without jit Erlang is so slow that languages without concurrency support will kill it. It's even more overstated when something like Go can mostly scale as well over multiple cores but be x times faster while doing so. Not to mention it's 10 years later and we haven't seen massively parallel architectures take off.I suspect other languages are going to fold the good parts of Erlang/BEAM into them and limit its long-term adoption."	aaron-lebo	12.39334	-7.5292034	comment	9.0	44.0	1485288422	12.876274
13499619	how easy is it, even if you do need 	how easy is it, even if you do need complex calculations, to get the best of the Erlang VM and call out to say, Python/Numpy or C when necessary? Can these external processes still be supervised, for example? Are decent sized matrices (for example 100x20000 floats so an 8MB data structure) easily movable around the Erlang VM via message passing?IE is it viable in your opinion still to use Erlang as a system for distribution and routing of lots of heavy calculations to many users, if said calculations are performed outside of BEAM? I am looking at building a multivariate financial calculation engine, which must be interactive for up to 1000 users, with large firehose of real time data coming in, being massaged, and then distributed, with the calculation graph being customizable for each use	vegabook	12.531527	-7.5183005	comment	9.0	42.0	1485523642	12.933782
27538919	Gleam 0.16 compiles to JavaScript	Gleam 0.16 compiles to JavaScript	todsacerdoti	12.522645	-7.456141	story	9.0	154.0	1623933539	-12.33381
27567104	One of my greatest disappointments i	One of my greatest disappointments in life is that programmers don't give a shit about the actual experience of using a particular language and it's ecosystem, and instead go full sheep mode and follow the crowd for whatever reasons they think are valid.I don't hate python but it's existence is the main brake slowing ruby down.I enjoy programming in Ruby. As the years roll by and I get more grey hairs the enjoyment I get from other languages descends to just toiling away and wasting one's life.Thank fuck for Ruby	awesomeusername	12.532605	-7.0352244	comment	9.0	49.0	1624163759	12.393024
27591079	Onboarding to Elixir	Onboarding to Elixir	lawik	12.695778	-7.45315	story	9.0	189.0	1624367025	12.932046
27776314	EleutherAI One Year Retrospective	EleutherAI One Year Retrospective	tehsauce	12.689588	-7.46565	story	9.0	142.0	1625770789	12.945311
27903288	Crystal 1.1.0	Crystal 1.1.0	bornelsewhere	12.6592655	-7.2805676	story	9.0	248.0	1626851853	10.441833
27985000	The Human Side of Elixir	The Human Side of Elixir	feross	12.6942425	-7.4583983	story	9.0	186.0	1627486327	12.942915
27999846	Building a gameserver in Elixir is n	Building a gameserver in Elixir is not great imo, performance is subpar. I work in online games and no one would want to use that language.I guess they have low constrains since they only need to support 10000 players at a time and they want a single instance for that.- Erlang runtime is slow- Memory consumption is high- GC is not very good ( vs Java / C# / Go )- high cost in term of performance because of immutabilityIt's not the kind of things you want for a game.To give you some perspective on popular FPS games, they run between 30hz and 120hz  with up to 64 players and usually only use a single CPU core. And they're doing gameplay simulation / state replication / physics sometimes AI etc ...Also it must be pretty painful to not re-use their C++ client code on the server side, they have	Thaxll	12.633514	-7.4551854	comment	9.0	60.0	1627583678	12.905226
12163838	Ember.js 2.7 and 2.8 beta released	Ember.js 2.7 and 2.8 beta released	andruby	13.118163	-6.4476414	story	9.0	170.0	1469516922	-15.521288
35233413	Deno is the perfect real world examp	Deno is the perfect real world example of a programmer looking at the complicated mess of code they wrote over many years, deciding to start fresh to fix all the problems, realizing their simple and elegant new product does not address all the use cases that the old one did, adding more and more complexity to it until it does, and eventually ending up with exactly what they had before.	paxys	12.493589	-6.451403	comment	9.0	56.0	1679327547	-11.003451
35479108	I absolutely love Rails. I'll always	"I absolutely love Rails. I'll always remember back in 2010 catching the train to Waterloo station in London and seeing a huge sign overlooking the train tracks that read something like ""We Need Rails Developers"".Rails was such a huge part of my professional career.Now, 13 years later and I'm deep in the JavaScript ecosystem and have been for 8 years.The most exciting thing to come out of this ecosystem recently is RedwoodJS, because it takes a lot of inspiration from Rails."	upmostly	12.766949	-6.8968024	comment	9.0	47.0	1680852713	12.337696
28131876	Is anybody using Deno at work?I feel	Is anybody using Deno at work?I feel like there was this rush of excitement when it first came out, and that's mellowed to a steady stream of updates and some sustained low-medium interest. It seems like everybody's following it from the sidelines, waiting to see what happens. That's my situation at least.I'd love a world where I can write everything in TypeScript with minimal building hassle, but I'm curious to what degree that's panning out in industry.	brundolf	12.521859	-6.456847	comment	9.0	47.0	1628617502	-10.929477
28325614	Phoenix 1.6, RC0 released	Phoenix 1.6, RC0 released	thibaut_barrere	12.810118	-7.011543	story	9.0	106.0	1630054065	-12.629712
28502711	I had a brief love affair with Elixi	I had a brief love affair with Elixir/OTP recently. The language ist beautiful, the platform very impressive. Genserver and the actor model are very powerful tools for concurrent systems and Phoenix is one of the best web frameworks I ever tried.BUT the tooling was a bit lacking (e.g JetBrains IDE, good debugging workflow), the library support was a bit spotty (e.g for Auth, everything high quality but often abandoned). Then if you use e.g GCP there is no real first class language support and if you deploy to Kubernetes then there is a lot of overlap with Beam/OTP for deployment management etc. this and I feel for most quick web development pure functional programming is too much mental overhead for me (maybe this comes down to practice). I feel way more productive with e.g Go or Node.I ha	halotrope	12.655858	-7.4289145	comment	9.0	39.0	1631465302	12.873776
28510900	How much of this is just the million	How much of this is just the millions of Wordpress or Nextcloud installations? I’d be more interested in knowing how many unique apps or developers work on each language because in my experience I haven’t actually seen a single php developer other than Wordpress tweakers.	hexa22	12.756377	-6.6377897	comment	9.0	31.0	1631537712	10.350371
22316398	Anybody else feeling that strict typ	"Anybody else feeling that strict typing and long var names are not worth all the visual overload?Example: https://github.com/wikimedia/parsoid/blob/master/src/Parsoid...This is how I would write the function definition:    function html2wikitext($config, $html, $options = [], $data = null)

This how Wikimedia did it:    public function html2wikitext(
        PageConfig $pageConfig, string $html, array $options = [],
        ?SelserData $selserData = null
    ): string

I see this ""strictness over readability"" on the rise in many places and I think it is a net negative.Not totally sure, but this seems to be the old JS function definition:https://github.com/abbradar/parsoid/blob/master/lib/parse.js...A bit cryptic and it suffers from the typical promise /"	TicklishTiger	12.371687	-6.5848155	comment	9.0	36.0	1581585676	10.2189
22625806	A reverse situation here. I deal wit	"A reverse situation here. I deal with strict no typescript policy, so besides a problem of finding typescript devs, we have a problem of having to ""de-typescript"" a lot of 3rd party code.Typescript has a lot of adoption within with ex-Java devs, and with that comes a lot of ""Java-think."" It's hard for these people to adapt to not doing things ""the Java way"" and vice versa.And another part of the problem is that people have burnt themselves badly with Coffeescript, Clojurescript, and few other *scripts that were coming and going trends, and were an enormous LTS burden because of tooling that breaks as fast as you fix it."	baybal2	12.373323	-6.7509127	comment	9.0	106.0	1584609359	-10.443656
22725829	Towards Crystal 1.0	Towards Crystal 1.0	chenzhekl	12.642447	-7.2685013	story	9.0	121.0	1585551811	10.415758
22895363	How significant is the adoption of T	How significant is the adoption of TypeScript? Angular was built with it; React now recommends it too. Is this really the ratification of TypeScript as THE front-end language?	mikece	12.418674	-6.706614	comment	9.0	58.0	1587086824	-10.517265
22897098	I like Elixir and all of its infrast	I like Elixir and all of its infrastructure and libraries, like BEAM and Phoenix, but I could never get used to not having static types. What's the best way to have static types in Elixir?I have seen in Elixir an implementation of functional programming concepts that might prove useful: https://github.com/witchcrafters/witchcraft. It hasn't been updated since last year so I'm not sure if it still works.These days I've just started using Rust and actix-web instead, seems a lot faster due to no VM, with static typing, and moreover, algebraic data types. I wonder if I could use another language without ADTs anymore.	cercatrova	12.480412	-7.420055	comment	9.0	37.0	1587110409	12.9264145
23030453	A small question. Is PHP still a pre	A small question. Is PHP still a preferred platform for any sort of complex web development?I have never even looked at the php site or docs, but I am curious.In this day and age, is there a subset of Apps that PHP is suited for?	kumarvvr	12.759097	-6.639201	comment	9.0	34.0	1588252658	10.34255
23078257	I wonder if most developers that tra	I wonder if most developers that trash on PHP for trivial issues like seen in this thread haven't been using it for many years, or had a bad experience (e.g. maintaining a legacy app).Some developers live in a kind of technical vacuum where, I guess they assume, the technical features of their programming language are what makes the difference in the value of the business they're building.In reality, the difference is in how easy it is to hire developers, the package library, overall ecosystem and developer experience, or: how can I make a great product.	fredsted	12.778492	-6.6301837	comment	9.0	95.0	1588672580	10.337337
23080066	I've had to deal with Ruby for the l	I've had to deal with Ruby for the last 2 years, and one of the main problem is the gem ecosystem. The language and standard libraries are pretty narrow, unless you add Rails (which adds a new variety of breaking upgrade headaches).Thus, there's always the desire to use third-party gems to achieve pretty basic stuff (localization, decent networking/REST, database drivers, etc). These then tend to go out of date. It's pretty common to find well-used gems that haven't been updated in 5, even 10 years. This puts the developer in a tough spot - reinvent the gem/wheel? Or be forced to stay on an EOL version of Ruby?	drchopchop	12.695083	-6.976036	comment	9.0	52.0	1588687206	12.368268
23166558	Any pro typescripter have any tips f	Any pro typescripter have any tips for how best use it in existing Node/React codebase?This article mentions material-ui and styled-components. My experience with typescript has been cumbersome with these libraries. A lot of time is spent figuring out what ”types” to return. I find this very difficult in most cases and not fun at all.I figure there must be something wrong in my approach  or in my ts config (no explicit any).In short. How to best handle styled-components/material-ui/other library in ts environment? Or is typescript just to much overhead in these usecases?	shroom	12.40633	-6.72929	comment	9.0	49.0	1589375699	-10.448599
23166752	I like typescript as it fixes a lot 	I like typescript as it fixes a lot of JS quirks - that's good when you have to write code transpiled to JS.However coming from languages where types are a first element of the language (c++, rust, go...), I often miss a lot of features in typescript (e.g. type conversion overload, generic specialization, etc...)I know that by design Typescript doesn't want those features and I understand the rationale behind it. I'm just wondering if I'm the only one in that case and if someone would know a language transpiling (not compiling) to JS more appropriate to my tastes (and hence with different goals).	dnpp123	12.360526	-6.788419	comment	9.0	44.0	1589377089	-10.453174
23197162	As someone who came into development	As someone who came into development after the Coffeescript wave I’m interested to know: how much did it feel like the future?Was it always an early adopter, “look how forward we are” kind of thing, or was it just popular with Rubyists?I’m trying to calibrate it with other possibly-next-big-thing front end languages.	bambataa	12.429264	-6.579084	comment	9.0	40.0	1589575396	-10.537618
23208431	Game of Life in one Ruby statement i	Game of Life in one Ruby statement inspired by APL	todsacerdoti	12.591813	-7.0675793	story	9.0	174.0	1589676634	12.374393
23289486	Upgrading Ruby on Rails – Why it mat	Upgrading Ruby on Rails – Why it matters and how we did it	srawat1001	12.713342	-6.9563937	story	9.0	38.0	1590300026	12.355384
33093216	This may not be directly apparent to	"This may not be directly apparent to ""typical"" HN crowd, but PHP is having a quiet renaissance, thanks in part to a standardization of tools and processes, a more mature ecosystem (Laravel has been a huge factor here) plus the performance improvements since PHP 7.Kudos to the folks who built Castopod."	fevangelou	12.78448	-6.6437554	comment	9.0	45.0	1664962746	10.325991
33186416	The author uses Django as an example	The author uses Django as an example of a framework... but Django doesn't really fit the definition used.Django does not dictate the flow of your code.  It provides some libraries and there are common patterns, but Django is more or less just a set of Python modules you can import and use as you want (A bit of configuration is done for you if you follow common layouts, but you don't have to and can manually do the configuration).What dictates program flow is when you use HTTP with Django (What its primary use case is) but that is dictated by the request/response nature of HTTP not by Django.You can use as little or as much of Django as you want.  Naturally, the more of it you use, the more it does for you.	ensignavenger	12.81581	-6.5397816	comment	9.0	39.0	1665627871	10.010968
33198198	Bun v0.2.0	Bun v0.2.0	christophilus	12.472545	-6.442886	story	9.0	133.0	1665706636	-10.777804
33440005	Crunchy Bridge's Ruby Back End: Sorb	Crunchy Bridge's Ruby Back End: Sorbet, Tapioca, and Parlour	craigkerstiens	12.588332	-7.0792594	story	9.0	51.0	1667411262	12.378312
33503306	An animated introduction to Elixir	An animated introduction to Elixir	ingve	12.694499	-7.4577956	story	9.0	308.0	1667812464	12.937999
33527993	It doesn’t just work in my experienc	It doesn’t just work in my experience. Once its working it is fine, better than fine in fact. But I am going through a process of upgrading a Phoenix LiveView hobby site and its been miserable.For some reason LiveView has changed between versions, and the documentation isn’t the greatest on explaining why or what to do to remedy it, but its broke my app. I’ve managed to fix the majority of it but then the third party libraries used have not kept up (for authentication of all things). There is so little people using Elixir/Phoenix/LiveView that libraries are often poor quality and maintained by one person or very few people. It makes me miss Django for the batteries included completeness, quality of documentation and eco system.Phoenix also feels a little bit magical in the way Rails is, an	timc3	12.861273	-6.92092	comment	9.0	54.0	1667973812	12.702223
33656829	Mojo.js is a port of Perl's Mojolici	Mojo.js is a port of Perl's Mojolicious to TypeScript	petesergeant	12.348133	-6.838261	story	9.0	73.0	1668788019	13.126287
33791437	Runtime metaprogramming has been the	"Runtime metaprogramming has been the raison dêtre of Ruby since Rails first took off. And, yes, you can do really cool incredibly powerful stuff with it. Likewise any Lisp with their various macro systems. CLOS in Common Lisp can also do very powerful cross-cutting metaprogramming stuff.The key problem has been that the resulting programs are fantastically hard to understand. One of the things I think Dijkstra got right in ""Goto Considered Harmful"" is that humans can reason about programs better when there's a strong correspondence between the textual structure of the code and its execution structure at runtime.Runtime metaprogramming deliberately upends that.I think it's probably totally fine to use those kinds of features as debugging aids when hacking on a program and figuring out where"	munificent	12.529877	-7.084643	comment	9.0	44.0	1669747361	-10.395442
33894702	Bun 0.3	Bun 0.3	mcovalt	12.466838	-6.4459743	story	9.0	195.0	1670423441	10.675465
34067279	> What's the general vibe on RoR now	> What's the general vibe on RoR nowadays?Most people that use it are fine and productive.Because of lazy evaluation, type issues persist though. Plenty of instances of trying to call string methods on integers, and array methods on nil, and Rails devs in denial that that's a big problem as the app continues to grow.	brink	12.668564	-6.992286	comment	9.0	35.0	1671550410	12.334174
26545169	It feels like Crystal it took all th	It feels like Crystal it took all the best things from the languages I love, and put them together into one, beautiful language:- Elegance of Ruby- Statically type checked + global type inference- No Nulls- Go-like concurrency- Easy C ffi- High performanceI really hope the Crystal succeeds and the language goes mainstream - this release is a huge step forward towards that. Congrats to the Crystal team for reaching the 1.0 milestone!	ibraheemdev	12.625005	-7.2620697	comment	9.0	104.0	1616439465	-11.233469
26552462	Why is that important given Moores l	Why is that important given Moores law and fast developer workstations?Everyone seems so preoccupied with compile speed for Crystal.	unixhero	12.546974	-7.269399	comment	9.0	38.0	1616488254	7.9753995
26660572	I've made a presentation on this ver	"I've made a presentation on this very subject to a hackers conference in 2013. It's very clear to me, it's because of Perl6. In 2013, Perl was 26 years and Perl6 was 13 years already, half as old as Perl itself but nothing close to production ready.The launch in fanfare of Perl6 in 2000 had a general chilling effect on Perl: many people considered from that point that there was no point learning and using Perl 5, because Perl6 was ""just around the corner"" and was ""the future of perl"".It's just last year that people finally came to their mind : Perl6 became Raku and is a different language, period. And Perl 5 is supposed to get out of its 20-years of maintenance cycle by becoming perl 7 and changing some defaults it should have done back in 2007 or so...Well. That's life."	wazoox	12.356721	-7.0692043	comment	9.0	76.0	1617285470	13.179855
26673945	Crystal Language That Aims at C Perf	Crystal Language That Aims at C Performance with Ruby Syntax Releases 1.0	_xrjp	12.609041	-7.2285	story	9.0	111.0	1617386263	-11.205755
26703725	What are people finding as the real 	What are people finding as the real sweet spots for Phoenix?I have used Erlang very successfully in a semi-embedded context, but that's quite different from a web server that can usually be scaled horizontally pretty easily.One obvious one is if you have to hold open a lot of concurrent connections like web sockets. It'd be great for that. Others?	davidw	12.686375	-7.358454	comment	9.0	52.0	1617652146	12.873651
26800055	I'd love to use deno, but I really d	"I'd love to use deno, but I really don't understand the point deno's module/package system.The standard practice of deps.ts/dev_deps.ts as described in the docs[1] just seems absolutely asinine to me. Importing everything into one scope and then re-exporting from one file just seems like an awful hack.What do you do if two libraries have functions with the same name? Do you namespace them yourself, or export an object under the name of the library (and therefore give up destructuring?)The URL thing seems similarly cumbersome and unecessary. Is there something wrong with a configuration file that would map 'package names' to the urls to get them from?, and then import { foo } from ""packagename""?[1]https://deno.land/manual@v1.9.0/examples/manage_dependencies"	zkldi	12.437629	-6.444961	comment	9.0	68.0	1618352135	-10.825657
26827948	My beef with PHP is not so much the 	"My beef with PHP is not so much the language itself, but the weird community that surrounds it.The FIG standard that forbids TAB for indentation (which is perfectly legal in PHP), the notion that classes should be either abstract or final, the micro-optimizations (thou must use single quotes, things like that).I don't think anyone can tell anyone how to write PHP, because nobody knows how to get it right (myself included). Yet in my many years of coding in PHP, there's been more and more tooling and so-called ""standards"" that do exactly this."	pdenton	12.7436695	-6.657933	comment	9.0	28.0	1618533461	10.338263
26889582	I’m curious about the value of eslin	I’m curious about the value of eslint for TypeScript. I’ve not really found myself wanting from the coverage provided by tsc.	meheleventyone	12.329942	-6.5904655	comment	9.0	38.0	1619012637	-10.404433
26967987	There's no such thing as “The Perl C	There's no such thing as “The Perl Community”	domm_plix	12.330118	-7.02028	story	9.0	36.0	1619607939	13.207327
27098157	History of RSpec	History of RSpec	todsacerdoti	12.601014	-6.957332	story	9.0	104.0	1620583500	12.29973
27245271	I really love Elixir but our company	I really love Elixir but our company had to drop it and rewrite a few projects in Go and Ruby, was too hard hiring and the existing team preferred not to continue with it. I think the learning curve is also quite harder than it initially seems, might be why some people give up on Elixir. But nothing but respect for Elixir.	burnswheniphp	12.686074	-7.438244	comment	9.0	33.0	1621680135	12.91428
27256340	Dorodango is one of my favorite meta	Dorodango is one of my favorite metaphors for operationalizing software. Start with any codebase, no matter how naively or ineptly implemented. Grind administrators against it in production for years and inevitably it will become a smooth, shiny and stable component.Often we talk about the power of inertia in keeping around old codebases with terrible histories. We talk about how illogical it is that we don't throw things out and start anew. There's a hidden value in a known quantity which has had blemishes polished off. With a nod to mythbusters, even a turd can shine [1] given sufficient effort. We have all dealt with many turds in the course of our careers.It is of course ideal to polish something more valuable than a turd. Architecture can still be rotten on the inside and necessitate 	throwaway09223	12.838033	-6.5221286	comment	9.0	34.0	1621787734	10.100386
27412101	>> Learn at least a half dozen progr	>> Learn at least a half dozen programming languagesI'm always surprised by how many people disagree with this; they're on the search for that one language they can use for every task. Or even worse, they think they've found it and their search is over, that's a tragic situation given how spoiled we are for great languages today.Clojure (STM / refs, vars, atoms & agents), kdb/q (non-loopy array code), Rust (ownership), Go (async done better, although i also really like core.async in clojure too), Python (trio nursery), C++ (asan, msan, tsan).There's some blogs continually give me good food for thought in this space, all signal no noise:Eli Bendersky, (every language under the sun) e.g. https://eli.thegreenplace.net/2016/the-expression-problem-an...Fasterthanli.me (Go, Rust, others) e.g. ht	CraigJPerry	12.386985	-7.687889	comment	9.0	63.0	1622975228	-11.0207615
37580127	  > 1.27 million requests per second	"  > 1.27 million requests per second
  > 3TB/minute of traffic

""rails doesn't scale"""	sho	12.756694	-6.8334713	comment	9.0	115.0	1695181177	12.310474
37579926	Ruby 3.3's YJIT Runs Shopify's Produ	Ruby 3.3's YJIT Runs Shopify's Production Code 15% Faster	nithinbekal	12.688841	-6.998745	story	9.0	175.0	1695178628	12.361023
37637034	Elixir seems to be picking up insane	Elixir seems to be picking up insane steam right now. Every day or two there is a fascinating Elixir post here and its promise seems too good to resist. Has anyone else latched their cart onto this horse?	nighmi	12.721674	-7.4602056	comment	9.0	52.0	1695588476	12.944279
37666597	Once again a good time to remember t	Once again a good time to remember that there were multiple perfectly good package managers available when Homebrew was invented, they were more future-proof (by eg not putting files in /usr/local), and everyone only switched to it because for some reason Ruby programmers wanted all of their tools to be written in Ruby (and possibly by people with waxed mustaches.)	astrange	12.419112	-6.8826	comment	9.0	46.0	1695767117	-9.152952
37921933	The Thing About PHP	The Thing About PHP	askonomm	12.764158	-6.630623	story	9.0	44.0	1697578579	10.319007
38031342	Things I like about Gleam's Syntax	Things I like about Gleam's Syntax	lpil	12.511767	-7.4442205	story	9.0	151.0	1698352355	-12.328685
38033967	What's the point about using a funct	What's the point about using a functional language like Gleam / Elixir for web-server applications?I used the work for WhatsApp in Erlang, and there's a strong use case for OTP / BEAM for messaging apps, but it feels useful for anything else - especially a webserver where frameworks like Rails and Django are so easy / well supported. What do you think I'm missing?	svapnil	12.542216	-7.4334884	comment	9.0	32.0	1698373474	-12.320123
38040331	Hi, one of the creators of Django he	"Hi, one of the creators of Django here (and of the admin specifically).It was definitely not intended to be ugly — the first version was designed by Wilson Miner, a great designer. In fact, an argument could be made that a key reason for Django's early success was that the admin was so nicely designed. Same goes for the framework's website in general; the standard open-source project website in that era was really plain and uninspiring.To answer ""Why is the Django admin ugly?"", I think there are two separate issues:* A gradual bolting on of admin features without enough thought given to visual consistency and elegance. Particularly, the left sidebar (in the screenshot of the original article) was a later addition and looks unpolished.* A misunderstanding of the Django admin's goals. It's m"	adrianh	12.869246	-6.491961	comment	9.0	28.0	1698422786	10.027973
38051640	PHP 8.1.25	PHP 8.1.25	ms7892	12.780022	-6.6509633	story	9.0	58.0	1698513700	10.321221
38242615	OP Here. This got more engagement th	"OP Here. This got more engagement than expected, some of the bits I've picked up in discussion:""Recommends skipping build step then mentions Tailwind"": We use static-tailwind, a version with no build step, in development.""Recommends hyperscript, a new non-js syntax"" - Agree this isn't perfect & would prefer something which uses js. Was going to use Alpine but also have found that to be quite brittle in production. Nor do I love any of the libraries on unsuckjs.com, which has a good collection. We're working on something here which we'll launch at some point.""OP should look at the recent Rails updates"" - Been using Rails for 10+ years - everything we build is on top of Rails - I'll write a post on HTML First Rails at some point. I think they'll get there but currently all the named librarie"	tonyennis	12.75648	-6.869889	comment	9.0	29.0	1699812653	12.334176
38262628	Scientist: A Ruby library for carefu	Scientist: A Ruby library for carefully refactoring critical paths	thunderbong	12.573462	-7.061262	story	9.0	154.0	1699965942	12.3926735
38265773	YJIT is the most memory-efficient Ru	YJIT is the most memory-efficient Ruby JIT	panic	12.603972	-7.0365934	story	9.0	228.0	1699980392	12.365737
38349984	I don't know, after having used Elm 	"I don't know, after having used Elm and seeing the community accused of ""hostile attacks"" by one of the main contributors (who is the creator of Roc now) [0], I don't feel that it's worth my time to put into learning it, even if it is objectively good; I simply cannot know what the creators will do (or refuse to do, in the case of Elm) in the future, especially in a BDFL governance paradigm. This was in fact why I stopped using Elm after a while, it didn't seem like they wanted to ever address the issues they had, or even to acknowledge them as issues in the first place.I know in my linked [0] that Feldman has since apologized, if only because the comment was being linked to so often [1], but again, why not use any other language where the creators are not so hostile, some even going so fa"	satvikpendem	13.00662	-7.6903777	comment	9.0	49.0	1700497132	-12.719187
38376844	Ruby Tip – Interactive debugging wit	Ruby Tip – Interactive debugging without the need for gems	amalinovic	12.577703	-7.0280285	story	9.0	78.0	1700644033	9.198355
14708499	Learning Elixir: My side-project	Learning Elixir: My side-project	adrip	12.688449	-7.441392	story	9.0	119.0	1499321992	12.939741
14746283	I realize many will say Ruby is fast	I realize many will say Ruby is fast enough.But if you're a web developer, why WOULDNT you just develop your next net new project in Phoenix/Erlang instead of Rails/Ruby?Phoenix has most of the development bedofits of Rails, yet way better performance and scalability.Seems like a win-win. You get a Rails like development environment without any downside of perf.	alberth	12.706649	-7.0248966	comment	9.0	31.0	1499795460	12.459327
14763481	Simply Secure PHP Cryptography	Simply Secure PHP Cryptography	CiPHPerCoder	12.781329	-6.5434785	story	9.0	147.0	1499968271	10.2717495
14883784	Benchmarks of PHP 7.2 Beta: PHP Is S	Benchmarks of PHP 7.2 Beta: PHP Is Still Getting Faster	ashitlerferad	12.731962	-6.648808	story	9.0	160.0	1501375146	10.306114
14889147	Elixir School	Elixir School	myth_drannon	12.698645	-7.4577312	story	9.0	360.0	1501469021	12.940477
14890161	If decoding json in Elm is considere	"If decoding json in Elm is considered hard, I'd recommend checking out miso (https://github.com/dmjio/miso), a Haskell re-implementation of the Elm arch. It has access to mature json libraries like aeson for that sort of thing, along with mature lens libraries for updating your model. Here's an example of decoding json with GHC.Generics using typeclasses. 
https://github.com/dmjio/miso/blob/master/examples/xhr/Main...."	dmjio	12.977836	-7.652218	comment	9.0	33.0	1501487173	-12.725775
15161007	One of the key reasons why PHP remai	"One of the key reasons why PHP remains so widespread in use is the ease of deployment. No other language can match it.PHP is the only language with almost universal support among web hosts. It can run on basic shared hosting plans and on nearly every server. It can be deployed by simply uploading your code to a directory on your web host. Sure, it's a widely criticised language (even within the PHP community), but it still accounts for the vast majority of server side code (80% according to some sources).What's baffling is why other languages and so many developers are blind to this problem of easy server install. They think it's a non-issue.Prolific blogger and programmer, Jeff Attwood ranted about how he disliked PHP in one of his blog posts, but recognised that:""If you want to produce f"	open-source-ux	12.756797	-6.6473646	comment	9.0	38.0	1504440120	10.314478
15277118	I can't imagine CoffeeScript will se	"I can't imagine CoffeeScript will see much adoption these days as most people seem to think ES6+ is ""good enough"". I miss how concise functions are in CoffeeScript and also miss being able to do object literals without the braces. But there's no chance at all in convincing my team to adopt it, as modern JS really is ""good enough""."	city41	12.408022	-6.5606513	comment	9.0	56.0	1505751122	-10.528463
15299822	Magic Sudoku – Solve Sudoku with the	Magic Sudoku – Solve Sudoku with the power of AR	mikerg87	13.44019	-7.4051604	story	9.0	134.0	1505956487	15.077592
15604328	Django REST framework 3.7 released	Django REST framework 3.7 released	0xmohit	12.833813	-6.5497017	story	9.0	141.0	1509562147	10.136829
14493511	Ask HN: Favorite frameworks for web 	Ask HN: Favorite frameworks for web development?	king_kerr	12.792555	-6.6259723	story	9.0	11.0	1496707291	10.166304
14540410	TypeScript 2.4 RC	TypeScript 2.4 RC	rpeden	12.407244	-6.842801	story	9.0	126.0	1497296695	-10.553278
14685677	Show HN: Miso – A Haskell implementa	Show HN: Miso – A Haskell implementation of Elm	dmjio	12.958864	-7.677895	story	9.0	114.0	1499053011	-12.753662
30792323	Ask HN: What language/framework is e	Ask HN: What language/framework is easiest to deploy?	vmsp	12.768037	-6.560504	story	9.0	6.0	1648140195	-10.170015
31049964	I tried to install Rails the other d	I tried to install Rails the other day. The amount of issues I had to set it up with Homebrew on macOS is just terrifying. In the end I managed to get the app running but assets weren’t compiling. I gave up. It’s 2022 and getting Ruby and Rails running is as difficult as it was 10 years ago.Compare to Node or even Elixir, this is a no-go for me. I give up on Rails.	bnt	12.710497	-6.915363	comment	9.0	34.0	1650089269	12.403192
31154432	> Deprecate dynamic propertiesThat's	"> Deprecate dynamic propertiesThat's pretty big one. Lot of JSON can be deserialized to basically bunch of objects with dynamic properties, since it's parameter in deserialization.For example `json_decode(""..."", false)` where second parameter (false) explicitly says it should return object. After that it's typical to set values such as `$post->name = 'Name';`, which would now give warning and in PHP 9 an error.Maybe we shouldn't characterize PHP as dynamic language after the change?"	Ciantic	12.583137	-6.57829	comment	9.0	35.0	1650893802	-9.176558
31209280	So what? Raise a deprecation notice,	So what? Raise a deprecation notice, treat it as a fatal error in two or three years and that's it. PHP has been doing this for years now.	mschuster91	12.755924	-6.62614	comment	9.0	31.0	1651258672	10.320712
31323769	I've been doing elixir professionall	I've been doing elixir professionally for 6 years. I realize I'm in the minority, but as someone who _reads_ a lot of code, I feel that the strong emphasis (and in some cases, requirement) to extract functions seriously hurts readability.Quickly glancing through this, I see the Complex Branching case as an example (https://github.com/lucasvegi/Elixir-Code-Smells#complex-bran...). It makes my brain need to act like the runtime, storing the stack of the current function in my head, jumping to the function call, then returning back to the original function and restoring the stack (to be clear, I'm not talking about the actual execution, I'm talking about what my brain goes through reading this).In a complex codebase, the jumping can be far (physically and figuratively), especially since there	latch	12.576249	-7.4448595	comment	9.0	30.0	1652160395	12.89433
31460496	Really? I miss it sometimes. I haven	Really? I miss it sometimes. I haven't kept up with it in over 5 years (switched to .Net now).I am just curious, why would I use Rails over something like .Net in today's time? I am no apologist for .Net or anything, I am just genuinely curious.	hirvi74	12.699479	-6.8844438	comment	9.0	45.0	1653157815	12.34537
31630609	I Built a Ruby Parser	I Built a Ruby Parser	ingve	12.515071	-7.0405564	story	9.0	150.0	1654434102	12.390539
31679945	Show HN: Python Live GUI – A Hybrid 	Show HN: Python Live GUI – A Hybrid of Dear ImGUI and Phoenix LiveView	RupertWiser	12.862349	-6.8561387	story	9.0	85.0	1654774672	12.731876
31728606	Counterpoint: I find it suspicious t	Counterpoint: I find it suspicious that so many people on this forum take the opportunity to bag on Ruby on Rails every time it comes up. It's almost like they hate the fact that it is, in fact, a perfectly valid choice of language and platform, and they're trying to justify the self-flagellation required to use Java for web apps. I've been around the block a couple of times now, and done projects in PHP, ASP, .NET, and Java. But I've been using Rails whenever possible to make LOB CRUD apps for almost 15 years now, and there's nothing that can even hold a candle to it for productivity. Still. Things that can take just a line or two in Rails often take HUNDREDS in Java & <insert popular JS framework>, and be a nightmare to keep square with strong typing that's so popular with Typescript now	TheRealDunkirk	12.73494	-6.899044	comment	9.0	58.0	1655141139	12.353291
25649375	No offense to the author here ... bu	"No offense to the author here ... but I need to vent some personal frustration. Every tutorial goes through these exact same motions for learning a new language. It sucks! Programmers can figure out what a variable is, or how to use an array or a map. Those things really don't change a whole lot between languages. What about how to import code from different modules? Best practices for organizing code? How your language differs from its competitors as far as usage. Testing practices (which often influence how your code is written), etc...Learning Elixir was tough for me until I found Dave Thomas' ""Elixir for Programmers"" where he skipped all of the basic stuff that every programmer is assumed to know and went right to what makes Elixir unique and how to leverage it correctly. (https://code"	whalesalad	12.576059	-7.410811	comment	9.0	40.0	1609872932	12.925762
25845147	I Switched from TypeScript to ReScri	I Switched from TypeScript to ReScript	ronenlh	12.372786	-6.836907	story	9.0	62.0	1611142221	-10.499774
35814192	I wish Crystal would take off. It ha	I wish Crystal would take off. It has so many things going for it (many of them mentioned in the article): performance, useful tooling such as an opinionated formatter, an integrated RSpec-like test framework, a powerful standard library, an awesome type system that gets out of the way most of the time, a familiar syntax.So far I have been building some smaller personal CLI tools and a few web apps (with the Lucky framework). I’ve also tinkered with running it in AWS lambda functions in a custom (albeit unfinished) runtime.Coming from a decade of Ruby, due to the similar syntax and mindset Crystal is my go to for cases where I need performance or runtime-less execution (e.g. in containers from scratch that contain only the binary and dependencies, if needed).Crystal's standard library prov	lgreiv	12.624726	-7.2457294	comment	9.0	102.0	1683203054	-11.232749
35892250	Lordy, I did not expect an internal 	Lordy, I did not expect an internal refactoring PR to end up #1 on Hacker News. Let me provide some context, since a lot of people make a lot of assumptions whenever this stuff comes up!If you're rabidly anti-TypeScript and think that us doing this vindicates your position, I'm about to disappoint you. If you're rabidly pro-TypeScript and think we're a bunch of luddite numpties, I'm about to disappoint you as well.Firstly: we are not abandoning type safety or anything daft like that — we're just moving type declarations from .ts files to .js files with JSDoc annotations. As a user of Svelte, this won't affect your ability to use TypeScript with Svelte at all — functions exported from Svelte will still have all the same benefits of TypeScript that you're used to (typechecking, intellisense,	rich_harris	12.408052	-6.7696524	comment	9.0	43.0	1683746765	-10.472062
35897383	I'm in the group described halfway d	I'm in the group described halfway down: was on the Internet during PHP  5, lost interest in it, and moved on [to Go]. I haven't written anything in PHP newer than version 5. Even transitioning from 4 to 5 was quite a big deal, I definitely noticed improvements.But it wasn't enough.I couldn't fit the data set in memory with PHP. But I could do it with Go.I couldn't do parallel computations in PHP in order to respond to an HTTP request quickly enough. But I could do it with Go.I couldn't reliably and easily deploy to different systems with PHP. But I could do it with Go.Eventually, I couldn't write a web server with PHP. But I could do it with Go.A lot of my early websites were written in PHP and I was able to build them quickly and routinely. I didn't really have a problem with PHP as a pa	mholt	12.68603	-6.7237945	comment	9.0	56.0	1683778566	10.280685
35930360	"""Programmer happiness"" is such a pro"	"""Programmer happiness"" is such a provocative point.Anyone who is giving Rails a serious look, should take the time to read Eloquent Ruby. When Rails prioritizes programmer happiness, what Rails is really doing is prioritizing the happiness of the lone rockstar developer who is the sole writer, owner, and operator of that codebase. You can build some code that is, yes, quite eloquent. It will be a complete work of art (and yes, Eloquent Ruby was quite illuminating at how Ruby uniquely helps you to write code as art). It will read like English. Your productivity will be phenomenal. You will feel like you can cure cancer by yourself. But all that flies out the window once you need to share that code with someone else, or inherit a codebase from someone who thought of himself as Da Vinci and h"	solatic	12.714818	-6.9832306	comment	9.0	37.0	1683997721	12.383918
36120659	Macro-ts: TypeScript compiler with t	Macro-ts: TypeScript compiler with typesafe syntactic macros (2022)	aabbcc1241	12.341832	-6.8577766	story	9.0	96.0	1685415371	5.0811524
36123064	Phoenix/LiveView must be really good	Phoenix/LiveView must be really good if people are learning not one but two niche languages (Elixir and Erlang) just to use it.I wonder if the framework is particularly tied to Elixir or if it could be done in a more popular language so more people will take it up.edit: and yes I know WhatsApp was/is written in Erlang, just to save you commenting.	rjh29	12.757738	-7.2601337	comment	9.0	32.0	1685441114	12.793302
36252396	Ask HN: Can you survive as a PHP Web	Ask HN: Can you survive as a PHP Web Developer in 2023?	bhu1st	12.78204	-6.6230693	story	9.0	9.0	1686278112	10.371428
36277084	People will go through any number of	"People will go through any number of hoops to not give, ""I like the feel of the language more"", as a reason for using it. Clearly, the main reason you would consider using Elixir for this is just that. There may be benefits to Elixir as a language, but there is no way they are going to overcome the ecosystem deficiencies to make it worth while in any unbiased cost benefit calculation. Just say you want to work in Elixir! It's okay to have a preference on the tools you use, even if it's for aesthetic or experiential reasons."	paddw	12.668363	-7.4584713	comment	9.0	64.0	1686447321	12.924674
28740043	Ask HN: Starting a startup with type	Ask HN: Starting a startup with typed code x none typed code	user0x1d	12.368894	-6.78156	story	9.0	5.0	1633291281	-10.421089
28878090	> Django looks like the 40 years old	"> Django looks like the 40 years old guy who feels ""in"" using Facebook, while everyone else is already using Instagram or TikTok.wow fuck ageist bullshit like this.   everyone knows I'm no big Django advocate but what is the point of a blog post like this?  I'm not seeing how effort spent on writing articles like this makes the world better for anybody, including the author.  Go create something?>But what if tomorrow, Microsoft launches a full-featured node/Typescript framework? You would get ...
 In my opinion, a framework like this would nail itit's all you bro, *go write it* and show everyone how right you are!"	zzzeek	12.843141	-6.504984	comment	9.0	35.0	1634308389	10.1026745
28906291	Serious question, more out of curios	Serious question, more out of curiosity on the state of PHP in 2021. Because of the advent of such things as Python (which I see a lot of comments in this thread about) - is it still relevant as a tool? I use it for minor projects internally to prop up a website on a Pi here and there, for ease of use - but curious what the state of the language is.Anyone have stats on this?	BLO716	12.686295	-6.669826	comment	9.0	50.0	1634570225	10.358766
28983436	Fork Freshness: Project lifespans in	Fork Freshness: Project lifespans in the Ruby ecosystem	aazaa	12.652962	-6.988005	story	9.0	159.0	1635123277	12.368473
29015186	Welcome to the brand new Erlang Foru	Welcome to the brand new Erlang Forums	ciprian_craciun	12.571945	-7.519739	story	9.0	110.0	1635350966	-8.772376
29085653	Anyone know of anything like this bu	Anyone know of anything like this but at the TCP level? I would love to have a way of simulating network partitions and different message delays for distributed algorithms implemented in Elixir. In an ideal world I'd be able to hook the elixir send/receive primitives to intercept messages between processes even in a single node.	anonymousDan	12.636711	-7.4849243	comment	9.0	31.0	1635878528	12.96338
29202378	This was definitely written by a pyt	"This was definitely written by a pythonist!  If I tried to write it, as a rubyist, I'm sure I'd get some things about python wrong.  (I find it notable how few people there are that are actually familiar with both).The standard alternative to `for` in ruby does involve `each` and blocks... but definitely doesn't involve defining a custom `each` method on your class... That is a specialty thing that most developers have probably done rarely.  Let alone defining it in terms of `for`, which is just weird!But the basic principle stated ""Instead of passing data back to the for loop (Python) you pass the code to the data (Ruby)"" -- is more or less accurate.blocks -- syntactic support in the language for cleanly passing a single in-line defined lambda/closure object as an argument -- are possibly"	jrochkind1	12.415312	-7.1138315	comment	9.0	64.0	1636739732	12.388564
29205663	Ask HN: Best Web development tutoria	Ask HN: Best Web development tutorial without any frameworks?	WasimBhai	12.785372	-6.477499	story	9.0	10.0	1636759284	10.14033
29304334	Last week I was trying develop a qui	Last week I was trying develop a quick prototype, and instead of setting up a C# project, I tried Django.At first, everything seemed super easy, but later I hit so many road-blocks that I had to give up (For example defining a self-referential m2m relationship with a custom join table, and getting it working on the admin site).Don't people really have such problems with it? It really feels like a huge burden when you do things outside the happy-path. Also the documentation is indeed superb but you also hit a lot of outdated info when searching the web.	patates	12.836831	-6.5061674	comment	9.0	50.0	1637571717	10.102697
29344721	Who is still using PHP anno 2021?	Who is still using PHP anno 2021?	s-xyz	12.777821	-6.6349487	comment	9.0	33.0	1637872218	10.321898
29405460	I'd like to remind everyone that it'	I'd like to remind everyone that it's totally okay to do the first 10-15 days and leave the really hard stuff to people who are smarter or maybe have more free time. The first few days will still be fun.I'm checking out Elixir this year, because I write 95 % Ruby at work and I'm getting really intrigued by the functional stuff seeping into it.	Toutouxc	12.714483	-7.193689	comment	9.0	37.0	1638375924	12.588484
29578233	+ Python (larger user base, more lib	+ Python (larger user base, more libraries, especially for scientific computing / ML)+ Less Magic+ Better Migrations+ Better ORM+ Django Rest Framework+ Admin Interface+ Great Documentation- Less Packages	m_ke	12.814979	-6.4791336	comment	9.0	56.0	1639663735	10.025467
34137463	Benchmarking Ruby 2.6 to 3.2	Benchmarking Ruby 2.6 to 3.2	ksec	12.610579	-7.02603	story	9.0	127.0	1672061498	12.35413
34193344	View-less meaning Phoenix.View modul	View-less meaning Phoenix.View module is refactored/replaced. The amount of boilerplate code is still a challenge in Phoenix.Worked on a large project using live views.Pros:- can achieve interactivity without using client side js frameworks- less developers / man power needed compared to client side js frameworks- evolving in right direction- community / forumsCons:- still evolving and releases are breaking (no backward compatibility).- the amount of boilerplate code which is generated is too high.- forms are basic and need to evolve for handling challenges which come with Server side rendering and interactivity- there was leex, then heex, now components taking centre stage.- most of the books, tutorials, videos, articles are stale due to frequent changes / evolutionElixir/Phoenix Communit	blueblahvlah	12.883002	-6.909742	comment	9.0	51.0	1672458484	12.721185
34414620	The main issue I have with Ruby / Py	The main issue I have with Ruby / Python is the fact that it's duck typed, it makes the maintenance and refactor pretty hazardous.You get objects you don't know what's in there, 6 month later someone changed it, no compile error but it will break when you run it.And so to overcome those major issues they added really ugly stuff that is not core to the language, linters, annotations etc ...	Thaxll	12.462394	-7.036434	comment	9.0	105.0	1673973250	12.409839
34746350	In version 0.19, the core team hardc	In version 0.19, the core team hardcoded a whitelist into the compiler of which projects are allowed to use native code (which happened to basically be the core team's pet projects). This basically crippled the language beyond usability for everyone else. https://news.ycombinator.com/item?id=22821447 https://news.ycombinator.com/item?id=17842400 https://news.ycombinator.com/item?id=16510267As for a replacement, I'd look towards Haskell. At a language level, it looks really similar to Elm, and it's been having a lot of work done towards being more practical on the Web lately, e.g., GHC 9.6 getting a WASM backend merged.	josephcsible	12.964911	-7.664735	comment	9.0	115.0	1676065531	-12.759064
34844587	Zero-downtime deployment tool for we	Zero-downtime deployment tool for web apps (created by DHH, creator of Rails)	jay-barronville	12.700133	-6.7837157	story	9.0	57.0	1676702544	4.640621
34931553	I work on Bun. Happy to answer quest	I work on Bun. Happy to answer questions	Jarred	12.487276	-6.441987	comment	9.0	71.0	1677280360	10.926577
34937327	Show HN: Deon.land – Deno.land?	Show HN: Deon.land – Deno.land?	hobofan	12.447085	-6.443058	story	9.0	32.0	1677338771	-10.92776
35005984	A 'CSS reset' for TypeScript, improv	A 'CSS reset' for TypeScript, improving types for common JavaScript API's	tsujp	12.3714075	-6.746313	story	9.0	83.0	1677819365	-10.430954
35025732	How imprortant is elixir in all this	How imprortant is elixir in all this? Is it merely the frontrunner of a useful new pattern? E.g., do erlang, BEAM or functional programming play a critical role or will other stacks effectively replicate this and how are they doing so far, which would be the next more mature?	college_physics	12.66604	-7.439412	comment	9.0	41.0	1677974281	12.9268
35038694	Is there anyone with experience on a	Is there anyone with experience on a large Elixir/Phoenix code base? Is the lack of static type system a problem?	koevet	12.606747	-7.426816	comment	9.0	32.0	1678090926	12.955053
35043059	>The most in-demand skill was Ruby o	>The most in-demand skill was Ruby on Rails, with engineers skilled in this framework and scripting language receiving 1.64x more interview requests compared to the marketplace average. Ruby on Rails bumped Go from first place in 2022’s report to fourth this year.Woah. That’s an interesting finding.I wonder what RoR is doing to make it so in-demand?	timeimp	12.705176	-6.981797	comment	9.0	38.0	1678120665	12.355929
35076824	Single File Elixir Scripts	Single File Elixir Scripts	clessg	12.673467	-7.4453683	story	9.0	185.0	1678322348	12.934085
39433177	Just out of curiosity for anyone sta	Just out of curiosity for anyone starting a new Erlang project: Why use Erlang over Elixir?	LorenzoGood	12.636704	-7.4815316	comment	9.0	56.0	1708368214	12.929155
39590489	Gleam Version 1	Gleam Version 1	todsacerdoti	12.51499	-7.44952	story	9.0	87.0	1709560427	-12.337334
36568883	I still recall a CS jobs fair at my 	"I still recall a CS jobs fair at my college ~8 years ago, where some company representative took a very bad liking to Erlang on my CV (I took a ""Programming Languages"" course where Erlang was one of ~6 languages we chewed through. s/o venkat!)He kept asking ""why use this over Java at my work X"". He seemed to have the idea I wanted to join his company and rewrite their web administrative tools used by 5  people in Erlang. Not sure why he got so annoyed, and didn't ask me about anything other than a language he thought was silly!"	hoten	12.576246	-7.5156136	comment	9.0	52.0	1688358728	12.929467
36629658	Kind of disappointing that this seem	Kind of disappointing that this seems to be yet another run-of-the-mill language.I wish people would stop publishing me-too languages that implement, for the umpteenth time, the same concepts we have had for 40 years or more. I mean, if you just to learn from the experience of creating a language, that's fine, but you probably won't get much from publishing it.If one intends to publish a language, it seems to me one should focus on crafting a language that explores something new. That new concepts do not have to be very refined or complex, but your language stand a much better chance of being picked up and refined if it implements the germ of some interesting new idea.Of the top of my head, here are some concepts [1] I'm trying to explore (cross posted from another comment of mine), which 	prmph	12.40299	-6.6251698	comment	9.0	34.0	1688725475	-10.4047575
36859785	From Python to Elixir Machine Learni	From Python to Elixir Machine Learning	manusachi	12.669602	-7.428177	story	9.0	270.0	1690275861	12.932845
37193670	Programming Language choices: Pascal	Programming Language choices: Pascal, LOGO, Forth, Prolog, C (1986) [video]	hazelnut-tree	13.123594	-7.2908435	story	9.0	80.0	1692481949	-12.465647
37305369	My problem with Elixir is that the s	"My problem with Elixir is that the syntax is too noisy:    defmodule Math do
        def sum(a, b) do
            a+b
        end
    end

Compare that with Python:    def sum(a, b):
        return a+b

Having the name of the file be the name of the module and whitespace defining the blocks is the perfect approach for me."	TekMol	12.661626	-7.447277	comment	9.0	28.0	1693302813	12.924237
24423637	Async Views in Django 3.1	Async Views in Django 3.1	rohitsohlot	12.576536	-6.610102	story	9.0	153.0	1599673500	9.981662
24452560	Is Elixir really the general purpose	Is Elixir really the general purpose productivity tool that comments here (and on other HN posts) make it out to be?I've loved playing with Erlang and Elixir. The concurrency model and approach to failure are fascinating and clearly powerful for certain problems. Elixir's Pheonix feels as productive as Rails. I've read most of Joe Armstrong's books and watched most of his talks.However, I feel like I can throw my daily driver programming languages including Go, Ruby, Rust... even Haskell at any problem and give or take performance, come out the other end with high quality software at scale.When I last wrote Elixir, it felt great when I was doing basic Rails shaped work or lower level concurrency heavy networking (I was playing with TUN/TAP interfaces), but I really can't imagine it as a ge	jpittis	12.662827	-7.441194	comment	9.0	49.0	1599919869	12.929089
24461932	Deno 1.4	Deno 1.4	lucacasonato	12.524546	-6.449785	story	9.0	262.0	1600014520	-11.027595
24491700	Bakeware – Compile Elixir applicatio	Bakeware – Compile Elixir applications into single executable binaries	tempodox	12.615284	-7.4180636	story	9.0	182.0	1600257084	12.939552
24565930	Graalphp: An Efficient PHP Implement	Graalphp: An Efficient PHP Implementation Built on GraalVM	mrigger	12.733022	-6.6330595	story	9.0	113.0	1600862331	10.32176
24605626	One thing I'd really love to have on	One thing I'd really love to have on BEAM was a strong type system. Does this help achieve that? Is there a way to interop with Erlang/Elixir libraries?	ulucs	12.528506	-7.48058	comment	9.0	118.0	1601202399	-8.930648
24700508	Question from someone who's never tr	Question from someone who's never tried Erlang/Elixir but is interested.If you're starting a greenfield project in 2020, is there any reason to use baseline Erlang instead of Elixir? I get the impression that Elixir is a strict improvement (besides legacy compatibility). But this is a very very uninformed impression.	dcolkitt	12.642215	-7.481578	comment	9.0	37.0	1602006693	12.935926
24762278	Does anyone here have experience sol	Does anyone here have experience solving planning problems like these in Prolog?For the delivery company example mentioned on the site, I’d imagine a database, perhaps just ‘library(persistency)’, storing the fleet of cars the company has, the delivery orders, the drivers employed, etc. The constraints would be expressed as prolog relations.I may be implementing a system like this soon, and would like to hear war stories of doing it with a library like OptaPlanner or Prolog.	jeofken	13.147401	-7.2905445	comment	9.0	30.0	1602563345	-12.493094
24818706	Cursed Elixir	Cursed Elixir	udfalkso	12.696702	-7.4639163	story	9.0	149.0	1603036157	12.963774
24837640	A brief introduction to BEAM	A brief introduction to BEAM	codeadict	12.421711	-7.3383613	story	9.0	224.0	1603203903	7.1364565
24921657	Ruby's Proposed STM	Ruby's Proposed STM	chrisseaton	12.558018	-7.078021	story	9.0	293.0	1603906359	12.324441
24924883	I think Phoenix Live View is maybe t	I think Phoenix Live View is maybe the most compelling story around this (https://github.com/phoenixframework/phoenix_live_view).  I'm moving a side-project from React/SPA to Phoenix live view and it's kind of amazing to get the dev ergonomics of a server-rendered page with the UX benefits of a SPA.This course is a pretty great intro: https://pragmaticstudio.com/phoenix-liveview	xiaomai	12.890438	-6.8043485	comment	9.0	48.0	1603924236	12.715294
24958304	Ask HN: Should I be learning PHP in 	Ask HN: Should I be learning PHP in 2020?	philonoist	12.766812	-6.636202	story	9.0	16.0	1604223102	10.35611
25220931	Apparently some of the deprecations 	Apparently some of the deprecations will make this the most backward compatibility breaking version jump of PHP since V4 to V5. (Read a german interview here: https://www.heise.de/news/PHP-8-im-Experten-Check-Der-erwart...)There's a long report on Wordpress and PHP 8 and it's not pretty: https://developer.yoast.com/blog/the-2020-wordpress-and-php-...	cstuder	12.766066	-6.6481476	comment	9.0	65.0	1606405482	10.327264
25313376	I have to wonder, how big is the ove	I have to wonder, how big is the overlap between people who understand and want to use algebraic datatypes, and people who program in PHP?PHP’s main selling point has always been its low barrier to entry. Introducing high-level abstractions like ADTs will hurt that user group.At the same time, I don’t think PHP can ever catch up with high-level languages that were built on less shaky foundations (and cleaner syntax). So what’s the end goal here?	codeflo	12.746485	-6.659334	comment	9.0	71.0	1607163983	10.337921
38698426	Author here:I created this because I	Author here:I created this because I found myself peeping inside type declaration files too often, and the only way to do that was by installing the package first.tsdocs.dev helps you check the API surface of a good number of JS libraries and their past versions — usually a quick search away.There's something powerful about speed and being able to answer questions in seconds that usually take minutes.edit: The server might be overloaded with requests as we prime up our caches, but do visit back after HN's done hugging us to death.You can show your support and help cover a part of server costs if this (or bundlephobia.com) saved you time.https://github.com/sponsors/pastelsky	pastelsky	12.46649	-6.6301	comment	9.0	31.0	1703006387	-10.473215
38762599	Worth it to learn Ruby if you alread	Worth it to learn Ruby if you already know Python and NodeJS ?I find Ruby fascinating yet difficult.	999900000999	12.59462	-7.0058694	comment	9.0	66.0	1703512464	12.355738
38993079	From the landing page (and trying a 	From the landing page (and trying a few tutorials):https://crystal-lang.org/reference/1.11/index.htmlI couldn't quite determine the reason of being of the Crystal language.  Could someone with experience with the language explain what is its appeal, and why it would be worth trying/learning?Thanks!	fransje26	12.637624	-7.256098	comment	9.0	32.0	1705257498	-11.213153
39015521	As much as people complain about Pyt	As much as people complain about Python, Ruby really went through just as much (if not more) churn over the years from backwards-incompatible changes.	wavemode	12.475498	-7.015501	comment	9.0	38.0	1705424113	12.375839
32566891	We used Elixir's Observer to hunt do	We used Elixir's Observer to hunt down bottlenecks	todsacerdoti	12.683691	-7.4570265	story	9.0	152.0	1661270422	12.926068
32700125	"I really like the PHP approach of ""o"	"I really like the PHP approach of ""one url, one file"" by letting Apache handle the routing. I love to build a whole application by just putting a bunch of php files into a directory.And I hate that in a typical Python+Django application, I have to restart the application to see changes I make.But apart from that, Python is the nicer language. So I would like to do more web dev in Python. Most Python devs get red faces when you tell them that the PHP approach has benefits and you would prefer to go that route though.What is a good Apache virtualhost entry to accomplish the typical PHP approach but for Python? How do I tell Apache ""My application is in /var/www/myapplication/, execute all python files in there""? Are there any arguments to not do this in production?"	TekMol	12.573129	-6.5741854	comment	9.0	44.0	1662196524	10.113393
32801244	I have to disagree with the Typescri	I have to disagree with the Typescript part. Granted, it's not a bad suggestion, and there's a lot that's good about TS, but this isn't what I would consider a good place for it for a few reasons.TS, in my experience, has limited benefit when it comes to building a UI, and frontend JS is heavily married to UI programming. For guaranteeing UI functionality, writing years is a better use of one's time. What's more important with UI development is the ability to change visual components fast, and TS often gets in the way of that because it's strict as a feature.Someone who is deep into TS may have the experience such that they are an exception, and can really benefit from using TS across the board. Since the OP is asking for a frontend framework, I would not assume they are one of these excep	ravenstine	12.377885	-6.7524366	comment	9.0	30.0	1662915513	-10.455803
32850016	Joy of Elixir (2020)	Joy of Elixir (2020)	ColinWright	12.696895	-7.461817	story	9.0	130.0	1663240302	12.943087
32874765	Ask HN: Why do almost no web framewo	Ask HN: Why do almost no web frameworks have User auth as first class features?	z9znz	12.847568	-6.492386	story	9.0	14.0	1663388951	10.051049
32026289	I'm in the process of transferring f	I'm in the process of transferring from being the CTO of one company to CTO in another one and I'm wondering if I should just start with Rails this time. I get a little uneasy given the popularity of the JavaScript ecosystem, and Rails seems a little harder to share code between the web app and mobile apps, but I don't know... It feels extremely productive to work on Rails.	haolez	12.766239	-6.882768	comment	9.0	58.0	1657283069	12.33898
32112077	State of the SqueakPhone	State of the SqueakPhone	tonyg	12.326785	-7.2964587	story	9.0	133.0	1657914797	7.08351
32178584	Up until yesterday I didn't know Zen	Up until yesterday I didn't know Zendesk was written in Rails. They had a talk at RailsConf 2022[0] where they went over how they handle a billion requests a day with mostly a Rails monolith.I wonder why they're not brought up more when talking about large Rails apps. Is there an interesting (read: bad) history with them and Ruby?[0]: https://www.youtube.com/watch?v=mJw3al4Ms2o	nickjj	12.735827	-6.9509015	comment	9.0	101.0	1658407135	12.350982
32331157	Am I bad SWE if I do not care for fo	Am I bad SWE if I do not care for for async in django?I am sure a a lot of django devs will like it, but if I need the performance that I would get from going async, I would not being using django as my web framework.FWIW I like django / python for a lot of things, just not for performance.	game_the0ry	12.556405	-6.645354	comment	9.0	35.0	1659531880	9.961822
32410386	> What kind of speedup is available 	"> What kind of speedup is available for big Rails applications? If 90% of the time in an application is spent in database calls, then there’s little opportunity for improvement via JIT technologies.This is written as speculation of course, but it matches some long-time ""conventional wisdom"", that most Rails apps spend most of their time on I/O waiting for something external.That may have been true once, but i don't believe it's true anymore.My Rails apps now, when things like ""n+1 database query problems"" are properly eliminated, all spend more of their time on CPU than I/O, 60-80%. (I think most of that CPU time is ActionView rendering. Unsure about CPU parts of ActiveRecord, that aren't waiting on DB, but converting db results to in-memory AR objects etc).When this comes up and I ask aro"	jrochkind1	12.754697	-6.915327	comment	9.0	49.0	1660132129	12.330189
22057260	TypeScript feels worth it until you 	"TypeScript feels worth it until you use something like Elm, then you realize just how lacking and TypeScript's type system truly is.I have grown rather weary of type systems that don't require you to be exhaustive and, for my money, types like `Omit` and `Pick` are nasty hacks that just let you pretend like you aren't doing dynamic types, something TypeScript does a lot. The TypeScript pattern of `someFunc<typeof someInput>` is just dynamic types with extra steps. Using `any` wouldn't really lose you much of anything, the ""type"" is just ""whatever this input is"". That's not a real type, that's a dolled-up dynamic type. But hey, it typechecks!TypeScript's major weakness is that it doesn't want to break away from Javascript. That strict dedication to being a superset means the type system exp"	sli	12.353138	-6.9119797	comment	9.0	33.0	1579114790	-10.461698
22234718	Monitoring the Erlang VM With AppSig	Monitoring the Erlang VM With AppSignal's Magic Dashboard	Liriel	12.557938	-7.5172377	story	9.0	78.0	1580818879	12.914189
23788637	Do people really use Windows as a pr	Do people really use Windows as a production server for PHP? Most people I know use Windows as a dev machine, which I guess will still be supported.	me551ah	12.681491	-6.556996	comment	10.0	52.0	1594361310	-8.240097
24058647	Anecdotal random story bits from my 	"Anecdotal random story bits from my current company on why you should stick to Rails:- All of our ""lightweight Sinatra(and similar) API"" services eventually start to look more and more like Rails apps. Rails does many small developer convenience things well. Which you do not notice until you build this lightweight API yourself. E.g. console, logging, migrations, database connection pooling, rspec integration, i18n.- No one likes to work with your arbitrary personal project structure conventions. Where's the code? 'lib'? 'core'? 'app'? 'api'? Also, no one wants to learn your lightweight ""data mapper"" pattern written from scratch because you thought ActiveRecord is too bloated and ""does not scale"". That being said, there's quite a few things you can arbitrarily pick in Rails projects as well"	jeff_vader	12.766704	-6.9055777	comment	10.0	64.0	1596617759	12.338275
24152391	"""This RFC fixes the very strange cas"	"""This RFC fixes the very strange case in PHP where 0 == ""foo"" results in true. There are some other edge cases like that one, and this RFC fixes them.""It's good they fixed it I suppose, but yikes. As much as people say PHP has advanced from its fractal of awfulness days, a lot of those fixes are shocking if you come from other languages."	overgard	12.403521	-6.7438884	comment	10.0	81.0	1597370961	10.282542
24258780	The GemRB project celebrates 20 year	The GemRB project celebrates 20 year anniversary with a new release	Lightkey	12.709308	-6.924661	story	10.0	49.0	1598260288	12.316834
20111319	    They've got enough market clout 	"    They've got enough market clout now that people will 
    port Ruby/Python/Perl to a non-Unix macOS, just as 
    they port them to Microsoft Windows.

Ruby on Windows is a nightmare.To be specific, Ruby itself (the core language and core libraries) are pretty good on Windows. Great choice for a scripting language, or whatever else you want to do.But libraries like ActiveRecord, Rails and their myriad dependencies are very very hit or miss on Windows and there's not a lot of support when things go badly.A lot of the issues are simple - like dead simple. Lot of gem authors don't bother to make things like file paths (forward slash vs. backslash) system agnostic. Or the gems depend on compiled binary stuff like Nokogiri or ImageMagick and those are always a bit of an adventure on Windows"	JohnBooty	12.5992155	-6.9707236	comment	10.0	64.0	1559791692	12.370409
20380808	Leaving irc.perl.org	Leaving irc.perl.org	mdom	12.342252	-7.0343337	story	10.0	73.0	1562572887	13.199217
20613090	Ask HN: Is Perl 5 or Perl 6 still wo	Ask HN: Is Perl 5 or Perl 6 still worth learning in 2019?	grepgeek	12.403042	-7.0618424	story	10.0	15.0	1565003676	13.1776495
20639839	This is fundamentally because our in	"This is fundamentally because our industry is built on opinions, not standards.You talk to one software engineer, and they'll say, ""that's built in PHP, so it sucks; it should have been built with npm, obviously."" Then you talk to another and they say, ""I can't believe they built that with npm, the package management system is just terrible and the whole mess is bloated and there have been a ton of security issues. They should have used a static generator instead."" And on, and on, and on.Now compare this to a mature industry with real engineers who are able to say things like, ""sure, that material might not be the most durable on the market, but unobtainium would have added $35 million to the project cost and ongoing maintenance costs would have gone up by another $5 million / year.""That r"	thaumaturgy	12.658848	-6.537029	comment	10.0	71.0	1565216617	1.2694199
20921848	I've a bunch of small Rails apps run	I've a bunch of small Rails apps running on Heroku and I've to say that I'm impressed by the relevance of the new features in the latest Rails releases. Action Text, Active Storage and Action Cable are solving common and painful issues in any web app.I've recently built a web app with Node and the time we spent solving problems which have already been solved a thousand times is astonishing. Things like picking an ORM, having a proper database migration system, running a test suite. It's actually quite depressing when you come from Rails where everything is working coherently out of the box.The fact that there is no standards in the Node ecosystem make it a bit more painful. You have to carefully choose between many different libraries to solve your problem. Some of them are in TypeScript, 	juliendc	12.756067	-6.8730116	comment	10.0	129.0	1568059338	12.337122
13693255	This is a bit off topic, but can any	This is a bit off topic, but can anyone suggest a decent Django tutorial?  I've just recently learned python, and would like to build a few projects using Django.  I completed Django's official tutorial[1], but when it came time for me to actually start building something, I found I didn't really understand what was going on.  I should mention I'm inexperienced in both web application development and python in general.1: https://docs.djangoproject.com/en/1.10/intro/tutorial01/	pmulv	12.822886	-6.5441284	comment	10.0	45.0	1487650883	10.095336
13707312	Announcing TypeScript 2.2	Announcing TypeScript 2.2	pingec	12.409711	-6.830759	story	10.0	290.0	1487785020	-10.531474
13832533	In ruby land, there's a great gem - 	In ruby land, there's a great gem - https://github.com/rubysec/bundler-audit - that lets you know when specific gem versions have a known security vulnerability.We run it as part of our CI. When a vulnerability drops, it gets fixed pretty quickly since otherwise everyone's build fails.Does anyone know of any equivalents for the JS world? A quick google finds https://github.com/nodesecurity/nsp but keen to hear what other people are doing.	ghiculescu	12.509837	-6.7431703	comment	10.0	35.0	1489088178	-5.1555033
14025676	Ask HN: Django vs. Flask	Ask HN: Django vs. Flask	pygix	12.7533245	-6.5293527	story	10.0	25.0	1491244529	10.011284
14120506	Erlang and First-Person Shooters (20	Erlang and First-Person Shooters (2011) [pdf]	Tomte	12.566234	-7.524812	story	10.0	195.0	1492260349	3.8457723
14212995	I'd love a pro con from someone who'	I'd love a pro con from someone who's really tried out both TypeScript and Flow. I tried to get either of them started last weekend and couldn't get to a good place. Flow was missing annotations for three.js and typescript didn't seem to support es6isms. I found a compiler for the typescript definitions file for threejs but also couldn't sort out how to actually import that into flow.	macrael	12.482889	-6.717312	comment	10.0	64.0	1493312230	-10.485313
14440489	My opinion: Humans are good at think	My opinion: Humans are good at thinking sequentially, imperatively. Other language paradigms are harder.That isn't to say that Functional languages (Lisp, Haskell, Scala, etc) aren't as good; frankly, I like them better. There's just a mental gap that has to be crossed and for most developers I've met, that can be challenging. Why do things in a challenging way when I've got Java right here and it works just fine? (straw man, not my own view)Prolog (logic programming) is a bigger gap, imho. It takes more effort for me to really understand Prolog code. Can do some beautiful things with it, but it's easier to have a few good developers be good at it and put their hard work behind a library/API than it is to have every other developer try to get over that gap.	mabbo	13.1165495	-7.2907166	comment	10.0	47.0	1496081363	-12.461739
30821311	PHP is probably the best language fo	PHP is probably the best language for server side webdev today. Still insanely easy to deploy, lots of features at the language level, and the frameworks that are available are very sophisticated. Whether you like Laravel or not, it’s influence is spreading to other frameworks within PHP and other languages. Also, Laravel has some of the best docs in OSS, period.I think WordPress is pushing other projects forward as well. The tech stack over there doesn’t move nearly as fast, but the UX is still pretty good out of the box and with the enterprise clients I work with on a daily basis, they all still love WP.Back to PHP proper for a minute, the language is fast. There are efforts being made to run PHP on Serverless infrastructure or with continuous process environments. New features are added	yurishimo	12.754353	-6.635896	comment	10.0	108.0	1648397047	10.3254795
31159010	Sorbet and 100% cov makes Ruby refac	Sorbet and 100% cov makes Ruby refactoring possible	craigkerstiens	12.5434475	-7.110014	story	10.0	147.0	1650912347	12.359498
31160830	Setting aside all the dynamic stuff 	"Setting aside all the dynamic stuff that you can't statically check, what does Ruby offer fhat makes it so ""pleasant"" to use?I'm trying to understand what a statically typed Ruby could bring to the table."	valcron1000	12.47219	-7.1424975	comment	10.0	44.0	1650921853	-9.5814905
31495952	Ask HN: Elixir as a First Language?	Ask HN: Elixir as a First Language?	freedomben	12.502519	-7.4328337	story	10.0	14.0	1653417750	12.906773
31554753	Adminer: Database management in a si	Adminer: Database management in a single PHP file	lsferreira42	12.8344145	-6.477097	story	10.0	66.0	1653875448	10.19796
31720549	Aleph.js – Fullstack Framework in De	Aleph.js – Fullstack Framework in Deno	modinfo	12.495142	-6.4488196	story	10.0	87.0	1655089247	-10.992941
31723278	I'm not an Uncle Bob fan by any stre	"I'm not an Uncle Bob fan by any stretch of the imagination, but he wrote a somewhat famous article about this phenomenon: http://blog.cleancoder.com/uncle-bob/2014/06/20/MyLawn.htmlWith each new wave - we get people that either lack the time, the willpower or the conditions to understand what came before them (the ground they're standing on), and this is how we end up rediscovering things every 2-3 years. It's much more tempting to just discard old knowledge, reinvent from scratch.People were doing ""SSR"" with PHP on the server-side 30 years ago, and still do today (can you imagine just how much progress that platform has made, and how much collective knowledge has been developed around it?). It's just not hip anymore, because it wasn't invented within the past 36 months."	csmpltn	12.744229	-6.4850545	comment	10.0	73.0	1655114946	8.976142
31730221	Making popular Ruby packages more se	Making popular Ruby packages more secure	tomstuart	12.519535	-6.879457	story	10.0	189.0	1655147543	-9.261143
31746090	The hunt for a cluster-killer Erlang	The hunt for a cluster-killer Erlang bug (2021)	eproxus	12.562603	-7.5151396	story	10.0	291.0	1655240745	12.910664
25495140	I'm glad to see they're picking up n	"I'm glad to see they're picking up native type-hinting. I don't like many of the existing bolt-on type systems for Ruby and the whole thing feels so much more kosher when it's official.The concurrency stuff is cool but I can't really comment on it, my rule is ""if you're going to even think about threads, just use Java or go"" since concurrency is so nice there.I really wish ruby had won over python as the ""general purpose scripting language"", I like it better. For example, I wish all the ""big data"" tooling was written in Ruby. But python is just the lingua franca. PySpark, Pandas, Airflow, etc are all python. I'm not really going anywhere with this, just lamenting I don't get to do more Ruby in my day job. I recently switched to writing python at home just because my productivity is so much"	atomicnumber3	12.377275	-7.0319476	comment	10.0	69.0	1608560394	12.394958
25959319	What's New in PHP 8.1	What's New in PHP 8.1	hypomnemata	12.780611	-6.6464515	story	10.0	133.0	1611938921	10.342919
35836326	You know, I'm pretty sure you could 	You know, I'm pretty sure you could build a PHP monolith in 2023 without a framework and it would do what it needed to do.	bovermyer	12.753226	-6.5984855	comment	10.0	57.0	1683328767	10.3241005
35927977	I always hear good things about Ruby	I always hear good things about Ruby on Rails, yet it remains relatively niche. I first heard about Ruby + Rails in 2013, and ten years later it seems to be just as niche. Loved by those who use it, but niche. Why does it continue to struggle in this way when more recent languages like Go are booming?	gymbeaux	12.666818	-6.9947615	comment	10.0	75.0	1683982957	12.292366
36549077	June 25th, 2023 Deno Deploy Postmort	June 25th, 2023 Deno Deploy Postmortem	mikece	12.52971	-6.445649	story	10.0	74.0	1688211893	-11.1261425
29015943	I've always wondered why more crypto	I've always wondered why more crypto projects aren't using Erlang seeing as it's so good at distributed systems	exdsq	12.566536	-7.5149827	comment	10.0	32.0	1635354011	12.930204
29471388	I must learn Django, it's got everyt	I must learn Django, it's got everything I'll ever need. No, Rails will make me happy and it's better for lonely devs like me. No I must learn a Modern Web Framework (TM) to prove I'm not stuck in the past. No way, I'm not a fashionista. Have you seen that Phoenix demo where the guy builds Twitter in like 4 minutes? That's the future. Hold on a minute, enough of this magic. I need to learn to build everything in Common Lisp and own my code 100%! Wait I don't actually have the time for that. Django is the way, it's so solid, just that it won't bring me joy....	nanna	12.798814	-6.5949926	comment	10.0	56.0	1638877261	10.078945
29538577	Deno Joins TC39	Deno Joins TC39	wongmjane	12.52972	-6.451187	story	10.0	415.0	1639394181	-11.031749
29660883	Natalie: An early-stage Ruby impleme	Natalie: An early-stage Ruby implementation that compiles to C++	ksec	12.561617	-7.080049	story	10.0	137.0	1640259445	12.38238
34265468	Goodbye TypeScript, hello native typ	Goodbye TypeScript, hello native typing for JavaScript	sudenmorsian	12.3773575	-6.7929926	story	10.0	55.0	1672948070	-10.45168
34413392	It shows that Ruby still has life le	It shows that Ruby still has life left in it yet. The language itself is wonderful, there's a great ecosystem of tooling but the performance was always lagging. Hopefully some of this makes it a choice for people once more over other more esoteric languages. My only concern here would be the time and sunk cost fallacy of someone like a Shopify working on a Ruby JIT. It reminds me of when Facebook was working on the HipHop VM for PHP code and compiling PHP to large C++ binaries. I mean I get it, you have millions of lines of code, you don't want to rewrite it, but I often wonder, is there a better solution to this? Is there just a natural path towards, write new things in a new language and leave the old behind? Genuine question, because I'm not talking about rewriting the stack, I'm just t	asim	12.642515	-6.9992185	comment	10.0	53.0	1673968647	12.385732
34412363	I started my career with PHP. Create	I started my career with PHP. Created my own apps, created client websites etc. Full of footguns, but I didn't know any better. Once I learned more languages, I never used PHP again. I actually started to feel like I'd been fooled into using PHP.Now the small PHP community keeps trying to justify their language choice with articles like these and comments like the ones on this submission. They claim it's a no brainer to use Laravel for new apps, because it has a big ecosystem and good ergonomics, and pretend that this description somehow does not apply to hundreds of other frameworks. They claim that the article A Fractal of Bad Design (which was really cathartic to me when it came out) is out of date, but when I look, all the old footguns are still there, all the problems with the standar	awestroke	12.786868	-6.6521597	comment	10.0	52.0	1673963743	10.371762
34423894	I'm trying to imagine why somebody w	I'm trying to imagine why somebody would start a data analytics project in ruby.	oofbey	12.681304	-6.9844847	comment	10.0	38.0	1674022240	-10.694995
34533502	Definitely old schools. I am buildin	"Definitely old schools. I am building a MVP  right now(kinda building my parachute while jumping off the plane)and I went with Django. And here is why.
1. Very vibrant community of devs and time-tested open-source libraries.If you want a multi-tenancy there is a library for that. IF you want stripe integration there is one for that. If you want ""fully built out"" services, then we have a plethora of free and paid templates. There are folks here(HN User rlawson)who have built many side projects using Django that they have monitized. if that monetization is your goal, then time is money and Django is your friend.
2. Very easy to deploy. This is a Major major requirement for someone like me(dabbling in webdev). Even after the demise of Heroku hobby dynos, there are things like Railway.app whic"	ultrasounder	12.802641	-6.4750266	comment	10.0	69.0	1674749099	10.06504
34857513	This article is great, and it remind	This article is great, and it reminds me of a rant I've been wanting to make for a long time: why the hell does everyone these days insist on building every web app as an SPA?I started my career in Rails. I'm sick of Rails these days as I've worked with it for long enough to become intimately familiar with its flaws; these days I'd pick Phoenix over Rails any day of the week. But still, I'd rather spend a million years with Rails than five minutes with most of the React SPA monstrosities I've had to work with recently.I get it: if you want to build a super-complicated, dynamic front-end, there's only so much you can do with the classic Rails-style approach (server-side rendering of HTML templates with some vanilla Javascript, or perhaps jQuery, sprinkled on top). Once you get past a certai	arrowsmith	12.775606	-6.661367	comment	10.0	53.0	1676814486	12.298478
34913333	Portable Django	Portable Django	ingenieroariel	12.823491	-6.5378466	story	10.0	116.0	1677172385	10.056204
34935203	No offense to TFA author, but I don'	"No offense to TFA author, but I don't think this is doing to sell Elixir to Python people.  In fact, I have serious doubts as to whether most Python lovers would be willing to set aside their beliefs and practices to learn the Elixir way.Perhaps Phoenix and LiveView will be the gateway drug, but even to reach that point requires a lot of effort to understand functional programming and Elixir.Python has some functional capabilities, but in my experiences with Python devs, those are little used and even shunned.  Imperative, mutating loops are the Python way; and to suggest otherwise is to hear ""But why would I need that?  This (long functions with mutations everywhere and loops) is fine.""I went from Ruby to Elixir, and even with my basic Clojure experience, it was an effort.  It was worth i"	michaelteter	12.722934	-7.388658	comment	10.0	88.0	1677316842	12.880427
36618992	How is Django now? I’m a long time p	How is Django now? I’m a long time python dev (data eng space) but new-ish to web dev. I started a Flask project 2 years ago and found it to be pretty full of footguns, mixed messaging on best practices for scalable apps, and the ecosystem feels overbloated with vapor ware extensions.Is this just a Flask problem, or does Django have the same issues?	appplication	12.792781	-6.529822	comment	10.0	52.0	1688662507	9.99548
36726938	Typescript propaganda.Instead of wor	"Typescript propaganda.Instead of worrying about types, why not worry about the actual code quality?Half of all typescript I've seen uses ""any"", not to mention the fact that it obsfuscates what's actually running in the browser and forces an unnecessary build step for things that aren't ""web apps""."	sublinear	12.364489	-6.7994246	comment	10.0	37.0	1689355084	-10.438214
36836884	What kinds of cool things are people	What kinds of cool things are people doing with Elixir these days, where they feel it's a really good fit for the problem domain?	davidw	12.691737	-7.4375935	comment	10.0	43.0	1690129858	12.932687
37199218	How did we get to the point where si	"How did we get to the point where simple and effective server-side pages are either unknown as a way of doing things or are considered to be a technical heresy?Younger developers scoff at us fossils and the olden ways, but this is exactly how this ignorance of classic, tried-and-true, performant patterns results in atrocious complexity and performance, only because ""this is how things are done"".It HAS to be a BFF, it HAS to be 15 different microservices and 20 different AWS toys, right? There is no other way? Are you sure?It seems like we are talking about the whole industry, but it's largely he Node ecosystem in my experience (which is effectively - the industry). It's not like there is not Rails development being done out there, with nothing but a trusty Postgres database.Ironically, our"	renegade-otter	12.753225	-6.8381705	comment	10.0	68.0	1692540078	12.334675
37260136	The deal-breaker for me with Elixir 	The deal-breaker for me with Elixir has always been the lack of real Elixir vectors rather than the crappy Erlang array library. Yes, I know you can use a Map with numeric keys but that's not the same.	cutler	12.629074	-7.4777513	comment	10.0	59.0	1692960211	12.933449
37317776	Deno 1.36	Deno 1.36	ms7892	12.5303135	-6.457057	story	10.0	87.0	1693370714	-11.041181
37443401	From W3Tech;> PHP is used by 77% of 	From W3Tech;> PHP is used by 77% of all the websites whose server-side programming language we know.I had a quick look at the methodology section, but it’s not clear to me how accurate this data is. Determining whether a site uses PHP can be relatively straightforward (especially with default extensions / if Wordpress is used / etc), but if a site (potentially using a different language) is behind a reverse proxy/uses an API/etc then it is less clear. Does anyone know whether PHP is over-represented in the results because it’s easy to identify?No doubt PHP is still huge, but 77%  seems almost too huge. There is also a very good chance that PHP is actually that big and I’m just in a different crowd.	brendamn	12.76985	-6.6392584	comment	10.0	42.0	1694249084	10.314571
24616141	I'm glad you asked. :-) For a start,	"I'm glad you asked. :-) For a start, number types. I want i32, i64, u32 etc. JavaScript (and therefore TypeScript) only has ""number"". Yes we now finally have BigInt but it's not ideal for JIT optimisation.Object prototypes is a weird part of JS that we really could do without. If you really want that, use class syntax.The Date object. Need I say more...Little things like Object.keys() should return a (keyof T)[] rather than a string[] but can't due to JS edge cases.Want first class tuples/immutable arrays.Many other new syntaxes that can't be implemented due to the need for JS compatibility.I'm sure there are others that I can't think of right now..."	cjdell	12.336414	-6.7767534	comment	10.0	45.0	1601297970	-10.443274
24637121	A Brief Guide to OTP in Elixir	A Brief Guide to OTP in Elixir	NaeosPsy	12.66998	-7.4341373	story	10.0	242.0	1601460506	12.893215
24867689	Few months ago I was debating with a	"Few months ago I was debating with a friend working since 15 years on PHP, my point was php is slow and max throughput is 200-500 rps, which is quite low compared to Go, node.js, C# and others, he answered that 100-200 request per second is more than enough for most use cases. 
I'm working on systems with 25K RPS at peaks, but for simple projects and small companies he is right ... But why should anyone start a new project in php now that we have so many good alternatives?"	js4ever	12.769655	-6.6398478	comment	10.0	47.0	1603446907	10.3755245
25007045	Why Typing Erlang is Hard: Standard 	Why Typing Erlang is Hard: Standard Erlang	leostera	12.562767	-7.517803	story	10.0	134.0	1604664633	12.915877
25064881	Ruby is an appealing language for su	Ruby is an appealing language for sure , but is it worth learning it in 2020, with the intention of getting paid for one’s work? It is an honest question and in no way am i trashing the language. Just curious what others have to say about it	tartoran	12.617162	-7.023109	comment	10.0	47.0	1605141658	12.371212
25390565	I'm really struggling in learning RO	"I'm really struggling in learning ROS in a systematic way. The tutorials are all over the place and somehow unorganized IMO. When trying to replicate stuff on my machine, all kinds of weird errors pop up.Honestly, I don't even get what ROS is about? Like it seems it is an ""amalgamation"" of tools and scripts to create a general API with some ideas of robotics application in mind. Also the naming of its stack seems weird to me: tf2, MoveIt!, the over-loading of terms like joint controller, robot controller, etc...If anyone can point me to a free, coherent and hands-on  study plan or guide with exercises that actually build and run fine that would be awesome."	ducktective	12.693034	-6.8492074	comment	10.0	30.0	1607718655	12.231384
32570097	This is a matter of opinion.I wrote 	This is a matter of opinion.I wrote a set of React components that gets 46,000 npm downloads a month and typescript is a godsend. My library is a bridge between two heavily popular projects, so my dependency tree is fairly intertwined. The library solves a real user problem and does it efficiently. It isn't totally perfect, but it covers 98% of the use cases.I wrote comprehensive tests as I developed everything. I have good documentation. I have an example app people can play with. I have codesandboxes. Yes, it was a lot of work, but that's what building products is all about.I've maintained this library for over 3 years now. I've upgraded it many times as the underlying dependencies have changed. A few times with backwards incompatible changes. I get outside contributors doing great work.	latchkey	12.458559	-6.547139	comment	10.0	115.0	1661282865	-10.352115
31834418	State Machines in Ruby: An Introduct	State Machines in Ruby: An Introduction	unripe_syntax	12.4930105	-6.8714995	story	10.0	141.0	1655896007	12.300332
31908877	Maybe I am getting all wrong, but th	Maybe I am getting all wrong, but this sounds like PHP.	la_fayette	12.736241	-6.6379766	comment	10.0	37.0	1656429683	10.308723
32003900	Ruby Shield: Shopify donates $1M to 	Ruby Shield: Shopify donates $1M to stewards of rubygems, bundler	jacques_chester	12.743874	-6.946767	story	10.0	411.0	1657127540	12.338528
32116109	Deno’s July 13th incident update	Deno’s July 13th incident update	mostafah	12.528339	-6.4437704	story	10.0	110.0	1657958846	-11.030005
32283663	Lyra: Fast, in-memory, typo-tolerant	Lyra: Fast, in-memory, typo-tolerant, full-text search engine in TypeScript	bpierre	12.374094	-6.7932515	story	10.0	171.0	1659146531	-10.425296
39393433	Tangential, is there a book to learn	Tangential, is there a book to learn typing? I feel I need a hefty book to learn typing. Don't mind if you recommend a Typescript book or other language with similar concepts.	aitchnyu	12.353258	-6.783908	comment	10.0	33.0	1708060467	-10.510995
32402780	Java was actually not bad for me in 	Java was actually not bad for me in class when learning software design and data structures, but soul-crushing to work with in the real world. Mindless, unnecessary use of getters/setters, interfaces, and AbstractFactoryImpls. Hiding almost every piece of functionality behind 10+ layers of indirection. Dependency Injection with Spring. They all make it feel like Java draws folks who actually __enjoy__ writing bloated, over-engineered garbage.YMMV, of course, and yes, there are modern frameworks other than Spring (Play is supposedly pleasant to work with), but life is too short to try to sort out that mess.I plan to stick to Elixir as much as I can, for as long as I can. When the language clicked for me, it was the biggest breath of fresh air since I decided to pursue programming as a profe	ralmidani	12.626079	-7.404359	comment	10.0	81.0	1660072907	12.887449
22208061	Ok since we have a lot of TS people 	Ok since we have a lot of TS people here maybe someone can help me out.Let's say I have a simple interface with a few fields.  I want to make sure incoming JSON conforms to that interface.I realize at runtime the interface isn't there, but is there some tool I can use to compile a utility to check JSON against an interface without having to write a duplicative JSONSchema or something else?	habosa	12.358803	-6.5697055	comment	10.0	33.0	1580522763	-10.413238
18989610	There appears to be a real movement 	There appears to be a real movement to move from Flow to typescript. Is Flow dying?	sebazzz	12.456094	-6.7147217	comment	10.0	62.0	1548344569	-10.475753
18991695	> , and to everyone's benefit.Why? I	> , and to everyone's benefit.Why? I've worked on large codebases in Coffeescript, ES6 and Typescript. Whatever this whole community sings and believes, but Coffeescript still wins for me. ES6 is still trying to catch up but will probably never reach the beauty and ease of Coffeescript. Both are transpilers, only ES6 with Babel is a total horror to manage (just upgraded a large codebase to Babel 7..).Typescript takes about 2x the time to write if you want to create all your typings properly. I hear you say; only in the beginning, later it will speed up the development process. I've never seen that in reality! I've actually never seen a proper codebase in Typescript. Show me a Typescript codebase not using the type 'any'! In a decent system language you can't get away with that, it's just a	wanted2	12.355689	-6.7978	comment	10.0	36.0	1548355937	-10.4423
19136726	If It Ain't TypeScript It Ain't Sexy	If It Ain't TypeScript It Ain't Sexy	aaronpk	12.36253	-6.807517	story	10.0	50.0	1549909156	-10.478343
19358133	GRiSP 2 – Erlang and Elixir on bare 	GRiSP 2 – Erlang and Elixir on bare metal	lelf	12.583842	-7.513075	story	10.0	223.0	1552303908	12.9248
19422780	Introduction to Datalog	Introduction to Datalog	x775	13.175112	-7.0368943	story	10.0	203.0	1552928115	5.7373724
19600752	At the risk of being downvoted into 	"At the risk of being downvoted into Hades, I feel that if your project is complex enough to warrant using Typescript, its complex enough to warrant using a more robust and comprehensive language.
After using Typescript extensively working on a back-end application in a complex problem domain I feel that while it is definitely a fantastic improvement to the core language, it doesn't really escape Javascript's worst issues. Issues like Promise-fatigue, poor ecosystem, terrible native types are still there under the hood.
For the extra tax you pay in terms of build pipeline, tooling and dealing with the ecosystem, you may as well upgrade to a language more suitable for this kind of development for little extra cost.
I just feel this debate is somewhat of a false dichotomy. People in this thre"	ajxs	12.370453	-6.7685223	comment	10.0	55.0	1554680976	-10.448756
19632160	A backdoor in the Ruby gem bootstrap	A backdoor in the Ruby gem bootstrap-sass	Tomte	12.6592	-6.9568076	story	10.0	143.0	1554972221	12.331436
19726939	A PHP Compiler, a.k.a. the FFI Rabbi	A PHP Compiler, a.k.a. the FFI Rabbit Hole	ingve	12.713734	-6.6470566	story	10.0	139.0	1556012781	10.373218
15799369	A question for any Erlang devs out t	A question for any Erlang devs out there.  For Erlang neophytes, what are the arguments for learning vanilla Erlang over one of the other ErlangVM languages?	Hupriene	12.569821	-7.5149856	comment	10.0	51.0	1511890422	12.921167
15815228	What is PHP like nowadays? I know it	What is PHP like nowadays? I know it has a bad reputation and a history of kitchen sink design but have they managed to tame it into something more sensible? Do the docs help steer developers away from legacy issues and common bad patterns?Would anyone recommend it for new projects?	ChrisSD	12.774841	-6.643105	comment	10.0	64.0	1512045148	10.35049
15838725	Taking a sabbatical to work on Ruby 	Taking a sabbatical to work on Ruby profiling tools	bkudria	12.578703	-7.0399747	story	10.0	128.0	1512325520	12.403732
15851053	I've seen a few contalks about logic	I've seen a few contalks about logic programming, read a few articles, and aside from the intellectual curiosity in itself I can see that it is very elegant in certain circumstances (although I lack the hands-on experience to feel what those circumstances are).Since doing a whole program in prolog isn't really practical for me, is there any way to use the logic programming paradigm in mainstream programming languages to deal with specific problems that fit it?	vanderZwan	13.136471	-7.2862673	comment	10.0	37.0	1512471732	-12.461547
15945262	Overview of the Crystal language	Overview of the Crystal language	sdogruyol	12.615703	-7.259901	story	10.0	147.0	1513508857	-11.2002535
16064441	This is coming from a comparatively 	This is coming from a comparatively spoiled Rails developer, but: why would anyone bother using a language in production if it lacks fundamental things taken for granted like dependency management and stable testing frameworks/practices? Do people just not do enough due diligence and get blinded by a language's honeymoon period?	Dirlewanger	12.568135	-7.0213003	comment	10.0	37.0	1515009169	12.345394
16277116	On the one hand I am glad they are c	On the one hand I am glad they are continuing to enhance TypeScript. On the other hand I am concerned that TypeScript is becoming a very bloated language. If you have seen the latest edition of Stroustrup’s C++ Programming Language book you know what a bloated language looks like. Is that where TypeScript is headed?Programming languages are not like your Word or Excel where more features is better. Some programming language designers take pride in how small the language is, for example Kernighan and Ritchie. I worry that as long as Microsoft has Program Managers and Development Leads assigned to TypeScript and their job performance is measured by the number of features they add, TypeScript is going to get more and more bloated with obscure features.	whitefish	12.36921	-6.7612376	comment	10.0	42.0	1517429569	-10.458317
16303711	25 Days of ReasonML	25 Days of ReasonML	based2	12.347767	-7.493782	story	10.0	121.0	1517765904	10.333054
16733567	> Now it is easier to develop MVP we	> Now it is easier to develop MVP web app using Spring Boot than Rails.BWAHAHAHAHAHA! Good one.Seriously, though, I'm really, really glad to see this come up this morning.I've done a lot of .NET lately, but Rails has been my main tool for 10 years. However, because it's (apparently) a strange, new, unproven-and-potentially-exceedingly-insecure framework, and because I'm the ONLY PERSON in a company of SIXTY THOUSAND employees who could possibly write a program with it, I've been forced to stop using it. I took FOUR MONTHS of arguing about it with the powers-that-be to conclude that I should use Java instead. I have 3 web applications to write, right now, with some flavor of Java EE.For a couple of weeks, I've been trying to bootstrap an environment to read an existing database I had alread	TheRealDunkirk	12.507639	-6.893526	comment	10.0	46.0	1522666446	12.346096
16743130	PHP 5.6 vs. PHP 7 Performance Compar	PHP 5.6 vs. PHP 7 Performance Comparison	ped4enko	12.755468	-6.65383	story	10.0	26.0	1522748207	10.3198805
16840455	What Erlang Taught Me About Distribu	What Erlang Taught Me About Distributed Systems	kenforthewin	12.541106	-7.508064	story	10.0	243.0	1523753241	12.9038925
17149490	What frameworks would you use to han	What frameworks would you use to handle such an steep growth curve? Most startups I know of start of with rails or the like - and obviously they couldn't handle the strain. So what would you use?	lunchbreak	12.754291	-6.7870846	comment	10.0	36.0	1527205528	12.287232
17309239	What, why and how of PHP Composer	What, why and how of PHP Composer	laravelfactory	12.725317	-6.618041	story	10.0	77.0	1528949770	-9.527604
17489728	Ask HN: How do you deal with legacy 	Ask HN: How do you deal with legacy code?	ainiriand	12.663387	-6.6096644	story	10.0	14.0	1531139556	2.7694879
21386932	Swish: SWI Prolog Notebook	Swish: SWI Prolog Notebook	xfer	13.139809	-7.293923	story	10.0	147.0	1572356166	-12.472447
21682041	Right as I was just about to start a	"Right as I was just about to start a new Django project...The thought going through my mind right now is ""I wonder if there is some way of creating a Django project and make it resilient to future Django updates and releases with minimum fuss?""I've had to deal with ongoing and inherited legacy projects which run on Python 2.7, use the long-deprecated Pylons, for which there is no easy upgrade path other than a total re-write in less deprecated technologies. No practical way to convert that Pylons project to Pyramid, for example.I guess the answer to my thought above is to ""Not do/use anything /too exciting/ when creating your Django project"" - i.e. only use the most basic and generic Django features, but even then what's to say those won't get deprecated in favour of some new exciting repl"	scarygliders	12.758817	-6.611376	comment	10.0	39.0	1575292667	10.093371
39145901	Show HN: PHP API Bindings for Open B	Show HN: PHP API Bindings for Open Brewery DB	joeymckenzie	12.752243	-6.639343	story	10.0	50.0	1706293090	10.341005
39258361	Running Open-Source AI Models Locall	Running Open-Source AI Models Locally with Ruby	thunderbong	12.602537	-7.0380793	story	10.0	155.0	1707118896	-7.644528
17975931	Right, this is part of what I don't 	Right, this is part of what I don't get.PHP is open source. Instead of building a way to compile PHP and then a VM, and making all the adjustments necessary for Hack, why didn't FB just spend that energy submitting a patch to make PHP faster?Now I also don't know if I buy that MAX_INT + 1 and pass-by-reference is a pressing enough use case to break compatibility. I'd be open to hearing why, but I'd be starting from a position of skepticism.	alexandercrohde	12.793311	-6.650338	comment	10.0	31.0	1536811688	3.066781
18025691	Why We're Ditching Ruby on Rails for	Why We're Ditching Ruby on Rails for JavaScript and Node.js	sandrobfc	12.7330475	-6.812145	story	10.0	18.0	1537376567	12.326712
18053423	Traveling Ruby: self-contained, port	Traveling Ruby: self-contained, portable Ruby binaries	vinnyglennon	12.57163	-7.0026383	story	10.0	79.0	1537739002	12.383799
18178689	I've noticed prolog being mentioned 	I've noticed prolog being mentioned here and a bunch of other places, but haven't really found any good introductory books on the language.Does anyone have any recommendations?	Stwerner	13.14966	-7.2956347	comment	10.0	41.0	1539110606	-12.4897785
18497150	Django core no more	Django core no more	jsmeaton	12.836014	-6.5535026	story	10.0	170.0	1542744108	10.062941
18752583	Ruby used to be my most beloved lang	Ruby used to be my most beloved language. I've since developed a strong appreciation for good type system. However, working with collections of any kind in Ruby is just such a joy. The methods around it are so well thought throug and make writing code a joy that in most other languages just would be tedious. On top of that the Ruby team is constantly working on making that aspect even better. I truly don't understand why it seems to me that no other language I use makes even an effort to provide something similar. Getting a map, a reduce and a filter function seems to be as far as most standard libraries are willing to go.	ajmurmann	12.542521	-7.06851	comment	10.0	79.0	1545665949	12.381941
29890046	I love Python. But for web projects,	"I love Python. But for web projects, PHP has a massive upside over Python: You don't need to restart your application when you change the code.I know people run monitoring scripts on their development systems that automatically restart Apache or whatever server they use every time they change a line of code. Still this is a cludge.Development in PHP is:    - Change a line of code
    - Alt+Tab to switch to Firefox
    - F5 and see the result

So I still enjoy PHP development more when it comes to the web. Even though PHP's namespaces are crap compared to Python's module system."	TekMol	12.63749	-6.6699815	comment	10.0	38.0	1641899870	10.275321
30022185	Ask HN: Is Ruby on rails worth it to	Ask HN: Is Ruby on rails worth it to learn in 2022?	ahmaman	12.444083	-7.091041	story	10.0	22.0	1642765363	7.2059093
30074910	I started a project with a Deno back	I started a project with a Deno backend and Svelte front end last week and it was painful trying to share types between the projects. Deno not allowing imports without file extensions '.ts' and the Typescript tsserver not allowing imports with a '.ts' extension is really annoying, and neither group seems to want to budge. I ended up having to create a shared types folder and a script that copies the files to each project stripping out file extensions for non-Deno projects.Does anyone else have a better solution shared Typescript code?	91edec	12.464804	-6.490747	comment	10.0	79.0	1643132208	-10.766501
30285906	I'm surprised this wasn't about WASM	"I'm surprised this wasn't about WASM.Either way, I'm receptive to the ""LiveView"" model, but until such a time a server can deliver both HTML and server driven native UI for mobile interchangeably, I prefer the RPC approach.I don't want to develop:1. Both an API for mobile and LiveView for web.OR2. Create my own server driven UI paradigm for mobile.I find maintaining one architectural pattern simpler. I do want to support users with the best technology fit, but I don't see why I have to make this tradeoff. The platform holders are (and always have been) jerking us around.I want to see a LiveView that can deliver both HTML and equivalent native UI markup. This is needed to sell the vision end to end - the world is not just web.I feel like this would enable a more sensible choice:Offline (fir"	lucasyvas	12.8962145	-6.728622	comment	10.0	43.0	1644500890	12.69585
30287195	There is not BE or FE lang. The brow	"There is not BE or FE lang. The browser (the universal VM) just only takes JS and WASM at the moment. So they can be considered browser NATIVE.TypeScript is not native. Is it then also a BE lang?What is happening here is a big rift in the programmers community between the ""I'm productive in it so it is great"" and the ""I prefer to use strong typing and proofs to ensure it does not break at runtime"".And the second group has managed to compile more-and-more of it's langs to JS and WASM."	cies	12.370116	-6.651211	comment	10.0	95.0	1644505945	-10.336683
30622186	Ruby Together	Ruby Together	mooreds	12.588141	-7.0464306	story	10.0	257.0	1646875536	12.385876
30637928	Replacement for RubyMine	Replacement for RubyMine	fullstackly	12.68504	-6.9857697	story	10.0	11.0	1646990418	12.374735
12632646	Hyperloop – The Missing Ruby Front-e	Hyperloop – The Missing Ruby Front-end Library	geordee	12.612215	-7.0218534	story	10.0	106.0	1475543297	12.378885
12707770	Ewww, You Use PHP? (2010)	Ewww, You Use PHP? (2010)	yarapavan	12.759914	-6.6363196	story	10.0	90.0	1476450321	10.312318
13087446	Why can't they just start supporting	"Why can't they just start supporting a new extension that is pure PHP and both ways compatible? Like, no template tags, no global weirdly named functions (namespaces!) and a total cleanup of the library? Also maybe drop the $ and use def or let or whatever? Perhaps add a tool to bundle the script with the interpreter, for reliable deployments? You know, for when you grow out of the ""shared hosting"" phase?That is MUCH but why not on the very long term? One can dream.Something like a disclaimer: Last time I seriously used PHP, rumors said that PHP 6 was going to be big. I actually fiddled a bit with PHP 7 too. I wrote a file sharing script (incredibly messy code because the minutes I spent on it are in the same order of magnitude of those I spent on this comment), which turned out to be damn"	egeozcan	12.754279	-6.616124	comment	10.0	42.0	1480673205	10.346239
13226903	Rails 5.0.1 has been released	Rails 5.0.1 has been released	CoachRufus87	12.72799	-6.9706607	story	10.0	162.0	1482296419	12.36048
13252225	Ruby 2.4.0 Released	Ruby 2.4.0 Released	sply	12.6349325	-7.0274177	story	10.0	256.0	1482625212	12.378106
13276242	2017 Outlook: Pandas, Arrow, Feather	2017 Outlook: Pandas, Arrow, Feather, Parquet, Spark, Ibis	TheAlchemist	12.412411	-6.4380894	story	10.0	78.0	1482999050	10.072614
27538970	Hear me out, everyone here is talkin	Hear me out, everyone here is talking about web developers and people who write the language. That’s the least import demographic and most unaffected segment of the user base.Dropping PHP is irritating because PHP is actually a really good shell scripting language and it’s universal availability on macOS made distributing simple CLI tools for Mac written in PHP as a simple script or a bundled PHAR easy as pie.I have a decent number of macOS specific tools I distribute as PHP, many 10+ years old, and I can guarantee almost none of my users have any idea what PHP is let alone how to install it.	donatj	12.730429	-6.6308436	comment	10.0	106.0	1623933865	10.328286
27756190	TypeScript at Google (2018)	TypeScript at Google (2018)	brlewis	12.369665	-6.7925677	story	10.0	60.0	1625619346	-10.465011
27808306	Elm Compiler Written in Elm	Elm Compiler Written in Elm	otobrglez	12.99847	-7.686802	story	10.0	126.0	1626079272	-12.759218
27998323	Bootstrapping a multiplayer server w	Bootstrapping a multiplayer server with Elixir	thibaut_barrere	12.690354	-7.444508	story	10.0	237.0	1627576271	12.954147
12046638	Why and How I Switched from Python t	Why and How I Switched from Python to Erlang	rodmena	12.573199	-7.5180225	story	10.0	118.0	1467848806	12.916786
12072824	    let lowerCased = strs!.map(s => 	"    let lowerCased = strs!.map(s => s.toLowerCase());

I'm not a big fan of this, it's really starting to change JS semantics. It's not just type annotations anymore + ES6 . It's starting to look like its own language. Some might like that, I do not.They should be a bit more cautious before introducing these features. What if Ecmascript in the future uses ! as an operator for a totally unrelated purpose ? It's like decorators, they are not in the spec, there is no plan yet to officially had them to the spec, yet, Angular2 which is written in Typescript abuse them. What if in 2 years they are introduced in ES2019 with different semantics ? How Typescript is going to handle that too ?"	spriggan3	12.357943	-6.7855453	comment	10.0	50.0	1468259180	-10.429409
12254097	Does anyone actually have good exper	Does anyone actually have good experiences using recruitment firms for filling positions?Tell Randstad that you'd like a Python/Django developer and they'll throw 20 people at you that all have one thing in common: They don't know Python, nor Django.	mrweasel	12.6038	-6.623378	comment	10.0	40.0	1470746719	10.149279
12274286	While I know HTML/CSS very well, I h	While I know HTML/CSS very well, I have unsuccessfully learned how to code after many attempts.I agree with another poster here - it felt like there was too much to learn just to be able to get started.I've tried to learn Rails for example, following Michael Hartls' step by step tutorial, and even then I get stuck. Suddenly I'm lost with homebrew, updating my PATH, rvm, gemsets, versions, etc. To build a simple website, I have to learn about nodejs, bower, grunt, API's, databases.Also, there is just something fundamental about the high-level of programming that I feel is never explained in introduction tutorials. When I've tried to learn Ruby itself, most tutorials start out with the syntax (integers, loops, etc), whereas I'd prefer some explanation around how the code is processed to the 	seekingcharlie	12.670358	-6.8618436	comment	10.0	37.0	1470994596	2.627012
12350846	I switched to writing python as my m	I switched to writing python as my main backend/scripting language with my new job. Previously I was using Ruby for most of this stuff with some Go. I must say that so far Python has been a vastly inferior experience for me. The languages are fairly similar all though I prefer the more talkative/english style of ruby and the use of functions over list and dict comprehension.The thing that really stands out to me though is the poor state of python tooling and the library ecosystem. Having used Rubygems and bundler pip feels like taking an enormous step back. It's much less expressive. It doesn't handle the difference between production only dependencies, regular dependencies and development only dependencies in a good way. It's difficult to differentiate between locked dependencies vs desir	K0nserv	12.471172	-6.9953084	comment	10.0	65.0	1472032795	12.397811
12485666	Elixir as an Object-Oriented Languag	Elixir as an Object-Oriented Language	weatherlight	12.6411	-7.457571	story	10.0	96.0	1473741569	12.928235
35185302	One of my most regretted decisions w	One of my most regretted decisions was evaluating Flow vs Typescript and going with Flow. Years later I had the opportunity to use Typescript and it was so nice comparatively. I've enjoyed it ever since. Of course, that was with years of development in its belt so maybe the experience wouldn't have been as nice if I went with it originally.	JamesSwift	12.458254	-6.68291	comment	10.0	54.0	1678988223	-10.463111
35372758	When I did a coding boot camp, one o	When I did a coding boot camp, one of our assignments was to push a package to RubyGems. It didn't matter if the package did anything; just make up a name and publish it. I'm pretty sure this kind of thing was a common practice with other boot camps, and applied to NPM as well. I always despised how this effectively trashes the repository and represents a complete waste of digital space, no matter how insignificant, as well as take up names that could go towards code that is actually useful. I wouldn't be surprised if a significant number of spam NPM packages were these boot camp assignments.	ravenstine	12.410907	-6.7852774	comment	10.0	63.0	1680184539	-9.296216
35479670	I have yet to see a tech stack that'	I have yet to see a tech stack that's not locked up into a framework version.That's more because of our engineering culture. The cost of NOT upgrading outweighs by a huge margin than keeping building on top.And yes, have seen Django shops locked into 0.9x release patched right into the core and running for a very long time, impossible to upgrade and all the horror stories.EDIT: Added Django	wg0	12.819712	-6.590892	comment	10.0	42.0	1680857973	10.097773
28375602	Lets restate the question, but this 	Lets restate the question, but this time include Erlang as an option:You’re about to create a basic CRUD server for storing configuration files (JSON, YAML), with a web frontend. This will be used internally, with a few hundred daily users. No single file is greater than one megabyte, total storage is less than one gigabyte. You have today to complete this task.You’re given these language options:Ruby on RailsPHPErlangC++x86 AssemblyWhich one do you choose?Answer: Ruby on Rails. Not Erlang.	t0mbstone	12.6675625	-7.187066	comment	10.0	44.0	1630460115	12.621062
28502278	Very curious about the recent surge 	Very curious about the recent surge of Elixir / Erlang posts on HN, is there a reason for this?How is the the job market surrounding this as well for Elixir / Erlang devs?	colesantiago	12.647902	-7.4873767	comment	10.0	53.0	1631462272	12.944301
28613682	Tenderjit – A JIT for Ruby Written i	Tenderjit – A JIT for Ruby Written in Ruby	ciconia	12.579048	-7.0670724	story	10.0	195.0	1632293022	12.375274
28660202	PostgreSQL-Prolog: A Prolog library 	PostgreSQL-Prolog: A Prolog library to connect to PostgreSQL databases	triska	13.16597	-7.2595983	story	10.0	99.0	1632657892	9.832285
22572862	“Evolving Erlang into a modern stati	“Evolving Erlang into a modern statically typed programming language”	lobo_tuerto	12.525949	-7.507169	story	10.0	140.0	1584155047	12.917275
22625840	> How does removing typescript help 	> How does removing typescript help you?https://github.com/microsoft/TypeScript/issuesPlease count the number of open bugsJS tooling is already an enormous jenga tower as it is, with tooling breakages eating a double digit of developer time. Adding typescript on top of that would be the real madness.Typescript will not help us a dime with type checking for most of devs we hire are long past the stage when typing errors are a thing for them.On the down side, even certainly not cheap to hire devs with 6-7-8-10+ years of experience have to battle JS tooling every day.Like half of all genuine bug triage time is already spent on webpack, bable, and other things in the tooling stack. 200 hours a month for $30-$40 per hour devs.Imagine doubling that digit when they have to also spend time on lear	baybal2	12.361662	-6.7665825	comment	10.0	86.0	1584609782	-10.449095
22902949	Forgive me, I'm ignorant -- what's e	"Forgive me, I'm ignorant -- what's erlang for. ""Concurrent applications"" is the raison d'etre I see espoused. What's that mean?Does it make concurrent applications easier to write? Does it make it easier to use the SIMD instruction set, how hard is it to get a function written in erlang to run on a gpu?Is it like nodejs but more performant? I appreciate anyone who has answers here, I try to position all the relatively interesting things I don't have much time to dive in to in a mental model with opportunities for future promotion."	MrLeap	12.519067	-7.5126677	comment	10.0	39.0	1587157354	12.905229
22940211	Guitar Chord Voicings with Prolog	Guitar Chord Voicings with Prolog	edavis	13.138513	-7.2960734	story	10.0	154.0	1587509878	-12.493536
23078609	Ruby Next: A Transpiler for Ruby	Ruby Next: A Transpiler for Ruby	progapandist	12.567677	-7.0414553	story	10.0	151.0	1588676089	12.391425
23136381	Something I would like to see is Pro	Something I would like to see is Prolog/logic programming embedded in a general purpose programming language, rather than as a standalone system.Racket and Perl 6 are the only small userbase languages in the last 8-10 years to amaze me with their feature sets and to make me want to learn them just for the sake of experiencing them.	jrumbut	13.137531	-7.278977	comment	10.0	33.0	1589146174	-12.474488
23166248	Announcing TypeScript 3.9	Announcing TypeScript 3.9	munchor	12.411779	-6.8230085	story	10.0	175.0	1589373540	-10.512911
23212469	From Node to Deno	From Node to Deno	aralroca	12.48686	-6.443189	story	10.0	182.0	1589727601	-10.95135
23306983	I had a similarly frustrating experi	I had a similarly frustrating experience when I first set up Python to use Django. The complete mess that is the Python 2/3 split (thankfully somewhat better now after many years), trying to figure out what the hell pip and pipenv were (this was before I was familiar with package management).However, I initially learned some Python in university and I liked it then. We just installed Idle and ran some simple scripts, and everything worked. That's the right way to learn a language. If you dive straight into JS package management, you are attempting to learn multiple things at the same time:* Node.js environment* Browser environment* JavaScript syntax* 'running a localhost'* JavaScript modules* NPM package managementYou need to tackle these one by one. If you do them all at once, even with p	esperent	12.37252	-6.539686	comment	10.0	47.0	1590461254	10.053031
33398584	I'd love to hear stories about actua	I'd love to hear stories about actual Crystal use.Of all the languages I've seen emerge in recent years, it was the one I was most conceptually fond of.It's basically (progressively-) statically typed Ruby, but fast (compiled).  I enjoy writing Ruby, but I hate maintaining it.	wheels	12.617167	-7.245501	comment	10.0	54.0	1667163419	-11.263455
33622058	Perl on Rails (2007)	Perl on Rails (2007)	jdefelice	12.402953	-7.019822	story	10.0	72.0	1668602162	13.05094
33676594	My first job at Microsoft was to bui	My first job at Microsoft was to build IronRuby, which was an implementation of Ruby on top of the Common Language Runtime. I got the job because I had built a bridge that connected MRI (Matz's Ruby Interpreter) to the CLR before I joined the company. This project ultimately failed because of a principle that we learned from the school of hard knocks: respect developers' existing code investments. Developers couldn't use it because many of Ruby's existing libraries were thin wrappers over native code, and we couldn't get them to work for many reasons.It turns out that the project was more of a demonstration of our ability to get dynamic languages to run efficiently on the CLR. To that end, I think we were successful. But once we achieved that there was not much of a path forward so the pro	localhost	12.608694	-7.0122113	comment	10.0	44.0	1668903495	12.377606
34000748	Why Should You [Still] Choose Ruby o	Why Should You [Still] Choose Ruby on Rails to Develop Your Product in 2023	mobi-dev	12.741313	-6.9460115	story	10.0	39.0	1671117325	12.349165
26477937	Showing my age here, heh:1. Early Ru	Showing my age here, heh:1. Early Ruby on Rails -- Now that MVC/ORM packges are the norm, it's hard to describe how revolutionary the original '15 minute blog' video was. It really felt like a quantum leap for CRUD apps.2. Uber/Lyft - It has literally remolded the city I live in, by making large areas that are transit-inconvenient more attractive to live in.3. Linode -- Access to a cheap server that you could spin up/down in a minute with root access was really great, in an era where a server that wasn't just a junk shared host often required months of commitment and started at 100 bucks a month.4. Google Maps -- Just head and shoulders above mapquest.	showerst	12.751026	-6.8741817	comment	10.0	54.0	1615908018	12.354531
26554476	Live previews with Rails and Stimulu	Live previews with Rails and Stimulus 2	nilsandrey	12.8376465	-6.795847	story	10.0	119.0	1616504577	12.528361
26661739	Any analysis of Perl’s decline that 	Any analysis of Perl’s decline that doesn’t mention PHP is incomplete. Between the height of Perl’s popularity in the 90s and today, web development was the single biggest growth area, and PHP ate Perl’s lunch in that domain.Why did that happen? In my opinion, PHP had two major advantages over Perl:1. mod_php for Apache could safely be run in a shared hosting environment, so hosting for PHP was cheap and ubiquitous. mod_perl couldn’t be run in shared hosting, so anyone doing web development in Perl was stuck with either using CGI, or paying for more expensive dedicated hosting.2. PHP’s approach made it easier to get started for people who were new to web development, or new to programming entirely. This was important in the late 90s and early 2000s as a huge number of people started doing 	alexhutcheson	12.552595	-6.7860904	comment	10.0	51.0	1617291111	13.075496
26710280	Congratulations to the Django projec	Congratulations to the Django project and contributors on a big LTS release. And a huge thank you for the consistently excellent framework that so many have built their web dev careers on.I'll post this as a Show HN soon, but I'll mention it now as a soft-launch introduction. After a decade of using Django I started a project I always wanted to exist: backported security and bug fixes to old versions that the Django project has dropped support for.I've seen many Django projects eventually get stuck on an old version as the team I'm on is forced to defer upgrades in favor of commercial pressures and essential product delivery.So you can subscribe to https://www.codestasis.com/ to stay patched on your old version, removing the urgency to upgrade. Then unsubscribe when you're caught up.It's f	codestasis	12.827065	-6.5585885	comment	10.0	37.0	1617705658	10.080889
26761615	Ask HN: Is Elixir Still Relevant?	Ask HN: Is Elixir Still Relevant?	linkdd	12.650924	-7.4630218	story	10.0	23.0	1618064033	12.92688
26873614	I'm really fascinated by the resurge	I'm really fascinated by the resurgence of some of these old languages. I vaguely understand that the paradigm behind Prolog is quite different compared to oops or functional languages. Can anyone please help me understand where is this really useful? As everything is data oriented these days, is Prolog a good language for doing statistics or ML or scientific computing?	jp0d	13.140784	-7.2907963	comment	10.0	43.0	1618921493	-12.485344
27427949	> we’re also excited to announce one	> we’re also excited to announce one of the first (of many!) projects that Amjad has worked on with us: Codecademy Labs, the easiest way to play with JavaScript, Ruby, and Python onlineI'll just leave this here so we can all bask in the insane hypocrisy of this entire episode.https://www.codecademy.com/resources/blog/amjad-joins-codeca...Edit: See Amjad's response below – seems Repl.it may have pre-dated this hiring in which case it makes the irony slightly less delicious. Did no learnings from scaling the concept at Codeacademy make it into the current product?	tommoor	12.571788	-6.900362	comment	10.0	209.0	1623104339	-6.699592
37672692	An Introduction to LiteStack for Rub	An Introduction to LiteStack for Ruby on Rails	unripe_syntax	12.651947	-7.000847	story	10.0	91.0	1695810117	12.373324
37787193	Currently stuck on a fairly large co	Currently stuck on a fairly large code base on rails 6 with a ton of react and trying to upgrade to the new “non”-JS way with Hotwire. Wish me luckRails is great when you stick with the defaults and a land of pain as soon as you leave them.	roboben	12.787541	-6.7455344	comment	10.0	98.0	1696567715	12.300194
37941680	Using Prolog as the AST	Using Prolog as the AST	mpweiher	13.145431	-7.3006196	story	10.0	156.0	1697716852	-12.5039
37957189	Useless Ruby sugar: Pattern matching	Useless Ruby sugar: Pattern matching	ezekg	12.444352	-7.073042	story	10.0	90.0	1697814492	12.488624
38053261	I hear so much good stuff about Elix	I hear so much good stuff about Elixir and Phoenix (often from fly.io blogs) but I've always dismissed it for the lack of type support. Is there a TypeScript equivalent on the horizon? Or is it not so much of an issue?	crummy	12.393244	-7.3239303	comment	10.0	59.0	1698526402	12.907483
38175989	The only place I hear about Elixir i	The only place I hear about Elixir is here on HN.	CodeCompost	12.6998205	-7.457151	comment	10.0	34.0	1699359803	12.950442
38215523	I have been watching Elixir YouTube 	I have been watching Elixir YouTube videos pretty much every day for the last few weeks. I guess there was an Elixir conference recently and after I watched a couple, YouTube has been sending me a consistent stream of Elixir content.I really want to try out this language. I love the idea of Erlang but the few times I've had to deal with it (an ejabberd chat server was one) I found it to be a bit too quirky. Every video I've seen with Joe Armstrong leads me to believe he was an under-appreciated genius. Isolated processes and message passing (Actors) seem a good candidate for the future of distributed programming (see this recent video from Crockford on his new Misty programming language [1] - notice how the questions were about Elixir/Erlang). I love pattern matching and elixir uses this t	zoogeny	12.634688	-7.4590597	comment	10.0	61.0	1699595629	12.907689
38249134	I had a lot of fun watching this doc	"I had a lot of fun watching this documentary. The one person framework really comes out in the personal story of Toby from Shopify. ""From Hello World to IPO"". What I also loved is that he mentioned that if you open up any Rails application, it looks basically the same in structure whether it is the biggest Rails app there is or a new one. Sure that can be true for many apps, but in a world of, for example, APIs and front-end stacks, that isn't always the case.The latest developments in Rails are making the solid foundation even more solid. There is stuff happening to make infrastructure easier: Kamal sure, but also Solid Cache and Solid Queue and there is a lot happening in the front-end with Turbo (Morphing) and mobile apps with Turbo Native and Strada.We have upgrade to 7.1 already and h"	mosselman	12.7479725	-6.8721256	comment	10.0	83.0	1699875380	12.341151
38363563	I see (and have participated in) a l	"I see (and have participated in) a lot of this ""just copy this thing, trust me it works"" type of content related to Node and TypeScript.It makes me wonder why Deno [1] still seems to be such a niche choice. Most of these headaches just go away.Does anyone here prefer Deno for new projects? And if not, why?[1] And Bun, although that's much newer."	monooso	12.4935055	-6.437862	comment	10.0	59.0	1700574641	-10.944404
38364454	I really enjoy frontend/node/typescr	"I really enjoy frontend/node/typescript development. I roll my eyes whenever the HN-types complain about CSS or frontend development being a hellhole. Mostly the comments I see seem ignorant or impatient (""Why doesn't this thing work without be bothering to learn it?"")However, the intersection of typescript, nodejs, and ES modules is consistently the most frustrating experience I ever have. Trying to figure out which magic incantation of tsconfig/esbuild/tsc/node options will let me just write code and run it is a fools errand. You might figure something out, and then you try to use Jest and then you descend into madness again.The biggest tip I can give people is to ditch ts-node and just use (the awkwardly named) tsx https://github.com/privatenumber/tsx, which pretty much just ""mostly wor"	madeofpalk	12.3955345	-6.514577	comment	10.0	51.0	1700578706	-10.437336
38389863	What I wonder, as a computer scienti	What I wonder, as a computer scientist:If you want to solve grade school math problems, why not use an 'add' instruction?  It's been around since the 50s, runs a billion times faster than an LLM, every assembly-language programmer knows how to use it, every high-level language has a one-token equivalent, and doesn't hallucinate answers (other than integer overflow).We also know how to solve complex reasoning chains that require backtracking.  Prolog has been around since 1972.  It's not used that much because that's not the programming problem that most people are solving.Why not use a tool for what it's good for and pick different tools for other problems they are better for?  LLMs are good for summarization, autocompletion, and as an input to many other language problems like spelling an	nostrademons	13.13446	-7.2862263	comment	10.0	86.0	1700719560	-12.476319
38500705	Ask HN: What is the best stack to fi	Ask HN: What is the best stack to find a job currently?	ipaddr	12.503955	-6.5453506	story	10.0	9.0	1701541549	9.916642
38518877	What's the preferred Python Web Fram	What's the preferred Python Web Framework these days?I've read a lot of love for Litestar (formerly Starlite), since it seems people prefer it over FastAPI, Flask, etc.https://litestar.devOr is the preferred web framework still Django?	alberth	12.529826	-6.544027	comment	10.0	41.0	1701705597	9.977966
14707822	A ReasonReact Tutorial	A ReasonReact Tutorial	kcorbitt	12.365186	-7.5367985	story	10.0	161.0	1499309157	-7.2839603
14864354	IMHO, the main reason Rails is decli	"IMHO, the main reason Rails is declining in relevance isn't microservices or the productivity (!) of Java, but the fact that more and more development effort for web applications is moving into JS front-end coding.I still love Rails, but when your front end is mostly done using React (or something similar) you lose many of the advantages you previously had when almost your full stack was inside Ruby and Rails.The latest version moved in the right direction by making Webpack a first-class citizen, but what would really make a big difference would be some kind of native integration of a mature front-end framework. My personal choice would be React, but anything would do as long as the connection between the Ruby API part and the Javascript front-end part followed the DRY and ""convention over"	danmaz74	12.758528	-6.751353	comment	10.0	37.0	1501156192	12.301408
14894769	Joy of Elixir	Joy of Elixir	GordonS	12.69329	-7.459353	story	10.0	241.0	1501526487	12.930171
15056046	Reservations about TypeScript	Reservations about TypeScript	daviesgeek	12.367117	-6.849589	story	10.0	16.0	1503182595	-10.460571
15264409	Question:I started a JS project late	Question:I started a JS project lately, I tried to write it as modernly as possible (using as many ES6 features[1] as I could), and yet I stumbled on difficulties that I blame to the lack of type system and polymorphism.I'm considering writing my project in a typed language that compiles to JS, such as Scala or Haskell.  But I would have to learn that language basically from the start.Is it a good idea and if so which language would you recommend?	grondilu	12.3393345	-6.730479	comment	10.0	35.0	1505566066	-10.432494
15277486	CoffeeScript is still very relevant 	CoffeeScript is still very relevant for me. I have two medium-sized Ember projects written in CoffeeScript (and Emblem and Sass--the original, indented variety, thank you very much).I have been looking at React (will probably skip due to the patent license) and Vue, but cannot imagine going back to semicolons and (excessive) curly braces and parens.If you married CoffeeScript just out of convenience (being able to avoid prototypes, bind, etc.), then it no longer serves much of a purpose. But if, like me, you fell in love with  CoffeeScript's beauty, then no amount of ES6+ features will make it obsolete (as long as you can also keep using those features directly in CoffeeScript).	ralmidani	12.4302025	-6.536577	comment	10.0	67.0	1505753649	-10.527798
15320342	Django 2.0 alpha	Django 2.0 alpha	orf	12.835101	-6.561322	story	10.0	156.0	1506183156	10.118893
23492758	Ask HN: Go vs. Ruby/Rails for first 	Ask HN: Go vs. Ruby/Rails for first time indie dev?	onelastjob	12.594026	-7.103128	story	11.0	10.0	1591905524	12.189232
23582903	The Art of Prolog (1994)	The Art of Prolog (1994)	tosh	13.139928	-7.294198	story	11.0	139.0	1592646310	-12.481921
23615807	Sounds like another win for language	Sounds like another win for languages with an LLVM backend. Definitely excited to see this language grow, especially as it has generics already.Does anybody use Crystal professionally here? Any thoughts so far if so?	cfors	12.617545	-7.2789917	comment	11.0	54.0	1592928419	-11.235849
23739936	Ask HN: What do I move on to from Dj	Ask HN: What do I move on to from Django?	choicenotchance	12.801592	-6.500734	story	11.0	18.0	1593967071	10.1033745
23948114	Everything you need (and don't need)	Everything you need (and don't need) to know about PHP's type system	nawarian	12.608915	-6.7612567	story	11.0	115.0	1595673379	10.270361
24161828	I love Django / Django Rest Framewor	I love Django / Django Rest Framework and have used it for a long time, but we recently dumped it from a project in favor of FastAPI.There is just so many layers of magic in Django, that it was becoming impossible for us to improve the performance to an acceptable level. We isolated the problems to serialization / deserialization. Going from DB -> Python object -> JSON response was taking far more time than anything else, and just moving over to FastAPI has gotten us a ~5x improvement in response time.I am excited to see where Django async goes though. Its something I had been looking forward to for a while now.	Bedon292	12.655048	-6.582586	comment	11.0	58.0	1597431380	10.006989
24160608	Django Async: What's new and what's 	Django Async: What's new and what's next?	sanketsaurav	12.531075	-6.6706696	story	11.0	148.0	1597425674	9.984104
24320024	Deep Dive into PHP 8's JIT	Deep Dive into PHP 8's JIT	nawarian	12.717727	-6.658343	story	11.0	100.0	1598742018	-9.090622
20067693	Perl 6's given: switch on steroids	Perl 6's given: switch on steroids	lizmat	12.337357	-7.0528464	story	11.0	109.0	1559371472	13.238934
20183210	The Ruby Style Guide	The Ruby Style Guide	garrettdimon	12.597727	-7.0434823	story	11.0	77.0	1560521943	12.379489
20232732	I've been using TypeScript for over 	"I've been using TypeScript for over 1 year after 10 years of JavaScript and I really don't like it.
It slows me and the team down and creates more problems than it solves. It doesn't even ensure type safety because there is no runtime type validation for JSON objects received from the API.
It's disturbing that so few people can see how useless it is. To me, it's extremely obvious.TypeScript is a hack of epic proportions and every so often the reality rears its ugly head in the form of failed source mapping, version compatibility issues, unexpected types during runtime, poor architectural decisions aimed at pleasing the compiler instead of fulfilling project goals.TypeScript is a very poor way to model real-world systems because it incorrectly assumes that real-world entities have a fixed t"	cryptica	12.329712	-6.873835	comment	11.0	67.0	1561037647	-10.451832
20922290	I've been trying to use NodeJS after	I've been trying to use NodeJS after using Rails for years and it's just such a terrible experience. I don't want to install every basic package by hand and generate every model and view and controller by hand. This is basic boilerplate nonsense that made Rails so popular 15 years ago, and NodeJS throws away every lesson we learned from Rails.React is okay as a front-end but without a full stack framework, the current state of Javascript is like stepping back into 20 year old PHP development, where everyone just hacks together anything they can find with no structure, no convention, and no security.	freehunter	12.738383	-6.7621956	comment	11.0	92.0	1568061934	12.32241
20926563	Django 3.0 alpha 1 released	Django 3.0 alpha 1 released	edmorley	12.823833	-6.5779862	story	11.0	60.0	1568109173	10.108197
20966928	Ruby One-Liners	Ruby One-Liners	kawera	12.455514	-7.04692	story	11.0	110.0	1568411040	12.376257
14288885	Sinatra 2.0 released	Sinatra 2.0 released	bdcravens	12.666711	-6.965095	story	11.0	259.0	1494211091	12.380844
14479802	So PHP is faster on most of those te	So PHP is faster on most of those test than python or ruby ? I'm I missing something ? I thought everyone hating PHP ( also) because it was slow.	Xoros	12.6480465	-6.680586	comment	11.0	52.0	1496548188	10.292359
30989804	Deno core team member and TC39 deleg	Deno core team member and TC39 delegate here.We have pondered about capability based security for Deno in the past. Our conclusion has always been that this is not possible to do securely in JS without freezing all prototypes and objects by default. The reasoning for this is that you need to make sure the capability token does not ever leak. For example as a malicious user I could override `globalThis.fetch` to exfiltrate the capability token destined for `fetch` and use it myself later.One could also override `Map.prototype.set` / `Map.prototype.get` to exfiltrate  a token every time it is added or removed from a `Map` (people will want to store tokens in a `Map`).One could also override `Array.prototype[Symbol.iterator]` to exfiltrate tokens  stored in arrays if those arrays are destruct	lucacasonato	12.466697	-6.4614744	comment	11.0	78.0	1649689532	-10.922911
31037183	Ask HN: Whatever Happened to Elixir?	Ask HN: Whatever Happened to Elixir?	princevegeta89	12.68428	-7.4428515	story	11.0	15.0	1650004633	12.918621
31172049	I work at a company with a large Rub	I work at a company with a large Ruby monolith and it’s a disaster.If you’re face deep in the Ruby ecosystem then I’m sure it makes sense, but trying to build services alongside it is truly awful.You want a scalable system that’s easy to write and will grow with you? Write basic Go services.	mountainriver	12.662354	-7.0499835	comment	11.0	56.0	1651001383	12.267374
31261284	...to this day, I still can't wrap m	...to this day, I still can't wrap my head on how PHP even got to exist in a world where Perl was already filling the web niche just fine.Also, if they wouldn't have made it too-weird-for-math-and-physics people, Perl would've probably filled Python's niche too.And with that kind of resources focused on it, Perl 6 could've actually turned up into a clean nice new language that would've unified us all by also supporting nice compile-to-wasm.</alternative-reality>	catchclose8919	12.575314	-6.762861	comment	11.0	48.0	1651675927	13.088378
31331042	Deno is No|de swapped. So no, not ba	Deno is No|de swapped. So no, not backwards. But... how would one call it?	krautsourced	12.520981	-6.439546	comment	11.0	34.0	1652208899	-11.017184
31742061	A bit disappointed by the architectu	A bit disappointed by the architecture -- it's a Django stack with MySQL, Redis, RabbitMQ, and Celery -- for what is effectively AlertManager (a single golang binary) with a nicer web frontend + Grafana integration + etc.I'm curious why/if this architecture was chosen. I get that it started as a standalone product (Amixr), but in the current state it is hard to rationalize deploying this next to Grafana in my current containerless setting.	pphysch	12.553832	-6.5903735	comment	11.0	84.0	1655224967	9.917774
25535226	I've been considering learning Ruby 	I've been considering learning Ruby to replace Python for high level coding and scripting, Python is what I use for most of what I do. Should I? The main reasons I have not are inertia, massive selection of data manipulation libraries in Python, difficulty of async and multithreading in both languages means not much benefit from a usability perspective, and I'm not a fan of the Contributor Covenant CoC.But I have looked at the syntax of Ruby and find it to be more elegant. Does anyone knowledgeable about it have any useful information?	betwixthewires	12.514419	-7.0204134	comment	11.0	49.0	1608886586	12.34887
25560894	Ruby 3.0 and the new FiberScheduler 	Ruby 3.0 and the new FiberScheduler interface	WJW	12.602821	-7.031871	story	11.0	216.0	1609175472	12.333548
25800500	Why is signal servers using Java and	Why is signal servers using Java and not Erlang	steffenix	12.644009	-7.4151926	story	11.0	51.0	1610778012	-5.8186903
25992891	Hey! FastAPI creator hereNice surpri	"Hey! FastAPI creator hereNice surprise to find this shared on HN!It's also great to see so many products/projects and companies using it successfuly in production!I see a bunch of questions related to ""how FastAPI compares to X"", FastAPI was built from the learnings from other awesome tools, and is built on top of great packages. You can read a lot more about it here: https://fastapi.tiangolo.com/alternatives/If you have questions or problems, you can ask in GitHub issues: https://github.com/tiangolo/fastapi/issues/new/chooseThere's also an official Discord chat: https://discord.gg/VQjSZaeJmfAnd finally, if you use FastAPI, I would love your input in the first user survey (you could win stickers ): https:&#x"	tiangolo	12.336125	-6.565656	comment	11.0	64.0	1612209254	-9.2840805
26152246	I would love to find an MVC framewor	I would love to find an MVC framework with the extense library support of Rails but for Javascript. Being able to simply `gem 'devise'` and have full authentication at your hands (including views, email templates, etc) is a godsend.At many places where I've worked at this paradigm is exactly what is needed, but people know and want to use JS. If we choose to go that way then, we need to write a lot of glue code and think about setting up architecture standards, folder and naming conventions, ORM support, authentication, job queues, etc; all of this comes by default with Rails and makes life so much easier.Lately some options seem to be gaining steam:* RedwoodJS [1]: by Tom Preston-Werner (founder of Github), comes with React and GraphQL baked in, pretty new project though* Next.js [2]: bri	mparramon	12.774185	-6.7153277	comment	11.0	47.0	1613466682	12.310249
26354017	Caramel: An OCaml for the Erlang VM	Caramel: An OCaml for the Erlang VM	alokrai	12.524958	-7.522729	story	11.0	201.0	1614930507	12.880976
35845669	Ditching TypeScript for JavaScript	Ditching TypeScript for JavaScript	fintechie	12.3560705	-6.80037	story	11.0	28.0	1683410043	-10.441213
35928229	The Rails Doctrine	The Rails Doctrine	thunderbong	12.832488	-6.8312683	story	11.0	143.0	1683984981	12.317336
35962693	I’ve been doing Erlang professionall	"I’ve been doing Erlang professionally for the last few months. I have to say, it’s a breath of fresh air after decades of Java/Scala/
/golang/. It’s unfortunate it isn’t more popular.OTP and Erlang make it so easy to build distributed systems end to end. It makes my past professional efforts look like a shoddy amateurish joke. If you find yourself needing to build a distributed stateful service, Erlang/OTP should be the top choice."	nvarsj	12.543145	-7.4903183	comment	11.0	102.0	1684248751	12.905244
36184039	Rsh: Ruby SHell	Rsh: Ruby SHell	mpweiher	12.537466	-7.017965	story	11.0	74.0	1685867707	12.355698
36273892	Django Views – The Right Way	Django Views – The Right Way	sgt	12.848853	-6.497271	story	11.0	134.0	1686424105	10.061313
36425858	Ruby Hacking Guide (2004)	Ruby Hacking Guide (2004)	swatson741	12.60206	-7.034033	story	11.0	128.0	1687388234	12.3981495
28996172	A Love Letter to Ruby and Rails	A Love Letter to Ruby and Rails	jmarchello	12.657057	-7.012958	story	11.0	153.0	1635219798	12.334447
29143937	The tragedy of learning a new progra	The tragedy of learning a new programming language as an experienced software engineer is having to start from complete basics tutorials about counting apples in a basket and metaphors to teach what a variable is.One day I'll finally learn Ruby, once I manage to find a learning resource which isn't aimed at complete newbies and goes in depth into the metaprogramming and intricacies of the language.	1_player	12.51914	-7.0394883	comment	11.0	38.0	1636322590	12.376435
29298708	My first software dev job was in the	My first software dev job was in the 90's writing PHP for a mom and pop ISP that was trying to get into app development. It was originally supposed to be Perl, the job interview was something like:Me: demos CRUD app for keeping track of my record collection, hosted on a free siteOwner: You wrote this?Me: Yeah.Owner: This is in Perl?Me: Yeah.So I got hired. The day I got there, he told me they were going to use PHP instead of Perl. Sure, cool, whatever. He told me that I had to start being productive in the first couple weeks or he would have to let me go, couldn't afford to keep people that weren't working out. I was down with that. He had some HTML pages that he had created in a WYSIWYG editor, I think it was Dreamweaver, and I was going to add some PHP scripting to those pages.How hard c	rufus_foreman	12.726341	-6.546442	comment	11.0	78.0	1637521024	10.382454
29565545	There’s no rigorous academic evidenc	There’s no rigorous academic evidence for this, but a lot of companies have been backporting typescript/mypy/sorbet onto existing dynamic codebases and the case studies have been overwhelmingly positive.Not to be a buzzkill, but migration reports from any tech A to tech B are always overwhelmingly positive when the industry has a newlywed period with tech B. Save for a clear, undeniable failure the stakeholders will always claim success.	varjag	12.362812	-6.7778373	comment	11.0	72.0	1639574684	-10.456818
29578157	Is Rails really a thing of the past 	Is Rails really a thing of the past or are people just not talking / posting about it much?	dncornholio	12.760078	-6.941759	comment	11.0	41.0	1639663328	12.349277
34134866	I wrote a Ruby extension in Zig	I wrote a Ruby extension in Zig	ksec	12.555373	-7.065858	story	11.0	123.0	1672032513	12.423264
34244005	I explored this topic a while ago on	"I explored this topic a while ago on my blog [0]In essence, I don't think it has anything to do with elegance, syntax, or ""easiness"". It's more about timing + origin + corporate adoption:* Python was created in Europe, Ruby was created in Japan - when Ruby gained more recognition in English-speaking world (~2004), Python has already been present and used worldwide for a decade* Ruby was created as a personal, hobby project; Python was created while Guido worked in research institutions, and it helped Python gain recognition in academia environment* Guido joined Google in 2005, boosting the adoption of Python; Ruby has never gained such a large corporate backingEventually I believe it was the combination of the latter 2 that pushed Python to top spot in popularity - scientists all over the "	arnvald	12.485461	-7.018501	comment	11.0	50.0	1672827745	12.383286
34254166	Ask HN: Why is Ruby so poorly docume	Ask HN: Why is Ruby so poorly documented?	znpy	12.546656	-7.032973	story	11.0	32.0	1672879007	12.407351
34300893	Owl: A toolkit for writing command-l	Owl: A toolkit for writing command-line user interfaces in Elixir	clessg	12.659029	-7.425934	story	11.0	223.0	1673198025	12.92664
34396443	Authentication with Django and Singl	Authentication with Django and Single Page Apps (2020)	msukmanowsky	12.845868	-6.5036416	story	11.0	70.0	1673839451	10.078543
34963387	Way back in the early 2010s I was ve	"Way back in the early 2010s I was very ""excited"" about coffee script and similar projects. They sounded like they should be great for productivity.When I actually tried to write a project in coffee script, the results were the opposite of what I expected.The code was harder to read, harder to modify, harder to understand, harder to reason about.There's something about removing stuff from syntax that makes programming harder. My hypothesis is this: your brain has to spend extra effort to ""decompress"" the terse syntax in order to understand it, and this makes reading code unnecessarily difficult.So I fundamentally disagree with the underlying premise of these projects, which seems to be based on PG's concept of ""terse is power"".My experience suggests the opposite: there's power in being expl"	hsn915	12.364943	-6.5778	comment	11.0	55.0	1677539708	-10.509924
39440804	A decent VS Code and Ruby on Rails s	A decent VS Code and Ruby on Rails setup	amalinovic	12.724207	-6.9541245	story	11.0	69.0	1708434995	12.409236
39478684	Weird Ruby: Nil Conversions	Weird Ruby: Nil Conversions	unripe_syntax	12.46747	-7.1184654	story	11.0	47.0	1708681027	12.380197
39536396	Learning Elm by porting a medium-siz	Learning Elm by porting a medium-sized web frontend from React (2019)	Tomte	12.997195	-7.5969033	story	11.0	97.0	1709117748	-12.752692
36569727	Perl 5.38	Perl 5.38	thatwasunusual	12.335539	-7.03742	story	11.0	176.0	1688367880	13.190383
36762284	Crystal 1.9.1	Crystal 1.9.1	mikece	12.64882	-7.2709785	story	11.0	112.0	1689619424	10.436175
36836258	Elixir for Ruby developers: the thre	Elixir for Ruby developers: the three most important differences	arrowsmith	12.695857	-7.3726645	story	11.0	175.0	1690126175	12.858978
36898916	Ruby is the only language where exte	Ruby is the only language where extensively deep magic feels okay to me, for some reason.I don't like it in python, I don't like it in Java.But e.g. in Rails, sure I bump my head sometimes, but overall I like how magical Rails feels because it lets me go so fast.Maybe it's because Ruby alone is willing to sacrifice so much speed (though not THAT much vs python tbh) and is willing to go all-in on it, that they enable magic to be so deeply magical that it can deliver adequate value to compensate for being more inscrutable?Whereas other languages' metaprogramming systems keep you a little more leashed.	ye-olde-sysrq	12.629894	-7.031212	comment	11.0	72.0	1690486321	12.389893
37422705	JIT-optimized Ruby can outperform a 	JIT-optimized Ruby can outperform a C extension	mooreds	12.568141	-7.0590835	story	11.0	169.0	1694108592	12.341516
24539553	I'm sad Ruby has been, or is, left b	I'm sad Ruby has been, or is, left behind by python. There are lots of little reasons but no real big one. I just love ruby. I love little things like 'unless'. I know it's still with us, but still feels a little sad.	bfieidhbrjr	12.495311	-7.03531	comment	11.0	57.0	1600659566	12.378777
38952714	So what's the problem with a bundler	"So what's the problem with a bundler/transpiler etc?
You set it up once. It takes a few hours, maybe a day. Then your platform _is_ TypeScript + React. This abstraction basically never leaks. I never need to look at the transpiled files to find an error.Nobody argues that a C compiler is worse than assembly or that drivers or an operating system are bad."	quonn	12.438655	-6.586687	comment	11.0	63.0	1704983832	-10.442937
39012235	Ruby 3.3 on Rails 1.0	Ruby 3.3 on Rails 1.0	thunderbong	12.667016	-7.0166793	story	11.0	259.0	1705405687	12.378874
32538082	My tone doesn't make me wrong, or ho	My tone doesn't make me wrong, or how I convinced the Ruby project to fix a bug	felipec	12.611215	-7.0573225	story	11.0	12.0	1661066740	12.384589
32930605	A text adventure game on TypeScript'	A text adventure game on TypeScript's type system	cacozen	12.334882	-6.811159	story	11.0	293.0	1663789874	-10.461617
33014834	Elixir Sulfanilamide	Elixir Sulfanilamide	benbreen	12.694305	-7.457929	story	11.0	68.0	1664410571	12.942282
32329399	Django 4.1	Django 4.1	j4mie	12.836993	-6.5350556	story	11.0	289.0	1659517984	10.094749
22112295	I teach web development at a univers	I teach web development at a university. We have used, java, javascript, python and php for a basics course in webdev.Php has built in web features and one doesnt need more than a php interpreter (considering the built in web server as well) to get started. For all other languages i know of, there is quite a process to get started (e.g. start with python flask one needs a package manager, environment variables, command line experience, ...). Php is a web native language and great for learning and getting started.Considering professional development (https://en.m.wikipedia.org/wiki/Programming_languages_used_i...) it seems that it doesn't matter what language one chooses, various different stacks are used by the most popular websites..	la_fayette	12.699465	-6.6466928	comment	11.0	100.0	1579645181	10.317585
22241533	Learn X in Y minutes Where X=Prolog	Learn X in Y minutes Where X=Prolog	rbanffy	13.134882	-7.2978854	story	11.0	130.0	1580853889	4.4482064
19278555	Interpreter for a simple Lisp, Writt	Interpreter for a simple Lisp, Written in Prolog	martinlaz	13.1332855	-7.2987866	story	11.0	120.0	1551424478	-12.47921
19908681	Erlang OTP 22.0 is released	Erlang OTP 22.0 is released	ramchip	12.580268	-7.5138597	story	11.0	315.0	1557835089	12.906528
15814907	PHP 7.2.0 Released	PHP 7.2.0 Released	pgl	12.772488	-6.6596956	story	11.0	143.0	1512040224	10.30985
16335211	Someone will have to explain why I m	Someone will have to explain why I might pick ReasonML over Elm for front-end development. Elm's community seems very focused on making front-end development as intuitive and hassle-free as possible. ReasonML seems like Facebook just wanted to leverage a pre-existing community but couldn't bring themselves to adopt the syntax so rewrote it in-house.	lewisinc	12.520243	-7.601666	comment	11.0	38.0	1518120940	-12.698175
16551850	Why Hanami will never unseat Rails	Why Hanami will never unseat Rails	mparramon	12.7720995	-6.949974	story	11.0	55.0	1520605014	12.367449
16639147	Another thing I’m getting is that th	Another thing I’m getting is that the new kids won’t like rails, and it’s being harder to hire.I'm surprised by this, to me the language used would be a long way down the list when evaluating an employer.	tonyedgecombe	12.73715	-6.9660783	comment	11.0	55.0	1521647420	12.365603
16726306	I'm seriously not sure if this is sa	"I'm seriously not sure if this is satire. It starts off with a simple example, and then goes down a rabbit-hole of massive complexity to ultimately do the same thing. This reminds me of the many OOP articles that were common shortly before the turn of the century, which would take as an example a perfectly straightforward and simple-to-understand piece of code and then bloat it into an asinine multilayered monstrosity by applying a generous amount of ""OOP best practices and patterns"" while straight-facedly enumerating all the alleged benefits.When you first started with PHP, you may have used includes or requires statements throughout your app to bring in functionality or configuration from other PHP files. In general, we want to avoid that because it makes it much harder for a human to fo"	userbinator	12.698264	-6.6369505	comment	11.0	62.0	1522548309	10.324711
16886487	Why I'm declining funding from Ruby 	Why I'm declining funding from Ruby Together	jrochkind1	12.70102	-6.9872007	story	11.0	178.0	1524243661	0.51041895
16935950	I understand that Flask has become p	"I understand that Flask has become popular because it is easy to learn, but my experience is that as your knowledge progresses it just keeps getting in your way. I particularly dislike some design choices which look like afterthought hacks, such as global variables for current request and using abort() functions instead of raising exceptions directly.EDIT: To avoid hollow naysaying, here are some alternatives to Flask I find much better designed:    - Tornado Web Framework [0]
    - Falcon [1]

[0] http://www.tornadoweb.org/en/stable/webframework.html[1] https://falconframework.org/"	BerislavLopac	12.705758	-6.552327	comment	11.0	63.0	1524777836	9.9861965
17080392	Switching back to Java after having 	Switching back to Java after having spent a long time in JavaScript land with modern standards made me realize how great JavaScript had become.The biggest reason for JavaScripts greatness to me is JSON. I couldn't understand how Java developers put up with such bulky ways to deal with data. After some time in Java land I've come back to appreciating its strengths again though. Code completion is nice. I'm kind of hoping for more typescript in the future.	worldsayshi	12.369881	-6.4735665	comment	11.0	69.0	1526452129	-10.434545
17150580	While I believe 'plain English' type	"While I believe 'plain English' type programming languages are a great concept, the reality is that it just introduces far more ambiguity into the mix, and you are just left trying to guess what the language designer's vagaries are.I came across this years ago when trying to get to grips with the then new fangled Ruby language.  I kept having to go back to the documentation to remember the best way to convert a string to all uppercase... was it:  str.upper
  str.uppercase
  str.ucase
  str.upcase
  str.capitalize (<- Don't even get me started on the regional differences of 'ise' vs 'ize' between US and UK English variants)
  ???

Even here, I would probably start using Avail, then in a few weeks I would be scratching my head and asking, was it:  Print 1 to 10, as a comma-separated list

or"	cyberferret	12.465623	-7.055042	comment	11.0	54.0	1527221964	12.379185
17242026	TypeScript 2.9 is now available	TypeScript 2.9 is now available	hamstercat	12.415046	-6.8320117	story	11.0	234.0	1528232589	-10.514112
17355928	The only thing that would get me off	The only thing that would get me off Rails is an opinionated framework with static type checking.I need* Migrations* Models with validations* Views (prefereably statically typed)* Controllers with built in routing and type safe routing methods.* Static type checking.* Great package management.* Deploy to HerokuI'm looking at https://luckyframework.org/ and it's looking very good. Using crystal as a type safe ruby.	1ba9115454	12.704594	-6.96967	comment	11.0	54.0	1529506386	12.342105
17417360	One of the things that makes me sad 	"One of the things that makes me sad is there is no project even remotely close comparable to Django for say Golang or Scala.I love the fact that you get an admin interface out of the box. And tons of documentation. The views/template stuff is a bit dated since everyone started moving to frontend/backend services and SPAs but we still have DRF which is incredible in the amount you get for ""free"".I've had the ""pleasure"" of working with other large projects built on flask and ever time it gets to a certain size I wonder why we didn't just use Django. There is stuff you don't realize you need until some enterprise customer requires it for your product to even be considered. Auditing, session retries/timeouts, etc. With flask you can just add another library but it isn't as connected as Django "	jtchang	12.817599	-6.5058346	comment	11.0	99.0	1530197864	10.041801
17845458	The Elm Architecture	The Elm Architecture	tosh	13.00433	-7.689338	story	11.0	119.0	1535283528	-12.755446
21227839	> Larry has now agreed with the chan	"> Larry has now agreed with the change and Perl 6 will be renamed to ""raku"" and Perl 5, which has regular, major releases every year, will now be able to simply be ""Perl"" and be free to continue on its own way.I hope that doesn't mean that when Perl needs a major number version change again, they'll chose 6. It would be pretty confusing to have 2 Perl 6."	jolmg	12.340318	-7.0731983	comment	11.0	68.0	1570823753	13.177815
21281917	Can someone post/comment a more crit	Can someone post/comment a more critical analysis of elixir if they can?It's really hard to figure out how useful it is because people always build up hype when it's not always worth it. All I ever see is how wonderful and magical elixir is and how it's literally life changing. I want to believe but I've seen technologies with lots of hype that didn't live up to it. Plus elixir is different enough that I have a really hard time jumping into it to try it out.----I'll also add that recently I had to build a backend for a long term project I've been working on. I seriously looked at elixir/phoenix, but from my research it didn't seem like the pros outweighed the cons. Like there are some technologies that are so useful they're worth the lack of a robust ecosystem or the steep learning curve t	preommr	12.68925	-7.4355116	comment	11.0	56.0	1571319591	12.923266
21298075	Ask HN: How much Ruby do I need to l	Ask HN: How much Ruby do I need to learn before moving into Rails?	rodolphoarruda	12.750578	-6.959964	story	11.0	16.0	1571487212	12.375448
21314163	I built a project using Elm last sum	I built a project using Elm last summer. Here is my quick feedback:+ The language syntax is very nice and refreshing.+ It's a joy to work with the compiler.+ If it's compiling, it's working! No runtime exceptions.+ Static typing!+ Functional programming!- The language doesn't have component composition (like in React or Vue) and you end up having huge chunks of spaghetti code (but to be fair, it kind of works because of the compiler).- It's complicated to implement routing and to build a Single Page Application.- Only pure functions in Elm, so doing API calls and generating random numbers are unnecessary hard.- It's a pain to parse JSON.- There is no variable shadowing, so naming your stuff is harder than it should be.- Vue embraces HTML, Elm avoids HTML, and it's really a pain to build HT	sunseb	12.973644	-7.6325893	comment	11.0	64.0	1571675299	-12.749752
21726710	JIT and Ruby's MJIT	JIT and Ruby's MJIT	stanislavb	12.5983305	-7.0496225	story	11.0	115.0	1575671833	-5.373926
39080003	Learn Datalog Today	Learn Datalog Today	tosh	13.18231	-7.0282063	story	11.0	191.0	1705855120	5.6837125
17909696	TypeScript 3.0	TypeScript 3.0	gmac	12.364837	-6.864992	story	11.0	93.0	1536075002	-10.473897
18085140	Announcing TypeScript 3.1	Announcing TypeScript 3.1	DanRosenwasser	12.403623	-6.8351417	story	11.0	163.0	1538060409	-10.529086
18154074	The Prolog Story (2010)	The Prolog Story (2010)	peter_d_sherman	13.147806	-7.2986875	story	11.0	131.0	1538812433	-12.494099
18269071	Run Perl in the browser with WebPerl	Run Perl in the browser with WebPerl	mfontani	12.375883	-6.9255295	story	11.0	148.0	1540143351	13.135709
18752191	Is it a good time to learn Ruby? I m	Is it a good time to learn Ruby? I mostly do React and Node + Java work professionally, but I've been looking into Ruby as a fun side project language. I would appreciate any anecdotes!	alfredmuffin	12.626174	-7.0220146	comment	11.0	51.0	1545660591	12.367514
29876052	One of my goals for 2022 is to write	One of my goals for 2022 is to write my first real web app. I want to understand things like authentication, creating an API, and security. My initial impression is that the JS/Node world is miserable. Rails looks 1000 times more pleasant.	bachmeier	12.745812	-6.7927294	comment	11.0	52.0	1641827639	12.323181
30023008	Best practices as code using RuboCop	Best practices as code using RuboCop	ubuwaits	12.445982	-7.069756	story	11.0	58.0	1642770844	-10.914117
30175194	I might just be not as intelligent a	I might just be not as intelligent as the average TypeScript developer, but I find the complexity with the type system off-putting. There's 5 different ways to type something, and learning a new type language isn't what I wanted when I just needed my JavaScript to be typed.It's too bad Flow has lost the typed-JS battle, I find the syntax to be a lot easier to use.	forgotmyoldacc	12.339971	-6.8330474	comment	11.0	38.0	1643791001	-10.433339
30181349	ReScript aims to be a strictly typed	ReScript aims to be a strictly typed JS, simpler and faster than TS	anarkafkas	12.373795	-6.7507195	story	11.0	39.0	1643825031	-10.46945
30262505	Personally, I liked Laravel when I w	"Personally, I liked Laravel when I was first investigating it years ago, but was always a touch put off by the pervasive ""I am beautiful, adore me"" undercurrent throughout its design, documentation, and even comments. I'll be the first to admit that's not a rational critique.Having said that, though, Laravel is relatively unusual among major frameworks in that it doesn't seem to have been developed in tandem with a real-world project like Rails and Django were (e.g., BaseCamp and the Lawrence World Journal's internal CMS), but rather developed just to be ""a better framework."" Each successive release of Laravel seems to push even harder at tying you up with other Laravel add-ons, some of which are paid services. Rails and Django are open-source projects, but Laravel is an open-source produc"	chipotle_coyote	12.801897	-6.6490765	comment	11.0	57.0	1644345480	10.363118
30711245	Deno 1.20	Deno 1.20	Mikkel-T	12.528135	-6.4582343	story	11.0	158.0	1647525649	-11.023587
12824927	Ask HN: What did you make in Django?	Ask HN: What did you make in Django?	pythonbull	12.791935	-6.4997115	story	11.0	15.0	1477760743	10.058941
12861180	A VSCode person can (and probably wi	A VSCode person can (and probably will) answer in more detail, but at heart it's simple: if you want to add type-checking goodness to a library that isn't itself written in TypeScript, you can create a thing called a declaration file: https://github.com/DefinitelyTyped/DefinitelyTypedMicrosoft publishes a list of known good declaration files for popular npm packages to npm, under the scope @types: https://www.npmjs.com/~typesThe 1.7 release of VSCode helpfully tries to automatically load type declarations for any npm package you use by requesting the equivalent declaration package under @types. When the package exists this is fine, because it's cached in our CDN.What they forgot to consider is that most CDNs don't cache 404 responses, and since there are 350,000 packages and less than 5000	seldo	12.342461	-6.6644683	comment	11.0	41.0	1478140347	-10.463846
12906807	Unfortunately this is an opinionated	Unfortunately this is an opinionated piece with foul language and it is a bit offensive. Sandy should take into account that Elm is created by one person pretty much (‎Evan Czaplicki) who created it in his PhD thesis and has been maintaining it since. So it's someones baby still, and they might be offended.It is a remarkable for one person to create a language, runtime, repl, debugger, compiler to another quirky language i.e. JS that is usable to the point that people are doing professional work in Elm. Also the compiler produces easy to understand messages.Evan has made Functional reactive programming more accessible. I don't think I would have a chance to understand FRP at all without Elm. Elm has inspired other frameworks in Purescript and the development of ReactJS.Sure Elm is not perf	bbcbasic	12.962774	-7.6473775	comment	11.0	72.0	1478673914	-12.754301
13045730	At work, we have an internally gener	"At work, we have an internally generated report that was done purely in ruby. It worked, barely, munging numbers for about 1000 records. When we hit 4000 records, the report took about 6 hours to run in ruby.We looked for some obvious optimizations like eager loading and some map reduce magic and implemented them. That brought us to a range of 45 minutes to 2 hours.We decided that it was still not good enough. We moved ALL of the report into SQL functions (Postgres) and we have the whole function running in 27 seconds.I agree with some of the top comments that maintaining this is a little trickier than ruby code, but some ideas we came up with in maintenance:
1) Write the SQL in a ruby file that has a class method of sorts that returns the generated function. This allows for version contro"	phereford	12.6711	-6.969912	comment	11.0	100.0	1480192882	12.355261
13086553	PHP 7.1.0 Released	PHP 7.1.0 Released	ing33k	12.770473	-6.6498938	story	11.0	158.0	1480660096	10.323272
13100619	Seeking partner for side project	Seeking partner for side project	emilioolivares	12.808377	-6.504871	story	11.0	14.0	1480871099	10.093095
13106906	Elixir and Ruby can talk to each oth	Elixir and Ruby can talk to each other using Erlix	thibaut_barrere	12.657147	-7.4367976	story	11.0	169.0	1480957375	12.905684
27902296	The four noisy horsemen of Perl hate	The four noisy horsemen of Perl hate	todsacerdoti	12.3306875	-7.0353055	story	11.0	45.0	1626841291	13.183642
28061247	Use Phoenix Channels	Use Phoenix Channels	clessg	12.85153	-6.9789433	story	11.0	146.0	1628086568	12.7394495
28131257	Deno 1.13 Release	Deno 1.13 Release	0xedb	12.529659	-6.4463434	story	11.0	134.0	1628614843	-11.033232
22315283	Parsoid in PHP, or There and Back Ag	Parsoid in PHP, or There and Back Again	sthottingal	12.747949	-6.6337867	story	11.0	87.0	1581567191	10.326744
23001223	Porting a React Front End to TypeScr	Porting a React Front End to TypeScript	gary_bernhardt	12.491899	-6.6749873	story	11.0	72.0	1588028723	-10.45438
23145138	What are some examples of $HYPED_TEC	What are some examples of $HYPED_TECHNOLOGY and $FLASHY_LANGUAGE these days? All I can remember is Ruby on Rails.	henryw	12.582527	-7.0401373	comment	11.0	37.0	1589220569	12.342885
23285521	TL;DNR, use a language your company 	TL;DNR, use a language your company can support.  It doesn't matter how suited to the job a language is, if it's single Engineer or small team, what happens when they move on?  How do you support it?  Who's on call?Not Elixir, but a cautionary tale from our Erlang project.  ~8 years ago a our IoT backend was written in Erlang, this was the early days of IoT, so sure it made sense as a technology, could scale well, handle all the symmetric sessions, etc.  It was a good tool for the job and in theory could scale well.But, there's always a but.  We're a Python shop on the backend and C on embedded devices.  Engineers move on, there some lean times, and after a few years there was no one left who could support an Erlang system.  So we hired for the position, and it's key infrastructure, but no	as-j	12.579927	-7.5040517	comment	11.0	149.0	1590260970	12.915293
23302102	Solving the “Miracle Sudoku” in Prol	Solving the “Miracle Sudoku” in Prolog	andrelaszlo	13.341824	-7.3726273	story	11.0	276.0	1590420965	-12.4960785
23363250	Show HN: Caldera – Phoenix LiveView 	Show HN: Caldera – Phoenix LiveView for Node and React	yunyu	12.890121	-6.7053638	story	11.0	101.0	1590862239	12.750329
33091715	Will We Ever Run Out of Sudoku Puzzl	Will We Ever Run Out of Sudoku Puzzles?	jazali	13.450285	-7.4111214	story	11.0	57.0	1664948469	15.078928
33130489	Ask HN: Is Django a good choice as a	Ask HN: Is Django a good choice as a framework for starting up in 2022	ptrenko	12.789738	-6.4929576	story	11.0	9.0	1665213849	10.03947
33357318	Modern PHP features – PHP 8.0 and 8.	Modern PHP features – PHP 8.0 and 8.1	mikece	12.762425	-6.667742	story	11.0	182.0	1666878009	10.320821
33404658	The Perl Foundation will now be know	The Perl Foundation will now be known as The Perl and Raku Foundation	Amorymeltzer	12.329713	-7.0495367	story	11.0	89.0	1667218266	13.16925
33724451	Ruby concurrency is hard: how I beca	Ruby concurrency is hard: how I became a Ruby on Rails contributor	todsacerdoti	12.670764	-6.970663	story	11.0	142.0	1669237182	12.340385
33794874	As I type this, every top-level comm	As I type this, every top-level comment here is a criticism or a nitpick. A cool new feature is being added to Ruby. People have done difficult and meaningful work that benefits others. And this is the response here.I'm psyched for this feature. As someone who has worked primarily with Ruby and Elixir, I really appreciate the design and safety affordances of immutable data. I'm glad there's a bit more immutability in Ruby and that, in general, the language keeps progressing. Thank you Ruby language devs.	tjstankus	12.35116	-7.1414666	comment	11.0	88.0	1669764597	12.37327
33907628	> PHP 8.2 is a major update of the P	"> PHP 8.2 is a major update of the PHP language.Major update, awesome. /sAs someone who manages a network of 250+ WordPress websites - these PHP updates are killing me!  As  soon as I'm done helping clients upgrade/fix their incompatible themes/plugins and custom code, a new version is out!  Even with great tools, the process for about 10% of my network is a nightmare.While I appreciate the work, it's not very satisfying and for many clients very frustrating to pay for something they know nothing about, just to ""keep the lights on""."	josefresco	12.777053	-6.643914	comment	11.0	75.0	1670506041	10.338289
33962042	Building Games with DragonRuby – A f	Building Games with DragonRuby – A free book on Ruby game dev	brettcodes	12.62335	-6.999843	story	11.0	181.0	1670888098	12.354713
34066795	An Overview Of Upcoming Ruby on Rail	An Overview Of Upcoming Ruby on Rails 7.1 Features Part 1	siaw23	12.73109	-6.9677453	story	11.0	161.0	1671548563	12.361225
34071716	Ask HN: Does TypeScript live up to t	Ask HN: Does TypeScript live up to the hype?	speedylight	12.355314	-6.6796155	story	11.0	12.0	1671566732	-10.436891
34072349	Ruby delights built into the languag	Ruby delights built into the language	codenamev	12.577518	-7.0502925	story	11.0	240.0	1671569467	-8.112688
26892266	Ever since watching Jonathan blows t	"Ever since watching Jonathan blows talk ""Preventing the collapse of civilisation"", I've been mulling over things like this. It feels like we have this defacto set of commands you have to run to start a new Node/Typescript project, without much understand of what it does. Then you get complier or lint errors and then spend ages googling around for the answer that tells you to change a specific flag. 
This isn't a complete thought but I hope someone knows what I'm getting at."	joshghent	12.358189	-6.829209	comment	11.0	95.0	1619024354	-10.480066
27354725	Should Perl die gracefully?	Should Perl die gracefully?	mjgardner	12.335471	-7.02778	story	11.0	40.0	1622556503	13.183137
27398701	Django Unicorn – A full-stack framew	Django Unicorn – A full-stack framework for Django	mands	12.794526	-6.4569983	story	11.0	53.0	1622838393	10.071996
37629678	Ask HN: Is there a technology you lo	Ask HN: Is there a technology you loved but had to abandon?	bicx	12.678928	-7.4006453	story	11.0	11.0	1695523317	12.885346
37787448	Don't get me wrong, I love Rails, an	Don't get me wrong, I love Rails, and have been using it off and on since Rails 2.It's a really good framework, and for someone like me who needs to stand up a website from time to time it really is the path of least resistance.What bugs me is the pain of setting up a new laptop to run Rails. I need node, which means npm. I'm a backend guy, I don't understand how to set up node, what order to do things in, etc. I do it rarely enough that it always seems a fight. Eventually I get it done, but I'm never sure why it finally all comes together.An installer that puts together all the requirements so my rails just works would be great. The rvm installer will set up rails on top of ruby but won't set up the node system underneath it.	steve_gh	12.718858	-6.829043	comment	11.0	47.0	1696570978	-4.978322
38249909	> if you open up any Rails applicati	"> if you open up any Rails application, it looks basically the same in structure whether it is the biggest Rails app there is or a new one.I used to love this, untill I started to hate it. I am convinced this is a major contributor to why so many Rails apps turn into an unmaintainable mess over years.Who measures onboarding in hours? It's fine if it takes a day or two to understand the domain. And the framework. And how they tie together.Talking about the domain: Rails puts ""the plumbing"" up front. Its how it achieves this consistency. My app is never about ""models"" or ""http"" or ""databases"". My app is about medicine-journals. Or loan-request-management. Or CRM. Rails makes itself important, at the cost of my domain.Rails' opinionatedness makes it so that this is hewn in stone. Its MVC is a"	berkes	12.842856	-6.8289504	comment	11.0	100.0	1699882293	12.301482
38578498	Ask HN: What are good patterns for h	Ask HN: What are good patterns for holding state?	JSLegendDev	12.639601	-6.5187182	story	11.0	7.0	1702095158	8.536461
38595146	“omg.lol is unabashedly built with P	“omg.lol is unabashedly built with PHP”PHP is on my mental list of forever-security-challenged tech, but it got on that list a long time ago.  It’s 2023, is that still a reasonable concern?	shermantanktop	12.7789	-6.5802846	comment	11.0	56.0	1702243018	10.3439245
15095460	Goby: A new Ruby-inspired language w	Goby: A new Ruby-inspired language written in Go	mcone	12.468472	-7.185657	story	11.0	119.0	1503624434	12.278271
15273534	The casual culture of pulling in hun	The casual culture of pulling in hundred of dependencies, and mushrooming language specific package managers is ridiculously insecure and has to go.There is no way for anyone to know what all this code is doing, there is little way to verify updates and its simply untenable.If some developers like this sort of unsafe practice it should be strictly limited to their machines and in no way make it across in any form as a deployment artifact.There are already secure distribution package managers with the necessary infrastructure, you are not special, use those. Ruby is already paying a price for imposing dependency hell of users and wasting millions of man hours. Many have suffered and do not even bother with Ruby apps anymore. Node and others who think this is a good model will be next. Users	zizek23	12.494087	-6.8940682	comment	11.0	97.0	1505711251	-9.296058
23654973	PHP Insights: Analyze the code quali	PHP Insights: Analyze the code quality of PHP projects	MindGods	12.816135	-6.6944165	story	12.0	150.0	1593194407	10.311147
24048257	OT Question : When choosing a stack 	OT Question : When choosing a stack for creating sites, would you choose Django over ASP.NET Core or PHP?If so, why?	kumarvvr	12.770457	-6.5086656	comment	12.0	56.0	1596533843	10.049314
20475737	PHP 5 and 7.0 end of life	PHP 5 and 7.0 end of life	thewanderer1999	12.784938	-6.6479845	story	12.0	125.0	1563503353	10.315062
20956450	TypeScript 3.7: The Biggest Features	TypeScript 3.7: The Biggest Features and How to Use Them	based2	12.377032	-6.838576	story	12.0	140.0	1568322339	-10.4521055
13611220	Learn web development: Django Web Fr	Learn web development: Django Web Framework	farabove	12.800556	-6.519483	story	12.0	290.0	1486676105	10.061843
13619958	(Ellie is really cool, apologies for	"(Ellie is really cool, apologies for the meta comment, but):It's a shame that all that hits me in the face with Elm code examples lately is awkward style conventions. Why do they have to be so user hostile?Trailing brace on the next line even for this?    type alias Model =
    { counter : Int
    }

Instead of:    type alias Model = { counter: Int }

Comma first, when trailing comma is so much more intuitive, why this?    Html.program
        { view = view
        , update = update
        , subscriptions = \_ -> Sub.none
        , init = ( model, Cmd.none )
        }

instead of:    Html.program {
        view = view,
        update = update,
        subscriptions = \_ -> Sub.none,
        init = ( model, Cmd.none ),
    }

(... which makes for better diffs too). And weird bracket soup f"	allover	12.946879	-7.6079965	comment	12.0	84.0	1486770557	-12.763083
13634236	Ask HN: What's your beef with PHP?	Ask HN: What's your beef with PHP?	meneses	12.771132	-6.639551	story	12.0	15.0	1486980337	-1.5179048
13786471	Phoenix 1.3 is pure love for API dev	Phoenix 1.3 is pure love for API development	chx	12.785131	-7.0834165	story	12.0	181.0	1488574708	12.775276
14274037	PHP vs Node js... Let's be honest: N	PHP vs Node js... Let's be honest: Node.js couldn't kill PHP. Why?	clubminsk	12.664248	-6.5127783	story	12.0	25.0	1493997407	10.262557
14289105	The relevant timeline for Sinatra is	The relevant timeline for Sinatra is as follows:- Rails 1.0 is released, popularizing Ruby- Rails 2.0 is released, deprecating patterns that were best practices in 1.0 and advocating REST patterns.- Sinatra is born, distilling the ideas behind REST into an extremely simple and performant microframework.- Sinatra has been copied/emulated in nearly every programming language, and its clones have also been widely successful.- Rails went on to release subsequent versions, each of which advocated doing a near rewrite of working code and obsoleted/broke many of the libraries in the ecosystem.- Meanwhile, Sinatra has remained very stable and its design has continued to inspire new clones.  See Floor, Scotty, Opium, Express, Flask, etc.Bravo to the Sinatra team for building and maintaining a usefu	grandalf	12.699211	-6.973685	comment	12.0	66.0	1494215210	12.385344
14302711	Ask HN: Freelancing? How's Work?	Ask HN: Freelancing? How's Work?	samullen	12.734272	-6.9359117	story	12.0	52.0	1494354956	12.352357
14377232	Bootsnap: Optimizing Ruby App Boot T	Bootsnap: Optimizing Ruby App Boot Time	Finbarr	12.635138	-6.9812083	story	12.0	285.0	1495211681	12.378827
14647041	TypeScript 2.4	TypeScript 2.4	DanRosenwasser	12.362353	-6.8638606	story	12.0	201.0	1498582463	-10.451796
14690958	So having used both, this is what I 	"So having used both, this is what I tend to say about them: some of Flask's commonly-used components are better than django's (SQLAlchemy notably), but altogether, django is a better framework.I strongly disagree with the notion expressed by some that beginners should start with flask ""to learn how things work"". Making a sane and maintainable project layout is not a particularly easy thing to do, >90% of people (not just beginners) will generally fuck it up somehow and end up living with a really weird app initialization routine as a result. Django's project/app layout and initialization is really quite well considered and I would say appropriate for 99% of projects. That 1% would probably be better off with flask.More broadly, this is the whole opinionated vs. non-opinionated debate, and "	ris	12.786931	-6.531898	comment	12.0	87.0	1499111953	10.00736
31679740	Building a personal blog using Djang	Building a personal blog using Django	rishikeshs	12.826928	-6.489544	story	12.0	22.0	1654772688	10.1119795
31769316	Breaking up with Flask and FastAPI: 	Breaking up with Flask and FastAPI: Why they don’t scale for ML model serving	yubozhao	12.654625	-6.5565596	story	12.0	38.0	1655404001	-9.662097
26097244	On the last section, where he says p	"On the last section, where he says people ""weren't avoiding Ruby for speed reasons"", that's only true if you take speed very literally. Ruby has concurrency problems compared to many of the more recently popular backend languages like JS, Go, Elixir, or even Java. It has single-threaded performance that's fast enough for a lot of things, but out of the box its ecosystem and standard libraries don't default to evented IO, and the GIL messes up threading, both of which can be footguns for anyone trying to build a resilient and scalable service.When I was a junior engineer, one of our demos to a client failed because we had a group of 20 people try to use a server that had a highish latency connection to a database, and using synchronous IO meant that a 50ms db round trip for each executed qu"	strken	12.633639	-6.9700785	comment	12.0	106.0	1613007710	12.30474
29159842	Ruby 3.1.0 Preview 1	Ruby 3.1.0 Preview 1	riffraff	12.6401825	-7.027949	story	12.0	220.0	1636453558	12.425849
29538738	Hey - I am Luca Casonato, Deno's new	Hey - I am Luca Casonato, Deno's new delegate at TC39. I am happy to answer any questions you all might have :-)	lucacasonato	12.545745	-6.4406857	comment	12.0	120.0	1639395986	-11.017574
34175759	Show HN: LiveTyper, a simple typing 	Show HN: LiveTyper, a simple typing speed tester	amalgamated_inc	12.899178	-6.8634753	story	12.0	28.0	1672337328	-4.444007
34275818	Modern Polars: A comparison of the P	Modern Polars: A comparison of the Polars and Pandas dataframe libraries	mutant_self	12.3494	-6.5500383	story	12.0	132.0	1673019333	10.13349
34287270	PHP: Prolog Home Page	PHP: Prolog Home Page	zichy	13.14617	-7.2972693	story	12.0	126.0	1673092843	-12.4753
35118636	TypeScript Magic	TypeScript Magic	skilled	12.35648	-6.8951683	story	12.0	65.0	1678618390	-10.44401
35150100	Full-Stack TypeScript with tRPC and 	Full-Stack TypeScript with tRPC and React	mariuz	12.482416	-6.6404004	story	12.0	65.0	1678795105	-10.456066
39397538	Erlang/OTP 27.0 Release Candidate 1	Erlang/OTP 27.0 Release Candidate 1	lobo_tuerto	12.59222	-7.5147643	story	12.0	129.0	1708094074	12.899055
39550366	The year in this link is very import	"The year in this link is very important. In the following year, the Elm team decided to not pay attention to the maxim ""perfect is the enemy of good"" and crippled their FFI story, making it impossible to actually use the language in production[1].I would recommend to steer clear of a language that makes these sorts of decisions -- that certain features are off-limits to the regular developer because they can't be trusted to use them correctly -- because if you find yourself in a situation where you need that to solve your problem, you're trapped. I included Go in the set of languages I would recommend steering clear of for years, due to their decision to allow their own `map` type be a generic[2] type but no user-defined types could be[3], leading to ridiculously over-verbose codebases, bu"	ISV_Damocles	12.985608	-7.681229	comment	12.0	75.0	1709219473	-12.753381
37086686	TypeScript Without Transpilation (20	TypeScript Without Transpilation (2021)	berlam	12.36063	-6.805582	story	12.0	44.0	1691745552	-10.458669
37122006	Elixir – Why the dot when calling an	Elixir – Why the dot when calling anonymous functions?	weatherlight	12.515306	-7.398373	story	12.0	222.0	1692026203	12.929864
37244012	Bun v0.8	Bun v0.8	todsacerdoti	12.463312	-6.446091	story	12.0	359.0	1692840062	-10.749641
37305357	The advantages of Elixir are not per	The advantages of Elixir are not performance-related.There is a lot of focus on raw performance on web-related services, when in reality most of their running time is spent waiting for IO. If there are two things the BEAM excels at, is IO and turning almost any problem into half a dozen processes that are scheduled and run in parallel, if not geographically-distributed, with 1/50th the effort of any other language.We live in a world with 32+ core CPUs. If your load is not spread uniformly all over those cores, you're losing a ton of performance. Handling requests over separate threads, like 99% of languages do, still isn't enough if all the business logic runs on the same thread.I'm currently writing a web crawler in Elixir, and it is easier to design it so every request is done and proces	sph	12.631229	-7.4584813	comment	12.0	102.0	1693302722	12.895864
37479323	Phoenix 1.7 for Elixir: Edit a Form 	Phoenix 1.7 for Elixir: Edit a Form in a Modal	amalinovic	12.708445	-7.3916807	story	12.0	157.0	1694517161	12.904362
24700612	Which tool should I use to build a s	Which tool should I use to build a simple dynamic website in 2020?	livingpunchbag	12.783424	-6.507848	story	12.0	14.0	1602007381	10.118302
24867104	Can a fellow geek knowledgeable in P	Can a fellow geek knowledgeable in PHP gives me a few pointers?I have inherited a 12 year old PHP app written by 2 interns. The code was written with Notepad++ (no IDE), no comments except when they copy pasted something from the internet, most variables are single letter and it's the biggest spaghetti bowl I have ever seen.To add insult to injury I have no experience with PHP (apart from peeking at this code to fix a minor bug here and there). To be fair the app works OK and has done the job for all those years.This app has never been updated so it's PHP version 4 or 5 I think, it runs on an old Debian 5 VM, it's not facing internet, internal use only. It was supposed to be deprecated last year, but now given our budget (or lack thereof) and the sheer incompetence of our new provider I do	jmnicolas	12.736724	-6.6261835	comment	12.0	51.0	1603440746	10.3263445
25005780	Switch from Ruby to Crystal	Switch from Ruby to Crystal	notinarkensas	12.622322	-7.2376156	story	12.0	76.0	1604648032	-11.239509
25043541	Insights from Adopting TypeScript at	Insights from Adopting TypeScript at Scale	robpalmer	12.375481	-6.7485237	story	12.0	180.0	1604993146	-10.493603
25064615	this is legitimately the worst progr	this is legitimately the worst programming book i've ever read. i wanted to get started with ruby back in 2009, and everyone was praising this book. i got it, read the first few chapters, and got bored out of my mind. it meanders and takes forever to get to the point. in the end, i never really learned ruby, and the main cause was this book.	nicebyte	12.611797	-7.037376	comment	12.0	46.0	1605139941	12.373511
25162839	Static Typing for Ruby: Adopting Sor	Static Typing for Ruby: Adopting Sorbet at Scale	ufuk	12.514135	-7.121319	story	12.0	155.0	1605894181	12.368939
25307147	Stop-saying-PHP-is-dead	Stop-saying-PHP-is-dead	deepender99	12.77344	-6.6348763	story	12.0	35.0	1607112782	10.355645
38750459	Unveiling the big leap in Ruby 3.3's	Unveiling the big leap in Ruby 3.3's IRB	todsacerdoti	12.602271	-7.0502	story	12.0	210.0	1703384156	12.363812
38792541	Ask HN: Good examples of fault-toler	Ask HN: Good examples of fault-tolerant Erlang code?	roeles	12.524786	-7.4980884	story	12.0	147.0	1703764390	12.904706
32116219	> Unlike Python, in Ruby… There are 	> Unlike Python, in Ruby… There are a number of shortcuts that, although give you more to remember, you quickly learn. They tend to make Ruby fun and very productive.I use Python, but have never tried Ruby. The ecosystem for Python packaging is so chaotic that I’ve considered switching.Any Pythonistas/Rubyists here that could point out some Ruby shortcuts that make you more productive?	boberoni	12.499287	-7.0198073	comment	12.0	155.0	1657960451	12.345042
32448772	Functional Reactive Programming	Functional Reactive Programming	amelius	12.528665	-6.4663715	story	12.0	182.0	1660389526	8.409509
19536132	There is something to be said about 	"There is something to be said about PHP's staying power. The early versions of the language weren't considered ""right"". Except maybe they were right for the problem at hand.The way I see it was PHP captured the vector of change, and left ample room for future developments. Both internal changes (hello, bytecode; hello, JIT), language level features (hi there, namespaces), and runtime level features (oh hai, countless built in classes and functions).Moreover, unlike many framework that shone brightly and burned out quickly (Rails?), PHP captured the essence of the environment: HTTP is stateless, and URLs aren't uniformly routable from either end, and well-formed HTML/XML/JSON is just a subset of tag soup.Worse is better."	dexen	12.733053	-6.630292	comment	12.0	114.0	1554046951	10.320262
15954042	How do Ruby and Python profilers wor	How do Ruby and Python profilers work?	ingve	12.510741	-7.023373	story	12.0	163.0	1513622379	12.356394
17220252	Ruby 2.6.0-preview2 released with JI	Ruby 2.6.0-preview2 released with JIT	15DCFA8F	12.629514	-7.0322433	story	12.0	306.0	1528042938	12.383311
17220967	Sinatra + Sequel is already very com	Sinatra + Sequel is already very competitive in web performance with Go + Gin[1]. It's the Rails convenience stuff which slows things down massively. MJIT could probably bring Rails in line with Sinatra though.Between Ruby 1.8 and 2.5, performance has improved around 13x in tight loops[2]. The Rails performance issue has been massively overblown since 1.9 was released.Ruby 1.8 was a tree walking interpreter, so the move to a bytecode VM in 1.9 was a huge leap in performance. Twitter bailed to the JVM before moving to 1.9. A lot of those 10-100x performance differences to the JVM are gone thanks to the bytecode VM and generational GC.Bytecode VMs all have the same fundamental problem of instruction dispatch overhead, they're basically executing different C functions depending on input.Doing	jashmatthews	12.65534	-7.0174212	comment	12.0	63.0	1528050820	12.36696
17279201	Ask HN: Django or Rails?	Ask HN: Django or Rails?	cryptography	12.7813225	-6.5325685	story	12.0	10.0	1528652730	10.03058
17319689	Crystal 0.25	Crystal 0.25	galfarragem	12.638283	-7.254199	story	12.0	206.0	1529070194	-11.073598
17424639	Crystal 0.25.1 released	Crystal 0.25.1 released	mikece	12.6532755	-7.239125	story	12.0	148.0	1530281893	10.449339
17612667	Elixir v1.7 released	Elixir v1.7 released	josevalim	12.690386	-7.458274	story	12.0	395.0	1532551591	12.941786
17810591	Beta release of PHP 7.2 in the Googl	Beta release of PHP 7.2 in the Google App Engine standard environment	sl0wik	12.774093	-6.6474047	story	12.0	185.0	1534866114	10.251831
21034424	Dark crystals: the brutal reality be	Dark crystals: the brutal reality behind a booming wellness craze	blue_devil	12.643686	-7.2486067	story	12.0	55.0	1569059985	-11.172682
21230419	How to write fast code in Ruby on Ra	How to write fast code in Ruby on Rails	feross	12.6396055	-6.9945393	story	12.0	194.0	1570850227	12.350514
39259627	Is anybody using Rails / Ruby in pro	Is anybody using Rails / Ruby in production these days? For new projects, not 7+ year old companies. (Earnest / honest question.)If so, why? Do you have trouble hiring?If not, what did you switch to and why?	echelon	12.7439995	-6.9557385	comment	12.0	58.0	1707129760	12.349487
17891469	"""Sinatra is Ruby with Rails in mind."	"""Sinatra is Ruby with Rails in mind. You will find yourself using more of Rails in your Sinatra application over time and ask yourself why you're not just using Rails.""This is an important point. If you've ever developed a non-trivial application using Sinatra, Express or any other ""micro"" or ""non-opinionated"" framework, you'll have hit this wall quickly.To riff on Greenspun's Tenth Rule, ""Any sufficiently complicated $MICRO-FRAMEWORK application contains an ad hoc informally-specified bug-ridden slow implementation of half of Ruby on Rails."""	ethagnawl	12.73129	-6.9188104	comment	12.0	86.0	1535803987	12.339133
18004274	Mojolicious 8.0 released: Perl real-	Mojolicious 8.0 released: Perl real-time web framework	kraih	12.334909	-6.9149127	story	12.0	123.0	1537175450	13.152112
18413776	Ask HN: PHP 7 for new projects – you	Ask HN: PHP 7 for new projects – your experience and recommendations	interfacesketch	12.767724	-6.633339	story	12.0	13.0	1541763722	10.304576
18482539	The Flask Mega-Tutorial (2012)	The Flask Mega-Tutorial (2012)	Tomte	12.714504	-6.572714	story	12.0	147.0	1542575249	10.0307255
29813704	Frankly, I always find these stories	Frankly, I always find these stories miraculous. Even though I'm a full-time web developer, I find it daunting merely to design a landing page with user sign-up, let alone a feature worth paying for and an account subscription flow. There's just so much to do. It seems like years of work.I know there's things like SaaS pegasus, but that forces Django. SaaS Pegasus and Bullet Train are also very expensive with no real options for trial. I wish tools like that - automating the basics of an ecommerce business - were more developed and available, preferably open source in the long run. I feel like it's the future we're slowly moving towards but we aren't there yet. We have widely-used open source frameworks for technical foundations - rails, django, etc - but no higher-abstraction equivalent t	aerovistae	12.719538	-6.4554834	comment	12.0	78.0	1641410953	10.258707
30626930	I would welcome this making its way 	I would welcome this making its way into ECMAScript not because I like TypeScript, but because it's a drag to see TypeScript enthusiasts litter the JavaScript ecosystem with all of the piles of bolt-on TypeScript baggage.Forking projects just to add type definitions, or else mega repos like DefinitelyTyped madness; bringing all of the terrible complexity that we love to hate in Webpack/ESBuild/Rollup/etc back over to Node.js with server-side tsc; drive-by PRs to all my open source projects from inspired people trying to add types and me having to disappoint...I would gladly do without all of that.  To me, I see the TypeScript tradeoff as coming with only marginal upside, in return for a large downside as described above.  But, others passionately disagree and see a huge upside, and that's 	montroser	12.376544	-6.735008	comment	12.0	105.0	1646920686	-10.457133
12849079	Keep Ruby Weird Again [video]	Keep Ruby Weird Again [video]	asolove	12.644462	-7.038087	story	12.0	197.0	1478026885	12.397158
13217390	It is amazing how much react resembl	It is amazing how much react resembles php and classic asp from 15 years ago. I guess that's what happens when you don't hire anyone over 30.	flukus	12.752618	-6.586616	comment	12.0	78.0	1482206857	10.336536
13446633	I'm diving into Elixir now to compar	I'm diving into Elixir now to compare it with Golang for a new web app backend I'm working on. I really enjoy the functional paradigm but from what I've seen deployment can be a bit annoying. Whereas with Go you can compile and drop it easily into production.Does anyone have experience with this?	nerdywordy	12.580203	-7.500073	comment	12.0	61.0	1484943171	12.900533
13510376	Ruby terminal apps toolkit	Ruby terminal apps toolkit	pmurach	12.584197	-7.026583	story	12.0	285.0	1485646743	12.329603
27617196	Laravel Transporter	Laravel Transporter	mooreds	12.815788	-6.6396246	story	12.0	41.0	1624541958	10.366091
27729331	Blender and the Rabbids	Blender and the Rabbids	Tomte	12.549521	-7.04214	story	12.0	333.0	1625403895	-7.1190023
27850693	Ask HN: What is the most *fun* web d	Ask HN: What is the most *fun* web development stack?	caseyf	12.729196	-6.9107633	story	12.0	11.0	1626386914	12.3426695
12242845	RDL: a lightweight system for adding	RDL: a lightweight system for adding contracts to Ruby	muhic	12.544141	-7.0687947	story	12.0	81.0	1470591979	12.371103
12467227	Does anyone have experience running 	Does anyone have experience running Flask at scale? I used it once, for a small internal reporting service, and was shocked to find that it was designed to process only a single request at a time, per process. Is this a problem in the real world, or do decent caching rules and query design render it a non issue?What do flask apps do when they want a live connection to the client, or need to serve a heavy (slow) request? Communicate with a Node websocket server over a queue, and share a database?I don't mean to disparage Flask. Their goal is to make it simple to stand up site with minimal boilerplate or bloat, and they succeeded at that.	happyslobro	12.701621	-6.5366817	comment	12.0	48.0	1473471465	9.841853
35281814	So we’re back to the old pre SPA web	So we’re back to the old pre SPA web and even have a term for it: MPAIf I build an MPA, why should I choose Astro if I can choose Rails? That’s a serious question to the HN community, not a rhetorical one - would very much love to learn if there’s something new here.	earthnail	12.783403	-6.491017	comment	12.0	52.0	1679608428	12.429192
28595795	Man, I love Ruby. I think it is much	"Man, I love Ruby. I think it is much more elegant than Python and I really really wish Ruby would have taken the world instead of Python. That said, it's often the case where I want to do something where there's just no Ruby library for it (or at least not a maintained one) and there's a well known library for it in Python. Note: I do low level things, I don't do anything related to web or Rails.Also, sometimes I start writing scripts for simple things, then they grow and at some point it's interesting to share them to my teammates, and they all immediately dismiss it since it's in Ruby. For that reason, I started doing all my work-related scripting in Python. But oh boy, it's always with that sad feeling of ""I wish I was doing this in Ruby"". Sometimes I think I should just not have learne"	dyingkneepad	12.510163	-7.0228	comment	12.0	56.0	1632156306	12.378071
28621459	Almost every time I see a discussion	"Almost every time I see a discussion about LiveView there’s someone complaining about the issue of latency/lag, and how it makes LiveView unsuitable for real-world applications.From what I understand, the issue is that every event that happens on the client (say, a click) has to make a roundtrip to the server before the UI can be updated. If latency is high, this can make for a poor user experience, the argument goes.As the creator of LiveView, what’s your take on this? Is it a real and difficult-to-solve issue, or do people just not see ""the LiveView way"" of solving it?I think LiveView looks amazing, but this possible issue (in addition to  chronic lack of time) has made me a little unsure of whether it’s ready to use for a real project.Thanks for creating Phoenix, btw!"	sgrytoyr	12.904504	-6.764219	comment	12.0	74.0	1632343121	12.717048
22784454	Having a hard time choosing between 	Having a hard time choosing between Svelte and Elm. For a lone in house dev, any recommendations?	xupybd	13.004359	-7.6727934	comment	12.0	98.0	1586074741	-12.737797
23197386	I truly do not understand why so man	"I truly do not understand why so many jumped from Coffeescript.  I still use it and still believe I can be more concise and expressive in Coffeescript.  Typescript and ES2015 picked up a lot of wonderful things, but I find myself writing a lot less boilerplate in Coffeescript.  I will continue to ""do me"".  I dev in Coffeescript and publish in JS.  The project even made it a focus to transpile to readable/friendly JS.  No biggie.I would not publish things like this, though :)console.log [ i if i % 3 and i % 5, 'fizz' unless i % 3, 'buzz' unless i % 5 ].join '' for i in [ 1 .. 100 ]Separately, I bought overpriced raspberry pi's instead of cheaper alternatives because I knew the community was a strong source of support.  Modern JS has a much larger community than Coffeescript 2."	blitmap	12.419118	-6.597397	comment	12.0	91.0	1589576704	-10.527836
33076092	Codebase as Database: Turning the ID	Codebase as Database: Turning the IDE Inside Out with Datalog (2020)	rohitpaulk	13.092907	-6.911933	story	12.0	258.0	1664849821	5.9175596
33398253	Marten: a Crystal web framework	Marten: a Crystal web framework	ellmetha	12.602503	-7.235254	story	12.0	206.0	1667161350	-11.226647
33907583	As someone who has written in past a	As someone who has written in past a lot of PHP and Python, I find it interesting that PHP devs can do a lot of breaking changes, and don't get a huge amount of flak for it.Python 2 -> 3 change really was painful for Python community, but PHP does these almost fundamental breaking changes so often, that maybe people just get used to it? I haven't really followed Python past version 2, but I think they are less likely to ever do such amount of breaking changes.There must be a lot of unmaintained PHP codebases that will break if PHP is updated by hosting provider etc. Someone must be pulling a lot of hairs because of this.Edit: Those dogpiling there, I rest my case with josefresco's comment:https://news.ycombinator.com/item?id=33907628It's painful. Dropping dynamic properties? That will be a	Ciantic	12.608789	-6.6838183	comment	12.0	50.0	1670505664	10.249696
33986536	This is incredibly impressive but I 	This is incredibly impressive but I also simultaneously find it kind of depressing. In my not so humble opinion, typescript is already way too complicated and getting worse thanks to its velocity. A better approach would be to kill typescript's velocity by identifying a stable subset of the language that provides the vast majority of its benefits and optimize the heck out of a parser for that smaller language. This approach would be both easier and more sustainable since it would cap the language complexity making it easier to maintain and/or write alternative implementations.	thefaux	12.3689785	-6.795988	comment	12.0	88.0	1671038055	11.734724
26514456	Differential Datalog	Differential Datalog	maximilianroos	13.173447	-7.0451875	story	12.0	231.0	1616167799	-7.266112
26629718	How to Build a Web App with and With	How to Build a Web App with and Without Rails Libraries	chrisseaton	12.746721	-6.8413763	story	12.0	185.0	1617061492	12.288606
26773130	Show HN: An encoding of the UK's sel	Show HN: An encoding of the UK's self-isolation rules in Prolog	jamespwilliams	13.135364	-7.2927175	story	12.0	108.0	1618173074	12.668029
26872770	Prolog for Beginners	Prolog for Beginners	YeGoblynQueenne	13.142761	-7.2968874	story	12.0	99.0	1618913756	-12.505358
26959684	Since these insert events are being 	Since these insert events are being buffered, what happens if the process dies?  Are all of those inserts lost?I feel like Erlang/Elixir is designed to handle cases like this robustly, but it's not clear to me how this code avoids losing data when a process crashes, potentially up to 5s worth of updates!	jimbokun	12.517969	-7.4867234	comment	12.0	50.0	1619548473	12.887917
26958772	Elixir GenServer Explained	Elixir GenServer Explained	cheeseblubber	12.664838	-7.458955	story	12.0	272.0	1619543743	12.939045
27377264	A while ago there was a thread askin	A while ago there was a thread asking for experiences for people who regret using Elixir. One of the most popular answers was that Erlang is now kind of obsolete because all the things it offers are now available with technologies like Kubernetes and other things.The thing is however, with Erlang you get all of that in a pretty easy to learn language and it will scale to practically anything. Erlang is also an incredibly productive language. You can get a whole lot of things done in a short amount of time.	rapsey	12.632916	-7.4821253	comment	12.0	87.0	1622694875	12.937952
37996792	My Love Letter to Rails (and Ruby) –	My Love Letter to Rails (and Ruby) – Or, Why RoR Isn't Dead Yet	xeena	12.70669	-6.98097	story	12.0	80.0	1698140921	12.383093
38145194	How to Do a TypeScript Conversion	How to Do a TypeScript Conversion	chriskrycho	12.366766	-6.8229995	story	12.0	103.0	1699132523	-10.447298
15036589	Serious question, though I know it w	Serious question, though I know it will sound negative... I really don't like Rails and don't like Ruby or VB.NET, either (syntactically), which means Elixir is off-putting for me, at least in how it's been marketed. Do you know of anyone like me who has come to Elixir and liked it?Note: I like Clojure, F#, and other functional languages, so that's not a hurdle.	christophilus	12.719545	-7.3516774	comment	12.0	65.0	1502976810	12.815978
15124112	Base Rails 5.1 application with pre-	Base Rails 5.1 application with pre-configured tools and features	brunofacca	12.75008	-6.9261665	story	12.0	75.0	1504013549	12.377781
15490917	Show HN: Octotrack – automatic depen	Show HN: Octotrack – automatic dependency and security manager for Ruby apps	alvesjtiago	12.401345	-6.8449116	story	12.0	46.0	1508248763	-9.352562
15604869	Would you use this instead of Flask?	Would you use this instead of Flask? Why/why not?I'm planning on learning Flask, but would love any thoughts on this from experienced users.	ndanmand	12.742953	-6.562406	comment	12.0	79.0	1509565927	10.034622
23823210	Building Elixir from source segfault	Building Elixir from source segfaults on macOS on Apple Silicon while compiling	shadykiller	12.668232	-7.441538	story	13.0	113.0	1594661151	12.945584
23889696	How Ruby on Rails Could Be Much Bett	How Ruby on Rails Could Be Much Better (2008)	bluedino	12.733364	-6.9459944	story	13.0	81.0	1595169973	12.358295
24172336	The BEAM Has Spoiled Me	The BEAM Has Spoiled Me	clessg	12.437822	-7.347132	story	13.0	164.0	1597525020	7.112222
20200372	Serious question: why voluntarily ch	Serious question: why voluntarily choose PHP for a greenfield project in 2019? Less terrible is not a huge selling feature when most of the good stuff in Laravel is lifted directly from Rails but with none of the developer happiness.The only argument I can think of is that you already have a team of PHP experts and they don't want to transition to Ruby, Node or Django.	peteforde	12.790661	-6.65239	comment	13.0	66.0	1560752479	10.333988
13837109	Porting Ruby to Crystal	Porting Ruby to Crystal	schiller-silvio	12.560548	-7.1687174	story	13.0	108.0	1489133535	-11.16645
13840617	Poll: Rubyists, what server-side lan	Poll: Rubyists, what server-side language should I learn in 2017?	itsderek23	12.58988	-7.019327	story	13.0	11.0	1489169039	12.367413
14107273	As someone who can code in C/C++ and	As someone who can code in C/C++ and was recently looking for work, I don't think someone should learn low level programming for a career. What I would consider simple PHP jobs were easily paying more than C++ jobs.If you look at everyone reinventing the wheel in electron and not caring about performance I don't think the situation is going to get better anytime soon.	CliffyA	12.605104	-6.6668534	comment	13.0	66.0	1492094076	10.308278
14471358	TypeScript support in Electron	TypeScript support in Electron	Garbage	12.382876	-6.727861	story	13.0	243.0	1496422336	-10.486459
30947793	Ruby 3.2 preview 1 with support for 	Ruby 3.2 preview 1 with support for WASM compilation	pvsukale3	12.614295	-7.0057874	story	13.0	364.0	1649353080	12.369738
31326123	Deno.js in production	Deno.js in production	sdesalas	12.481933	-6.44318	story	13.0	99.0	1652184756	-10.952636
31557147	Flask Mega-Tutorial author here. Thi	Flask Mega-Tutorial author here. This was a surprise. :)Happy to see people continue to find my tutorial useful and relevant. If you have any questions, I'll be happy to answer.	miguelgrinberg	12.699982	-6.6002254	comment	13.0	55.0	1653903471	10.031172
25776923	Author here!The article was publishe	Author here!The article was published earlier this week and I have a quick addendum: regarding Erlang/Elixir, my goal has always been to bring new developers to the platform. After all, Erlang developers already have the most important part of Elixir, which is the Erlang runtime!There are also key people in both communities working hard to make sure the tooling is consistent across all languages. A lot of this effort happens under the Erlang Ecosystem Foundation (https://erlef.org/) too.All to say, regardless if you pick Erlang or Elixir (or Gleam, LFE, etc.), I hope you will fall in love with the platform as much as I did 10 years ago!	josevalim	12.632526	-7.4725375	comment	13.0	58.0	1610635852	12.939372
26242450	I was wondering if anyone knows of a	I was wondering if anyone knows of a resource in the same vein as [1] or [2] but to implement a prolog interpreter instead of lisp.1: https://github.com/kanaka/mal2: http://www.buildyourownlisp.com/	emmanueloga_	13.143165	-7.2981944	comment	13.0	46.0	1614112043	-12.484896
35646895	What companies are still using Perl 	What companies are still using Perl on the backend?I know FastMail does. IMDB was in Perl before Amazon acquisition, and was told was rewritten in java over several years. Any other interesting mentions?	winrid	12.326291	-7.0324006	comment	13.0	45.0	1682027510	13.180437
35826122	Whatever you do, don't autoload Rail	Whatever you do, don't autoload Rails `lib/`	todsacerdoti	12.747559	-6.931895	story	13.0	51.0	1683269927	12.340009
35897616	This 100%. It's actually a bit of a 	This 100%. It's actually a bit of a red flag to me these days if a developer turns up their nose at PHP. The language has matured a lot and building stuff with it is simple, cheap, straightforward and fast. If someone's still hating on PHP in 2023 it makes me wonder if they've been focused on more exotic technology because they were looking to pad their resume with more expensive skills, build science projects for their own amusement vs. what the business needed, etc. etc. Red flag. I've had these guys like this on my team and guess what, they built fancy over-engineered solutions to problems that no one had and then job hopped and left it for us to deal with. I can't speak for anyone else but I go into work every day for one purpose, and it's to ship shit which users use. I don't have roo	safety1st	12.764627	-6.6317134	comment	13.0	120.0	1683780174	10.339671
36121876	Dynamic Forms with LiveView Streams	Dynamic Forms with LiveView Streams	unripe_syntax	12.897092	-6.80056	story	13.0	129.0	1685429528	12.742195
36274813	Gren – an Elm fork	Gren – an Elm fork	jgilias	13.010879	-7.6908317	story	13.0	197.0	1686429281	-12.745472
36310419	It feels to me like Shopify is singl	It feels to me like Shopify is single-handedly keeping Ruby alive. A little bit like Jane Street and O'Caml.	noelwelsh	12.743179	-6.962571	comment	13.0	90.0	1686665246	12.3663645
36316502	TypeCell, open source TypeScript not	TypeCell, open source TypeScript notebooks live programming environment	throwaway888abc	12.352301	-6.8073883	story	13.0	120.0	1686687766	-10.49923
28872769	Crystal 1.2.0	Crystal 1.2.0	weatherlight	12.646441	-7.278701	story	13.0	185.0	1634261093	10.456996
29198346	A guide to organizing settings in Dj	A guide to organizing settings in Django	senko	12.83375	-6.5284257	story	13.0	98.0	1636717694	10.102617
29313643	So the web dev madness has come full	So the web dev madness has come full circle - the react people just built rails in react. In the mean time I just keep using rails...	jacobsenscott	12.817319	-6.633555	comment	13.0	53.0	1637631007	12.298152
29344704	Everyone laughing at PHP hasn't trie	"Everyone laughing at PHP hasn't tried it for years, I'd bet.
It started clumsy, true, but it became a solid and quite elegant way of doing things.And by things I don't mean just web development.The current limitations I see in PHP is that there is not an official multi-core coroutines solution."	pachico	12.71764	-6.6498866	comment	13.0	135.0	1637872054	10.242937
29472349	Django has allowed me to enjoy some 	Django has allowed me to enjoy some side entrepreneurship. I have released three products as a solo part time dev that I would never have been able to do in a reasonable time using Java/Spring (my strongest stack). My first project went nowhere, but the second generated 1k+ a month and sold for 50k, and the third one is following a similar trajectory.My advice - keep it simple- function based views- centralize access to the ORM (avoid fat models, use a service layer)- responsive bootstrap template with crispy forms- minimal js- 12 factor type setup - django-environ or similar- be aware of n+1 select problem (I use django debug toolbar but looking into django-zen-queries)- plop it on heroku, AWS lightsail, Digital Ocean or if containerizing use AWS Fargate- avoid celery unless you are at a 	rlawson	12.810065	-6.4835043	comment	13.0	87.0	1638884683	10.030329
29579918	I have spent a lot of time with node	I have spent a lot of time with node(express), Java(Spring) and rails. I see a lot of complaints about node, but node with typescript has been a joy to work with. It is lightweight and has a type system. I know where every piece of code is coming from, there is no magic involved. I either wrote the function in that file, I am importing it, or it is a method on a js object. I only have know one language for both front end and back end. A better standard library would be nice.Rails is nice in terms of getting the project set up, not bikeshedding about the tooling, and working with the db. But the actual coding has been painful for me. I really dislike working with a non typed language. I dislike optional parans in function calls and optional braces for hashes. I dislike all the magic of rail	confidantlake	12.472385	-6.862844	comment	13.0	92.0	1639671905	12.409169
34224456	Solving a Dungeons and Dragons riddl	Solving a Dungeons and Dragons riddle using Prolog	_xgw	13.149163	-7.301905	story	13.0	127.0	1672697793	-12.49628
34324856	I'm feeling old.I went back to Flask	I'm feeling old.I went back to Flask recently and keep finding everything I know is deprecated, or not best practice any more.Then I read every week that some new framework is out that is better.I'm tired of it. I end up spending more time learning new things than I do building new things! Maybe I should get off hn for a while	jimnotgym	12.701811	-6.5163455	comment	13.0	44.0	1673358990	10.064739
34365208	I've been working with JavaScript fo	I've been working with JavaScript for 20 years. And 5 years with TypeScript. And, well. I still am not convinced.Too much overhead for me. I really dislike typing obvious things and boilerplate. Probably my fluency with JS is to blame. I don't need to see types and autocompletion. If I really need to — I just go to the source and inspect the source code, that is how I familiarise myself with the interface. I also think this makes one a better developer.	bestest	12.339186	-6.784815	comment	13.0	49.0	1673597924	-10.473744
34557116	Ergo: Erlang/OTP patterns implemente	Ergo: Erlang/OTP patterns implemented in Golang	rapnie	12.5328045	-7.5017314	story	13.0	125.0	1674909802	12.877187
34929159	Phoenix 1.7.0 Released	Phoenix 1.7.0 Released	out_of_protocol	12.812726	-7.063203	story	13.0	139.0	1677268210	-12.674245
39507758	Disillusioned with Deno	Disillusioned with Deno	thunderbong	12.527307	-6.452578	story	13.0	86.0	1708922559	-11.033426
36637506	There is a good reason for not doing	There is a good reason for not doing this. Typescript would become some kind of runtime on top of JavaScript. A new language that compiles to JavaScript. Currently TS is only JavaScript with type annotations.There are many languages that compile to JavaScript. Pick one of them and use it!And I have the feeling, that people who want runtime typed Typescript would rather like to write Java/OOP style code instead of JavaScript. But JavaScript is a dynamically typed language, and that's also nice. Be happy with what you have!	andix	12.351148	-6.8086247	comment	13.0	93.0	1688759914	-10.410459
36808233	Will a prompt that enables GPT-4 to 	Will a prompt that enables GPT-4 to solve easy Sudoku puzzles be found?	kilobit	13.450436	-7.4086337	story	13.0	37.0	1689896063	15.077721
36966681	Ask HN: Rapid Development API-Only O	Ask HN: Rapid Development API-Only One Person Stack – Seeking Performant Tech	danielb74	12.723676	-6.5805163	story	13.0	6.0	1690947365	12.244604
37172079	Is that really suprising? Typescript	Is that really suprising? Typescript is yet another language that has, kicking and screaming, picked up most of the ML featureset. I'd expect it to be, well, fine; the lack of real pattern matching is a pain, so it's going to be inferior to OCaml, but fine, no different from using C# or Swift or Dart or Kotlin or something of that ilk.	lmm	12.347025	-6.9408445	comment	13.0	137.0	1692340967	-10.514209
24443128	Scaling Erlang Developer Experience 	Scaling Erlang Developer Experience at WhatsApp [pdf]	anuragsoni	12.667488	-7.3935075	story	13.0	308.0	1599834052	-5.9608517
19124953	Ruby in Twenty Minutes (2006)	Ruby in Twenty Minutes (2006)	mooreds	12.627782	-7.044046	story	13.0	154.0	1549750040	12.38119
19918262	As far as I'm concerned the bridges 	"As far as I'm concerned the bridges have burned a long time ago and I definitely can't see myself giving PHP a second chance. That being said, if I'm wrong and PHP has really managed to become a decent language (or at least something that's not completely insane) its defenders should focus on actually showing what modern PHP code looks like.Is performance that much of a big deal for most people? In a world where Ruby on Rail exists I find that hard to believe. Server are cheaper and vastly more powerful now than in PHP's infancy, I'm sure that for the vast majority of use cases PHP's performance (whatever it is) is good enough.The infamous ""Fractal of Bad Design"" wasn't about that, it was about the ridiculously inconsistent and error-prone API, the insane defaults, the counter-intuitive be"	simias	12.77209	-6.644662	comment	13.0	107.0	1557918858	10.314166
19949554	On logic in a Rails app, revisited 6	On logic in a Rails app, revisited 6 years later	alisnic	12.8135	-6.8546453	story	13.0	58.0	1558211227	12.325657
16001204	A criticism of Ruby (2013)	A criticism of Ruby (2013)	tosh	12.592136	-7.05686	story	13.0	69.0	1514147782	12.387696
16170562	Elixir v1.6 released: code formatter	Elixir v1.6 released: code formatter, dynamic supervisors, and more	josevalim	12.680542	-7.452065	story	13.0	341.0	1516214849	12.930228
16842442	The Crystal Programming Language	The Crystal Programming Language	type0	12.533695	-7.2195325	story	13.0	143.0	1523796891	-11.181974
17103569	Shoes – An easy little GUI toolkit f	Shoes – An easy little GUI toolkit for Ruby	jxub	12.58899	-7.044093	story	13.0	114.0	1526666633	-0.9239458
17183241	Deno, a secure TypeScript runtime us	Deno, a secure TypeScript runtime using V8 and Go	remyrylan	12.473176	-6.5006113	story	13.0	157.0	1527631505	-10.85002
17364329	Elchemy – write type safe Elixir usi	Elchemy – write type safe Elixir using Elm-like syntax	methyl	12.651714	-7.469269	story	13.0	142.0	1529582838	12.912414
17663030	Django 2.1 released	Django 2.1 released	parvenu74	12.824101	-6.569967	story	13.0	307.0	1533135387	10.115603
21682272	I have been using FastAPI for the la	I have been using FastAPI for the last two months (which also is an ASGI server and makes full use of annotations and type hints with mypy) and the experience has been incredible. (https://fastapi.tiangolo.com/)If Django can now also support annotations and async code I dream of an scenario where apis can be built using this two elements.Does anybody know a good resource to learn/catch up with this release?	Ramiuz	12.523158	-6.597745	comment	13.0	56.0	1575294854	-2.3532271
39172251	It's painful to see method_missing c	"It's painful to see method_missing called out as a first class solution in the first creature https://www.exceptionalcreatures.com/bestiary/NoMethodError.... . ""Practical Ruby"" has three chapters dedicated to method_missing. ""define_method"" is more common these days and also painful to see.Ruby gets a lot of criticism for embracing magic and indirection (""Ruby, the bad parts of Perl""). It has some good parts (no function colors, for example), but the ecosystem is the biggest problem by promoting magic. method_missing is not a good part of Ruby, it's a very bad part that you should only use if you know it's bad _and_ you know you still have to use it. I wish all tutorials would say this. ""You can do this with Ruby, but don't, because your coworkers debugging an outage for an hour will hate "	stevebmark	12.490428	-7.0980153	comment	13.0	70.0	1706497346	12.342474
39309093	Why Elixir Is the Best Language for 	Why Elixir Is the Best Language for Building a Bootstrapped, B2B SaaS in 2024	s3cur3	12.680516	-7.4642196	story	13.0	143.0	1707433965	12.935536
18188003	The Art of Prolog, Second Edition	The Art of Prolog, Second Edition	agumonkey	13.149555	-7.3016167	story	13.0	158.0	1539199164	-12.486576
18308576	Two years of Elixir at The Outline	Two years of Elixir at The Outline	davydog187	12.707905	-7.463093	story	13.0	236.0	1540556816	12.963739
18370498	Crystal 0.27.0 released	Crystal 0.27.0 released	ksec	12.653355	-7.267946	story	13.0	173.0	1541257248	10.453971
18651166	> we can no longer use f5-debugSums 	"> we can no longer use f5-debugSums up what is still one of the major issue-slash-weirdness of the php dev world. For all the frameworks and language advance, despite xdebug existing for over 15 years and working great in pretty much any editor or IDE, most PHP dev including the ""experienced"" ones have no idea how to use a debugger, or if they do they don't apply it to PHP.Can you imagine debugging your C/C++/Rust/Go/... programs by adding printf everywhere and re-run the whole thing ? Again and again to find which variable fail; while a simple step by step with watches would solve it in a single run, in a tenth of the time, without needing to crappify the source ? That's what 99% of PHP dev still do.Even the javascript world have adopted proper debugger right in the browser. But in PHP it"	nolok	12.633605	-6.607086	comment	13.0	59.0	1544476126	10.311053
18873908	I'm not sure what language would be 	"I'm not sure what language would be more beautiful than ruby, to be honest, and it's not even my favorite language to use.Let's do a mini code challenge in the thread -- 
implement fizzbuzz in the most beautiful way you can, in the most beautiful language you know:"	empath75	12.564234	-7.0557437	comment	13.0	60.0	1547129541	12.386905
18918038	Migrate Jest to TypeScript	Migrate Jest to TypeScript	whatever_dude	12.455313	-6.4434867	story	13.0	261.0	1547609666	-10.426604
30321383	Ask HN: App ideas to learn Phoenix /	Ask HN: App ideas to learn Phoenix / Elixir	jamil7	12.781313	-7.2582316	story	13.0	26.0	1644756639	12.828248
30697055	My Favorite Language Has Changed to 	My Favorite Language Has Changed to PHP	withinboredom	12.755287	-6.64676	story	13.0	39.0	1647425642	10.328327
13438172	If you had to make a comparison, wha	If you had to make a comparison, what would be the pros and cons of using elixir vs node.js?	aecorredor	12.689154	-7.3630667	comment	13.0	64.0	1484850780	12.876437
13446521	Languages on BEAM, the Erlang virtua	Languages on BEAM, the Erlang virtual machine	nkurz	12.5248575	-7.484632	story	13.0	225.0	1484942107	12.895656
27865776	Fullstaq Ruby: Ruby, optimized for p	Fullstaq Ruby: Ruby, optimized for production	thunderbong	12.676363	-6.9849205	story	13.0	232.0	1626530018	12.35211
12205140	As a Rails dude...is there any reaso	"As a Rails dude...is there any reason for me to learn Django at all? Everything I've heard about it is that it provides a lot of sane defaults (like Rails) but has much less ""magic"" than Rails is typically thought to have.And if the answer to my question is yes, what books/tutorials/screencasts/courses to people recommend to get started with?"	dchuk	12.796888	-6.6698217	comment	13.0	61.0	1470079319	10.245695
35185191	Without Angular, we may very well no	"Without Angular, we may very well not have TypeScript today.The top thing listed in this release (TypeScript doesn't follow semver, btw) is about Decorators.  I find the whole story about Angular's role in TypeScript early days to be very fascinating because I don't hear people talk about it anymore (just search ""AtScript TypeScript"" if you weren't around at the time).  It was the Angular team that forced Decorators to be added when it was still stage 0.  In exchange, they forfeited continued work on their would-be competitor to TypeScript.Even without the Decorators thing, Angular was intensely popular and it made a big impact how they went ""all in"" on TypeScript, pushing a lot of early adoption.  I know lots of people that first started with TypeScript because of work on an Angular proje"	dimitropoulos	12.481208	-6.687425	comment	13.0	107.0	1678987798	-10.466278
28188255	Rails 6 with Webpacker 6, Tailwind 2	Rails 6 with Webpacker 6, Tailwind 2 with JIT, Postcss 8 and some default setup	nauman	12.654561	-6.470861	story	13.0	169.0	1629030822	12.291345
28622712	What is the best typed language for 	What is the best typed language for back end web development?	hackater	12.399618	-6.7123804	story	13.0	7.0	1632349028	-10.499584
22517662	Laravel 7	Laravel 7	tpetry	12.8220825	-6.641723	story	13.0	122.0	1583669960	10.374389
22804079	The Power of Prolog	The Power of Prolog	fogus	13.151198	-7.3056602	story	13.0	381.0	1586273231	12.702174
33214075	Show HN: ESInfer – Make JavaScript T	Show HN: ESInfer – Make JavaScript Type-Safe	jiangmy	12.3718815	-6.8115797	story	13.0	83.0	1665835382	-10.376907
33347274	I am shocked that PHP of all things 	I am shocked that PHP of all things has faster speed than python.	humanistbot	12.614323	-6.6984067	comment	13.0	67.0	1666807613	10.241509
33358898	might as well ask this here: does an	might as well ask this here: does anyone have any recommendations for minimalist PHP frameworks, in 2022? I have a hand-rolled PHP site that's been getting quite a bit of traffic and it needs quite a bit of internal reworking to make things more performant and such. I'm looking at evaluating Fat-Free Framework as it seems to be more or less what I'm looking for, but I haven't seen any recent opinions anywhere about it (aside from top-ten lists, which is all you can find when you search google for such opinions).all I need is routing, caching, possibly some light database abstraction, and possibly some light templating stuff (but PHP is a templating language, and that's how I'm currently using it). I don't want MVC or any of that, just the absolute basics.	adamrezich	12.758052	-6.5892406	comment	13.0	56.0	1666884048	10.298117
33894688	Elixir – HUGE Release Coming Soon	Elixir – HUGE Release Coming Soon	gregors	12.690916	-7.457594	story	13.0	135.0	1670423380	12.933389
34110178	News for Ruby 3.2.0	News for Ruby 3.2.0	type0	12.635325	-7.0249543	story	13.0	230.0	1671826823	12.385075
26702222	Elixir and Phoenix after two years	Elixir and Phoenix after two years	bfm	12.72975	-7.399226	story	13.0	264.0	1617645280	12.849515
27103033	Teeing, a hidden gem in the Java API	Teeing, a hidden gem in the Java API	sidcool	12.50904	-7.033447	story	13.0	242.0	1620624628	9.182712
27206656	Elixir 1.12	Elixir 1.12	princemaple	12.68189	-7.4618583	story	13.0	375.0	1621419713	12.941049
38052864	Elixir and Phoenix can do it all	Elixir and Phoenix can do it all	mike1o1	12.742628	-7.3432345	story	13.0	187.0	1698523036	12.863869
38286565	I was initially surprised by the pus	"I was initially surprised by the pushback this article is getting.Then I remembered that this is data-oriented design advice, and I imagine most people on this forum (myself included most of the time) are writing line-of-business web apps where this advice seems like nonsense. I had already internalised the context, and wasn't planning to go apply this to my Laravel backend code.A heuristic: if in your usual daily work you don't need to think about the instruction cache, then you should probably ignore this advice.If you haven't yet and want to get a taste of when this advice matters, go find Mike Acton's ""Typical C++ Bullshit"" and decipher the cryptic notes. This article is like an understandable distillation of that.Despite what Casey Muratori is trying to argue (and I'm largely sympathe"	crabmusket	12.819267	-6.6808147	comment	13.0	76.0	1700118761	10.359586
38486849	"""Useless Ruby sugar"": Endless (one-l"	"""Useless Ruby sugar"": Endless (one-line) methods"	todsacerdoti	12.538879	-7.073807	story	13.0	104.0	1701439910	12.370796
14833472	I question starting people on Ruby f	I question starting people on Ruby for web development. It was big and popular, but I feel that the popularity is fading (has faded?) for new projects, and there's a lot of magic in that language, too.Anyone starting web development now would do well to stick with Javascript. No, it's not the nicest language, but there's no avoided it. And you can always use that on the backend if you have to - and if you need to spend time learning something for the backend part you'd be better served learning about relational databases than Ruby.Anyway, between JS, HTML, and CSS, you're going to have a lot to learn. At least with CSS these days you can pretty much start with flexbox for layout, and maybe if you're lucky you'll never have to learn all the old horrible methods of getting things to look rea	vosper	12.670473	-6.9046354	comment	13.0	68.0	1500832615	12.379184
15439911	How We Built the ARKit Sudoku Solver	How We Built the ARKit Sudoku Solver	anielsen	13.451489	-7.4096303	story	13.0	151.0	1507618855	15.079012
24935242	Having picked up Rails 9 years ago a	"Having picked up Rails 9 years ago and having been using it literally daily ever since, it's joyful to read from someone that is just starting.I also started with https://www.railstutorial.org/book, highly recommend it.I also loved Metaprogramming Ruby (Paolo Perrotta) - it's more advanced and starts to open your mind to how Rails magic DSL's were built.I just bought today ""Rebuilding Rails"" (https://rebuilding-rails.com/), heard great things about it.Ruby and Rails are amazing, and I wouldn't trade it for any other language/framework out there."	pqdbr	12.745017	-6.936049	comment	13.0	58.0	1604002729	12.347783
24952260	It's not a surprise at all.Firstly, 	It's not a surprise at all.Firstly, PHP has always been around, WordPress based websites still have like 1/3 share of all existing websites.Secondly, in the recent years it got a very mature language, got loads of improvements and performance optimizations. With PHP 8 being planned to be released by the end of this year, it will be another major step forward.Thirdly, Laravel, Symfony and other open source stuff are awesome.I think if PHP does a major comeback as a decent platform for development and somehow gets rid of the undeserved reputation, those PHP devs who stayed with PHP and didn't switch to RoR, Django, Node or other platforms will be winners, including me :)	otar	12.776977	-6.6383467	comment	13.0	185.0	1604158607	10.336023
24952571	The bad rep is totally deserved. PHP	The bad rep is totally deserved. PHP, for most of its existence, has been a profoundly bad language per se. That doesn't mean nobody's ever built anything valuable on top of it, and I fully understand that (much like also-justifiably-maligned JavaScript) it's evolved quite a bit. But the points made in this mid-2012 article are absolutely spot-on in describing precisely why PHP absolutely earned its reputation: https://eev.ee/blog/2012/04/09/php-a-fractal-of-bad-design/	chrisweekly	12.75375	-6.645066	comment	13.0	117.0	1604160433	10.326279
32694668	Elixir – Phoenix LiveView Native	Elixir – Phoenix LiveView Native	lefrenchy	12.892921	-6.9372516	story	13.0	246.0	1662145900	12.73124
32917994	Might as well ask here. On our teams	"Might as well ask here. On our teams, we have the occasional developer that is insistent on using Typescript in an OO fashion. This has always struck me as square peg round hole. Even though I come from an OO background, Typescript strict settings really seem to push me in a direction of using interfaces and types for type signatures, and almost never classes, subclasses, instantiated objects. I don't have a very good answer for ""yeah, but what about dependency injection""? though. Any thoughts from anyone?"	tunesmith	12.337664	-6.8408427	comment	13.0	58.0	1663709068	-10.458079
32325905	"> - no ""unknown unknowns"". it's so t"	"> - no ""unknown unknowns"". it's so tried-and-true, there's no surprisesThis part is laughable. People who have been programming PHP for 20 years (several of them at my company) still routinely discover hidden bugs, quirks or general behavior that is totally unintuitive and nowhere found in the documentation."	paxys	12.7694025	-6.6264696	comment	13.0	95.0	1659484720	10.298476
32468925	Not sure if Bun has had an influence	Not sure if Bun has had an influence on this, these features must have been in development for a long time, but the timing surely is impeccable.npm compatibility is huge for Deno. It is basically the one major drawback to Deno, which gets hopefully fixed with this feature. It also looks like this compatibility layer is implemented transparently in the existing module management, which is a big bonus. Nobody wants to deal with node_modules anymore when working with Deno for an extended period, just love to see this.	hjanssen	12.478144	-6.4393783	comment	13.0	50.0	1660567289	-10.946358
22264758	> I’m prevented from ever achieving 	> I’m prevented from ever achieving a fluid coding style because the coding is not coming entirely from my head. My coding has become a constant dialog with IntelliSense.This.Code should live in your head. You shouldn't need intellisense to see that a property doesn't exist in an object. I hate code completion, most of the time it gets in the way of your thought process. Even if it can gain you a little speed increase, it still is better to write things down for your 'codebase memory'.That's why I despise the current web development stack. You need Typescript, otherwise you might make a mistake with types? Never had that problem in the past. And just like typo's I make mistakes a once in a while, but that's OK because it helps me to learn the codebase better. You need a linter? Same story,	blobs	12.346114	-6.837519	comment	13.0	49.0	1581071880	-10.442396
23462506	Design Doc: Use JavaScript instead o	Design Doc: Use JavaScript instead of TypeScript for internal Deno Code	rkrishnaan	12.480254	-6.473207	story	14.0	115.0	1591664287	-10.866582
23476235	PHP is damn fast now, no joke. And w	"PHP is damn fast now, no joke. And with all of the modern features it's actually not so bad to work in.I'm becoming increasingly puzzled every time I see PHP hate now, especially when I read tired comments like ""just use rails"". Laravel is arguably as good or even better than rails at this point, and PHP 7+ is definitely light years faster and lighter.One thing that still sucks is package management / composer."	jonny383	12.776323	-6.641308	comment	14.0	93.0	1591791344	10.344982
23777156	This really nails why languages like	This really nails why languages like PHP and Ruby have won out over static typed, compiled ones for application level web development. The web is a massive collection of disjointed, loosely coupled APIs that all (just barely) interoperate to provide a massive array of functionality. Languages that tend to work well with it are those that are highly flexible around the corner cases of these technologies, and allow you to quickly iterate through the process of gluing them together.	aphextron	12.401941	-7.0078473	comment	14.0	161.0	1594271927	10.392158
23791261	Deno vs. Node (cold-start on AWS lam	Deno vs. Node (cold-start on AWS lambda)	tosh	12.493935	-6.4413543	story	14.0	59.0	1594387737	-10.9348755
24061064	New TypeScript Website	New TypeScript Website	Garbage	12.382693	-6.804	story	14.0	94.0	1596637284	-10.500585
20216855	Migrating 300k LOC from Flow to Type	Migrating 300k LOC from Flow to TypeScript	rgoldfinger	12.421913	-6.7352996	story	14.0	108.0	1560883589	-10.46055
20265031	Elixir 1.9	Elixir 1.9	mischov	12.690668	-7.4518523	story	14.0	458.0	1561392630	12.942835
20765709	If you are going to learn a new prog	If you are going to learn a new programming language for web UI, why not go for Elm ? You get so much more than just static types with Elm.	manishsharan	12.984369	-7.672935	comment	14.0	49.0	1566460760	-12.741112
20829714	I'm sorry but Perl 6 isnt relevant I	I'm sorry but Perl 6 isnt relevant IMO. It took too long. I was a Perl developer at etoys.com in 2000 and BBC in 2001. I wrote OneMusic for Radio1 and even convinced the BBCs uptight ops team to run it with modperl so it could handle the high traffic it did. I also created the job search engine WorkZoo in modperl, one of Time Magazines top 50 sites of 2005 and Indeed's main competitor at the time.Perl6 was promised. Then it never happened. It's now an almost quarter century later. The world has moved on. Taking that long for a single version update in a language is not reasonable. I loved Perl. I still love Perl5. But I've moved on and have 100% blocked Perl6 from my psyche and list of expectations. No one I know uses it. I am not excited by it. I dont need it. And I don't care to hear the	mmaunder	12.345974	-7.0460725	comment	14.0	83.0	1567088465	13.177088
14035908	My main point of friction in Django 	My main point of friction in Django is still the admin interface; it's got a very steep sigmoid of a learning curve. The easy stuff is very easy, which is great, but when you want to do something somewhat complex it becomes arcane very quickly, usually requiring step-debugging through the code to figure out which framework method needs to be tweaked.Also, it's 2017 and we are still selecting ForeignKeys from an unfiltered drop-down menu with potemtially thousands of entries? This is madness. A PR for using select2.js (https://github.com/django/django/pull/6385) has been floating around for a year now, but progress is glacial.I fear the admin site code has become so flexible and generic that it's difficult to extend, which is discouraging improvements.Anyone care to shout out their favourit	theptip	12.852997	-6.508081	comment	14.0	56.0	1491331153	10.091038
14046404	Roughly half the 'power of prolog' c	Roughly half the 'power of prolog' comes from the 'power of logic programming' and prolog is by far not the only logic programming language, e.g.,- You can do logic programming using minikanren in scheme. (you can also extend the minikanren system if you find a feature missing).- Minikanren was implemented in clojure and called core.logic.- It was also ported to python by Matthew Rocklin I think, called logpy.- There is also datalog, with pydatalog it's python equivalent.- Also pyke. And so on.Plus logic programming has very important (arguably necessary) extensions in the form of constraint-logic-programming (CLP), inductive-logic-programming (ILP), and so on.It's a huge area.EDIT: ILP at an advanced level starts making connections with PGMs (probabilistic graphical models) and hence mach	fizixer	13.14263	-7.3001056	comment	14.0	81.0	1491432633	-12.476088
14177489	Rooby: a Ruby-like object oriented l	Rooby: a Ruby-like object oriented language written in Go	type0	12.446016	-7.1935663	story	14.0	122.0	1492942644	12.293425
14353357	Tips for Building High-Quality Djang	Tips for Building High-Quality Django Apps at Scale	stanleytang	12.829953	-6.5154786	story	14.0	191.0	1494969351	10.066973
14676820	Is Typescript necessary for front-en	Is Typescript necessary for front-end Javascript?In the many years I've done front-end with Javascript, type-related bugs were very, very rare. Textbook logic as why to use strong types make absolute sense. Yet in the real world, I've had to fight with logic, DOM, UX, framework incomprehension and other types of bugs - not types. Type issues were anomalies among bugs. When they came up, they were the easiest to fix.Am I alone here? Anyone in the community have concrete examples of type-related bugs that took so much time to required using something like Typescript? Can anyone quantify that?	martin_drapeau	12.364897	-6.8100195	comment	14.0	73.0	1498912175	-10.45818
14690704	I feel like Django has too much magi	I feel like Django has too much magic.  I agree that it is easier to get quick wins with Django, and if you're building a small hobby site or something, then it's great.But if you're building something that you hope you'll have to rapidly scale, Django is going to hurt you.  It's way harder to scale due to both its heavy reliance on hidden magic its tight integration with its data store.When you want to rapidly scale, the easiest way to do that is if your data store and application aren't so tightly intertwined that you have to scale both to solve a bottleneck in either.	jedberg	12.832315	-6.5072336	comment	14.0	73.0	1499109893	10.046533
30780673	Ask HN: How do I convince developers	Ask HN: How do I convince developers/companies to use TypeScript?	nilia	12.36903	-6.8243246	story	14.0	10.0	1648055114	-10.429548
30812585	As a rubyist, it makes me sad that p	As a rubyist, it makes me sad that python ended up here rather than ruby. And I sometimes wonder why.> As the name suggests, numeric data is manipulated through this package, not in plain Python, and behind the scenes all the heavy lifting is done by C/C++ or Fortran compiled routines.So I wonder, was it easier to write C/C++ or fortran compiled extensions in python than it was in ruby?	jrochkind1	12.351276	-6.94629	comment	14.0	61.0	1648307992	12.335336
31024363	Why Ruby Has Symbols	Why Ruby Has Symbols	dmitrytsepelev	12.470053	-7.062688	story	14.0	142.0	1649922779	12.380681
31379521	Cool to see Java getting these featu	"Cool to see Java getting these features. After having been a Java dev most of my life, and then moving to Typescript years ago, it's hard to believe I went so long without this.Related, Typescript is the only language I know of that through flow analysis does not require you to redefine the variable. E.g. you can do something like  if (typeof foo === 'string') {
    //Typescript knows foo is a string here
  }

All the other languages I know of, like this proposal for Java, require the variable to be redefined. I personally find the Typescript way, as VSCode will give you appropriate type warnings in the right places, easier to use in practice. Just curious if there are any other languages that do it like TS."	hn_throwaway_99	12.418245	-6.8099675	comment	14.0	81.0	1652545404	-10.477418
31424478	I've seen more than once recently an	"I've seen more than once recently an engineer saying that software solutions outside of the Serverless ecosystem (FaaS, DB, etc) is ""the new legacy"". And that cloud providers have solved all the pains that Erlang was supposed to address.What's your feeling on this? Elixir sounds very compelling to me, but I worry that I might be going in a direction that's not where the industry is going."	haolez	12.625847	-7.492528	comment	14.0	68.0	1652890165	12.923796
31469481	Show HN: Remult – a CRUD framework f	Show HN: Remult – a CRUD framework for full-stack TypeScript	yonirapoport	12.423334	-6.6533527	story	14.0	130.0	1653234762	-10.471334
31727371	Anyone find it suspicious how many c	Anyone find it suspicious how many companies put so much effort into justifying how Rails is still a good tech for a mature company?I think the truth is really something like - we prototyped the app in Rails, because that's what Rails is good at, now we've evolved into a huge and slow application with no type validation, but porting the application and switching the team to something better and faster would be a nightmare, so we're just going to write an article about feeling good about where we're at.	brink	12.764541	-6.939331	comment	14.0	166.0	1655136213	12.358636
35678238	Rye: Flask author's new project for 	Rye: Flask author's new project for Python bootstrapping	BiteCode_dev	12.69193	-6.5768213	story	14.0	208.0	1682270211	10.013877
35832038	A few words on Ruby's type annotatio	A few words on Ruby's type annotations state	todsacerdoti	12.407294	-7.110436	story	14.0	167.0	1683305924	12.376982
35927813	Rails Cheat Sheet	Rails Cheat Sheet	joemasilotti	12.731126	-6.9364023	story	14.0	240.0	1683981696	12.363155
35965563	I work on Bun. Happy to answer any q	I work on Bun. Happy to answer any questionsalso: there is a bug in `bun build --compile` I am currently working on fixing. Expect a v0.6.1 in a bit	Jarred	12.455709	-6.442996	comment	14.0	61.0	1684260666	-10.803113
36242125	Launch HN: Infield (YC W20) – Safer,	Launch HN: Infield (YC W20) – Safer, faster dependency upgrades	stevepike	12.702246	-6.9639087	story	14.0	74.0	1686233269	-8.995728
36255546	Why Do ML on the Erlang VM?	Why Do ML on the Erlang VM?	lawik	12.547775	-7.5223646	story	14.0	168.0	1686304190	-4.72681
36339891	A LiveView Is a Process	A LiveView Is a Process	clessg	12.884115	-6.81203	story	14.0	168.0	1686834369	12.716844
29170736	A no-go fantasy: writing Go in Ruby 	A no-go fantasy: writing Go in Ruby with Ruby Next	thunderbong	12.51806	-7.131432	story	14.0	158.0	1636514820	12.307114
34125408	Ruby 3.2.0	Ruby 3.2.0	quechimba	12.621563	-7.0348835	story	14.0	254.0	1671957027	12.370725
34243770	You are obviously referring to Pytho	"You are obviously referring to Python and so I would like to note a few things. (I have nothing against Ruby)> Ruby ... its combined attributes of brevity, expressive power, and feature consistency.> [Python] lacks the elegance and consistencyFirst I would argue Python is very consistent in its design, it aims to only have one obvious way to do things and so it's easy to guess how apis will work. It also aims for explicitness, which makes code very easy to follow and reason about.Secondly on ""brevity"" and ""expressiveness"", I don't really see them as an attribute that make a language ""better"". Sure for experienced developers who like a personal game of code golf (don't we all at times!) those are attributes can can make coding more ""fun"". But that doesn't necessarily translate to code that "	samwillis	12.498034	-7.030552	comment	14.0	161.0	1672825338	12.373473
34338681	I think there are too many concepts 	I think there are too many concepts in this, but rather than being negative, here are some tips:Always keep your models slim. Don't stuff template related stuff in there. You need to look at those models often, so compact is a win. course_has_finished(course) is not much longer than course.has_finished(), and will allow you to expand the functionality as time goes on. Do precomputation if you need the information in a template - that keeps your templates simpler and allows you to easily expand the complexity of the precomputation.Don't use class-based views, at least not outside very specific niches like the Django admin. Class-based views will transform a simple, composeable call stack into a ball of inheritance mud. Inheritance is not a good code reuse tool.Don't make separate apps in th	olau	12.900275	-6.4550395	comment	14.0	94.0	1673446488	10.036112
34411572	If you are thinking about building a	If you are thinking about building a web application, take a look at Laravel. I not a huge PHP user, but Laravel is always on the top of my list for building web applications. It's the greatest web framework to ever exists, even better than Rails IMHO.The ecosystem around Laravel is really incredible and unlike any other framework. They have libraries for every stage of a web application from taking payments all the way down to server management and hosting.They even have awesome libraries like Inertia which are built for Laravel but can be used with other frameworks.It's the only reason I still stay fresh on my PHP.	impulser_	12.775742	-6.5959835	comment	14.0	84.0	1673957587	10.364123
34546143	There is a very common pattern in th	"There is a very common pattern in the world where people conflate goals with results. Of course, when I say that, it's obvious that the two things aren't the same, but the unexamined assumption that they are the same sneaks in anyhow when you aren't looking, a cognitive shortcut hard to catch yourself making and harder yet to get in front of and deal with.In the light of this statement, the answer to what I think is the thesis question of that entire piece:""This begs the question: why aren't language and library designers stealing the structure behind Erlang's behaviours, rather than copying the ideas of lightweight processes and message passing?""Is that while Erlang has a lot of good goals, the results of how they got there are simply not the state of the art. Or, to put it another way, l"	jerf	12.562654	-7.5218105	comment	14.0	56.0	1674828389	-7.494929
34801457	Introduction to Datalog	Introduction to Datalog	jgrodziski	13.178639	-7.0344505	story	14.0	362.0	1676450492	5.6977706
36566167	Ericsson to WhatsApp: The Story of E	Ericsson to WhatsApp: The Story of Erlang	tim_sw	12.688567	-7.383119	story	14.0	270.0	1688334693	12.799297
36641634	The Concise TypeScript Book	The Concise TypeScript Book	revskill	12.346079	-6.8033175	story	14.0	215.0	1688794651	-10.475095
36875815	An introduction to metaprogramming i	An introduction to metaprogramming in Ruby	unripe_syntax	12.491188	-7.07636	story	14.0	150.0	1690370329	12.374694
37259225	Unpacking Elixir: Concurrency	Unpacking Elixir: Concurrency	lawik	12.587982	-7.475849	story	14.0	329.0	1692950117	12.916753
37414723	Gematria	Gematria	userbinator	12.585486	-7.0394797	story	14.0	46.0	1694060399	4.963185
25175422	Love the idea of it, even if it's no	"Love the idea of it, even if it's not for me. Ruby needs new blood infused into it.I realized recently that Rails started losing its popularity because it just didn't quite keep up as the web evolved. Where the framework and its community resources (guides/tutorials) should have started promoting REST APIs and out-of-the-box no-friction compatibility with modern tooling like npm/webpack/react/whatever, instead it stuck with ""the Asset Pipeline,"" purely MVC-style full-page-reload apps, and things like Coffeescript/jQuery by default.It's really unfortunate because Rails is such a brilliant framework, and Ruby such a lovely language, and they're falling out of the mainstream and losing popularity because of this. I wish the community would re-align.Michael Hartl's book, the go-to ""learn Rails"	aerovistae	12.752707	-6.9000344	comment	14.0	119.0	1606026246	12.335591
25175172	Matestack – Reactive UIs in pure Rub	Matestack – Reactive UIs in pure Ruby	gls2ro	12.599609	-6.8552933	story	14.0	210.0	1606022832	8.547623
25240708	Tex – Use Elixir like a scripting la	Tex – Use Elixir like a scripting language, across your system	striking	12.6572075	-7.4273844	story	14.0	140.0	1606598880	12.948312
25364073	Rails 6.1	Rails 6.1	jonathanhefner	12.755934	-6.9332047	story	14.0	396.0	1607544785	12.35824
38913220	Show HN: I Made a Sudoku Game	Show HN: I Made a Sudoku Game	alabhyajindal	13.451372	-7.409785	story	14.0	40.0	1704727390	15.076736
22011941	I know this is unrelated, but probab	I know this is unrelated, but probably a lot of Pythonistas here and I've been wondering: what is the async web framework of choice for you guys today? As for DBs, still SQLAlchemy? What about a prettier (js) alternative?	bbmario	12.377714	-6.595872	comment	14.0	44.0	1578672626	9.847978
22090881	Strange takeaway in the title.Mine a	Strange takeaway in the title.Mine are:- He regrets introducing threads. He now prefers other parallelism/concurrency paradigms and is possibly looking into introducing them in Ruby 3 (that part wasn't clear in the interview).- He regrets adding global variables.- He regrets not focusing on immutability primitives earlier.- He and the maintainers team look at Python, JavaScript and Elixir for inspiration.- He seems a bit disappointed that Ruby is mostly used for web development only and would be happy if it was used in research and AI.- He regrets not investing even a little effort in static typing earlier but is now working on an optional typing system where you choose to describe types in a separate file. (Reminds me of C/C++ and OCaml header files.)I hope I’m not subconsciously emulatin	pdimitar	12.584071	-7.061991	comment	14.0	97.0	1579434389	12.375071
22137291	Lumen – Elixir and Erlang in the Bro	Lumen – Elixir and Erlang in the Browser	lawik	12.6035185	-7.4867043	story	14.0	264.0	1579866716	12.925685
22221630	There was never anything wrong with 	"There was never anything wrong with PHP, really.* If you wanted to scale it horizontally, it was ready to do that 15+ years ago* No problem running it completely stateless* Deploys are completely sane and predictable, it's just a bunch of files, and even when composer came along it didn't really change that too much* Performant enough as far as the interpreted web languages go* No problem writing a RESTful backend in it and fronting completely ""modern"" client facing tech on the top if you want* Server side rendering since day 1Like, it came down to people complaining about some function names / param orders as if it were the end of the world. I think a certain subset of people (shall we call them hipsters?) are just keen on finding new ground where they can rewrite the same boring things i"	core-questions	12.77419	-6.6206694	comment	14.0	106.0	1580707410	10.342183
19131595	There's been some discussion regardi	"There's been some discussion regarding what these Javascript devs are calling ""The Typescript Tax"" ( Presumably the perceived increased cost of development in a statically typed language ). What greater 'tax' could you possibly conceive of than a whopping 38% of your development time on an enterprise product being spent debugging problems caused by type inference/coercion? You can directly quantify the costs, and it'd probably make management's heads spin.
Surely Node.js is going to be looked back upon as one of the worst mistakes in the history of 21st century programming."	ajxs	12.356898	-6.630844	comment	14.0	118.0	1549851768	-10.390556
19517699	> if the modern equivalent of Rails 	> if the modern equivalent of Rails already exists, please let me know!You're in luck. Rails 5.2.3 was released 20 hours ago.More seriously, I feel rails is still excellent and I'm happy to work with it every day. I'd be interested to hear more about what makes rails not modern? I find it a very productive framework.EDIT: If you're talking about missing a JS equivalent of rails, do you know about Loopback? https://loopback.io/	BillFranklin	12.753632	-6.8941193	comment	14.0	173.0	1553815893	12.354484
19529947	There has never been a worse time to	There has never been a worse time to be a software developer.Practically all of the most popular tools encourage anti-patterns, add unnecessary complexity or solve superficial problems instead of focusing on critical problems that exist in today's software projects.Some examples:- TypeScript: Unfortunately, we cannot reduce a language's complexity by adding extra complexity on top. The complexity will keep rearing its ugly head no matter how much we try to hide it. The TypeScript project has had over 20K issues raised and 9K pull requests (that's not even mentioning the DefinitelyTyped repo)... To put it into perspective, the Linux project has only had about 380 PRs on GitHub. But how much value does TypeScript add? All evidence points to the fact that TypeScript does not have any positive	cryptica	12.369535	-6.756244	comment	14.0	69.0	1553960475	-10.432025
19880598	Prolog's Death (2010)	Prolog's Death (2010)	vector_spaces	13.150784	-7.3021574	story	14.0	111.0	1557512024	-12.505707
15780999	Reasons to use Phoenix instead of Ra	Reasons to use Phoenix instead of Rails	elvio	12.788814	-7.0763316	story	14.0	122.0	1511706374	12.652527
15791533	Rails 5.2	Rails 5.2	moeamaya	12.776653	-6.8929462	story	14.0	151.0	1511817654	12.364865
16414670	Worth noting that in our experience,	"Worth noting that in our experience, hiring has gotten way easier for us since we became an Elm shop. We really struggled to hire React engineers (who have a zillion positions to choose among - why would they pick ours?), whereas there seem to be a lot more great programmers who want to use Elm than there are companies hiring for Elm positions.Here's a verbatim quote from a cover letter (one I happened to be reading this morning; we see a lot of similar stories):> Despite my valiant evangelizing of Elm, my company has decided to embrace React over Elm, so I am looking for opportunities to develop Elm professionally.Our Head of Talent said she'd never seen an inbound pipeline as strong as ours, and the #1 reason people cite for wanting to apply is Elm. The ""Python Paradox""[0] is real![0] ht"	rtfeldman	12.997943	-7.6777744	comment	14.0	145.0	1519065318	-12.768593
17114810	What Sucks About Erlang (2008)	What Sucks About Erlang (2008)	jxub	12.558503	-7.526488	story	14.0	145.0	1526851464	-5.4336815
17292234	Gluon – A configurable and small vir	Gluon – A configurable and small virtual machine which runs Erlang BEAM bytecode	ghosthamlet	12.532067	-7.4897785	story	14.0	209.0	1528802007	12.894984
17313087	Elixir at PagerDuty	Elixir at PagerDuty	romanhn	12.694428	-7.4601035	story	14.0	339.0	1528995218	12.945551
17613567	To those using Elixir, how are you d	To those using Elixir, how are you deploying it? Would love your insight especially if you're on GCP (app engine, super curious).Thanks!	_fx6v	12.698638	-7.434944	comment	14.0	60.0	1532558340	12.93293
39163828	Ruby's exceptional creatures	Ruby's exceptional creatures	ben_s	12.609909	-7.054491	story	14.0	286.0	1706433311	12.400974
18267401	Falcon: A high-performance web serve	Falcon: A high-performance web server for Ruby, supporting HTTP/2 and HTTPS	ksec	12.649654	-6.871909	story	14.0	187.0	1540117382	12.325864
18279568	offtopic, but I'm in the middle of t	offtopic, but I'm in the middle of trying to convince my small team to pick up typescript for a new significant node backend for our company.  It seems like a no-brainer from my perspective.  Compilation is fast, we would use `strict` but would allow devs to default to `any` if the types got too hard.  There are no downsides but so many upsides - better refactoring, intellisense, documentation, communication of interfaces, protection against the javascript and library minefields. Glad to see there are lots of other people thinking this is valuable - wish I could figure out the right way to convince my team.	netcraft	12.377016	-6.78292	comment	14.0	71.0	1540251630	-10.44418
18391729	Who Killed Prolog? (2010)	Who Killed Prolog? (2010)	ihsoj	13.154718	-7.297182	story	14.0	82.0	1541517508	-12.505078
18751823	Ruby 2.6	Ruby 2.6	merk_	12.629799	-7.038098	story	14.0	299.0	1545654225	12.3687525
18906678	I recently did the exact same job as	"I recently did the exact same job as the author of this post.Migrating 15K LoC from JS to TS.The author of Vue.JS also migrated Vue completely to Typescript.At first I had major apprehension because of how much Microsoft generally enforces things on developers.It's well know that if you start using C# , your entire stack will generally be MS based...(SQL Server, Azure etc... )But after I did the migration , I was blown away by how confident and how much flexibility I had when i was writing my code.Even if I have been writing code with Java / C# for nearly a decade , nothing has come close to Typescript in terms of productivity,flexibility and confidence.Having used Javascript since before Node.JS , I think the whole idea of having to ""transpile"" my code to something or to respect some ""rul"	tinyvm	12.355439	-6.725299	comment	14.0	131.0	1547501232	-10.433552
30076373	This reminds me of when people try t	"This reminds me of when people try to make a new Ruby implementation. They get the basics down and think ""this isn't so bad! I can do this!"". Fast forward a few months and they're stuck on some nasty little edge case around eval and method_missing that they need to run Rails. Or some weird aspect of C extensions.TypeScript's compiler is an unholy, unsound mess, because JavaScript is an unholy, unsound mess. Sure the basics of type checking structs and variables is somewhat easy. But what about conditional types? What about weird generic constraints? What about indexing types? There's some really confusing stuff going on underneath the hood.It's also a mess that *does not have a spec*. Even if you somehow manage to  make a type checker that implements most of the features, there's no way to"	hardwaregeek	12.36834	-6.9550443	comment	14.0	99.0	1643137355	12.410628
30209595	As someone who came from other MVC f	As someone who came from other MVC frameworks outside of Ruby, learning Rails has been a cluster-f of searching through documentation circa 2013. The whole rails “convention over configuration makes it easier” is a load of bologna, because the only way to know the “convention” is to either have gone to a rails boot camp, reading the docs top to bottom, or maybe watching rails casts.The best way to work on rails is to either already know rails yourself, or be working with a rails guru, which admittedly there are a bunch of those.At least with a configuration over convention you can just look at the code and figure out what is happening. With rails, there are certain magical things you just Need To Know and the only way to know those things are to already know them before running into it.	jmondi	12.749232	-6.939727	comment	14.0	98.0	1643994955	12.363904
30261349	I've been programming in PHP for aro	I've been programming in PHP for around 5 years. I've used vanilla PHP, full featured MVC frameworks, micro frameworks and I've been working with Laravel for around 2 weeks. Worst experience ever. The more I dig into it the more I hate it.	Darmody	12.785223	-6.6244674	comment	14.0	61.0	1644341191	10.36922
30621809	Appeal to Ruby Community from Kharki	Appeal to Ruby Community from Kharkiv Rubyist	stanislavb	12.656601	-7.033647	story	14.0	417.0	1646872084	12.410218
30622669	I'm a a typescript/java engineer. I 	I'm a a typescript/java engineer. I would say my lifetime code stats are probably around 40% JS / 35% Typescript / 15% Java / 8% Python / 2% other. That is to say, I've barely ever written any Ruby outside of the occasional little script. And yet it's secretly my favorite language.I wish I wasn't afraid that demand for it would vanish over time, which makes me reluctant to invest skills in its ecosystem. It seems so small and uncommon today compared to others.	aerovistae	12.560293	-7.0009403	comment	14.0	91.0	1646880459	12.376926
30720995	Kharkiv Rubyist during the war: We a	Kharkiv Rubyist during the war: We are still here	pabs3	12.633601	-7.048528	story	14.0	361.0	1647604396	12.362236
12630742	It's really unfortunate that so many	"It's really unfortunate that so many people aren't interested in learning Ember. I just started an internal IT tool in Rails and Ember and I'm really enjoying the simplicity of it. I want something that is easy to understand, easy to setup, and won't change for a while. I became more interested in Ember when I read something online about how they are focusing on stability in the long term instead of a bunch of features. There are also a couple of tools for ""just get it hooked up to rails, stupid"" that helped me move quickly. As a simple, simple guy - I really prize the ""hey stupid I set it up for you"" command line tools that give me a starting point. Then I can figure things out as I go along by making small, simple, controlled changes.This is in strong contrast to something like Elm. I ha"	OhSoHumble	13.099812	-6.458248	comment	14.0	72.0	1475524341	-15.512911
12704511	PHP 7 deployment at Dailymotion	PHP 7 deployment at Dailymotion	dailymotioneng	12.7752695	-6.5768123	story	14.0	371.0	1476396642	10.273676
12717727	Ask HN: Are there and will there be 	Ask HN: Are there and will there be a lot of JavaScript backend developer jobs?	Onixelen	12.761103	-6.68034	story	14.0	23.0	1476608625	10.412319
12718224	Elm and Phoenix/Elixir in Production	Elm and Phoenix/Elixir in Production for France TV	tbassetto	12.955643	-7.642478	story	14.0	291.0	1476619378	-12.765132
12754294	Django REST framework 3.5	Django REST framework 3.5	cdnsteve	12.843015	-6.5362873	story	14.0	243.0	1476984527	10.116071
13427610	Selecting a platform: JavaScript vs 	Selecting a platform: JavaScript vs Elm vs PureScript vs GHCjs	g4k	12.961612	-7.668386	story	14.0	68.0	1484757199	-12.729575
12133620	New Features in Ruby 2.4	New Features in Ruby 2.4	jbackus	12.617827	-7.049182	story	14.0	222.0	1469060334	12.377525
12205024	Django 1.10 released	Django 1.10 released	hrayr	12.830229	-6.5589485	story	14.0	227.0	1470078285	10.097974
35185996	I have a strange take - I think Type	I have a strange take - I think Typescript types are better most other languages, including Java, C++ and Go. It's strange since TypeScript is adding types to a weakly typed language.If we could push JavaScript performance to be another order of magnitude faster it wouldn't be necessary to use other languages, imho. Of course, pushing it that far without effectively creating a new one would be difficult, to say the least.	endisneigh	12.348519	-6.7934623	comment	14.0	112.0	1678990633	-10.451376
35430042	I've been away from python for quite	"I've been away from python for quite some time but enjoyed using django on a project 5-6 years ago. I thought it was really full-featured and fairly intuitive, but it seemed to rely heavily on what seems to be considered an older paradim of submitting forms, and getting sent to a new page, etc, vs the ""Single Page Application"" concept.I know it was possible to do SPAs with django-rest or something, but I'm curious if Django has mostly stayed in this ""older"" paradigm or if its more .. modernized at this point?"	locusofself	12.795419	-6.5300593	comment	14.0	68.0	1680550658	10.082398
28189174	It's telling that most instructions 	It's telling that most instructions deal with the Javascript toolchain and not Rails itself. And let's hope that everything works and none of the 2000 imported node_modules blow up when this tutorial is 3 months old.I'm looking forward to Phoenix 1.6 which ditches Webpack for esbuild. Every step away from the insane churn of the modern frontend world is welcome.	toberoni	12.722769	-6.822065	comment	14.0	83.0	1629038814	12.354615
33763127	Crystal for Rubyists	Crystal for Rubyists	sdogruyol	12.628463	-7.2307353	story	14.0	217.0	1669559163	-11.239577
33773316	I have to say, I think they'd be cra	I have to say, I think they'd be crazy not to write the new version in TypeScript.Choosing to use JS without TS at this point has become a dogmatic statement of purism that, while beautiful in a sense, is so unpragmatic as to appear a little foolish.It's like insisting on using the pre-electronics version of a powerful, dangerous machine even though the new version gives you just as much control, greater precision, and much better safety, because of a romantic notion of purity in the way things should be done. Admirable and not at the same time.	rattray	12.376516	-6.766424	comment	14.0	139.0	1669641852	-10.445613
33907549	The worst part about PHP is constant	The worst part about PHP is constantly hearing from its detractors, who are often people who haven’t used the language in many years. Haystack needle order, $, fractal of bad design, it just gets old.The language isn’t perfect but I love working with it, these 8.1 and 8.2 improvements have really made it sweet.My biggest gripe at the moment is the (very old) behavior of e.g. preg_match() and sort(). You’ve got a small handful of these common functions that operate on their input by reference/in place which is gross. A new version of these would be welcome.	user3939382	12.712515	-6.6618	comment	14.0	125.0	1670505378	10.352463
27061500	Gleam 0.15	Gleam 0.15	lpil	12.510402	-7.4477715	story	14.0	234.0	1620299330	-12.33132
27207159	Looking into Elixir, but from what i	Looking into Elixir, but from what i've heard, Elixir isn't very memory efficient when it comes to web servers.Is that still the case?Also where does one host Elixir apps these days? Heroku, Vercel or Bare metal?	yannoninator	12.676571	-7.4270988	comment	14.0	48.0	1621423985	12.909613
38555768	Everyday performance rules for Ruby 	Everyday performance rules for Ruby on Rails developers	a12b	12.718742	-6.9545875	story	14.0	132.0	1701953532	12.333141
15072622	Effective immediately I am stepping 	Effective immediately I am stepping down from the Nodejs TSC	Tomte	12.367987	-6.494773	story	14.0	71.0	1503411510	-10.375855
15094731	Practicing Elixir or any programming	Practicing Elixir or any programming language	ericdouglas	12.682443	-7.4406877	story	14.0	173.0	1503614812	12.939314
24236200	I have to confess that I have a lot 	"I have to confess that I have a lot of prejudice against PHP after having to work with it at the time of PHP3 and 4. It seemed like even worse than Perl in the sense of how many things were just bolted on it as a way that the developers could claim ""yeah, you can do that with PHP"". After having a blog running wordpress hacked twice by mere virtue of being online, I dismissed it for good.I keep hearing about how the language has improved, but to me it feels like even if the language gets rid of all its heaps of crap, it still is in a evolutionary dead-end. Is there anything that PHP is developing or adopting that can not be had at other established languages?(Edit: I never had something downvoted so fast before. This is not concern trolling. I seriously would like to know if it makes sense "	rglullis	12.770206	-6.658	comment	15.0	78.0	1598026785	10.337471
20149779	Solving Sudoku with Prolog (2016)	Solving Sudoku with Prolog (2016)	hjek	13.36114	-7.3805003	story	15.0	179.0	1560193936	15.074659
20378409	Django's goals are probably not our 	Django's goals are probably not our goals for our web application	andyjpb	12.827936	-6.5379295	story	15.0	36.0	1562538714	10.083331
20591644	Typed Properties in PHP 7.4	Typed Properties in PHP 7.4	brendt_gd	12.441239	-6.828186	story	15.0	205.0	1564737940	-9.024512
20638435	Did you consider that the next devel	Did you consider that the next developer might well come along and post a similar comment:> It replaced a site that was pretty much a home-grown PHP framework written by a single developer. Random mixed logic in templates, hard to update CSS and a poorly designed 'not-an-ORM' ORM.Not to say that your rewrite is like that, but one man's garbage is another man's treasure.	orf	12.746975	-6.5805364	comment	15.0	215.0	1565208811	10.346579
13691303	Ruby `reject!`	Ruby `reject!`	dmit	12.501027	-7.0866036	story	15.0	306.0	1487627548	12.357931
14106158	Glimmer.js: What’s the Deal with Typ	Glimmer.js: What’s the Deal with TypeScript?	lowonkarma	12.3750925	-6.7171226	story	15.0	148.0	1492086109	-10.451619
14513855	Speeding Up Rendering Rails Pages wi	Speeding Up Rendering Rails Pages with render_async	nikolalsvk	12.6807785	-6.6980815	story	15.0	127.0	1496927041	12.326937
14605373	Erlang/OTP 20.0	Erlang/OTP 20.0	okket	12.584408	-7.510039	story	15.0	391.0	1498063221	12.928555
30917420	Pharo 10	Pharo 10	xkriva11	12.34821	-7.2564154	story	15.0	298.0	1649155955	7.1931686
31192826	Ask HN: The Crystal programming lang	Ask HN: The Crystal programming language – what are your impressions?	open-source-ux	12.573552	-7.1790347	story	15.0	53.0	1651155838	-11.112611
31527135	sounds like the same experience I ha	sounds like the same experience I have with pretty much every language I'm not used to.I just want to try this C++, download, unzip, oh it's windows so .project file. Fine, redo on windows , oh it's 3 versions of vstuido old and says it wants to upgrade , okay. Hmm errors. Try to fix. Now it's getting linking error.repeat the same with xcode and any project in c, c++, objc, swiftokay how about ruby? oh I have old ruby , hmmm , try to install new ruby, seems to run, but it can't find certain gems or something. oh and this other ruby thing I was using is now broken ? why do I have to install this stuff globally? You don't but there are several magic spells you must execute and runes you must set in the rigtt places. Oh ... I think I got that setup but it getting this new error.....I'm sypath	gernb	12.564049	-6.973294	comment	15.0	95.0	1653638448	12.35175
26315022	It's probably worth taking a step ba	"It's probably worth taking a step back and interrogating why the actual ""Why was I Anti-TypeScript?"" a little bit more and use it as an opportunity for broader self development.The author didn't use and understand something, and rather than trying to they instead just defaulted to rejection. It's midly disapointing seeing this in people who label themselves as ""Senior""."	madeofpalk	12.412167	-6.7890286	comment	15.0	188.0	1614691550	-10.459362
35855398	Prolog for data science	Prolog for data science	usgroup	13.143836	-7.2878475	story	15.0	190.0	1683491810	-12.478892
35929195	Rome v12.1: a linter formatter for T	Rome v12.1: a linter formatter for TypeScript, JSX and JSON	conaclos	12.345703	-6.737306	story	15.0	133.0	1683991113	-10.409605
29199717	Build an Elixir Redis Server that’s 	Build an Elixir Redis Server that’s faster than HTTP	weatherlight	12.687489	-7.399655	story	15.0	159.0	1636728391	12.932016
29240789	Etsy’s Journey to TypeScript	Etsy’s Journey to TypeScript	elorant	12.372301	-6.8005447	story	15.0	173.0	1637072412	-10.459424
29273155	Honestly I don't get why some people	Honestly I don't get why some people want to move to static types.  Ruby is a dynamic language, that's the point of it...  Giant orgs can just use Java or something.  We need some languages to stay productive for those of us who work solo or in small groups.  If I wanted static types I'd use Java, Go or something (probably Haskell).	Mikeb85	12.470367	-7.113031	comment	15.0	163.0	1637289367	12.382453
29303611	Django 4.0 release candidate 1 relea	Django 4.0 release candidate 1 released	pauloxnet	12.841207	-6.5823145	story	15.0	180.0	1637564081	10.114951
29441857	&lt;ruby&gt;: The Ruby Annotation el	&lt;ruby&gt;: The Ruby Annotation element	alin23	12.49635	-7.0542803	story	15.0	189.0	1638635303	12.381902
34534842	Am I the only person who struggles t	Am I the only person who struggles to deploy Rails apps.It's a super productive framework to develop in, but deploying an actuals Rails apps - after nearly 20 years of existance, still seems way more difficult than it should be.Maybe it's just me.	alberth	12.756737	-6.8865504	comment	15.0	53.0	1674753561	12.332814
34805583	All the Buns Are Blank	All the Buns Are Blank	zdw	12.471679	-6.446346	story	15.0	106.0	1676476772	5.7343893
37292646	"Every time I read ""PHP"" in a thread "	"Every time I read ""PHP"" in a thread I think ""Here we go again with the useless hate/love comments"".Can we just agree on ""PHP used to suck but it was very easy to work with, reason why it got traction. Things got better over the years and those that only saw the early years, rightfully only remember how much it sucked, while those that use modern versions see how much it has changed""?"	pachico	12.771168	-6.642324	comment	15.0	83.0	1693223548	10.339121
37381404	As a hobbyist web dev using Rails, I	"As a hobbyist web dev using Rails, I am watching the JavaScript ecosystem from some distance - the mere JS experience I have is very vanilla or through StimulusJS/Hotwire.For the 3 years I have played with the web, I have been seduced to dive into a framework that is ""fullstack"" JavaScript to learn the language that is seemingly everywhere and ""here to stay"".I have seen dozens of articles like this one for all the major frameworks around - some not really maintained over time. I cannot find, in the JS ecosystem, the stability I know in the Rails ecosystem. I fall in a state where I search for objective arguments, hesitate, and end up not taking any decision.For those who know better, what is your current bet for a JavaScript (or TypeScript for that matter) framework that will last* the nex"	pil0u	12.596583	-6.560026	comment	15.0	77.0	1693841269	12.310135
37529381	We use TypeScript not based on prefe	We use TypeScript not based on preference, but because we want to make money	paularmstrong	12.385571	-6.8209023	story	15.0	34.0	1694813577	-10.442552
24867401	I don't really understand why in 202	"I don't really understand why in 2020 there's still this kind of blind hatred against this language. It often comes from horrible bad memories from previous versions or old frameworks.Objectively, compared to other languages i've been working with   it is more than OK. Despite it's lack of ""style"" it is easy to understand, host, tests, diagnose and it is powerfull for web applications.I've been working on a SaaS API with Symfony now for 2 years, our metrics are good...It is a good tool, it builds good softwaresIt's essentially sinking in popularity because of bad faith and lack of hype, really sad !"	TheHemric	12.753755	-6.6570272	comment	15.0	93.0	1603444167	-3.8110569
25156065	I love typescript but its types are 	"I love typescript but its types are becoming so complicated it's turning into a dynamic language...I mean one can't represent the all possibilities of JavaScript ""types"" without re-implementing JavaScript itself, only a subset. I wonder where Typescript will stop.I'd like to see Typescript compiling to ""native"" as well."	throw_m239339	12.35331	-6.7982173	comment	15.0	164.0	1605831874	-10.445145
25187507	Django refactoring game – can you fi	Django refactoring game – can you fix all the Models anti-patterns?	rikatee	12.75321	-6.5671597	story	15.0	80.0	1606144301	10.089159
38610942	Htmx Is a Erlang	Htmx Is a Erlang	alfonsodev	12.568071	-7.495975	story	15.0	122.0	1702379940	12.891287
22090358	Yukihiro Matsumoto: “Ruby is designe	Yukihiro Matsumoto: “Ruby is designed for humans, not machines”	Evrone	12.635314	-7.0498476	story	15.0	248.0	1579425701	12.426442
22158130	Elixir v1.10	Elixir v1.10	micmus	12.683868	-7.4547276	story	15.0	364.0	1580120380	12.945848
19207642	I used to drink a lot of cool-aid fr	"I used to drink a lot of cool-aid from erlang. It is true, that they have got concurrency model right. They embraced actor model, messages between processies are copied over for a good reason, etc. However, I don't think it is enough to call it a day.
Comparing to modern languages, erlang lacks a lot. Elixir is trying to fill those gaps, but how many layers of abstraction can you add to an ecosystem before it is unusable? With go and rust available, erlang/elixir looks like a very good tool but for a very limited pool of use cases - routing/filtering/messaging."	eddd	12.501203	-7.4891944	comment	15.0	100.0	1550669763	12.887983
19247535	Mint, a new HTTP library for Elixir	Mint, a new HTTP library for Elixir	jparise	12.668925	-7.4244432	story	15.0	275.0	1551116540	12.93772
19311750	Achieving 100k connections per secon	Achieving 100k connections per second with Elixir	slashdotdash	12.632134	-7.452944	story	15.0	544.0	1551804019	12.902944
19569959	Malicious remote code execution back	Malicious remote code execution backdoor discovered bootstrap-sass Ruby gem	qzio	12.667533	-6.936817	story	15.0	147.0	1554361893	12.344351
19917954	I've actually been really impressed 	I've actually been really impressed with Laravel after switching back to PHP for a few projects. Not only is the developer tooling experience some of the best I've experienced, it's just really the only framework I've ever experienced with a high quality ecosystem of tools—from Forge[1], which makes it dead-simple to deploy a Laravel app into production to things like Horizon, for managing Redis queues.A great example of this in action is Laravel Spark[3], a first party base for building paid SaaS apps. I built and launched a writing tool, Write Together[2], to the world in under three weeks, payment systems and all, and got 150 paying customers in a matter of a few weeks. One hell of a great way to MVP an idea and build something useful, in a low amount of time.I'm basically developing tw	owenwil	12.811748	-6.6411242	comment	15.0	114.0	1557915570	10.342481
16159389	Convert React JavaScript Code to Typ	Convert React JavaScript Code to TypeScript with Proper Typing	styfle	12.412186	-6.756957	story	15.0	216.0	1516120353	-10.440247
16160453	Our Ambitious Plan to Make Insecure 	Our Ambitious Plan to Make Insecure PHP Software a Thing of the Past	CiPHPerCoder	12.770517	-6.562709	story	15.0	139.0	1516126215	10.333383
16208809	Elixir on Google Cloud Platform and 	Elixir on Google Cloud Platform and App Engine	shalabhc	12.698648	-7.4370384	story	15.0	510.0	1516661214	12.894604
17808442	Dynamic Django Models with Model Mod	Dynamic Django Models with Model Models	jonatron	12.946519	-6.447552	story	15.0	103.0	1534847303	10.012427
17856693	Of course it is. The question is kin	Of course it is. The question is kind of silly. For basically any startup, my advice would be: unless and until you can credibly explain a genuine reason why you can't use Rails - use Rails.I'm not some crazy fanboy but until someone can actually name a seriously competitive, batteries-included, all-in-one framework* which delivers everything, or even most of, what Rails does - it is very relevant and you ignore it to your serious disadvantage.* your list of 30 random npm packages does not satisfy the requirement	sho	12.754601	-6.9025593	comment	15.0	111.0	1535433585	12.360045
21280092	An Interview with Jose Valim, Creato	An Interview with Jose Valim, Creator of Elixir	wickwavy	12.693322	-7.461919	story	15.0	320.0	1571302294	12.945808
21395295	Httpx: A Ruby HTTP library	Httpx: A Ruby HTTP library	damir	12.616255	-6.8767624	story	15.0	157.0	1572420104	12.339484
18414084	ReasonML: Strict, powerful and forgi	ReasonML: Strict, powerful and forgiving	jasim	12.366274	-7.571851	story	15.0	165.0	1541769206	10.332117
18645757	Combining Golang and PHP can solve r	Combining Golang and PHP can solve real-world development challenges	dhotson	12.67832	-6.7348948	story	15.0	70.0	1544424406	10.276709
18655391	Twenty Years of Open Source Erlang: 	Twenty Years of Open Source Erlang: A Retrospective from the trenches	francescoc	12.551817	-7.513973	story	15.0	287.0	1544537736	-9.292365
18874029	Ruby is the very least favorite of a	Ruby is the very least favorite of all the programming languages I've had to use regularly over my career.Its syntax strongly favors cuteness over familiarity. Wherever Ruby can diverge from expectations to give you a pointless little tickle of whimsical inventiveness instead, it seems to do so.Visually it looks like an unwanted love child of Pascal and Python. There's no clear rhyme or reason to the use of sigils and keywords.The standard library and built-in types are acceptable for a mediocre '90s scripting language, I guess. The difference between symbols and strings as hashmap keys is a footgun that opens up endless bugs for the type of glue code that you'd often be writing in Ruby.Probably the only thing that keeps Ruby afloat is Rails, an extremely resource-intensive web server fram	pavlov	12.500639	-7.0579953	comment	15.0	141.0	1547130555	12.4057045
29870321	State of the Web: Deno	State of the Web: Deno	markhaslam	12.498531	-6.4516864	story	15.0	147.0	1641786031	-10.978235
29890565	Is it just me or PHP's evolution is 	"Is it just me or PHP's evolution is a bit ""too little, too late"" for an almost 30-years old language?PHP is not a likable language but it's probably not going away any time soon. Its concept of ""one endpoint is one script"" is one of its biggest killer features that no other language has been able to deploy in such an accessible manner. Well, Perl and old-style CGI aside, of course.That, and also the fact that it may be pretty much the only dynamic language in use today with ARC and not a GC. Funny how PHP devs are often unaware of this.Anyway I wish the language at least evolved faster and we wouldn't wait for 8.0 to have global `const` definitions instead of the archaic `define()` for example."	mojuba	12.739807	-6.646591	comment	15.0	99.0	1641903052	10.299826
30357094	Ask HN: Beginner to Competent in Pyt	Ask HN: Beginner to Competent in Python: How would you approach it?	surds	12.465422	-6.975226	story	15.0	21.0	1644994815	1.9588763
12741037	Donald Knuth used an Erlang-like not	Donald Knuth used an Erlang-like notation	old_sound	12.528344	-7.5114555	story	15.0	149.0	1476850735	12.894443
12940615	Show HN: Writing an HTTP server in P	Show HN: Writing an HTTP server in Prolog	jamesbvaughan	13.120747	-7.227013	story	15.0	238.0	1478990551	-12.482934
13474738	What's all this fuss about Erlang? (	What's all this fuss about Erlang? (2007)	krat0sprakhar	12.558424	-7.517035	story	15.0	231.0	1485286803	-5.457368
27840960	Ask HN: What's the quickest method/f	Ask HN: What's the quickest method/framework to set up a basic CRUD app?	mrsmee89	12.763642	-6.9227037	story	15.0	29.0	1626317720	12.3694725
12328885	I Botched a Perl 6 Release	I Botched a Perl 6 Release	zoffix222	12.3390665	-7.0404897	story	15.0	121.0	1471738581	13.211676
28180531	The Perl Foundation is fragmenting o	The Perl Foundation is fragmenting over Code of Conduct enforcement	lycopodiopsida	12.328521	-7.0185843	story	15.0	77.0	1628948485	13.1906805
28601055	Ruby Packer – Distribute Ruby code a	Ruby Packer – Distribute Ruby code as a compiled binary	burlesona	12.501224	-6.920366	story	15.0	153.0	1632187200	-9.246618
23077638	Even with PHP7, PHP still feels like	Even with PHP7, PHP still feels like it is playing catch up.  There is nothing new or revolutionary in PHP7, just adopting features present in other major languages.  Adopting as other newer languages like Go and Rust seems to be moving beyond those features.  A catch up into a world that's on its way out, if one will feel so blunt.PHP's raison d'être remains its ease of getting an instance running on a webserver.  But with fewer people self-hosting these days, that has become less an advantage.  And even for those who do self-host, the advantage is becoming narrower as other languages have made it easier to distribute their web applications.Pascal, COBOL, Oracle DB and PHP today seems like technologies that only stick around because they are legacies being maintained, not because people s	Svip	12.764673	-6.6503906	comment	15.0	96.0	1588665911	10.344837
33276549	Aside from Shopify and others from t	Aside from Shopify and others from that era, what modern SaaS offerings are choosing Rails (or Ruby) for their main app? I had one last peer still using Rails, and since Heroku's been on the ropes they're out.Other than DHH adherents, is anybody still excited about Rails? To draw an even smaller circle, is anybody still excited about Ruby when Rails isn't involved?	aliqot	12.749046	-6.9282823	comment	15.0	65.0	1666281100	12.354987
33521561	Differential Datalog: a programming 	Differential Datalog: a programming language for incremental computation	jitl	13.12756	-7.007573	story	15.0	170.0	1667928212	-7.26599
33782437	> Crystalian [being the name for Cry	> Crystalian [being the name for Crystal users/evangelists]Man, there have to be better alternatives than this.Did you try “crystacean?” Chuckles in .rs.	raydiatian	12.645966	-7.259214	comment	15.0	60.0	1669684765	-11.236985
34067175	I was a devoted rails fan 10 years a	I was a devoted rails fan 10 years ago, but haven't looked back since full stack typescript.What's the general vibe on RoR nowadays?	brntsllvn	12.707056	-6.9664607	comment	15.0	91.0	1671550013	12.356564
26738227	How do you start learning this bread	How do you start learning this breadth of software engineering? I consider myself good in the python / django space, but where do I start with learning these infrastructure technologies? I find that I use them once or twice periodically, and then don't touch them for so long, so I forget much of what I have learned.	wmichelin	12.714309	-6.530065	comment	15.0	63.0	1617887327	10.09757
26779152	I am stepping down from Perl Steerin	I am stepping down from Perl Steering Council and Core	jnotberg	12.33628	-7.0432734	story	15.0	141.0	1618234077	13.20398
27240728	It’s hard to explain just how much e	It’s hard to explain just how much easier PHP made creating a dynamic web site back in the 90s / early 00s.You drop a file in your public web server folder and you’re done. Prior was CGI Perl scripts that hacked together how to access session and rest data. Or you had to develop in C. PHP had native support for the web. It also eliminate the need for an app server.I’m still not certain even today, if anything exists that is faster to get a dynamic site up and running than PHP.	alberth	12.742855	-6.579996	comment	15.0	120.0	1621635861	10.308493
37630628	TypeScript NPM Packages Done Right	TypeScript NPM Packages Done Right	chatgidipi	12.388879	-6.630877	story	15.0	102.0	1695536910	-10.44478
38402361	PHP 8.3	PHP 8.3	daco	12.77106	-6.6537476	story	15.0	118.0	1700821080	10.316721
15036060	Elixir in Depth – Reading and person	Elixir in Depth – Reading and personal notes	rudi-c	12.708857	-7.455789	story	15.0	337.0	1502972716	12.946833
15234643	Flow and TypeScript	Flow and TypeScript	msoad	12.442504	-6.7517624	story	15.0	146.0	1505265063	-10.47484
15448739	My essential django package list	My essential django package list	spapas82	12.814531	-6.5470934	story	15.0	190.0	1507719748	10.105987
23705501	Why does a new Rails app need 106 MB	Why does a new Rails app need 106 MB of JavaScript?	rileytg	12.579088	-6.542337	story	16.0	64.0	1593632069	12.315059
23959713	Run PHP in the browser through Babel	Run PHP in the browser through Babel	tambourine_man	12.658723	-6.5330086	story	16.0	102.0	1595793555	10.347887
24048046	Django 3.1	Django 3.1	gingerjoos	12.836527	-6.5151544	story	16.0	341.0	1596531603	10.078684
24369892	Ruby adds experimental support for R	Ruby adds experimental support for Rightward assignments	matagus	12.456428	-7.091911	story	16.0	34.0	1599174757	12.374629
20029836	If PHP Were British (2011)	If PHP Were British (2011)	grepgeek	12.764308	-6.641551	story	16.0	94.0	1559050564	-1.8365021
13617394	Ask HN: What's your go-to stack for 	Ask HN: What's your go-to stack for prototyping web applications and MVPs?	JohnnySpaghetti	12.814384	-6.7918773	story	16.0	20.0	1486749472	12.316064
14064084	Ask HN: Drupal or Django for my star	Ask HN: Drupal or Django for my startup? and why	pepeto	12.789598	-6.4793367	story	16.0	14.0	1491605748	10.045194
14580680	How is Ruby different in Japan?	How is Ruby different in Japan?	galfarragem	12.630161	-7.0550265	story	16.0	302.0	1497794669	12.398952
14676505	Pony: Combining safe memory sharing 	Pony: Combining safe memory sharing with Erlang-like actors	samuell	12.363442	-7.513545	story	16.0	202.0	1498906516	12.859718
30833555	Sorbet: Stripe's Type Checker for Ru	Sorbet: Stripe's Type Checker for Ruby	joeyespo	12.551334	-7.1088185	story	16.0	190.0	1648490671	12.382395
31641014	The Power of Prolog	The Power of Prolog	jsfcoding	13.15153	-7.305718	story	16.0	279.0	1654526040	12.699652
29049881	Async Ruby	Async Ruby	brunosutic	12.536109	-6.976738	story	16.0	305.0	1635610298	12.330433
29575066	Going to somewhat hijack this to ask	Going to somewhat hijack this to ask a question. Are there any popular non-Rails uses for Ruby? I'd like to learn Ruby but it seems that Python and Ruby occupy the same space and use cases so you really only need to know one of them.	BoysenberryPi	12.641033	-6.9760222	comment	16.0	84.0	1639630614	12.360668
34411469	I used to work way back in the day o	I used to work way back in the day on PHP too, but even though I'm sure this will be downvoted, it's really sad people still take it seriously as a language in 2023. There's nothing remotely elegant about it. It's not expressive or programmatically succinct in the way Ruby is. It's not beautifully well thought-out the way Python is. It's not fast and modern in the way Rust is. It's not elegant or composable or client-side renderable in the way React.*script is. It just brings nothing to the table. It's an ugly hodgepodge borne out of an over-engineered homepage from 28 years ago. Various business interests have kept it afloat, and people who don't know any better keep championing it. I think people do eventually catch up with what's going on though as soon as they personally experience wri	zeptonix	12.707869	-6.7156005	comment	16.0	94.0	1673956633	10.374708
35036637	Phoenix 1.7.0	Phoenix 1.7.0	thefreeman	12.832729	-7.008207	story	16.0	356.0	1678068006	12.710241
35054163	RJIT, a new JIT for Ruby	RJIT, a new JIT for Ruby	pmarin	12.597868	-7.049233	story	16.0	336.0	1678188593	12.373485
36598320	I don't know whose brilliant idea it	"I don't know whose brilliant idea it was to turn TypeScript's type system into a Turing-complete language but now many developers are actually using it as such on real projects and it's a massive productivity drain and it makes some code impossible to read... Often, the IDE can't even display the type when you hover over the variable because it's too darn complicated.Did anyone ever think ""Hang on, maybe the problem, the reason why coding is so difficult is that interfaces are often too darn complicated to keep track of? Oh, wait a minute, if the interfaces were really simple, would we even need TypeScript at all? Why don't we just design our software in such a way that the interfaces between components are simple so that we can easily remember which functions accept what kinds of input wi"	jongjong	12.339753	-6.843019	comment	16.0	94.0	1688552690	-10.428279
36771304	Inconvenient Truths about TypeScript	Inconvenient Truths about TypeScript	samwillis	12.3550825	-6.85709	story	16.0	52.0	1689684373	-10.4381275
36995940	Elixir Livebook is a secret weapon f	Elixir Livebook is a secret weapon for documentation	behnamoh	12.680728	-7.4077435	story	16.0	312.0	1691128300	12.894978
37202714	Ruby's hash is a Swiss-army knife	Ruby's hash is a Swiss-army knife	software_writer	12.61317	-7.05457	story	16.0	168.0	1692563790	12.38318
37244236	I work on Bun - happy to answer any 	I work on Bun - happy to answer any questions	Jarred	12.460079	-6.443778	comment	16.0	139.0	1692842496	10.899426
37422615	Persimmon-8B	Persimmon-8B	jgershen	12.350482	-7.0484605	story	16.0	175.0	1694108267	13.1704855
24698086	Elixir 1.11	Elixir 1.11	nifoc	12.705608	-7.4294405	story	16.0	381.0	1601995084	12.940044
25199070	Tips for Performant TypeScript	Tips for Performant TypeScript	nkjoep	12.389117	-6.8056297	story	16.0	281.0	1606230368	-10.441745
38689004	I know it's not the point of the art	"I know it's not the point of the article, but, as a code reviewer, this:> Well written ruby code can often read like natural language. Features like predicate methods even give up punctuation. [...] This is often why ruby programmers don’t like comments. In most cases, the language makes comments unnecessary.churns my stomach. Good comments are rarely about saying what the code does, they're about explaining _why_ the code does what it does. Regardless of how comprehensible ruby code is, it doesn't change the need for comments. If I had a nickel for every time I gave a commit a -1 review because it had too few comments or the wrong kind of comments or lacked a ""why"" commit message, I'd be a rich man."	tines	12.485527	-7.069045	comment	16.0	61.0	1702937082	2.3236547
38760477	Ruby 3.3	Ruby 3.3	dduugg	12.628774	-7.037092	story	16.0	605.0	1703487677	12.388732
32259934	HypeScript: Simplified TypeScript ty	HypeScript: Simplified TypeScript type system in TypeScript's own type system	kerneloops	12.331716	-6.8796334	story	16.0	202.0	1658976153	-10.440245
22158665	Having learnt Ruby and a bit of Erla	Having learnt Ruby and a bit of Erlang, I'm interested in Elixir so I fire this tangential question:How would you recommend to learn Elixir? And a follow-up: some ideas for personal Elixir-based projects?	happy_path	12.676592	-7.4389944	comment	16.0	70.0	1580127889	12.925802
16211864	Perl 6 Optimism	Perl 6 Optimism	vgy7ujm	12.335437	-7.046643	story	16.0	157.0	1516695246	13.186293
16245606	My Delorean runs Perl	My Delorean runs Perl	rcarmo	12.344303	-7.0356812	story	16.0	190.0	1517047417	13.176456
16275598	Announcing TypeScript 2.7	Announcing TypeScript 2.7	DanRosenwasser	12.413933	-6.8306623	story	16.0	193.0	1517419952	-10.537827
17217847	For some reason people seem to const	For some reason people seem to constant doubt Ruby-ists and Rails Devs.I completely get that other languages have huge benefits over Ruby. Golang being compiled or Java running anywhere, etc... And ruby is slow, totally understood.But if youre talking about getting a functioning webapp up and running quickly... no way anyone is beating a Rails dev in setting one up. The piping and scaffolding are all built in and the gem ecosystem (for web apps specifically) is so well maintained and robust that you can drop it in to your app and get a functioning product with ease.I know that's a loaded statement bc Rails becomes not so great in other cases like building speedy backend jobs. But for a small user-facing web app it's hands down the best.	nooyurrsdey	12.705708	-6.955659	comment	16.0	100.0	1527998563	12.354013
17853755	Good thing in PHP nobody talks about	Good thing in PHP nobody talks about	jetter	12.76149	-6.6441727	story	16.0	69.0	1535398343	10.299762
21559670	Kay was at least as inspired by biol	"Kay was at least as inspired by biological processes -- bacteria transmitting chemical signals to one another, for instance -- as he was by computer networks.I think the big thing that Kay missed was asynchronicity. What Kay was thinking of when he coined the term ""object oriented"" -- rather than C++ -- was a sort of synchronous actor model in which the actor would always wait for a response after sending a message. This maps nicely onto function calls, but considerably more power can be had by letting the actor optionally continue doing stuff while awaiting a response. Bacteria continue to metabolize after sending chemical signals to their brethren after all!As I've seen it said, Erlang is Smalltalk done right."	bitwize	12.401315	-7.502404	comment	16.0	123.0	1574020312	-9.261345
18213657	Where Ruby/Sinatra falls short	Where Ruby/Sinatra falls short	onli	12.638977	-7.039368	story	16.0	59.0	1539534559	-10.596587
18767257	Sketches of Elixir	Sketches of Elixir	signa11	12.693529	-7.4611225	story	16.0	204.0	1545884092	12.946386
18884040	PHP Apprentice – An online, open-sou	PHP Apprentice – An online, open-source book for learning PHP	restoreddev	12.770167	-6.62772	story	16.0	268.0	1547219624	10.334406
30303237	Show HN: LiveViewJS – TypeScript bac	Show HN: LiveViewJS – TypeScript back end for LiveView Apps (Phoenix LiveView)	floodfx	12.8888235	-6.8512444	story	16.0	146.0	1644596523	12.722834
30331608	Polaris Program	Polaris Program	dkyc	12.35571	-6.4866943	story	16.0	121.0	1644844569	10.14809
12705489	Hack and HHVM solves what is, IMO, t	"Hack and HHVM solves what is, IMO, the worst feature of the default PHP runtime environment[0] - and that is the superglobals.It wasn't mentioned in the post from Slack, but default superglobals and the earlier register_globals design decisions are the worst and most impactful wart in PHP.Because it was designed as a templating language, the default web server interface, which is CGI - will auto-expose all variables in global scope, ex.    echo $_POST['user_id']

PHP has a horrible reputation with security for this reason - we all know that somehow, somewhere, in almost every project someone is pulling in a user-controlled variable from a superglobal and they aren't escaping or checking it properly (since you can't be warned about it but the feature will work).Worse - and i've seen this a "	nikcub	12.749561	-6.5873265	comment	16.0	131.0	1476407079	10.271795
12921570	PHP 7 at Tumblr	PHP 7 at Tumblr	llambda	12.763815	-6.6545973	story	16.0	303.0	1478794083	10.243335
13260234	The Linux 2.5, Ruby 1.9 and Python 3	The Linux 2.5, Ruby 1.9 and Python 3 release management anti-pattern	BuuQu9hu	12.394626	-6.8953533	story	16.0	157.0	1482793181	12.405281
13499067	Rails developers should learn React	Rails developers should learn React	revorad	12.836223	-6.569062	story	16.0	56.0	1485515439	12.291126
12470715	Why Ruby is an acceptable Lisp (2005	Why Ruby is an acceptable Lisp (2005)	behnamoh	12.576805	-7.058102	story	16.0	139.0	1473538663	12.414296
28391531	Ruby Is Still a Diamond	Ruby Is Still a Diamond	thunderbong	12.630274	-7.0481715	story	16.0	150.0	1630587791	12.383916
22892401	Phoenix LiveDashboard	Phoenix LiveDashboard	feross	12.890175	-6.8959775	story	16.0	419.0	1587063826	-2.151668
23166554	OTP 23	OTP 23	nifoc	12.587518	-7.469407	story	16.0	395.0	1589375649	12.862794
33361450	Deno 1.27	Deno 1.27	Mikkel-T	12.530237	-6.4556093	story	16.0	195.0	1666893658	-11.030128
33440030	PR that converts the TypeScript repo	PR that converts the TypeScript repo from namespaces to modules	Kyza	12.406481	-6.6877174	story	16.0	338.0	1667411345	-10.479044
37787130	Rails 7.1 Released	Rails 7.1 Released	sathishmanohar	12.737642	-6.9573464	story	16.0	265.0	1696566696	12.341124
14884304	Honest, sincere, question here:How i	Honest, sincere, question here:How is programming in PHP these days? I haven't used the language since 4.x-5.2 or so. I wrote it off completely when Hack and HHVM came out due to the nuances between it and PHP proper (not to say either is bad, it was just another barrier, and set of choices I didn't care to deal with). I typically write Ruby, Elixir, and some JVM based languages these days. Any new features or language changes that make it more pleasant or any good use cases compared to my usual languages? I will add using it anywhere, while a valid use case, isn't something particularly attractive to me.Edit: just wanted to say thanks for all the good comments posted so far!	rubyn00bie	12.757672	-6.638947	comment	16.0	108.0	1501385591	10.341157
15163312	Build command line apps using PHP 7	Build command line apps using PHP 7	webNeat	12.748305	-6.633159	story	16.0	44.0	1504466573	10.337257
15641823	I switched from Ruby (after ~8 years	I switched from Ruby (after ~8 years) to JavaScript at the beginning of this year, and Ruby is a dream in comparison:- Thanks to the proliferation of Rails and similar frameworks, most Ruby apps at least have something that resembles an MVC structure. With JavaScript, once you move past the basic TodoMVC examples you are pretty much on your own. It gives you enough rope to hang yourself, all you colleagues, and everyone in the building next door.- The expect vs should change in RSpec is nothing compared to how fast things are changing in JavaScript. I think there are now 7 different ways of just defining a module.- The stdlib of Ruby is pretty sensible. JavaScript has many inconsistencies (take Array.slice vs Array.splice - one modifies the original array, and the other does not), and you 	lucaspiller	12.682037	-6.877714	comment	16.0	222.0	1510044054	12.329978
23463182	This cones as no surprise to me, as 	This cones as no surprise to me, as TypeScript is a transpiled language. I know this is probably an unpopular opinion at HN, but I am a huge supporter of plain old JavaScript and have never really seen the benefits of DSLs like this. Coffeescript was especially pointless to me when I had to use it on a project. My reasons are simple: debugging becomes much more difficult when you add a layer of abstraction. It compiles to JavaScript anyway, and sometimes it does so in very odd ways that makes it difficult to understand the relationship between what you wrote and what it produced. IMO, straight JavaScript is more than adequate for most scenarios if you know the language well enough, especially with the powerful features built into the more recent versions. In my 20 years as a (mostly) front	temporallobe	12.4001255	-6.6451187	comment	17.0	109.0	1591671411	-10.527408
20643645	Ask HN: What is the state-of-the-art	Ask HN: What is the state-of-the-art environment for developing Erlang code?	arnon	12.569018	-7.519439	story	17.0	76.0	1565265318	12.908066
20911993	25 Years of PHP [video]	25 Years of PHP [video]	rakibtg	12.776745	-6.623907	story	17.0	181.0	1567964335	10.356749
20916211	Google Feedback on TypeScript 3.5	Google Feedback on TypeScript 3.5	dkns	12.375908	-6.853194	story	17.0	396.0	1568017764	-10.547737
14281093	Ask HN: Looking for the best Phoenix	Ask HN: Looking for the best Phoenix/Elixir/Erlang Tutorials	patientplatypus	12.662403	-7.446317	story	17.0	95.0	1494089164	12.904104
14504244	Pharo 6.0 Released	Pharo 6.0 Released	ch_123	12.34012	-7.257255	story	17.0	118.0	1496818825	7.141048
30863073	What do new Sudoku techniques teach 	What do new Sudoku techniques teach us about real-world problem solving?	Ariarule	13.449467	-7.4089055	story	17.0	244.0	1648691971	15.077471
31153698	Whats New in PHP 8.2	Whats New in PHP 8.2	maydemir	12.785537	-6.6428003	story	17.0	148.0	1650890970	10.323888
25494789	Ruby 3.0.0 RC1	Ruby 3.0.0 RC1	chenzhekl	12.638262	-7.0394535	story	17.0	327.0	1608557903	12.403489
26151575	Learning Ruby: Things I Like, Things	Learning Ruby: Things I Like, Things I Miss from Python	OKRHero	12.487528	-7.0342617	story	17.0	205.0	1613458213	12.380984
26318762	> I always felt that adding types to	"> I always felt that adding types to the functions/variables and satisfying the TypeScript compiler is an over-engineering and not providing any meaningful benefits.I honestly find this attitude horrifying. I'm glad the author was able to move on from this, but it is utterly pervasive in some parts of our industry.As far as ""engineering"" goes, specifying your types is about as low-hanging, basic a step as you can take. If this is ""over-engineering"" then I think that says a lot about how much thought, design and engineering goes into some of these code bases."	mdoms	12.359023	-6.8341026	comment	17.0	106.0	1614710552	-10.452308
26453174	Emacs-ng: Emacs with Deno runtime an	Emacs-ng: Emacs with Deno runtime and TypeScript	karlicoss	12.482745	-6.4958405	story	17.0	177.0	1615702019	-10.852042
35966890	What's special about Erlang and Elix	What's special about Erlang and Elixir?	bedobi	12.6126375	-7.471817	story	17.0	45.0	1684266814	12.910072
35973151	Managing State with Signals	Managing State with Signals	geospeck	12.335515	-6.507441	story	17.0	208.0	1684316753	8.706408
28837333	How Laravel Livewire works	How Laravel Livewire works	clementmas	12.839123	-6.663389	story	17.0	116.0	1634026728	-5.031434
29578423	I couldn't agree more.Recently I swi	I couldn't agree more.Recently I switched back to Rails after 10 years. I can't say I enjoy the whole asset pipeline business but I yearn for a simpler time and Rails gives that (to a degree).My only wish it was simpler to host. I don't necessary want to buy into render.com or heroku.	haarts	12.768056	-6.917551	comment	17.0	131.0	1639664846	12.332551
34164221	Prolog at Work	Prolog at Work	triska	13.143017	-7.2976513	story	17.0	163.0	1672253088	-12.489307
34337667	Django Styleguide	Django Styleguide	r4victor	12.77079	-6.5362306	story	17.0	177.0	1673440312	10.074501
34427081	Tar.pl – A tar creator and extractor	Tar.pl – A tar creator and extractor in ~130 lines of Prolog	superdisk	13.141179	-7.2977457	story	17.0	271.0	1674052695	-12.497691
34430458	Bun v0.5	Bun v0.5	cyclecity	12.476133	-6.4445977	story	17.0	330.0	1674065353	-10.76985
36823723	Bun v0.7.0	Bun v0.7.0	sshroot	12.472468	-6.450278	story	17.0	206.0	1690005851	-10.754256
37480564	My time with Rails is up (2016)	My time with Rails is up (2016)	Palmik	12.771811	-6.932488	story	17.0	39.0	1694524011	12.3930025
24432464	Ask HN: Would you use Phoenix/Elixir	Ask HN: Would you use Phoenix/Elixir for your SaaS startup?	antfarm	12.779011	-7.164031	story	17.0	26.0	1599746712	12.783812
24450512	Changelog for Elixir v1.11	Changelog for Elixir v1.11	lobo_tuerto	12.692239	-7.4563518	story	17.0	153.0	1599894500	12.95069
25021660	I’m curious, is anyone doing active 	I’m curious, is anyone doing active development with Perl? All the Perl I’ve seen has been in legacy systems.	randmeerkat	12.328338	-7.0170326	comment	17.0	51.0	1604797064	13.184573
38697752	Tsdocs.dev: Type docs for any JavaSc	Tsdocs.dev: Type docs for any JavaScript library	webartisan	12.376719	-6.7391	story	17.0	224.0	1703003655	-10.412499
32280057	Choosing PHP in 2022 and beyond	Choosing PHP in 2022 and beyond	dabernathy89	12.767055	-6.6346273	story	17.0	55.0	1659117984	10.342062
32408716	Faster Ruby: Thoughts from the outsi	Faster Ruby: Thoughts from the outside	pvsukale3	12.603084	-7.039037	story	17.0	242.0	1660115986	12.364967
22286237	Is a Dataframe Just a Table? (2019) 	Is a Dataframe Just a Table? (2019) [pdf]	luu	12.3752775	-6.448039	story	17.0	193.0	1581305660	10.017878
19389114	What causes Ruby memory bloat?	What causes Ruby memory bloat?	adamors	12.503417	-7.041785	story	17.0	185.0	1552570977	-11.30308
15915178	Server-Side I/O Performance: Node vs	Server-Side I/O Performance: Node vs. PHP vs. Java vs. Go	vgallur	12.407985	-6.6192107	story	17.0	69.0	1513182139	9.968283
17218257	Vanilla php + html5up + sqlite3.Ever	Vanilla php + html5up + sqlite3.Everyone else here is trying to be stylish and fancy.Your customers don't care what language it's in or whether the code is beautiful.No cutting edge incomplete frameworks, convoluted tooling, piles of inaccurate documentation to read, inexplicable cryptic error messages with a bunch of incorrect solutions on stack overflow, or other incompetently over engineered bullshit.Just go as vanilla, basic, and standard as possible.True speed comes when you don't have to deal with other people's bugs and poorly designed mistakes.Don't rely on code written by flocks of people you'd never hire in a million years.	kristopolous	12.752285	-6.5370255	comment	17.0	125.0	1528008018	10.277114
17218190	Cisco says 90% of internet traffic g	Cisco says 90% of internet traffic goes through Erlang-controlled nodes	okket	12.567994	-7.509437	story	17.0	304.0	1528006878	12.915982
21567577	I think a simple web stack should as	"I think a simple web stack should aspire to the simplicity of the PHP stack, twenty years ago:1) Create a directory ""foo"" on your server2) Make a file called ""bar.php"" in that directory3) Write ""Hello World!"" in the file4) Open http://localhost/foo/bar.php in the browser and see ""Hello World!""Lines of code or configuration so far: zero.5) Add some actual code to bar.php6) Reload the page and see the resultNumber of steps to rebuild or restart: zero.Then you can add templating, routing, logging, testing, anything. I'm not married to the PHP language, it's a mess. But the idea of keeping simple things simple is very important, and from what I see of today's developers, that idea has been utterly forgotten. Memory-holed. It's astonishing, I can barely believe that it happened.EDIT: Sorry, I j"	cousin_it	12.748246	-6.5925756	comment	17.0	108.0	1574107080	10.302149
39286986	ElixirNitpicks	ElixirNitpicks	thunderbong	12.695991	-7.461195	story	17.0	100.0	1707303214	12.946358
18265199	As someone who has worked two jobs n	As someone who has worked two jobs now writing, deploying, and operating Erlang clusters, I recommend switching to Rust. Erlang requires a lot of TLC to get right, it's super slow, and it's hard to burst. Like, super hard to burst. Erlang nodes are meant to cluster as a k graph and never go down. Modern ops, especially container ops, does availability through ephemerality of services. The BEAM just doesn't like to be treated like cattle. Also Erlang has notoriously bad error messages, very little abstraction, and converting between binary strings and lists is a pain. Gaining Erlang operational knowledge also takes a while. We eventually had to rewrite things like gen_server, ditch mnesia etc. as we scaled.So why Rust? Like Erlang, it's damn good at concurrency and enables functional progra	ilovecaching	12.4550705	-7.53442	comment	17.0	130.0	1540066637	12.891963
18402634	Phoenix 1.4.0 released	Phoenix 1.4.0 released	rehemiau	12.81537	-7.004362	story	17.0	291.0	1541626793	-12.654894
18778743	PHP + Ajax scripts or the modern eco	PHP + Ajax scripts or the modern ecosystem dilemma	seapunk	12.669637	-6.4490895	story	17.0	79.0	1546024164	10.277695
18883150	Ask HN: What lang and web stack is b	Ask HN: What lang and web stack is both popular and similar to Ruby and Rails?	philonoist	12.523299	-7.0498	story	17.0	26.0	1547210738	-5.771483
12012913	Ask HN: As a Python developer, what 	Ask HN: As a Python developer, what am I missing for not using Ruby?	15DCFA8F	12.510212	-7.0108266	story	17.0	33.0	1467331512	12.373254
12071079	So, I know that Elixir is powerful a	"So, I know that Elixir is powerful and good at functional programming. The one thing I can't quite understand is why we would want to program everything as a composition of individual programs and applications, with supervisors and application trees and message passing and the like. It seems like a lot of overhead to accomplish something. Making everything asynchronous and detached makes things more complicated, not less.I hear a lot about OTP and the ""let it crash"" mantra, but I just don't quite understand what's so great about it. Maybe it's just due to my problem domain (web development), but it doesn't seem like as big a draw to Elixir and Erlang as pattern matching and FP are."	rpazyaquian	12.614328	-7.473471	comment	17.0	98.0	1468245892	12.89279
12072192	Announcing TypeScript 2.0 Beta	Announcing TypeScript 2.0 Beta	DanRosenwasser	12.411581	-6.831322	story	17.0	359.0	1468254640	-10.553002
12273417	Scaling Rails to 125,000 Requests pe	Scaling Rails to 125,000 Requests per Minute on Heroku	pritambarhate	12.742576	-6.8386354	story	17.0	74.0	1470976605	12.294683
12325927	Ask HN: What web framework should I 	Ask HN: What web framework should I use nowadays?	ehsan_akbari	12.702058	-6.6541624	story	17.0	20.0	1471687731	10.321443
12450501	Proposal of a new concurrency model 	Proposal of a new concurrency model for Ruby 3 [pdf]	tenderlove	12.60675	-6.9543457	story	17.0	188.0	1473312565	12.331329
12491299	How I spent two weeks hunting a memo	How I spent two weeks hunting a memory leak in Ruby (2015)	Whitespace	12.40228	-7.034509	story	17.0	165.0	1473793783	-11.279984
23182127	How to Fix Slow Code in Ruby	How to Fix Slow Code in Ruby	gmcabrita	12.606417	-7.0128636	story	17.0	210.0	1589475913	12.356815
26710266	I'm more if a flask man myself. Work	I'm more if a flask man myself. Worked with django only when I had to.Maybe I'm wrong?	godmode2019	12.75778	-6.5524898	comment	17.0	84.0	1617705500	10.016214
27128994	Erlang/OTP 24 highlights	Erlang/OTP 24 highlights	nifoc	12.5616665	-7.5078716	story	17.0	454.0	1620818297	12.767833
37956856	Flappy Bird implemented in TypeScrip	Flappy Bird implemented in TypeScript types	joshmanders	12.336976	-6.8842273	story	17.0	252.0	1697813272	-10.460189
38108947	Companies that use PHP and pay well	Companies that use PHP and pay well	danjfoley	12.783052	-6.6114235	story	17.0	50.0	1698898787	10.346282
14771104	Yanni – An artificial neural network	Yanni – An artificial neural network for Erlang	_nato_	12.557781	-7.522394	story	17.0	203.0	1500050033	12.937497
15505751	Why Ruby App Servers Break on MacOS 	Why Ruby App Servers Break on MacOS High Sierra	mef	12.677216	-6.983582	story	17.0	259.0	1508392711	12.36744
23455015	Rubyists, we must do better	Rubyists, we must do better	damagednoob	12.617994	-7.0532055	story	18.0	79.0	1591608350	12.402993
24255517	PHP Built-In Web Server	PHP Built-In Web Server	ZnZirconium	12.786949	-6.574664	story	18.0	141.0	1598219001	10.289798
24344506	TypeScript is weakening the JavaScri	TypeScript is weakening the JavaScript ecosystem	timdaub	12.382997	-6.746284	story	18.0	28.0	1598982375	-10.443841
20765187	Using TypeScript with React	Using TypeScript with React	skn0tt	12.448086	-6.7221074	story	18.0	225.0	1566454878	-10.480802
20921454	My comment on one of the previous di	My comment on one of the previous discussions:I don't want to start a flame war here, but I think Rails (and gem ecosystem in general) is a better choice than Django, at least for SaaS apps.These are all my personal opinions, take it with a grain of salt. Having said that, here we go:* Authentication - it is a pain if you'd like to deviate from the standard Django User model (using username to login instead of an email). I don't like Devise either.* Asset pipeline, even though it is not updated anymore (sprockets) and partially replaced by the webpacker, is still better in Rails* Configuration spread across multiple files, by environment, instead of a single config.py file* Sidekiq has a better API compared to Celery. Also, Celery's default broker is RabbitMQ, not Redis. It is really hard 	sellingwebsite	12.806677	-6.7618895	comment	18.0	139.0	1568057223	10.285928
14034218	Django 1.11 Released	Django 1.11 Released	andrewingram	12.82152	-6.567984	story	18.0	348.0	1491322240	10.107189
30843275	Building a fullstack app with Flask 	Building a fullstack app with Flask and Htmx	sixhobbits	12.716553	-6.4674764	story	18.0	256.0	1648565361	10.08345
31298435	Unauthorized gem takeover for some g	Unauthorized gem takeover for some gems	mooreds	12.704415	-6.979335	story	18.0	239.0	1651956515	12.369877
31397964	Shopify invests in research for Ruby	Shopify invests in research for Ruby at scale	chrisseaton	12.73803	-6.9601007	story	18.0	181.0	1652711738	12.359252
31421961	Erlang/OTP 25.0 Release	Erlang/OTP 25.0 Release	nifoc	12.58456	-7.5113816	story	18.0	212.0	1652877182	12.90178
31556522	Flask Mega-Tutorial (2017)	Flask Mega-Tutorial (2017)	memorable	12.723107	-6.563129	story	18.0	234.0	1653897276	-13.810411
26076680	José Valim Reveals “Project Nx” (Num	José Valim Reveals “Project Nx” (Numerical Elixir) [audio]	thibaut_barrere	12.692474	-7.4636145	story	18.0	358.0	1612873581	12.942811
26367029	Launch HN: Lunatic (YC W21) – An Erl	Launch HN: Lunatic (YC W21) – An Erlang Inspired WebAssembly Platform	withtypes	12.525135	-7.347691	story	18.0	162.0	1615034977	12.879228
35903915	I got curious, downloaded and instal	"I got curious, downloaded and installed it on my computer. Checked the docs, and the next step was to download a stable image. Downloaded 11 (stable) and started it. Then blank stare to screen! What should I do? Lots of things to click on, and no text editor..Searched for a tutorial on the website, and found nothing! I don't want to spend 30 minutes to look at some random videos of Virtual Reality in Thames or whatever, or read ""Pharo for Rubyists"" (I use mostly Python). I just wanted to explore a bit, and maybe if it seemed interesting, tomorrow I would continue exploring it. But now I've deleted Pharo!Warning to other project maintainers: just show a tutorial, or an hands-on doc, so that newcomers may get a feeling of what it is. This is especially important for relatively unknown projec"	jventura	12.340883	-7.2580614	comment	18.0	130.0	1683820170	7.1366296
36121624	I know this is not point of the arti	"I know this is not point of the article but:> The PR was bigger than what I felt I could sensibly review and, in honesty, my desire to go through the hours of work I could tell this would take for a project I no longer used was not stellar.The PR: https://github.com/django-money/django-money/pull/2/files?di...Do others share this sentiment?This doesn't look like a particularly big PR to me, judging solely by the amount of code changed and the nature of the changes at first glance.Are most of your PRs at work tiny, couple lines of code at most? Am I sloppy for not even consider reviewing this for ""hours""? Are all code bases I have worked on sloppy because features often require changing more code than this?"	bbbobbb	12.797712	-6.5408883	comment	18.0	125.0	1685426970	10.08213
28942707	78% of the Web Powered by PHP	78% of the Web Powered by PHP	ashitlerferad	12.781661	-6.6308055	story	18.0	58.0	1634813504	10.297995
29272682	Where is Ruby Headed in 2021?	Where is Ruby Headed in 2021?	thunderbong	12.637542	-7.0586	story	18.0	299.0	1637284525	12.384953
34612919	Erlang: The coding language that fin	Erlang: The coding language that finance forgot (2022)	mindcrime	12.389165	-7.398061	story	18.0	182.0	1675269067	1.6432234
35038550	If you are an Elixir (or perhaps Clo	If you are an Elixir (or perhaps Clojure) expert, the following doesn't apply. But every other person jumping ship from, for example PHP or JavaScript should think twice.I think Phoenix is overhyped a lot. The barrier to entry is gigantic. The lack of up-to-date resources doesn't help. It's definitely not as polished as Laravel for example.And while there is Pragmatic Studio with their wonderful introduction video, there is nothing like Laracasts where there are new tutorials added all the time. Frankly, it's on another level.Deploying Phoenix is a nightmare when compared to Laravel.In Phx you have to reinvent a lot of things and often, of course, choosing the wrong path.Sure try the chat demo apps Phx is famous for but beyond that it's a pain in the ass unless you are very good Elixir pro	Liberonostrud	12.781273	-7.176473	comment	18.0	108.0	1678089663	12.767136
39358884	Oink: An API for PHP in a single fil	Oink: An API for PHP in a single file	juancroldan	12.679612	-6.4451113	story	18.0	60.0	1707840044	-6.321699
37114457	Thoughts on Elixir, Phoenix and Live	Thoughts on Elixir, Phoenix and LiveView after 18 months of commercial use	clessg	12.792529	-7.280444	story	18.0	308.0	1691960633	-11.485317
25065735	Volt: A reactive web framework where	Volt: A reactive web framework where your Ruby code runs both server and client	mooreds	12.681985	-6.7715917	story	18.0	79.0	1605147982	12.332776
22191355	Facebook PHP Source Code from August	Facebook PHP Source Code from August 2007	patrickdevivo	12.7892885	-6.6019115	story	18.0	229.0	1580393377	2.932449
19238221	How Discord Scaled Elixir to 5M Conc	How Discord Scaled Elixir to 5M Concurrent Users (2017)	lelf	12.574556	-7.478924	story	18.0	528.0	1551008933	12.816047
19542975	Django 2.2	Django 2.2	ataylor32	12.842441	-6.5258093	story	18.0	341.0	1554125141	10.089165
17121028	The Power of Prolog	The Power of Prolog	tosh	13.15154	-7.307483	story	18.0	480.0	1526930628	12.694686
21660373	Matestack: Rapidly create interactiv	Matestack: Rapidly create interactive UIs in Ruby	gremlinsinc	12.610258	-7.010292	story	18.0	174.0	1574977376	12.387553
21738331	Ask HN: Why GraphQL APIs but no Data	Ask HN: Why GraphQL APIs but no Datalog APIs?	networked	13.204377	-6.8865285	story	18.0	162.0	1575839378	-12.347391
39309443	i have to be honest: as a lover of t	i have to be honest: as a lover of the language, and with due respect to the author, i’m really tired of these “why i picked elixir” takes extolling the same virtues (or some subset thereof) we’ve seen written up in darn near every introductory article on elixir for the last five or six years.it’s not that i think they’re wrong, at all. it’s just that they add nothing new to the conversation, they’re superficial, and frequently don’t go on to give a reader any idea of how the decision worked out.here, i’ll start: i rewrote my startups platform in elixir about six years ago and it was a terrible business decision. not because elixir was bad —to the contrary, it was fantastic —but because the year and a half i spent reproducing functionality could have been spent adding new features that wou	karmajunkie	12.69312	-7.4589753	comment	18.0	108.0	1707436271	12.942964
18484087	Fibers are the right solution to imp	Fibers are the right solution to improve Ruby performance	justinhj	12.609413	-7.0343914	story	18.0	136.0	1542598987	12.355426
18537254	Goro – An implementation of PHP writ	Goro – An implementation of PHP written in Go	stp-ip	12.716772	-6.677762	story	18.0	144.0	1543269919	10.296276
29682920	Ruby 3.1	Ruby 3.1	sebiw	12.616277	-7.0439167	story	18.0	501.0	1640437016	12.373085
12191458	Love for TypeScript	Love for TypeScript	svieira	12.372237	-6.789447	story	18.0	220.0	1469848533	-10.457534
28381898	Deno Deploy Beta 2	Deno Deploy Beta 2	0xedb	12.523141	-6.4467072	story	18.0	165.0	1630513390	-11.036792
22864598	Are Tests Necessary in TypeScript?	Are Tests Necessary in TypeScript?	capableweb	12.337074	-6.866649	story	18.0	31.0	1586862373	-10.444451
22948185	I was a Rails user for almost a deca	I was a Rails user for almost a decade. I switched to Phoenix/Elixir 3 years ago. Elixir is a super simple language. It has no OO concepts and everything is functions first. In fact, it's so good that I started teaching it for universities. All my production web applications are now fully on Elixir.Elixir is one of those languages where everything has been done perfectly as of the time of this comment. When I say perfect, I mean, there has been never once in my career where I hit a roadblock due to the language's limitation or complexity or flawed assumption. I faced this with other languages, but not Elixir.I'm currently a full time consultant writing, teaching and deploying production apps for clients in Elixir. Most of my apps have served my clients well beyond my contractual agreement.	neya	12.687265	-7.417231	comment	18.0	142.0	1587577497	12.879325
33358132	I've asked this question a couple of	I've asked this question a couple of times on stackoverflow, but it get's removed, even though it is a legitimate question to me:I have found that working in a team with php has made it, sometimes, difficult to catch bugs that a typed language would prevent at compile time.How do larger teams work with php and frameworks like Laravel and prevent errors that are related to type-checking?	neals	12.677709	-6.725818	comment	18.0	58.0	1666881392	10.35405
33913161	Bumblebee: GPT2, Stable Diffusion, a	Bumblebee: GPT2, Stable Diffusion, and More in Elixir	clessg	12.673203	-7.4584494	story	18.0	550.0	1670532541	12.938986
33986868	This is how I move fast and break no	This is how I move fast and break nothing. By having fullstack type-safety from database all the way to the frontend with auto-completion. My current stack:+ SvelteKit (could be Next, Nuxt, Solid or any other TypeScript framework)+ tRPC (typed calls between frontend and backend, https://trpc.io)+ trpc-sveltekit (glues SvelteKit and tRPC, https://github.com/icflorescu/trpc-sveltekit)+ Prisma (ORM, https://www.prisma.io)	hu3	12.477549	-6.620484	comment	18.0	124.0	1671039538	-10.454346
37935817	Ask HN: Where to Host a FastAPI App	Ask HN: Where to Host a FastAPI App	techlover14159	12.432082	-6.525415	story	18.0	18.0	1697669168	9.773543
38455007	Shopify Ruby on Rails distributed mo	Shopify Ruby on Rails distributed monolith runs 19M queries per second on MySQL	HatchedLake721	12.781256	-6.9009476	story	18.0	204.0	1701227551	12.345533
23928891	GoodJob – a Postgres-based ActiveJob	GoodJob – a Postgres-based ActiveJob back end for Ruby on Rails	another-dave	12.782541	-6.851724	story	19.0	178.0	1595520729	12.34003
20811057	Has anyone started a project with el	Has anyone started a project with elm and continued it for a long time?	pictur	13.005292	-7.689529	comment	19.0	78.0	1566921470	-12.762231
30779395	Forge – A Django SaaS Framework	Forge – A Django SaaS Framework	davegaeddert	12.798335	-6.529691	story	19.0	84.0	1648048938	9.871571
26096340	Why Wasn't Ruby 3 Faster?	Why Wasn't Ruby 3 Faster?	stanislavb	12.620047	-7.0270033	story	19.0	216.0	1613000281	12.374277
26412047	Why Become a TypeScript Fan?	Why Become a TypeScript Fan?	theanubhav	12.375654	-6.780477	story	19.0	27.0	1615389297	-10.454052
35750369	Deno 1.33: Deno 2 is coming	Deno 1.33: Deno 2 is coming	mephju	12.524964	-6.4575	story	19.0	213.0	1682746954	-11.031757
35914216	How to sell Elixir again	How to sell Elixir again	thibaut_barrere	12.697132	-7.458425	story	19.0	204.0	1683886696	12.948454
36200230	Ask HN: Anyone still using PHP to bu	Ask HN: Anyone still using PHP to build side projects or webapps	mr_o47	12.770656	-6.622635	story	19.0	31.0	1685987761	10.32938
29344849	I've been using PHP since 5.x. Often	"I've been using PHP since 5.x. Often had to work on older 4.x web apps. I find it interesting when I read people saying ""PHP has come a long way. It's a proper language now, etc.""If you work long enough with a language and figure out most its quirks, it's a breeze. It's nice that they are adding all these new features, but they are hardly what makes it or break it for me.Here is the one features that is taken for granted in ""modern stacks"":Edit file -> Alt+tab ctrl+R. Oops, Alt+tab fix -> Alt+tab ctrl+R.When debugging I can do that 50 times a minute. With my react app, I can do it maybe 5 times a minute. With my golang app I'm lucky if I can do it twice a minute."	firefoxd	12.753685	-6.633044	comment	19.0	110.0	1637873352	10.2901945
35033368	Show HN: A HN clone writen in Go	Show HN: A HN clone writen in Go	andrewfromx	12.774249	-6.8881574	story	19.0	115.0	1678046520	12.326295
36648949	Open Letter to Tim O’Reilly to Free 	Open Letter to Tim O’Reilly to Free the Perl Camel	reeeese	12.331085	-7.020497	story	19.0	173.0	1688851664	13.174809
37413908	My favorite Erlang program (2013)	My favorite Erlang program (2013)	vector_spaces	12.567442	-7.5246973	story	19.0	338.0	1694052822	12.921755
37477551	Prolog is awesome and I recommend le	"Prolog is awesome and I recommend learning it if only for kicks and experiencing foreign programming paradigm. Many concepts are expressed in a completely  different and (when paradigm ""kicks in"") are arguably much simpler.E.g. in Prolog you don't usually operate on collection but instead provide information what the collection item actually is and then let the implementation figure it out. Drawing dependency tree is an effect of 3 rules: what is an entity, how to figure out that entity X and Y have relation, how to represent it.I have 2 gripes with it, though. One is that it's difficult and thus it's hard to convince people to learn/use it. Second - I didn't yet found way to seamlessly integrate it into other apps (I know that FFI is an option, but it doesn't convince me as production rea"	xlii	13.146761	-7.2818904	comment	19.0	103.0	1694500603	-12.483616
32320531	Elixir Livebook now as a desktop app	Elixir Livebook now as a desktop app	cgarvis	12.713414	-7.3624988	story	19.0	326.0	1659456516	12.897532
19451352	80% of the Web Powered by PHP (2017)	80% of the Web Powered by PHP (2017)	ashitlerferad	12.782602	-6.6344147	story	19.0	184.0	1553170157	10.293589
19535564	PHP 8 to Add a JIT	PHP 8 to Add a JIT	UkiahSmith	12.706174	-6.6553645	story	19.0	317.0	1554040094	-9.093795
19714627	Elixir, Phoenix, Absinthe, GraphQL, 	Elixir, Phoenix, Absinthe, GraphQL, React, and Apollo	schneidmaster	12.753657	-7.3493094	story	19.0	526.0	1555881305	12.883554
16263247	Advanced Denanonymization through St	Advanced Denanonymization through Strava	dsr12	12.526183	-6.439146	story	19.0	141.0	1517292717	-11.036602
16413905	My question is, how will he feel abo	My question is, how will he feel about this three years from now? When he is trying to hire someone? Or when the folks behind Elm don't update it as often as they should?The problem with unpopular languages is twofold:* lack of talent that can step right in and be effective* lack of resources to push the language forwardThe first can be remediated by planning to bring new hires up to speed, and just making that investment in them. (It can also be a useful filter, making sure you are hiring someone who is really interested to the company and is willing to make the time investment to learn what is probaly not a very portable skill.)The second is a bigger problem, if the main sponsor of the language moves on. If the main sponsor is committed, then you're probably fine. (I have no idea who pus	mooreds	12.991743	-7.678377	comment	19.0	192.0	1519058754	-12.762998
16935441	Flask 1.0 Released	Flask 1.0 Released	JonoBB	12.748913	-6.5713034	story	19.0	548.0	1524774758	10.044359
17318772	Why Crystal is the most promising pr	Why Crystal is the most promising programming language of 2018	crypto-jeronimo	12.624012	-7.2696223	story	19.0	44.0	1529059325	-11.214234
17645799	Announcing TypeScript 3.0	Announcing TypeScript 3.0	DanRosenwasser	12.41095	-6.816938	story	19.0	367.0	1532969021	-10.535741
21255988	The Future of PHP	The Future of PHP	kiyanwang	12.775105	-6.6358547	story	19.0	27.0	1571120470	10.340565
21290076	OR you could just writeReplace inval	OR you could just writeReplace invalid ASCII char. Fixes rake error 'invalid byte sequence in US-ASCII'.I don't want your entire life story in my commit log.	strictfp	12.47749	-6.937807	comment	19.0	106.0	1571393774	9.377101
21377318	Go Is the New Ruby	Go Is the New Ruby	jedisct1	12.521451	-7.154476	story	19.0	105.0	1572273046	12.3342
21655889	PHP 7.4	PHP 7.4	velmu	12.764269	-6.6455545	story	19.0	288.0	1574934413	10.316647
18754016	Learn Prolog Now	Learn Prolog Now	febin	13.149464	-7.3005257	story	19.0	289.0	1545682210	-12.47998
30073786	Deno in 2021	Deno in 2021	0xedb	12.528339	-6.4516935	story	19.0	205.0	1643128152	-11.021443
12884391	“Sites like these give PHP a bad rep	“Sites like these give PHP a bad reputation”	gempir	12.77877	-6.6192875	story	19.0	51.0	1478427144	10.320172
13161505	How Discord handles over a million r	How Discord handles over a million requests per minute with Elixir’s GenStage	Sikul	12.605906	-7.4443703	story	19.0	382.0	1481573756	12.828916
12093182	Django REST framework 3.4 Released	Django REST framework 3.4 Released	tomchristie	12.83408	-6.561039	story	19.0	278.0	1468499719	10.132818
12136851	Ruby Web Dev The Other Way	Ruby Web Dev The Other Way	guifortaine	12.645176	-6.9785476	story	19.0	199.0	1469109637	12.358586
12390454	Blazing Fast HTML: Elm vs. React vs.	Blazing Fast HTML: Elm vs. React vs. Angular vs. Ember	slashdotdash	13.087692	-6.4578347	story	19.0	100.0	1472567275	-15.512586
28180482	PHP 8.0 is 10 months old, and debian	PHP 8.0 is 10 months old, and debian’s upcoming release will be upgrading from 7.3 to 7.4, which will make 7.4 the standard for the next ~3 years (even though it only gets upstream support for 1 more year)…I am starting to reconsider my personal policy of “use debian-stable as a benchmark for what language runtimes I should build on top of”, now tending towards “use debian stable as the bare-metal OS, and build all my projects inside docker, using each language’s most recent stable release”	Shish2k	12.767809	-6.642324	comment	19.0	186.0	1628948010	10.326741
22561742	Designing the perfect TypeScript sch	Designing the perfect TypeScript schema validation library	colinmcd	12.3301325	-6.8346534	story	19.0	98.0	1584047238	-10.484363
33534235	Ask HN: Erlang and the telecom marke	Ask HN: Erlang and the telecom market	Fantarina	12.574486	-7.524989	story	19.0	49.0	1668012484	12.926255
26710013	Django 3.2	Django 3.2	samirelanduk	12.839104	-6.537764	story	19.0	394.0	1617703122	10.085437
14743724	Babel-preset-php: PHP7 to ES7 syntax	Babel-preset-php: PHP7 to ES7 syntax translator	farhadhf	12.537127	-6.4811444	story	19.0	130.0	1499777747	10.323567
14935474	Ask HN: Who is not betting on Elixir	Ask HN: Who is not betting on Elixir and why not?	techiferous	12.686171	-7.455461	story	19.0	69.0	1501937903	12.932802
14443090	Ask HN: How best to model a governme	Ask HN: How best to model a government programmatically?	nstj	13.129744	-7.273959	story	20.0	30.0	1496120924	-12.458996
28966133	Scryer Prolog: A modern Prolog imple	Scryer Prolog: A modern Prolog implementation written mostly in Rust	homarp	13.111734	-7.313339	story	20.0	272.0	1634968853	-12.478338
29015130	Ask HN: State of PHP at Facebook?	Ask HN: State of PHP at Facebook?	emadehsan	12.760278	-6.5794225	story	20.0	123.0	1635350738	2.949452
34358567	From Ruby to Node: Overhauling Shopi	From Ruby to Node: Overhauling Shopify’s CLI for a better developer experience	mooreds	12.756204	-6.93305	story	20.0	107.0	1673549608	12.33593
34452526	Replacing Pandas with Polars	Replacing Pandas with Polars	bjourne	12.35959	-6.543168	story	20.0	103.0	1674219697	10.148621
37473933	The Power of Prolog	The Power of Prolog	_benj	13.150447	-7.304088	story	20.0	306.0	1694467521	12.657704
15850874	Introduction to logic programming wi	Introduction to logic programming with Prolog	matchilling	13.102191	-7.2825675	story	20.0	284.0	1512468366	-12.468361
16035476	Ask HN: Good resources about legacy 	Ask HN: Good resources about legacy code?	ASVBPREAUBV	12.760572	-6.6011868	story	20.0	56.0	1514645763	6.3948135
16222629	$PHP = ;	$PHP = ;	exonintrendo	12.733853	-6.632949	story	20.0	51.0	1516802216	10.321104
29891804	Ask HN: Show us your low-tech/simple	Ask HN: Show us your low-tech/simple stack side projects	martin_a	12.77288	-6.604363	story	20.0	50.0	1641911493	10.332027
28013797	Sorbet Compiler: An experimental, ah	Sorbet Compiler: An experimental, ahead-of-time compiler for Ruby	jez	12.568523	-7.0609546	story	20.0	264.0	1627688660	12.374783
22814860	How porting to TypeScript solved our	How porting to TypeScript solved our API woes	mrbbk	12.35333	-6.8446593	story	20.0	154.0	1586365981	-10.423659
23176259	I've launched a side project to let 	I've launched a side project to let people track the outcome promises/predictions made by public figures and popular Twitter accounts, as I find unrealistic predictions and outright lies can be very damaging:https://ontherecord.liveThe stack is Django + Gunicorn / nginx, PostgreSQL and some Intercooler.js and vanilla JS to make the experience smoother.I've also been trying to learn Elixir + Phoenix, as I find some of the concepts (e.g. LiveView) very promising.	mishu2	12.825983	-6.9381447	comment	20.0	91.0	1589439111	12.803014
33907096	PHP 8.2	PHP 8.2	TimWolla	12.760062	-6.651193	story	20.0	263.0	1670502125	10.343512
33969386	I'd consider myself a writer more th	"I'd consider myself a writer more than a developer, but I've been working in Rails for over 15 years, and one of my absolute favourite things is ""unless"".Why? Because it allows you to express yourself more elegantly.The click-bait title is misleading. It's meant to ridicule ""unless"", but actually achieves the opposite.If you were to write the title of the post as code, it would be:  unless !ruby_dev
    read article
  end

That would be a terrible use of ""unless""! That should clearly say ""if ruby_dev"", not ""unless !ruby_dev"".But what if you wanted to write an article meant for anyone other than ruby developers?Which of the following is better?  if !ruby_dev

or  unless ruby_dev

Both work, but I consider the second option more elegant. Just as I wouldn't verbally say ""if you're not a ruby "	nickelcitymario	12.336428	-7.097507	comment	20.0	140.0	1670942122	12.448954
26853285	Livebook: A collaborative and intera	Livebook: A collaborative and interactive code notebook for Elixir	bcardarella	12.680366	-7.4148817	story	20.0	585.0	1618759632	12.927995
27193426	My company is moving away from it. W	"My company is moving away from it. We built a few services but after a few years some of the original people that introduced it left the company and it became very difficult to hire for. New hires were either people wanting to learn (so we had to spend a good bunch of resources into teaching + end up with a system built by noobs to the language) or very expensive developers with a lot of experience in erlang and elixir.We also found many times missing libraries, or found libraries which are incomplete, or unmaintained or just not well documented. Just compare the total amount of libraries in Hex, vs the total amount of libraries in rubygems. Somebody will say ""but Elixir libraries are higher quality so we need less, etc,etc"" as if there were not good developers in the ruby world and every "	midrus	12.689699	-7.295187	comment	20.0	160.0	1621338102	12.656166
37944326	We Have to Talk About Flask	We Have to Talk About Flask	carc1n0gen	12.752341	-6.5633636	story	20.0	43.0	1697729648	10.0414505
14846359	Elixir 1.5 released	Elixir 1.5 released	eugene_pirogov	12.696346	-7.459902	story	20.0	479.0	1500974994	12.941035
15496342	Why does anyone write web apps in Py	"Why does anyone write web apps in Python? PHP? Ruby?Modern Java and Go are so much faster than the alternatives that it's stupid to consider anything else if performance is important.Golang and Java can manage over a half million HTTP responses a second. Node is pretty fast but why bother when Java is many times more mature in features, tooling, and  and supports concurrency... And uses less ram and is usually faster. People moan about the ""huge"" Java runtime when JavaScript uses 3-5x more memory and has a huge runtime of its own.All the big companies are using Java and Go almost exclusively for high volume endpoints and it blows my mind the amount of mental gymnastics some companies go through to avoid following suit.Java has come a long way since J2EE. These days it's asynchronous, non-b"	slackingoff2017	12.348216	-6.754483	comment	20.0	151.0	1508291629	10.160458
14260124	Ask HN: How do I find an open source	Ask HN: How do I find an open source project to contribute to?	coffeeski	12.740497	-6.8959084	story	21.0	32.0	1493845845	12.35457
26352977	Standard Ruby 1.0	Standard Ruby 1.0	ksec	12.620758	-7.04775	story	21.0	103.0	1614920936	12.379069
35900891	Pharo 11	Pharo 11	xkriva11	12.344645	-7.2589703	story	21.0	304.0	1683806162	7.08504
35965483	Bun 0.6	Bun 0.6	tommasoamici	12.468444	-6.4467344	story	21.0	421.0	1684260260	-10.752931
29339814	Modern PHP Cheat Sheet	Modern PHP Cheat Sheet	rehhouari	12.747671	-6.642637	story	21.0	196.0	1637833678	10.355007
29343773	PHP 8.1.0	PHP 8.1.0	AegirLeet	12.770056	-6.6540656	story	21.0	335.0	1637865558	10.334812
35079971	JavaScript and TypeScript features o	JavaScript and TypeScript features of the last 3 years	Killusions	12.3378	-6.557691	story	21.0	464.0	1678358159	-10.455409
39428002	My PHP Problems	My PHP Problems	gempir	12.776893	-6.6350822	story	21.0	111.0	1708338130	10.291747
36619289	For the “Python isn’t fast enough fo	For the “Python isn’t fast enough for production backend” crowd from the same company that brought you the largest social network built on PHP + MySQL.	seanp2k2	12.450373	-6.6716595	comment	21.0	207.0	1688663492	10.256168
37086753	Show HN: Pip Imports in Deno	Show HN: Pip Imports in Deno	eliassjogreen	12.37638	-6.4736943	story	21.0	192.0	1691746244	-10.804083
37171801	TypeScript is surprisingly ok for co	TypeScript is surprisingly ok for compilers	Fudgel	12.335106	-6.822592	story	21.0	300.0	1692338285	-10.435771
38914407	Elixir is now a gradually typed lang	Elixir is now a gradually typed language	sergiotapia	12.645122	-7.458456	story	21.0	408.0	1704731383	12.91842
38920282	It's cristal clear that this page ha	"It's cristal clear that this page has been written for people who already know what they are looking at; the first line of the first paragraph, far from describing the tool, is about some qualities of it: ""Polars is written from the ground up with performance in mind""And the rest follows the same line.Anyone could ELI5 what this is and for what needs it is a good solution to use?EDIT: So an alternative implementation of Pandas DataFrame. Google gave me [0] which explains:> The pandas DataFrame is a structure that contains two-dimensional data and its corresponding labels. DataFrames are widely used in data science, machine learning, scientific computing, and many other data-intensive fields.> DataFrames are similar to SQL tables or the spreadsheets that you work with in Excel or Calc. In m"	j1elo	12.341607	-6.529382	comment	21.0	227.0	1704758063	10.129112
19111823	Each PHP file is an endpoint. As opp	Each PHP file is an endpoint. As opposed to having routers in code or client side SPA routing.PHP files can be deployed independently, swapped out or updated live.No building/compiling of the php files needed.A single layer as opposed to 'modern architecture' where there's client side back/front end layers, api layer, logic, validator, data access, and ORM layers.Can extend itself as it runs. For example Wordpress, running off of php files can download plugins to its own server (which are just more php files) to instantly extend itself. Without restarting or redeployment. (What other web platforms can do this?)Intuitive, simple, powerful. Can be as easy as editing a php file in notepad and dropping it on a ftp server. Deployed.Amazon lambda may have more in common with PHP in terms of disc	trixie_	12.768918	-6.5597987	comment	21.0	163.0	1549604337	10.205115
19543557	Nice. Anyone building fun stuff usin	Nice. Anyone building fun stuff using Django these days?	amerine	12.8139925	-6.502951	comment	21.0	104.0	1554128932	10.101337
19772349	How And Why We Switched from Erlang 	How And Why We Switched from Erlang to Python (2011)	vector_spaces	12.562118	-7.519528	story	21.0	192.0	1556472328	12.917931
16303943	Asynchronous PHP: Why?	Asynchronous PHP: Why?	kiyanwang	12.559991	-6.716021	story	21.0	47.0	1517768035	9.507572
16692981	Update on Async Rendering	Update on Async Rendering	runesoerensen	12.473054	-6.773509	story	21.0	247.0	1522186808	8.981814
16749148	SailsJS 1.0 – Rails-like JS Framewor	SailsJS 1.0 – Rails-like JS Framework	hit8run	12.743012	-6.700628	story	21.0	118.0	1522789221	12.30883
21369866	PHP-FPM remote code execution bug ex	PHP-FPM remote code execution bug exploited in the wild	orangepanda	12.75012	-6.55205	story	21.0	341.0	1572186290	10.2891035
21456817	TypeScript 3.7	TypeScript 3.7	nerdkid93	12.356011	-6.8617506	story	21.0	415.0	1572988785	-10.508602
29903631	From TypeScript to ReScript	From TypeScript to ReScript	ingve	12.38043	-6.81934	story	21.0	123.0	1641974398	-10.497373
12708214	Tell HN: I think you're downplaying 	Tell HN: I think you're downplaying the PHP community	jqueryin	12.774316	-6.634742	story	21.0	79.0	1476454719	-1.3967565
13348311	With the Rise of DevOps, Perl Shows 	With the Rise of DevOps, Perl Shows Its Muscle	MilnerRoute	12.33474	-7.030689	story	21.0	59.0	1483850570	13.180673
12193426	Ruby on Rails Tutorial	Ruby on Rails Tutorial	ehsan_akbari	12.736166	-6.9444523	story	21.0	189.0	1469893389	12.357689
12218426	Making Django CMS as easy to install	Making Django CMS as easy to install as WordPress	DanieleProcida	12.794693	-6.468495	story	21.0	212.0	1470236631	10.076842
28190481	Reining in the thundering herd: Gett	Reining in the thundering herd: Getting to 80% CPU utilization with Django	domino	12.771142	-6.5334992	story	21.0	160.0	1629047989	10.024728
22901856	Why do we need Flask, Celery, and Re	Why do we need Flask, Celery, and Redis? (2019)	feross	12.718577	-6.55464	story	21.0	345.0	1587150062	9.986186
23249824	Lovely Week with Elixir	Lovely Week with Elixir	sgadimbayli	12.696226	-7.457657	story	21.0	262.0	1589997509	12.946915
33139064	TypeScript is now officially 10 year	TypeScript is now officially 10 years old	bubblehack3r	12.380057	-6.7493815	story	21.0	198.0	1665303472	-10.467661
26825468	PHP in 2021	PHP in 2021	nowandlater	12.779912	-6.637108	story	21.0	279.0	1618517037	10.349218
27372358	> almost anyone I talk to is too you	"> almost anyone I talk to is too young to imagine The Days Before Stack Overflow, when the bookstore had an entire wall of Java and the way you picked a Rich Text Editor was going to Barnes and Noble and browsing through printed books for an hour, in the Rich Text Editor Component shelf.I remember the ""Days Before Stack Overflow"" and Joel is giving himself a bit too much credit here. Before SO, when I googled a problem I would often find a solution on a blog, personal website, or some community's PHPBB/vBulletin forum. Remember, this was 2008 we're talking about. The UX was undoubtedly less consistent, but it's not like we were rushing off to the library to look up PHP functions and CSS 3-column layouts."	tdeck	12.738536	-6.539331	comment	21.0	105.0	1622659238	10.3237
38183454	Gleam: a type safe language on the E	Gleam: a type safe language on the Erlang VM	ljlolel	12.513405	-7.445539	story	21.0	325.0	1699394009	-12.221921
15662394	Ask HN: Which TypeScript codebase sh	Ask HN: Which TypeScript codebase should I study to get better?	nblavoie	12.373695	-6.7812085	story	21.0	158.0	1510236142	-10.509285
24057677	PHP the Wrong Way	PHP the Wrong Way	rbanffy	12.781123	-6.6451845	story	22.0	97.0	1596607105	10.307677
20235527	Open-sourcing Sorbet: a fast, powerf	Open-sourcing Sorbet: a fast, powerful type checker for Ruby	abhorrence	12.537973	-7.0859694	story	22.0	617.0	1561054055	12.374637
20382126	Ten Years of Erlang	Ten Years of Erlang	iamd3vil	12.572552	-7.5236506	story	22.0	567.0	1562589091	12.900717
20823565	TypeScript 3.6	TypeScript 3.6	mceachen	12.3723345	-6.8482795	story	22.0	295.0	1567023216	-10.512212
13717557	Rails 5.1.0 Beta 1	Rails 5.1.0 Beta 1	claudiob	12.758115	-6.937442	story	22.0	257.0	1487882423	12.369979
29573607	Rails 7 Released	Rails 7 Released	baggy_trough	12.7439165	-6.9671335	story	22.0	437.0	1639616589	12.359771
29590609	Remix: On Rails	Remix: On Rails	goranmoomin	12.7549	-6.9014263	story	22.0	95.0	1639739157	12.344851
34536041	Ask HN: Why are so many PHP projects	Ask HN: Why are so many PHP projects moving to Node?	kypro	12.774048	-6.627452	story	22.0	38.0	1674756956	10.357911
34942722	WordPlate: WordPress on Composer wit	WordPlate: WordPress on Composer with sensible defaults	nedp	12.669734	-6.577597	story	22.0	71.0	1677381522	-8.083132
25366484	Deno 1.6 supports compiling TypeScri	Deno 1.6 supports compiling TypeScript to a single executable	andyfleming	12.482878	-6.489589	story	22.0	657.0	1607554465	-10.887745
38866842	A Writer's Ruby	A Writer's Ruby	jjgreen	12.616279	-7.049532	story	22.0	69.0	1704375624	12.393502
32683473	Crystal Programming Language	Crystal Programming Language	simonebrunozzi	12.6047125	-7.260971	story	22.0	206.0	1662067599	-11.209392
18558952	PHP Sadness	PHP Sadness	stesch	12.765166	-6.647267	story	22.0	69.0	1543481891	10.325901
29698198	Ask HN: Good Python projects to read	Ask HN: Good Python projects to read for modern Python?	turndown	12.828559	-6.521108	story	22.0	239.0	1640569782	10.072628
30224838	Jolie: A drop-in replacement of Djan	Jolie: A drop-in replacement of Django Admin	sambalbadjak	12.859371	-6.5196176	story	22.0	156.0	1644089080	10.079453
12094366	Ask HN: Ruby Dev, is moving to PHP a	Ask HN: Ruby Dev, is moving to PHP a step backward career wise?	sfrailsdev	12.728663	-6.77622	story	22.0	21.0	1468508293	-12.653136
28550339	Deno 1.14	Deno 1.14	sondr3	12.529545	-6.4609284	story	22.0	257.0	1631791449	-11.025666
27127316	Deno 1.10 Release Notes	Deno 1.10 Release Notes	caspervonb	12.52708	-6.4559407	story	22.0	274.0	1620800894	-11.027771
27240416	PHP 3.0 Final is out (1998)	PHP 3.0 Final is out (1998)	xd	12.781474	-6.648771	story	22.0	134.0	1621633880	10.354256
38383646	For RoR, see every method call, para	For RoR, see every method call, parameter and return value in production	puuush	12.55255	-7.006326	story	22.0	122.0	1700680069	12.307209
14745790	Is Ruby Too Slow for Web-Scale?	Is Ruby Too Slow for Web-Scale?	nateberkopec	12.689274	-6.967061	story	22.0	84.0	1499792275	12.297341
20879491	Solving Every Sudoku Puzzle (2006)	Solving Every Sudoku Puzzle (2006)	Pete_D	13.445715	-7.409342	story	23.0	202.0	1567618534	15.079695
31515787	What Happened to Perl 7?	What Happened to Perl 7?	davorg	12.342431	-7.0406113	story	23.0	249.0	1653551285	13.181971
25776525	10 years-ish of Elixir	10 years-ish of Elixir	sph	12.697694	-7.459598	story	23.0	422.0	1610634078	12.943958
25789703	StimulusReflex, or LiveView for Rail	StimulusReflex, or LiveView for Rails	nanna	12.825059	-6.701648	story	23.0	198.0	1610710904	-9.160801
29578398	The years when Rails monoliths were 	The years when Rails monoliths were the de facto web stack were some of the best of my career. As I progressed in my career and the popular tech stack shifted to things like microservices, document DBs, serverless functions, Node, importing tiny nom packages for everything, docker containers, React, and GraphQL, the sheer cognitive overhead of getting a simple app up and running gradually took all the fun out of the job for me. The fast, satisfying feedback loop of writing a feature in Rails was replaced with weeks-long coordination efforts between independent microservices, constant discussions about tooling, and doubts over whether or not we had chosen the “right” flavor-of-the-week framework or library for our product. Every time I started a new project or a joined a new company, we had	hnuser847	12.742333	-6.899602	comment	23.0	301.0	1639664717	12.357797
34188461	Phoenix 1.7 is View-less	Phoenix 1.7 is View-less	todsacerdoti	12.865554	-6.953788	story	23.0	345.0	1672426352	-12.669728
34413012	Ruby 3.2’s YJIT is Production-Ready	Ruby 3.2’s YJIT is Production-Ready	onnnon	12.625952	-7.0610375	story	23.0	481.0	1673967028	12.371082
34431191	I work on Bun. Happy to answer any q	I work on Bun. Happy to answer any questions or feedback	Jarred	12.472718	-6.444044	comment	23.0	133.0	1674068161	10.9362
32411741	Why are systems languages always ove	Why are systems languages always overly complex?	grumblingdev	12.350715	-6.792242	story	23.0	19.0	1660138833	-10.408637
19615644	Can someone help this old (2^5 years	"Can someone help this old (2^5 years) developer out? I've worked with a number of programming languages over the years, and have never found a combination that brings me such joy and productivity as Ruby and Rails. However, I've always felt that Python and Ruby were very similar in style & goal.Can someone who is experienced in both Rails & Django explain why Python & Django are trending up so quickly, while Ruby & Rails are ranking on the ""most dreaded"" lists? I don't want this to become a holy war, I am just genuinely curious what I'm overlooking."	andy_adams	12.638809	-6.913153	comment	23.0	104.0	1554823832	-11.314077
15832170	Django 2.0 released	Django 2.0 released	webiad	12.831074	-6.57191	story	23.0	635.0	1512228064	10.087721
16482351	Ask HN: What do you look for in a re	Ask HN: What do you look for in a remote developer?	daryllxd	12.761329	-6.926587	story	23.0	169.0	1519818744	12.358368
16725492	Modern PHP without a framework	Modern PHP without a framework	vanilla-almond	12.7547455	-6.603275	story	23.0	221.0	1522535092	10.307935
17143494	ReasonML – React as first intended	ReasonML – React as first intended	spking	12.745439	-6.5652146	story	23.0	235.0	1527166721	8.685374
17472485	Escaping the SPA rabbit hole with mo	Escaping the SPA rabbit hole with modern Rails	mparramon	12.757745	-6.874283	story	23.0	274.0	1530892860	12.3685255
21107730	Which companies are using Erlang, an	Which companies are using Erlang, and why?	lelf	12.55788	-7.510895	story	23.0	394.0	1569772520	12.921713
18094869	"There are several ""we upgraded Rails"	"There are several ""we upgraded Rails, it was huge, risky, and took months to years"" blog posts from medium to large companies. I personally take this as a warning against using Rails. Ruby is one of the most dangerous dynamic languages to refactor, I don't see how struggling to do it for over a year is a selling point of the framework. It also feels counter to Rails's mantra of delivering value fast with little effort, until you need to upgrade, then you have months of no business value delivery and need to bring in experts to help."	stevebmark	12.74349	-6.951578	comment	23.0	140.0	1538153601	12.343468
29874616	An Ode to Ruby	An Ode to Ruby	yboulkaid	12.610019	-7.0531673	story	23.0	274.0	1641822185	12.383212
30083764	Run Ordinary Rails Apps Globally (20	Run Ordinary Rails Apps Globally (2021)	pcr910303	12.704787	-6.933444	story	23.0	269.0	1643192399	12.326341
30703531	Deno Is Webby	Deno Is Webby	todsacerdoti	12.527846	-6.4550633	story	23.0	407.0	1647462069	-11.023338
12557808	Announcing TypeScript 2.0	Announcing TypeScript 2.0	DanRosenwasser	12.405404	-6.8189235	story	23.0	553.0	1474560273	-10.54958
12667486	A gentle introduction to Prolog (201	A gentle introduction to Prolog (2013)	mihau	13.144787	-7.298532	story	23.0	221.0	1475943888	-12.481345
12182499	Ask HN: Improve C language skills af	Ask HN: Improve C language skills after K&R?	SoftwarePatent	12.660976	-7.0223236	story	23.0	70.0	1469733710	12.372212
28365911	Why Erlang?	Why Erlang?	todsacerdoti	12.54983	-7.510231	story	23.0	341.0	1630404123	12.922799
22902462	Gleam: A statically typed language f	Gleam: A statically typed language for the Erlang VM	andrenth	12.521988	-7.487074	story	23.0	331.0	1587153876	-12.3146305
33205282	Show HN: FrankenPHP, an app server f	Show HN: FrankenPHP, an app server for PHP written in Go	kdunglas	12.707643	-6.6766005	story	23.0	368.0	1665763197	10.316631
33763772	Why People Think PHP Sucks (2014)	Why People Think PHP Sucks (2014)	acqbu	12.771705	-6.635401	story	23.0	31.0	1669564612	10.332675
26860919	Why we chose Elm for Humio’s web UI	Why we chose Elm for Humio’s web UI	jfmengels1	13.006993	-7.690479	story	23.0	122.0	1618826423	-12.767821
26888455	Starting a TypeScript Project in 202	Starting a TypeScript Project in 2021	majodev	12.385498	-6.7862153	story	23.0	228.0	1619006535	-10.472176
14798425	Stop writing PHP like it's 2009	Stop writing PHP like it's 2009	imperio59	12.789677	-6.650988	story	23.0	78.0	1500399181	10.332285
23411449	What the Hell Is a Deno?	What the Hell Is a Deno?	harrylucas	12.51932	-6.4444895	story	24.0	166.0	1591235529	-11.021299
23431941	Ruby vs. Crystal Performance	Ruby vs. Crystal Performance	ptcodes	12.621159	-7.2417736	story	24.0	175.0	1591381321	-11.247947
23476409	I wrote a lot of PHP from 1999-2008.	I wrote a lot of PHP from 1999-2008. First as a hobby, then professionally. From 20 LOC guestbooks to payment gateways used to process millions in payments. It wasn't until recently that I was sure I'd written more code in any other language than PHP. These days I'll occasionally poke around with it or patch a bug, but that's about it.Is it a perfect language? No. But which language is? (I can hear the Lisp crowd grumbling.) It's fast. The only ceremony you need to write executable code is the <?php tag. It has a very rich standard library -- even if some of the function names make me want to stab people.My only real gripe with PHP is the annotation syntax. Yikes. Stuff that's in comments SHOULD NOT AFFECT RUNNING CODE. Who came up with that?PHP has taken a lot of flack over the years. Mos	elric	12.765947	-6.6347837	comment	24.0	218.0	1591792911	10.325766
23615303	Go vs. Crystal Performance	Go vs. Crystal Performance	open-source-ux	12.493188	-7.345209	story	24.0	197.0	1592926492	10.18492
23869592	Turning the IDE Inside Out with Data	Turning the IDE Inside Out with Datalog	arjunnarayan	13.173301	-7.0105615	story	24.0	275.0	1594987281	5.895192
24057715	When Should You Not Use Rails?	When Should You Not Use Rails?	luu	12.803999	-6.8767204	story	24.0	142.0	1596607410	12.342938
25767030	Ten years without Elixir	Ten years without Elixir	_nato_	12.70276	-7.451383	story	24.0	117.0	1610567068	12.937889
34243498	Ruby is my favorite language, and of	"Ruby is my favorite language, and often it is a joy to use because of its combined attributes of brevity, expressive power, and feature consistency.It's disappointing that there are so many more jobs for another popular language - one that lacks the elegance and consistency but which has a larger ecosystem.As far as I know, the only well known reason for a company to choose Ruby is if they want Rails (and obviously if the founding team already knows/likes Ruby).  But that other language also has a popular (and comparatively clumsy) web framework plus well known modules for all the fantasy capabilities that startups dream of... you know, the AI/ML ""not sure how we will use it but we know it will be great, and it's good for marketing"".Sadly, I don't expect this situation to reverse in the fu"	michaelteter	12.631152	-7.031655	comment	24.0	316.0	1672822683	12.375302
34242820	Ruby 3.2.0 is from another dimension	Ruby 3.2.0 is from another dimension	thunderbong	12.620094	-7.0515027	story	24.0	391.0	1672814960	12.357743
32305536	What's TypeScript compiling? Use a t	What's TypeScript compiling? Use a treemap to find out	danvk	12.349192	-6.8065734	story	24.0	406.0	1659359927	5.484112
22205652	TypeScript’s quirks: How inconsisten	TypeScript’s quirks: How inconsistencies make the language more complex	lobster_roll	12.326128	-6.8387156	story	24.0	312.0	1580504328	-10.423303
17355187	Demand for Ruby on Rails is Still Hu	Demand for Ruby on Rails is Still Huge	rbanffy	12.731208	-6.9555635	story	24.0	242.0	1529501835	12.361542
17416676	Django Newbie Mistakes	Django Newbie Mistakes	tosh	12.841375	-6.5228806	story	24.0	431.0	1530192684	10.084883
18287939	Perl 11	Perl 11	totalperspectiv	12.340612	-7.0410514	story	24.0	304.0	1540332454	13.171948
30219984	PHP – The Right Way	PHP – The Right Way	acqbu	12.770899	-6.6322927	story	24.0	287.0	1644058982	10.323483
27842933	Pharo 9	Pharo 9	xkriva11	12.354666	-7.252847	story	24.0	328.0	1626342040	7.1271424
27929730	93% of Paint Splatters Are Valid Per	93% of Paint Splatters Are Valid Perl Programs (2019)	codetrotter	12.335021	-6.9898086	story	24.0	431.0	1627041745	-10.816657
28620849	Creator of Phoenix here. I'm happy t	Creator of Phoenix here. I'm happy to answer any questions folks have about LiveView, Phoenix, or Elixir in general. We've had some big LiveView features land recently with uploads and HEEx so now's a great time to jump in!	chrismccord	12.856568	-7.0042906	comment	24.0	197.0	1632339741	12.744153
33426041	Why I program in Erlang (2012)	Why I program in Erlang (2012)	ianbutler	12.561462	-7.517141	story	24.0	325.0	1667330257	12.910039
33524039	It's not Ruby that's slow, it's your	It's not Ruby that's slow, it's your database	ksec	12.640673	-7.006531	story	24.0	121.0	1667940186	12.345907
33576722	GitHub is replacing Rails front end 	GitHub is replacing Rails front end rendering with React	todsacerdoti	12.810262	-6.6034355	story	24.0	111.0	1668285057	12.2863655
33593668	Deno 1.28: Featuring 1.3M New Module	Deno 1.28: Featuring 1.3M New Modules	mhoad	12.523702	-6.4523826	story	24.0	290.0	1668432925	-11.030481
23871934	We Don't Hate PHP	We Don't Hate PHP	Dwolb	12.775572	-6.638611	story	25.0	57.0	1595001666	10.324749
24094377	Rome: A Linter for JavaScript and Ty	Rome: A Linter for JavaScript and TypeScript	acemarke	12.3528385	-6.6991057	story	25.0	303.0	1596914821	-10.404353
24150731	What's new in PHP 8?	What's new in PHP 8?	maydemir	12.773797	-6.6536937	story	25.0	214.0	1597359694	10.283941
20039589	Choosing Ruby on Rails for web devel	Choosing Ruby on Rails for web development project in 2019	milo_im	12.7302885	-6.9546275	story	25.0	194.0	1559134925	12.343705
26301395	The Hijacking of Perl.com	The Hijacking of Perl.com	leejo	12.340416	-6.98516	story	25.0	298.0	1614594716	13.171015
35623625	Why did Prolog lose steam? (2010)	Why did Prolog lose steam? (2010)	yeesian	13.141704	-7.298581	story	25.0	152.0	1681871872	-12.493214
37422106	Bun 1.0 announcement [video]	Bun 1.0 announcement [video]	chinmaykunkikar	12.463811	-6.451512	story	25.0	150.0	1694106487	-10.778849
24866190	PHP 8: Before and After	PHP 8: Before and After	brendt_gd	12.754922	-6.6594853	story	25.0	314.0	1603429593	10.321483
32025882	Why we're sticking with Ruby on Rail	Why we're sticking with Ruby on Rails	lutrinus	12.742399	-6.937515	story	25.0	236.0	1657280840	12.350782
32115809	To Ruby from Python	To Ruby from Python	mariuz	12.476151	-7.04007	story	25.0	210.0	1657954264	12.382683
18094285	Upgrading GitHub from Rails 3.2 to 5	Upgrading GitHub from Rails 3.2 to 5.2	masnick	12.701798	-6.9711885	story	25.0	510.0	1538149277	12.365193
12970071	Choosing Ember over React in 2016	Choosing Ember over React in 2016	jeanlucas	13.103051	-6.4385033	story	25.0	258.0	1479322218	-15.512125
13136751	This Week in Rails: jQuery no longer	This Week in Rails: jQuery no longer part of Rails, and more	inopinatus	12.750219	-6.857009	story	25.0	223.0	1481259019	12.343945
13475215	DHH answers: What makes Rails a fram	DHH answers: What makes Rails a framework worth learning in 2017?	gavingmiller	12.753845	-6.917374	story	25.0	200.0	1485290120	12.361142
26566925	Removed gem breaks Rails ActiveStora	Removed gem breaks Rails ActiveStorage	ldulcic	12.753413	-6.9406333	story	25.0	265.0	1616592635	12.366344
37843534	Numbered block parameters in Ruby	Numbered block parameters in Ruby	thunderbong	12.412477	-7.096232	story	25.0	98.0	1697026951	12.375381
38404426	"""Useless Ruby sugar"": Argument forwa"	"""Useless Ruby sugar"": Argument forwarding"	todsacerdoti	12.522202	-7.079946	story	25.0	183.0	1700836911	12.376803
15004216	A Review of Perl 6	A Review of Perl 6	jparise	12.339976	-7.0445952	story	25.0	293.0	1502649307	13.180019
23650361	There is no more Perl at JP Morgan	There is no more Perl at JP Morgan	user5994461	12.336913	-7.030603	story	26.0	60.0	1593165786	13.183769
14212561	TypeScript 2.3	TypeScript 2.3	DanRosenwasser	12.360631	-6.859633	story	26.0	366.0	1493309206	-10.455329
35032650	RailsCasts Retrospective Part 1: The	RailsCasts Retrospective Part 1: The Fuel	nickjj	12.770948	-6.9216766	story	26.0	197.0	1678042213	12.346674
24934581	Ruby on Rails in a week	Ruby on Rails in a week	Tenhundfeld	12.7298975	-6.9515986	story	26.0	497.0	1603999708	12.389037
25155627	TypeScript 4.1	TypeScript 4.1	shian15810	12.374745	-6.8527126	story	26.0	339.0	1605828530	-10.465063
31853546	Things I do every time I start a Dja	Things I do every time I start a Django project	8b16380d	12.835277	-6.526047	story	26.0	222.0	1656010160	10.095057
15955527	Ask HN: Ruby or Python for 2018?	Ask HN: Ruby or Python for 2018?	methochris	12.715628	-6.9078045	story	26.0	43.0	1513631339	12.279053
16910351	Used PHP in a Hackathon was made fun	Used PHP in a Hackathon was made fun of and it made me feel really shitty	jocoda	12.771814	-6.632442	story	26.0	73.0	1524551106	10.326446
18906405	Porting 30K lines of code from Flow 	Porting 30K lines of code from Flow to TypeScript	munchor	12.449697	-6.762249	story	26.0	434.0	1547499548	-10.479842
30260957	Laravel 9	Laravel 9	riipandi	12.819686	-6.635559	story	26.0	285.0	1644339632	10.3556185
13433927	Removing Python 2.x support from Dja	Removing Python 2.x support from Django for version 2.0	ReticentMonkey	12.696144	-6.633011	story	26.0	720.0	1484812230	10.157337
13497505	Comparing Elixir and Go	Comparing Elixir and Go	iamd3vil	12.640266	-7.4717298	story	26.0	489.0	1485488087	12.916587
23250979	Why Developers Hate PHP	Why Developers Hate PHP	jesuisundev	12.772563	-6.6334662	story	26.0	66.0	1590004236	10.340127
26797557	Deno 1.9	Deno 1.9	monstermachine	12.506532	-6.444945	story	26.0	670.0	1618341261	-11.017548
37958971	Shopify seems to love Ruby. Ruby doe	"Shopify seems to love Ruby. Ruby doesn't seem to be all too popular now, if I'm a beginner would Ruby be a good language to look into? 
(Please don't recommend Python/JS, I dislike them for personal reasons)"	bobsmith432	12.657547	-6.980962	comment	26.0	134.0	1697822786	12.357853
38526948	Rage: Fast web framework compatible 	Rage: Fast web framework compatible with Rails	ksec	12.740977	-6.8530474	story	26.0	146.0	1701748828	12.309944
14974767	Ask HN: What are real Ruby on Rails 	Ask HN: What are real Ruby on Rails alternatives in 2017?	rubyfan	12.693758	-6.9337263	story	26.0	40.0	1502321531	12.351817
15574714	Crystal in Production: Diploid	Crystal in Production: Diploid	sdogruyol	12.636735	-7.2589483	story	26.0	246.0	1509188763	-11.224373
23788602	Microsoft Support of PHP on Windows	Microsoft Support of PHP on Windows	sirwitti	12.710663	-6.5798054	story	27.0	196.0	1594360827	10.249744
13843577	Has Python killed Ruby?	Has Python killed Ruby?	Pishky	12.638649	-7.029271	story	27.0	28.0	1489195465	12.4140415
14045987	The Power of Prolog	The Power of Prolog	noch	13.151486	-7.30755	story	27.0	348.0	1491429212	12.683906
35687157	Bullet Train – Rails-based SaaS fram	Bullet Train – Rails-based SaaS framework	bauerpl	12.780352	-6.8690805	story	27.0	418.0	1682341447	12.344306
36310130	Rewriting the Ruby parser	Rewriting the Ruby parser	kddeisz	12.504825	-7.0371027	story	27.0	520.0	1686663785	12.361327
28837181	Tricks I wish I knew when I learned 	Tricks I wish I knew when I learned TypeScript	cstrnt	12.353281	-6.8149223	story	27.0	598.0	1634025082	-10.471256
34934620	Elixir for Humans Who Know Python	Elixir for Humans Who Know Python	EntICOnc	12.673798	-7.4408484	story	27.0	293.0	1677309401	12.9047365
36986769	Elixir for cynical curmudgeons	Elixir for cynical curmudgeons	todsacerdoti	12.699597	-7.4597526	story	27.0	470.0	1691074287	12.926218
37405565	Turbo 8 is dropping TypeScript	Turbo 8 is dropping TypeScript	petercooper	12.396201	-6.8402624	story	27.0	135.0	1694010060	8.196166
22220564	New in PHP 8	New in PHP 8	jonifico	12.769665	-6.654999	story	27.0	326.0	1580691189	10.388861
15776527	Ask HN: Is Ruby on Rails still worth	Ask HN: Is Ruby on Rails still worth it?	ahacker15	12.721673	-6.951812	story	27.0	68.0	1511626431	12.345339
15903101	Re: Moving from PHP to Go and Back A	Re: Moving from PHP to Go and Back Again	neoasterisk	12.772587	-6.642331	story	27.0	199.0	1513054603	10.352498
16003590	Ruby 2.5.0 Released	Ruby 2.5.0 Released	phereford	12.637367	-7.0328083	story	27.0	431.0	1514198268	12.380442
17280969	Why Crystal Is My Next Language	Why Crystal Is My Next Language	sdogruyol	12.626095	-7.2793727	story	27.0	176.0	1528678148	-11.226166
18873581	Happy Birthday, Ruby	Happy Birthday, Ruby	_quhg	12.660265	-7.023356	story	27.0	387.0	1547126276	12.401834
29889705	PHP in 2022	PHP in 2022	headalgorithm	12.779682	-6.6317554	story	27.0	302.0	1641896708	10.329408
12704049	The article points out that arguably	"The article points out that arguably the best part of PHP is the ""shared nothing lifecycle"". That each request starts new, and the process dies at the end of the request. It's by far my favorite part, and I completely agree that it makes ""reasoning about"" (boy do I hate that phrase...) your program much easier.Why are there no other ""competitors"" in this space? Why do most other languages go with the alternative route of using an event loop or daemonizing your ""server"" to serve up requests? I can understand why Node.js does it (otherwise the async nature would just be an annoyance for no gain), but why haven't there been any other server-side languages that not only work well like this, but actively target it?It seems like it would be easier for everyone involved. You wouldn't need much of"	Klathmon	12.712785	-6.602558	comment	27.0	181.0	1476392958	10.223668
13396521	Ask HN: Why do coding bootcamps teac	Ask HN: Why do coding bootcamps teach Ruby on Rails and JavaScript?	Onixelen	12.722644	-6.8987145	story	27.0	69.0	1484361360	12.335722
33105706	A Ruby program that generates itself	A Ruby program that generates itself through a 128-language quine loop	sirnicolaz	12.477766	-7.0955663	story	27.0	350.0	1665043414	12.390787
38050214	Ask HN: Why aren't Django Admin styl	Ask HN: Why aren't Django Admin style dashboards popular in other frameworks?	stuartjohnson12	12.845974	-6.506171	story	27.0	34.0	1698504449	10.073091
23630074	They last line of the article summar	They last line of the article summarizes it well:> Perl 7 is v5.32 with different settings. Your code should work if it’s not a mess. Expect a user release within a year.Are there actually people that are still deploying new things in Perl?  The only times I see it is for legacy stuff, and then only because the script is too much of a hassle to be rewritten.	banana_giraffe	12.338941	-7.034149	comment	28.0	189.0	1593016277	13.195227
24330089	Italian Ruby	Italian Ruby	kinduff	12.597644	-7.0429516	story	28.0	206.0	1598870803	12.359187
24395695	Elixir Is Erlang, not Ruby	Elixir Is Erlang, not Ruby	stanislavb	12.655213	-7.4476976	story	28.0	414.0	1599437259	12.895449
20357055	Why am I interested in Elixir?	Why am I interested in Elixir?	muhic	12.695474	-7.4632487	story	28.0	341.0	1562268342	12.941494
14091843	TypeScript at Slack	TypeScript at Slack	anaisbetts	12.409119	-6.8787136	story	28.0	440.0	1491940580	-10.48401
14583882	Show HN: Decaffeinate converts Coffe	Show HN: Decaffeinate converts CoffeeScript projects to modern JS	alangpierce	12.44526	-6.577708	story	28.0	361.0	1497833591	-10.782429
30786927	Modern PHP	Modern PHP	doppp	12.76593	-6.631737	story	28.0	291.0	1648104188	10.332699
31663298	Deepkit – High-Performance TypeScrip	Deepkit – High-Performance TypeScript Framework	nikolay	12.360133	-6.7959967	story	28.0	251.0	1654663407	-10.447043
35897332	As a fullstack developer who has wor	As a fullstack developer who has worked many, many years in the javascript hellhole, I mean ecosystem, as well as the python ecosystem and .NET; coming back to PHP the last 2 years, working essentially in Laravel and the like - I couldn't approve more of this message.Seriously, PHP is the grand father that will drive you to class and you'll never be late, the car will never smell and everything will always just be fine.It's fast, it's typed (now), it's reliable.Laravel is pretty darn rock solid. I've used a LOT of frameworks. Most of them fall on their ass in either the documentation or performance scope. Laravel is beasty, reasonably well documented, handles hundreds of thousands of users without a scratch. Plays well with Redis and MariaDB or anything really.Just ignore the fugly standar	keyle	12.795347	-6.6312304	comment	28.0	245.0	1683778228	10.345576
37482220	Notes from building a blog in Django	Notes from building a blog in Django	theptip	12.81901	-6.5004487	story	28.0	214.0	1694530416	10.063577
33049056	Ten Years of TypeScript	Ten Years of TypeScript	kbhomes	12.346835	-6.7934337	story	28.0	215.0	1664650920	-10.471175
12303556	"""-No, look into microservices. It’s "	"""-No, look into microservices. It’s the future. It’s how we do everything now. You take your monolithic app and you split it into like 12 services. One for each job you do.That seems excessive""A 100 times yes. We tried to split our monolithic Rails app into micro-services built in Go. 2 years and many fires later, we decided to abandon the project. It was mostly because the monitoring and alerting were now split into many different pieces. Also, the team spent too much time debating standards etc. I think micro-services can be valuable, but we definitely didn't do it right, and I think a lot of companies get it wrong.  Any positive experiences with micro-services here?"	mrhektor	12.689231	-6.9368405	comment	28.0	178.0	1471429760	-13.79643
28183901	Ask HN: Is it worth learning Elixir,	Ask HN: Is it worth learning Elixir, from a jobs perspective?	akudha	12.710618	-7.433818	story	28.0	79.0	1628974823	12.918775
27463725	Good and Bad Elixir	Good and Bad Elixir	todsacerdoti	12.693782	-7.460501	story	28.0	346.0	1623349132	12.954527
14876562	Phoenix 1.3.0 Released	Phoenix 1.3.0 Released	chrismccord	12.817684	-7.002461	story	28.0	437.0	1501267914	-12.620773
20745768	Rest-client gem is hijacked	Rest-client gem is hijacked	PleaseHelpMe	12.735008	-6.927853	story	29.0	332.0	1566301443	12.364262
29079279	Ask HN: Will Ruby Get a Comeback?	Ask HN: Will Ruby Get a Comeback?	going_to_800	12.705317	-7.009982	story	29.0	61.0	1635849111	12.334669
34411018	PHP in 2023	PHP in 2023	langitbiru	12.781577	-6.6518884	story	29.0	202.0	1673951942	10.364366
36820555	NativePHP: A framework for building 	NativePHP: A framework for building desktop apps using PHP	brysonreece	12.734204	-6.5828586	story	29.0	179.0	1689977176	10.295518
32498288	As a dyed-in-the-wool Rubyist, I con	"As a dyed-in-the-wool Rubyist, I consider Ruby the pinnacle of high-level, abstracted, expressive programming for the contexts I care about (small web applications largely written by solo devs).What's sad to me is that the modern follow-up to Ruby seemingly doesn't exist. Every hot ""language du jour"" which has come after Ruby has gone BACKWARDS. Lower-level, more systems programming oriented. Maybe even compiled. Static typing everywhere. It's utterly baffling to me.""Why are you using Ruby? You should use…Rust! (Go! Zig! Fill-in-the-blank nerd hype!)""Lol.What I actually want is a new programming language/environment which makes Ruby look like programming pointer arithmetic in C by comparison. Something so advanced, so high level, that much of the time you're really just describing patterns"	jaredcwhite	12.559735	-7.0794578	comment	29.0	142.0	1660753073	12.38354
18977700	The TypeScript Tax	The TypeScript Tax	bnchdrff	12.3749695	-6.823786	story	29.0	67.0	1548247652	-10.445638
19560479	Ruby's Creed	Ruby's Creed	rlue	12.615473	-7.0596476	story	29.0	221.0	1554261419	12.385271
16819975	Why is Ember fading away?	Why is Ember fading away?	vmware508	13.116233	-6.4496	story	29.0	74.0	1523534855	-15.525552
17894764	TypeScript at Google	TypeScript at Google	wslh	12.373927	-6.800746	story	29.0	494.0	1535849160	-10.46969
17975156	Ending PHP Support, and the Future o	Ending PHP Support, and the Future of Hack	dcgudeman	12.776337	-6.6107297	story	29.0	429.0	1536801988	10.31064
35185069	TypeScript 5.0	TypeScript 5.0	dimitropoulos	12.364671	-6.8503566	story	29.0	606.0	1678987182	-10.48579
35313565	Ban 1+N in Django	Ban 1+N in Django	Suor	12.855713	-6.5029798	story	29.0	175.0	1679832217	10.090592
38268462	Ask HN: How to get back to programmi	Ask HN: How to get back to programming Python?	mlitwiniuk	12.3618555	-6.8712416	story	29.0	59.0	1699990776	12.356786
15481402	Ask HN: In what order did you learn 	Ask HN: In what order did you learn your languages?	probinso	12.56199	-7.4955454	story	29.0	10.0	1508137775	-2.4558125
14536610	Can Neural Networks Crack Sudoku?	Can Neural Networks Crack Sudoku?	kyubyong	13.451578	-7.4106193	story	30.0	141.0	1497269455	15.076571
21681732	Django 3	Django 3	cstuder	12.836576	-6.5358667	story	30.0	657.0	1575288782	10.068562
18925190	My PHP Development Setup	My PHP Development Setup	prostoalex	12.77002	-6.634422	story	30.0	340.0	1547672552	-12.335082
30174763	Singapore prime minister Lee Hsien L	Singapore prime minister Lee Hsien Loong’s Sudoku solver (2018)	quaintdev	13.442605	-7.4067903	story	30.0	467.0	1643786636	15.077496
13209575	The Crystal Programming Language	The Crystal Programming Language	sndean	12.517219	-7.2089424	story	30.0	306.0	1482123703	-11.194447
13235004	Why the Elixir language has great po	Why the Elixir language has great potential	jswny	12.668216	-7.4633684	story	30.0	349.0	1482383446	12.938522
22947341	Build a real-time Twitter clone with	Build a real-time Twitter clone with LiveView and Phoenix 1.5	chrismccord	12.892912	-6.856494	story	30.0	548.0	1587572979	12.713367
23343799	Deno Is a Browser for Code	Deno Is a Browser for Code	beefman	12.49735	-6.440597	story	30.0	276.0	1590705564	-10.976508
38248421	Ruby on Rails: The Documentary [vide	Ruby on Rails: The Documentary [video]	541	12.7365885	-6.9572887	story	30.0	517.0	1699867101	12.334187
34354129	Ask HN: Who’s using Ruby for web dev	Ask HN: Who’s using Ruby for web development, without Ruby on Rails?	vanilla-almond	12.731215	-6.887731	story	30.0	51.0	1673534454	12.3468895
22159397	A Simplified Jira Clone Built with R	A Simplified Jira Clone Built with React/Babel and Node/TypeScript	mariuz	12.44507	-6.5213194	story	30.0	286.0	1580134714	-10.436503
